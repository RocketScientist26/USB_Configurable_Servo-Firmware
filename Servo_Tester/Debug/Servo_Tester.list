
Servo_Tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003428  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003534  08003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800356c  0800356c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800356c  0800356c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800356c  0800356c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08003580  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08003580  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9e8  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227e  00000000  00000000  0002ba1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002e898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c51  00000000  00000000  0002f348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e71e  00000000  00000000  00046f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893f7  00000000  00000000  000556b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000deaae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f94  00000000  00000000  000deb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800351c 	.word	0x0800351c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800351c 	.word	0x0800351c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <Led_Set_On>:
#include "main.h"
#include "led.h"

//Turns LED on or off
void Led_Set_On(bool on){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	if(on){
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d006      	beq.n	8000666 <Led_Set_On+0x1e>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_ON);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <Led_Set_On+0x34>)
 8000660:	f001 fbb5 	bl	8001dce <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_OFF);
	}
 8000664:	e005      	b.n	8000672 <Led_Set_On+0x2a>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_OFF);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <Led_Set_On+0x34>)
 800066e:	f001 fbae 	bl	8001dce <HAL_GPIO_WritePin>
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40011000 	.word	0x40011000

08000680 <Lock_Read>:
#include "main.h"
#include "lock.h"

//Function used only in this file
static uint8_t Lock_Read(){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	/*
		Determine pin state, depounce until get consistent result, or
		give up if retry limit reached and return that lock is disabled
	*/
	uint8_t retry = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	71fb      	strb	r3, [r7, #7]
	uint8_t level;
	uint8_t i;

	while(retry != LOCK_DEBOUNCE_RETRIES){
 800068a:	e026      	b.n	80006da <Lock_Read+0x5a>
		retry++;
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	3301      	adds	r3, #1
 8000690:	71fb      	strb	r3, [r7, #7]
		level = HAL_GPIO_ReadPin(LOCK_IN_GPIO_Port, LOCK_IN_Pin);
 8000692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000696:	4816      	ldr	r0, [pc, #88]	; (80006f0 <Lock_Read+0x70>)
 8000698:	f001 fb82 	bl	8001da0 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	71bb      	strb	r3, [r7, #6]
		i = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	717b      	strb	r3, [r7, #5]
		while(i != LOCK_DEBOUNCE_SAMPLES){
 80006a4:	e011      	b.n	80006ca <Lock_Read+0x4a>
			if(HAL_GPIO_ReadPin(LOCK_IN_GPIO_Port, LOCK_IN_Pin) != level){
 80006a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006aa:	4811      	ldr	r0, [pc, #68]	; (80006f0 <Lock_Read+0x70>)
 80006ac:	f001 fb78 	bl	8001da0 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d004      	beq.n	80006c4 <Lock_Read+0x44>
				if(retry == LOCK_DEBOUNCE_RETRIES){
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b05      	cmp	r3, #5
 80006be:	d108      	bne.n	80006d2 <Lock_Read+0x52>
					//If this is a last retry and still can't determine signal level correctly, just return low
					return LOCK_DISABLED;
 80006c0:	2301      	movs	r3, #1
 80006c2:	e010      	b.n	80006e6 <Lock_Read+0x66>
				}
				break;
			}
			i++;
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	3301      	adds	r3, #1
 80006c8:	717b      	strb	r3, [r7, #5]
		while(i != LOCK_DEBOUNCE_SAMPLES){
 80006ca:	797b      	ldrb	r3, [r7, #5]
 80006cc:	2b0a      	cmp	r3, #10
 80006ce:	d1ea      	bne.n	80006a6 <Lock_Read+0x26>
 80006d0:	e000      	b.n	80006d4 <Lock_Read+0x54>
				break;
 80006d2:	bf00      	nop
		}
		if(i == LOCK_DEBOUNCE_SAMPLES){
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	2b0a      	cmp	r3, #10
 80006d8:	d003      	beq.n	80006e2 <Lock_Read+0x62>
	while(retry != LOCK_DEBOUNCE_RETRIES){
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b05      	cmp	r3, #5
 80006de:	d1d5      	bne.n	800068c <Lock_Read+0xc>
 80006e0:	e000      	b.n	80006e4 <Lock_Read+0x64>
			break;
 80006e2:	bf00      	nop
		}
	}

	return level;
 80006e4:	79bb      	ldrb	r3, [r7, #6]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40011000 	.word	0x40011000

080006f4 <Lock_Interrupt>:

//Called on pin interrupt and also at start once
void Lock_Interrupt(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	//Determine lock switch pin is high or low
	uint8_t lock_pin_state = Lock_Read();
 80006fa:	f7ff ffc1 	bl	8000680 <Lock_Read>
 80006fe:	4603      	mov	r3, r0
 8000700:	71bb      	strb	r3, [r7, #6]
	/*
		Determine this lock switch pin state means that position
		lock is enabled or disabled. Depending on which pin state
		(high or low) means which lock state(enabled or disabled)
	*/
	bool lock_state = false;
 8000702:	2300      	movs	r3, #0
 8000704:	71fb      	strb	r3, [r7, #7]
	if(LOCK_ENABLED){
		lock_state = (bool)lock_pin_state;
	}else{
		if(lock_pin_state){
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <Lock_Interrupt+0x1e>
			lock_state = false;
 800070c:	2300      	movs	r3, #0
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	e001      	b.n	8000716 <Lock_Interrupt+0x22>
		}else{
			lock_state = true;
 8000712:	2301      	movs	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
		}
	}

	//Finally run app function
	Lock_Updated(lock_state);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f8cb 	bl	80008b4 <Lock_Updated>
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <Potentiometer_ADC_Interrupt>:
static bool init_cplt;
static uint32_t adctmp;
static uint16_t adccnt;

//ADC complete interrupt
void Potentiometer_ADC_Interrupt(){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	adctmp += HAL_ADC_GetValue(&hadc1);
 800072c:	4815      	ldr	r0, [pc, #84]	; (8000784 <Potentiometer_ADC_Interrupt+0x5c>)
 800072e:	f000 fd83 	bl	8001238 <HAL_ADC_GetValue>
 8000732:	4602      	mov	r2, r0
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <Potentiometer_ADC_Interrupt+0x60>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4413      	add	r3, r2
 800073a:	4a13      	ldr	r2, [pc, #76]	; (8000788 <Potentiometer_ADC_Interrupt+0x60>)
 800073c:	6013      	str	r3, [r2, #0]
	adccnt++;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <Potentiometer_ADC_Interrupt+0x64>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b29a      	uxth	r2, r3
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <Potentiometer_ADC_Interrupt+0x64>)
 8000748:	801a      	strh	r2, [r3, #0]
	if(adccnt == POTENTIOMETER_SAMPLE_CNT){
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <Potentiometer_ADC_Interrupt+0x64>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	2b64      	cmp	r3, #100	; 0x64
 8000750:	d113      	bne.n	800077a <Potentiometer_ADC_Interrupt+0x52>
		Potentiometer_Ready((float)adctmp / (float)POTENTIOMETER_SAMPLE_CNT);
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <Potentiometer_ADC_Interrupt+0x60>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fdae 	bl	80002b8 <__aeabi_ui2f>
 800075c:	4603      	mov	r3, r0
 800075e:	490c      	ldr	r1, [pc, #48]	; (8000790 <Potentiometer_ADC_Interrupt+0x68>)
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff feb5 	bl	80004d0 <__aeabi_fdiv>
 8000766:	4603      	mov	r3, r0
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f881 	bl	8000870 <Potentiometer_Ready>
		adccnt = 0;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <Potentiometer_ADC_Interrupt+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	801a      	strh	r2, [r3, #0]
		adctmp = 0;
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <Potentiometer_ADC_Interrupt+0x60>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
	}
	init_cplt = 1;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <Potentiometer_ADC_Interrupt+0x6c>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000034 	.word	0x20000034
 8000788:	2000002c 	.word	0x2000002c
 800078c:	20000030 	.word	0x20000030
 8000790:	42c80000 	.word	0x42c80000
 8000794:	20000028 	.word	0x20000028

08000798 <Potentiometer_Init>:

//Starts measurement and waits for first position measurement to complete
void Potentiometer_Init(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 800079c:	bf00      	nop
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <Potentiometer_Init+0x30>)
 80007a0:	f000 ffb6 	bl	8001710 <HAL_ADCEx_Calibration_Start>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f9      	bne.n	800079e <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <Potentiometer_Init+0x30>)
 80007ac:	f000 fc8e 	bl	80010cc <HAL_ADC_Start_IT>
	while(!init_cplt);
 80007b0:	bf00      	nop
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <Potentiometer_Init+0x34>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f083 0301 	eor.w	r3, r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f8      	bne.n	80007b2 <Potentiometer_Init+0x1a>
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000034 	.word	0x20000034
 80007cc:	20000028 	.word	0x20000028

080007d0 <Pwm_Set_Ms>:
#include "pwm.h"

extern TIM_HandleTypeDef htim4;

//Sets PWM output signal length in milliseconds
void Pwm_Set_Ms(float ms){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, (uint16_t)(ms * (47999.0f / 2.0f)));
 80007d8:	4908      	ldr	r1, [pc, #32]	; (80007fc <Pwm_Set_Ms+0x2c>)
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff fdc4 	bl	8000368 <__aeabi_fmul>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff10 	bl	8000608 <__aeabi_f2uiz>
 80007e8:	4603      	mov	r3, r0
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <Pwm_Set_Ms+0x30>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	46bb7f00 	.word	0x46bb7f00
 8000800:	20000064 	.word	0x20000064

08000804 <Pwm_Init>:

//Starts PWM output
void Pwm_Init(){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000808:	2100      	movs	r1, #0
 800080a:	4802      	ldr	r0, [pc, #8]	; (8000814 <Pwm_Init+0x10>)
 800080c:	f002 f934 	bl	8002a78 <HAL_TIM_PWM_Start>
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000064 	.word	0x20000064

08000818 <HAL_ADC_ConvCpltCallback>:
#include "main.h"
#include "Drivers/potentiometer.h"
#include "Drivers/lock.h"

//ADC Conversation complete interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_ADC_ConvCpltCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 800082a:	f7ff ff7d 	bl	8000728 <Potentiometer_ADC_Interrupt>
    }
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40012400 	.word	0x40012400

0800083c <HAL_GPIO_EXTI_Callback>:

//GPIO interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LOCK_IN_Pin){
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800084c:	d101      	bne.n	8000852 <HAL_GPIO_EXTI_Callback+0x16>
		Lock_Interrupt();
 800084e:	f7ff ff51 	bl	80006f4 <Lock_Interrupt>
	}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <App_Init>:
#include "System/Drivers/lock.h"
#include "System/Drivers/potentiometer.h"
#include "System/Drivers/pwm.h"

//Runs only once at start
void App_Init(){
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
	//Detect lock switch state and turn on LED if enabled
	Lock_Interrupt();
 800085e:	f7ff ff49 	bl	80006f4 <Lock_Interrupt>

	//Start potentiometer measurements (also waits until first position measurement completes)
	Potentiometer_Init();
 8000862:	f7ff ff99 	bl	8000798 <Potentiometer_Init>

	//Start PWM output
	Pwm_Init();
 8000866:	f7ff ffcd 	bl	8000804 <Pwm_Init>
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <Potentiometer_Ready>:

//Variable used only in this file
static bool lock_enabled;

//Potentiometer
void Potentiometer_Ready(float position){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if(!lock_enabled){
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <Potentiometer_Ready+0x3c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00d      	beq.n	80008a2 <Potentiometer_Ready+0x32>
		Pwm_Set_Ms(1.0f + ((1.0f / 4095.0f) * position));
 8000886:	490a      	ldr	r1, [pc, #40]	; (80008b0 <Potentiometer_Ready+0x40>)
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff fd6d 	bl	8000368 <__aeabi_fmul>
 800088e:	4603      	mov	r3, r0
 8000890:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fc5f 	bl	8000158 <__addsf3>
 800089a:	4603      	mov	r3, r0
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff97 	bl	80007d0 <Pwm_Set_Ms>
	}
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000032 	.word	0x20000032
 80008b0:	39800801 	.word	0x39800801

080008b4 <Lock_Updated>:

//Lock switch
void Lock_Updated(bool enabled){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	lock_enabled = enabled;
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <Lock_Updated+0x20>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	7013      	strb	r3, [r2, #0]
	Led_Set_On(enabled);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff febe 	bl	8000648 <Led_Set_On>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000032 	.word	0x20000032

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 fabc 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f809 	bl	80008f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 f918 	bl	8000b18 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008e8:	f000 f860 	bl	80009ac <MX_ADC1_Init>
  MX_TIM4_Init();
 80008ec:	f000 f89c 	bl	8000a28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 80008f0:	f7ff ffb3 	bl	800085a <App_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <main+0x1c>

080008f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b094      	sub	sp, #80	; 0x50
 80008fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000900:	2228      	movs	r2, #40	; 0x28
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f002 fe01 	bl	800350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000926:	2301      	movs	r3, #1
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000942:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fa6f 	bl	8001e30 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000958:	f000 f94c 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2102      	movs	r1, #2
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fcdb 	bl	8002334 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000984:	f000 f936 	bl	8000bf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000988:	2302      	movs	r3, #2
 800098a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800098c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000990:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fe51 	bl	800263c <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009a0:	f000 f928 	bl	8000bf4 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3750      	adds	r7, #80	; 0x50
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <MX_ADC1_Init+0x78>)
 80009c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_ADC1_Init+0x74>)
 80009ea:	f000 fa97 	bl	8000f1c <HAL_ADC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 f8fe 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a00:	2307      	movs	r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_ADC1_Init+0x74>)
 8000a0a:	f000 fced 	bl	80013e8 <HAL_ADC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a14:	f000 f8ee 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000034 	.word	0x20000034
 8000a24:	40012400 	.word	0x40012400

08000a28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a58:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 47999;
 8000a6a:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a6c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000a70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a7e:	4824      	ldr	r0, [pc, #144]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a80:	f001 ff52 	bl	8002928 <HAL_TIM_Base_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a8a:	f000 f8b3 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481d      	ldr	r0, [pc, #116]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a9c:	f002 f94c 	bl	8002d38 <HAL_TIM_ConfigClockSource>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000aa6:	f000 f8a5 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000aaa:	4819      	ldr	r0, [pc, #100]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000aac:	f001 ff8b 	bl	80029c6 <HAL_TIM_PWM_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ab6:	f000 f89d 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000aca:	f002 fc9d 	bl	8003408 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ad4:	f000 f88e 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad8:	2360      	movs	r3, #96	; 0x60
 8000ada:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 23999;
 8000adc:	f645 53bf 	movw	r3, #23999	; 0x5dbf
 8000ae0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000af2:	f002 f863 	bl	8002bbc <HAL_TIM_PWM_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000afc:	f000 f87a 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000b02:	f000 f911 	bl	8000d28 <HAL_TIM_MspPostInit>

}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	; 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000064 	.word	0x20000064
 8000b14:	40000800 	.word	0x40000800

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a2d      	ldr	r2, [pc, #180]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0310 	and.w	r3, r3, #16
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b4a:	f043 0320 	orr.w	r3, r3, #32
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0320 	and.w	r3, r3, #32
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	4816      	ldr	r0, [pc, #88]	; (8000bec <MX_GPIO_Init+0xd4>)
 8000b94:	f001 f91b 	bl	8001dce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480e      	ldr	r0, [pc, #56]	; (8000bec <MX_GPIO_Init+0xd4>)
 8000bb2:	f000 ff71 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_IN_Pin */
  GPIO_InitStruct.Pin = LOCK_IN_Pin;
 8000bb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_GPIO_Init+0xd8>)
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOCK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <MX_GPIO_Init+0xd4>)
 8000bcc:	f000 ff64 	bl	8001a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	2028      	movs	r0, #40	; 0x28
 8000bd6:	f000 ff28 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bda:	2028      	movs	r0, #40	; 0x28
 8000bdc:	f000 ff41 	bl	8001a62 <HAL_NVIC_EnableIRQ>

}
 8000be0:	bf00      	nop
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	10310000 	.word	0x10310000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_MspInit+0x5c>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_MspInit+0x60>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_MspInit+0x60>)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010000 	.word	0x40010000

08000c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <HAL_ADC_MspInit+0x7c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d129      	bne.n	8000cd8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_ADC_MspInit+0x80>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <HAL_ADC_MspInit+0x80>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_ADC_MspInit+0x80>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_ADC_MspInit+0x80>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_ADC_MspInit+0x80>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_ADC_MspInit+0x80>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_IN_Pin;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_IN_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_ADC_MspInit+0x84>)
 8000cc4:	f000 fee8 	bl	8001a98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2012      	movs	r0, #18
 8000cce:	f000 feac 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000cd2:	2012      	movs	r0, #18
 8000cd4:	f000 fec5 	bl	8001a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40012400 	.word	0x40012400
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010800 	.word	0x40010800

08000cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_TIM_Base_MspInit+0x34>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10b      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x38>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_TIM_Base_MspInit+0x38>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_TIM_Base_MspInit+0x38>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40000800 	.word	0x40000800
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <HAL_TIM_MspPostInit+0x58>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d117      	bne.n	8000d78 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_TIM_MspPostInit+0x5c>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_TIM_MspPostInit+0x5c>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_TIM_MspPostInit+0x5c>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_TIM_MspPostInit+0x60>)
 8000d74:	f000 fe90 	bl	8001a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40000800 	.word	0x40000800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010c00 	.word	0x40010c00

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 f887 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <ADC1_2_IRQHandler+0x10>)
 8000de2:	f000 fa35 	bl	8001250 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000034 	.word	0x20000034

08000df0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LOCK_IN_Pin);
 8000df4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000df8:	f001 f802 	bl	8001e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	; (8000e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e32:	f7ff ffe5 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e36:	f002 fb45 	bl	80034c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3a:	f7ff fd4d 	bl	80008d8 <main>
  bx lr
 8000e3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e48:	08003574 	.word	0x08003574
  ldr r2, =_sbss
 8000e4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e50:	200000b0 	.word	0x200000b0

08000e54 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <CAN1_RX1_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x28>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x28>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 fdd3 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fec4 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40022000 	.word	0x40022000

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fdeb 	bl	8001a7e <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 fdb3 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x1c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_IncTick+0x20>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <HAL_IncTick+0x20>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	20000008 	.word	0x20000008
 8000f04:	200000ac 	.word	0x200000ac

08000f08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <HAL_GetTick+0x10>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	200000ac 	.word	0x200000ac

08000f1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0be      	b.n	80010bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d109      	bne.n	8000f60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fe82 	bl	8000c64 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 fb93 	bl	800168c <ADC_ConversionStop_Disable>
 8000f66:	4603      	mov	r3, r0
 8000f68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f040 8099 	bne.w	80010aa <HAL_ADC_Init+0x18e>
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f040 8095 	bne.w	80010aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f88:	f023 0302 	bic.w	r3, r3, #2
 8000f8c:	f043 0202 	orr.w	r2, r3, #2
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7b1b      	ldrb	r3, [r3, #12]
 8000fa2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fa4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fb4:	d003      	beq.n	8000fbe <HAL_ADC_Init+0xa2>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d102      	bne.n	8000fc4 <HAL_ADC_Init+0xa8>
 8000fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc2:	e000      	b.n	8000fc6 <HAL_ADC_Init+0xaa>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7d1b      	ldrb	r3, [r3, #20]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d119      	bne.n	8001008 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7b1b      	ldrb	r3, [r3, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d109      	bne.n	8000ff0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	035a      	lsls	r2, r3, #13
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	e00b      	b.n	8001008 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	f043 0220 	orr.w	r2, r3, #32
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001000:	f043 0201 	orr.w	r2, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	430a      	orrs	r2, r1
 800101a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_ADC_Init+0x1a8>)
 8001024:	4013      	ands	r3, r2
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	430b      	orrs	r3, r1
 800102e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001038:	d003      	beq.n	8001042 <HAL_ADC_Init+0x126>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d104      	bne.n	800104c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	3b01      	subs	r3, #1
 8001048:	051b      	lsls	r3, r3, #20
 800104a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001052:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	430a      	orrs	r2, r1
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_ADC_Init+0x1ac>)
 8001068:	4013      	ands	r3, r2
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	429a      	cmp	r2, r3
 800106e:	d10b      	bne.n	8001088 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107a:	f023 0303 	bic.w	r3, r3, #3
 800107e:	f043 0201 	orr.w	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001086:	e018      	b.n	80010ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108c:	f023 0312 	bic.w	r3, r3, #18
 8001090:	f043 0210 	orr.w	r2, r3, #16
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	f043 0201 	orr.w	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010a8:	e007      	b.n	80010ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	f043 0210 	orr.w	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	ffe1f7fd 	.word	0xffe1f7fd
 80010c8:	ff1f0efe 	.word	0xff1f0efe

080010cc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Start_IT+0x1a>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e0a0      	b.n	8001228 <HAL_ADC_Start_IT+0x15c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 fa72 	bl	80015d8 <ADC_Enable>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 808f 	bne.w	800121e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001104:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001108:	f023 0301 	bic.w	r3, r3, #1
 800110c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a45      	ldr	r2, [pc, #276]	; (8001230 <HAL_ADC_Start_IT+0x164>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d105      	bne.n	800112a <HAL_ADC_Start_IT+0x5e>
 800111e:	4b45      	ldr	r3, [pc, #276]	; (8001234 <HAL_ADC_Start_IT+0x168>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d115      	bne.n	8001156 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001140:	2b00      	cmp	r3, #0
 8001142:	d026      	beq.n	8001192 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800114c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001154:	e01d      	b.n	8001192 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a33      	ldr	r2, [pc, #204]	; (8001234 <HAL_ADC_Start_IT+0x168>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d004      	beq.n	8001176 <HAL_ADC_Start_IT+0xaa>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a2f      	ldr	r2, [pc, #188]	; (8001230 <HAL_ADC_Start_IT+0x164>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10d      	bne.n	8001192 <HAL_ADC_Start_IT+0xc6>
 8001176:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <HAL_ADC_Start_IT+0x168>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001186:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800118a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	f023 0206 	bic.w	r2, r3, #6
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011aa:	e002      	b.n	80011b2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f06f 0202 	mvn.w	r2, #2
 80011c2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0220 	orr.w	r2, r2, #32
 80011d2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011e2:	d113      	bne.n	800120c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_ADC_Start_IT+0x164>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d105      	bne.n	80011fa <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_ADC_Start_IT+0x168>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d108      	bne.n	800120c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	e00c      	b.n	8001226 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	e003      	b.n	8001226 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40012800 	.word	0x40012800
 8001234:	40012400 	.word	0x40012400

08001238 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	2b20      	cmp	r3, #32
 8001264:	d140      	bne.n	80012e8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b02      	cmp	r3, #2
 8001272:	d139      	bne.n	80012e8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	d105      	bne.n	800128c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001296:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800129a:	d11d      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d119      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0220 	bic.w	r2, r2, #32
 80012b2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	f043 0201 	orr.w	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fa9d 	bl	8000818 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f06f 0212 	mvn.w	r2, #18
 80012e6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	2b80      	cmp	r3, #128	; 0x80
 80012f4:	d14f      	bne.n	8001396 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b04      	cmp	r3, #4
 8001302:	d148      	bne.n	8001396 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	2b00      	cmp	r3, #0
 800130e:	d105      	bne.n	800131c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001326:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800132a:	d012      	beq.n	8001352 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001336:	2b00      	cmp	r3, #0
 8001338:	d125      	bne.n	8001386 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001344:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001348:	d11d      	bne.n	8001386 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800134e:	2b00      	cmp	r3, #0
 8001350:	d119      	bne.n	8001386 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001360:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fa6e 	bl	8001868 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f06f 020c 	mvn.w	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a0:	2b40      	cmp	r3, #64	; 0x40
 80013a2:	d114      	bne.n	80013ce <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10d      	bne.n	80013ce <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f809 	bl	80013d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f06f 0201 	mvn.w	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x20>
 8001404:	2302      	movs	r3, #2
 8001406:	e0dc      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x1da>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b06      	cmp	r3, #6
 8001416:	d81c      	bhi.n	8001452 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3b05      	subs	r3, #5
 800142a:	221f      	movs	r2, #31
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	4019      	ands	r1, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	3b05      	subs	r3, #5
 8001444:	fa00 f203 	lsl.w	r2, r0, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
 8001450:	e03c      	b.n	80014cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d81c      	bhi.n	8001494 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b23      	subs	r3, #35	; 0x23
 800146c:	221f      	movs	r2, #31
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	4019      	ands	r1, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	3b23      	subs	r3, #35	; 0x23
 8001486:	fa00 f203 	lsl.w	r2, r0, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
 8001492:	e01b      	b.n	80014cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b41      	subs	r3, #65	; 0x41
 80014a6:	221f      	movs	r2, #31
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4019      	ands	r1, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	3b41      	subs	r3, #65	; 0x41
 80014c0:	fa00 f203 	lsl.w	r2, r0, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	d91c      	bls.n	800150e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68d9      	ldr	r1, [r3, #12]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	3b1e      	subs	r3, #30
 80014e6:	2207      	movs	r2, #7
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	4019      	ands	r1, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6898      	ldr	r0, [r3, #8]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	3b1e      	subs	r3, #30
 8001500:	fa00 f203 	lsl.w	r2, r0, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	e019      	b.n	8001542 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6919      	ldr	r1, [r3, #16]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	2207      	movs	r2, #7
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	4019      	ands	r1, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	6898      	ldr	r0, [r3, #8]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b10      	cmp	r3, #16
 8001548:	d003      	beq.n	8001552 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800154e:	2b11      	cmp	r3, #17
 8001550:	d132      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <HAL_ADC_ConfigChannel+0x1e4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d125      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d126      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001578:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b10      	cmp	r3, #16
 8001580:	d11a      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001588:	fba2 2303 	umull	r2, r3, r2, r3
 800158c:	0c9a      	lsrs	r2, r3, #18
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001598:	e002      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3b01      	subs	r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <HAL_ADC_ConfigChannel+0x1b2>
 80015a6:	e007      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f043 0220 	orr.w	r2, r3, #32
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40012400 	.word	0x40012400
 80015d0:	20000000 	.word	0x20000000
 80015d4:	431bde83 	.word	0x431bde83

080015d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d040      	beq.n	8001678 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <ADC_Enable+0xac>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <ADC_Enable+0xb0>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	0c9b      	lsrs	r3, r3, #18
 8001612:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001614:	e002      	b.n	800161c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3b01      	subs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001622:	f7ff fc71 	bl	8000f08 <HAL_GetTick>
 8001626:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001628:	e01f      	b.n	800166a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800162a:	f7ff fc6d 	bl	8000f08 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d918      	bls.n	800166a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d011      	beq.n	800166a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f043 0210 	orr.w	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	f043 0201 	orr.w	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e007      	b.n	800167a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b01      	cmp	r3, #1
 8001676:	d1d8      	bne.n	800162a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000000 	.word	0x20000000
 8001688:	431bde83 	.word	0x431bde83

0800168c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d12e      	bne.n	8001704 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0201 	bic.w	r2, r2, #1
 80016b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016b6:	f7ff fc27 	bl	8000f08 <HAL_GetTick>
 80016ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016bc:	e01b      	b.n	80016f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016be:	f7ff fc23 	bl	8000f08 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d914      	bls.n	80016f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d10d      	bne.n	80016f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	f043 0210 	orr.w	r2, r3, #16
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	f043 0201 	orr.w	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e007      	b.n	8001706 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d0dc      	beq.n	80016be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADCEx_Calibration_Start+0x1e>
 800172a:	2302      	movs	r3, #2
 800172c:	e095      	b.n	800185a <HAL_ADCEx_Calibration_Start+0x14a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa8 	bl	800168c <ADC_ConversionStop_Disable>
 800173c:	4603      	mov	r3, r0
 800173e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 8084 	bne.w	8001850 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001750:	f023 0302 	bic.w	r3, r3, #2
 8001754:	f043 0202 	orr.w	r2, r3, #2
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800175c:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_ADCEx_Calibration_Start+0x154>)
 800175e:	681c      	ldr	r4, [r3, #0]
 8001760:	2002      	movs	r0, #2
 8001762:	f001 f821 	bl	80027a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001766:	4603      	mov	r3, r0
 8001768:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800176c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800176e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001770:	e002      	b.n	8001778 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3b01      	subs	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f9      	bne.n	8001772 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ff2a 	bl	80015d8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0208 	orr.w	r2, r2, #8
 8001792:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001794:	f7ff fbb8 	bl	8000f08 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800179a:	e01b      	b.n	80017d4 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800179c:	f7ff fbb4 	bl	8000f08 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b0a      	cmp	r3, #10
 80017a8:	d914      	bls.n	80017d4 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00d      	beq.n	80017d4 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f023 0312 	bic.w	r3, r3, #18
 80017c0:	f043 0210 	orr.w	r2, r3, #16
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e042      	b.n	800185a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1dc      	bne.n	800179c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0204 	orr.w	r2, r2, #4
 80017f0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80017f2:	f7ff fb89 	bl	8000f08 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80017f8:	e01b      	b.n	8001832 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80017fa:	f7ff fb85 	bl	8000f08 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b0a      	cmp	r3, #10
 8001806:	d914      	bls.n	8001832 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	f023 0312 	bic.w	r3, r3, #18
 800181e:	f043 0210 	orr.w	r2, r3, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e013      	b.n	800185a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1dc      	bne.n	80017fa <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	f023 0303 	bic.w	r3, r3, #3
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001858:	7dfb      	ldrb	r3, [r7, #23]
}
 800185a:	4618      	mov	r0, r3
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}
 8001862:	bf00      	nop
 8001864:	20000000 	.word	0x20000000

08001868 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
	...

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4906      	ldr	r1, [pc, #24]	; (8001914 <__NVIC_EnableIRQ+0x34>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff90 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff2d 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff42 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff90 	bl	800196c <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5f 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff35 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b08b      	sub	sp, #44	; 0x2c
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	e169      	b.n	8001d80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aac:	2201      	movs	r2, #1
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8158 	bne.w	8001d7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4a9a      	ldr	r2, [pc, #616]	; (8001d38 <HAL_GPIO_Init+0x2a0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d05e      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
 8001ad4:	4a98      	ldr	r2, [pc, #608]	; (8001d38 <HAL_GPIO_Init+0x2a0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d875      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001ada:	4a98      	ldr	r2, [pc, #608]	; (8001d3c <HAL_GPIO_Init+0x2a4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d058      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
 8001ae0:	4a96      	ldr	r2, [pc, #600]	; (8001d3c <HAL_GPIO_Init+0x2a4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d86f      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001ae6:	4a96      	ldr	r2, [pc, #600]	; (8001d40 <HAL_GPIO_Init+0x2a8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d052      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
 8001aec:	4a94      	ldr	r2, [pc, #592]	; (8001d40 <HAL_GPIO_Init+0x2a8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d869      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001af2:	4a94      	ldr	r2, [pc, #592]	; (8001d44 <HAL_GPIO_Init+0x2ac>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d04c      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
 8001af8:	4a92      	ldr	r2, [pc, #584]	; (8001d44 <HAL_GPIO_Init+0x2ac>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d863      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001afe:	4a92      	ldr	r2, [pc, #584]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d046      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
 8001b04:	4a90      	ldr	r2, [pc, #576]	; (8001d48 <HAL_GPIO_Init+0x2b0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d85d      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001b0a:	2b12      	cmp	r3, #18
 8001b0c:	d82a      	bhi.n	8001b64 <HAL_GPIO_Init+0xcc>
 8001b0e:	2b12      	cmp	r3, #18
 8001b10:	d859      	bhi.n	8001bc6 <HAL_GPIO_Init+0x12e>
 8001b12:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <HAL_GPIO_Init+0x80>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001b93 	.word	0x08001b93
 8001b1c:	08001b6d 	.word	0x08001b6d
 8001b20:	08001b7f 	.word	0x08001b7f
 8001b24:	08001bc1 	.word	0x08001bc1
 8001b28:	08001bc7 	.word	0x08001bc7
 8001b2c:	08001bc7 	.word	0x08001bc7
 8001b30:	08001bc7 	.word	0x08001bc7
 8001b34:	08001bc7 	.word	0x08001bc7
 8001b38:	08001bc7 	.word	0x08001bc7
 8001b3c:	08001bc7 	.word	0x08001bc7
 8001b40:	08001bc7 	.word	0x08001bc7
 8001b44:	08001bc7 	.word	0x08001bc7
 8001b48:	08001bc7 	.word	0x08001bc7
 8001b4c:	08001bc7 	.word	0x08001bc7
 8001b50:	08001bc7 	.word	0x08001bc7
 8001b54:	08001bc7 	.word	0x08001bc7
 8001b58:	08001bc7 	.word	0x08001bc7
 8001b5c:	08001b75 	.word	0x08001b75
 8001b60:	08001b89 	.word	0x08001b89
 8001b64:	4a79      	ldr	r2, [pc, #484]	; (8001d4c <HAL_GPIO_Init+0x2b4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b6a:	e02c      	b.n	8001bc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	623b      	str	r3, [r7, #32]
          break;
 8001b72:	e029      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	623b      	str	r3, [r7, #32]
          break;
 8001b7c:	e024      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	3308      	adds	r3, #8
 8001b84:	623b      	str	r3, [r7, #32]
          break;
 8001b86:	e01f      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	330c      	adds	r3, #12
 8001b8e:	623b      	str	r3, [r7, #32]
          break;
 8001b90:	e01a      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	623b      	str	r3, [r7, #32]
          break;
 8001b9e:	e013      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	611a      	str	r2, [r3, #16]
          break;
 8001bb2:	e009      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	615a      	str	r2, [r3, #20]
          break;
 8001bbe:	e003      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
          break;
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x130>
          break;
 8001bc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2bff      	cmp	r3, #255	; 0xff
 8001bcc:	d801      	bhi.n	8001bd2 <HAL_GPIO_Init+0x13a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	e001      	b.n	8001bd6 <HAL_GPIO_Init+0x13e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2bff      	cmp	r3, #255	; 0xff
 8001bdc:	d802      	bhi.n	8001be4 <HAL_GPIO_Init+0x14c>
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x152>
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	3b08      	subs	r3, #8
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	210f      	movs	r1, #15
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	6a39      	ldr	r1, [r7, #32]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	431a      	orrs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80b1 	beq.w	8001d7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c18:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <HAL_GPIO_Init+0x2b8>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_GPIO_Init+0x2b8>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <HAL_GPIO_Init+0x2b8>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c30:	4a48      	ldr	r2, [pc, #288]	; (8001d54 <HAL_GPIO_Init+0x2bc>)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a40      	ldr	r2, [pc, #256]	; (8001d58 <HAL_GPIO_Init+0x2c0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d013      	beq.n	8001c84 <HAL_GPIO_Init+0x1ec>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a3f      	ldr	r2, [pc, #252]	; (8001d5c <HAL_GPIO_Init+0x2c4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00d      	beq.n	8001c80 <HAL_GPIO_Init+0x1e8>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a3e      	ldr	r2, [pc, #248]	; (8001d60 <HAL_GPIO_Init+0x2c8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <HAL_GPIO_Init+0x1e4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a3d      	ldr	r2, [pc, #244]	; (8001d64 <HAL_GPIO_Init+0x2cc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_GPIO_Init+0x1e0>
 8001c74:	2303      	movs	r3, #3
 8001c76:	e006      	b.n	8001c86 <HAL_GPIO_Init+0x1ee>
 8001c78:	2304      	movs	r3, #4
 8001c7a:	e004      	b.n	8001c86 <HAL_GPIO_Init+0x1ee>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e002      	b.n	8001c86 <HAL_GPIO_Init+0x1ee>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_GPIO_Init+0x1ee>
 8001c84:	2300      	movs	r3, #0
 8001c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c88:	f002 0203 	and.w	r2, r2, #3
 8001c8c:	0092      	lsls	r2, r2, #2
 8001c8e:	4093      	lsls	r3, r2
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c96:	492f      	ldr	r1, [pc, #188]	; (8001d54 <HAL_GPIO_Init+0x2bc>)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	492c      	ldr	r1, [pc, #176]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4928      	ldr	r1, [pc, #160]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd8:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	4922      	ldr	r1, [pc, #136]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	491e      	ldr	r1, [pc, #120]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	4918      	ldr	r1, [pc, #96]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4914      	ldr	r1, [pc, #80]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d021      	beq.n	8001d6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	490e      	ldr	r1, [pc, #56]	; (8001d68 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
 8001d34:	e021      	b.n	8001d7a <HAL_GPIO_Init+0x2e2>
 8001d36:	bf00      	nop
 8001d38:	10320000 	.word	0x10320000
 8001d3c:	10310000 	.word	0x10310000
 8001d40:	10220000 	.word	0x10220000
 8001d44:	10210000 	.word	0x10210000
 8001d48:	10120000 	.word	0x10120000
 8001d4c:	10110000 	.word	0x10110000
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40010800 	.word	0x40010800
 8001d5c:	40010c00 	.word	0x40010c00
 8001d60:	40011000 	.word	0x40011000
 8001d64:	40011400 	.word	0x40011400
 8001d68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_GPIO_Init+0x304>)
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	4909      	ldr	r1, [pc, #36]	; (8001d9c <HAL_GPIO_Init+0x304>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f47f ae8e 	bne.w	8001aac <HAL_GPIO_Init+0x14>
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	372c      	adds	r7, #44	; 0x2c
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	40010400 	.word	0x40010400

08001da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	e001      	b.n	8001dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	807b      	strh	r3, [r7, #2]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dde:	787b      	ldrb	r3, [r7, #1]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de4:	887a      	ldrh	r2, [r7, #2]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dea:	e003      	b.n	8001df4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	041a      	lsls	r2, r3, #16
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	611a      	str	r2, [r3, #16]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fd0c 	bl	800083c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40010400 	.word	0x40010400

08001e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e272      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8087 	beq.w	8001f5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e50:	4b92      	ldr	r3, [pc, #584]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d00c      	beq.n	8001e76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e5c:	4b8f      	ldr	r3, [pc, #572]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d112      	bne.n	8001e8e <HAL_RCC_OscConfig+0x5e>
 8001e68:	4b8c      	ldr	r3, [pc, #560]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d10b      	bne.n	8001e8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e76:	4b89      	ldr	r3, [pc, #548]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d06c      	beq.n	8001f5c <HAL_RCC_OscConfig+0x12c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d168      	bne.n	8001f5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e24c      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x76>
 8001e98:	4b80      	ldr	r3, [pc, #512]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a7f      	ldr	r2, [pc, #508]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e02e      	b.n	8001f04 <HAL_RCC_OscConfig+0xd4>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x98>
 8001eae:	4b7b      	ldr	r3, [pc, #492]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a7a      	ldr	r2, [pc, #488]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b78      	ldr	r3, [pc, #480]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a77      	ldr	r2, [pc, #476]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e01d      	b.n	8001f04 <HAL_RCC_OscConfig+0xd4>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0xbc>
 8001ed2:	4b72      	ldr	r3, [pc, #456]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a71      	ldr	r2, [pc, #452]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b6f      	ldr	r3, [pc, #444]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6e      	ldr	r2, [pc, #440]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0xd4>
 8001eec:	4b6b      	ldr	r3, [pc, #428]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a6a      	ldr	r2, [pc, #424]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b68      	ldr	r3, [pc, #416]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a67      	ldr	r2, [pc, #412]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7fe fffc 	bl	8000f08 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7fe fff8 	bl	8000f08 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e200      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	4b5d      	ldr	r3, [pc, #372]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0xe4>
 8001f32:	e014      	b.n	8001f5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe ffe8 	bl	8000f08 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7fe ffe4 	bl	8000f08 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1ec      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x10c>
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d063      	beq.n	8002032 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f76:	4b49      	ldr	r3, [pc, #292]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d11c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x18c>
 8001f82:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d116      	bne.n	8001fbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	4b43      	ldr	r3, [pc, #268]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x176>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e1c0      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4939      	ldr	r1, [pc, #228]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	e03a      	b.n	8002032 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7fe ff9d 	bl	8000f08 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7fe ff99 	bl	8000f08 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1a1      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4927      	ldr	r1, [pc, #156]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002006:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <HAL_RCC_OscConfig+0x270>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe ff7c 	bl	8000f08 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002014:	f7fe ff78 	bl	8000f08 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e180      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03a      	beq.n	80020b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d019      	beq.n	800207a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7fe ff5c 	bl	8000f08 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7fe ff58 	bl	8000f08 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e160      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_RCC_OscConfig+0x26c>)
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002072:	2001      	movs	r0, #1
 8002074:	f000 fac4 	bl	8002600 <RCC_Delay>
 8002078:	e01c      	b.n	80020b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_RCC_OscConfig+0x274>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002080:	f7fe ff42 	bl	8000f08 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002086:	e00f      	b.n	80020a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002088:	f7fe ff3e 	bl	8000f08 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d908      	bls.n	80020a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e146      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	42420000 	.word	0x42420000
 80020a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	4b92      	ldr	r3, [pc, #584]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1e9      	bne.n	8002088 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a6 	beq.w	800220e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10d      	bne.n	80020ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4a87      	ldr	r2, [pc, #540]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	61d3      	str	r3, [r2, #28]
 80020de:	4b85      	ldr	r3, [pc, #532]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <HAL_RCC_OscConfig+0x4c8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d118      	bne.n	800212c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fa:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <HAL_RCC_OscConfig+0x4c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7e      	ldr	r2, [pc, #504]	; (80022f8 <HAL_RCC_OscConfig+0x4c8>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7fe feff 	bl	8000f08 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7fe fefb 	bl	8000f08 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b64      	cmp	r3, #100	; 0x64
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e103      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x4c8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x312>
 8002134:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a6e      	ldr	r2, [pc, #440]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6213      	str	r3, [r2, #32]
 8002140:	e02d      	b.n	800219e <HAL_RCC_OscConfig+0x36e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x334>
 800214a:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a69      	ldr	r2, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6213      	str	r3, [r2, #32]
 8002156:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a66      	ldr	r2, [pc, #408]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	e01c      	b.n	800219e <HAL_RCC_OscConfig+0x36e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d10c      	bne.n	8002186 <HAL_RCC_OscConfig+0x356>
 800216c:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4a60      	ldr	r2, [pc, #384]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6213      	str	r3, [r2, #32]
 8002178:	4b5e      	ldr	r3, [pc, #376]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a5d      	ldr	r2, [pc, #372]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	e00b      	b.n	800219e <HAL_RCC_OscConfig+0x36e>
 8002186:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4a5a      	ldr	r2, [pc, #360]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6213      	str	r3, [r2, #32]
 8002192:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d015      	beq.n	80021d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7fe feaf 	bl	8000f08 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7fe feab 	bl	8000f08 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0b1      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ee      	beq.n	80021ae <HAL_RCC_OscConfig+0x37e>
 80021d0:	e014      	b.n	80021fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7fe fe99 	bl	8000f08 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7fe fe95 	bl	8000f08 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e09b      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ee      	bne.n	80021da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d105      	bne.n	800220e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002202:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8087 	beq.w	8002326 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002218:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d061      	beq.n	80022e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d146      	bne.n	80022ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_RCC_OscConfig+0x4cc>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe fe69 	bl	8000f08 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7fe fe65 	bl	8000f08 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e06d      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224c:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f0      	bne.n	800223a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002260:	d108      	bne.n	8002274 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	4921      	ldr	r1, [pc, #132]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a19      	ldr	r1, [r3, #32]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	430b      	orrs	r3, r1
 8002286:	491b      	ldr	r1, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_RCC_OscConfig+0x4cc>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7fe fe39 	bl	8000f08 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229a:	f7fe fe35 	bl	8000f08 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e03d      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x46a>
 80022b8:	e035      	b.n	8002326 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_OscConfig+0x4cc>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fe22 	bl	8000f08 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe fe1e 	bl	8000f08 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e026      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x498>
 80022e6:	e01e      	b.n	8002326 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e019      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
 80022fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_OscConfig+0x500>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	429a      	cmp	r2, r3
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0d0      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d910      	bls.n	8002378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	4965      	ldr	r1, [pc, #404]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b63      	ldr	r3, [pc, #396]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0b8      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002390:	4b59      	ldr	r3, [pc, #356]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a58      	ldr	r2, [pc, #352]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800239a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a8:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a52      	ldr	r2, [pc, #328]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	494d      	ldr	r1, [pc, #308]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d040      	beq.n	8002454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d115      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e073      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06b      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4936      	ldr	r1, [pc, #216]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002424:	f7fe fd70 	bl	8000f08 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7fe fd6c 	bl	8000f08 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e053      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d210      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4922      	ldr	r1, [pc, #136]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e032      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4916      	ldr	r1, [pc, #88]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	490e      	ldr	r1, [pc, #56]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c2:	f000 f821 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	490a      	ldr	r1, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	5ccb      	ldrb	r3, [r1, r3]
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1cc>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1d0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fcce 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40021000 	.word	0x40021000
 80024fc:	08003554 	.word	0x08003554
 8002500:	20000000 	.word	0x20000000
 8002504:	20000004 	.word	0x20000004

08002508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b490      	push	{r4, r7}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002510:	1d3c      	adds	r4, r7, #4
 8002512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002518:	f240 2301 	movw	r3, #513	; 0x201
 800251c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b04      	cmp	r3, #4
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x40>
 8002542:	2b08      	cmp	r3, #8
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x46>
 8002546:	e02b      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002548:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800254a:	623b      	str	r3, [r7, #32]
      break;
 800254c:	e02b      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	0c9b      	lsrs	r3, r3, #18
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3328      	adds	r3, #40	; 0x28
 8002558:	443b      	add	r3, r7
 800255a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800255e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d012      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	0c5b      	lsrs	r3, r3, #17
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	3328      	adds	r3, #40	; 0x28
 8002576:	443b      	add	r3, r7
 8002578:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800257c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002582:	fb03 f202 	mul.w	r2, r3, r2
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	e004      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	623b      	str	r3, [r7, #32]
      break;
 800259e:	e002      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80025a2:	623b      	str	r3, [r7, #32]
      break;
 80025a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a6:	6a3b      	ldr	r3, [r7, #32]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc90      	pop	{r4, r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	08003534 	.word	0x08003534
 80025b8:	40021000 	.word	0x40021000
 80025bc:	007a1200 	.word	0x007a1200
 80025c0:	003d0900 	.word	0x003d0900

080025c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b02      	ldr	r3, [pc, #8]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	20000000 	.word	0x20000000

080025d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025dc:	f7ff fff2 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	0adb      	lsrs	r3, r3, #11
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08003564 	.word	0x08003564

08002600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <RCC_Delay+0x34>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <RCC_Delay+0x38>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0a5b      	lsrs	r3, r3, #9
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800261c:	bf00      	nop
  }
  while (Delay --);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e5a      	subs	r2, r3, #1
 8002622:	60fa      	str	r2, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f9      	bne.n	800261c <RCC_Delay+0x1c>
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	20000000 	.word	0x20000000
 8002638:	10624dd3 	.word	0x10624dd3

0800263c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d07d      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265c:	4b4f      	ldr	r3, [pc, #316]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	4b4c      	ldr	r3, [pc, #304]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	4a4b      	ldr	r2, [pc, #300]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002672:	61d3      	str	r3, [r2, #28]
 8002674:	4b49      	ldr	r3, [pc, #292]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002680:	2301      	movs	r3, #1
 8002682:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b46      	ldr	r3, [pc, #280]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d118      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002690:	4b43      	ldr	r3, [pc, #268]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a42      	ldr	r2, [pc, #264]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269c:	f7fe fc34 	bl	8000f08 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	e008      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7fe fc30 	bl	8000f08 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e06d      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026c2:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d02e      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d027      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ea:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d014      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe fbff 	bl	8000f08 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fbfb 	bl	8000f08 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e036      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4917      	ldr	r1, [pc, #92]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273e:	4313      	orrs	r3, r2
 8002740:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	490b      	ldr	r1, [pc, #44]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4904      	ldr	r1, [pc, #16]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
 80027a4:	42420440 	.word	0x42420440

080027a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b08d      	sub	sp, #52	; 0x34
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027b0:	4b58      	ldr	r3, [pc, #352]	; (8002914 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80027b2:	f107 040c 	add.w	r4, r7, #12
 80027b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027bc:	f240 2301 	movw	r3, #513	; 0x201
 80027c0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	f200 808e 	bhi.w	8002900 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d049      	beq.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d079      	beq.n	80028e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80027f0:	e086      	b.n	8002900 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80027f8:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d07f      	beq.n	8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	0c9b      	lsrs	r3, r3, #18
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	3330      	adds	r3, #48	; 0x30
 800280e:	443b      	add	r3, r7
 8002810:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002814:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d017      	beq.n	8002850 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002820:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c5b      	lsrs	r3, r3, #17
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	3330      	adds	r3, #48	; 0x30
 800282c:	443b      	add	r3, r7
 800282e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00d      	beq.n	800285a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800283e:	4a37      	ldr	r2, [pc, #220]	; (800291c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	fbb2 f2f3 	udiv	r2, r2, r3
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284e:	e004      	b.n	800285a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	4a33      	ldr	r2, [pc, #204]	; (8002920 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800285a:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002866:	d102      	bne.n	800286e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800286c:	e04a      	b.n	8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800287c:	e042      	b.n	8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288e:	d108      	bne.n	80028a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800289a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a0:	e01f      	b.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ac:	d109      	bne.n	80028c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80028ba:	f649 4340 	movw	r3, #40000	; 0x9c40
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c0:	e00f      	b.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028cc:	d11c      	bne.n	8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80028da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028e0:	e012      	b.n	8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80028e2:	e011      	b.n	8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80028e4:	f7ff fe78 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	0b9b      	lsrs	r3, r3, #14
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	3301      	adds	r3, #1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028fe:	e004      	b.n	800290a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002900:	bf00      	nop
 8002902:	e002      	b.n	800290a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002904:	bf00      	nop
 8002906:	e000      	b.n	800290a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002908:	bf00      	nop
    }
  }
  return (frequency);
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800290c:	4618      	mov	r0, r3
 800290e:	3734      	adds	r7, #52	; 0x34
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	08003544 	.word	0x08003544
 8002918:	40021000 	.word	0x40021000
 800291c:	007a1200 	.word	0x007a1200
 8002920:	003d0900 	.word	0x003d0900
 8002924:	aaaaaaab 	.word	0xaaaaaaab

08002928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e041      	b.n	80029be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe f9cc 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f000 faaa 	bl	8002ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e041      	b.n	8002a5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f839 	bl	8002a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	4619      	mov	r1, r3
 8002a04:	4610      	mov	r0, r2
 8002a06:	f000 fa5b 	bl	8002ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_TIM_PWM_Start+0x24>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e022      	b.n	8002ae2 <HAL_TIM_PWM_Start+0x6a>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d109      	bne.n	8002ab6 <HAL_TIM_PWM_Start+0x3e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	e015      	b.n	8002ae2 <HAL_TIM_PWM_Start+0x6a>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d109      	bne.n	8002ad0 <HAL_TIM_PWM_Start+0x58>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e008      	b.n	8002ae2 <HAL_TIM_PWM_Start+0x6a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e05e      	b.n	8002ba8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_PWM_Start+0x82>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	e013      	b.n	8002b22 <HAL_TIM_PWM_Start+0xaa>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_PWM_Start+0x92>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b08:	e00b      	b.n	8002b22 <HAL_TIM_PWM_Start+0xaa>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0xa2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b18:	e003      	b.n	8002b22 <HAL_TIM_PWM_Start+0xaa>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fc48 	bl	80033c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_TIM_PWM_Start+0x138>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_TIM_PWM_Start+0x138>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00e      	beq.n	8002b72 <HAL_TIM_PWM_Start+0xfa>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d009      	beq.n	8002b72 <HAL_TIM_PWM_Start+0xfa>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <HAL_TIM_PWM_Start+0x13c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d004      	beq.n	8002b72 <HAL_TIM_PWM_Start+0xfa>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <HAL_TIM_PWM_Start+0x140>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d111      	bne.n	8002b96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b06      	cmp	r3, #6
 8002b82:	d010      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b94:	e007      	b.n	8002ba6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800

08002bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e0ac      	b.n	8002d30 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	f200 809f 	bhi.w	8002d24 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c21 	.word	0x08002c21
 8002bf0:	08002d25 	.word	0x08002d25
 8002bf4:	08002d25 	.word	0x08002d25
 8002bf8:	08002d25 	.word	0x08002d25
 8002bfc:	08002c61 	.word	0x08002c61
 8002c00:	08002d25 	.word	0x08002d25
 8002c04:	08002d25 	.word	0x08002d25
 8002c08:	08002d25 	.word	0x08002d25
 8002c0c:	08002ca3 	.word	0x08002ca3
 8002c10:	08002d25 	.word	0x08002d25
 8002c14:	08002d25 	.word	0x08002d25
 8002c18:	08002d25 	.word	0x08002d25
 8002c1c:	08002ce3 	.word	0x08002ce3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f9ac 	bl	8002f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0208 	orr.w	r2, r2, #8
 8002c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0204 	bic.w	r2, r2, #4
 8002c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6999      	ldr	r1, [r3, #24]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	619a      	str	r2, [r3, #24]
      break;
 8002c5e:	e062      	b.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f9f2 	bl	8003050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6999      	ldr	r1, [r3, #24]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	021a      	lsls	r2, r3, #8
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]
      break;
 8002ca0:	e041      	b.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fa3b 	bl	8003124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0208 	orr.w	r2, r2, #8
 8002cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0204 	bic.w	r2, r2, #4
 8002ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69d9      	ldr	r1, [r3, #28]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	61da      	str	r2, [r3, #28]
      break;
 8002ce0:	e021      	b.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fa85 	bl	80031f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69d9      	ldr	r1, [r3, #28]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	021a      	lsls	r2, r3, #8
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	61da      	str	r2, [r3, #28]
      break;
 8002d22:	e000      	b.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_TIM_ConfigClockSource+0x18>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e0b3      	b.n	8002eb8 <HAL_TIM_ConfigClockSource+0x180>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d88:	d03e      	beq.n	8002e08 <HAL_TIM_ConfigClockSource+0xd0>
 8002d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8e:	f200 8087 	bhi.w	8002ea0 <HAL_TIM_ConfigClockSource+0x168>
 8002d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d96:	f000 8085 	beq.w	8002ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9e:	d87f      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x168>
 8002da0:	2b70      	cmp	r3, #112	; 0x70
 8002da2:	d01a      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0xa2>
 8002da4:	2b70      	cmp	r3, #112	; 0x70
 8002da6:	d87b      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x168>
 8002da8:	2b60      	cmp	r3, #96	; 0x60
 8002daa:	d050      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x116>
 8002dac:	2b60      	cmp	r3, #96	; 0x60
 8002dae:	d877      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x168>
 8002db0:	2b50      	cmp	r3, #80	; 0x50
 8002db2:	d03c      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0xf6>
 8002db4:	2b50      	cmp	r3, #80	; 0x50
 8002db6:	d873      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x168>
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d058      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x136>
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d86f      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x168>
 8002dc0:	2b30      	cmp	r3, #48	; 0x30
 8002dc2:	d064      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x156>
 8002dc4:	2b30      	cmp	r3, #48	; 0x30
 8002dc6:	d86b      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x168>
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d060      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x156>
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d867      	bhi.n	8002ea0 <HAL_TIM_ConfigClockSource+0x168>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d05c      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x156>
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d05a      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002dd8:	e062      	b.n	8002ea0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f000 faca 	bl	8003382 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	609a      	str	r2, [r3, #8]
      break;
 8002e06:	e04e      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6899      	ldr	r1, [r3, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f000 fab3 	bl	8003382 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e2a:	609a      	str	r2, [r3, #8]
      break;
 8002e2c:	e03b      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 fa2a 	bl	8003294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2150      	movs	r1, #80	; 0x50
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fa81 	bl	800334e <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e02b      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f000 fa48 	bl	80032f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2160      	movs	r1, #96	; 0x60
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fa71 	bl	800334e <TIM_ITRx_SetConfig>
      break;
 8002e6c:	e01b      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6859      	ldr	r1, [r3, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f000 fa0a 	bl	8003294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2140      	movs	r1, #64	; 0x40
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fa61 	bl	800334e <TIM_ITRx_SetConfig>
      break;
 8002e8c:	e00b      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	4610      	mov	r0, r2
 8002e9a:	f000 fa58 	bl	800334e <TIM_ITRx_SetConfig>
        break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ea0:	bf00      	nop
 8002ea2:	e000      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ea4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <TIM_Base_SetConfig+0xb8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <TIM_Base_SetConfig+0x30>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ede:	d007      	beq.n	8002ef0 <TIM_Base_SetConfig+0x30>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a26      	ldr	r2, [pc, #152]	; (8002f7c <TIM_Base_SetConfig+0xbc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <TIM_Base_SetConfig+0x30>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a25      	ldr	r2, [pc, #148]	; (8002f80 <TIM_Base_SetConfig+0xc0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <TIM_Base_SetConfig+0xb8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_Base_SetConfig+0x62>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d007      	beq.n	8002f22 <TIM_Base_SetConfig+0x62>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <TIM_Base_SetConfig+0xbc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0x62>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <TIM_Base_SetConfig+0xc0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d108      	bne.n	8002f34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <TIM_Base_SetConfig+0xb8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d103      	bne.n	8002f68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	615a      	str	r2, [r3, #20]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40000800 	.word	0x40000800

08002f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f023 0201 	bic.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0303 	bic.w	r3, r3, #3
 8002fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f023 0302 	bic.w	r3, r3, #2
 8002fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a1c      	ldr	r2, [pc, #112]	; (800304c <TIM_OC1_SetConfig+0xc8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10c      	bne.n	8002ffa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0308 	bic.w	r3, r3, #8
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a13      	ldr	r2, [pc, #76]	; (800304c <TIM_OC1_SetConfig+0xc8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d111      	bne.n	8003026 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40012c00 	.word	0x40012c00

08003050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f023 0210 	bic.w	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0320 	bic.w	r3, r3, #32
 800309a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <TIM_OC2_SetConfig+0xd0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10d      	bne.n	80030cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a14      	ldr	r2, [pc, #80]	; (8003120 <TIM_OC2_SetConfig+0xd0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d113      	bne.n	80030fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	621a      	str	r2, [r3, #32]
}
 8003116:	bf00      	nop
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	40012c00 	.word	0x40012c00

08003124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800316c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <TIM_OC3_SetConfig+0xd0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d10d      	bne.n	800319e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800319c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <TIM_OC3_SetConfig+0xd0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d113      	bne.n	80031ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	621a      	str	r2, [r3, #32]
}
 80031e8:	bf00      	nop
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40012c00 	.word	0x40012c00

080031f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	031b      	lsls	r3, r3, #12
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <TIM_OC4_SetConfig+0x98>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d109      	bne.n	800326c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800325e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	019b      	lsls	r3, r3, #6
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	40012c00 	.word	0x40012c00

08003294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f023 0201 	bic.w	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f023 030a 	bic.w	r3, r3, #10
 80032d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	621a      	str	r2, [r3, #32]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f023 0210 	bic.w	r2, r3, #16
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800331a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	031b      	lsls	r3, r3, #12
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800332c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	621a      	str	r2, [r3, #32]
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	f043 0307 	orr.w	r3, r3, #7
 8003370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	609a      	str	r2, [r3, #8]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr

08003382 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003382:	b480      	push	{r7}
 8003384:	b087      	sub	sp, #28
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	021a      	lsls	r2, r3, #8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	609a      	str	r2, [r3, #8]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2201      	movs	r2, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1a      	ldr	r2, [r3, #32]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800341c:	2302      	movs	r3, #2
 800341e:	e046      	b.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00e      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d009      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a12      	ldr	r2, [pc, #72]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10c      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	40012c00 	.word	0x40012c00
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800

080034c4 <__libc_init_array>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	2600      	movs	r6, #0
 80034c8:	4d0c      	ldr	r5, [pc, #48]	; (80034fc <__libc_init_array+0x38>)
 80034ca:	4c0d      	ldr	r4, [pc, #52]	; (8003500 <__libc_init_array+0x3c>)
 80034cc:	1b64      	subs	r4, r4, r5
 80034ce:	10a4      	asrs	r4, r4, #2
 80034d0:	42a6      	cmp	r6, r4
 80034d2:	d109      	bne.n	80034e8 <__libc_init_array+0x24>
 80034d4:	f000 f822 	bl	800351c <_init>
 80034d8:	2600      	movs	r6, #0
 80034da:	4d0a      	ldr	r5, [pc, #40]	; (8003504 <__libc_init_array+0x40>)
 80034dc:	4c0a      	ldr	r4, [pc, #40]	; (8003508 <__libc_init_array+0x44>)
 80034de:	1b64      	subs	r4, r4, r5
 80034e0:	10a4      	asrs	r4, r4, #2
 80034e2:	42a6      	cmp	r6, r4
 80034e4:	d105      	bne.n	80034f2 <__libc_init_array+0x2e>
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
 80034e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ec:	4798      	blx	r3
 80034ee:	3601      	adds	r6, #1
 80034f0:	e7ee      	b.n	80034d0 <__libc_init_array+0xc>
 80034f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f6:	4798      	blx	r3
 80034f8:	3601      	adds	r6, #1
 80034fa:	e7f2      	b.n	80034e2 <__libc_init_array+0x1e>
 80034fc:	0800356c 	.word	0x0800356c
 8003500:	0800356c 	.word	0x0800356c
 8003504:	0800356c 	.word	0x0800356c
 8003508:	08003570 	.word	0x08003570

0800350c <memset>:
 800350c:	4603      	mov	r3, r0
 800350e:	4402      	add	r2, r0
 8003510:	4293      	cmp	r3, r2
 8003512:	d100      	bne.n	8003516 <memset+0xa>
 8003514:	4770      	bx	lr
 8003516:	f803 1b01 	strb.w	r1, [r3], #1
 800351a:	e7f9      	b.n	8003510 <memset+0x4>

0800351c <_init>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr

08003528 <_fini>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr
