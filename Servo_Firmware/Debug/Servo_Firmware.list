
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c74c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800c85c  0800c85c  0001c85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c91c  0800c91c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c91c  0800c91c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c91c  0800c91c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c91c  0800c91c  0001c91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c920  0800c920  0001c920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800c924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000168c  20000180  0800caa0  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000180c  0800caa0  0002180c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b1b  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c80  00000000  00000000  00039cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003fec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf8e  00000000  00000000  000411d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7cc  00000000  00000000  0005e166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b4c  00000000  00000000  0007b932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f47e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005764  00000000  00000000  0010f4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c844 	.word	0x0800c844

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800c844 	.word	0x0800c844

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_frsub>:
 80009fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a00:	e002      	b.n	8000a08 <__addsf3>
 8000a02:	bf00      	nop

08000a04 <__aeabi_fsub>:
 8000a04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a08 <__addsf3>:
 8000a08:	0042      	lsls	r2, r0, #1
 8000a0a:	bf1f      	itttt	ne
 8000a0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a10:	ea92 0f03 	teqne	r2, r3
 8000a14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a1c:	d06a      	beq.n	8000af4 <__addsf3+0xec>
 8000a1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a26:	bfc1      	itttt	gt
 8000a28:	18d2      	addgt	r2, r2, r3
 8000a2a:	4041      	eorgt	r1, r0
 8000a2c:	4048      	eorgt	r0, r1
 8000a2e:	4041      	eorgt	r1, r0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	2b19      	cmp	r3, #25
 8000a36:	bf88      	it	hi
 8000a38:	4770      	bxhi	lr
 8000a3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4249      	negne	r1, r1
 8000a5a:	ea92 0f03 	teq	r2, r3
 8000a5e:	d03f      	beq.n	8000ae0 <__addsf3+0xd8>
 8000a60:	f1a2 0201 	sub.w	r2, r2, #1
 8000a64:	fa41 fc03 	asr.w	ip, r1, r3
 8000a68:	eb10 000c 	adds.w	r0, r0, ip
 8000a6c:	f1c3 0320 	rsb	r3, r3, #32
 8000a70:	fa01 f103 	lsl.w	r1, r1, r3
 8000a74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a78:	d502      	bpl.n	8000a80 <__addsf3+0x78>
 8000a7a:	4249      	negs	r1, r1
 8000a7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a84:	d313      	bcc.n	8000aae <__addsf3+0xa6>
 8000a86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a8a:	d306      	bcc.n	8000a9a <__addsf3+0x92>
 8000a8c:	0840      	lsrs	r0, r0, #1
 8000a8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a92:	f102 0201 	add.w	r2, r2, #1
 8000a96:	2afe      	cmp	r2, #254	; 0xfe
 8000a98:	d251      	bcs.n	8000b3e <__addsf3+0x136>
 8000a9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa2:	bf08      	it	eq
 8000aa4:	f020 0001 	biceq.w	r0, r0, #1
 8000aa8:	ea40 0003 	orr.w	r0, r0, r3
 8000aac:	4770      	bx	lr
 8000aae:	0049      	lsls	r1, r1, #1
 8000ab0:	eb40 0000 	adc.w	r0, r0, r0
 8000ab4:	3a01      	subs	r2, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000abc:	d2ed      	bcs.n	8000a9a <__addsf3+0x92>
 8000abe:	fab0 fc80 	clz	ip, r0
 8000ac2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ac6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ace:	bfaa      	itet	ge
 8000ad0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ad4:	4252      	neglt	r2, r2
 8000ad6:	4318      	orrge	r0, r3
 8000ad8:	bfbc      	itt	lt
 8000ada:	40d0      	lsrlt	r0, r2
 8000adc:	4318      	orrlt	r0, r3
 8000ade:	4770      	bx	lr
 8000ae0:	f092 0f00 	teq	r2, #0
 8000ae4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae8:	bf06      	itte	eq
 8000aea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aee:	3201      	addeq	r2, #1
 8000af0:	3b01      	subne	r3, #1
 8000af2:	e7b5      	b.n	8000a60 <__addsf3+0x58>
 8000af4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000afc:	bf18      	it	ne
 8000afe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b02:	d021      	beq.n	8000b48 <__addsf3+0x140>
 8000b04:	ea92 0f03 	teq	r2, r3
 8000b08:	d004      	beq.n	8000b14 <__addsf3+0x10c>
 8000b0a:	f092 0f00 	teq	r2, #0
 8000b0e:	bf08      	it	eq
 8000b10:	4608      	moveq	r0, r1
 8000b12:	4770      	bx	lr
 8000b14:	ea90 0f01 	teq	r0, r1
 8000b18:	bf1c      	itt	ne
 8000b1a:	2000      	movne	r0, #0
 8000b1c:	4770      	bxne	lr
 8000b1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b22:	d104      	bne.n	8000b2e <__addsf3+0x126>
 8000b24:	0040      	lsls	r0, r0, #1
 8000b26:	bf28      	it	cs
 8000b28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	4770      	bx	lr
 8000b2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b32:	bf3c      	itt	cc
 8000b34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bxcc	lr
 8000b3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	4770      	bx	lr
 8000b48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b4c:	bf16      	itet	ne
 8000b4e:	4608      	movne	r0, r1
 8000b50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b54:	4601      	movne	r1, r0
 8000b56:	0242      	lsls	r2, r0, #9
 8000b58:	bf06      	itte	eq
 8000b5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b5e:	ea90 0f01 	teqeq	r0, r1
 8000b62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_ui2f>:
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e004      	b.n	8000b78 <__aeabi_i2f+0x8>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_i2f>:
 8000b70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b74:	bf48      	it	mi
 8000b76:	4240      	negmi	r0, r0
 8000b78:	ea5f 0c00 	movs.w	ip, r0
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b84:	4601      	mov	r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	e01c      	b.n	8000bc6 <__aeabi_l2f+0x2a>

08000b8c <__aeabi_ul2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e00a      	b.n	8000bb0 <__aeabi_l2f+0x14>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_l2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__aeabi_l2f+0x14>
 8000baa:	4240      	negs	r0, r0
 8000bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb0:	ea5f 0c01 	movs.w	ip, r1
 8000bb4:	bf02      	ittt	eq
 8000bb6:	4684      	moveq	ip, r0
 8000bb8:	4601      	moveq	r1, r0
 8000bba:	2000      	moveq	r0, #0
 8000bbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bca:	fabc f28c 	clz	r2, ip
 8000bce:	3a08      	subs	r2, #8
 8000bd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bd4:	db10      	blt.n	8000bf8 <__aeabi_l2f+0x5c>
 8000bd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bda:	4463      	add	r3, ip
 8000bdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f102 0220 	add.w	r2, r2, #32
 8000bfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c08:	fa21 f202 	lsr.w	r2, r1, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_fmul>:
 8000c18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c20:	bf1e      	ittt	ne
 8000c22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c26:	ea92 0f0c 	teqne	r2, ip
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d06f      	beq.n	8000d10 <__aeabi_fmul+0xf8>
 8000c30:	441a      	add	r2, r3
 8000c32:	ea80 0c01 	eor.w	ip, r0, r1
 8000c36:	0240      	lsls	r0, r0, #9
 8000c38:	bf18      	it	ne
 8000c3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c3e:	d01e      	beq.n	8000c7e <__aeabi_fmul+0x66>
 8000c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c58:	bf3e      	ittt	cc
 8000c5a:	0049      	lslcc	r1, r1, #1
 8000c5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c60:	005b      	lslcc	r3, r3, #1
 8000c62:	ea40 0001 	orr.w	r0, r0, r1
 8000c66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c6a:	2afd      	cmp	r2, #253	; 0xfd
 8000c6c:	d81d      	bhi.n	8000caa <__aeabi_fmul+0x92>
 8000c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c86:	bf08      	it	eq
 8000c88:	0249      	lsleq	r1, r1, #9
 8000c8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c92:	3a7f      	subs	r2, #127	; 0x7f
 8000c94:	bfc2      	ittt	gt
 8000c96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c9e:	4770      	bxgt	lr
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	dc5d      	bgt.n	8000d68 <__aeabi_fmul+0x150>
 8000cac:	f112 0f19 	cmn.w	r2, #25
 8000cb0:	bfdc      	itt	le
 8000cb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cb6:	4770      	bxle	lr
 8000cb8:	f1c2 0200 	rsb	r2, r2, #0
 8000cbc:	0041      	lsls	r1, r0, #1
 8000cbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000cc2:	f1c2 0220 	rsb	r2, r2, #32
 8000cc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cce:	f140 0000 	adc.w	r0, r0, #0
 8000cd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cd6:	bf08      	it	eq
 8000cd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cdc:	4770      	bx	lr
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ce6:	bf02      	ittt	eq
 8000ce8:	0040      	lsleq	r0, r0, #1
 8000cea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cee:	3a01      	subeq	r2, #1
 8000cf0:	d0f9      	beq.n	8000ce6 <__aeabi_fmul+0xce>
 8000cf2:	ea40 000c 	orr.w	r0, r0, ip
 8000cf6:	f093 0f00 	teq	r3, #0
 8000cfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0049      	lsleq	r1, r1, #1
 8000d02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d06:	3b01      	subeq	r3, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fmul+0xe6>
 8000d0a:	ea41 010c 	orr.w	r1, r1, ip
 8000d0e:	e78f      	b.n	8000c30 <__aeabi_fmul+0x18>
 8000d10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d14:	ea92 0f0c 	teq	r2, ip
 8000d18:	bf18      	it	ne
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d00a      	beq.n	8000d36 <__aeabi_fmul+0x11e>
 8000d20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d24:	bf18      	it	ne
 8000d26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	d1d8      	bne.n	8000cde <__aeabi_fmul+0xc6>
 8000d2c:	ea80 0001 	eor.w	r0, r0, r1
 8000d30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	bf17      	itett	ne
 8000d3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d40:	4608      	moveq	r0, r1
 8000d42:	f091 0f00 	teqne	r1, #0
 8000d46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d4a:	d014      	beq.n	8000d76 <__aeabi_fmul+0x15e>
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	d101      	bne.n	8000d56 <__aeabi_fmul+0x13e>
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	d10f      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d56:	ea93 0f0c 	teq	r3, ip
 8000d5a:	d103      	bne.n	8000d64 <__aeabi_fmul+0x14c>
 8000d5c:	024b      	lsls	r3, r1, #9
 8000d5e:	bf18      	it	ne
 8000d60:	4608      	movne	r0, r1
 8000d62:	d108      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bx	lr
 8000d76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fdiv>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d069      	beq.n	8000e6c <__aeabi_fdiv+0xec>
 8000d98:	eba2 0203 	sub.w	r2, r2, r3
 8000d9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000da0:	0249      	lsls	r1, r1, #9
 8000da2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000da6:	d037      	beq.n	8000e18 <__aeabi_fdiv+0x98>
 8000da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000db0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	428b      	cmp	r3, r1
 8000dba:	bf38      	it	cc
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	bf24      	itt	cs
 8000dca:	1a5b      	subcs	r3, r3, r1
 8000dcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dd4:	bf24      	itt	cs
 8000dd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000de2:	bf24      	itt	cs
 8000de4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000de8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000df0:	bf24      	itt	cs
 8000df2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000df6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	bf18      	it	ne
 8000dfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e02:	d1e0      	bne.n	8000dc6 <__aeabi_fdiv+0x46>
 8000e04:	2afd      	cmp	r2, #253	; 0xfd
 8000e06:	f63f af50 	bhi.w	8000caa <__aeabi_fmul+0x92>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e20:	327f      	adds	r2, #127	; 0x7f
 8000e22:	bfc2      	ittt	gt
 8000e24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2c:	4770      	bxgt	lr
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	3a01      	subs	r2, #1
 8000e38:	e737      	b.n	8000caa <__aeabi_fmul+0x92>
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fdiv+0xc2>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fdiv+0xda>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e795      	b.n	8000d98 <__aeabi_fdiv+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d108      	bne.n	8000e88 <__aeabi_fdiv+0x108>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	f47f af7d 	bne.w	8000d76 <__aeabi_fmul+0x15e>
 8000e7c:	ea93 0f0c 	teq	r3, ip
 8000e80:	f47f af70 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e776      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e88:	ea93 0f0c 	teq	r3, ip
 8000e8c:	d104      	bne.n	8000e98 <__aeabi_fdiv+0x118>
 8000e8e:	024b      	lsls	r3, r1, #9
 8000e90:	f43f af4c 	beq.w	8000d2c <__aeabi_fmul+0x114>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e76e      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1ca      	bne.n	8000e3a <__aeabi_fdiv+0xba>
 8000ea4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ea8:	f47f af5c 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000eac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eb0:	f47f af3c 	bne.w	8000d2c <__aeabi_fmul+0x114>
 8000eb4:	e75f      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000eb6:	bf00      	nop

08000eb8 <__gesf2>:
 8000eb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ebc:	e006      	b.n	8000ecc <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__lesf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	e002      	b.n	8000ecc <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__cmpsf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	bf18      	it	ne
 8000ede:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ee2:	d011      	beq.n	8000f08 <__cmpsf2+0x40>
 8000ee4:	b001      	add	sp, #4
 8000ee6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eea:	bf18      	it	ne
 8000eec:	ea90 0f01 	teqne	r0, r1
 8000ef0:	bf58      	it	pl
 8000ef2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ef6:	bf88      	it	hi
 8000ef8:	17c8      	asrhi	r0, r1, #31
 8000efa:	bf38      	it	cc
 8000efc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f00:	bf18      	it	ne
 8000f02:	f040 0001 	orrne.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	d102      	bne.n	8000f14 <__cmpsf2+0x4c>
 8000f0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f12:	d105      	bne.n	8000f20 <__cmpsf2+0x58>
 8000f14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f18:	d1e4      	bne.n	8000ee4 <__cmpsf2+0x1c>
 8000f1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1e:	d0e1      	beq.n	8000ee4 <__cmpsf2+0x1c>
 8000f20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__aeabi_cfrcmple>:
 8000f28:	4684      	mov	ip, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4661      	mov	r1, ip
 8000f2e:	e7ff      	b.n	8000f30 <__aeabi_cfcmpeq>

08000f30 <__aeabi_cfcmpeq>:
 8000f30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f32:	f7ff ffc9 	bl	8000ec8 <__cmpsf2>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	bf48      	it	mi
 8000f3a:	f110 0f00 	cmnmi.w	r0, #0
 8000f3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f40 <__aeabi_fcmpeq>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff fff4 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f48:	bf0c      	ite	eq
 8000f4a:	2001      	moveq	r0, #1
 8000f4c:	2000      	movne	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmplt>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffea 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f5c:	bf34      	ite	cc
 8000f5e:	2001      	movcc	r0, #1
 8000f60:	2000      	movcs	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmple>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffe0 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f70:	bf94      	ite	ls
 8000f72:	2001      	movls	r0, #1
 8000f74:	2000      	movhi	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_fcmpge>:
 8000f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f80:	f7ff ffd2 	bl	8000f28 <__aeabi_cfrcmple>
 8000f84:	bf94      	ite	ls
 8000f86:	2001      	movls	r0, #1
 8000f88:	2000      	movhi	r0, #0
 8000f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8e:	bf00      	nop

08000f90 <__aeabi_fcmpgt>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff ffc8 	bl	8000f28 <__aeabi_cfrcmple>
 8000f98:	bf34      	ite	cc
 8000f9a:	2001      	movcc	r0, #1
 8000f9c:	2000      	movcs	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2iz>:
 8000fa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30f      	bcc.n	8000fce <__aeabi_f2iz+0x2a>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d90d      	bls.n	8000fd4 <__aeabi_f2iz+0x30>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	bf18      	it	ne
 8000fca:	4240      	negne	r0, r0
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr
 8000fd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd8:	d101      	bne.n	8000fde <__aeabi_f2iz+0x3a>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	d105      	bne.n	8000fea <__aeabi_f2iz+0x46>
 8000fde:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe2:	bf08      	it	eq
 8000fe4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe8:	4770      	bx	lr
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4770      	bx	lr

08000ff0 <CRC32_Get>:
#include "crc32.h"

extern CRC_HandleTypeDef hcrc;

//Returns 32bit hardware computed CRC of array
uint32_t CRC32_Get(uint32_t *data, uint32_t length_words){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	return HAL_CRC_Calculate(&hcrc, data, length_words);
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <CRC32_Get+0x20>)
 8001000:	f002 ffe3 	bl	8003fca <HAL_CRC_Calculate>
 8001004:	4603      	mov	r3, r0
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000530 	.word	0x20000530

08001014 <Flash_Read>:
#include "main.h"
#include "flash.h"

//Reads data from flash memory address with given length in bytes
void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
	while(i != length){
 8001024:	e00b      	b.n	800103e <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	4619      	mov	r1, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	4413      	add	r3, r2
 8001034:	780a      	ldrb	r2, [r1, #0]
 8001036:	701a      	strb	r2, [r3, #0]
		i++;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
	while(i != length){
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	d1ef      	bne.n	8001026 <Flash_Read+0x12>
	}
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <Flash_Write>:

//Writes data to flash memory address with given length in bytes
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 8001052:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8001070:	f003 f84e 	bl	8004110 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8001074:	f107 0210 	add.w	r2, r7, #16
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f003 f92e 	bl	80042e0 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	b29a      	uxth	r2, r3
 800108e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	b29b      	uxth	r3, r3
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 800109c:	e027      	b.n	80010ee <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 800109e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	18d0      	adds	r0, r2, r3
				((uint32_t)data[i+3]<<24)|
 80010a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010a6:	3303      	adds	r3, #3
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	061a      	lsls	r2, r3, #24
				((uint32_t)data[i+2]<<16)|
 80010b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010b2:	3302      	adds	r3, #2
 80010b4:	68f9      	ldr	r1, [r7, #12]
 80010b6:	440b      	add	r3, r1
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	041b      	lsls	r3, r3, #16
				((uint32_t)data[i+3]<<24)|
 80010bc:	431a      	orrs	r2, r3
				((uint32_t)data[i+1]<<8)|
 80010be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010c0:	3301      	adds	r3, #1
 80010c2:	68f9      	ldr	r1, [r7, #12]
 80010c4:	440b      	add	r3, r1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	021b      	lsls	r3, r3, #8
				((uint32_t)data[i+2]<<16)|
 80010ca:	4313      	orrs	r3, r2
				(uint32_t)data[i]
 80010cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	440a      	add	r2, r1
 80010d2:	7812      	ldrb	r2, [r2, #0]
				((uint32_t)data[i+1]<<8)|
 80010d4:	4313      	orrs	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80010d6:	2200      	movs	r2, #0
 80010d8:	4698      	mov	r8, r3
 80010da:	4691      	mov	r9, r2
 80010dc:	4642      	mov	r2, r8
 80010de:	464b      	mov	r3, r9
 80010e0:	4601      	mov	r1, r0
 80010e2:	2002      	movs	r0, #2
 80010e4:	f002 ffa4 	bl	8004030 <HAL_FLASH_Program>
		);
		i+=4;
 80010e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010ea:	3304      	adds	r3, #4
 80010ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80010ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d1d2      	bne.n	800109e <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 80010f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d03f      	beq.n	800117e <Flash_Write+0x12c>
		uint32_t wdata = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 8001102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001104:	2b03      	cmp	r3, #3
 8001106:	d114      	bne.n	8001132 <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i+2]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i]<<8);
 8001108:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800110a:	3302      	adds	r3, #2
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	061a      	lsls	r2, r3, #24
 8001114:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001116:	3301      	adds	r3, #1
 8001118:	68f9      	ldr	r1, [r7, #12]
 800111a:	440b      	add	r3, r1
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	041b      	lsls	r3, r3, #16
 8001120:	431a      	orrs	r2, r3
 8001122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	440b      	add	r3, r1
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	4313      	orrs	r3, r2
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001130:	e019      	b.n	8001166 <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 8001132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001134:	2b02      	cmp	r3, #2
 8001136:	d10d      	bne.n	8001154 <Flash_Write+0x102>
			wdata = ((uint32_t)data[i+1]<<24)|((uint32_t)data[i]<<16);
 8001138:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800113a:	3301      	adds	r3, #1
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	061a      	lsls	r2, r3, #24
 8001144:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	440b      	add	r3, r1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	041b      	lsls	r3, r3, #16
 800114e:	4313      	orrs	r3, r2
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
 8001152:	e008      	b.n	8001166 <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 8001154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001156:	2b01      	cmp	r3, #1
 8001158:	d105      	bne.n	8001166 <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 800115a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	061b      	lsls	r3, r3, #24
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 8001166:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	18d1      	adds	r1, r2, r3
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	2200      	movs	r2, #0
 8001170:	461c      	mov	r4, r3
 8001172:	4615      	mov	r5, r2
 8001174:	4622      	mov	r2, r4
 8001176:	462b      	mov	r3, r5
 8001178:	2002      	movs	r0, #2
 800117a:	f002 ff59 	bl	8004030 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 800117e:	f002 ffed 	bl	800415c <HAL_FLASH_Lock>
 8001182:	bf00      	nop
 8001184:	3730      	adds	r7, #48	; 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800118c <LED_On>:

//Working variable, counter for turning off LED in "LED_MODE_POSITION_CHANGE" mode
static uint32_t systick;

//Function used only in this file
static void LED_On(bool on){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	if(on){
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <LED_On+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <LED_On+0x34>)
 80011a2:	f003 fae0 	bl	8004766 <HAL_GPIO_WritePin>
 80011a6:	e004      	b.n	80011b2 <LED_On+0x26>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <LED_On+0x34>)
 80011ae:	f003 fada 	bl	8004766 <HAL_GPIO_WritePin>
	}
	led_o.on = on;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <LED_On+0x38>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	7013      	strb	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40010800 	.word	0x40010800
 80011c4:	200001a4 	.word	0x200001a4

080011c8 <LED_SysTick_Interrupt>:

//SysTick interrupt for LED, called in every millisecond, with lowest interrupt priority (highest number)
void LED_SysTick_Interrupt(){
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	if(led_ctr.mode == LED_MODE_POSITION_CHANGE){
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <LED_SysTick_Interrupt+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d104      	bne.n	80011de <LED_SysTick_Interrupt+0x16>
		systick++;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <LED_SysTick_Interrupt+0x24>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <LED_SysTick_Interrupt+0x24>)
 80011dc:	6013      	str	r3, [r2, #0]
	}
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000019c 	.word	0x2000019c
 80011ec:	200001a8 	.word	0x200001a8

080011f0 <LED_Update>:

//Should be called from app main loop function to make LED work
void LED_Update(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	switch(led_ctr.mode){
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <LED_Update+0x80>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d837      	bhi.n	800126c <LED_Update+0x7c>
 80011fc:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <LED_Update+0x14>)
 80011fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001202:	bf00      	nop
 8001204:	08001215 	.word	0x08001215
 8001208:	0800121d 	.word	0x0800121d
 800120c:	08001225 	.word	0x08001225
 8001210:	0800123d 	.word	0x0800123d
		case LED_MODE_OFF:
			LED_On(false);
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff ffb9 	bl	800118c <LED_On>
		break;
 800121a:	e027      	b.n	800126c <LED_Update+0x7c>
		case LED_MODE_POWER:
			LED_On(true);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff ffb5 	bl	800118c <LED_On>
		break;
 8001222:	e023      	b.n	800126c <LED_Update+0x7c>
		case LED_MODE_PID:
			if(led_i.pid_running){
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <LED_Update+0x84>)
 8001226:	785b      	ldrb	r3, [r3, #1]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <LED_Update+0x44>
				LED_On(true);
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff ffad 	bl	800118c <LED_On>
			}else{
				LED_On(false);
			}
		break;
 8001232:	e01b      	b.n	800126c <LED_Update+0x7c>
				LED_On(false);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ffa9 	bl	800118c <LED_On>
		break;
 800123a:	e017      	b.n	800126c <LED_Update+0x7c>
		case LED_MODE_POSITION_CHANGE:
			if(led_i.position_changed){
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <LED_Update+0x84>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <LED_Update+0x66>
				led_i.position_changed = false;
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <LED_Update+0x84>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
				systick = 0;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <LED_Update+0x88>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
				LED_On(true);
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff ff9b 	bl	800118c <LED_On>
			}
			if(systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <LED_Update+0x88>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b13      	cmp	r3, #19
 800125c:	d905      	bls.n	800126a <LED_Update+0x7a>
				LED_On(false);
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff94 	bl	800118c <LED_On>
				systick = 0;
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <LED_Update+0x88>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
			}
		break;
 800126a:	bf00      	nop
	}
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000019c 	.word	0x2000019c
 8001274:	200001a0 	.word	0x200001a0
 8001278:	200001a8 	.word	0x200001a8

0800127c <Motor_SysTick_Interrupt>:

//Working variable, counter for motor turn off in test mode
static uint32_t systick;

//SysTick interrupt for motor, called in every millisecond, with lowest interrupt priority (highest number)
void Motor_SysTick_Interrupt(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	if(!motor_i.pid_running){
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <Motor_SysTick_Interrupt+0x3c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f083 0301 	eor.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d012      	beq.n	80012b4 <Motor_SysTick_Interrupt+0x38>
		if(motor_o.running){
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <Motor_SysTick_Interrupt+0x40>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00e      	beq.n	80012b4 <Motor_SysTick_Interrupt+0x38>
			systick++;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <Motor_SysTick_Interrupt+0x44>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <Motor_SysTick_Interrupt+0x44>)
 800129e:	6013      	str	r3, [r2, #0]
			if(systick == MOTOR_TEST_TIMEOUT_MS){
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <Motor_SysTick_Interrupt+0x44>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b64      	cmp	r3, #100	; 0x64
 80012a6:	d105      	bne.n	80012b4 <Motor_SysTick_Interrupt+0x38>
				Motor_Set(0);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 f80b 	bl	80012c4 <Motor_Set>
				systick = 0;
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <Motor_SysTick_Interrupt+0x44>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200001b0 	.word	0x200001b0
 80012bc:	200001b4 	.word	0x200001b4
 80012c0:	200001b8 	.word	0x200001b8

080012c4 <Motor_Set>:

//Sets motor rotation direction and power, value from -1000 to 1000. Zero means off
void Motor_Set(int16_t strength){
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
	if(motor_ctr.invert == MOTOR_INVERT){
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <Motor_Set+0xc0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	425b      	negs	r3, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	80fb      	strh	r3, [r7, #6]
	}

	systick = 0;
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <Motor_Set+0xc4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
	if(strength == 0){
 80012e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10d      	bne.n	8001308 <Motor_Set+0x44>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <Motor_Set+0xc8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <Motor_Set+0xc8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
		motor_o.running = false;
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <Motor_Set+0xcc>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000 - (strength / (1000 / motor_ctr.max_power)));
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
		motor_o.running = true;
	}
}
 8001306:	e038      	b.n	800137a <Motor_Set+0xb6>
	}else if(strength < 0){
 8001308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	da18      	bge.n	8001342 <Motor_Set+0x7e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <Motor_Set+0xc8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000 + (strength / (1000 / motor_ctr.max_power)));
 800131a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <Motor_Set+0xc0>)
 8001320:	885b      	ldrh	r3, [r3, #2]
 8001322:	4619      	mov	r1, r3
 8001324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001328:	fb93 f3f1 	sdiv	r3, r3, r1
 800132c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001330:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <Motor_Set+0xc8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	639a      	str	r2, [r3, #56]	; 0x38
		motor_o.running = true;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <Motor_Set+0xcc>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
}
 8001340:	e01b      	b.n	800137a <Motor_Set+0xb6>
	}else if(strength > 0){
 8001342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001346:	2b00      	cmp	r3, #0
 8001348:	dd17      	ble.n	800137a <Motor_Set+0xb6>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000 - (strength / (1000 / motor_ctr.max_power)));
 800134a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <Motor_Set+0xc0>)
 8001350:	885b      	ldrh	r3, [r3, #2]
 8001352:	4619      	mov	r1, r3
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	fb93 f3f1 	sdiv	r3, r3, r1
 800135c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001360:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <Motor_Set+0xc8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <Motor_Set+0xc8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001372:	639a      	str	r2, [r3, #56]	; 0x38
		motor_o.running = true;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <Motor_Set+0xcc>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	200001ac 	.word	0x200001ac
 8001388:	200001b8 	.word	0x200001b8
 800138c:	20000538 	.word	0x20000538
 8001390:	200001b4 	.word	0x200001b4

08001394 <Motor_Get>:

//Returns current motor rotation direction and power, value from -1000 to 1000
int16_t Motor_Get(){
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1) != 1000){
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <Motor_Get+0x78>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a2:	d013      	beq.n	80013cc <Motor_Get+0x38>
		return (1000 - (int16_t)__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1)) * (1000 / motor_ctr.max_power);
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <Motor_Get+0x78>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <Motor_Get+0x7c>)
 80013b4:	8852      	ldrh	r2, [r2, #2]
 80013b6:	4611      	mov	r1, r2
 80013b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013bc:	fb92 f2f1 	sdiv	r2, r2, r1
 80013c0:	b292      	uxth	r2, r2
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	e01a      	b.n	8001402 <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 80013cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013d6:	d013      	beq.n	8001400 <Motor_Get+0x6c>
		return ((int16_t)__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1000) * (1000 / motor_ctr.max_power);
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <Motor_Get+0x78>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013de:	b21b      	sxth	r3, r3
 80013e0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <Motor_Get+0x7c>)
 80013e8:	8852      	ldrh	r2, [r2, #2]
 80013ea:	4611      	mov	r1, r2
 80013ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f0:	fb92 f2f1 	sdiv	r2, r2, r1
 80013f4:	b292      	uxth	r2, r2
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	e000      	b.n	8001402 <Motor_Get+0x6e>
	}
	return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000538 	.word	0x20000538
 8001410:	200001ac 	.word	0x200001ac

08001414 <Motor_Init>:

//Init function, should be called once at start
void Motor_Init(){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001418:	2100      	movs	r1, #0
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <Motor_Init+0x18>)
 800141c:	f005 fd3c 	bl	8006e98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001420:	2104      	movs	r1, #4
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <Motor_Init+0x18>)
 8001424:	f005 fd38 	bl	8006e98 <HAL_TIM_PWM_Start>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000538 	.word	0x20000538

08001430 <PID_Timer_Stop>:
//Working variables
static float last_input;
static float output_sum;

//Functions used only in this file
static void PID_Timer_Stop(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <PID_Timer_Stop+0x10>)
 8001436:	f005 fca9 	bl	8006d8c <HAL_TIM_Base_Stop_IT>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000580 	.word	0x20000580

08001444 <PID_Timer_Restart>:
static void PID_Timer_Restart(){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <PID_Timer_Restart+0x1c>)
 800144a:	f005 fc9f 	bl	8006d8c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <PID_Timer_Restart+0x1c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 8001456:	4802      	ldr	r0, [pc, #8]	; (8001460 <PID_Timer_Restart+0x1c>)
 8001458:	f005 fc46 	bl	8006ce8 <HAL_TIM_Base_Start_IT>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000580 	.word	0x20000580

08001464 <PID_Compute>:
static void PID_Compute(){
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
	float input = pid_i.input;
 800146a:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <PID_Compute+0x1b0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	60fb      	str	r3, [r7, #12]
	float error = pid_i.setpoint - input;
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <PID_Compute+0x1b0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	68f9      	ldr	r1, [r7, #12]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fac4 	bl	8000a04 <__aeabi_fsub>
 800147c:	4603      	mov	r3, r0
 800147e:	60bb      	str	r3, [r7, #8]
	float input_d = (input - last_input);
 8001480:	4b65      	ldr	r3, [pc, #404]	; (8001618 <PID_Compute+0x1b4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff fabc 	bl	8000a04 <__aeabi_fsub>
 800148c:	4603      	mov	r3, r0
 800148e:	607b      	str	r3, [r7, #4]
	float output = 0;
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]

	//Select parameters for range
	float kp, ki, kd;
	if(error >= pid_ctr.split_1){
 8001496:	4b61      	ldr	r3, [pc, #388]	; (800161c <PID_Compute+0x1b8>)
 8001498:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fb68 	bl	8000b70 <__aeabi_i2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4619      	mov	r1, r3
 80014a4:	68b8      	ldr	r0, [r7, #8]
 80014a6:	f7ff fd69 	bl	8000f7c <__aeabi_fcmpge>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <PID_Compute+0x60>
		kp = pid_ctr.kp_1;
 80014b0:	4b5a      	ldr	r3, [pc, #360]	; (800161c <PID_Compute+0x1b8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
		ki = pid_ctr.ki_1;
 80014b6:	4b59      	ldr	r3, [pc, #356]	; (800161c <PID_Compute+0x1b8>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	617b      	str	r3, [r7, #20]
		kd = pid_ctr.kd_1;
 80014bc:	4b57      	ldr	r3, [pc, #348]	; (800161c <PID_Compute+0x1b8>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	e02c      	b.n	800151e <PID_Compute+0xba>
	}else if((error < pid_ctr.split_1) && (error >= pid_ctr.split_2)){
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <PID_Compute+0x1b8>)
 80014c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fb51 	bl	8000b70 <__aeabi_i2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4619      	mov	r1, r3
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff fd3e 	bl	8000f54 <__aeabi_fcmplt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d016      	beq.n	800150c <PID_Compute+0xa8>
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <PID_Compute+0x1b8>)
 80014e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fb44 	bl	8000b70 <__aeabi_i2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4619      	mov	r1, r3
 80014ec:	68b8      	ldr	r0, [r7, #8]
 80014ee:	f7ff fd45 	bl	8000f7c <__aeabi_fcmpge>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <PID_Compute+0xa8>
		kp = pid_ctr.kp_2;
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <PID_Compute+0x1b8>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
		ki = pid_ctr.ki_2;
 80014fe:	4b47      	ldr	r3, [pc, #284]	; (800161c <PID_Compute+0x1b8>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	617b      	str	r3, [r7, #20]
		kd = pid_ctr.kd_2;
 8001504:	4b45      	ldr	r3, [pc, #276]	; (800161c <PID_Compute+0x1b8>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	e008      	b.n	800151e <PID_Compute+0xba>
	}else{
		kp = pid_ctr.kp_3;
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <PID_Compute+0x1b8>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	61bb      	str	r3, [r7, #24]
		ki = pid_ctr.ki_3;
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <PID_Compute+0x1b8>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	617b      	str	r3, [r7, #20]
		kd = pid_ctr.kd_3;
 8001518:	4b40      	ldr	r3, [pc, #256]	; (800161c <PID_Compute+0x1b8>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	613b      	str	r3, [r7, #16]
	}

	//Calculate output
	output_sum += ki * error;
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	6978      	ldr	r0, [r7, #20]
 8001522:	f7ff fb79 	bl	8000c18 <__aeabi_fmul>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <PID_Compute+0x1bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f7ff fa69 	bl	8000a08 <__addsf3>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <PID_Compute+0x1bc>)
 800153c:	601a      	str	r2, [r3, #0]
	if(pid_ctr.on_e_m == PID_ON_M){
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <PID_Compute+0x1b8>)
 8001540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00e      	beq.n	8001566 <PID_Compute+0x102>
		output_sum -= kp * input_d;
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <PID_Compute+0x1bc>)
 800154a:	681c      	ldr	r4, [r3, #0]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	69b8      	ldr	r0, [r7, #24]
 8001550:	f7ff fb62 	bl	8000c18 <__aeabi_fmul>
 8001554:	4603      	mov	r3, r0
 8001556:	4619      	mov	r1, r3
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff fa53 	bl	8000a04 <__aeabi_fsub>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <PID_Compute+0x1bc>)
 8001564:	601a      	str	r2, [r3, #0]
	}

	if(output_sum > 1000.0f){
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <PID_Compute+0x1bc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	492e      	ldr	r1, [pc, #184]	; (8001624 <PID_Compute+0x1c0>)
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fd0f 	bl	8000f90 <__aeabi_fcmpgt>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <PID_Compute+0x11c>
		output_sum = 1000.0f;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <PID_Compute+0x1bc>)
 800157a:	4a2a      	ldr	r2, [pc, #168]	; (8001624 <PID_Compute+0x1c0>)
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e00b      	b.n	8001598 <PID_Compute+0x134>
	}else if(output_sum < -1000.0f){
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <PID_Compute+0x1bc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4928      	ldr	r1, [pc, #160]	; (8001628 <PID_Compute+0x1c4>)
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fce4 	bl	8000f54 <__aeabi_fcmplt>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <PID_Compute+0x134>
		output_sum = -1000.0f;
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <PID_Compute+0x1bc>)
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <PID_Compute+0x1c4>)
 8001596:	601a      	str	r2, [r3, #0]
	}

	if(pid_ctr.on_e_m == PID_ON_E){
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <PID_Compute+0x1b8>)
 800159a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800159e:	f083 0301 	eor.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <PID_Compute+0x150>
		output = kp * error;
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	69b8      	ldr	r0, [r7, #24]
 80015ac:	f7ff fb34 	bl	8000c18 <__aeabi_fmul>
 80015b0:	4603      	mov	r3, r0
 80015b2:	61fb      	str	r3, [r7, #28]
	}

	output += output_sum - kd * input_d;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <PID_Compute+0x1bc>)
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6938      	ldr	r0, [r7, #16]
 80015bc:	f7ff fb2c 	bl	8000c18 <__aeabi_fmul>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff fa1d 	bl	8000a04 <__aeabi_fsub>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4619      	mov	r1, r3
 80015ce:	69f8      	ldr	r0, [r7, #28]
 80015d0:	f7ff fa1a 	bl	8000a08 <__addsf3>
 80015d4:	4603      	mov	r3, r0
 80015d6:	61fb      	str	r3, [r7, #28]
	if(output > 1000.0f){
 80015d8:	4912      	ldr	r1, [pc, #72]	; (8001624 <PID_Compute+0x1c0>)
 80015da:	69f8      	ldr	r0, [r7, #28]
 80015dc:	f7ff fcd8 	bl	8000f90 <__aeabi_fcmpgt>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <PID_Compute+0x188>
		output = 1000.0f;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <PID_Compute+0x1c0>)
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	e008      	b.n	80015fe <PID_Compute+0x19a>
	}
	else if(output < -1000.0f){
 80015ec:	490e      	ldr	r1, [pc, #56]	; (8001628 <PID_Compute+0x1c4>)
 80015ee:	69f8      	ldr	r0, [r7, #28]
 80015f0:	f7ff fcb0 	bl	8000f54 <__aeabi_fcmplt>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <PID_Compute+0x19a>
		output = -1000.0f;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <PID_Compute+0x1c4>)
 80015fc:	61fb      	str	r3, [r7, #28]
	}

	//Store
	pid_o.output = output;
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <PID_Compute+0x1c8>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	6053      	str	r3, [r2, #4]
	last_input = input;
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <PID_Compute+0x1b4>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6013      	str	r3, [r2, #0]
}
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	bf00      	nop
 8001614:	200001e8 	.word	0x200001e8
 8001618:	200001f8 	.word	0x200001f8
 800161c:	200001bc 	.word	0x200001bc
 8001620:	200001fc 	.word	0x200001fc
 8001624:	447a0000 	.word	0x447a0000
 8001628:	c47a0000 	.word	0xc47a0000
 800162c:	200001f0 	.word	0x200001f0

08001630 <PID_Timer_Interrupt>:

//Timer interrupt
void PID_Timer_Interrupt(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	PID_Compute();
 8001634:	f7ff ff16 	bl	8001464 <PID_Compute>
	PID_Ready(pid_o.output);
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <PID_Timer_Interrupt+0x18>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fead 	bl	800239c <PID_Ready>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001f0 	.word	0x200001f0

0800164c <PID_Set_Sampling_Time>:
//Returns sampling time in milliseconds
uint16_t PID_Get_Sampling_Time(){
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
}
//Sets PID sampling time
void PID_Set_Sampling_Time(uint16_t ms){
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	2264      	movs	r2, #100	; 0x64
 800165a:	fb03 f202 	mul.w	r2, r3, r2
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <PID_Set_Sampling_Time+0x30>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	2264      	movs	r2, #100	; 0x64
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	461a      	mov	r2, r3
 800166e:	4b03      	ldr	r3, [pc, #12]	; (800167c <PID_Set_Sampling_Time+0x30>)
 8001670:	60da      	str	r2, [r3, #12]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000580 	.word	0x20000580

08001680 <PID_Start>:
//Starts PID. Before calling this, correct sampling time should be set
void PID_Start(){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	if(!pid_o.running){
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <PID_Start+0x30>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00c      	beq.n	80016ac <PID_Start+0x2c>
		last_input = pid_i.input;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <PID_Start+0x34>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <PID_Start+0x38>)
 8001698:	6013      	str	r3, [r2, #0]
		output_sum = 0;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <PID_Start+0x3c>)
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
		PID_Timer_Restart();
 80016a2:	f7ff fecf 	bl	8001444 <PID_Timer_Restart>
		pid_o.running = true;
 80016a6:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <PID_Start+0x30>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
	}
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200001f0 	.word	0x200001f0
 80016b4:	200001e8 	.word	0x200001e8
 80016b8:	200001f8 	.word	0x200001f8
 80016bc:	200001fc 	.word	0x200001fc

080016c0 <PID_Stop>:
//Stops PID
void PID_Stop(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	if(pid_o.running){
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <PID_Stop+0x24>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <PID_Stop+0x1e>
		PID_Timer_Stop();
 80016cc:	f7ff feb0 	bl	8001430 <PID_Timer_Stop>
		PID_Ready(0);
 80016d0:	f04f 0000 	mov.w	r0, #0
 80016d4:	f000 fe62 	bl	800239c <PID_Ready>
		pid_o.running = false;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <PID_Stop+0x24>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
	}
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200001f0 	.word	0x200001f0

080016e8 <Potentiometer_ADC_Interrupt>:
static uint32_t adctmp; //Buffer variable for collecting ADC measurements sum
static uint16_t adccnt; //Counter for how many measurements were performed
static bool init_cplt; //Set to "true" once ADC initialization is complete and measurement is working

//ADC Interrupt
void Potentiometer_ADC_Interrupt(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	adctmp += HAL_ADC_GetValue(&hadc1);
 80016ec:	4816      	ldr	r0, [pc, #88]	; (8001748 <Potentiometer_ADC_Interrupt+0x60>)
 80016ee:	f002 f821 	bl	8003734 <HAL_ADC_GetValue>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <Potentiometer_ADC_Interrupt+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <Potentiometer_ADC_Interrupt+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]
	adccnt++;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <Potentiometer_ADC_Interrupt+0x68>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <Potentiometer_ADC_Interrupt+0x68>)
 8001708:	801a      	strh	r2, [r3, #0]
	if(adccnt == POTENTIOMETER_SAMPLE_CNT){
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <Potentiometer_ADC_Interrupt+0x68>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d115      	bne.n	800173e <Potentiometer_ADC_Interrupt+0x56>
		potentiometer_o.position = (float)adctmp / (float)POTENTIOMETER_SAMPLE_CNT;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <Potentiometer_ADC_Interrupt+0x64>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fa26 	bl	8000b68 <__aeabi_ui2f>
 800171c:	4603      	mov	r3, r0
 800171e:	490d      	ldr	r1, [pc, #52]	; (8001754 <Potentiometer_ADC_Interrupt+0x6c>)
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fb2d 	bl	8000d80 <__aeabi_fdiv>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <Potentiometer_ADC_Interrupt+0x70>)
 800172c:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 800172e:	f000 fe45 	bl	80023bc <Potentiometer_Ready>
		adccnt = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <Potentiometer_ADC_Interrupt+0x68>)
 8001734:	2200      	movs	r2, #0
 8001736:	801a      	strh	r2, [r3, #0]
		adctmp = 0;
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <Potentiometer_ADC_Interrupt+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
	}
	init_cplt = true;
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <Potentiometer_ADC_Interrupt+0x74>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000500 	.word	0x20000500
 800174c:	20000204 	.word	0x20000204
 8001750:	20000208 	.word	0x20000208
 8001754:	42c80000 	.word	0x42c80000
 8001758:	20000200 	.word	0x20000200
 800175c:	2000020a 	.word	0x2000020a

08001760 <Potentiometer_Init>:

//Runs measurement, called once at start
void Potentiometer_Init(){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001764:	bf00      	nop
 8001766:	480a      	ldr	r0, [pc, #40]	; (8001790 <Potentiometer_Init+0x30>)
 8001768:	f002 fa50 	bl	8003c0c <HAL_ADCEx_Calibration_Start>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f9      	bne.n	8001766 <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <Potentiometer_Init+0x30>)
 8001774:	f001 ff28 	bl	80035c8 <HAL_ADC_Start_IT>
	while(!init_cplt);
 8001778:	bf00      	nop
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <Potentiometer_Init+0x34>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	f083 0301 	eor.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f8      	bne.n	800177a <Potentiometer_Init+0x1a>
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000500 	.word	0x20000500
 8001794:	2000020a 	.word	0x2000020a

08001798 <Signal_Timer_Stop>:
//Working variables
static uint32_t timeout_passed_ms = 0; //Counter for measuring time since getting first edge of signal
static bool signal_reading;

//Functions used only in this file
static void Signal_Timer_Stop(){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <Signal_Timer_Stop+0x10>)
 800179e:	f005 faf5 	bl	8006d8c <HAL_TIM_Base_Stop_IT>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200005c8 	.word	0x200005c8

080017ac <Signal_Timer_Restart>:
static void Signal_Timer_Restart(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <Signal_Timer_Restart+0x1c>)
 80017b2:	f005 faeb 	bl	8006d8c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <Signal_Timer_Restart+0x1c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim4);
 80017be:	4802      	ldr	r0, [pc, #8]	; (80017c8 <Signal_Timer_Restart+0x1c>)
 80017c0:	f005 fa92 	bl	8006ce8 <HAL_TIM_Base_Start_IT>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200005c8 	.word	0x200005c8

080017cc <Signal_Read_Timer>:
static uint32_t Signal_Read_Timer(){
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <Signal_Read_Timer+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	200005c8 	.word	0x200005c8

080017e4 <Signal_Read_Pin>:
static uint8_t Signal_Read_Pin(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	uint8_t retry = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
	uint8_t level;
	uint8_t i;

	while(retry != SIGNAL_DEBOUNCE_RETRIES){
 80017ee:	e024      	b.n	800183a <Signal_Read_Pin+0x56>
		retry++;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	3301      	adds	r3, #1
 80017f4:	71fb      	strb	r3, [r7, #7]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 80017f6:	2102      	movs	r1, #2
 80017f8:	4815      	ldr	r0, [pc, #84]	; (8001850 <Signal_Read_Pin+0x6c>)
 80017fa:	f002 ff9d 	bl	8004738 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	71bb      	strb	r3, [r7, #6]
		i = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	717b      	strb	r3, [r7, #5]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001806:	e010      	b.n	800182a <Signal_Read_Pin+0x46>
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 8001808:	2102      	movs	r1, #2
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <Signal_Read_Pin+0x6c>)
 800180c:	f002 ff94 	bl	8004738 <HAL_GPIO_ReadPin>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <Signal_Read_Pin+0x40>
				if(retry == SIGNAL_DEBOUNCE_RETRIES){
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d108      	bne.n	8001832 <Signal_Read_Pin+0x4e>
					//If this is a last retry and still can't determine signal level correctly, just return low
					return SIGNAL_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	e010      	b.n	8001846 <Signal_Read_Pin+0x62>
				}
				break;
			}
			i++;
 8001824:	797b      	ldrb	r3, [r7, #5]
 8001826:	3301      	adds	r3, #1
 8001828:	717b      	strb	r3, [r7, #5]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 800182a:	797b      	ldrb	r3, [r7, #5]
 800182c:	2b05      	cmp	r3, #5
 800182e:	d1eb      	bne.n	8001808 <Signal_Read_Pin+0x24>
 8001830:	e000      	b.n	8001834 <Signal_Read_Pin+0x50>
				break;
 8001832:	bf00      	nop
		}
		if(i == SIGNAL_DEBOUNCE_SAMPLES){
 8001834:	797b      	ldrb	r3, [r7, #5]
 8001836:	2b05      	cmp	r3, #5
 8001838:	d003      	beq.n	8001842 <Signal_Read_Pin+0x5e>
	while(retry != SIGNAL_DEBOUNCE_RETRIES){
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d1d7      	bne.n	80017f0 <Signal_Read_Pin+0xc>
 8001840:	e000      	b.n	8001844 <Signal_Read_Pin+0x60>
			break;
 8001842:	bf00      	nop
		}
	}
	return level;
 8001844:	79bb      	ldrb	r3, [r7, #6]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40010c00 	.word	0x40010c00

08001854 <Signal_SysTick_Interrupt>:

//SysTick interrupt, used for detecting signal timeout
void Signal_SysTick_Interrupt(){
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	if(signal_reading || signal_o.signal_available){
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <Signal_SysTick_Interrupt+0x3c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d103      	bne.n	8001868 <Signal_SysTick_Interrupt+0x14>
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <Signal_SysTick_Interrupt+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d010      	beq.n	800188a <Signal_SysTick_Interrupt+0x36>
		if(timeout_passed_ms >= signal_ctr.timeout_ms){
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <Signal_SysTick_Interrupt+0x44>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <Signal_SysTick_Interrupt+0x48>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d805      	bhi.n	8001880 <Signal_SysTick_Interrupt+0x2c>
			signal_o.signal_available = false;
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <Signal_SysTick_Interrupt+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
			Signal_Gone();
 800187a:	f000 fded 	bl	8002458 <Signal_Gone>
		}else{
			timeout_passed_ms++;
		}
	}
}
 800187e:	e004      	b.n	800188a <Signal_SysTick_Interrupt+0x36>
			timeout_passed_ms++;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <Signal_SysTick_Interrupt+0x48>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <Signal_SysTick_Interrupt+0x48>)
 8001888:	6013      	str	r3, [r2, #0]
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000021c 	.word	0x2000021c
 8001894:	20000210 	.word	0x20000210
 8001898:	2000020c 	.word	0x2000020c
 800189c:	20000218 	.word	0x20000218

080018a0 <Signal_Timer_Interrupt>:
void Signal_Timer_Interrupt(){
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	signal_reading = false;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <Signal_Timer_Interrupt+0x14>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000021c 	.word	0x2000021c

080018b8 <Signal_Pin_Interrupt>:
//Signal pin interrupt
void Signal_Pin_Interrupt(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	if(Signal_Read_Pin() == SIGNAL_HIGH){
 80018be:	f7ff ff91 	bl	80017e4 <Signal_Read_Pin>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d108      	bne.n	80018da <Signal_Pin_Interrupt+0x22>
		//Start measuring signal length
		Signal_Timer_Restart();
 80018c8:	f7ff ff70 	bl	80017ac <Signal_Timer_Restart>
		timeout_passed_ms = 0;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <Signal_Pin_Interrupt+0x68>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
		signal_reading = true;
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <Signal_Pin_Interrupt+0x6c>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
		signal_reading = false;
		signal_o.signal_available = true;
		signal_o.length_ms = length_ms;
		Signal_Received();
	}
}
 80018d8:	e01e      	b.n	8001918 <Signal_Pin_Interrupt+0x60>
	}else if(signal_reading){
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <Signal_Pin_Interrupt+0x6c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d01a      	beq.n	8001918 <Signal_Pin_Interrupt+0x60>
		float length_ms  = (float)((uint32_t)Signal_Read_Timer() + (uint32_t)1) / 24000.0f;
 80018e2:	f7ff ff73 	bl	80017cc <Signal_Read_Timer>
 80018e6:	4603      	mov	r3, r0
 80018e8:	3301      	adds	r3, #1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f93c 	bl	8000b68 <__aeabi_ui2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	490d      	ldr	r1, [pc, #52]	; (8001928 <Signal_Pin_Interrupt+0x70>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fa43 	bl	8000d80 <__aeabi_fdiv>
 80018fa:	4603      	mov	r3, r0
 80018fc:	607b      	str	r3, [r7, #4]
		Signal_Timer_Stop();
 80018fe:	f7ff ff4b 	bl	8001798 <Signal_Timer_Stop>
		signal_reading = false;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <Signal_Pin_Interrupt+0x6c>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
		signal_o.signal_available = true;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <Signal_Pin_Interrupt+0x74>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]
		signal_o.length_ms = length_ms;
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <Signal_Pin_Interrupt+0x74>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6053      	str	r3, [r2, #4]
		Signal_Received();
 8001914:	f000 fdbc 	bl	8002490 <Signal_Received>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000218 	.word	0x20000218
 8001924:	2000021c 	.word	0x2000021c
 8001928:	46bb8000 	.word	0x46bb8000
 800192c:	20000210 	.word	0x20000210

08001930 <_memcpy>:
//Received status and configuration data pointers from host
usb_config_t usb_rx_config;
usb_rx_status_t usb_rx_status;

//Function used only in this file, simple data copy loop for unaligned memory access
static void _memcpy(uint32_t dst_addr, uint32_t src_addr, uint32_t length){
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
	while(i != length){
 8001940:	e00b      	b.n	800195a <_memcpy+0x2a>
		*(uint8_t *)(dst_addr + i) = *(uint8_t *)(src_addr + i);
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	4413      	add	r3, r2
 8001948:	4619      	mov	r1, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	4413      	add	r3, r2
 8001950:	780a      	ldrb	r2, [r1, #0]
 8001952:	701a      	strb	r2, [r3, #0]
		i++;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
	while(i != length){
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	d1ef      	bne.n	8001942 <_memcpy+0x12>
	}
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
	...

08001970 <USB_Packet_Received>:

//Called from USB packet received interrupt
void USB_Packet_Received(uint8_t *data, uint32_t length){
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
		each time "*data" will contain 64 or less bytes, "length" will indicate how many bytes
		can be read from "*data".
	*/

	//Ignore any packet if previous packet request is still pending or size could not be correct
	if((usb_o.usb_rq != USB_RQ_NONE) || (length % sizeof(uint32_t))){
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <USB_Packet_Received+0xf0>)
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 81c3 	bne.w	8001d0a <USB_Packet_Received+0x39a>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 81bd 	bne.w	8001d0a <USB_Packet_Received+0x39a>
		return;
	}

	//Variables for CRCs
	uint32_t stored_crc = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
	uint32_t actual_crc = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
	
	//Calculate expecting configuration request packet length without CRC padding symbols
	uint32_t cmd_rx_config_rq_length = 2 + sizeof(uint8_t) + sizeof(uint32_t);
 8001998:	2307      	movs	r3, #7
 800199a:	617b      	str	r3, [r7, #20]
	//Include CRC padding symbols in length
	while(cmd_rx_config_rq_length % sizeof(uint32_t)) cmd_rx_config_rq_length++;
 800199c:	e002      	b.n	80019a4 <USB_Packet_Received+0x34>
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f7      	bne.n	800199e <USB_Packet_Received+0x2e>

	//Configuration request from host, length is less than 64
	if(
		(data[1] == USB_CMD_CONFIG) &&
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3301      	adds	r3, #1
 80019b2:	781b      	ldrb	r3, [r3, #0]
	if(
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d129      	bne.n	8001a0c <USB_Packet_Received+0x9c>
		((uint32_t)data[0] == cmd_rx_config_rq_length) &&
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
		(data[1] == USB_CMD_CONFIG) &&
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d123      	bne.n	8001a0c <USB_Packet_Received+0x9c>
		((uint32_t)data[0] == cmd_rx_config_rq_length) &&
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d11f      	bne.n	8001a0c <USB_Packet_Received+0x9c>
		(length == cmd_rx_config_rq_length)
	){
		_memcpy((uint32_t)&stored_crc, (uint32_t)&data[length - sizeof(uint32_t)], sizeof(uint32_t));
 80019cc:	f107 0008 	add.w	r0, r7, #8
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	3b04      	subs	r3, #4
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	2204      	movs	r2, #4
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff ffa8 	bl	8001930 <_memcpy>
		actual_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / sizeof(uint32_t)) - 1);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3b01      	subs	r3, #1
 80019e6:	461a      	mov	r2, r3
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	481e      	ldr	r0, [pc, #120]	; (8001a64 <USB_Packet_Received+0xf4>)
 80019ec:	f002 faed 	bl	8003fca <HAL_CRC_Calculate>
 80019f0:	60f8      	str	r0, [r7, #12]
		if(stored_crc == actual_crc){
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	f040 8189 	bne.w	8001d0e <USB_Packet_Received+0x39e>
			//Parse received request
			usb_o.set_revert_flash_rq = data[2];
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	789a      	ldrb	r2, [r3, #2]
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <USB_Packet_Received+0xf0>)
 8001a02:	709a      	strb	r2, [r3, #2]
			usb_o.usb_rq = USB_RQ_CONF;
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <USB_Packet_Received+0xf0>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	705a      	strb	r2, [r3, #1]
		}
		return;
 8001a0a:	e180      	b.n	8001d0e <USB_Packet_Received+0x39e>
	}

	//Calculate expecting status request packet length without CRC padding symbols
	//Length and command bytes
	uint32_t cmd_rx_status_rq_length = 2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
	//Append "usb_config_t" length
	cmd_rx_status_rq_length +=
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	333e      	adds	r3, #62	; 0x3e
 8001a14:	613b      	str	r3, [r7, #16]
		sizeof(float) +
		sizeof(uint16_t) +
		sizeof(uint16_t) +
		sizeof(uint8_t);
	//Append "usb_rx_status_t" length
	cmd_rx_status_rq_length +=
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	3306      	adds	r3, #6
 8001a1a:	613b      	str	r3, [r7, #16]
		sizeof(float) +
		sizeof(bool) +
		sizeof(uint8_t);
	//Append CRC length
	cmd_rx_status_rq_length +=
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	613b      	str	r3, [r7, #16]
		sizeof(uint32_t);
	
	//Include CRC padding symbols in length
	while(cmd_rx_status_rq_length % sizeof(uint32_t)) cmd_rx_status_rq_length++;
 8001a22:	e002      	b.n	8001a2a <USB_Packet_Received+0xba>
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	3301      	adds	r3, #1
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f7      	bne.n	8001a24 <USB_Packet_Received+0xb4>

	//Status request from host, length is more than 64, so here we store first 64 bytes
	if(
		(data[1] == USB_CMD_STATUS) &&
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3301      	adds	r3, #1
 8001a38:	781b      	ldrb	r3, [r3, #0]
	if(
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d116      	bne.n	8001a6c <USB_Packet_Received+0xfc>
		((uint32_t)data[0] == cmd_rx_status_rq_length) &&
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
		(data[1] == USB_CMD_STATUS) &&
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d110      	bne.n	8001a6c <USB_Packet_Received+0xfc>
		((uint32_t)data[0] == cmd_rx_status_rq_length) &&
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d10d      	bne.n	8001a6c <USB_Packet_Received+0xfc>
		(length == 64)
	){
		_memcpy((uint32_t)&rx_buffer[0], (uint32_t)&data[0], 64);
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <USB_Packet_Received+0xf8>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2240      	movs	r2, #64	; 0x40
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff ff6a 	bl	8001930 <_memcpy>
		return;
 8001a5c:	e158      	b.n	8001d10 <USB_Packet_Received+0x3a0>
 8001a5e:	bf00      	nop
 8001a60:	20000420 	.word	0x20000420
 8001a64:	20000530 	.word	0x20000530
 8001a68:	20000320 	.word	0x20000320
	}

	//Status request from host, here we store remaining bytes and parse results
	if(
		(rx_buffer[0] == cmd_rx_status_rq_length) &&
 8001a6c:	4baa      	ldr	r3, [pc, #680]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
	if(
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	f040 8141 	bne.w	8001cfc <USB_Packet_Received+0x38c>
		(rx_buffer[1] == USB_CMD_STATUS) &&
 8001a7a:	4ba7      	ldr	r3, [pc, #668]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001a7c:	785b      	ldrb	r3, [r3, #1]
		(rx_buffer[0] == cmd_rx_status_rq_length) &&
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	f040 813c 	bne.w	8001cfc <USB_Packet_Received+0x38c>
		(64 + length == cmd_rx_status_rq_length)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	3340      	adds	r3, #64	; 0x40
		(rx_buffer[1] == USB_CMD_STATUS) &&
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	f040 8136 	bne.w	8001cfc <USB_Packet_Received+0x38c>
	){
		//Copy remaining data
		_memcpy((uint32_t)&rx_buffer[64], (uint32_t)&data[0], length);
 8001a90:	48a2      	ldr	r0, [pc, #648]	; (8001d1c <USB_Packet_Received+0x3ac>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff ff4a 	bl	8001930 <_memcpy>
		//Check CRC
		_memcpy((uint32_t)&stored_crc, (uint32_t)&rx_buffer[cmd_rx_status_rq_length - sizeof(uint32_t)], sizeof(uint32_t));
 8001a9c:	f107 0008 	add.w	r0, r7, #8
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	4a9c      	ldr	r2, [pc, #624]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff ff40 	bl	8001930 <_memcpy>
		actual_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)rx_buffer, (cmd_rx_status_rq_length / sizeof(uint32_t)) - 1);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4997      	ldr	r1, [pc, #604]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001aba:	4899      	ldr	r0, [pc, #612]	; (8001d20 <USB_Packet_Received+0x3b0>)
 8001abc:	f002 fa85 	bl	8003fca <HAL_CRC_Calculate>
 8001ac0:	60f8      	str	r0, [r7, #12]
		if(stored_crc == actual_crc){
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	f040 8118 	bne.w	8001cfc <USB_Packet_Received+0x38c>
			//We don't copy size and command bytes here
			length = 2;
 8001acc:	2302      	movs	r3, #2
 8001ace:	603b      	str	r3, [r7, #0]

			//Copy config to global struct variables
			_memcpy((uint32_t)&usb_rx_config.potentiometer_min, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001ad0:	4894      	ldr	r0, [pc, #592]	; (8001d24 <USB_Packet_Received+0x3b4>)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	4a90      	ldr	r2, [pc, #576]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001ad6:	4413      	add	r3, r2
 8001ad8:	2202      	movs	r2, #2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff ff28 	bl	8001930 <_memcpy>
			length += sizeof(uint16_t);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.potentiometer_max, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001ae6:	4890      	ldr	r0, [pc, #576]	; (8001d28 <USB_Packet_Received+0x3b8>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4a8b      	ldr	r2, [pc, #556]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001aec:	4413      	add	r3, r2
 8001aee:	2202      	movs	r2, #2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff ff1d 	bl	8001930 <_memcpy>
			length += sizeof(uint16_t);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3302      	adds	r3, #2
 8001afa:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.motor_max_power, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001afc:	488b      	ldr	r0, [pc, #556]	; (8001d2c <USB_Packet_Received+0x3bc>)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	4a85      	ldr	r2, [pc, #532]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001b02:	4413      	add	r3, r2
 8001b04:	2201      	movs	r2, #1
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7ff ff12 	bl	8001930 <_memcpy>
			length += sizeof(uint8_t);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.motor_invert, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001b12:	4887      	ldr	r0, [pc, #540]	; (8001d30 <USB_Packet_Received+0x3c0>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4a80      	ldr	r2, [pc, #512]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7ff ff07 	bl	8001930 <_memcpy>
			length += sizeof(bool);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_ignore, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001b28:	4882      	ldr	r0, [pc, #520]	; (8001d34 <USB_Packet_Received+0x3c4>)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	4a7a      	ldr	r2, [pc, #488]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001b2e:	4413      	add	r3, r2
 8001b30:	2201      	movs	r2, #1
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff fefc 	bl	8001930 <_memcpy>
			length += sizeof(bool);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_min, (uint32_t)&rx_buffer[length], sizeof(float));
 8001b3e:	487e      	ldr	r0, [pc, #504]	; (8001d38 <USB_Packet_Received+0x3c8>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4a75      	ldr	r2, [pc, #468]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001b44:	4413      	add	r3, r2
 8001b46:	2204      	movs	r2, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff fef1 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	3304      	adds	r3, #4
 8001b52:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_max, (uint32_t)&rx_buffer[length], sizeof(float));
 8001b54:	4879      	ldr	r0, [pc, #484]	; (8001d3c <USB_Packet_Received+0x3cc>)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	4a6f      	ldr	r2, [pc, #444]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001b5a:	4413      	add	r3, r2
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff fee6 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	3304      	adds	r3, #4
 8001b68:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_timeout, (uint32_t)&rx_buffer[length], sizeof(uint32_t));
 8001b6a:	4875      	ldr	r0, [pc, #468]	; (8001d40 <USB_Packet_Received+0x3d0>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4a6a      	ldr	r2, [pc, #424]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001b70:	4413      	add	r3, r2
 8001b72:	2204      	movs	r2, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7ff fedb 	bl	8001930 <_memcpy>
			length += sizeof(uint32_t);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.led_mode, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001b80:	4870      	ldr	r0, [pc, #448]	; (8001d44 <USB_Packet_Received+0x3d4>)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	4a64      	ldr	r2, [pc, #400]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001b86:	4413      	add	r3, r2
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff fed0 	bl	8001930 <_memcpy>
			length += sizeof(uint8_t);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_on_e_m, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001b96:	486c      	ldr	r0, [pc, #432]	; (8001d48 <USB_Packet_Received+0x3d8>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4a5f      	ldr	r2, [pc, #380]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001b9c:	4413      	add	r3, r2
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff fec5 	bl	8001930 <_memcpy>
			length += sizeof(bool);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kp_1, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bac:	4867      	ldr	r0, [pc, #412]	; (8001d4c <USB_Packet_Received+0x3dc>)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	4a59      	ldr	r2, [pc, #356]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7ff feba 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_ki_1, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bc2:	4863      	ldr	r0, [pc, #396]	; (8001d50 <USB_Packet_Received+0x3e0>)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4a54      	ldr	r2, [pc, #336]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001bc8:	4413      	add	r3, r2
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7ff feaf 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kd_1, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bd8:	485e      	ldr	r0, [pc, #376]	; (8001d54 <USB_Packet_Received+0x3e4>)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	4a4e      	ldr	r2, [pc, #312]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001bde:	4413      	add	r3, r2
 8001be0:	2204      	movs	r2, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7ff fea4 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	3304      	adds	r3, #4
 8001bec:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kp_2, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bee:	485a      	ldr	r0, [pc, #360]	; (8001d58 <USB_Packet_Received+0x3e8>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4a49      	ldr	r2, [pc, #292]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001bf4:	4413      	add	r3, r2
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f7ff fe99 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	3304      	adds	r3, #4
 8001c02:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_ki_2, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c04:	4855      	ldr	r0, [pc, #340]	; (8001d5c <USB_Packet_Received+0x3ec>)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	4a43      	ldr	r2, [pc, #268]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7ff fe8e 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	3304      	adds	r3, #4
 8001c18:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kd_2, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c1a:	4851      	ldr	r0, [pc, #324]	; (8001d60 <USB_Packet_Received+0x3f0>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4a3e      	ldr	r2, [pc, #248]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001c20:	4413      	add	r3, r2
 8001c22:	2204      	movs	r2, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7ff fe83 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kp_3, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c30:	484c      	ldr	r0, [pc, #304]	; (8001d64 <USB_Packet_Received+0x3f4>)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	4a38      	ldr	r2, [pc, #224]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001c36:	4413      	add	r3, r2
 8001c38:	2204      	movs	r2, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7ff fe78 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3304      	adds	r3, #4
 8001c44:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_ki_3, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c46:	4848      	ldr	r0, [pc, #288]	; (8001d68 <USB_Packet_Received+0x3f8>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4a33      	ldr	r2, [pc, #204]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7ff fe6d 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kd_3, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c5c:	4843      	ldr	r0, [pc, #268]	; (8001d6c <USB_Packet_Received+0x3fc>)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	4a2d      	ldr	r2, [pc, #180]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001c62:	4413      	add	r3, r2
 8001c64:	2204      	movs	r2, #4
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7ff fe62 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_split_steps_1, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001c72:	483f      	ldr	r0, [pc, #252]	; (8001d70 <USB_Packet_Received+0x400>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001c78:	4413      	add	r3, r2
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7ff fe57 	bl	8001930 <_memcpy>
			length += sizeof(uint16_t);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3302      	adds	r3, #2
 8001c86:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_split_steps_2, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001c88:	483a      	ldr	r0, [pc, #232]	; (8001d74 <USB_Packet_Received+0x404>)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	4a22      	ldr	r2, [pc, #136]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001c8e:	4413      	add	r3, r2
 8001c90:	2202      	movs	r2, #2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7ff fe4c 	bl	8001930 <_memcpy>
			length += sizeof(uint16_t);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_sampling_ms, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001c9e:	4836      	ldr	r0, [pc, #216]	; (8001d78 <USB_Packet_Received+0x408>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7ff fe41 	bl	8001930 <_memcpy>
			length += sizeof(uint8_t);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	603b      	str	r3, [r7, #0]

			//Copy status
			_memcpy((uint32_t)&usb_rx_status.pid_setpoint, (uint32_t)&rx_buffer[length], sizeof(float));
 8001cb4:	4831      	ldr	r0, [pc, #196]	; (8001d7c <USB_Packet_Received+0x40c>)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001cba:	4413      	add	r3, r2
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7ff fe36 	bl	8001930 <_memcpy>
			length += sizeof(float);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_status.usb_rq_stat_phold, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001cca:	482d      	ldr	r0, [pc, #180]	; (8001d80 <USB_Packet_Received+0x410>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001cd0:	4413      	add	r3, r2
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f7ff fe2b 	bl	8001930 <_memcpy>
			length += sizeof(bool);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_status.usb_rq_stat_motor, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001ce0:	4828      	ldr	r0, [pc, #160]	; (8001d84 <USB_Packet_Received+0x414>)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001ce6:	4413      	add	r3, r2
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7ff fe20 	bl	8001930 <_memcpy>
			length += sizeof(uint8_t);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	603b      	str	r3, [r7, #0]

			//Set status request flag
			usb_o.usb_rq = USB_RQ_STAT;
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <USB_Packet_Received+0x418>)
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	705a      	strb	r2, [r3, #1]
		}
	}

	//Clear length and command bytes in buffer
	rx_buffer[0] = 0x00;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
	rx_buffer[1] = 0xff;
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <USB_Packet_Received+0x3a8>)
 8001d04:	22ff      	movs	r2, #255	; 0xff
 8001d06:	705a      	strb	r2, [r3, #1]
 8001d08:	e002      	b.n	8001d10 <USB_Packet_Received+0x3a0>
		return;
 8001d0a:	bf00      	nop
 8001d0c:	e000      	b.n	8001d10 <USB_Packet_Received+0x3a0>
		return;
 8001d0e:	bf00      	nop
}
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000320 	.word	0x20000320
 8001d1c:	20000360 	.word	0x20000360
 8001d20:	20000530 	.word	0x20000530
 8001d24:	20000424 	.word	0x20000424
 8001d28:	20000426 	.word	0x20000426
 8001d2c:	20000428 	.word	0x20000428
 8001d30:	20000429 	.word	0x20000429
 8001d34:	2000042a 	.word	0x2000042a
 8001d38:	2000042c 	.word	0x2000042c
 8001d3c:	20000430 	.word	0x20000430
 8001d40:	20000434 	.word	0x20000434
 8001d44:	20000438 	.word	0x20000438
 8001d48:	20000439 	.word	0x20000439
 8001d4c:	2000043c 	.word	0x2000043c
 8001d50:	20000440 	.word	0x20000440
 8001d54:	20000444 	.word	0x20000444
 8001d58:	20000448 	.word	0x20000448
 8001d5c:	2000044c 	.word	0x2000044c
 8001d60:	20000450 	.word	0x20000450
 8001d64:	20000454 	.word	0x20000454
 8001d68:	20000458 	.word	0x20000458
 8001d6c:	2000045c 	.word	0x2000045c
 8001d70:	20000460 	.word	0x20000460
 8001d74:	20000462 	.word	0x20000462
 8001d78:	20000464 	.word	0x20000464
 8001d7c:	20000468 	.word	0x20000468
 8001d80:	2000046c 	.word	0x2000046c
 8001d84:	2000046d 	.word	0x2000046d
 8001d88:	20000420 	.word	0x20000420

08001d8c <USB_Send_Status>:

//Sends status, clears pending request flag
void USB_Send_Status(usb_tx_status_t *status){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	//Keep track of written data
	uint8_t length = 0; //Total length should not be more than 255 bytes
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]

	//First byte of tx array contains total data length, we write it last
	length++;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
	
	//Write command byte
	tx_buffer[length] = USB_CMD_STATUS;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	4a39      	ldr	r2, [pc, #228]	; (8001e88 <USB_Send_Status+0xfc>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	54d1      	strb	r1, [r2, r3]
	length++;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	3301      	adds	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]

	//Write data
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->pid_running, sizeof(bool));
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	4a36      	ldr	r2, [pc, #216]	; (8001e88 <USB_Send_Status+0xfc>)
 8001db0:	4413      	add	r3, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7ff fdb9 	bl	8001930 <_memcpy>
	length += sizeof(bool);
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->pid_setpoint, sizeof(float));
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	4a30      	ldr	r2, [pc, #192]	; (8001e88 <USB_Send_Status+0xfc>)
 8001dc8:	4413      	add	r3, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7ff fdac 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->potentiometer_position, sizeof(float));
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	4a29      	ldr	r2, [pc, #164]	; (8001e88 <USB_Send_Status+0xfc>)
 8001de2:	4413      	add	r3, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3308      	adds	r3, #8
 8001dea:	2204      	movs	r2, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7ff fd9f 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	3304      	adds	r3, #4
 8001df6:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->motor_power, sizeof(int16_t));
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <USB_Send_Status+0xfc>)
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	330c      	adds	r3, #12
 8001e04:	2202      	movs	r2, #2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7ff fd92 	bl	8001930 <_memcpy>
	length += sizeof(int16_t);
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	3302      	adds	r3, #2
 8001e10:	73fb      	strb	r3, [r7, #15]

	//Write CRC padding bytes
	while(length % sizeof(uint32_t)){
 8001e12:	e006      	b.n	8001e22 <USB_Send_Status+0x96>
		tx_buffer[length] = USB_CRC_PADDING_SYMBOL;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	4a1c      	ldr	r2, [pc, #112]	; (8001e88 <USB_Send_Status+0xfc>)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	54d1      	strb	r1, [r2, r3]
		length++;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
	while(length % sizeof(uint32_t)){
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f2      	bne.n	8001e14 <USB_Send_Status+0x88>
	}

	//Set length at start now
	tx_buffer[0] = length + sizeof(uint32_t);
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	3304      	adds	r3, #4
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <USB_Send_Status+0xfc>)
 8001e36:	701a      	strb	r2, [r3, #0]

	//Write CRC
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&tx_buffer, (length / sizeof(uint32_t)));
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4911      	ldr	r1, [pc, #68]	; (8001e88 <USB_Send_Status+0xfc>)
 8001e42:	4812      	ldr	r0, [pc, #72]	; (8001e8c <USB_Send_Status+0x100>)
 8001e44:	f002 f8c1 	bl	8003fca <HAL_CRC_Calculate>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60bb      	str	r3, [r7, #8]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&crc, sizeof(uint32_t));
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <USB_Send_Status+0xfc>)
 8001e50:	4413      	add	r3, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7ff fd68 	bl	8001930 <_memcpy>
	length += sizeof(uint32_t);
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	3304      	adds	r3, #4
 8001e64:	73fb      	strb	r3, [r7, #15]
	
	//Send
	CDC_Transmit_FS((uint8_t *)&tx_buffer, length);
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4806      	ldr	r0, [pc, #24]	; (8001e88 <USB_Send_Status+0xfc>)
 8001e6e:	f00a f8d1 	bl	800c014 <CDC_Transmit_FS>

	//Clear flags
	usb_o.set_revert_flash_rq = USB_SETTINGS_KEEP;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <USB_Send_Status+0x104>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	709a      	strb	r2, [r3, #2]
	usb_o.usb_rq = USB_RQ_NONE;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <USB_Send_Status+0x104>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	705a      	strb	r2, [r3, #1]
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000220 	.word	0x20000220
 8001e8c:	20000530 	.word	0x20000530
 8001e90:	20000420 	.word	0x20000420

08001e94 <USB_Send_Config>:
//Sends config, clears pending request flag
void USB_Send_Config(usb_config_t *config){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	//Keep track of written data
	uint8_t length = 0; //Total length should not be more than 255 bytes
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]

	//First byte of tx array contains total data length, we write it last
	length++;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
	
	//Write command byte
	tx_buffer[length] = USB_CMD_CONFIG;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	4aae      	ldr	r2, [pc, #696]	; (8002164 <USB_Send_Config+0x2d0>)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	54d1      	strb	r1, [r2, r3]
	length++;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]

	//Write data
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->potentiometer_min, sizeof(uint16_t));
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	4aab      	ldr	r2, [pc, #684]	; (8002164 <USB_Send_Config+0x2d0>)
 8001eb8:	4413      	add	r3, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f7ff fd35 	bl	8001930 <_memcpy>
	length += sizeof(uint16_t);
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	3302      	adds	r3, #2
 8001eca:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->potentiometer_max, sizeof(uint16_t));
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	4aa5      	ldr	r2, [pc, #660]	; (8002164 <USB_Send_Config+0x2d0>)
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7ff fd28 	bl	8001930 <_memcpy>
	length += sizeof(uint16_t);
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->motor_max_power, sizeof(uint8_t));
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	4a9e      	ldr	r2, [pc, #632]	; (8002164 <USB_Send_Config+0x2d0>)
 8001eea:	4413      	add	r3, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7ff fd1b 	bl	8001930 <_memcpy>
	length += sizeof(uint8_t);
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	3301      	adds	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->motor_invert, sizeof(bool));
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	4a98      	ldr	r2, [pc, #608]	; (8002164 <USB_Send_Config+0x2d0>)
 8001f04:	4413      	add	r3, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3305      	adds	r3, #5
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f7ff fd0e 	bl	8001930 <_memcpy>
	length += sizeof(bool);
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	3301      	adds	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_ignore, sizeof(bool));
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	4a91      	ldr	r2, [pc, #580]	; (8002164 <USB_Send_Config+0x2d0>)
 8001f1e:	4413      	add	r3, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3306      	adds	r3, #6
 8001f26:	2201      	movs	r2, #1
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7ff fd01 	bl	8001930 <_memcpy>
	length += sizeof(bool);
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	3301      	adds	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_min, sizeof(float));
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	4a8b      	ldr	r2, [pc, #556]	; (8002164 <USB_Send_Config+0x2d0>)
 8001f38:	4413      	add	r3, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3308      	adds	r3, #8
 8001f40:	2204      	movs	r2, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	f7ff fcf4 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_max, sizeof(float));
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	4a84      	ldr	r2, [pc, #528]	; (8002164 <USB_Send_Config+0x2d0>)
 8001f52:	4413      	add	r3, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	330c      	adds	r3, #12
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7ff fce7 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	3304      	adds	r3, #4
 8001f66:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_timeout, sizeof(uint32_t));
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	; (8002164 <USB_Send_Config+0x2d0>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3310      	adds	r3, #16
 8001f74:	2204      	movs	r2, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7ff fcda 	bl	8001930 <_memcpy>
	length += sizeof(uint32_t);
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->led_mode, sizeof(uint8_t));
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	4a77      	ldr	r2, [pc, #476]	; (8002164 <USB_Send_Config+0x2d0>)
 8001f86:	4413      	add	r3, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3314      	adds	r3, #20
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7ff fccd 	bl	8001930 <_memcpy>
	length += sizeof(uint8_t);
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_on_e_m, sizeof(bool));
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	4a71      	ldr	r2, [pc, #452]	; (8002164 <USB_Send_Config+0x2d0>)
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3315      	adds	r3, #21
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	f7ff fcc0 	bl	8001930 <_memcpy>
	length += sizeof(bool);
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kp_1, sizeof(float));
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	4a6a      	ldr	r2, [pc, #424]	; (8002164 <USB_Send_Config+0x2d0>)
 8001fba:	4413      	add	r3, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3318      	adds	r3, #24
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7ff fcb3 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_ki_1, sizeof(float));
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	4a64      	ldr	r2, [pc, #400]	; (8002164 <USB_Send_Config+0x2d0>)
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	331c      	adds	r3, #28
 8001fdc:	2204      	movs	r2, #4
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7ff fca6 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kd_1, sizeof(float));
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	4a5d      	ldr	r2, [pc, #372]	; (8002164 <USB_Send_Config+0x2d0>)
 8001fee:	4413      	add	r3, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f7ff fc99 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	3304      	adds	r3, #4
 8002002:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kp_2, sizeof(float));
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	4a57      	ldr	r2, [pc, #348]	; (8002164 <USB_Send_Config+0x2d0>)
 8002008:	4413      	add	r3, r2
 800200a:	4618      	mov	r0, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3324      	adds	r3, #36	; 0x24
 8002010:	2204      	movs	r2, #4
 8002012:	4619      	mov	r1, r3
 8002014:	f7ff fc8c 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	3304      	adds	r3, #4
 800201c:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_ki_2, sizeof(float));
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	4a50      	ldr	r2, [pc, #320]	; (8002164 <USB_Send_Config+0x2d0>)
 8002022:	4413      	add	r3, r2
 8002024:	4618      	mov	r0, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3328      	adds	r3, #40	; 0x28
 800202a:	2204      	movs	r2, #4
 800202c:	4619      	mov	r1, r3
 800202e:	f7ff fc7f 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	3304      	adds	r3, #4
 8002036:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kd_2, sizeof(float));
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <USB_Send_Config+0x2d0>)
 800203c:	4413      	add	r3, r2
 800203e:	4618      	mov	r0, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	332c      	adds	r3, #44	; 0x2c
 8002044:	2204      	movs	r2, #4
 8002046:	4619      	mov	r1, r3
 8002048:	f7ff fc72 	bl	8001930 <_memcpy>
	length += sizeof(float);
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	3304      	adds	r3, #4
 8002050:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kp_3, sizeof(float));
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	4a43      	ldr	r2, [pc, #268]	; (8002164 <USB_Send_Config+0x2d0>)
 8002056:	4413      	add	r3, r2
 8002058:	4618      	mov	r0, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3330      	adds	r3, #48	; 0x30
 800205e:	2204      	movs	r2, #4
 8002060:	4619      	mov	r1, r3
 8002062:	f7ff fc65 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	3304      	adds	r3, #4
 800206a:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_ki_3, sizeof(float));
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	4a3d      	ldr	r2, [pc, #244]	; (8002164 <USB_Send_Config+0x2d0>)
 8002070:	4413      	add	r3, r2
 8002072:	4618      	mov	r0, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3334      	adds	r3, #52	; 0x34
 8002078:	2204      	movs	r2, #4
 800207a:	4619      	mov	r1, r3
 800207c:	f7ff fc58 	bl	8001930 <_memcpy>
	length += sizeof(float);
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	3304      	adds	r3, #4
 8002084:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kd_3, sizeof(float));
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	4a36      	ldr	r2, [pc, #216]	; (8002164 <USB_Send_Config+0x2d0>)
 800208a:	4413      	add	r3, r2
 800208c:	4618      	mov	r0, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3338      	adds	r3, #56	; 0x38
 8002092:	2204      	movs	r2, #4
 8002094:	4619      	mov	r1, r3
 8002096:	f7ff fc4b 	bl	8001930 <_memcpy>
	length += sizeof(float);
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	3304      	adds	r3, #4
 800209e:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_split_steps_1, sizeof(uint16_t));
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	4a30      	ldr	r2, [pc, #192]	; (8002164 <USB_Send_Config+0x2d0>)
 80020a4:	4413      	add	r3, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	333c      	adds	r3, #60	; 0x3c
 80020ac:	2202      	movs	r2, #2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7ff fc3e 	bl	8001930 <_memcpy>
	length += sizeof(uint16_t);
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	3302      	adds	r3, #2
 80020b8:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_split_steps_2, sizeof(uint16_t));
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <USB_Send_Config+0x2d0>)
 80020be:	4413      	add	r3, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	333e      	adds	r3, #62	; 0x3e
 80020c6:	2202      	movs	r2, #2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7ff fc31 	bl	8001930 <_memcpy>
	length += sizeof(uint16_t);
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	3302      	adds	r3, #2
 80020d2:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_sampling_ms, sizeof(uint8_t));
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	4a23      	ldr	r2, [pc, #140]	; (8002164 <USB_Send_Config+0x2d0>)
 80020d8:	4413      	add	r3, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3340      	adds	r3, #64	; 0x40
 80020e0:	2201      	movs	r2, #1
 80020e2:	4619      	mov	r1, r3
 80020e4:	f7ff fc24 	bl	8001930 <_memcpy>
	length += sizeof(uint8_t);
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	3301      	adds	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]

	//Write CRC padding bytes
	while(length % sizeof(uint32_t)){
 80020ee:	e006      	b.n	80020fe <USB_Send_Config+0x26a>
		tx_buffer[length] = USB_CRC_PADDING_SYMBOL;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <USB_Send_Config+0x2d0>)
 80020f4:	2100      	movs	r1, #0
 80020f6:	54d1      	strb	r1, [r2, r3]
		length++;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	3301      	adds	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
	while(length % sizeof(uint32_t)){
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f2      	bne.n	80020f0 <USB_Send_Config+0x25c>
	}

	//Set length at start now
	tx_buffer[0] = length + sizeof(uint32_t);
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	3304      	adds	r3, #4
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b14      	ldr	r3, [pc, #80]	; (8002164 <USB_Send_Config+0x2d0>)
 8002112:	701a      	strb	r2, [r3, #0]

	//Write CRC
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&tx_buffer, (length / sizeof(uint32_t)));
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	4911      	ldr	r1, [pc, #68]	; (8002164 <USB_Send_Config+0x2d0>)
 800211e:	4812      	ldr	r0, [pc, #72]	; (8002168 <USB_Send_Config+0x2d4>)
 8002120:	f001 ff53 	bl	8003fca <HAL_CRC_Calculate>
 8002124:	4603      	mov	r3, r0
 8002126:	60bb      	str	r3, [r7, #8]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&crc, sizeof(uint32_t));
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <USB_Send_Config+0x2d0>)
 800212c:	4413      	add	r3, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f107 0308 	add.w	r3, r7, #8
 8002134:	2204      	movs	r2, #4
 8002136:	4619      	mov	r1, r3
 8002138:	f7ff fbfa 	bl	8001930 <_memcpy>
	length += sizeof(uint32_t);
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	3304      	adds	r3, #4
 8002140:	73fb      	strb	r3, [r7, #15]

	//Send
	CDC_Transmit_FS((uint8_t *)&tx_buffer, length);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	b29b      	uxth	r3, r3
 8002146:	4619      	mov	r1, r3
 8002148:	4806      	ldr	r0, [pc, #24]	; (8002164 <USB_Send_Config+0x2d0>)
 800214a:	f009 ff63 	bl	800c014 <CDC_Transmit_FS>

	//Clear flags
	usb_o.set_revert_flash_rq = USB_SETTINGS_KEEP;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <USB_Send_Config+0x2d8>)
 8002150:	2200      	movs	r2, #0
 8002152:	709a      	strb	r2, [r3, #2]
	usb_o.usb_rq = USB_RQ_NONE;
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <USB_Send_Config+0x2d8>)
 8002156:	2200      	movs	r2, #0
 8002158:	705a      	strb	r2, [r3, #1]
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000220 	.word	0x20000220
 8002168:	20000530 	.word	0x20000530
 800216c:	20000420 	.word	0x20000420

08002170 <USB_Det>:
//Checks if USB is connected and updates "usb_o.usb_present" variable
void USB_Det(){
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
	usb_o.usb_present = (hUsbDeviceFS.dev_state == USBD_STATE_ADDRESSED) || (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED);
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <USB_Det+0x30>)
 8002176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800217a:	2b02      	cmp	r3, #2
 800217c:	d004      	beq.n	8002188 <USB_Det+0x18>
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <USB_Det+0x30>)
 8002180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002184:	2b03      	cmp	r3, #3
 8002186:	d101      	bne.n	800218c <USB_Det+0x1c>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <USB_Det+0x1e>
 800218c:	2300      	movs	r3, #0
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <USB_Det+0x34>)
 8002196:	701a      	strb	r2, [r3, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	2000063c 	.word	0x2000063c
 80021a4:	20000420 	.word	0x20000420

080021a8 <HAL_ADC_ConvCpltCallback>:
#include "Drivers/signal.h"
#include "Drivers/motor.h"
#include "Drivers/led.h"

//ADC Conversation complete interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_ADC_ConvCpltCallback+0x20>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 80021ba:	f7ff fa95 	bl	80016e8 <Potentiometer_ADC_Interrupt>
    }
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40012400 	.word	0x40012400

080021cc <HAL_TIM_PeriodElapsedCallback>:

//Timer period elapsed interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d102      	bne.n	80021e4 <HAL_TIM_PeriodElapsedCallback+0x18>
		PID_Timer_Interrupt();
 80021de:	f7ff fa27 	bl	8001630 <PID_Timer_Interrupt>
	}
	else if(htim->Instance == TIM4){
		Signal_Timer_Interrupt();
	}
}
 80021e2:	e006      	b.n	80021f2 <HAL_TIM_PeriodElapsedCallback+0x26>
	else if(htim->Instance == TIM4){
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_TIM_PeriodElapsedCallback+0x26>
		Signal_Timer_Interrupt();
 80021ee:	f7ff fb57 	bl	80018a0 <Signal_Timer_Interrupt>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40000400 	.word	0x40000400
 8002200:	40000800 	.word	0x40000800

08002204 <HAL_GPIO_EXTI_Callback>:

//GPIO interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SIGNAL_Pin){
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d101      	bne.n	8002218 <HAL_GPIO_EXTI_Callback+0x14>
		Signal_Pin_Interrupt();
 8002214:	f7ff fb50 	bl	80018b8 <Signal_Pin_Interrupt>
	}
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <Interrupts_SysTick>:

//Interrupt function called in every millisecond by system timer
void Interrupts_SysTick(){
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	Signal_SysTick_Interrupt();
 8002224:	f7ff fb16 	bl	8001854 <Signal_SysTick_Interrupt>
	Motor_SysTick_Interrupt();
 8002228:	f7ff f828 	bl	800127c <Motor_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 800222c:	f7fe ffcc 	bl	80011c8 <LED_SysTick_Interrupt>
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}

08002234 <App_Init>:
#include "System/Drivers/usb.h"
#include "app.h"
#include "settings.h"

//Runs once at start
void App_Init(){
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	//Read configuration from flash into "settings_data" global struct
	Settings_Read();
 8002238:	f000 fa26 	bl	8002688 <Settings_Read>
	//Apply configuration to functions
	Settings_Apply();
 800223c:	f000 fbfe 	bl	8002a3c <Settings_Apply>

	//Start motor PWM
	Motor_Init();
 8002240:	f7ff f8e8 	bl	8001414 <Motor_Init>
	//Start potentiometer measurements
	Potentiometer_Init();
 8002244:	f7ff fa8c 	bl	8001760 <Potentiometer_Init>
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <App_Loop>:

//Runs forever in cycle
void App_Loop(){
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
	//Reply and handle USB requests
	switch(usb_o.usb_rq){
 8002252:	4b48      	ldr	r3, [pc, #288]	; (8002374 <App_Loop+0x128>)
 8002254:	785b      	ldrb	r3, [r3, #1]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d002      	beq.n	8002260 <App_Loop+0x14>
 800225a:	2b02      	cmp	r3, #2
 800225c:	d013      	beq.n	8002286 <App_Loop+0x3a>
 800225e:	e06f      	b.n	8002340 <App_Loop+0xf4>
		//Configuration request from host
		case USB_RQ_CONF:
			//Flash update or revert if "set_revert_flash_rq" byte is set so in received packet
			switch(usb_o.set_revert_flash_rq){
 8002260:	4b44      	ldr	r3, [pc, #272]	; (8002374 <App_Loop+0x128>)
 8002262:	789b      	ldrb	r3, [r3, #2]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d002      	beq.n	800226e <App_Loop+0x22>
 8002268:	2b02      	cmp	r3, #2
 800226a:	d005      	beq.n	8002278 <App_Loop+0x2c>
 800226c:	e007      	b.n	800227e <App_Loop+0x32>
				case USB_SETTINGS_REVERT:
					Settings_Read();
 800226e:	f000 fa0b 	bl	8002688 <Settings_Read>
					Settings_Apply();
 8002272:	f000 fbe3 	bl	8002a3c <Settings_Apply>
				break;
 8002276:	e002      	b.n	800227e <App_Loop+0x32>
				case USB_SETTINGS_FLASH:
					Settings_Write();
 8002278:	f000 fc3c 	bl	8002af4 <Settings_Write>
				break;
 800227c:	bf00      	nop
			}

			//Reply with configuration
			USB_Send_Config(&settings_data);
 800227e:	483e      	ldr	r0, [pc, #248]	; (8002378 <App_Loop+0x12c>)
 8002280:	f7ff fe08 	bl	8001e94 <USB_Send_Config>
		break;
 8002284:	e05c      	b.n	8002340 <App_Loop+0xf4>

		//Status request from host (incoming packet also contains configuration which we should set)
		case USB_RQ_STAT:
			//Store received configuration in global variable and apply
			settings_data = usb_rx_config;
 8002286:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <App_Loop+0x12c>)
 8002288:	4b3c      	ldr	r3, [pc, #240]	; (800237c <App_Loop+0x130>)
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	2344      	movs	r3, #68	; 0x44
 8002290:	461a      	mov	r2, r3
 8002292:	f00a fac1 	bl	800c818 <memcpy>
			Settings_Apply();
 8002296:	f000 fbd1 	bl	8002a3c <Settings_Apply>

			//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout if "usb_rq_stat_motor" is set in received packet
			switch(usb_rx_status.usb_rq_stat_motor){
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <App_Loop+0x134>)
 800229c:	795b      	ldrb	r3, [r3, #5]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d002      	beq.n	80022a8 <App_Loop+0x5c>
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d014      	beq.n	80022d0 <App_Loop+0x84>
 80022a6:	e028      	b.n	80022fa <App_Loop+0xae>
				case USB_MOTOR_BACKWARD:
					if(potentiometer_o.position > settings_data.potentiometer_min){
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <App_Loop+0x138>)
 80022aa:	681c      	ldr	r4, [r3, #0]
 80022ac:	4b32      	ldr	r3, [pc, #200]	; (8002378 <App_Loop+0x12c>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fc5d 	bl	8000b70 <__aeabi_i2f>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4619      	mov	r1, r3
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7fe fe68 	bl	8000f90 <__aeabi_fcmpgt>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d100      	bne.n	80022c8 <App_Loop+0x7c>
						Motor_Set(-1000);
					}
				break;
 80022c6:	e018      	b.n	80022fa <App_Loop+0xae>
						Motor_Set(-1000);
 80022c8:	482f      	ldr	r0, [pc, #188]	; (8002388 <App_Loop+0x13c>)
 80022ca:	f7fe fffb 	bl	80012c4 <Motor_Set>
				break;
 80022ce:	e014      	b.n	80022fa <App_Loop+0xae>
				case USB_MOTOR_FORWARD:
					if(potentiometer_o.position < settings_data.potentiometer_max){
 80022d0:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <App_Loop+0x138>)
 80022d2:	681c      	ldr	r4, [r3, #0]
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <App_Loop+0x12c>)
 80022d6:	885b      	ldrh	r3, [r3, #2]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fc49 	bl	8000b70 <__aeabi_i2f>
 80022de:	4603      	mov	r3, r0
 80022e0:	4619      	mov	r1, r3
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7fe fe36 	bl	8000f54 <__aeabi_fcmplt>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d100      	bne.n	80022f0 <App_Loop+0xa4>
						Motor_Set(1000);
					}
				break;
 80022ee:	e003      	b.n	80022f8 <App_Loop+0xac>
						Motor_Set(1000);
 80022f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022f4:	f7fe ffe6 	bl	80012c4 <Motor_Set>
				break;
 80022f8:	bf00      	nop
			}

			//Hold position with PID request if "usb_rq_stat_phold" is set in received packet
			if(usb_rx_status.usb_rq_stat_phold){
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <App_Loop+0x134>)
 80022fc:	791b      	ldrb	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <App_Loop+0xc4>
				pid_i.setpoint = usb_rx_status.pid_setpoint;
 8002302:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <App_Loop+0x134>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a21      	ldr	r2, [pc, #132]	; (800238c <App_Loop+0x140>)
 8002308:	6053      	str	r3, [r2, #4]
				PID_Start(); //Function also checks PID is running or not at first
 800230a:	f7ff f9b9 	bl	8001680 <PID_Start>
 800230e:	e005      	b.n	800231c <App_Loop+0xd0>
			}else if(settings_data.signal_ignore){
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <App_Loop+0x12c>)
 8002312:	799b      	ldrb	r3, [r3, #6]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <App_Loop+0xd0>
				PID_Stop();
 8002318:	f7ff f9d2 	bl	80016c0 <PID_Stop>
			}

			//Reply with status packet
			usb_tx_status_t status = {
				.pid_running = pid_o.running,
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <App_Loop+0x144>)
 800231e:	781b      	ldrb	r3, [r3, #0]
			usb_tx_status_t status = {
 8002320:	703b      	strb	r3, [r7, #0]
				.pid_setpoint = pid_i.setpoint,
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <App_Loop+0x140>)
 8002324:	685b      	ldr	r3, [r3, #4]
			usb_tx_status_t status = {
 8002326:	607b      	str	r3, [r7, #4]
				.potentiometer_position = potentiometer_o.position,
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <App_Loop+0x138>)
 800232a:	681b      	ldr	r3, [r3, #0]
			usb_tx_status_t status = {
 800232c:	60bb      	str	r3, [r7, #8]
				.motor_power = Motor_Get()
 800232e:	f7ff f831 	bl	8001394 <Motor_Get>
 8002332:	4603      	mov	r3, r0
			usb_tx_status_t status = {
 8002334:	81bb      	strh	r3, [r7, #12]
			};
			USB_Send_Status(&status);
 8002336:	463b      	mov	r3, r7
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fd27 	bl	8001d8c <USB_Send_Status>
		break;
 800233e:	bf00      	nop
	}

	//Turn off PID on USB disconnect if external signal also unavailable
	if(!usb_o.usb_present && !signal_o.signal_available){
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <App_Loop+0x128>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f083 0301 	eor.w	r3, r3, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <App_Loop+0x10e>
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <App_Loop+0x148>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <App_Loop+0x10e>
		PID_Stop();
 8002356:	f7ff f9b3 	bl	80016c0 <PID_Stop>
	}

	//Update USB is connected or not status variable
	USB_Det();
 800235a:	f7ff ff09 	bl	8002170 <USB_Det>
	//Operate LED
	led_i.pid_running = pid_o.running;
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <App_Loop+0x144>)
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <App_Loop+0x14c>)
 8002364:	705a      	strb	r2, [r3, #1]
	LED_Update();
 8002366:	f7fe ff43 	bl	80011f0 <LED_Update>
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	20000420 	.word	0x20000420
 8002378:	20000470 	.word	0x20000470
 800237c:	20000424 	.word	0x20000424
 8002380:	20000468 	.word	0x20000468
 8002384:	20000200 	.word	0x20000200
 8002388:	fffffc18 	.word	0xfffffc18
 800238c:	200001e8 	.word	0x200001e8
 8002390:	200001f0 	.word	0x200001f0
 8002394:	20000210 	.word	0x20000210
 8002398:	200001a0 	.word	0x200001a0

0800239c <PID_Ready>:
#include "System/Drivers/signal.h"
#include "System/Drivers/usb.h"
#include "settings.h"

//PID
void PID_Ready(float output){
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7fe fdfd 	bl	8000fa4 <__aeabi_f2iz>
 80023aa:	4603      	mov	r3, r0
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe ff88 	bl	80012c4 <Motor_Set>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <Potentiometer_Ready>:

//Potentiometer
void Potentiometer_Ready(){
 80023bc:	b598      	push	{r3, r4, r7, lr}
 80023be:	af00      	add	r7, sp, #0
	pid_i.input = potentiometer_o.position;
 80023c0:	4b20      	ldr	r3, [pc, #128]	; (8002444 <Potentiometer_Ready+0x88>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <Potentiometer_Ready+0x8c>)
 80023c6:	6013      	str	r3, [r2, #0]
	if(!pid_o.running){
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <Potentiometer_Ready+0x90>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	f083 0301 	eor.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d033      	beq.n	800243e <Potentiometer_Ready+0x82>
		if(motor_o.running){
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <Potentiometer_Ready+0x94>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02f      	beq.n	800243e <Potentiometer_Ready+0x82>
			if((potentiometer_o.position <= settings_data.potentiometer_min) && (Motor_Get() < 0)){
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <Potentiometer_Ready+0x88>)
 80023e0:	681c      	ldr	r4, [r3, #0]
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <Potentiometer_Ready+0x98>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fbc2 	bl	8000b70 <__aeabi_i2f>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4619      	mov	r1, r3
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7fe fdb9 	bl	8000f68 <__aeabi_fcmple>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <Potentiometer_Ready+0x52>
 80023fc:	f7fe ffca 	bl	8001394 <Motor_Get>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	da03      	bge.n	800240e <Potentiometer_Ready+0x52>
				Motor_Set(0);
 8002406:	2000      	movs	r0, #0
 8002408:	f7fe ff5c 	bl	80012c4 <Motor_Set>
			}else if((potentiometer_o.position >= settings_data.potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 800240c:	e017      	b.n	800243e <Potentiometer_Ready+0x82>
			}else if((potentiometer_o.position >= settings_data.potentiometer_max) && (Motor_Get() > 0)){
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <Potentiometer_Ready+0x88>)
 8002410:	681c      	ldr	r4, [r3, #0]
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <Potentiometer_Ready+0x98>)
 8002414:	885b      	ldrh	r3, [r3, #2]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fbaa 	bl	8000b70 <__aeabi_i2f>
 800241c:	4603      	mov	r3, r0
 800241e:	4619      	mov	r1, r3
 8002420:	4620      	mov	r0, r4
 8002422:	f7fe fdab 	bl	8000f7c <__aeabi_fcmpge>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d100      	bne.n	800242e <Potentiometer_Ready+0x72>
}
 800242c:	e007      	b.n	800243e <Potentiometer_Ready+0x82>
			}else if((potentiometer_o.position >= settings_data.potentiometer_max) && (Motor_Get() > 0)){
 800242e:	f7fe ffb1 	bl	8001394 <Motor_Get>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	dd02      	ble.n	800243e <Potentiometer_Ready+0x82>
				Motor_Set(0);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe ff43 	bl	80012c4 <Motor_Set>
}
 800243e:	bf00      	nop
 8002440:	bd98      	pop	{r3, r4, r7, pc}
 8002442:	bf00      	nop
 8002444:	20000200 	.word	0x20000200
 8002448:	200001e8 	.word	0x200001e8
 800244c:	200001f0 	.word	0x200001f0
 8002450:	200001b4 	.word	0x200001b4
 8002454:	20000470 	.word	0x20000470

08002458 <Signal_Gone>:

//Signal
void Signal_Gone(){
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	if(!settings_data.signal_ignore || (settings_data.signal_ignore && (!usb_o.usb_present))){
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <Signal_Gone+0x30>)
 800245e:	799b      	ldrb	r3, [r3, #6]
 8002460:	f083 0301 	eor.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <Signal_Gone+0x28>
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <Signal_Gone+0x30>)
 800246c:	799b      	ldrb	r3, [r3, #6]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <Signal_Gone+0x2c>
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <Signal_Gone+0x34>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <Signal_Gone+0x2c>
		PID_Stop();
 8002480:	f7ff f91e 	bl	80016c0 <PID_Stop>
	}
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000470 	.word	0x20000470
 800248c:	20000420 	.word	0x20000420

08002490 <Signal_Received>:
void Signal_Received(){
 8002490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
	if(!usb_o.usb_present || (!settings_data.signal_ignore && usb_o.usb_present)){
 8002496:	4b66      	ldr	r3, [pc, #408]	; (8002630 <Signal_Received+0x1a0>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	f083 0301 	eor.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10c      	bne.n	80024be <Signal_Received+0x2e>
 80024a4:	4b63      	ldr	r3, [pc, #396]	; (8002634 <Signal_Received+0x1a4>)
 80024a6:	799b      	ldrb	r3, [r3, #6]
 80024a8:	f083 0301 	eor.w	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80b5 	beq.w	800261e <Signal_Received+0x18e>
 80024b4:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <Signal_Received+0x1a0>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80b0 	beq.w	800261e <Signal_Received+0x18e>
		if((signal_o.length_ms <= settings_data.signal_max) && (signal_o.length_ms >= settings_data.signal_min)){
 80024be:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <Signal_Received+0x1a8>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a5c      	ldr	r2, [pc, #368]	; (8002634 <Signal_Received+0x1a4>)
 80024c4:	68d2      	ldr	r2, [r2, #12]
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fd4d 	bl	8000f68 <__aeabi_fcmple>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a2 	beq.w	800261a <Signal_Received+0x18a>
 80024d6:	4b58      	ldr	r3, [pc, #352]	; (8002638 <Signal_Received+0x1a8>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a56      	ldr	r2, [pc, #344]	; (8002634 <Signal_Received+0x1a4>)
 80024dc:	6892      	ldr	r2, [r2, #8]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fd4b 	bl	8000f7c <__aeabi_fcmpge>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8096 	beq.w	800261a <Signal_Received+0x18a>
			//Calculate new PID setpoint
			float new_pid_setpoint =
					(
						((float)settings_data.potentiometer_max - (float)settings_data.potentiometer_min) * //Total enabled potentiometer scale
 80024ee:	4b51      	ldr	r3, [pc, #324]	; (8002634 <Signal_Received+0x1a4>)
 80024f0:	885b      	ldrh	r3, [r3, #2]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fb38 	bl	8000b68 <__aeabi_ui2f>
 80024f8:	4604      	mov	r4, r0
 80024fa:	4b4e      	ldr	r3, [pc, #312]	; (8002634 <Signal_Received+0x1a4>)
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fb32 	bl	8000b68 <__aeabi_ui2f>
 8002504:	4603      	mov	r3, r0
 8002506:	4619      	mov	r1, r3
 8002508:	4620      	mov	r0, r4
 800250a:	f7fe fa7b 	bl	8000a04 <__aeabi_fsub>
 800250e:	4603      	mov	r3, r0
 8002510:	461c      	mov	r4, r3
						((signal_o.length_ms - settings_data.signal_min) / (settings_data.signal_max - settings_data.signal_min)) //Received signal to total signal scale ratio
 8002512:	4b49      	ldr	r3, [pc, #292]	; (8002638 <Signal_Received+0x1a8>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a47      	ldr	r2, [pc, #284]	; (8002634 <Signal_Received+0x1a4>)
 8002518:	6892      	ldr	r2, [r2, #8]
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fa71 	bl	8000a04 <__aeabi_fsub>
 8002522:	4603      	mov	r3, r0
 8002524:	461d      	mov	r5, r3
 8002526:	4b43      	ldr	r3, [pc, #268]	; (8002634 <Signal_Received+0x1a4>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4a42      	ldr	r2, [pc, #264]	; (8002634 <Signal_Received+0x1a4>)
 800252c:	6892      	ldr	r2, [r2, #8]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fa67 	bl	8000a04 <__aeabi_fsub>
 8002536:	4603      	mov	r3, r0
 8002538:	4619      	mov	r1, r3
 800253a:	4628      	mov	r0, r5
 800253c:	f7fe fc20 	bl	8000d80 <__aeabi_fdiv>
 8002540:	4603      	mov	r3, r0
						((float)settings_data.potentiometer_max - (float)settings_data.potentiometer_min) * //Total enabled potentiometer scale
 8002542:	4619      	mov	r1, r3
 8002544:	4620      	mov	r0, r4
 8002546:	f7fe fb67 	bl	8000c18 <__aeabi_fmul>
 800254a:	4603      	mov	r3, r0
 800254c:	461c      	mov	r4, r3
					) + (float)settings_data.potentiometer_min;
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <Signal_Received+0x1a4>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fb08 	bl	8000b68 <__aeabi_ui2f>
 8002558:	4603      	mov	r3, r0
			float new_pid_setpoint =
 800255a:	4619      	mov	r1, r3
 800255c:	4620      	mov	r0, r4
 800255e:	f7fe fa53 	bl	8000a08 <__addsf3>
 8002562:	4603      	mov	r3, r0
 8002564:	607b      	str	r3, [r7, #4]

			//Detect if position change is enough for LED to be fired, if it is in this mode
			if(
				fabs((new_pid_setpoint - (float)settings_data.potentiometer_min) - (pid_i.setpoint - (float)settings_data.potentiometer_min)) /
 8002566:	4b33      	ldr	r3, [pc, #204]	; (8002634 <Signal_Received+0x1a4>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fafc 	bl	8000b68 <__aeabi_ui2f>
 8002570:	4603      	mov	r3, r0
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe fa45 	bl	8000a04 <__aeabi_fsub>
 800257a:	4603      	mov	r3, r0
 800257c:	461d      	mov	r5, r3
 800257e:	4b2f      	ldr	r3, [pc, #188]	; (800263c <Signal_Received+0x1ac>)
 8002580:	685c      	ldr	r4, [r3, #4]
 8002582:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <Signal_Received+0x1a4>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe faee 	bl	8000b68 <__aeabi_ui2f>
 800258c:	4603      	mov	r3, r0
 800258e:	4619      	mov	r1, r3
 8002590:	4620      	mov	r0, r4
 8002592:	f7fe fa37 	bl	8000a04 <__aeabi_fsub>
 8002596:	4603      	mov	r3, r0
 8002598:	4619      	mov	r1, r3
 800259a:	4628      	mov	r0, r5
 800259c:	f7fe fa32 	bl	8000a04 <__aeabi_fsub>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd ff36 	bl	8000418 <__aeabi_f2d>
 80025ac:	4604      	mov	r4, r0
 80025ae:	460d      	mov	r5, r1
				(
					((float)settings_data.potentiometer_max - (float)settings_data.potentiometer_min) / 100.0f
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <Signal_Received+0x1a4>)
 80025b2:	885b      	ldrh	r3, [r3, #2]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fad7 	bl	8000b68 <__aeabi_ui2f>
 80025ba:	4606      	mov	r6, r0
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <Signal_Received+0x1a4>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fad1 	bl	8000b68 <__aeabi_ui2f>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4619      	mov	r1, r3
 80025ca:	4630      	mov	r0, r6
 80025cc:	f7fe fa1a 	bl	8000a04 <__aeabi_fsub>
 80025d0:	4603      	mov	r3, r0
 80025d2:	491b      	ldr	r1, [pc, #108]	; (8002640 <Signal_Received+0x1b0>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fbd3 	bl	8000d80 <__aeabi_fdiv>
 80025da:	4603      	mov	r3, r0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd ff1b 	bl	8000418 <__aeabi_f2d>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
				fabs((new_pid_setpoint - (float)settings_data.potentiometer_min) - (pid_i.setpoint - (float)settings_data.potentiometer_min)) /
 80025e6:	4620      	mov	r0, r4
 80025e8:	4629      	mov	r1, r5
 80025ea:	f7fe f897 	bl	800071c <__aeabi_ddiv>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
			if(
 80025f6:	a30c      	add	r3, pc, #48	; (adr r3, 8002628 <Signal_Received+0x198>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fe f9ea 	bl	80009d4 <__aeabi_dcmpge>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <Signal_Received+0x17c>
				)
				>=
				SETTINGS_LED_POSITION_CHANGE_ACCURACY_PRCNT
			){
				led_i.position_changed = true;
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <Signal_Received+0x1b4>)
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
			}

			pid_i.setpoint = new_pid_setpoint;
 800260c:	4a0b      	ldr	r2, [pc, #44]	; (800263c <Signal_Received+0x1ac>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6053      	str	r3, [r2, #4]
			PID_Start();
 8002612:	f7ff f835 	bl	8001680 <PID_Start>
		if((signal_o.length_ms <= settings_data.signal_max) && (signal_o.length_ms >= settings_data.signal_min)){
 8002616:	bf00      	nop
		}else{
			PID_Stop();
		}
	}
}
 8002618:	e001      	b.n	800261e <Signal_Received+0x18e>
			PID_Stop();
 800261a:	f7ff f851 	bl	80016c0 <PID_Stop>
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002626:	bf00      	nop
 8002628:	20000000 	.word	0x20000000
 800262c:	3fa1eb85 	.word	0x3fa1eb85
 8002630:	20000420 	.word	0x20000420
 8002634:	20000470 	.word	0x20000470
 8002638:	20000210 	.word	0x20000210
 800263c:	200001e8 	.word	0x200001e8
 8002640:	42c80000 	.word	0x42c80000
 8002644:	200001a0 	.word	0x200001a0

08002648 <_memcpy>:

//Buffer for data + CRC padding bytes + CRC for writing to/reading from flash
static uint8_t settings_data_buff[sizeof(usb_config_t) + (sizeof(uint32_t) - 1) + sizeof(uint32_t)]; //Data size + maximum amount of CRC padding bytes + CRC size

//Function used only in this file, simple data copy loop for unaligned memory access
static void _memcpy(uint32_t dst_addr, uint32_t src_addr, uint32_t length){
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
	while(i != length){
 8002658:	e00b      	b.n	8002672 <_memcpy+0x2a>
		*(uint8_t *)(dst_addr + i) = *(uint8_t *)(src_addr + i);
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4413      	add	r3, r2
 8002660:	4619      	mov	r1, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	4413      	add	r3, r2
 8002668:	780a      	ldrb	r2, [r1, #0]
 800266a:	701a      	strb	r2, [r3, #0]
		i++;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
	while(i != length){
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	d1ef      	bne.n	800265a <_memcpy+0x12>
	}
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
	...

08002688 <Settings_Read>:

//Reads settings to "settings_data" global variable from flash. If does not exist in flash or wrong data, writes default values
void Settings_Read(){
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
	//Calculate CRC padding bytes count
	uint8_t i = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 8002692:	e002      	b.n	800269a <Settings_Read+0x12>
		i++;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	3301      	adds	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f7      	bne.n	8002694 <Settings_Read+0xc>
	}

	//Read from flash
	Flash_Read(&settings_data_buff[0], SETTINGS_FLASH_ADDRESS, sizeof(usb_config_t) + i + sizeof(uint32_t));
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3348      	adds	r3, #72	; 0x48
 80026a8:	461a      	mov	r2, r3
 80026aa:	4912      	ldr	r1, [pc, #72]	; (80026f4 <Settings_Read+0x6c>)
 80026ac:	4812      	ldr	r0, [pc, #72]	; (80026f8 <Settings_Read+0x70>)
 80026ae:	f7fe fcb1 	bl	8001014 <Flash_Read>

	//Get CRCs
	uint32_t actual_crc = CRC32_Get((uint32_t *)&settings_data_buff[0], (sizeof(usb_config_t) + i) / sizeof(uint32_t));
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	3344      	adds	r3, #68	; 0x44
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	4619      	mov	r1, r3
 80026ba:	480f      	ldr	r0, [pc, #60]	; (80026f8 <Settings_Read+0x70>)
 80026bc:	f7fe fc98 	bl	8000ff0 <CRC32_Get>
 80026c0:	60b8      	str	r0, [r7, #8]
	uint32_t stored_crc = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
	_memcpy((uint32_t)&stored_crc, (uint32_t)&settings_data_buff[sizeof(usb_config_t) + i], sizeof(uint32_t));
 80026c6:	1d38      	adds	r0, r7, #4
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	3344      	adds	r3, #68	; 0x44
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <Settings_Read+0x70>)
 80026ce:	4413      	add	r3, r2
 80026d0:	2204      	movs	r2, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7ff ffb8 	bl	8002648 <_memcpy>

	//Check if CRC is correct
	if(actual_crc != stored_crc){
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d011      	beq.n	8002704 <Settings_Read+0x7c>
		settings_data = settings_data_defaults;
 80026e0:	4a06      	ldr	r2, [pc, #24]	; (80026fc <Settings_Read+0x74>)
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <Settings_Read+0x78>)
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	2344      	movs	r3, #68	; 0x44
 80026ea:	461a      	mov	r2, r3
 80026ec:	f00a f894 	bl	800c818 <memcpy>
 80026f0:	e19b      	b.n	8002a2a <Settings_Read+0x3a2>
 80026f2:	bf00      	nop
 80026f4:	0800fc00 	.word	0x0800fc00
 80026f8:	200004b4 	.word	0x200004b4
 80026fc:	20000470 	.word	0x20000470
 8002700:	0800c8c0 	.word	0x0800c8c0
		return;
	}

	//Copy to global variable from flash buffer
	_memcpy((uint32_t)&settings_data, (uint32_t)&settings_data_buff[0], sizeof(usb_config_t));
 8002704:	4ba8      	ldr	r3, [pc, #672]	; (80029a8 <Settings_Read+0x320>)
 8002706:	49a9      	ldr	r1, [pc, #676]	; (80029ac <Settings_Read+0x324>)
 8002708:	2244      	movs	r2, #68	; 0x44
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff9c 	bl	8002648 <_memcpy>

	//Verify that all configuration values are in range
	if(
		(settings_data.potentiometer_min < settings_data_min.potentiometer_min) || (settings_data.potentiometer_min > settings_data_max.potentiometer_min) ||
 8002710:	4ba5      	ldr	r3, [pc, #660]	; (80029a8 <Settings_Read+0x320>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	2200      	movs	r2, #0
	if(
 8002716:	4293      	cmp	r3, r2
 8002718:	f0c0 817f 	bcc.w	8002a1a <Settings_Read+0x392>
		(settings_data.potentiometer_min < settings_data_min.potentiometer_min) || (settings_data.potentiometer_min > settings_data_max.potentiometer_min) ||
 800271c:	4ba2      	ldr	r3, [pc, #648]	; (80029a8 <Settings_Read+0x320>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	f640 727f 	movw	r2, #3967	; 0xf7f
 8002724:	4293      	cmp	r3, r2
 8002726:	f200 8178 	bhi.w	8002a1a <Settings_Read+0x392>
		(settings_data.potentiometer_max < settings_data_min.potentiometer_max) || (settings_data.potentiometer_max > settings_data_max.potentiometer_max) ||
 800272a:	4b9f      	ldr	r3, [pc, #636]	; (80029a8 <Settings_Read+0x320>)
 800272c:	885b      	ldrh	r3, [r3, #2]
 800272e:	2280      	movs	r2, #128	; 0x80
		(settings_data.potentiometer_min < settings_data_min.potentiometer_min) || (settings_data.potentiometer_min > settings_data_max.potentiometer_min) ||
 8002730:	4293      	cmp	r3, r2
 8002732:	f0c0 8172 	bcc.w	8002a1a <Settings_Read+0x392>
		(settings_data.potentiometer_max < settings_data_min.potentiometer_max) || (settings_data.potentiometer_max > settings_data_max.potentiometer_max) ||
 8002736:	4b9c      	ldr	r3, [pc, #624]	; (80029a8 <Settings_Read+0x320>)
 8002738:	885b      	ldrh	r3, [r3, #2]
 800273a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800273e:	4293      	cmp	r3, r2
 8002740:	f200 816b 	bhi.w	8002a1a <Settings_Read+0x392>
		(settings_data.motor_max_power < settings_data_min.motor_max_power) || (settings_data.motor_max_power > settings_data_max.motor_max_power) ||
 8002744:	4b98      	ldr	r3, [pc, #608]	; (80029a8 <Settings_Read+0x320>)
 8002746:	791b      	ldrb	r3, [r3, #4]
 8002748:	2200      	movs	r2, #0
		(settings_data.potentiometer_max < settings_data_min.potentiometer_max) || (settings_data.potentiometer_max > settings_data_max.potentiometer_max) ||
 800274a:	4293      	cmp	r3, r2
 800274c:	f0c0 8165 	bcc.w	8002a1a <Settings_Read+0x392>
		(settings_data.motor_max_power < settings_data_min.motor_max_power) || (settings_data.motor_max_power > settings_data_max.motor_max_power) ||
 8002750:	4b95      	ldr	r3, [pc, #596]	; (80029a8 <Settings_Read+0x320>)
 8002752:	791b      	ldrb	r3, [r3, #4]
 8002754:	2264      	movs	r2, #100	; 0x64
 8002756:	4293      	cmp	r3, r2
 8002758:	f200 815f 	bhi.w	8002a1a <Settings_Read+0x392>
		(settings_data.motor_invert < settings_data_min.motor_invert) || (settings_data.motor_invert > settings_data_max.motor_invert) ||
 800275c:	4b92      	ldr	r3, [pc, #584]	; (80029a8 <Settings_Read+0x320>)
 800275e:	795b      	ldrb	r3, [r3, #5]
 8002760:	2200      	movs	r2, #0
		(settings_data.motor_max_power < settings_data_min.motor_max_power) || (settings_data.motor_max_power > settings_data_max.motor_max_power) ||
 8002762:	4293      	cmp	r3, r2
 8002764:	f0c0 8159 	bcc.w	8002a1a <Settings_Read+0x392>
		(settings_data.motor_invert < settings_data_min.motor_invert) || (settings_data.motor_invert > settings_data_max.motor_invert) ||
 8002768:	4b8f      	ldr	r3, [pc, #572]	; (80029a8 <Settings_Read+0x320>)
 800276a:	795b      	ldrb	r3, [r3, #5]
 800276c:	2201      	movs	r2, #1
 800276e:	4293      	cmp	r3, r2
 8002770:	f200 8153 	bhi.w	8002a1a <Settings_Read+0x392>
		(settings_data.signal_ignore < settings_data_min.signal_ignore) || (settings_data.motor_invert > settings_data_max.signal_ignore) ||
 8002774:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <Settings_Read+0x320>)
 8002776:	799b      	ldrb	r3, [r3, #6]
 8002778:	2200      	movs	r2, #0
		(settings_data.motor_invert < settings_data_min.motor_invert) || (settings_data.motor_invert > settings_data_max.motor_invert) ||
 800277a:	4293      	cmp	r3, r2
 800277c:	f0c0 814d 	bcc.w	8002a1a <Settings_Read+0x392>
		(settings_data.signal_ignore < settings_data_min.signal_ignore) || (settings_data.motor_invert > settings_data_max.signal_ignore) ||
 8002780:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <Settings_Read+0x320>)
 8002782:	795b      	ldrb	r3, [r3, #5]
 8002784:	2201      	movs	r2, #1
 8002786:	4293      	cmp	r3, r2
 8002788:	f200 8147 	bhi.w	8002a1a <Settings_Read+0x392>
		(settings_data.signal_min < settings_data_min.signal_min) || (settings_data.signal_min > settings_data_max.signal_min) ||
 800278c:	4b86      	ldr	r3, [pc, #536]	; (80029a8 <Settings_Read+0x320>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a87      	ldr	r2, [pc, #540]	; (80029b0 <Settings_Read+0x328>)
		(settings_data.signal_ignore < settings_data_min.signal_ignore) || (settings_data.motor_invert > settings_data_max.signal_ignore) ||
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fbdd 	bl	8000f54 <__aeabi_fcmplt>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	f040 813c 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.signal_min < settings_data_min.signal_min) || (settings_data.signal_min > settings_data_max.signal_min) ||
 80027a2:	4b81      	ldr	r3, [pc, #516]	; (80029a8 <Settings_Read+0x320>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	4a83      	ldr	r2, [pc, #524]	; (80029b4 <Settings_Read+0x32c>)
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fbf0 	bl	8000f90 <__aeabi_fcmpgt>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 8131 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.signal_max < settings_data_min.signal_max) || (settings_data.signal_max > settings_data_max.signal_max) ||
 80027b8:	4b7b      	ldr	r3, [pc, #492]	; (80029a8 <Settings_Read+0x320>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
		(settings_data.signal_min < settings_data_min.signal_min) || (settings_data.signal_min > settings_data_max.signal_min) ||
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fbc6 	bl	8000f54 <__aeabi_fcmplt>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 8125 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.signal_max < settings_data_min.signal_max) || (settings_data.signal_max > settings_data_max.signal_max) ||
 80027d0:	4b75      	ldr	r3, [pc, #468]	; (80029a8 <Settings_Read+0x320>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a78      	ldr	r2, [pc, #480]	; (80029b8 <Settings_Read+0x330>)
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fbd9 	bl	8000f90 <__aeabi_fcmpgt>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 811a 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.signal_timeout < settings_data_min.signal_timeout) || (settings_data.signal_timeout > settings_data_max.signal_timeout) ||
 80027e6:	4b70      	ldr	r3, [pc, #448]	; (80029a8 <Settings_Read+0x320>)
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2206      	movs	r2, #6
		(settings_data.signal_max < settings_data_min.signal_max) || (settings_data.signal_max > settings_data_max.signal_max) ||
 80027ec:	4293      	cmp	r3, r2
 80027ee:	f0c0 8114 	bcc.w	8002a1a <Settings_Read+0x392>
		(settings_data.signal_timeout < settings_data_min.signal_timeout) || (settings_data.signal_timeout > settings_data_max.signal_timeout) ||
 80027f2:	4b6d      	ldr	r3, [pc, #436]	; (80029a8 <Settings_Read+0x320>)
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	22c8      	movs	r2, #200	; 0xc8
 80027f8:	4293      	cmp	r3, r2
 80027fa:	f200 810e 	bhi.w	8002a1a <Settings_Read+0x392>
		(settings_data.led_mode < settings_data_min.led_mode) || (settings_data.led_mode > settings_data_max.led_mode) ||
 80027fe:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <Settings_Read+0x320>)
 8002800:	7d1b      	ldrb	r3, [r3, #20]
 8002802:	2200      	movs	r2, #0
		(settings_data.signal_timeout < settings_data_min.signal_timeout) || (settings_data.signal_timeout > settings_data_max.signal_timeout) ||
 8002804:	4293      	cmp	r3, r2
 8002806:	f0c0 8108 	bcc.w	8002a1a <Settings_Read+0x392>
		(settings_data.led_mode < settings_data_min.led_mode) || (settings_data.led_mode > settings_data_max.led_mode) ||
 800280a:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <Settings_Read+0x320>)
 800280c:	7d1b      	ldrb	r3, [r3, #20]
 800280e:	2203      	movs	r2, #3
 8002810:	4293      	cmp	r3, r2
 8002812:	f200 8102 	bhi.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_on_e_m < settings_data_min.pid_on_e_m) || (settings_data.pid_on_e_m > settings_data_max.pid_on_e_m) ||
 8002816:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <Settings_Read+0x320>)
 8002818:	7d5b      	ldrb	r3, [r3, #21]
 800281a:	2200      	movs	r2, #0
		(settings_data.led_mode < settings_data_min.led_mode) || (settings_data.led_mode > settings_data_max.led_mode) ||
 800281c:	4293      	cmp	r3, r2
 800281e:	f0c0 80fc 	bcc.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_on_e_m < settings_data_min.pid_on_e_m) || (settings_data.pid_on_e_m > settings_data_max.pid_on_e_m) ||
 8002822:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <Settings_Read+0x320>)
 8002824:	7d5b      	ldrb	r3, [r3, #21]
 8002826:	2201      	movs	r2, #1
 8002828:	4293      	cmp	r3, r2
 800282a:	f200 80f6 	bhi.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kp_1 < settings_data_min.pid_kp_1) || (settings_data.pid_kp_1 > settings_data_max.pid_kp_1) ||
 800282e:	4b5e      	ldr	r3, [pc, #376]	; (80029a8 <Settings_Read+0x320>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_on_e_m < settings_data_min.pid_on_e_m) || (settings_data.pid_on_e_m > settings_data_max.pid_on_e_m) ||
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fb8b 	bl	8000f54 <__aeabi_fcmplt>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 80ea 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kp_1 < settings_data_min.pid_kp_1) || (settings_data.pid_kp_1 > settings_data_max.pid_kp_1) ||
 8002846:	4b58      	ldr	r3, [pc, #352]	; (80029a8 <Settings_Read+0x320>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	4a5c      	ldr	r2, [pc, #368]	; (80029bc <Settings_Read+0x334>)
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fb9e 	bl	8000f90 <__aeabi_fcmpgt>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 80df 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_ki_1 < settings_data_min.pid_ki_1) || (settings_data.pid_ki_1 > settings_data_max.pid_ki_1) ||
 800285c:	4b52      	ldr	r3, [pc, #328]	; (80029a8 <Settings_Read+0x320>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kp_1 < settings_data_min.pid_kp_1) || (settings_data.pid_kp_1 > settings_data_max.pid_kp_1) ||
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fb74 	bl	8000f54 <__aeabi_fcmplt>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 80d3 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_ki_1 < settings_data_min.pid_ki_1) || (settings_data.pid_ki_1 > settings_data_max.pid_ki_1) ||
 8002874:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <Settings_Read+0x320>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	4a50      	ldr	r2, [pc, #320]	; (80029bc <Settings_Read+0x334>)
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fb87 	bl	8000f90 <__aeabi_fcmpgt>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	f040 80c8 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kd_1 < settings_data_min.pid_kd_1) || (settings_data.pid_kd_1 > settings_data_max.pid_kd_1) ||
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <Settings_Read+0x320>)
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_ki_1 < settings_data_min.pid_ki_1) || (settings_data.pid_ki_1 > settings_data_max.pid_ki_1) ||
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fb5d 	bl	8000f54 <__aeabi_fcmplt>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	f040 80bc 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kd_1 < settings_data_min.pid_kd_1) || (settings_data.pid_kd_1 > settings_data_max.pid_kd_1) ||
 80028a2:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <Settings_Read+0x320>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a45      	ldr	r2, [pc, #276]	; (80029bc <Settings_Read+0x334>)
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fb70 	bl	8000f90 <__aeabi_fcmpgt>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 80b1 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kp_2 < settings_data_min.pid_kp_2) || (settings_data.pid_kp_2 > settings_data_max.pid_kp_2) ||
 80028b8:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <Settings_Read+0x320>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kd_1 < settings_data_min.pid_kd_1) || (settings_data.pid_kd_1 > settings_data_max.pid_kd_1) ||
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fb46 	bl	8000f54 <__aeabi_fcmplt>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 80a5 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kp_2 < settings_data_min.pid_kp_2) || (settings_data.pid_kp_2 > settings_data_max.pid_kp_2) ||
 80028d0:	4b35      	ldr	r3, [pc, #212]	; (80029a8 <Settings_Read+0x320>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	4a39      	ldr	r2, [pc, #228]	; (80029bc <Settings_Read+0x334>)
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe fb59 	bl	8000f90 <__aeabi_fcmpgt>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 809a 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_ki_2 < settings_data_min.pid_ki_2) || (settings_data.pid_ki_2 > settings_data_max.pid_ki_2) ||
 80028e6:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <Settings_Read+0x320>)
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kp_2 < settings_data_min.pid_kp_2) || (settings_data.pid_kp_2 > settings_data_max.pid_kp_2) ||
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fb2f 	bl	8000f54 <__aeabi_fcmplt>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f040 808e 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_ki_2 < settings_data_min.pid_ki_2) || (settings_data.pid_ki_2 > settings_data_max.pid_ki_2) ||
 80028fe:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <Settings_Read+0x320>)
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	4a2e      	ldr	r2, [pc, #184]	; (80029bc <Settings_Read+0x334>)
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fb42 	bl	8000f90 <__aeabi_fcmpgt>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 8083 	bne.w	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kd_2 < settings_data_min.pid_kd_2) || (settings_data.pid_kd_2 > settings_data_max.pid_kd_2) ||
 8002914:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <Settings_Read+0x320>)
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_ki_2 < settings_data_min.pid_ki_2) || (settings_data.pid_ki_2 > settings_data_max.pid_ki_2) ||
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fb18 	bl	8000f54 <__aeabi_fcmplt>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d177      	bne.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kd_2 < settings_data_min.pid_kd_2) || (settings_data.pid_kd_2 > settings_data_max.pid_kd_2) ||
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <Settings_Read+0x320>)
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	4a23      	ldr	r2, [pc, #140]	; (80029bc <Settings_Read+0x334>)
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fb2c 	bl	8000f90 <__aeabi_fcmpgt>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d16d      	bne.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kp_3 < settings_data_min.pid_kp_3) || (settings_data.pid_kp_3 > settings_data_max.pid_kp_3) ||
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <Settings_Read+0x320>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kd_2 < settings_data_min.pid_kd_2) || (settings_data.pid_kd_2 > settings_data_max.pid_kd_2) ||
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fb03 	bl	8000f54 <__aeabi_fcmplt>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d162      	bne.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kp_3 < settings_data_min.pid_kp_3) || (settings_data.pid_kp_3 > settings_data_max.pid_kp_3) ||
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <Settings_Read+0x320>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	4a18      	ldr	r2, [pc, #96]	; (80029bc <Settings_Read+0x334>)
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fb17 	bl	8000f90 <__aeabi_fcmpgt>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d158      	bne.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_ki_3 < settings_data_min.pid_ki_3) || (settings_data.pid_ki_3 > settings_data_max.pid_ki_3) ||
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <Settings_Read+0x320>)
 800296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296c:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kp_3 < settings_data_min.pid_kp_3) || (settings_data.pid_kp_3 > settings_data_max.pid_kp_3) ||
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe faee 	bl	8000f54 <__aeabi_fcmplt>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d14d      	bne.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_ki_3 < settings_data_min.pid_ki_3) || (settings_data.pid_ki_3 > settings_data_max.pid_ki_3) ||
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <Settings_Read+0x320>)
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <Settings_Read+0x334>)
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fb02 	bl	8000f90 <__aeabi_fcmpgt>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d143      	bne.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kd_3 < settings_data_min.pid_kd_3) || (settings_data.pid_kd_3 > settings_data_max.pid_kd_3) ||
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <Settings_Read+0x320>)
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_ki_3 < settings_data_min.pid_ki_3) || (settings_data.pid_ki_3 > settings_data_max.pid_ki_3) ||
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe fad9 	bl	8000f54 <__aeabi_fcmplt>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	e00b      	b.n	80029c0 <Settings_Read+0x338>
 80029a8:	20000470 	.word	0x20000470
 80029ac:	200004b4 	.word	0x200004b4
 80029b0:	3dcccccd 	.word	0x3dcccccd
 80029b4:	40066666 	.word	0x40066666
 80029b8:	402ccccd 	.word	0x402ccccd
 80029bc:	42c80000 	.word	0x42c80000
 80029c0:	d12b      	bne.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_kd_3 < settings_data_min.pid_kd_3) || (settings_data.pid_kd_3 > settings_data_max.pid_kd_3) ||
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <Settings_Read+0x3a8>)
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <Settings_Read+0x3ac>)
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fae0 	bl	8000f90 <__aeabi_fcmpgt>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d121      	bne.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_split_steps_1 < settings_data_min.pid_split_steps_1) || (settings_data.pid_split_steps_1 > settings_data_max.pid_split_steps_1) ||
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <Settings_Read+0x3a8>)
 80029d8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80029da:	2200      	movs	r2, #0
		(settings_data.pid_kd_3 < settings_data_min.pid_kd_3) || (settings_data.pid_kd_3 > settings_data_max.pid_kd_3) ||
 80029dc:	4293      	cmp	r3, r2
 80029de:	d31c      	bcc.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_split_steps_1 < settings_data_min.pid_split_steps_1) || (settings_data.pid_split_steps_1 > settings_data_max.pid_split_steps_1) ||
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <Settings_Read+0x3a8>)
 80029e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80029e4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d816      	bhi.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_split_steps_2 < settings_data_min.pid_split_steps_2) || (settings_data.pid_split_steps_2 > settings_data_max.pid_split_steps_2) ||
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <Settings_Read+0x3a8>)
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f0:	2200      	movs	r2, #0
		(settings_data.pid_split_steps_1 < settings_data_min.pid_split_steps_1) || (settings_data.pid_split_steps_1 > settings_data_max.pid_split_steps_1) ||
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d311      	bcc.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_split_steps_2 < settings_data_min.pid_split_steps_2) || (settings_data.pid_split_steps_2 > settings_data_max.pid_split_steps_2) ||
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <Settings_Read+0x3a8>)
 80029f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d80b      	bhi.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_sampling_ms < settings_data_min.pid_sampling_ms) || (settings_data.pid_sampling_ms > settings_data_max.pid_sampling_ms)
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <Settings_Read+0x3a8>)
 8002a04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a08:	2205      	movs	r2, #5
		(settings_data.pid_split_steps_2 < settings_data_min.pid_split_steps_2) || (settings_data.pid_split_steps_2 > settings_data_max.pid_split_steps_2) ||
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d305      	bcc.n	8002a1a <Settings_Read+0x392>
		(settings_data.pid_sampling_ms < settings_data_min.pid_sampling_ms) || (settings_data.pid_sampling_ms > settings_data_max.pid_sampling_ms)
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <Settings_Read+0x3a8>)
 8002a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a14:	2264      	movs	r2, #100	; 0x64
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d907      	bls.n	8002a2a <Settings_Read+0x3a2>
	){
		//If anything is aout of range, copy defaults
		settings_data = settings_data_defaults;
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <Settings_Read+0x3a8>)
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <Settings_Read+0x3b0>)
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	2344      	movs	r3, #68	; 0x44
 8002a24:	461a      	mov	r2, r3
 8002a26:	f009 fef7 	bl	800c818 <memcpy>
	}
}
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000470 	.word	0x20000470
 8002a34:	42c80000 	.word	0x42c80000
 8002a38:	0800c8c0 	.word	0x0800c8c0

08002a3c <Settings_Apply>:

//Copies values from "settings_data" to functions configurations variables
void Settings_Apply(){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	motor_ctr.max_power = settings_data.motor_max_power * 10;
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <Settings_Apply+0xa4>)
 8002a42:	791b      	ldrb	r3, [r3, #4]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	0092      	lsls	r2, r2, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <Settings_Apply+0xa8>)
 8002a52:	805a      	strh	r2, [r3, #2]
	motor_ctr.invert = settings_data.motor_invert;
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <Settings_Apply+0xa4>)
 8002a56:	795a      	ldrb	r2, [r3, #5]
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <Settings_Apply+0xa8>)
 8002a5a:	701a      	strb	r2, [r3, #0]
	signal_ctr.timeout_ms = settings_data.signal_timeout;
 8002a5c:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <Settings_Apply+0xa4>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <Settings_Apply+0xac>)
 8002a62:	6013      	str	r3, [r2, #0]
	led_ctr.mode = settings_data.led_mode;
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <Settings_Apply+0xa4>)
 8002a66:	7d1a      	ldrb	r2, [r3, #20]
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <Settings_Apply+0xb0>)
 8002a6a:	701a      	strb	r2, [r3, #0]
	pid_ctr.on_e_m = settings_data.pid_on_e_m;
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <Settings_Apply+0xa4>)
 8002a6e:	7d5a      	ldrb	r2, [r3, #21]
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <Settings_Apply+0xb4>)
 8002a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pid_ctr.kp_1 = settings_data.pid_kp_1;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <Settings_Apply+0xa4>)
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <Settings_Apply+0xb4>)
 8002a7c:	6013      	str	r3, [r2, #0]
	pid_ctr.ki_1 = settings_data.pid_ki_1;
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <Settings_Apply+0xa4>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <Settings_Apply+0xb4>)
 8002a84:	6053      	str	r3, [r2, #4]
	pid_ctr.kd_1 = settings_data.pid_kd_1;
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <Settings_Apply+0xa4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <Settings_Apply+0xb4>)
 8002a8c:	6093      	str	r3, [r2, #8]
	pid_ctr.kp_2 = settings_data.pid_kp_2;
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <Settings_Apply+0xa4>)
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <Settings_Apply+0xb4>)
 8002a94:	60d3      	str	r3, [r2, #12]
	pid_ctr.ki_2 = settings_data.pid_ki_2;
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <Settings_Apply+0xa4>)
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <Settings_Apply+0xb4>)
 8002a9c:	6113      	str	r3, [r2, #16]
	pid_ctr.kd_2 = settings_data.pid_kd_2;
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <Settings_Apply+0xa4>)
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <Settings_Apply+0xb4>)
 8002aa4:	6153      	str	r3, [r2, #20]
	pid_ctr.kp_3 = settings_data.pid_kp_3;
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <Settings_Apply+0xa4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a11      	ldr	r2, [pc, #68]	; (8002af0 <Settings_Apply+0xb4>)
 8002aac:	6193      	str	r3, [r2, #24]
	pid_ctr.ki_3 = settings_data.pid_ki_3;
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <Settings_Apply+0xa4>)
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <Settings_Apply+0xb4>)
 8002ab4:	61d3      	str	r3, [r2, #28]
	pid_ctr.kd_3 = settings_data.pid_kd_3;
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <Settings_Apply+0xa4>)
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <Settings_Apply+0xb4>)
 8002abc:	6213      	str	r3, [r2, #32]
	pid_ctr.split_1 = settings_data.pid_split_steps_1;
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <Settings_Apply+0xa4>)
 8002ac0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <Settings_Apply+0xb4>)
 8002ac4:	849a      	strh	r2, [r3, #36]	; 0x24
	pid_ctr.split_2 = settings_data.pid_split_steps_2;
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <Settings_Apply+0xa4>)
 8002ac8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <Settings_Apply+0xb4>)
 8002acc:	84da      	strh	r2, [r3, #38]	; 0x26
	PID_Set_Sampling_Time(settings_data.pid_sampling_ms);
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <Settings_Apply+0xa4>)
 8002ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fdb8 	bl	800164c <PID_Set_Sampling_Time>
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000470 	.word	0x20000470
 8002ae4:	200001ac 	.word	0x200001ac
 8002ae8:	2000020c 	.word	0x2000020c
 8002aec:	2000019c 	.word	0x2000019c
 8002af0:	200001bc 	.word	0x200001bc

08002af4 <Settings_Write>:

//Writes "settings_data" global variable to flash
void Settings_Write(){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
	//Copy data to temporary buffer
	_memcpy((uint32_t)&settings_data_buff[0], (uint32_t)&settings_data, sizeof(usb_config_t));
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <Settings_Write+0x70>)
 8002afc:	491a      	ldr	r1, [pc, #104]	; (8002b68 <Settings_Write+0x74>)
 8002afe:	2244      	movs	r2, #68	; 0x44
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fda1 	bl	8002648 <_memcpy>
	//Append CRC padding symbols if necessary
	uint8_t i = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	71fb      	strb	r3, [r7, #7]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 8002b0a:	e007      	b.n	8002b1c <Settings_Write+0x28>
		settings_data_buff[sizeof(usb_config_t) + i] = USB_CRC_PADDING_SYMBOL;
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	3344      	adds	r3, #68	; 0x44
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <Settings_Write+0x70>)
 8002b12:	2100      	movs	r1, #0
 8002b14:	54d1      	strb	r1, [r2, r3]
		i++;
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	71fb      	strb	r3, [r7, #7]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f2      	bne.n	8002b0c <Settings_Write+0x18>
	}

	//Append CRC
	uint32_t crc = CRC32_Get((uint32_t *)&settings_data_buff[0], (sizeof(usb_config_t) + i) / sizeof(uint32_t));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	3344      	adds	r3, #68	; 0x44
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	480d      	ldr	r0, [pc, #52]	; (8002b64 <Settings_Write+0x70>)
 8002b30:	f7fe fa5e 	bl	8000ff0 <CRC32_Get>
 8002b34:	4603      	mov	r3, r0
 8002b36:	603b      	str	r3, [r7, #0]
	_memcpy((uint32_t)&settings_data_buff[sizeof(usb_config_t) + i], (uint32_t)&crc, sizeof(uint32_t));
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	3344      	adds	r3, #68	; 0x44
 8002b3c:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <Settings_Write+0x70>)
 8002b3e:	4413      	add	r3, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	463b      	mov	r3, r7
 8002b44:	2204      	movs	r2, #4
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7ff fd7e 	bl	8002648 <_memcpy>
	
	//Write to flash
	Flash_Write(&settings_data_buff[0], SETTINGS_FLASH_ADDRESS, sizeof(usb_config_t) + i + sizeof(uint32_t));
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	3348      	adds	r3, #72	; 0x48
 8002b50:	461a      	mov	r2, r3
 8002b52:	4906      	ldr	r1, [pc, #24]	; (8002b6c <Settings_Write+0x78>)
 8002b54:	4803      	ldr	r0, [pc, #12]	; (8002b64 <Settings_Write+0x70>)
 8002b56:	f7fe fa7c 	bl	8001052 <Flash_Write>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200004b4 	.word	0x200004b4
 8002b68:	20000470 	.word	0x20000470
 8002b6c:	0800fc00 	.word	0x0800fc00

08002b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b74:	f000 fbee 	bl	8003354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b78:	f000 f813 	bl	8002ba2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b7c:	f000 f9e6 	bl	8002f4c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002b80:	f000 f86c 	bl	8002c5c <MX_ADC1_Init>
  MX_CRC_Init();
 8002b84:	f000 f8a8 	bl	8002cd8 <MX_CRC_Init>
  MX_TIM2_Init();
 8002b88:	f000 f8ba 	bl	8002d00 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b8c:	f000 f93a 	bl	8002e04 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b90:	f000 f986 	bl	8002ea0 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002b94:	f009 f97a 	bl	800be8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 8002b98:	f7ff fb4c 	bl	8002234 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    App_Loop();
 8002b9c:	f7ff fb56 	bl	800224c <App_Loop>
 8002ba0:	e7fc      	b.n	8002b9c <main+0x2c>

08002ba2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b094      	sub	sp, #80	; 0x50
 8002ba6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ba8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bac:	2228      	movs	r2, #40	; 0x28
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f009 fe3f 	bl	800c834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002be0:	2301      	movs	r3, #1
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002be4:	2302      	movs	r3, #2
 8002be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 faa9 	bl	8006150 <HAL_RCC_OscConfig>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002c04:	f000 fa04 	bl	8003010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c08:	230f      	movs	r3, #15
 8002c0a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c18:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	2102      	movs	r1, #2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fd15 	bl	8006654 <HAL_RCC_ClockConfig>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002c30:	f000 f9ee 	bl	8003010 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002c34:	2312      	movs	r3, #18
 8002c36:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c3c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fe89 	bl	800695c <HAL_RCCEx_PeriphCLKConfig>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002c50:	f000 f9de 	bl	8003010 <Error_Handler>
  }
}
 8002c54:	bf00      	nop
 8002c56:	3750      	adds	r7, #80	; 0x50
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c6e:	4a19      	ldr	r2, [pc, #100]	; (8002cd4 <MX_ADC1_Init+0x78>)
 8002c70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c86:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002c8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c98:	480d      	ldr	r0, [pc, #52]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c9a:	f000 fbbd 	bl	8003418 <HAL_ADC_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002ca4:	f000 f9b4 	bl	8003010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cac:	2301      	movs	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002cb0:	2307      	movs	r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002cba:	f000 fe13 	bl	80038e4 <HAL_ADC_ConfigChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002cc4:	f000 f9a4 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000500 	.word	0x20000500
 8002cd4:	40012400 	.word	0x40012400

08002cd8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <MX_CRC_Init+0x20>)
 8002cde:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <MX_CRC_Init+0x24>)
 8002ce0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002ce2:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <MX_CRC_Init+0x20>)
 8002ce4:	f001 f955 	bl	8003f92 <HAL_CRC_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002cee:	f000 f98f 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000530 	.word	0x20000530
 8002cfc:	40023000 	.word	0x40023000

08002d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08e      	sub	sp, #56	; 0x38
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d14:	f107 0320 	add.w	r3, r7, #32
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
 8002d2c:	615a      	str	r2, [r3, #20]
 8002d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d30:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002d38:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3e:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002d44:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002d46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d58:	4829      	ldr	r0, [pc, #164]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002d5a:	f003 ff75 	bl	8006c48 <HAL_TIM_Base_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d64:	f000 f954 	bl	8003010 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d72:	4619      	mov	r1, r3
 8002d74:	4822      	ldr	r0, [pc, #136]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002d76:	f004 fb51 	bl	800741c <HAL_TIM_ConfigClockSource>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002d80:	f000 f946 	bl	8003010 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d84:	481e      	ldr	r0, [pc, #120]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002d86:	f004 f82f 	bl	8006de8 <HAL_TIM_PWM_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002d90:	f000 f93e 	bl	8003010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d9c:	f107 0320 	add.w	r3, r7, #32
 8002da0:	4619      	mov	r1, r3
 8002da2:	4817      	ldr	r0, [pc, #92]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002da4:	f004 fec6 	bl	8007b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002dae:	f000 f92f 	bl	8003010 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db2:	2360      	movs	r3, #96	; 0x60
 8002db4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4619      	mov	r1, r3
 8002dca:	480d      	ldr	r0, [pc, #52]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002dcc:	f004 fa68 	bl	80072a0 <HAL_TIM_PWM_ConfigChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002dd6:	f000 f91b 	bl	8003010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	2204      	movs	r2, #4
 8002dde:	4619      	mov	r1, r3
 8002de0:	4807      	ldr	r0, [pc, #28]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002de2:	f004 fa5d 	bl	80072a0 <HAL_TIM_PWM_ConfigChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002dec:	f000 f910 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002df0:	4803      	ldr	r0, [pc, #12]	; (8002e00 <MX_TIM2_Init+0x100>)
 8002df2:	f000 f9fb 	bl	80031ec <HAL_TIM_MspPostInit>

}
 8002df6:	bf00      	nop
 8002df8:	3738      	adds	r7, #56	; 0x38
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000538 	.word	0x20000538

08002e04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e0a:	f107 0308 	add.w	r3, r7, #8
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e18:	463b      	mov	r3, r7
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <MX_TIM3_Init+0x94>)
 8002e22:	4a1e      	ldr	r2, [pc, #120]	; (8002e9c <MX_TIM3_Init+0x98>)
 8002e24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <MX_TIM3_Init+0x94>)
 8002e28:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002e2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <MX_TIM3_Init+0x94>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <MX_TIM3_Init+0x94>)
 8002e36:	22c7      	movs	r2, #199	; 0xc7
 8002e38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e3a:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <MX_TIM3_Init+0x94>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e40:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <MX_TIM3_Init+0x94>)
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e46:	4814      	ldr	r0, [pc, #80]	; (8002e98 <MX_TIM3_Init+0x94>)
 8002e48:	f003 fefe 	bl	8006c48 <HAL_TIM_Base_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e52:	f000 f8dd 	bl	8003010 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e5c:	f107 0308 	add.w	r3, r7, #8
 8002e60:	4619      	mov	r1, r3
 8002e62:	480d      	ldr	r0, [pc, #52]	; (8002e98 <MX_TIM3_Init+0x94>)
 8002e64:	f004 fada 	bl	800741c <HAL_TIM_ConfigClockSource>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002e6e:	f000 f8cf 	bl	8003010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4806      	ldr	r0, [pc, #24]	; (8002e98 <MX_TIM3_Init+0x94>)
 8002e80:	f004 fe58 	bl	8007b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002e8a:	f000 f8c1 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000580 	.word	0x20000580
 8002e9c:	40000400 	.word	0x40000400

08002ea0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea6:	f107 0308 	add.w	r3, r7, #8
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ebc:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <MX_TIM4_Init+0xa4>)
 8002ebe:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <MX_TIM4_Init+0xa8>)
 8002ec0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <MX_TIM4_Init+0xa4>)
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <MX_TIM4_Init+0xa4>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <MX_TIM4_Init+0xa4>)
 8002ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <MX_TIM4_Init+0xa4>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <MX_TIM4_Init+0xa4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ee2:	4818      	ldr	r0, [pc, #96]	; (8002f44 <MX_TIM4_Init+0xa4>)
 8002ee4:	f003 feb0 	bl	8006c48 <HAL_TIM_Base_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002eee:	f000 f88f 	bl	8003010 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ef8:	f107 0308 	add.w	r3, r7, #8
 8002efc:	4619      	mov	r1, r3
 8002efe:	4811      	ldr	r0, [pc, #68]	; (8002f44 <MX_TIM4_Init+0xa4>)
 8002f00:	f004 fa8c 	bl	800741c <HAL_TIM_ConfigClockSource>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002f0a:	f000 f881 	bl	8003010 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002f0e:	2108      	movs	r1, #8
 8002f10:	480c      	ldr	r0, [pc, #48]	; (8002f44 <MX_TIM4_Init+0xa4>)
 8002f12:	f004 f863 	bl	8006fdc <HAL_TIM_OnePulse_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002f1c:	f000 f878 	bl	8003010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f20:	2300      	movs	r3, #0
 8002f22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f28:	463b      	mov	r3, r7
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_TIM4_Init+0xa4>)
 8002f2e:	f004 fe01 	bl	8007b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002f38:	f000 f86a 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f3c:	bf00      	nop
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	200005c8 	.word	0x200005c8
 8002f48:	40000800 	.word	0x40000800

08002f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f52:	f107 0310 	add.w	r3, r7, #16
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <MX_GPIO_Init+0xb4>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a26      	ldr	r2, [pc, #152]	; (8003000 <MX_GPIO_Init+0xb4>)
 8002f66:	f043 0320 	orr.w	r3, r3, #32
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b24      	ldr	r3, [pc, #144]	; (8003000 <MX_GPIO_Init+0xb4>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f78:	4b21      	ldr	r3, [pc, #132]	; (8003000 <MX_GPIO_Init+0xb4>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	4a20      	ldr	r2, [pc, #128]	; (8003000 <MX_GPIO_Init+0xb4>)
 8002f7e:	f043 0304 	orr.w	r3, r3, #4
 8002f82:	6193      	str	r3, [r2, #24]
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <MX_GPIO_Init+0xb4>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <MX_GPIO_Init+0xb4>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <MX_GPIO_Init+0xb4>)
 8002f96:	f043 0308 	orr.w	r3, r3, #8
 8002f9a:	6193      	str	r3, [r2, #24]
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <MX_GPIO_Init+0xb4>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	4815      	ldr	r0, [pc, #84]	; (8003004 <MX_GPIO_Init+0xb8>)
 8002fae:	f001 fbda 	bl	8004766 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002fc2:	f107 0310 	add.w	r3, r7, #16
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	480e      	ldr	r0, [pc, #56]	; (8003004 <MX_GPIO_Init+0xb8>)
 8002fca:	f001 fa31 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <MX_GPIO_Init+0xbc>)
 8002fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8002fda:	f107 0310 	add.w	r3, r7, #16
 8002fde:	4619      	mov	r1, r3
 8002fe0:	480a      	ldr	r0, [pc, #40]	; (800300c <MX_GPIO_Init+0xc0>)
 8002fe2:	f001 fa25 	bl	8004430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2007      	movs	r0, #7
 8002fec:	f000 ff9b 	bl	8003f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ff0:	2007      	movs	r0, #7
 8002ff2:	f000 ffb4 	bl	8003f5e <HAL_NVIC_EnableIRQ>

}
 8002ff6:	bf00      	nop
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	40010800 	.word	0x40010800
 8003008:	10310000 	.word	0x10310000
 800300c:	40010c00 	.word	0x40010c00

08003010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003014:	b672      	cpsid	i
}
 8003016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003018:	e7fe      	b.n	8003018 <Error_Handler+0x8>
	...

0800301c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <HAL_MspInit+0x5c>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <HAL_MspInit+0x5c>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6193      	str	r3, [r2, #24]
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_MspInit+0x5c>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <HAL_MspInit+0x5c>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <HAL_MspInit+0x5c>)
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003044:	61d3      	str	r3, [r2, #28]
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_MspInit+0x5c>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_MspInit+0x60>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <HAL_MspInit+0x60>)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	40021000 	.word	0x40021000
 800307c:	40010000 	.word	0x40010000

08003080 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_ADC_MspInit+0x7c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d129      	bne.n	80030f4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030a0:	4b17      	ldr	r3, [pc, #92]	; (8003100 <HAL_ADC_MspInit+0x80>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	4a16      	ldr	r2, [pc, #88]	; (8003100 <HAL_ADC_MspInit+0x80>)
 80030a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030aa:	6193      	str	r3, [r2, #24]
 80030ac:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_ADC_MspInit+0x80>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_ADC_MspInit+0x80>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a10      	ldr	r2, [pc, #64]	; (8003100 <HAL_ADC_MspInit+0x80>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_ADC_MspInit+0x80>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 80030d0:	2310      	movs	r3, #16
 80030d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d4:	2303      	movs	r3, #3
 80030d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 80030d8:	f107 0310 	add.w	r3, r7, #16
 80030dc:	4619      	mov	r1, r3
 80030de:	4809      	ldr	r0, [pc, #36]	; (8003104 <HAL_ADC_MspInit+0x84>)
 80030e0:	f001 f9a6 	bl	8004430 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2102      	movs	r1, #2
 80030e8:	2012      	movs	r0, #18
 80030ea:	f000 ff1c 	bl	8003f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80030ee:	2012      	movs	r0, #18
 80030f0:	f000 ff35 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030f4:	bf00      	nop
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40012400 	.word	0x40012400
 8003100:	40021000 	.word	0x40021000
 8003104:	40010800 	.word	0x40010800

08003108 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a09      	ldr	r2, [pc, #36]	; (800313c <HAL_CRC_MspInit+0x34>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d10b      	bne.n	8003132 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_CRC_MspInit+0x38>)
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_CRC_MspInit+0x38>)
 8003120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003124:	6153      	str	r3, [r2, #20]
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_CRC_MspInit+0x38>)
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40023000 	.word	0x40023000
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003154:	d10c      	bne.n	8003170 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003156:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <HAL_TIM_Base_MspInit+0x9c>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a21      	ldr	r2, [pc, #132]	; (80031e0 <HAL_TIM_Base_MspInit+0x9c>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	61d3      	str	r3, [r2, #28]
 8003162:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <HAL_TIM_Base_MspInit+0x9c>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800316e:	e032      	b.n	80031d6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_TIM_Base_MspInit+0xa0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d114      	bne.n	80031a4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_TIM_Base_MspInit+0x9c>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_TIM_Base_MspInit+0x9c>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	61d3      	str	r3, [r2, #28]
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <HAL_TIM_Base_MspInit+0x9c>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2101      	movs	r1, #1
 8003196:	201d      	movs	r0, #29
 8003198:	f000 fec5 	bl	8003f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800319c:	201d      	movs	r0, #29
 800319e:	f000 fede 	bl	8003f5e <HAL_NVIC_EnableIRQ>
}
 80031a2:	e018      	b.n	80031d6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <HAL_TIM_Base_MspInit+0xa4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d113      	bne.n	80031d6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <HAL_TIM_Base_MspInit+0x9c>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <HAL_TIM_Base_MspInit+0x9c>)
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	61d3      	str	r3, [r2, #28]
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_TIM_Base_MspInit+0x9c>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	201e      	movs	r0, #30
 80031cc:	f000 feab 	bl	8003f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031d0:	201e      	movs	r0, #30
 80031d2:	f000 fec4 	bl	8003f5e <HAL_NVIC_EnableIRQ>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800

080031ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0310 	add.w	r3, r7, #16
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d117      	bne.n	800323c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320c:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_TIM_MspPostInit+0x58>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <HAL_TIM_MspPostInit+0x58>)
 8003212:	f043 0304 	orr.w	r3, r3, #4
 8003216:	6193      	str	r3, [r2, #24]
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_TIM_MspPostInit+0x58>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8003224:	2303      	movs	r3, #3
 8003226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003230:	f107 0310 	add.w	r3, r7, #16
 8003234:	4619      	mov	r1, r3
 8003236:	4804      	ldr	r0, [pc, #16]	; (8003248 <HAL_TIM_MspPostInit+0x5c>)
 8003238:	f001 f8fa 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800323c:	bf00      	nop
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40021000 	.word	0x40021000
 8003248:	40010800 	.word	0x40010800

0800324c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003250:	e7fe      	b.n	8003250 <NMI_Handler+0x4>

08003252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003256:	e7fe      	b.n	8003256 <HardFault_Handler+0x4>

08003258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800325c:	e7fe      	b.n	800325c <MemManage_Handler+0x4>

0800325e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003262:	e7fe      	b.n	8003262 <BusFault_Handler+0x4>

08003264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003268:	e7fe      	b.n	8003268 <UsageFault_Handler+0x4>

0800326a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003292:	f000 f8a5 	bl	80033e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 8003296:	f7fe ffc3 	bl	8002220 <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}

0800329e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 80032a2:	2002      	movs	r0, #2
 80032a4:	f001 fa78 	bl	8004798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}

080032ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032b0:	4802      	ldr	r0, [pc, #8]	; (80032bc <ADC1_2_IRQHandler+0x10>)
 80032b2:	f000 fa4b 	bl	800374c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000500 	.word	0x20000500

080032c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80032c4:	4802      	ldr	r0, [pc, #8]	; (80032d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80032c6:	f001 fbb0 	bl	8004a2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20001300 	.word	0x20001300

080032d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032d8:	4802      	ldr	r0, [pc, #8]	; (80032e4 <TIM3_IRQHandler+0x10>)
 80032da:	f003 fed8 	bl	800708e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000580 	.word	0x20000580

080032e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <TIM4_IRQHandler+0x10>)
 80032ee:	f003 fece 	bl	800708e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200005c8 	.word	0x200005c8

080032fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003308:	480c      	ldr	r0, [pc, #48]	; (800333c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800330a:	490d      	ldr	r1, [pc, #52]	; (8003340 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800330c:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800330e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003310:	e002      	b.n	8003318 <LoopCopyDataInit>

08003312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003316:	3304      	adds	r3, #4

08003318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800331a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800331c:	d3f9      	bcc.n	8003312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003320:	4c0a      	ldr	r4, [pc, #40]	; (800334c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003324:	e001      	b.n	800332a <LoopFillZerobss>

08003326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003328:	3204      	adds	r2, #4

0800332a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800332a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800332c:	d3fb      	bcc.n	8003326 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800332e:	f7ff ffe5 	bl	80032fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003332:	f009 fa4d 	bl	800c7d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003336:	f7ff fc1b 	bl	8002b70 <main>
  bx lr
 800333a:	4770      	bx	lr
  ldr r0, =_sdata
 800333c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003340:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8003344:	0800c924 	.word	0x0800c924
  ldr r2, =_sbss
 8003348:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800334c:	2000180c 	.word	0x2000180c

08003350 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003350:	e7fe      	b.n	8003350 <CAN1_RX1_IRQHandler>
	...

08003354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <HAL_Init+0x28>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a07      	ldr	r2, [pc, #28]	; (800337c <HAL_Init+0x28>)
 800335e:	f043 0310 	orr.w	r3, r3, #16
 8003362:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003364:	2003      	movs	r0, #3
 8003366:	f000 fdd3 	bl	8003f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800336a:	2004      	movs	r0, #4
 800336c:	f000 f808 	bl	8003380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003370:	f7ff fe54 	bl	800301c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40022000 	.word	0x40022000

08003380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_InitTick+0x54>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_InitTick+0x58>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003396:	fbb3 f3f1 	udiv	r3, r3, r1
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fdeb 	bl	8003f7a <HAL_SYSTICK_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e00e      	b.n	80033cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b0f      	cmp	r3, #15
 80033b2:	d80a      	bhi.n	80033ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b4:	2200      	movs	r2, #0
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	f000 fdb3 	bl	8003f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033c0:	4a06      	ldr	r2, [pc, #24]	; (80033dc <HAL_InitTick+0x5c>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e000      	b.n	80033cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000000 	.word	0x20000000
 80033d8:	20000008 	.word	0x20000008
 80033dc:	20000004 	.word	0x20000004

080033e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_IncTick+0x1c>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_IncTick+0x20>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	4a03      	ldr	r2, [pc, #12]	; (8003400 <HAL_IncTick+0x20>)
 80033f2:	6013      	str	r3, [r2, #0]
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	20000008 	.word	0x20000008
 8003400:	20000610 	.word	0x20000610

08003404 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return uwTick;
 8003408:	4b02      	ldr	r3, [pc, #8]	; (8003414 <HAL_GetTick+0x10>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	20000610 	.word	0x20000610

08003418 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e0be      	b.n	80035b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fe12 	bl	8003080 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fb93 	bl	8003b88 <ADC_ConversionStop_Disable>
 8003462:	4603      	mov	r3, r0
 8003464:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	f040 8099 	bne.w	80035a6 <HAL_ADC_Init+0x18e>
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 8095 	bne.w	80035a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003484:	f023 0302 	bic.w	r3, r3, #2
 8003488:	f043 0202 	orr.w	r2, r3, #2
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003498:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	7b1b      	ldrb	r3, [r3, #12]
 800349e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b0:	d003      	beq.n	80034ba <HAL_ADC_Init+0xa2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d102      	bne.n	80034c0 <HAL_ADC_Init+0xa8>
 80034ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034be:	e000      	b.n	80034c2 <HAL_ADC_Init+0xaa>
 80034c0:	2300      	movs	r3, #0
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7d1b      	ldrb	r3, [r3, #20]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d119      	bne.n	8003504 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7b1b      	ldrb	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	3b01      	subs	r3, #1
 80034de:	035a      	lsls	r2, r3, #13
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	e00b      	b.n	8003504 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	f043 0201 	orr.w	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_ADC_Init+0x1a8>)
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	430b      	orrs	r3, r1
 800352a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003534:	d003      	beq.n	800353e <HAL_ADC_Init+0x126>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d104      	bne.n	8003548 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	3b01      	subs	r3, #1
 8003544:	051b      	lsls	r3, r3, #20
 8003546:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	430a      	orrs	r2, r1
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_ADC_Init+0x1ac>)
 8003564:	4013      	ands	r3, r2
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	429a      	cmp	r2, r3
 800356a:	d10b      	bne.n	8003584 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	f023 0303 	bic.w	r3, r3, #3
 800357a:	f043 0201 	orr.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003582:	e018      	b.n	80035b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	f023 0312 	bic.w	r3, r3, #18
 800358c:	f043 0210 	orr.w	r2, r3, #16
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035a4:	e007      	b.n	80035b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	f043 0210 	orr.w	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	ffe1f7fd 	.word	0xffe1f7fd
 80035c4:	ff1f0efe 	.word	0xff1f0efe

080035c8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_Start_IT+0x1a>
 80035de:	2302      	movs	r3, #2
 80035e0:	e0a0      	b.n	8003724 <HAL_ADC_Start_IT+0x15c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa72 	bl	8003ad4 <ADC_Enable>
 80035f0:	4603      	mov	r3, r0
 80035f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 808f 	bne.w	800371a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a45      	ldr	r2, [pc, #276]	; (800372c <HAL_ADC_Start_IT+0x164>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d105      	bne.n	8003626 <HAL_ADC_Start_IT+0x5e>
 800361a:	4b45      	ldr	r3, [pc, #276]	; (8003730 <HAL_ADC_Start_IT+0x168>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d115      	bne.n	8003652 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d026      	beq.n	800368e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003648:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003650:	e01d      	b.n	800368e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a33      	ldr	r2, [pc, #204]	; (8003730 <HAL_ADC_Start_IT+0x168>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_ADC_Start_IT+0xaa>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2f      	ldr	r2, [pc, #188]	; (800372c <HAL_ADC_Start_IT+0x164>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d10d      	bne.n	800368e <HAL_ADC_Start_IT+0xc6>
 8003672:	4b2f      	ldr	r3, [pc, #188]	; (8003730 <HAL_ADC_Start_IT+0x168>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003686:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	f023 0206 	bic.w	r2, r3, #6
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80036a6:	e002      	b.n	80036ae <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0202 	mvn.w	r2, #2
 80036be:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0220 	orr.w	r2, r2, #32
 80036ce:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036de:	d113      	bne.n	8003708 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036e4:	4a11      	ldr	r2, [pc, #68]	; (800372c <HAL_ADC_Start_IT+0x164>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d105      	bne.n	80036f6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_ADC_Start_IT+0x168>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	e00c      	b.n	8003722 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	e003      	b.n	8003722 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40012800 	.word	0x40012800
 8003730:	40012400 	.word	0x40012400

08003734 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b20      	cmp	r3, #32
 8003760:	d140      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b02      	cmp	r3, #2
 800376e:	d139      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d105      	bne.n	8003788 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003792:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003796:	d11d      	bne.n	80037d4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800379c:	2b00      	cmp	r3, #0
 800379e:	d119      	bne.n	80037d4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0220 	bic.w	r2, r2, #32
 80037ae:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fe fce7 	bl	80021a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f06f 0212 	mvn.w	r2, #18
 80037e2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b80      	cmp	r3, #128	; 0x80
 80037f0:	d14f      	bne.n	8003892 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d148      	bne.n	8003892 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003822:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003826:	d012      	beq.n	800384e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003832:	2b00      	cmp	r3, #0
 8003834:	d125      	bne.n	8003882 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003840:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003844:	d11d      	bne.n	8003882 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800384a:	2b00      	cmp	r3, #0
 800384c:	d119      	bne.n	8003882 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800385c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa6e 	bl	8003d64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 020c 	mvn.w	r2, #12
 8003890:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d114      	bne.n	80038ca <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10d      	bne.n	80038ca <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f809 	bl	80038d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0201 	mvn.w	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x20>
 8003900:	2302      	movs	r3, #2
 8003902:	e0dc      	b.n	8003abe <HAL_ADC_ConfigChannel+0x1da>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b06      	cmp	r3, #6
 8003912:	d81c      	bhi.n	800394e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	3b05      	subs	r3, #5
 8003926:	221f      	movs	r2, #31
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	4019      	ands	r1, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	3b05      	subs	r3, #5
 8003940:	fa00 f203 	lsl.w	r2, r0, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	635a      	str	r2, [r3, #52]	; 0x34
 800394c:	e03c      	b.n	80039c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d81c      	bhi.n	8003990 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	3b23      	subs	r3, #35	; 0x23
 8003968:	221f      	movs	r2, #31
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	4019      	ands	r1, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	3b23      	subs	r3, #35	; 0x23
 8003982:	fa00 f203 	lsl.w	r2, r0, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
 800398e:	e01b      	b.n	80039c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	3b41      	subs	r3, #65	; 0x41
 80039a2:	221f      	movs	r2, #31
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	4019      	ands	r1, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	3b41      	subs	r3, #65	; 0x41
 80039bc:	fa00 f203 	lsl.w	r2, r0, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	d91c      	bls.n	8003a0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68d9      	ldr	r1, [r3, #12]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	3b1e      	subs	r3, #30
 80039e2:	2207      	movs	r2, #7
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	4019      	ands	r1, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6898      	ldr	r0, [r3, #8]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	3b1e      	subs	r3, #30
 80039fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	e019      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6919      	ldr	r1, [r3, #16]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	2207      	movs	r2, #7
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	4019      	ands	r1, r3
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6898      	ldr	r0, [r3, #8]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	fa00 f203 	lsl.w	r2, r0, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d003      	beq.n	8003a4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a4a:	2b11      	cmp	r3, #17
 8003a4c:	d132      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d125      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d126      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d11a      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <HAL_ADC_ConfigChannel+0x1e8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	0c9a      	lsrs	r2, r3, #18
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a94:	e002      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f9      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x1b2>
 8003aa2:	e007      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	40012400 	.word	0x40012400
 8003acc:	20000000 	.word	0x20000000
 8003ad0:	431bde83 	.word	0x431bde83

08003ad4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d040      	beq.n	8003b74 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b02:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <ADC_Enable+0xac>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <ADC_Enable+0xb0>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	0c9b      	lsrs	r3, r3, #18
 8003b0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b10:	e002      	b.n	8003b18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f9      	bne.n	8003b12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b1e:	f7ff fc71 	bl	8003404 <HAL_GetTick>
 8003b22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b24:	e01f      	b.n	8003b66 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b26:	f7ff fc6d 	bl	8003404 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d918      	bls.n	8003b66 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d011      	beq.n	8003b66 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	f043 0210 	orr.w	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e007      	b.n	8003b76 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d1d8      	bne.n	8003b26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000000 	.word	0x20000000
 8003b84:	431bde83 	.word	0x431bde83

08003b88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d12e      	bne.n	8003c00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bb2:	f7ff fc27 	bl	8003404 <HAL_GetTick>
 8003bb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bb8:	e01b      	b.n	8003bf2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bba:	f7ff fc23 	bl	8003404 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d914      	bls.n	8003bf2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10d      	bne.n	8003bf2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	f043 0210 	orr.w	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e007      	b.n	8003c02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d0dc      	beq.n	8003bba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_ADCEx_Calibration_Start+0x1e>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e095      	b.n	8003d56 <HAL_ADCEx_Calibration_Start+0x14a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ffa8 	bl	8003b88 <ADC_ConversionStop_Disable>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f040 8084 	bne.w	8003d4c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c4c:	f023 0302 	bic.w	r3, r3, #2
 8003c50:	f043 0202 	orr.w	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c58:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <HAL_ADCEx_Calibration_Start+0x154>)
 8003c5a:	681c      	ldr	r4, [r3, #0]
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	f002 ff33 	bl	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c62:	4603      	mov	r3, r0
 8003c64:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003c68:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003c6a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003c6c:	e002      	b.n	8003c74 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f9      	bne.n	8003c6e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ff2a 	bl	8003ad4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003c90:	f7ff fbb8 	bl	8003404 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c96:	e01b      	b.n	8003cd0 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c98:	f7ff fbb4 	bl	8003404 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b0a      	cmp	r3, #10
 8003ca4:	d914      	bls.n	8003cd0 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00d      	beq.n	8003cd0 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	f023 0312 	bic.w	r3, r3, #18
 8003cbc:	f043 0210 	orr.w	r2, r3, #16
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e042      	b.n	8003d56 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1dc      	bne.n	8003c98 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0204 	orr.w	r2, r2, #4
 8003cec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003cee:	f7ff fb89 	bl	8003404 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cf4:	e01b      	b.n	8003d2e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003cf6:	f7ff fb85 	bl	8003404 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b0a      	cmp	r3, #10
 8003d02:	d914      	bls.n	8003d2e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	f023 0312 	bic.w	r3, r3, #18
 8003d1a:	f043 0210 	orr.w	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e013      	b.n	8003d56 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1dc      	bne.n	8003cf6 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	f023 0303 	bic.w	r3, r3, #3
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd90      	pop	{r4, r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000000 	.word	0x20000000

08003d64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
	...

08003d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d94:	4013      	ands	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003daa:	4a04      	ldr	r2, [pc, #16]	; (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	60d3      	str	r3, [r2, #12]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	f003 0307 	and.w	r3, r3, #7
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	db0b      	blt.n	8003e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	f003 021f 	and.w	r2, r3, #31
 8003df4:	4906      	ldr	r1, [pc, #24]	; (8003e10 <__NVIC_EnableIRQ+0x34>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	e000e100 	.word	0xe000e100

08003e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	db0a      	blt.n	8003e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	490c      	ldr	r1, [pc, #48]	; (8003e60 <__NVIC_SetPriority+0x4c>)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	0112      	lsls	r2, r2, #4
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	440b      	add	r3, r1
 8003e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e3c:	e00a      	b.n	8003e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4908      	ldr	r1, [pc, #32]	; (8003e64 <__NVIC_SetPriority+0x50>)
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	3b04      	subs	r3, #4
 8003e4c:	0112      	lsls	r2, r2, #4
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	440b      	add	r3, r1
 8003e52:	761a      	strb	r2, [r3, #24]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000e100 	.word	0xe000e100
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f1c3 0307 	rsb	r3, r3, #7
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	bf28      	it	cs
 8003e86:	2304      	movcs	r3, #4
 8003e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2b06      	cmp	r3, #6
 8003e90:	d902      	bls.n	8003e98 <NVIC_EncodePriority+0x30>
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3b03      	subs	r3, #3
 8003e96:	e000      	b.n	8003e9a <NVIC_EncodePriority+0x32>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	401a      	ands	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eba:	43d9      	mvns	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec0:	4313      	orrs	r3, r2
         );
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3724      	adds	r7, #36	; 0x24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003edc:	d301      	bcc.n	8003ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e00f      	b.n	8003f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ee2:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <SysTick_Config+0x40>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eea:	210f      	movs	r1, #15
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	f7ff ff90 	bl	8003e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <SysTick_Config+0x40>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003efa:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <SysTick_Config+0x40>)
 8003efc:	2207      	movs	r2, #7
 8003efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	e000e010 	.word	0xe000e010

08003f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff2d 	bl	8003d78 <__NVIC_SetPriorityGrouping>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f38:	f7ff ff42 	bl	8003dc0 <__NVIC_GetPriorityGrouping>
 8003f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	6978      	ldr	r0, [r7, #20]
 8003f44:	f7ff ff90 	bl	8003e68 <NVIC_EncodePriority>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff ff5f 	bl	8003e14 <__NVIC_SetPriority>
}
 8003f56:	bf00      	nop
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff35 	bl	8003ddc <__NVIC_EnableIRQ>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ffa2 	bl	8003ecc <SysTick_Config>
 8003f88:	4603      	mov	r3, r0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e00e      	b.n	8003fc2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	795b      	ldrb	r3, [r3, #5]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff f8a7 	bl	8003108 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b087      	sub	sp, #28
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	e00a      	b.n	800400c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	441a      	add	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	3301      	adds	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3f0      	bcc.n	8003ff6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004022:	693b      	ldr	r3, [r7, #16]
}
 8004024:	4618      	mov	r0, r3
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr
	...

08004030 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800404a:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_FLASH_Program+0xd8>)
 800404c:	7e1b      	ldrb	r3, [r3, #24]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_FLASH_Program+0x26>
 8004052:	2302      	movs	r3, #2
 8004054:	e054      	b.n	8004100 <HAL_FLASH_Program+0xd0>
 8004056:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <HAL_FLASH_Program+0xd8>)
 8004058:	2201      	movs	r2, #1
 800405a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800405c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004060:	f000 f8a8 	bl	80041b4 <FLASH_WaitForLastOperation>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d144      	bne.n	80040f8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d102      	bne.n	800407a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004074:	2301      	movs	r3, #1
 8004076:	757b      	strb	r3, [r7, #21]
 8004078:	e007      	b.n	800408a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d102      	bne.n	8004086 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004080:	2302      	movs	r3, #2
 8004082:	757b      	strb	r3, [r7, #21]
 8004084:	e001      	b.n	800408a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004086:	2304      	movs	r3, #4
 8004088:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800408a:	2300      	movs	r3, #0
 800408c:	75bb      	strb	r3, [r7, #22]
 800408e:	e02d      	b.n	80040ec <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004090:	7dbb      	ldrb	r3, [r7, #22]
 8004092:	005a      	lsls	r2, r3, #1
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	eb02 0c03 	add.w	ip, r2, r3
 800409a:	7dbb      	ldrb	r3, [r7, #22]
 800409c:	0119      	lsls	r1, r3, #4
 800409e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040a2:	f1c1 0620 	rsb	r6, r1, #32
 80040a6:	f1a1 0020 	sub.w	r0, r1, #32
 80040aa:	fa22 f401 	lsr.w	r4, r2, r1
 80040ae:	fa03 f606 	lsl.w	r6, r3, r6
 80040b2:	4334      	orrs	r4, r6
 80040b4:	fa23 f000 	lsr.w	r0, r3, r0
 80040b8:	4304      	orrs	r4, r0
 80040ba:	fa23 f501 	lsr.w	r5, r3, r1
 80040be:	b2a3      	uxth	r3, r4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4660      	mov	r0, ip
 80040c4:	f000 f85a 	bl	800417c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040cc:	f000 f872 	bl	80041b4 <FLASH_WaitForLastOperation>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_FLASH_Program+0xdc>)
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	4a0c      	ldr	r2, [pc, #48]	; (800410c <HAL_FLASH_Program+0xdc>)
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d107      	bne.n	80040f6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80040e6:	7dbb      	ldrb	r3, [r7, #22]
 80040e8:	3301      	adds	r3, #1
 80040ea:	75bb      	strb	r3, [r7, #22]
 80040ec:	7dba      	ldrb	r2, [r7, #22]
 80040ee:	7d7b      	ldrb	r3, [r7, #21]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d3cd      	bcc.n	8004090 <HAL_FLASH_Program+0x60>
 80040f4:	e000      	b.n	80040f8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80040f6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040f8:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_FLASH_Program+0xd8>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	761a      	strb	r2, [r3, #24]

  return status;
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004100:	4618      	mov	r0, r3
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004108:	20000618 	.word	0x20000618
 800410c:	40022000 	.word	0x40022000

08004110 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <HAL_FLASH_Unlock+0x40>)
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_FLASH_Unlock+0x40>)
 8004128:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <HAL_FLASH_Unlock+0x44>)
 800412a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800412c:	4b08      	ldr	r3, [pc, #32]	; (8004150 <HAL_FLASH_Unlock+0x40>)
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <HAL_FLASH_Unlock+0x48>)
 8004130:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <HAL_FLASH_Unlock+0x40>)
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004142:	79fb      	ldrb	r3, [r7, #7]
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40022000 	.word	0x40022000
 8004154:	45670123 	.word	0x45670123
 8004158:	cdef89ab 	.word	0xcdef89ab

0800415c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_FLASH_Lock+0x1c>)
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <HAL_FLASH_Lock+0x1c>)
 8004166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40022000 	.word	0x40022000

0800417c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <FLASH_Program_HalfWord+0x30>)
 800418a:	2200      	movs	r2, #0
 800418c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800418e:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <FLASH_Program_HalfWord+0x34>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	4a07      	ldr	r2, [pc, #28]	; (80041b0 <FLASH_Program_HalfWord+0x34>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	887a      	ldrh	r2, [r7, #2]
 800419e:	801a      	strh	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000618 	.word	0x20000618
 80041b0:	40022000 	.word	0x40022000

080041b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80041bc:	f7ff f922 	bl	8003404 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041c2:	e010      	b.n	80041e6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ca:	d00c      	beq.n	80041e6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <FLASH_WaitForLastOperation+0x2e>
 80041d2:	f7ff f917 	bl	8003404 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d201      	bcs.n	80041e6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e025      	b.n	8004232 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <FLASH_WaitForLastOperation+0x88>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e8      	bne.n	80041c4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <FLASH_WaitForLastOperation+0x88>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <FLASH_WaitForLastOperation+0x88>)
 8004200:	2220      	movs	r2, #32
 8004202:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004204:	4b0d      	ldr	r3, [pc, #52]	; (800423c <FLASH_WaitForLastOperation+0x88>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004210:	4b0a      	ldr	r3, [pc, #40]	; (800423c <FLASH_WaitForLastOperation+0x88>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800421c:	4b07      	ldr	r3, [pc, #28]	; (800423c <FLASH_WaitForLastOperation+0x88>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004228:	f000 f80a 	bl	8004240 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40022000 	.word	0x40022000

08004240 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800424a:	4b23      	ldr	r3, [pc, #140]	; (80042d8 <FLASH_SetErrorCode+0x98>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <FLASH_SetErrorCode+0x9c>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f043 0302 	orr.w	r3, r3, #2
 800425e:	4a1f      	ldr	r2, [pc, #124]	; (80042dc <FLASH_SetErrorCode+0x9c>)
 8004260:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f043 0310 	orr.w	r3, r3, #16
 8004268:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <FLASH_SetErrorCode+0x98>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004276:	4b19      	ldr	r3, [pc, #100]	; (80042dc <FLASH_SetErrorCode+0x9c>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <FLASH_SetErrorCode+0x9c>)
 8004280:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <FLASH_SetErrorCode+0x98>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <FLASH_SetErrorCode+0x9c>)
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f043 0304 	orr.w	r3, r3, #4
 800429e:	4a0f      	ldr	r2, [pc, #60]	; (80042dc <FLASH_SetErrorCode+0x9c>)
 80042a0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <FLASH_SetErrorCode+0x98>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <FLASH_SetErrorCode+0x98>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f240 1201 	movw	r2, #257	; 0x101
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d106      	bne.n	80042c6 <FLASH_SetErrorCode+0x86>
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <FLASH_SetErrorCode+0x98>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	4a06      	ldr	r2, [pc, #24]	; (80042d8 <FLASH_SetErrorCode+0x98>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	61d3      	str	r3, [r2, #28]
}  
 80042c4:	e002      	b.n	80042cc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042c6:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <FLASH_SetErrorCode+0x98>)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60d3      	str	r3, [r2, #12]
}  
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40022000 	.word	0x40022000
 80042dc:	20000618 	.word	0x20000618

080042e0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80042f2:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <HAL_FLASHEx_Erase+0xd0>)
 80042f4:	7e1b      	ldrb	r3, [r3, #24]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_FLASHEx_Erase+0x1e>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e053      	b.n	80043a6 <HAL_FLASHEx_Erase+0xc6>
 80042fe:	4b2c      	ldr	r3, [pc, #176]	; (80043b0 <HAL_FLASHEx_Erase+0xd0>)
 8004300:	2201      	movs	r2, #1
 8004302:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d116      	bne.n	800433a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800430c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004310:	f7ff ff50 	bl	80041b4 <FLASH_WaitForLastOperation>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d141      	bne.n	800439e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800431a:	2001      	movs	r0, #1
 800431c:	f000 f84c 	bl	80043b8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004320:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004324:	f7ff ff46 	bl	80041b4 <FLASH_WaitForLastOperation>
 8004328:	4603      	mov	r3, r0
 800432a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800432c:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <HAL_FLASHEx_Erase+0xd4>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <HAL_FLASHEx_Erase+0xd4>)
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	6113      	str	r3, [r2, #16]
 8004338:	e031      	b.n	800439e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800433a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800433e:	f7ff ff39 	bl	80041b4 <FLASH_WaitForLastOperation>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d12a      	bne.n	800439e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	f04f 32ff 	mov.w	r2, #4294967295
 800434e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	e019      	b.n	800438c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004358:	68b8      	ldr	r0, [r7, #8]
 800435a:	f000 f849 	bl	80043f0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800435e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004362:	f7ff ff27 	bl	80041b4 <FLASH_WaitForLastOperation>
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_FLASHEx_Erase+0xd4>)
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <HAL_FLASHEx_Erase+0xd4>)
 8004370:	f023 0302 	bic.w	r3, r3, #2
 8004374:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	601a      	str	r2, [r3, #0]
            break;
 8004382:	e00c      	b.n	800439e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800438a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	029a      	lsls	r2, r3, #10
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	d3dc      	bcc.n	8004358 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800439e:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <HAL_FLASHEx_Erase+0xd0>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	761a      	strb	r2, [r3, #24]

  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000618 	.word	0x20000618
 80043b4:	40022000 	.word	0x40022000

080043b8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <FLASH_MassErase+0x30>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <FLASH_MassErase+0x34>)
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	4a08      	ldr	r2, [pc, #32]	; (80043ec <FLASH_MassErase+0x34>)
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <FLASH_MassErase+0x34>)
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	4a05      	ldr	r2, [pc, #20]	; (80043ec <FLASH_MassErase+0x34>)
 80043d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043dc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr
 80043e8:	20000618 	.word	0x20000618
 80043ec:	40022000 	.word	0x40022000

080043f0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <FLASH_PageErase+0x38>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <FLASH_PageErase+0x3c>)
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	4a0a      	ldr	r2, [pc, #40]	; (800442c <FLASH_PageErase+0x3c>)
 8004404:	f043 0302 	orr.w	r3, r3, #2
 8004408:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800440a:	4a08      	ldr	r2, [pc, #32]	; (800442c <FLASH_PageErase+0x3c>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <FLASH_PageErase+0x3c>)
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	4a05      	ldr	r2, [pc, #20]	; (800442c <FLASH_PageErase+0x3c>)
 8004416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800441a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000618 	.word	0x20000618
 800442c:	40022000 	.word	0x40022000

08004430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004430:	b480      	push	{r7}
 8004432:	b08b      	sub	sp, #44	; 0x2c
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800443e:	2300      	movs	r3, #0
 8004440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004442:	e169      	b.n	8004718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004444:	2201      	movs	r2, #1
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	429a      	cmp	r2, r3
 800445e:	f040 8158 	bne.w	8004712 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4a9a      	ldr	r2, [pc, #616]	; (80046d0 <HAL_GPIO_Init+0x2a0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d05e      	beq.n	800452a <HAL_GPIO_Init+0xfa>
 800446c:	4a98      	ldr	r2, [pc, #608]	; (80046d0 <HAL_GPIO_Init+0x2a0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d875      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 8004472:	4a98      	ldr	r2, [pc, #608]	; (80046d4 <HAL_GPIO_Init+0x2a4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d058      	beq.n	800452a <HAL_GPIO_Init+0xfa>
 8004478:	4a96      	ldr	r2, [pc, #600]	; (80046d4 <HAL_GPIO_Init+0x2a4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d86f      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 800447e:	4a96      	ldr	r2, [pc, #600]	; (80046d8 <HAL_GPIO_Init+0x2a8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d052      	beq.n	800452a <HAL_GPIO_Init+0xfa>
 8004484:	4a94      	ldr	r2, [pc, #592]	; (80046d8 <HAL_GPIO_Init+0x2a8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d869      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 800448a:	4a94      	ldr	r2, [pc, #592]	; (80046dc <HAL_GPIO_Init+0x2ac>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d04c      	beq.n	800452a <HAL_GPIO_Init+0xfa>
 8004490:	4a92      	ldr	r2, [pc, #584]	; (80046dc <HAL_GPIO_Init+0x2ac>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d863      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 8004496:	4a92      	ldr	r2, [pc, #584]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d046      	beq.n	800452a <HAL_GPIO_Init+0xfa>
 800449c:	4a90      	ldr	r2, [pc, #576]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d85d      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 80044a2:	2b12      	cmp	r3, #18
 80044a4:	d82a      	bhi.n	80044fc <HAL_GPIO_Init+0xcc>
 80044a6:	2b12      	cmp	r3, #18
 80044a8:	d859      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <HAL_GPIO_Init+0x80>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	0800452b 	.word	0x0800452b
 80044b4:	08004505 	.word	0x08004505
 80044b8:	08004517 	.word	0x08004517
 80044bc:	08004559 	.word	0x08004559
 80044c0:	0800455f 	.word	0x0800455f
 80044c4:	0800455f 	.word	0x0800455f
 80044c8:	0800455f 	.word	0x0800455f
 80044cc:	0800455f 	.word	0x0800455f
 80044d0:	0800455f 	.word	0x0800455f
 80044d4:	0800455f 	.word	0x0800455f
 80044d8:	0800455f 	.word	0x0800455f
 80044dc:	0800455f 	.word	0x0800455f
 80044e0:	0800455f 	.word	0x0800455f
 80044e4:	0800455f 	.word	0x0800455f
 80044e8:	0800455f 	.word	0x0800455f
 80044ec:	0800455f 	.word	0x0800455f
 80044f0:	0800455f 	.word	0x0800455f
 80044f4:	0800450d 	.word	0x0800450d
 80044f8:	08004521 	.word	0x08004521
 80044fc:	4a79      	ldr	r2, [pc, #484]	; (80046e4 <HAL_GPIO_Init+0x2b4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004502:	e02c      	b.n	800455e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	623b      	str	r3, [r7, #32]
          break;
 800450a:	e029      	b.n	8004560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	3304      	adds	r3, #4
 8004512:	623b      	str	r3, [r7, #32]
          break;
 8004514:	e024      	b.n	8004560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	3308      	adds	r3, #8
 800451c:	623b      	str	r3, [r7, #32]
          break;
 800451e:	e01f      	b.n	8004560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	330c      	adds	r3, #12
 8004526:	623b      	str	r3, [r7, #32]
          break;
 8004528:	e01a      	b.n	8004560 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004532:	2304      	movs	r3, #4
 8004534:	623b      	str	r3, [r7, #32]
          break;
 8004536:	e013      	b.n	8004560 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004540:	2308      	movs	r3, #8
 8004542:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	611a      	str	r2, [r3, #16]
          break;
 800454a:	e009      	b.n	8004560 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800454c:	2308      	movs	r3, #8
 800454e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	615a      	str	r2, [r3, #20]
          break;
 8004556:	e003      	b.n	8004560 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004558:	2300      	movs	r3, #0
 800455a:	623b      	str	r3, [r7, #32]
          break;
 800455c:	e000      	b.n	8004560 <HAL_GPIO_Init+0x130>
          break;
 800455e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2bff      	cmp	r3, #255	; 0xff
 8004564:	d801      	bhi.n	800456a <HAL_GPIO_Init+0x13a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	e001      	b.n	800456e <HAL_GPIO_Init+0x13e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2bff      	cmp	r3, #255	; 0xff
 8004574:	d802      	bhi.n	800457c <HAL_GPIO_Init+0x14c>
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	e002      	b.n	8004582 <HAL_GPIO_Init+0x152>
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	3b08      	subs	r3, #8
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	210f      	movs	r1, #15
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	401a      	ands	r2, r3
 8004594:	6a39      	ldr	r1, [r7, #32]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80b1 	beq.w	8004712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045b0:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <HAL_GPIO_Init+0x2b8>)
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	4a4c      	ldr	r2, [pc, #304]	; (80046e8 <HAL_GPIO_Init+0x2b8>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6193      	str	r3, [r2, #24]
 80045bc:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <HAL_GPIO_Init+0x2b8>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045c8:	4a48      	ldr	r2, [pc, #288]	; (80046ec <HAL_GPIO_Init+0x2bc>)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	089b      	lsrs	r3, r3, #2
 80045ce:	3302      	adds	r3, #2
 80045d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	220f      	movs	r2, #15
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4013      	ands	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a40      	ldr	r2, [pc, #256]	; (80046f0 <HAL_GPIO_Init+0x2c0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d013      	beq.n	800461c <HAL_GPIO_Init+0x1ec>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a3f      	ldr	r2, [pc, #252]	; (80046f4 <HAL_GPIO_Init+0x2c4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00d      	beq.n	8004618 <HAL_GPIO_Init+0x1e8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a3e      	ldr	r2, [pc, #248]	; (80046f8 <HAL_GPIO_Init+0x2c8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <HAL_GPIO_Init+0x1e4>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a3d      	ldr	r2, [pc, #244]	; (80046fc <HAL_GPIO_Init+0x2cc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d101      	bne.n	8004610 <HAL_GPIO_Init+0x1e0>
 800460c:	2303      	movs	r3, #3
 800460e:	e006      	b.n	800461e <HAL_GPIO_Init+0x1ee>
 8004610:	2304      	movs	r3, #4
 8004612:	e004      	b.n	800461e <HAL_GPIO_Init+0x1ee>
 8004614:	2302      	movs	r3, #2
 8004616:	e002      	b.n	800461e <HAL_GPIO_Init+0x1ee>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_GPIO_Init+0x1ee>
 800461c:	2300      	movs	r3, #0
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	f002 0203 	and.w	r2, r2, #3
 8004624:	0092      	lsls	r2, r2, #2
 8004626:	4093      	lsls	r3, r2
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800462e:	492f      	ldr	r1, [pc, #188]	; (80046ec <HAL_GPIO_Init+0x2bc>)
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	3302      	adds	r3, #2
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004648:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	492c      	ldr	r1, [pc, #176]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]
 8004654:	e006      	b.n	8004664 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004656:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	43db      	mvns	r3, r3
 800465e:	4928      	ldr	r1, [pc, #160]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004660:	4013      	ands	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d006      	beq.n	800467e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004670:	4b23      	ldr	r3, [pc, #140]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	4922      	ldr	r1, [pc, #136]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	e006      	b.n	800468c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	43db      	mvns	r3, r3
 8004686:	491e      	ldr	r1, [pc, #120]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004688:	4013      	ands	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	4918      	ldr	r1, [pc, #96]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
 80046a4:	e006      	b.n	80046b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046a6:	4b16      	ldr	r3, [pc, #88]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	4914      	ldr	r1, [pc, #80]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d021      	beq.n	8004704 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	490e      	ldr	r1, [pc, #56]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60cb      	str	r3, [r1, #12]
 80046cc:	e021      	b.n	8004712 <HAL_GPIO_Init+0x2e2>
 80046ce:	bf00      	nop
 80046d0:	10320000 	.word	0x10320000
 80046d4:	10310000 	.word	0x10310000
 80046d8:	10220000 	.word	0x10220000
 80046dc:	10210000 	.word	0x10210000
 80046e0:	10120000 	.word	0x10120000
 80046e4:	10110000 	.word	0x10110000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40010800 	.word	0x40010800
 80046f4:	40010c00 	.word	0x40010c00
 80046f8:	40011000 	.word	0x40011000
 80046fc:	40011400 	.word	0x40011400
 8004700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_GPIO_Init+0x304>)
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	43db      	mvns	r3, r3
 800470c:	4909      	ldr	r1, [pc, #36]	; (8004734 <HAL_GPIO_Init+0x304>)
 800470e:	4013      	ands	r3, r2
 8004710:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	3301      	adds	r3, #1
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	fa22 f303 	lsr.w	r3, r2, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	f47f ae8e 	bne.w	8004444 <HAL_GPIO_Init+0x14>
  }
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	372c      	adds	r7, #44	; 0x2c
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	40010400 	.word	0x40010400

08004738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	887b      	ldrh	r3, [r7, #2]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
 8004754:	e001      	b.n	800475a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	807b      	strh	r3, [r7, #2]
 8004772:	4613      	mov	r3, r2
 8004774:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004776:	787b      	ldrb	r3, [r7, #1]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800477c:	887a      	ldrh	r2, [r7, #2]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004782:	e003      	b.n	800478c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004784:	887b      	ldrh	r3, [r7, #2]
 8004786:	041a      	lsls	r2, r3, #16
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	611a      	str	r2, [r3, #16]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
	...

08004798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d006      	beq.n	80047bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047ae:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd fd24 	bl	8002204 <HAL_GPIO_EXTI_Callback>
  }
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40010400 	.word	0x40010400

080047c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ca:	b08b      	sub	sp, #44	; 0x2c
 80047cc:	af06      	add	r7, sp, #24
 80047ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e0fd      	b.n	80049d6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f007 fd44 	bl	800c27c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2203      	movs	r2, #3
 80047f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f003 fa2d 	bl	8007c60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	687e      	ldr	r6, [r7, #4]
 800480e:	466d      	mov	r5, sp
 8004810:	f106 0410 	add.w	r4, r6, #16
 8004814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	1d33      	adds	r3, r6, #4
 800481e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004820:	6838      	ldr	r0, [r7, #0]
 8004822:	f003 f9f7 	bl	8007c14 <USB_CoreInit>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0ce      	b.n	80049d6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f003 fa28 	bl	8007c94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004844:	2300      	movs	r3, #0
 8004846:	73fb      	strb	r3, [r7, #15]
 8004848:	e04c      	b.n	80048e4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	440b      	add	r3, r1
 800485a:	3301      	adds	r3, #1
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	440b      	add	r3, r1
 8004870:	7bfa      	ldrb	r2, [r7, #15]
 8004872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004874:	7bfa      	ldrb	r2, [r7, #15]
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	b298      	uxth	r0, r3
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	440b      	add	r3, r1
 8004886:	3336      	adds	r3, #54	; 0x36
 8004888:	4602      	mov	r2, r0
 800488a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	440b      	add	r3, r1
 800489c:	3303      	adds	r3, #3
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048a2:	7bfa      	ldrb	r2, [r7, #15]
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	440b      	add	r3, r1
 80048b0:	3338      	adds	r3, #56	; 0x38
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	440b      	add	r3, r1
 80048c4:	333c      	adds	r3, #60	; 0x3c
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048ca:	7bfa      	ldrb	r2, [r7, #15]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	440b      	add	r3, r1
 80048d8:	3340      	adds	r3, #64	; 0x40
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	3301      	adds	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	7bfa      	ldrb	r2, [r7, #15]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d3ad      	bcc.n	800484a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ee:	2300      	movs	r3, #0
 80048f0:	73fb      	strb	r3, [r7, #15]
 80048f2:	e044      	b.n	800497e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	440b      	add	r3, r1
 8004902:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800490a:	7bfa      	ldrb	r2, [r7, #15]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	440b      	add	r3, r1
 8004918:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800491c:	7bfa      	ldrb	r2, [r7, #15]
 800491e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004920:	7bfa      	ldrb	r2, [r7, #15]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	440b      	add	r3, r1
 800492e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004936:	7bfa      	ldrb	r2, [r7, #15]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	440b      	add	r3, r1
 8004944:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800494c:	7bfa      	ldrb	r2, [r7, #15]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	440b      	add	r3, r1
 800495a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	440b      	add	r3, r1
 8004970:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	3301      	adds	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d3b5      	bcc.n	80048f4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	687e      	ldr	r6, [r7, #4]
 8004990:	466d      	mov	r5, sp
 8004992:	f106 0410 	add.w	r4, r6, #16
 8004996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	602b      	str	r3, [r5, #0]
 800499e:	1d33      	adds	r3, r6, #4
 80049a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049a2:	6838      	ldr	r0, [r7, #0]
 80049a4:	f003 f982 	bl	8007cac <USB_DevInit>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e00d      	b.n	80049d6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f005 fe34 	bl	800a63c <USB_DevDisconnect>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_PCD_Start+0x16>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e016      	b.n	8004a22 <HAL_PCD_Start+0x44>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f003 f917 	bl	8007c34 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004a06:	2101      	movs	r1, #1
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f007 feaa 	bl	800c762 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f005 fe08 	bl	800a628 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b088      	sub	sp, #32
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f005 fe0a 	bl	800a650 <USB_ReadInterrupts>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a46:	d102      	bne.n	8004a4e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fb5f 	bl	800510c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f005 fdfc 	bl	800a650 <USB_ReadInterrupts>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a62:	d112      	bne.n	8004a8a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a76:	b292      	uxth	r2, r2
 8004a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f007 fc78 	bl	800c372 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004a82:	2100      	movs	r1, #0
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f923 	bl	8004cd0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f005 fdde 	bl	800a650 <USB_ReadInterrupts>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ab2:	b292      	uxth	r2, r2
 8004ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f005 fdc7 	bl	800a650 <USB_ReadInterrupts>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004acc:	d10b      	bne.n	8004ae6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae0:	b292      	uxth	r2, r2
 8004ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f005 fdb0 	bl	800a650 <USB_ReadInterrupts>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afa:	d126      	bne.n	8004b4a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0204 	bic.w	r2, r2, #4
 8004b0e:	b292      	uxth	r2, r2
 8004b10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0208 	bic.w	r2, r2, #8
 8004b26:	b292      	uxth	r2, r2
 8004b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f007 fc59 	bl	800c3e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b44:	b292      	uxth	r2, r2
 8004b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f005 fd7e 	bl	800a650 <USB_ReadInterrupts>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5e:	f040 8082 	bne.w	8004c66 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004b62:	2300      	movs	r3, #0
 8004b64:	77fb      	strb	r3, [r7, #31]
 8004b66:	e010      	b.n	8004b8a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	7ffb      	ldrb	r3, [r7, #31]
 8004b76:	8812      	ldrh	r2, [r2, #0]
 8004b78:	b292      	uxth	r2, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	3320      	adds	r3, #32
 8004b7e:	443b      	add	r3, r7
 8004b80:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004b84:	7ffb      	ldrb	r3, [r7, #31]
 8004b86:	3301      	adds	r3, #1
 8004b88:	77fb      	strb	r3, [r7, #31]
 8004b8a:	7ffb      	ldrb	r3, [r7, #31]
 8004b8c:	2b07      	cmp	r3, #7
 8004b8e:	d9eb      	bls.n	8004b68 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	b292      	uxth	r2, r2
 8004ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	b292      	uxth	r2, r2
 8004bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004bc0:	bf00      	nop
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f6      	beq.n	8004bc2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	b292      	uxth	r2, r2
 8004be8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e00f      	b.n	8004c12 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004bf2:	7ffb      	ldrb	r3, [r7, #31]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	7ffa      	ldrb	r2, [r7, #31]
 8004bfc:	0092      	lsls	r2, r2, #2
 8004bfe:	440a      	add	r2, r1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	3320      	adds	r3, #32
 8004c04:	443b      	add	r3, r7
 8004c06:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004c0a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004c0c:	7ffb      	ldrb	r3, [r7, #31]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	7ffb      	ldrb	r3, [r7, #31]
 8004c14:	2b07      	cmp	r3, #7
 8004c16:	d9ec      	bls.n	8004bf2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0208 	orr.w	r2, r2, #8
 8004c2a:	b292      	uxth	r2, r2
 8004c2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c42:	b292      	uxth	r2, r2
 8004c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0204 	orr.w	r2, r2, #4
 8004c5a:	b292      	uxth	r2, r2
 8004c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f007 fba5 	bl	800c3b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f005 fcf0 	bl	800a650 <USB_ReadInterrupts>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7a:	d10e      	bne.n	8004c9a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c8e:	b292      	uxth	r2, r2
 8004c90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f007 fb5e 	bl	800c356 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f005 fcd6 	bl	800a650 <USB_ReadInterrupts>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cae:	d10b      	bne.n	8004cc8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004cc8:	bf00      	nop
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_PCD_SetAddress+0x1a>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e013      	b.n	8004d12 <HAL_PCD_SetAddress+0x42>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f005 fc7d 	bl	800a602 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	4608      	mov	r0, r1
 8004d24:	4611      	mov	r1, r2
 8004d26:	461a      	mov	r2, r3
 8004d28:	4603      	mov	r3, r0
 8004d2a:	70fb      	strb	r3, [r7, #3]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	803b      	strh	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	da0e      	bge.n	8004d5e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	705a      	strb	r2, [r3, #1]
 8004d5c:	e00e      	b.n	8004d7c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 0207 	and.w	r2, r3, #7
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4413      	add	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d88:	883a      	ldrh	r2, [r7, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	78ba      	ldrb	r2, [r7, #2]
 8004d92:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004da6:	78bb      	ldrb	r3, [r7, #2]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d102      	bne.n	8004db2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_PCD_EP_Open+0xa6>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e00e      	b.n	8004dde <HAL_PCD_EP_Open+0xc4>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68f9      	ldr	r1, [r7, #12]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f002 ff8c 	bl	8007cec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004ddc:	7afb      	ldrb	r3, [r7, #11]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	da0e      	bge.n	8004e18 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	705a      	strb	r2, [r3, #1]
 8004e16:	e00e      	b.n	8004e36 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	f003 0207 	and.w	r2, r3, #7
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_PCD_EP_Close+0x6a>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e00e      	b.n	8004e6e <HAL_PCD_EP_Close+0x88>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f003 faae 	bl	80083c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b086      	sub	sp, #24
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	460b      	mov	r3, r1
 8004e84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e86:	7afb      	ldrb	r3, [r7, #11]
 8004e88:	f003 0207 	and.w	r2, r3, #7
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eb6:	7afb      	ldrb	r3, [r7, #11]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ec2:	7afb      	ldrb	r3, [r7, #11]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6979      	ldr	r1, [r7, #20]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f003 fc60 	bl	8008798 <USB_EPStartXfer>
 8004ed8:	e005      	b.n	8004ee6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f003 fc59 	bl	8008798 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	f003 0207 	and.w	r2, r3, #7
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	440b      	add	r3, r1
 8004f0e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bc80      	pop	{r7}
 8004f1c:	4770      	bx	lr

08004f1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2200      	movs	r2, #0
 8004f62:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2201      	movs	r2, #1
 8004f68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f6a:	7afb      	ldrb	r3, [r7, #11]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f76:	7afb      	ldrb	r3, [r7, #11]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6979      	ldr	r1, [r7, #20]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f003 fc06 	bl	8008798 <USB_EPStartXfer>
 8004f8c:	e005      	b.n	8004f9a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6979      	ldr	r1, [r7, #20]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f003 fbff 	bl	8008798 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	f003 0207 	and.w	r2, r3, #7
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d901      	bls.n	8004fc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e04c      	b.n	800505c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da0e      	bge.n	8004fe8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	705a      	strb	r2, [r3, #1]
 8004fe6:	e00c      	b.n	8005002 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fe8:	78fa      	ldrb	r2, [r7, #3]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	b2da      	uxtb	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_PCD_EP_SetStall+0x7e>
 800501e:	2302      	movs	r3, #2
 8005020:	e01c      	b.n	800505c <HAL_PCD_EP_SetStall+0xb8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	4618      	mov	r0, r3
 8005032:	f005 f9e9 	bl	800a408 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	2b00      	cmp	r3, #0
 800503e:	d108      	bne.n	8005052 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f005 fb0e 	bl	800a66e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	f003 020f 	and.w	r2, r3, #15
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	429a      	cmp	r2, r3
 800507c:	d901      	bls.n	8005082 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e040      	b.n	8005104 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005086:	2b00      	cmp	r3, #0
 8005088:	da0e      	bge.n	80050a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	705a      	strb	r2, [r3, #1]
 80050a6:	e00e      	b.n	80050c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	f003 0207 	and.w	r2, r3, #7
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_PCD_EP_ClrStall+0x82>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e00e      	b.n	8005104 <HAL_PCD_EP_ClrStall+0xa0>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f005 f9d7 	bl	800a4a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08e      	sub	sp, #56	; 0x38
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005114:	e2ec      	b.n	80056f0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800511e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005120:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800512c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005130:	2b00      	cmp	r3, #0
 8005132:	f040 8161 	bne.w	80053f8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005136:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d152      	bne.n	80051e6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800514c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005150:	81fb      	strh	r3, [r7, #14]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	89fb      	ldrh	r3, [r7, #14]
 8005158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005160:	b29b      	uxth	r3, r3
 8005162:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3328      	adds	r3, #40	; 0x28
 8005168:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4413      	add	r3, r2
 800517e:	3302      	adds	r3, #2
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	441a      	add	r2, r3
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051a4:	2100      	movs	r1, #0
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f007 f8bb 	bl	800c322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 829b 	beq.w	80056f0 <PCD_EP_ISR_Handler+0x5e4>
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 8296 	bne.w	80056f0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	b292      	uxth	r2, r2
 80051d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051e4:	e284      	b.n	80056f0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80051f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d034      	beq.n	800526a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005208:	b29b      	uxth	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	3306      	adds	r3, #6
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800523e:	b29b      	uxth	r3, r3
 8005240:	f005 fa65 	bl	800a70e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29a      	uxth	r2, r3
 800524c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005250:	4013      	ands	r3, r2
 8005252:	823b      	strh	r3, [r7, #16]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	8a3a      	ldrh	r2, [r7, #16]
 800525a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800525e:	b292      	uxth	r2, r2
 8005260:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f007 f830 	bl	800c2c8 <HAL_PCD_SetupStageCallback>
 8005268:	e242      	b.n	80056f0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800526a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800526e:	2b00      	cmp	r3, #0
 8005270:	f280 823e 	bge.w	80056f0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29a      	uxth	r2, r3
 800527c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005280:	4013      	ands	r3, r2
 8005282:	83bb      	strh	r3, [r7, #28]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	8bba      	ldrh	r2, [r7, #28]
 800528a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800528e:	b292      	uxth	r2, r2
 8005290:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	3306      	adds	r3, #6
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d019      	beq.n	80052fa <PCD_EP_ISR_Handler+0x1ee>
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d015      	beq.n	80052fa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	6959      	ldr	r1, [r3, #20]
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f005 fa15 	bl	800a70e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	441a      	add	r2, r3
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80052f2:	2100      	movs	r1, #0
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f006 fff9 	bl	800c2ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005306:	2b00      	cmp	r3, #0
 8005308:	f040 81f2 	bne.w	80056f0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531a:	b29b      	uxth	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	4413      	add	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d112      	bne.n	800535a <PCD_EP_ISR_Handler+0x24e>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800533e:	b29a      	uxth	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005352:	b29a      	uxth	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	e02f      	b.n	80053ba <PCD_EP_ISR_Handler+0x2ae>
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b3e      	cmp	r3, #62	; 0x3e
 8005360:	d813      	bhi.n	800538a <PCD_EP_ISR_Handler+0x27e>
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	633b      	str	r3, [r7, #48]	; 0x30
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <PCD_EP_ISR_Handler+0x270>
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	3301      	adds	r3, #1
 800537a:	633b      	str	r3, [r7, #48]	; 0x30
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	b29b      	uxth	r3, r3
 8005380:	029b      	lsls	r3, r3, #10
 8005382:	b29a      	uxth	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	801a      	strh	r2, [r3, #0]
 8005388:	e017      	b.n	80053ba <PCD_EP_ISR_Handler+0x2ae>
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	633b      	str	r3, [r7, #48]	; 0x30
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <PCD_EP_ISR_Handler+0x298>
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	3b01      	subs	r3, #1
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	827b      	strh	r3, [r7, #18]
 80053cc:	8a7b      	ldrh	r3, [r7, #18]
 80053ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053d2:	827b      	strh	r3, [r7, #18]
 80053d4:	8a7b      	ldrh	r3, [r7, #18]
 80053d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053da:	827b      	strh	r3, [r7, #18]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	8a7b      	ldrh	r3, [r7, #18]
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]
 80053f6:	e17b      	b.n	80056f0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800540a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800540e:	2b00      	cmp	r3, #0
 8005410:	f280 80ea 	bge.w	80055e8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29a      	uxth	r2, r3
 8005426:	f640 738f 	movw	r3, #3983	; 0xf8f
 800542a:	4013      	ands	r3, r2
 800542c:	853b      	strh	r3, [r7, #40]	; 0x28
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800543e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005442:	b292      	uxth	r2, r2
 8005444:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005446:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4413      	add	r3, r2
 800545a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	7b1b      	ldrb	r3, [r3, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d122      	bne.n	80054aa <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546c:	b29b      	uxth	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4413      	add	r3, r2
 8005478:	3306      	adds	r3, #6
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800548c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800548e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8087 	beq.w	80055a4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	6959      	ldr	r1, [r3, #20]
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	88da      	ldrh	r2, [r3, #6]
 80054a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054a4:	f005 f933 	bl	800a70e <USB_ReadPMA>
 80054a8:	e07c      	b.n	80055a4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	78db      	ldrb	r3, [r3, #3]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d108      	bne.n	80054c4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054b4:	461a      	mov	r2, r3
 80054b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f927 	bl	800570c <HAL_PCD_EP_DB_Receive>
 80054be:	4603      	mov	r3, r0
 80054c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054c2:	e06f      	b.n	80055a4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054de:	847b      	strh	r3, [r7, #34]	; 0x22
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d021      	beq.n	8005562 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005526:	b29b      	uxth	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4413      	add	r3, r2
 8005532:	3302      	adds	r3, #2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005546:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005548:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800554a:	2b00      	cmp	r3, #0
 800554c:	d02a      	beq.n	80055a4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	6959      	ldr	r1, [r3, #20]
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	891a      	ldrh	r2, [r3, #8]
 800555a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800555c:	f005 f8d7 	bl	800a70e <USB_ReadPMA>
 8005560:	e020      	b.n	80055a4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556a:	b29b      	uxth	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4413      	add	r3, r2
 8005576:	3306      	adds	r3, #6
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800558a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800558c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800558e:	2b00      	cmp	r3, #0
 8005590:	d008      	beq.n	80055a4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	6959      	ldr	r1, [r3, #20]
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	895a      	ldrh	r2, [r3, #10]
 800559e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055a0:	f005 f8b5 	bl	800a70e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055aa:	441a      	add	r2, r3
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	695a      	ldr	r2, [r3, #20]
 80055b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055b6:	441a      	add	r2, r3
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <PCD_EP_ISR_Handler+0x4c2>
 80055c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d206      	bcs.n	80055dc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f006 fe89 	bl	800c2ec <HAL_PCD_DataOutStageCallback>
 80055da:	e005      	b.n	80055e8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055e2:	4618      	mov	r0, r3
 80055e4:	f003 f8d8 	bl	8008798 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80055e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d07e      	beq.n	80056f0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80055f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	4413      	add	r3, r2
 8005604:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005620:	843b      	strh	r3, [r7, #32]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	441a      	add	r2, r3
 8005630:	8c3b      	ldrh	r3, [r7, #32]
 8005632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563a:	b29b      	uxth	r3, r3
 800563c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	78db      	ldrb	r3, [r3, #3]
 8005642:	2b03      	cmp	r3, #3
 8005644:	d00c      	beq.n	8005660 <PCD_EP_ISR_Handler+0x554>
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	78db      	ldrb	r3, [r3, #3]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005652:	2b02      	cmp	r3, #2
 8005654:	d146      	bne.n	80056e4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d141      	bne.n	80056e4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005668:	b29b      	uxth	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4413      	add	r3, r2
 8005674:	3302      	adds	r3, #2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005688:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	8bfb      	ldrh	r3, [r7, #30]
 8005690:	429a      	cmp	r2, r3
 8005692:	d906      	bls.n	80056a2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	699a      	ldr	r2, [r3, #24]
 8005698:	8bfb      	ldrh	r3, [r7, #30]
 800569a:	1ad2      	subs	r2, r2, r3
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	619a      	str	r2, [r3, #24]
 80056a0:	e002      	b.n	80056a8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	2200      	movs	r2, #0
 80056a6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f006 fe33 	bl	800c322 <HAL_PCD_DataInStageCallback>
 80056bc:	e018      	b.n	80056f0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	8bfb      	ldrh	r3, [r7, #30]
 80056c4:	441a      	add	r2, r3
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	8bfb      	ldrh	r3, [r7, #30]
 80056d0:	441a      	add	r2, r3
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056dc:	4618      	mov	r0, r3
 80056de:	f003 f85b 	bl	8008798 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80056e2:	e005      	b.n	80056f0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80056e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056e6:	461a      	mov	r2, r3
 80056e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f91b 	bl	8005926 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	b21b      	sxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f6ff ad0a 	blt.w	8005116 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3738      	adds	r7, #56	; 0x38
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d07e      	beq.n	8005822 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572c:	b29b      	uxth	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	3302      	adds	r3, #2
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800574c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	8b7b      	ldrh	r3, [r7, #26]
 8005754:	429a      	cmp	r2, r3
 8005756:	d306      	bcc.n	8005766 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	699a      	ldr	r2, [r3, #24]
 800575c:	8b7b      	ldrh	r3, [r7, #26]
 800575e:	1ad2      	subs	r2, r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	619a      	str	r2, [r3, #24]
 8005764:	e002      	b.n	800576c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2200      	movs	r2, #0
 800576a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d123      	bne.n	80057bc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800578a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578e:	833b      	strh	r3, [r7, #24]
 8005790:	8b3b      	ldrh	r3, [r7, #24]
 8005792:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005796:	833b      	strh	r3, [r7, #24]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	8b3b      	ldrh	r3, [r7, #24]
 80057a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057bc:	88fb      	ldrh	r3, [r7, #6]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01f      	beq.n	8005806 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e0:	82fb      	strh	r3, [r7, #22]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	441a      	add	r2, r3
 80057f0:	8afb      	ldrh	r3, [r7, #22]
 80057f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005802:	b29b      	uxth	r3, r3
 8005804:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005806:	8b7b      	ldrh	r3, [r7, #26]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8087 	beq.w	800591c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6959      	ldr	r1, [r3, #20]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	891a      	ldrh	r2, [r3, #8]
 800581a:	8b7b      	ldrh	r3, [r7, #26]
 800581c:	f004 ff77 	bl	800a70e <USB_ReadPMA>
 8005820:	e07c      	b.n	800591c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582a:	b29b      	uxth	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	4413      	add	r3, r2
 8005836:	3306      	adds	r3, #6
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800584a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	699a      	ldr	r2, [r3, #24]
 8005850:	8b7b      	ldrh	r3, [r7, #26]
 8005852:	429a      	cmp	r2, r3
 8005854:	d306      	bcc.n	8005864 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	8b7b      	ldrh	r3, [r7, #26]
 800585c:	1ad2      	subs	r2, r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	619a      	str	r2, [r3, #24]
 8005862:	e002      	b.n	800586a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2200      	movs	r2, #0
 8005868:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d123      	bne.n	80058ba <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588c:	83fb      	strh	r3, [r7, #30]
 800588e:	8bfb      	ldrh	r3, [r7, #30]
 8005890:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005894:	83fb      	strh	r3, [r7, #30]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	441a      	add	r2, r3
 80058a4:	8bfb      	ldrh	r3, [r7, #30]
 80058a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d11f      	bne.n	8005904 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058de:	83bb      	strh	r3, [r7, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	441a      	add	r2, r3
 80058ee:	8bbb      	ldrh	r3, [r7, #28]
 80058f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005900:	b29b      	uxth	r3, r3
 8005902:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005904:	8b7b      	ldrh	r3, [r7, #26]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6959      	ldr	r1, [r3, #20]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	895a      	ldrh	r2, [r3, #10]
 8005916:	8b7b      	ldrh	r3, [r7, #26]
 8005918:	f004 fef9 	bl	800a70e <USB_ReadPMA>
    }
  }

  return count;
 800591c:	8b7b      	ldrh	r3, [r7, #26]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b0a2      	sub	sp, #136	; 0x88
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	4613      	mov	r3, r2
 8005932:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 81c7 	beq.w	8005cce <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005948:	b29b      	uxth	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	4413      	add	r3, r2
 8005954:	3302      	adds	r3, #2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005968:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005974:	429a      	cmp	r2, r3
 8005976:	d907      	bls.n	8005988 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005980:	1ad2      	subs	r2, r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	619a      	str	r2, [r3, #24]
 8005986:	e002      	b.n	800598e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2200      	movs	r2, #0
 800598c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 80b9 	bne.w	8005b0a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d126      	bne.n	80059ee <HAL_PCD_EP_DB_Transmit+0xc8>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	4413      	add	r3, r2
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	011a      	lsls	r2, r3, #4
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	4413      	add	r3, r2
 80059c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	e01a      	b.n	8005a24 <HAL_PCD_EP_DB_Transmit+0xfe>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d116      	bne.n	8005a24 <HAL_PCD_EP_DB_Transmit+0xfe>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	4413      	add	r3, r2
 8005a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	011a      	lsls	r2, r3, #4
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	4413      	add	r3, r2
 8005a18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	2200      	movs	r2, #0
 8005a22:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d126      	bne.n	8005a80 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	61bb      	str	r3, [r7, #24]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	4413      	add	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	011a      	lsls	r2, r3, #4
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	4413      	add	r3, r2
 8005a54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	e017      	b.n	8005ab0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d113      	bne.n	8005ab0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	4413      	add	r3, r2
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	011a      	lsls	r2, r3, #4
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	2200      	movs	r2, #0
 8005aae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f006 fc33 	bl	800c322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 82d4 	beq.w	8006070 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	827b      	strh	r3, [r7, #18]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	441a      	add	r2, r3
 8005af2:	8a7b      	ldrh	r3, [r7, #18]
 8005af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	8013      	strh	r3, [r2, #0]
 8005b08:	e2b2      	b.n	8006070 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d021      	beq.n	8005b58 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	441a      	add	r2, r3
 8005b40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	f040 8286 	bne.w	8006070 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	695a      	ldr	r2, [r3, #20]
 8005b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b6c:	441a      	add	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b7a:	441a      	add	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6a1a      	ldr	r2, [r3, #32]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d309      	bcc.n	8005ba0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b98:	1ad2      	subs	r2, r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	621a      	str	r2, [r3, #32]
 8005b9e:	e015      	b.n	8005bcc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d107      	bne.n	8005bb8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005ba8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005bb6:	e009      	b.n	8005bcc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d155      	bne.n	8005c80 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	4413      	add	r3, r2
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	011a      	lsls	r2, r3, #4
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d112      	bne.n	8005c28 <HAL_PCD_EP_DB_Transmit+0x302>
 8005c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	e047      	b.n	8005cb8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c2c:	d811      	bhi.n	8005c52 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c30:	085b      	lsrs	r3, r3, #1
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c40:	3301      	adds	r3, #1
 8005c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	029b      	lsls	r3, r3, #10
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	e032      	b.n	8005cb8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5a:	f003 031f 	and.w	r3, r3, #31
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d102      	bne.n	8005c68 <HAL_PCD_EP_DB_Transmit+0x342>
 8005c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c64:	3b01      	subs	r3, #1
 8005c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	029b      	lsls	r3, r3, #10
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	e01b      	b.n	8005cb8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d117      	bne.n	8005cb8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9c:	4413      	add	r3, r2
 8005c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	011a      	lsls	r2, r3, #4
 8005ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca8:	4413      	add	r3, r2
 8005caa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6959      	ldr	r1, [r3, #20]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	891a      	ldrh	r2, [r3, #8]
 8005cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f004 fcdc 	bl	800a684 <USB_WritePMA>
 8005ccc:	e1d0      	b.n	8006070 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3306      	adds	r3, #6
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cf6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d307      	bcc.n	8005d16 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	619a      	str	r2, [r3, #24]
 8005d14:	e002      	b.n	8005d1c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f040 80c4 	bne.w	8005eae <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d126      	bne.n	8005d7c <HAL_PCD_EP_DB_Transmit+0x456>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d42:	4413      	add	r3, r2
 8005d44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	011a      	lsls	r2, r3, #4
 8005d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4e:	4413      	add	r3, r2
 8005d50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e01a      	b.n	8005db2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d116      	bne.n	8005db2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	677b      	str	r3, [r7, #116]	; 0x74
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d98:	4413      	add	r3, r2
 8005d9a:	677b      	str	r3, [r7, #116]	; 0x74
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	011a      	lsls	r2, r3, #4
 8005da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005da4:	4413      	add	r3, r2
 8005da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005daa:	673b      	str	r3, [r7, #112]	; 0x70
 8005dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dae:	2200      	movs	r2, #0
 8005db0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d12f      	bne.n	8005e20 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dd8:	4413      	add	r3, r2
 8005dda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	011a      	lsls	r2, r3, #4
 8005de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005de8:	4413      	add	r3, r2
 8005dea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e017      	b.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d113      	bne.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e36:	4413      	add	r3, r2
 8005e38:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	011a      	lsls	r2, r3, #4
 8005e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e42:	4413      	add	r3, r2
 8005e44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	4619      	mov	r1, r3
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f006 fa63 	bl	800c322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e5c:	88fb      	ldrh	r3, [r7, #6]
 8005e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f040 8104 	bne.w	8006070 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	441a      	add	r2, r3
 8005e94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	8013      	strh	r3, [r2, #0]
 8005eac:	e0e0      	b.n	8006070 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d121      	bne.n	8005efc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	441a      	add	r2, r3
 8005ee4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	f040 80b4 	bne.w	8006070 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	695a      	ldr	r2, [r3, #20]
 8005f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f10:	441a      	add	r2, r3
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	69da      	ldr	r2, [r3, #28]
 8005f1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f1e:	441a      	add	r2, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d309      	bcc.n	8005f44 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f3c:	1ad2      	subs	r2, r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	621a      	str	r2, [r3, #32]
 8005f42:	e015      	b.n	8005f70 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d107      	bne.n	8005f5c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005f4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f5a:	e009      	b.n	8005f70 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2200      	movs	r2, #0
 8005f66:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	667b      	str	r3, [r7, #100]	; 0x64
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d155      	bne.n	800602a <HAL_PCD_EP_DB_Transmit+0x704>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f92:	4413      	add	r3, r2
 8005f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	011a      	lsls	r2, r3, #4
 8005f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d112      	bne.n	8005fd2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	e044      	b.n	800605c <HAL_PCD_EP_DB_Transmit+0x736>
 8005fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fd6:	d811      	bhi.n	8005ffc <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	657b      	str	r3, [r7, #84]	; 0x54
 8005fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fea:	3301      	adds	r3, #1
 8005fec:	657b      	str	r3, [r7, #84]	; 0x54
 8005fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	029b      	lsls	r3, r3, #10
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ff8:	801a      	strh	r2, [r3, #0]
 8005ffa:	e02f      	b.n	800605c <HAL_PCD_EP_DB_Transmit+0x736>
 8005ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	657b      	str	r3, [r7, #84]	; 0x54
 8006002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	2b00      	cmp	r3, #0
 800600a:	d102      	bne.n	8006012 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800600c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600e:	3b01      	subs	r3, #1
 8006010:	657b      	str	r3, [r7, #84]	; 0x54
 8006012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006014:	b29b      	uxth	r3, r3
 8006016:	029b      	lsls	r3, r3, #10
 8006018:	b29b      	uxth	r3, r3
 800601a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006022:	b29a      	uxth	r2, r3
 8006024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	e018      	b.n	800605c <HAL_PCD_EP_DB_Transmit+0x736>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d114      	bne.n	800605c <HAL_PCD_EP_DB_Transmit+0x736>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006040:	4413      	add	r3, r2
 8006042:	667b      	str	r3, [r7, #100]	; 0x64
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	011a      	lsls	r2, r3, #4
 800604a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800604c:	4413      	add	r3, r2
 800604e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006052:	663b      	str	r3, [r7, #96]	; 0x60
 8006054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006056:	b29a      	uxth	r2, r3
 8006058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800605a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	6959      	ldr	r1, [r3, #20]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	895a      	ldrh	r2, [r3, #10]
 8006068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606a:	b29b      	uxth	r3, r3
 800606c:	f004 fb0a 	bl	800a684 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b29b      	uxth	r3, r3
 8006082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800608a:	823b      	strh	r3, [r7, #16]
 800608c:	8a3b      	ldrh	r3, [r7, #16]
 800608e:	f083 0310 	eor.w	r3, r3, #16
 8006092:	823b      	strh	r3, [r7, #16]
 8006094:	8a3b      	ldrh	r3, [r7, #16]
 8006096:	f083 0320 	eor.w	r3, r3, #32
 800609a:	823b      	strh	r3, [r7, #16]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	8a3b      	ldrh	r3, [r7, #16]
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3788      	adds	r7, #136	; 0x88
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b087      	sub	sp, #28
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	817b      	strh	r3, [r7, #10]
 80060d8:	4613      	mov	r3, r2
 80060da:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80060dc:	897b      	ldrh	r3, [r7, #10]
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00b      	beq.n	8006100 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060e8:	897b      	ldrh	r3, [r7, #10]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e009      	b.n	8006114 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006100:	897a      	ldrh	r2, [r7, #10]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4413      	add	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006114:	893b      	ldrh	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2200      	movs	r2, #0
 800611e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	b29a      	uxth	r2, r3
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	80da      	strh	r2, [r3, #6]
 8006128:	e00b      	b.n	8006142 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2201      	movs	r2, #1
 800612e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	b29a      	uxth	r2, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	0c1b      	lsrs	r3, r3, #16
 800613c:	b29a      	uxth	r2, r3
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr
	...

08006150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e272      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 8087 	beq.w	800627e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006170:	4b92      	ldr	r3, [pc, #584]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f003 030c 	and.w	r3, r3, #12
 8006178:	2b04      	cmp	r3, #4
 800617a:	d00c      	beq.n	8006196 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800617c:	4b8f      	ldr	r3, [pc, #572]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f003 030c 	and.w	r3, r3, #12
 8006184:	2b08      	cmp	r3, #8
 8006186:	d112      	bne.n	80061ae <HAL_RCC_OscConfig+0x5e>
 8006188:	4b8c      	ldr	r3, [pc, #560]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006194:	d10b      	bne.n	80061ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006196:	4b89      	ldr	r3, [pc, #548]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d06c      	beq.n	800627c <HAL_RCC_OscConfig+0x12c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d168      	bne.n	800627c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e24c      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b6:	d106      	bne.n	80061c6 <HAL_RCC_OscConfig+0x76>
 80061b8:	4b80      	ldr	r3, [pc, #512]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a7f      	ldr	r2, [pc, #508]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80061be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	e02e      	b.n	8006224 <HAL_RCC_OscConfig+0xd4>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10c      	bne.n	80061e8 <HAL_RCC_OscConfig+0x98>
 80061ce:	4b7b      	ldr	r3, [pc, #492]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a7a      	ldr	r2, [pc, #488]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80061d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	4b78      	ldr	r3, [pc, #480]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a77      	ldr	r2, [pc, #476]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80061e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e01d      	b.n	8006224 <HAL_RCC_OscConfig+0xd4>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061f0:	d10c      	bne.n	800620c <HAL_RCC_OscConfig+0xbc>
 80061f2:	4b72      	ldr	r3, [pc, #456]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a71      	ldr	r2, [pc, #452]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80061f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	4b6f      	ldr	r3, [pc, #444]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a6e      	ldr	r2, [pc, #440]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e00b      	b.n	8006224 <HAL_RCC_OscConfig+0xd4>
 800620c:	4b6b      	ldr	r3, [pc, #428]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a6a      	ldr	r2, [pc, #424]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	4b68      	ldr	r3, [pc, #416]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a67      	ldr	r2, [pc, #412]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 800621e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006222:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d013      	beq.n	8006254 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622c:	f7fd f8ea 	bl	8003404 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006234:	f7fd f8e6 	bl	8003404 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b64      	cmp	r3, #100	; 0x64
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e200      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006246:	4b5d      	ldr	r3, [pc, #372]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0xe4>
 8006252:	e014      	b.n	800627e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006254:	f7fd f8d6 	bl	8003404 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800625c:	f7fd f8d2 	bl	8003404 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	; 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e1ec      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800626e:	4b53      	ldr	r3, [pc, #332]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0x10c>
 800627a:	e000      	b.n	800627e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800627c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d063      	beq.n	8006352 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800628a:	4b4c      	ldr	r3, [pc, #304]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f003 030c 	and.w	r3, r3, #12
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006296:	4b49      	ldr	r3, [pc, #292]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d11c      	bne.n	80062dc <HAL_RCC_OscConfig+0x18c>
 80062a2:	4b46      	ldr	r3, [pc, #280]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d116      	bne.n	80062dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ae:	4b43      	ldr	r3, [pc, #268]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_RCC_OscConfig+0x176>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d001      	beq.n	80062c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e1c0      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c6:	4b3d      	ldr	r3, [pc, #244]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	4939      	ldr	r1, [pc, #228]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062da:	e03a      	b.n	8006352 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062e4:	4b36      	ldr	r3, [pc, #216]	; (80063c0 <HAL_RCC_OscConfig+0x270>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ea:	f7fd f88b 	bl	8003404 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062f2:	f7fd f887 	bl	8003404 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e1a1      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006304:	4b2d      	ldr	r3, [pc, #180]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006310:	4b2a      	ldr	r3, [pc, #168]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	4927      	ldr	r1, [pc, #156]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006320:	4313      	orrs	r3, r2
 8006322:	600b      	str	r3, [r1, #0]
 8006324:	e015      	b.n	8006352 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006326:	4b26      	ldr	r3, [pc, #152]	; (80063c0 <HAL_RCC_OscConfig+0x270>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632c:	f7fd f86a 	bl	8003404 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006334:	f7fd f866 	bl	8003404 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e180      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006346:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d03a      	beq.n	80063d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d019      	beq.n	800639a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006366:	4b17      	ldr	r3, [pc, #92]	; (80063c4 <HAL_RCC_OscConfig+0x274>)
 8006368:	2201      	movs	r2, #1
 800636a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800636c:	f7fd f84a 	bl	8003404 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006374:	f7fd f846 	bl	8003404 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e160      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <HAL_RCC_OscConfig+0x26c>)
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f0      	beq.n	8006374 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006392:	2001      	movs	r0, #1
 8006394:	f000 fac4 	bl	8006920 <RCC_Delay>
 8006398:	e01c      	b.n	80063d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800639a:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <HAL_RCC_OscConfig+0x274>)
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a0:	f7fd f830 	bl	8003404 <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a6:	e00f      	b.n	80063c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063a8:	f7fd f82c 	bl	8003404 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d908      	bls.n	80063c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e146      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
 80063ba:	bf00      	nop
 80063bc:	40021000 	.word	0x40021000
 80063c0:	42420000 	.word	0x42420000
 80063c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063c8:	4b92      	ldr	r3, [pc, #584]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e9      	bne.n	80063a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 80a6 	beq.w	800652e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063e6:	4b8b      	ldr	r3, [pc, #556]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10d      	bne.n	800640e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f2:	4b88      	ldr	r3, [pc, #544]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	4a87      	ldr	r2, [pc, #540]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80063f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063fc:	61d3      	str	r3, [r2, #28]
 80063fe:	4b85      	ldr	r3, [pc, #532]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006406:	60bb      	str	r3, [r7, #8]
 8006408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800640a:	2301      	movs	r3, #1
 800640c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640e:	4b82      	ldr	r3, [pc, #520]	; (8006618 <HAL_RCC_OscConfig+0x4c8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006416:	2b00      	cmp	r3, #0
 8006418:	d118      	bne.n	800644c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800641a:	4b7f      	ldr	r3, [pc, #508]	; (8006618 <HAL_RCC_OscConfig+0x4c8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a7e      	ldr	r2, [pc, #504]	; (8006618 <HAL_RCC_OscConfig+0x4c8>)
 8006420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006426:	f7fc ffed 	bl	8003404 <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800642e:	f7fc ffe9 	bl	8003404 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b64      	cmp	r3, #100	; 0x64
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e103      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006440:	4b75      	ldr	r3, [pc, #468]	; (8006618 <HAL_RCC_OscConfig+0x4c8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0f0      	beq.n	800642e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d106      	bne.n	8006462 <HAL_RCC_OscConfig+0x312>
 8006454:	4b6f      	ldr	r3, [pc, #444]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	4a6e      	ldr	r2, [pc, #440]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 800645a:	f043 0301 	orr.w	r3, r3, #1
 800645e:	6213      	str	r3, [r2, #32]
 8006460:	e02d      	b.n	80064be <HAL_RCC_OscConfig+0x36e>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10c      	bne.n	8006484 <HAL_RCC_OscConfig+0x334>
 800646a:	4b6a      	ldr	r3, [pc, #424]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	4a69      	ldr	r2, [pc, #420]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	6213      	str	r3, [r2, #32]
 8006476:	4b67      	ldr	r3, [pc, #412]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	4a66      	ldr	r2, [pc, #408]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 800647c:	f023 0304 	bic.w	r3, r3, #4
 8006480:	6213      	str	r3, [r2, #32]
 8006482:	e01c      	b.n	80064be <HAL_RCC_OscConfig+0x36e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b05      	cmp	r3, #5
 800648a:	d10c      	bne.n	80064a6 <HAL_RCC_OscConfig+0x356>
 800648c:	4b61      	ldr	r3, [pc, #388]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	4a60      	ldr	r2, [pc, #384]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006492:	f043 0304 	orr.w	r3, r3, #4
 8006496:	6213      	str	r3, [r2, #32]
 8006498:	4b5e      	ldr	r3, [pc, #376]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	4a5d      	ldr	r2, [pc, #372]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 800649e:	f043 0301 	orr.w	r3, r3, #1
 80064a2:	6213      	str	r3, [r2, #32]
 80064a4:	e00b      	b.n	80064be <HAL_RCC_OscConfig+0x36e>
 80064a6:	4b5b      	ldr	r3, [pc, #364]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	4a5a      	ldr	r2, [pc, #360]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	6213      	str	r3, [r2, #32]
 80064b2:	4b58      	ldr	r3, [pc, #352]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	4a57      	ldr	r2, [pc, #348]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80064b8:	f023 0304 	bic.w	r3, r3, #4
 80064bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d015      	beq.n	80064f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064c6:	f7fc ff9d 	bl	8003404 <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064cc:	e00a      	b.n	80064e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ce:	f7fc ff99 	bl	8003404 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064dc:	4293      	cmp	r3, r2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e0b1      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e4:	4b4b      	ldr	r3, [pc, #300]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0ee      	beq.n	80064ce <HAL_RCC_OscConfig+0x37e>
 80064f0:	e014      	b.n	800651c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064f2:	f7fc ff87 	bl	8003404 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f8:	e00a      	b.n	8006510 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064fa:	f7fc ff83 	bl	8003404 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f241 3288 	movw	r2, #5000	; 0x1388
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e09b      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006510:	4b40      	ldr	r3, [pc, #256]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1ee      	bne.n	80064fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800651c:	7dfb      	ldrb	r3, [r7, #23]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d105      	bne.n	800652e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006522:	4b3c      	ldr	r3, [pc, #240]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	4a3b      	ldr	r2, [pc, #236]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800652c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8087 	beq.w	8006646 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006538:	4b36      	ldr	r3, [pc, #216]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f003 030c 	and.w	r3, r3, #12
 8006540:	2b08      	cmp	r3, #8
 8006542:	d061      	beq.n	8006608 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d146      	bne.n	80065da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654c:	4b33      	ldr	r3, [pc, #204]	; (800661c <HAL_RCC_OscConfig+0x4cc>)
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006552:	f7fc ff57 	bl	8003404 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800655a:	f7fc ff53 	bl	8003404 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e06d      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800656c:	4b29      	ldr	r3, [pc, #164]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1f0      	bne.n	800655a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006580:	d108      	bne.n	8006594 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006582:	4b24      	ldr	r3, [pc, #144]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	4921      	ldr	r1, [pc, #132]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006590:	4313      	orrs	r3, r2
 8006592:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006594:	4b1f      	ldr	r3, [pc, #124]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a19      	ldr	r1, [r3, #32]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	430b      	orrs	r3, r1
 80065a6:	491b      	ldr	r1, [pc, #108]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ac:	4b1b      	ldr	r3, [pc, #108]	; (800661c <HAL_RCC_OscConfig+0x4cc>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b2:	f7fc ff27 	bl	8003404 <HAL_GetTick>
 80065b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ba:	f7fc ff23 	bl	8003404 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e03d      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0f0      	beq.n	80065ba <HAL_RCC_OscConfig+0x46a>
 80065d8:	e035      	b.n	8006646 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065da:	4b10      	ldr	r3, [pc, #64]	; (800661c <HAL_RCC_OscConfig+0x4cc>)
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e0:	f7fc ff10 	bl	8003404 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e8:	f7fc ff0c 	bl	8003404 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e026      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065fa:	4b06      	ldr	r3, [pc, #24]	; (8006614 <HAL_RCC_OscConfig+0x4c4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1f0      	bne.n	80065e8 <HAL_RCC_OscConfig+0x498>
 8006606:	e01e      	b.n	8006646 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d107      	bne.n	8006620 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e019      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
 8006614:	40021000 	.word	0x40021000
 8006618:	40007000 	.word	0x40007000
 800661c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <HAL_RCC_OscConfig+0x500>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	429a      	cmp	r2, r3
 8006632:	d106      	bne.n	8006642 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800663e:	429a      	cmp	r2, r3
 8006640:	d001      	beq.n	8006646 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40021000 	.word	0x40021000

08006654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0d0      	b.n	800680a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006668:	4b6a      	ldr	r3, [pc, #424]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d910      	bls.n	8006698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b67      	ldr	r3, [pc, #412]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f023 0207 	bic.w	r2, r3, #7
 800667e:	4965      	ldr	r1, [pc, #404]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	4313      	orrs	r3, r2
 8006684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006686:	4b63      	ldr	r3, [pc, #396]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d001      	beq.n	8006698 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e0b8      	b.n	800680a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d020      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066b0:	4b59      	ldr	r3, [pc, #356]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4a58      	ldr	r2, [pc, #352]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80066b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066c8:	4b53      	ldr	r3, [pc, #332]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	4a52      	ldr	r2, [pc, #328]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80066ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80066d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d4:	4b50      	ldr	r3, [pc, #320]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	494d      	ldr	r1, [pc, #308]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d040      	beq.n	8006774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d107      	bne.n	800670a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066fa:	4b47      	ldr	r3, [pc, #284]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d115      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e07f      	b.n	800680a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d107      	bne.n	8006722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006712:	4b41      	ldr	r3, [pc, #260]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e073      	b.n	800680a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006722:	4b3d      	ldr	r3, [pc, #244]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e06b      	b.n	800680a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006732:	4b39      	ldr	r3, [pc, #228]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f023 0203 	bic.w	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	4936      	ldr	r1, [pc, #216]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 8006740:	4313      	orrs	r3, r2
 8006742:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006744:	f7fc fe5e 	bl	8003404 <HAL_GetTick>
 8006748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674a:	e00a      	b.n	8006762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800674c:	f7fc fe5a 	bl	8003404 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	f241 3288 	movw	r2, #5000	; 0x1388
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e053      	b.n	800680a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006762:	4b2d      	ldr	r3, [pc, #180]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f003 020c 	and.w	r2, r3, #12
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	429a      	cmp	r2, r3
 8006772:	d1eb      	bne.n	800674c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006774:	4b27      	ldr	r3, [pc, #156]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d210      	bcs.n	80067a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006782:	4b24      	ldr	r3, [pc, #144]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f023 0207 	bic.w	r2, r3, #7
 800678a:	4922      	ldr	r1, [pc, #136]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	4313      	orrs	r3, r2
 8006790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006792:	4b20      	ldr	r3, [pc, #128]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d001      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e032      	b.n	800680a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067b0:	4b19      	ldr	r3, [pc, #100]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	4916      	ldr	r1, [pc, #88]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d009      	beq.n	80067e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	490e      	ldr	r1, [pc, #56]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067e2:	f000 f821 	bl	8006828 <HAL_RCC_GetSysClockFreq>
 80067e6:	4602      	mov	r2, r0
 80067e8:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	091b      	lsrs	r3, r3, #4
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	490a      	ldr	r1, [pc, #40]	; (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80067f4:	5ccb      	ldrb	r3, [r1, r3]
 80067f6:	fa22 f303 	lsr.w	r3, r2, r3
 80067fa:	4a09      	ldr	r2, [pc, #36]	; (8006820 <HAL_RCC_ClockConfig+0x1cc>)
 80067fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <HAL_RCC_ClockConfig+0x1d0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f7fc fdbc 	bl	8003380 <HAL_InitTick>

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40022000 	.word	0x40022000
 8006818:	40021000 	.word	0x40021000
 800681c:	0800c904 	.word	0x0800c904
 8006820:	20000000 	.word	0x20000000
 8006824:	20000004 	.word	0x20000004

08006828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006828:	b490      	push	{r4, r7}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800682e:	4b29      	ldr	r3, [pc, #164]	; (80068d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006830:	1d3c      	adds	r4, r7, #4
 8006832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006838:	f240 2301 	movw	r3, #513	; 0x201
 800683c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	2300      	movs	r3, #0
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	2300      	movs	r3, #0
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006852:	4b21      	ldr	r3, [pc, #132]	; (80068d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f003 030c 	and.w	r3, r3, #12
 800685e:	2b04      	cmp	r3, #4
 8006860:	d002      	beq.n	8006868 <HAL_RCC_GetSysClockFreq+0x40>
 8006862:	2b08      	cmp	r3, #8
 8006864:	d003      	beq.n	800686e <HAL_RCC_GetSysClockFreq+0x46>
 8006866:	e02b      	b.n	80068c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006868:	4b1c      	ldr	r3, [pc, #112]	; (80068dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800686a:	623b      	str	r3, [r7, #32]
      break;
 800686c:	e02b      	b.n	80068c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	0c9b      	lsrs	r3, r3, #18
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	3328      	adds	r3, #40	; 0x28
 8006878:	443b      	add	r3, r7
 800687a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800687e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d012      	beq.n	80068b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800688a:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	0c5b      	lsrs	r3, r3, #17
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	3328      	adds	r3, #40	; 0x28
 8006896:	443b      	add	r3, r7
 8006898:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800689c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4a0e      	ldr	r2, [pc, #56]	; (80068dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80068a2:	fb03 f202 	mul.w	r2, r3, r2
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
 80068ae:	e004      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4a0b      	ldr	r2, [pc, #44]	; (80068e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068b4:	fb02 f303 	mul.w	r3, r2, r3
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	623b      	str	r3, [r7, #32]
      break;
 80068be:	e002      	b.n	80068c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80068c2:	623b      	str	r3, [r7, #32]
      break;
 80068c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068c6:	6a3b      	ldr	r3, [r7, #32]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3728      	adds	r7, #40	; 0x28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc90      	pop	{r4, r7}
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	0800c85c 	.word	0x0800c85c
 80068d8:	40021000 	.word	0x40021000
 80068dc:	007a1200 	.word	0x007a1200
 80068e0:	003d0900 	.word	0x003d0900

080068e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068e8:	4b02      	ldr	r3, [pc, #8]	; (80068f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80068ea:	681b      	ldr	r3, [r3, #0]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	20000000 	.word	0x20000000

080068f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068fc:	f7ff fff2 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 8006900:	4602      	mov	r2, r0
 8006902:	4b05      	ldr	r3, [pc, #20]	; (8006918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	0adb      	lsrs	r3, r3, #11
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	4903      	ldr	r1, [pc, #12]	; (800691c <HAL_RCC_GetPCLK2Freq+0x24>)
 800690e:	5ccb      	ldrb	r3, [r1, r3]
 8006910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006914:	4618      	mov	r0, r3
 8006916:	bd80      	pop	{r7, pc}
 8006918:	40021000 	.word	0x40021000
 800691c:	0800c914 	.word	0x0800c914

08006920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <RCC_Delay+0x34>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <RCC_Delay+0x38>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	0a5b      	lsrs	r3, r3, #9
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800693c:	bf00      	nop
  }
  while (Delay --);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	1e5a      	subs	r2, r3, #1
 8006942:	60fa      	str	r2, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f9      	bne.n	800693c <RCC_Delay+0x1c>
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr
 8006954:	20000000 	.word	0x20000000
 8006958:	10624dd3 	.word	0x10624dd3

0800695c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d07d      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006978:	2300      	movs	r3, #0
 800697a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800697c:	4b4f      	ldr	r3, [pc, #316]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10d      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006988:	4b4c      	ldr	r3, [pc, #304]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	4a4b      	ldr	r2, [pc, #300]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800698e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006992:	61d3      	str	r3, [r2, #28]
 8006994:	4b49      	ldr	r3, [pc, #292]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800699c:	60bb      	str	r3, [r7, #8]
 800699e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069a0:	2301      	movs	r3, #1
 80069a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a4:	4b46      	ldr	r3, [pc, #280]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d118      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069b0:	4b43      	ldr	r3, [pc, #268]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a42      	ldr	r2, [pc, #264]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069bc:	f7fc fd22 	bl	8003404 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c2:	e008      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c4:	f7fc fd1e 	bl	8003404 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b64      	cmp	r3, #100	; 0x64
 80069d0:	d901      	bls.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e06d      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d6:	4b3a      	ldr	r3, [pc, #232]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0f0      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069e2:	4b36      	ldr	r3, [pc, #216]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02e      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d027      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a00:	4b2e      	ldr	r3, [pc, #184]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a0a:	4b2e      	ldr	r3, [pc, #184]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a10:	4b2c      	ldr	r3, [pc, #176]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a16:	4a29      	ldr	r2, [pc, #164]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d014      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a26:	f7fc fced 	bl	8003404 <HAL_GetTick>
 8006a2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2c:	e00a      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a2e:	f7fc fce9 	bl	8003404 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e036      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a44:	4b1d      	ldr	r3, [pc, #116]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0ee      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a50:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	4917      	ldr	r1, [pc, #92]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d105      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a68:	4b14      	ldr	r3, [pc, #80]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	4a13      	ldr	r2, [pc, #76]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d008      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a80:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	490b      	ldr	r1, [pc, #44]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d008      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a9e:	4b07      	ldr	r3, [pc, #28]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	4904      	ldr	r1, [pc, #16]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	40007000 	.word	0x40007000
 8006ac4:	42420440 	.word	0x42420440

08006ac8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b08d      	sub	sp, #52	; 0x34
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ad0:	4b58      	ldr	r3, [pc, #352]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006ad2:	f107 040c 	add.w	r4, r7, #12
 8006ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006adc:	f240 2301 	movw	r3, #513	; 0x201
 8006ae0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aea:	2300      	movs	r3, #0
 8006aec:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	2300      	movs	r3, #0
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b10      	cmp	r3, #16
 8006afa:	d00a      	beq.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b10      	cmp	r3, #16
 8006b00:	f200 808e 	bhi.w	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d049      	beq.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d079      	beq.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006b10:	e086      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006b12:	4b49      	ldr	r3, [pc, #292]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006b18:	4b47      	ldr	r3, [pc, #284]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d07f      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	0c9b      	lsrs	r3, r3, #18
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	3330      	adds	r3, #48	; 0x30
 8006b2e:	443b      	add	r3, r7
 8006b30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b34:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d017      	beq.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b40:	4b3d      	ldr	r3, [pc, #244]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	0c5b      	lsrs	r3, r3, #17
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	3330      	adds	r3, #48	; 0x30
 8006b4c:	443b      	add	r3, r7
 8006b4e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00d      	beq.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006b5e:	4a37      	ldr	r2, [pc, #220]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	fb02 f303 	mul.w	r3, r2, r3
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b6e:	e004      	b.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	4a33      	ldr	r2, [pc, #204]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006b74:	fb02 f303 	mul.w	r3, r2, r3
 8006b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006b7a:	4b2f      	ldr	r3, [pc, #188]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b86:	d102      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b8c:	e04a      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	4a2c      	ldr	r2, [pc, #176]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006b94:	fba2 2303 	umull	r2, r3, r2, r3
 8006b98:	085b      	lsrs	r3, r3, #1
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b9c:	e042      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006b9e:	4b26      	ldr	r3, [pc, #152]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bae:	d108      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc0:	e01f      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bcc:	d109      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006bce:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006bda:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be0:	e00f      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bec:	d11c      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006bee:	4b12      	ldr	r3, [pc, #72]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006bfa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c00:	e012      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006c02:	e011      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006c04:	f7ff fe78 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	0b9b      	lsrs	r3, r3, #14
 8006c10:	f003 0303 	and.w	r3, r3, #3
 8006c14:	3301      	adds	r3, #1
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c1e:	e004      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c20:	bf00      	nop
 8006c22:	e002      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c24:	bf00      	nop
 8006c26:	e000      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c28:	bf00      	nop
    }
  }
  return (frequency);
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3734      	adds	r7, #52	; 0x34
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd90      	pop	{r4, r7, pc}
 8006c34:	0800c86c 	.word	0x0800c86c
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	007a1200 	.word	0x007a1200
 8006c40:	003d0900 	.word	0x003d0900
 8006c44:	aaaaaaab 	.word	0xaaaaaaab

08006c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e041      	b.n	8006cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fc fa68 	bl	8003144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f000 fcb0 	bl	80075ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d001      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e03a      	b.n	8006d76 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a18      	ldr	r2, [pc, #96]	; (8006d80 <HAL_TIM_Base_Start_IT+0x98>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <HAL_TIM_Base_Start_IT+0x58>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2a:	d009      	beq.n	8006d40 <HAL_TIM_Base_Start_IT+0x58>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <HAL_TIM_Base_Start_IT+0x58>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <HAL_TIM_Base_Start_IT+0xa0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d111      	bne.n	8006d64 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b06      	cmp	r3, #6
 8006d50:	d010      	beq.n	8006d74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d62:	e007      	b.n	8006d74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800

08006d8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0201 	bic.w	r2, r2, #1
 8006da2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6a1a      	ldr	r2, [r3, #32]
 8006daa:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10f      	bne.n	8006dd4 <HAL_TIM_Base_Stop_IT+0x48>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6a1a      	ldr	r2, [r3, #32]
 8006dba:	f240 4344 	movw	r3, #1092	; 0x444
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d107      	bne.n	8006dd4 <HAL_TIM_Base_Stop_IT+0x48>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bc80      	pop	{r7}
 8006de6:	4770      	bx	lr

08006de8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e041      	b.n	8006e7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f839 	bl	8006e86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4619      	mov	r1, r3
 8006e26:	4610      	mov	r0, r2
 8006e28:	f000 fbe0 	bl	80075ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <HAL_TIM_PWM_Start+0x24>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	e022      	b.n	8006f02 <HAL_TIM_PWM_Start+0x6a>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d109      	bne.n	8006ed6 <HAL_TIM_PWM_Start+0x3e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	bf14      	ite	ne
 8006ece:	2301      	movne	r3, #1
 8006ed0:	2300      	moveq	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	e015      	b.n	8006f02 <HAL_TIM_PWM_Start+0x6a>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d109      	bne.n	8006ef0 <HAL_TIM_PWM_Start+0x58>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	bf14      	ite	ne
 8006ee8:	2301      	movne	r3, #1
 8006eea:	2300      	moveq	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	e008      	b.n	8006f02 <HAL_TIM_PWM_Start+0x6a>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	bf14      	ite	ne
 8006efc:	2301      	movne	r3, #1
 8006efe:	2300      	moveq	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e05e      	b.n	8006fc8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d104      	bne.n	8006f1a <HAL_TIM_PWM_Start+0x82>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f18:	e013      	b.n	8006f42 <HAL_TIM_PWM_Start+0xaa>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d104      	bne.n	8006f2a <HAL_TIM_PWM_Start+0x92>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f28:	e00b      	b.n	8006f42 <HAL_TIM_PWM_Start+0xaa>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	d104      	bne.n	8006f3a <HAL_TIM_PWM_Start+0xa2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f38:	e003      	b.n	8006f42 <HAL_TIM_PWM_Start+0xaa>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2201      	movs	r2, #1
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fdce 	bl	8007aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a1e      	ldr	r2, [pc, #120]	; (8006fd0 <HAL_TIM_PWM_Start+0x138>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d107      	bne.n	8006f6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a18      	ldr	r2, [pc, #96]	; (8006fd0 <HAL_TIM_PWM_Start+0x138>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00e      	beq.n	8006f92 <HAL_TIM_PWM_Start+0xfa>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7c:	d009      	beq.n	8006f92 <HAL_TIM_PWM_Start+0xfa>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a14      	ldr	r2, [pc, #80]	; (8006fd4 <HAL_TIM_PWM_Start+0x13c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d004      	beq.n	8006f92 <HAL_TIM_PWM_Start+0xfa>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a12      	ldr	r2, [pc, #72]	; (8006fd8 <HAL_TIM_PWM_Start+0x140>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d111      	bne.n	8006fb6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b06      	cmp	r3, #6
 8006fa2:	d010      	beq.n	8006fc6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb4:	e007      	b.n	8006fc6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f042 0201 	orr.w	r2, r2, #1
 8006fc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	40000800 	.word	0x40000800

08006fdc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e041      	b.n	8007074 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f839 	bl	800707c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2202      	movs	r2, #2
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3304      	adds	r3, #4
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f000 fae5 	bl	80075ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0208 	bic.w	r2, r2, #8
 8007030:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6819      	ldr	r1, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr

0800708e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d122      	bne.n	80070ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d11b      	bne.n	80070ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f06f 0202 	mvn.w	r2, #2
 80070ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fa70 	bl	80075b6 <HAL_TIM_IC_CaptureCallback>
 80070d6:	e005      	b.n	80070e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fa63 	bl	80075a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa72 	bl	80075c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b04      	cmp	r3, #4
 80070f6:	d122      	bne.n	800713e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b04      	cmp	r3, #4
 8007104:	d11b      	bne.n	800713e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f06f 0204 	mvn.w	r2, #4
 800710e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fa46 	bl	80075b6 <HAL_TIM_IC_CaptureCallback>
 800712a:	e005      	b.n	8007138 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fa39 	bl	80075a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fa48 	bl	80075c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b08      	cmp	r3, #8
 800714a:	d122      	bne.n	8007192 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b08      	cmp	r3, #8
 8007158:	d11b      	bne.n	8007192 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f06f 0208 	mvn.w	r2, #8
 8007162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2204      	movs	r2, #4
 8007168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f003 0303 	and.w	r3, r3, #3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fa1c 	bl	80075b6 <HAL_TIM_IC_CaptureCallback>
 800717e:	e005      	b.n	800718c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fa0f 	bl	80075a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa1e 	bl	80075c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	2b10      	cmp	r3, #16
 800719e:	d122      	bne.n	80071e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f003 0310 	and.w	r3, r3, #16
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d11b      	bne.n	80071e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f06f 0210 	mvn.w	r2, #16
 80071b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2208      	movs	r2, #8
 80071bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f9f2 	bl	80075b6 <HAL_TIM_IC_CaptureCallback>
 80071d2:	e005      	b.n	80071e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f9e5 	bl	80075a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f9f4 	bl	80075c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d10e      	bne.n	8007212 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d107      	bne.n	8007212 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f06f 0201 	mvn.w	r2, #1
 800720a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fa ffdd 	bl	80021cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721c:	2b80      	cmp	r3, #128	; 0x80
 800721e:	d10e      	bne.n	800723e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722a:	2b80      	cmp	r3, #128	; 0x80
 800722c:	d107      	bne.n	800723e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fce2 	bl	8007c02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b40      	cmp	r3, #64	; 0x40
 800724a:	d10e      	bne.n	800726a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d107      	bne.n	800726a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f9b8 	bl	80075da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b20      	cmp	r3, #32
 8007276:	d10e      	bne.n	8007296 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b20      	cmp	r3, #32
 8007284:	d107      	bne.n	8007296 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f06f 0220 	mvn.w	r2, #32
 800728e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fcad 	bl	8007bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80072b6:	2302      	movs	r3, #2
 80072b8:	e0ac      	b.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x174>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b0c      	cmp	r3, #12
 80072c6:	f200 809f 	bhi.w	8007408 <HAL_TIM_PWM_ConfigChannel+0x168>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	08007305 	.word	0x08007305
 80072d4:	08007409 	.word	0x08007409
 80072d8:	08007409 	.word	0x08007409
 80072dc:	08007409 	.word	0x08007409
 80072e0:	08007345 	.word	0x08007345
 80072e4:	08007409 	.word	0x08007409
 80072e8:	08007409 	.word	0x08007409
 80072ec:	08007409 	.word	0x08007409
 80072f0:	08007387 	.word	0x08007387
 80072f4:	08007409 	.word	0x08007409
 80072f8:	08007409 	.word	0x08007409
 80072fc:	08007409 	.word	0x08007409
 8007300:	080073c7 	.word	0x080073c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	4618      	mov	r0, r3
 800730c:	f000 f9d0 	bl	80076b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0208 	orr.w	r2, r2, #8
 800731e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0204 	bic.w	r2, r2, #4
 800732e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6999      	ldr	r1, [r3, #24]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	619a      	str	r2, [r3, #24]
      break;
 8007342:	e062      	b.n	800740a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fa16 	bl	800777c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800735e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800736e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6999      	ldr	r1, [r3, #24]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	021a      	lsls	r2, r3, #8
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	619a      	str	r2, [r3, #24]
      break;
 8007384:	e041      	b.n	800740a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fa5f 	bl	8007850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0208 	orr.w	r2, r2, #8
 80073a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69da      	ldr	r2, [r3, #28]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0204 	bic.w	r2, r2, #4
 80073b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69d9      	ldr	r1, [r3, #28]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	61da      	str	r2, [r3, #28]
      break;
 80073c4:	e021      	b.n	800740a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 faa9 	bl	8007924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69d9      	ldr	r1, [r3, #28]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	021a      	lsls	r2, r3, #8
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	61da      	str	r2, [r3, #28]
      break;
 8007406:	e000      	b.n	800740a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007408:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_TIM_ConfigClockSource+0x18>
 8007430:	2302      	movs	r3, #2
 8007432:	e0b3      	b.n	800759c <HAL_TIM_ConfigClockSource+0x180>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007452:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800745a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800746c:	d03e      	beq.n	80074ec <HAL_TIM_ConfigClockSource+0xd0>
 800746e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007472:	f200 8087 	bhi.w	8007584 <HAL_TIM_ConfigClockSource+0x168>
 8007476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747a:	f000 8085 	beq.w	8007588 <HAL_TIM_ConfigClockSource+0x16c>
 800747e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007482:	d87f      	bhi.n	8007584 <HAL_TIM_ConfigClockSource+0x168>
 8007484:	2b70      	cmp	r3, #112	; 0x70
 8007486:	d01a      	beq.n	80074be <HAL_TIM_ConfigClockSource+0xa2>
 8007488:	2b70      	cmp	r3, #112	; 0x70
 800748a:	d87b      	bhi.n	8007584 <HAL_TIM_ConfigClockSource+0x168>
 800748c:	2b60      	cmp	r3, #96	; 0x60
 800748e:	d050      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0x116>
 8007490:	2b60      	cmp	r3, #96	; 0x60
 8007492:	d877      	bhi.n	8007584 <HAL_TIM_ConfigClockSource+0x168>
 8007494:	2b50      	cmp	r3, #80	; 0x50
 8007496:	d03c      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0xf6>
 8007498:	2b50      	cmp	r3, #80	; 0x50
 800749a:	d873      	bhi.n	8007584 <HAL_TIM_ConfigClockSource+0x168>
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	d058      	beq.n	8007552 <HAL_TIM_ConfigClockSource+0x136>
 80074a0:	2b40      	cmp	r3, #64	; 0x40
 80074a2:	d86f      	bhi.n	8007584 <HAL_TIM_ConfigClockSource+0x168>
 80074a4:	2b30      	cmp	r3, #48	; 0x30
 80074a6:	d064      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x156>
 80074a8:	2b30      	cmp	r3, #48	; 0x30
 80074aa:	d86b      	bhi.n	8007584 <HAL_TIM_ConfigClockSource+0x168>
 80074ac:	2b20      	cmp	r3, #32
 80074ae:	d060      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x156>
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d867      	bhi.n	8007584 <HAL_TIM_ConfigClockSource+0x168>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d05c      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x156>
 80074b8:	2b10      	cmp	r3, #16
 80074ba:	d05a      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074bc:	e062      	b.n	8007584 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	6899      	ldr	r1, [r3, #8]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f000 faee 	bl	8007aae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	609a      	str	r2, [r3, #8]
      break;
 80074ea:	e04e      	b.n	800758a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6818      	ldr	r0, [r3, #0]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	6899      	ldr	r1, [r3, #8]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f000 fad7 	bl	8007aae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689a      	ldr	r2, [r3, #8]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800750e:	609a      	str	r2, [r3, #8]
      break;
 8007510:	e03b      	b.n	800758a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6859      	ldr	r1, [r3, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	461a      	mov	r2, r3
 8007520:	f000 fa4e 	bl	80079c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2150      	movs	r1, #80	; 0x50
 800752a:	4618      	mov	r0, r3
 800752c:	f000 faa5 	bl	8007a7a <TIM_ITRx_SetConfig>
      break;
 8007530:	e02b      	b.n	800758a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6859      	ldr	r1, [r3, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	461a      	mov	r2, r3
 8007540:	f000 fa6c 	bl	8007a1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2160      	movs	r1, #96	; 0x60
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fa95 	bl	8007a7a <TIM_ITRx_SetConfig>
      break;
 8007550:	e01b      	b.n	800758a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6859      	ldr	r1, [r3, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	461a      	mov	r2, r3
 8007560:	f000 fa2e 	bl	80079c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2140      	movs	r1, #64	; 0x40
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fa85 	bl	8007a7a <TIM_ITRx_SetConfig>
      break;
 8007570:	e00b      	b.n	800758a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4619      	mov	r1, r3
 800757c:	4610      	mov	r0, r2
 800757e:	f000 fa7c 	bl	8007a7a <TIM_ITRx_SetConfig>
        break;
 8007582:	e002      	b.n	800758a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007584:	bf00      	nop
 8007586:	e000      	b.n	800758a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007588:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr

080075b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075be:	bf00      	nop
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc80      	pop	{r7}
 80075c6:	4770      	bx	lr

080075c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bc80      	pop	{r7}
 80075d8:	4770      	bx	lr

080075da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr

080075ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a29      	ldr	r2, [pc, #164]	; (80076a4 <TIM_Base_SetConfig+0xb8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d00b      	beq.n	800761c <TIM_Base_SetConfig+0x30>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760a:	d007      	beq.n	800761c <TIM_Base_SetConfig+0x30>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a26      	ldr	r2, [pc, #152]	; (80076a8 <TIM_Base_SetConfig+0xbc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d003      	beq.n	800761c <TIM_Base_SetConfig+0x30>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a25      	ldr	r2, [pc, #148]	; (80076ac <TIM_Base_SetConfig+0xc0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d108      	bne.n	800762e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a1c      	ldr	r2, [pc, #112]	; (80076a4 <TIM_Base_SetConfig+0xb8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00b      	beq.n	800764e <TIM_Base_SetConfig+0x62>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763c:	d007      	beq.n	800764e <TIM_Base_SetConfig+0x62>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a19      	ldr	r2, [pc, #100]	; (80076a8 <TIM_Base_SetConfig+0xbc>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d003      	beq.n	800764e <TIM_Base_SetConfig+0x62>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a18      	ldr	r2, [pc, #96]	; (80076ac <TIM_Base_SetConfig+0xc0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d108      	bne.n	8007660 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	689a      	ldr	r2, [r3, #8]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <TIM_Base_SetConfig+0xb8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d103      	bne.n	8007694 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	615a      	str	r2, [r3, #20]
}
 800769a:	bf00      	nop
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800

080076b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f023 0201 	bic.w	r2, r3, #1
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f023 0302 	bic.w	r3, r3, #2
 80076f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <TIM_OC1_SetConfig+0xc8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d10c      	bne.n	8007726 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f023 0308 	bic.w	r3, r3, #8
 8007712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f023 0304 	bic.w	r3, r3, #4
 8007724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a13      	ldr	r2, [pc, #76]	; (8007778 <TIM_OC1_SetConfig+0xc8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d111      	bne.n	8007752 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800773c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	4313      	orrs	r3, r2
 8007746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4313      	orrs	r3, r2
 8007750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	621a      	str	r2, [r3, #32]
}
 800776c:	bf00      	nop
 800776e:	371c      	adds	r7, #28
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40012c00 	.word	0x40012c00

0800777c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	f023 0210 	bic.w	r2, r3, #16
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f023 0320 	bic.w	r3, r3, #32
 80077c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a1d      	ldr	r2, [pc, #116]	; (800784c <TIM_OC2_SetConfig+0xd0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d10d      	bne.n	80077f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a14      	ldr	r2, [pc, #80]	; (800784c <TIM_OC2_SetConfig+0xd0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d113      	bne.n	8007828 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800780e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	621a      	str	r2, [r3, #32]
}
 8007842:	bf00      	nop
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr
 800784c:	40012c00 	.word	0x40012c00

08007850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a1d      	ldr	r2, [pc, #116]	; (8007920 <TIM_OC3_SetConfig+0xd0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d10d      	bne.n	80078ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a14      	ldr	r2, [pc, #80]	; (8007920 <TIM_OC3_SetConfig+0xd0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d113      	bne.n	80078fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	011b      	lsls	r3, r3, #4
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	621a      	str	r2, [r3, #32]
}
 8007914:	bf00      	nop
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	40012c00 	.word	0x40012c00

08007924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800795a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800796e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	031b      	lsls	r3, r3, #12
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a0f      	ldr	r2, [pc, #60]	; (80079bc <TIM_OC4_SetConfig+0x98>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d109      	bne.n	8007998 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800798a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	019b      	lsls	r3, r3, #6
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	621a      	str	r2, [r3, #32]
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr
 80079bc:	40012c00 	.word	0x40012c00

080079c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f023 0201 	bic.w	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f023 030a 	bic.w	r3, r3, #10
 80079fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	621a      	str	r2, [r3, #32]
}
 8007a12:	bf00      	nop
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bc80      	pop	{r7}
 8007a1a:	4770      	bx	lr

08007a1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	f023 0210 	bic.w	r2, r3, #16
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	031b      	lsls	r3, r3, #12
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	621a      	str	r2, [r3, #32]
}
 8007a70:	bf00      	nop
 8007a72:	371c      	adds	r7, #28
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr

08007a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	f043 0307 	orr.w	r3, r3, #7
 8007a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	609a      	str	r2, [r3, #8]
}
 8007aa4:	bf00      	nop
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr

08007aae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b087      	sub	sp, #28
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ac8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	021a      	lsls	r2, r3, #8
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	609a      	str	r2, [r3, #8]
}
 8007ae2:	bf00      	nop
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr

08007aec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f003 031f 	and.w	r3, r3, #31
 8007afe:	2201      	movs	r2, #1
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6a1a      	ldr	r2, [r3, #32]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	401a      	ands	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6a1a      	ldr	r2, [r3, #32]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	fa01 f303 	lsl.w	r3, r1, r3
 8007b24:	431a      	orrs	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	621a      	str	r2, [r3, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e046      	b.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a16      	ldr	r2, [pc, #88]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00e      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b98:	d009      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a12      	ldr	r2, [pc, #72]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a10      	ldr	r2, [pc, #64]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d10c      	bne.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bc80      	pop	{r7}
 8007be2:	4770      	bx	lr
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40000400 	.word	0x40000400
 8007bec:	40000800 	.word	0x40000800

08007bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr

08007c02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bc80      	pop	{r7}
 8007c12:	4770      	bx	lr

08007c14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c14:	b084      	sub	sp, #16
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	f107 0014 	add.w	r0, r7, #20
 8007c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	b004      	add	sp, #16
 8007c32:	4770      	bx	lr

08007c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c44:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr

08007c60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	43db      	mvns	r3, r3
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	4013      	ands	r3, r2
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bc80      	pop	{r7}
 8007c92:	4770      	bx	lr

08007c94 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr

08007cac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007cac:	b084      	sub	sp, #16
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	f107 0014 	add.w	r0, r7, #20
 8007cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	b004      	add	sp, #16
 8007cea:	4770      	bx	lr

08007cec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b09b      	sub	sp, #108	; 0x6c
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	78db      	ldrb	r3, [r3, #3]
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d81f      	bhi.n	8007d5e <USB_ActivateEndpoint+0x72>
 8007d1e:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <USB_ActivateEndpoint+0x38>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007d35 	.word	0x08007d35
 8007d28:	08007d51 	.word	0x08007d51
 8007d2c:	08007d67 	.word	0x08007d67
 8007d30:	08007d43 	.word	0x08007d43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007d34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d3c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d40:	e012      	b.n	8007d68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d46:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007d4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d4e:	e00b      	b.n	8007d68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d58:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d5c:	e004      	b.n	8007d68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007d64:	e000      	b.n	8007d68 <USB_ActivateEndpoint+0x7c>
      break;
 8007d66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	441a      	add	r2, r3
 8007d72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4313      	orrs	r3, r2
 8007daa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	441a      	add	r2, r3
 8007db8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	7b1b      	ldrb	r3, [r3, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f040 8149 	bne.w	800806c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	785b      	ldrb	r3, [r3, #1]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 8084 	beq.w	8007eec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	461a      	mov	r2, r3
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	4413      	add	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	011a      	lsls	r2, r3, #4
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e06:	613b      	str	r3, [r7, #16]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	88db      	ldrh	r3, [r3, #6]
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	81fb      	strh	r3, [r7, #14]
 8007e26:	89fb      	ldrh	r3, [r7, #14]
 8007e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01b      	beq.n	8007e68 <USB_ActivateEndpoint+0x17c>
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e46:	81bb      	strh	r3, [r7, #12]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	441a      	add	r2, r3
 8007e52:	89bb      	ldrh	r3, [r7, #12]
 8007e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	78db      	ldrb	r3, [r3, #3]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d020      	beq.n	8007eb2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e86:	813b      	strh	r3, [r7, #8]
 8007e88:	893b      	ldrh	r3, [r7, #8]
 8007e8a:	f083 0320 	eor.w	r3, r3, #32
 8007e8e:	813b      	strh	r3, [r7, #8]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	441a      	add	r2, r3
 8007e9a:	893b      	ldrh	r3, [r7, #8]
 8007e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	8013      	strh	r3, [r2, #0]
 8007eb0:	e27f      	b.n	80083b2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ec8:	817b      	strh	r3, [r7, #10]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	441a      	add	r2, r3
 8007ed4:	897b      	ldrh	r3, [r7, #10]
 8007ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	8013      	strh	r3, [r2, #0]
 8007eea:	e262      	b.n	80083b2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efc:	4413      	add	r3, r2
 8007efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	011a      	lsls	r2, r3, #4
 8007f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	88db      	ldrh	r3, [r3, #6]
 8007f14:	085b      	lsrs	r3, r3, #1
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	4413      	add	r3, r2
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	011a      	lsls	r2, r3, #4
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f42:	623b      	str	r3, [r7, #32]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d112      	bne.n	8007f72 <USB_ActivateEndpoint+0x286>
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	801a      	strh	r2, [r3, #0]
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	801a      	strh	r2, [r3, #0]
 8007f70:	e02f      	b.n	8007fd2 <USB_ActivateEndpoint+0x2e6>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b3e      	cmp	r3, #62	; 0x3e
 8007f78:	d813      	bhi.n	8007fa2 <USB_ActivateEndpoint+0x2b6>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	085b      	lsrs	r3, r3, #1
 8007f80:	663b      	str	r3, [r7, #96]	; 0x60
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <USB_ActivateEndpoint+0x2a8>
 8007f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f90:	3301      	adds	r3, #1
 8007f92:	663b      	str	r3, [r7, #96]	; 0x60
 8007f94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	029b      	lsls	r3, r3, #10
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	801a      	strh	r2, [r3, #0]
 8007fa0:	e017      	b.n	8007fd2 <USB_ActivateEndpoint+0x2e6>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	095b      	lsrs	r3, r3, #5
 8007fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f003 031f 	and.w	r3, r3, #31
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <USB_ActivateEndpoint+0x2d0>
 8007fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	663b      	str	r3, [r7, #96]	; 0x60
 8007fbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	029b      	lsls	r3, r3, #10
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	83fb      	strh	r3, [r7, #30]
 8007fe0:	8bfb      	ldrh	r3, [r7, #30]
 8007fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d01b      	beq.n	8008022 <USB_ActivateEndpoint+0x336>
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008000:	83bb      	strh	r3, [r7, #28]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	441a      	add	r2, r3
 800800c:	8bbb      	ldrh	r3, [r7, #28]
 800800e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800801a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801e:	b29b      	uxth	r3, r3
 8008020:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	b29b      	uxth	r3, r3
 8008030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008038:	837b      	strh	r3, [r7, #26]
 800803a:	8b7b      	ldrh	r3, [r7, #26]
 800803c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008040:	837b      	strh	r3, [r7, #26]
 8008042:	8b7b      	ldrh	r3, [r7, #26]
 8008044:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008048:	837b      	strh	r3, [r7, #26]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	441a      	add	r2, r3
 8008054:	8b7b      	ldrh	r3, [r7, #26]
 8008056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800805a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800805e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008066:	b29b      	uxth	r3, r3
 8008068:	8013      	strh	r3, [r2, #0]
 800806a:	e1a2      	b.n	80083b2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29b      	uxth	r3, r3
 800807a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008082:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	441a      	add	r2, r3
 8008090:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800809c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80080a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080b8:	4413      	add	r3, r2
 80080ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	011a      	lsls	r2, r3, #4
 80080c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ca:	657b      	str	r3, [r7, #84]	; 0x54
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	891b      	ldrh	r3, [r3, #8]
 80080d0:	085b      	lsrs	r3, r3, #1
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	653b      	str	r3, [r7, #80]	; 0x50
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ec:	4413      	add	r3, r2
 80080ee:	653b      	str	r3, [r7, #80]	; 0x50
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	011a      	lsls	r2, r3, #4
 80080f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80080fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	895b      	ldrh	r3, [r3, #10]
 8008104:	085b      	lsrs	r3, r3, #1
 8008106:	b29b      	uxth	r3, r3
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 8091 	bne.w	800823c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008128:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800812a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d01b      	beq.n	800816a <USB_ActivateEndpoint+0x47e>
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008148:	877b      	strh	r3, [r7, #58]	; 0x3a
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	441a      	add	r2, r3
 8008154:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800815a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800815e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008166:	b29b      	uxth	r3, r3
 8008168:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	873b      	strh	r3, [r7, #56]	; 0x38
 8008178:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800817a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d01b      	beq.n	80081ba <USB_ActivateEndpoint+0x4ce>
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008198:	86fb      	strh	r3, [r7, #54]	; 0x36
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	441a      	add	r2, r3
 80081a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	441a      	add	r2, r3
 80081ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fe:	b29b      	uxth	r3, r3
 8008200:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008218:	867b      	strh	r3, [r7, #50]	; 0x32
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	441a      	add	r2, r3
 8008224:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008236:	b29b      	uxth	r3, r3
 8008238:	8013      	strh	r3, [r2, #0]
 800823a:	e0ba      	b.n	80083b2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800824c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01d      	beq.n	8008294 <USB_ActivateEndpoint+0x5a8>
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800826a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	441a      	add	r2, r3
 800827c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800828c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008290:	b29b      	uxth	r3, r3
 8008292:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80082a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80082a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d01d      	beq.n	80082ec <USB_ActivateEndpoint+0x600>
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	441a      	add	r2, r3
 80082d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80082d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	78db      	ldrb	r3, [r3, #3]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d024      	beq.n	800833e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800830e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008312:	f083 0320 	eor.w	r3, r3, #32
 8008316:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	441a      	add	r2, r3
 8008324:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008338:	b29b      	uxth	r3, r3
 800833a:	8013      	strh	r3, [r2, #0]
 800833c:	e01d      	b.n	800837a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29b      	uxth	r3, r3
 800834c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008354:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	441a      	add	r2, r3
 8008362:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008376:	b29b      	uxth	r3, r3
 8008378:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	b29b      	uxth	r3, r3
 8008388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800838c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008390:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	441a      	add	r2, r3
 800839c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800839e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80083b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	376c      	adds	r7, #108	; 0x6c
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bc80      	pop	{r7}
 80083be:	4770      	bx	lr

080083c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b08d      	sub	sp, #52	; 0x34
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	7b1b      	ldrb	r3, [r3, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f040 808e 	bne.w	80084f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	785b      	ldrb	r3, [r3, #1]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d044      	beq.n	8008466 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	81bb      	strh	r3, [r7, #12]
 80083ea:	89bb      	ldrh	r3, [r7, #12]
 80083ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01b      	beq.n	800842c <USB_DeactivateEndpoint+0x6c>
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840a:	817b      	strh	r3, [r7, #10]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	441a      	add	r2, r3
 8008416:	897b      	ldrh	r3, [r7, #10]
 8008418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008424:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008428:	b29b      	uxth	r3, r3
 800842a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008442:	813b      	strh	r3, [r7, #8]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	441a      	add	r2, r3
 800844e:	893b      	ldrh	r3, [r7, #8]
 8008450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800845c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008460:	b29b      	uxth	r3, r3
 8008462:	8013      	strh	r3, [r2, #0]
 8008464:	e192      	b.n	800878c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	827b      	strh	r3, [r7, #18]
 8008474:	8a7b      	ldrh	r3, [r7, #18]
 8008476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d01b      	beq.n	80084b6 <USB_DeactivateEndpoint+0xf6>
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008494:	823b      	strh	r3, [r7, #16]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	441a      	add	r2, r3
 80084a0:	8a3b      	ldrh	r3, [r7, #16]
 80084a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084cc:	81fb      	strh	r3, [r7, #14]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	441a      	add	r2, r3
 80084d8:	89fb      	ldrh	r3, [r7, #14]
 80084da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	8013      	strh	r3, [r2, #0]
 80084ee:	e14d      	b.n	800878c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f040 80a5 	bne.w	8008644 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	843b      	strh	r3, [r7, #32]
 8008508:	8c3b      	ldrh	r3, [r7, #32]
 800850a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d01b      	beq.n	800854a <USB_DeactivateEndpoint+0x18a>
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	b29b      	uxth	r3, r3
 8008520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008528:	83fb      	strh	r3, [r7, #30]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	441a      	add	r2, r3
 8008534:	8bfb      	ldrh	r3, [r7, #30]
 8008536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800853a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800853e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008546:	b29b      	uxth	r3, r3
 8008548:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	83bb      	strh	r3, [r7, #28]
 8008558:	8bbb      	ldrh	r3, [r7, #28]
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d01b      	beq.n	800859a <USB_DeactivateEndpoint+0x1da>
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b29b      	uxth	r3, r3
 8008570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008578:	837b      	strh	r3, [r7, #26]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	441a      	add	r2, r3
 8008584:	8b7b      	ldrh	r3, [r7, #26]
 8008586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800858a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800858e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008592:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008596:	b29b      	uxth	r3, r3
 8008598:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b0:	833b      	strh	r3, [r7, #24]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	8b3b      	ldrh	r3, [r7, #24]
 80085be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e8:	82fb      	strh	r3, [r7, #22]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	441a      	add	r2, r3
 80085f4:	8afb      	ldrh	r3, [r7, #22]
 80085f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008606:	b29b      	uxth	r3, r3
 8008608:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	b29b      	uxth	r3, r3
 8008618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008620:	82bb      	strh	r3, [r7, #20]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	441a      	add	r2, r3
 800862c:	8abb      	ldrh	r3, [r7, #20]
 800862e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800863a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863e:	b29b      	uxth	r3, r3
 8008640:	8013      	strh	r3, [r2, #0]
 8008642:	e0a3      	b.n	800878c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008652:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01b      	beq.n	8008694 <USB_DeactivateEndpoint+0x2d4>
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	b29b      	uxth	r3, r3
 800866a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008672:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	441a      	add	r2, r3
 800867e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800868c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008690:	b29b      	uxth	r3, r3
 8008692:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80086a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80086a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d01b      	beq.n	80086e4 <USB_DeactivateEndpoint+0x324>
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	441a      	add	r2, r3
 80086ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	441a      	add	r2, r3
 8008706:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800870c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008718:	b29b      	uxth	r3, r3
 800871a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800872e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008732:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	441a      	add	r2, r3
 800873e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800874c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008750:	b29b      	uxth	r3, r3
 8008752:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b29b      	uxth	r3, r3
 8008762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876a:	847b      	strh	r3, [r7, #34]	; 0x22
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	441a      	add	r2, r3
 8008776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008788:	b29b      	uxth	r3, r3
 800878a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3734      	adds	r7, #52	; 0x34
 8008792:	46bd      	mov	sp, r7
 8008794:	bc80      	pop	{r7}
 8008796:	4770      	bx	lr

08008798 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b0cc      	sub	sp, #304	; 0x130
 800879c:	af00      	add	r7, sp, #0
 800879e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087a6:	6018      	str	r0, [r3, #0]
 80087a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	f041 817d 	bne.w	8009abe <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80087c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	699a      	ldr	r2, [r3, #24]
 80087d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d908      	bls.n	80087f2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80087e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80087f0:	e007      	b.n	8008802 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80087f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	7b1b      	ldrb	r3, [r3, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d152      	bne.n	80088b8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6959      	ldr	r1, [r3, #20]
 800881e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	88da      	ldrh	r2, [r3, #6]
 800882a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800882e:	b29b      	uxth	r3, r3
 8008830:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008834:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008838:	6800      	ldr	r0, [r0, #0]
 800883a:	f001 ff23 	bl	800a684 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800883e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008842:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008846:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800884a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800884e:	6812      	ldr	r2, [r2, #0]
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008860:	b29b      	uxth	r3, r3
 8008862:	4619      	mov	r1, r3
 8008864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008868:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800886c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008870:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008874:	6812      	ldr	r2, [r2, #0]
 8008876:	440a      	add	r2, r1
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	011a      	lsls	r2, r3, #4
 8008888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4413      	add	r3, r2
 8008894:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	f001 b8b5 	b.w	8009a22 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80088b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	78db      	ldrb	r3, [r3, #3]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	f040 84c6 	bne.w	8009256 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80088ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6a1a      	ldr	r2, [r3, #32]
 80088d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	f240 8443 	bls.w	800916e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80088e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	441a      	add	r2, r3
 800892c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008938:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800893c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008940:	b29b      	uxth	r3, r3
 8008942:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6a1a      	ldr	r2, [r3, #32]
 8008950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008954:	1ad2      	subs	r2, r2, r3
 8008956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800895a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008966:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 823e 	beq.w	8008e06 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800898a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800898e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008992:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008996:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800899a:	6812      	ldr	r2, [r2, #0]
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f040 809a 	bne.w	8008ae4 <USB_EPStartXfer+0x34c>
 80089b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089c0:	6812      	ldr	r2, [r2, #0]
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4619      	mov	r1, r3
 80089d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089e2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	440a      	add	r2, r1
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	011a      	lsls	r2, r3, #4
 80089fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4413      	add	r3, r2
 8008a06:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d122      	bne.n	8008a62 <USB_EPStartXfer+0x2ca>
 8008a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	801a      	strh	r2, [r3, #0]
 8008a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	801a      	strh	r2, [r3, #0]
 8008a60:	e079      	b.n	8008b56 <USB_EPStartXfer+0x3be>
 8008a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a66:	2b3e      	cmp	r3, #62	; 0x3e
 8008a68:	d81b      	bhi.n	8008aa2 <USB_EPStartXfer+0x30a>
 8008a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d004      	beq.n	8008a8a <USB_EPStartXfer+0x2f2>
 8008a80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a84:	3301      	adds	r3, #1
 8008a86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	029b      	lsls	r3, r3, #10
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	801a      	strh	r2, [r3, #0]
 8008aa0:	e059      	b.n	8008b56 <USB_EPStartXfer+0x3be>
 8008aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa6:	095b      	lsrs	r3, r3, #5
 8008aa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab0:	f003 031f 	and.w	r3, r3, #31
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d104      	bne.n	8008ac2 <USB_EPStartXfer+0x32a>
 8008ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008abc:	3b01      	subs	r3, #1
 8008abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	029b      	lsls	r3, r3, #10
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ada:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	801a      	strh	r2, [r3, #0]
 8008ae2:	e038      	b.n	8008b56 <USB_EPStartXfer+0x3be>
 8008ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d130      	bne.n	8008b56 <USB_EPStartXfer+0x3be>
 8008af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	4619      	mov	r1, r3
 8008b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008b0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b12:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008b16:	6812      	ldr	r2, [r2, #0]
 8008b18:	440a      	add	r2, r1
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	011a      	lsls	r2, r3, #4
 8008b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	895b      	ldrh	r3, [r3, #10]
 8008b62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6959      	ldr	r1, [r3, #20]
 8008b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008b80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008b84:	6800      	ldr	r0, [r0, #0]
 8008b86:	f001 fd7d 	bl	800a684 <USB_WritePMA>
            ep->xfer_buff += len;
 8008b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	695a      	ldr	r2, [r3, #20]
 8008b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b9a:	441a      	add	r2, r3
 8008b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6a1a      	ldr	r2, [r3, #32]
 8008bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d90f      	bls.n	8008be4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6a1a      	ldr	r2, [r3, #32]
 8008bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd4:	1ad2      	subs	r2, r2, r3
 8008bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	621a      	str	r2, [r3, #32]
 8008be2:	e00e      	b.n	8008c02 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	785b      	ldrb	r3, [r3, #1]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f040 809a 	bne.w	8008d48 <USB_EPStartXfer+0x5b0>
 8008c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c20:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c46:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008c4a:	6812      	ldr	r2, [r2, #0]
 8008c4c:	440a      	add	r2, r1
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	011a      	lsls	r2, r3, #4
 8008c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d122      	bne.n	8008cc6 <USB_EPStartXfer+0x52e>
 8008c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	801a      	strh	r2, [r3, #0]
 8008ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cbc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	801a      	strh	r2, [r3, #0]
 8008cc4:	e083      	b.n	8008dce <USB_EPStartXfer+0x636>
 8008cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cca:	2b3e      	cmp	r3, #62	; 0x3e
 8008ccc:	d81b      	bhi.n	8008d06 <USB_EPStartXfer+0x56e>
 8008cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd2:	085b      	lsrs	r3, r3, #1
 8008cd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d004      	beq.n	8008cee <USB_EPStartXfer+0x556>
 8008ce4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ce8:	3301      	adds	r3, #1
 8008cea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008cee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	029b      	lsls	r3, r3, #10
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cfc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	801a      	strh	r2, [r3, #0]
 8008d04:	e063      	b.n	8008dce <USB_EPStartXfer+0x636>
 8008d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d0a:	095b      	lsrs	r3, r3, #5
 8008d0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d14:	f003 031f 	and.w	r3, r3, #31
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d104      	bne.n	8008d26 <USB_EPStartXfer+0x58e>
 8008d1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d20:	3b01      	subs	r3, #1
 8008d22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	029b      	lsls	r3, r3, #10
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	801a      	strh	r2, [r3, #0]
 8008d46:	e042      	b.n	8008dce <USB_EPStartXfer+0x636>
 8008d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	785b      	ldrb	r3, [r3, #1]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d13a      	bne.n	8008dce <USB_EPStartXfer+0x636>
 8008d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d64:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d68:	6812      	ldr	r2, [r2, #0]
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	440a      	add	r2, r1
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	011a      	lsls	r2, r3, #4
 8008da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4413      	add	r3, r2
 8008dae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	891b      	ldrh	r3, [r3, #8]
 8008dda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6959      	ldr	r1, [r3, #20]
 8008dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008df4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008df8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008dfc:	6800      	ldr	r0, [r0, #0]
 8008dfe:	f001 fc41 	bl	800a684 <USB_WritePMA>
 8008e02:	f000 be0e 	b.w	8009a22 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	785b      	ldrb	r3, [r3, #1]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d16d      	bne.n	8008ef2 <USB_EPStartXfer+0x75a>
 8008e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	461a      	mov	r2, r3
 8008e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e36:	4413      	add	r3, r2
 8008e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	011a      	lsls	r2, r3, #4
 8008e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e50:	647b      	str	r3, [r7, #68]	; 0x44
 8008e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d112      	bne.n	8008e80 <USB_EPStartXfer+0x6e8>
 8008e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e68:	801a      	strh	r2, [r3, #0]
 8008e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e7c:	801a      	strh	r2, [r3, #0]
 8008e7e:	e063      	b.n	8008f48 <USB_EPStartXfer+0x7b0>
 8008e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e84:	2b3e      	cmp	r3, #62	; 0x3e
 8008e86:	d817      	bhi.n	8008eb8 <USB_EPStartXfer+0x720>
 8008e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e8c:	085b      	lsrs	r3, r3, #1
 8008e8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <USB_EPStartXfer+0x710>
 8008e9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ea8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	029b      	lsls	r3, r3, #10
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb4:	801a      	strh	r2, [r3, #0]
 8008eb6:	e047      	b.n	8008f48 <USB_EPStartXfer+0x7b0>
 8008eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ebc:	095b      	lsrs	r3, r3, #5
 8008ebe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec6:	f003 031f 	and.w	r3, r3, #31
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d104      	bne.n	8008ed8 <USB_EPStartXfer+0x740>
 8008ece:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ed8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	029b      	lsls	r3, r3, #10
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eee:	801a      	strh	r2, [r3, #0]
 8008ef0:	e02a      	b.n	8008f48 <USB_EPStartXfer+0x7b0>
 8008ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d122      	bne.n	8008f48 <USB_EPStartXfer+0x7b0>
 8008f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8008f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	461a      	mov	r2, r3
 8008f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f22:	4413      	add	r3, r2
 8008f24:	653b      	str	r3, [r7, #80]	; 0x50
 8008f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	011a      	lsls	r2, r3, #4
 8008f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f36:	4413      	add	r3, r2
 8008f38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	891b      	ldrh	r3, [r3, #8]
 8008f54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6959      	ldr	r1, [r3, #20]
 8008f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f6e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008f72:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008f76:	6800      	ldr	r0, [r0, #0]
 8008f78:	f001 fb84 	bl	800a684 <USB_WritePMA>
            ep->xfer_buff += len;
 8008f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	695a      	ldr	r2, [r3, #20]
 8008f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f8c:	441a      	add	r2, r3
 8008f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6a1a      	ldr	r2, [r3, #32]
 8008fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d90f      	bls.n	8008fd6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8008fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6a1a      	ldr	r2, [r3, #32]
 8008fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fc6:	1ad2      	subs	r2, r2, r3
 8008fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	621a      	str	r2, [r3, #32]
 8008fd4:	e00e      	b.n	8008ff4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8008fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8009000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	785b      	ldrb	r3, [r3, #1]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d16d      	bne.n	80090ec <USB_EPStartXfer+0x954>
 8009010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	63bb      	str	r3, [r7, #56]	; 0x38
 800901c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800902a:	b29b      	uxth	r3, r3
 800902c:	461a      	mov	r2, r3
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	4413      	add	r3, r2
 8009032:	63bb      	str	r3, [r7, #56]	; 0x38
 8009034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	011a      	lsls	r2, r3, #4
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	4413      	add	r3, r2
 8009046:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800904a:	637b      	str	r3, [r7, #52]	; 0x34
 800904c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d112      	bne.n	800907a <USB_EPStartXfer+0x8e2>
 8009054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	b29b      	uxth	r3, r3
 800905a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800905e:	b29a      	uxth	r2, r3
 8009060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009062:	801a      	strh	r2, [r3, #0]
 8009064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29b      	uxth	r3, r3
 800906a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800906e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009072:	b29a      	uxth	r2, r3
 8009074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009076:	801a      	strh	r2, [r3, #0]
 8009078:	e05d      	b.n	8009136 <USB_EPStartXfer+0x99e>
 800907a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800907e:	2b3e      	cmp	r3, #62	; 0x3e
 8009080:	d817      	bhi.n	80090b2 <USB_EPStartXfer+0x91a>
 8009082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009086:	085b      	lsrs	r3, r3, #1
 8009088:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800908c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <USB_EPStartXfer+0x90a>
 8009098:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800909c:	3301      	adds	r3, #1
 800909e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	029b      	lsls	r3, r3, #10
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ae:	801a      	strh	r2, [r3, #0]
 80090b0:	e041      	b.n	8009136 <USB_EPStartXfer+0x99e>
 80090b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c0:	f003 031f 	and.w	r3, r3, #31
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d104      	bne.n	80090d2 <USB_EPStartXfer+0x93a>
 80090c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090cc:	3b01      	subs	r3, #1
 80090ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	029b      	lsls	r3, r3, #10
 80090da:	b29b      	uxth	r3, r3
 80090dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e8:	801a      	strh	r2, [r3, #0]
 80090ea:	e024      	b.n	8009136 <USB_EPStartXfer+0x99e>
 80090ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d11c      	bne.n	8009136 <USB_EPStartXfer+0x99e>
 80090fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800910a:	b29b      	uxth	r3, r3
 800910c:	461a      	mov	r2, r3
 800910e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009110:	4413      	add	r3, r2
 8009112:	643b      	str	r3, [r7, #64]	; 0x40
 8009114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	011a      	lsls	r2, r3, #4
 8009122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009124:	4413      	add	r3, r2
 8009126:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800912c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009130:	b29a      	uxth	r2, r3
 8009132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009134:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	895b      	ldrh	r3, [r3, #10]
 8009142:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6959      	ldr	r1, [r3, #20]
 8009152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009156:	b29b      	uxth	r3, r3
 8009158:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800915c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009160:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009164:	6800      	ldr	r0, [r0, #0]
 8009166:	f001 fa8d 	bl	800a684 <USB_WritePMA>
 800916a:	f000 bc5a 	b.w	8009a22 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800916e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800917e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800918c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80091a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80091a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	441a      	add	r2, r3
 80091c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80091c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	461a      	mov	r2, r3
 80091f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091fa:	4413      	add	r3, r2
 80091fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	011a      	lsls	r2, r3, #4
 800920c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800920e:	4413      	add	r3, r2
 8009210:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009214:	65bb      	str	r3, [r7, #88]	; 0x58
 8009216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800921a:	b29a      	uxth	r2, r3
 800921c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800921e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	891b      	ldrh	r3, [r3, #8]
 800922c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6959      	ldr	r1, [r3, #20]
 800923c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009240:	b29b      	uxth	r3, r3
 8009242:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009246:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800924a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800924e:	6800      	ldr	r0, [r0, #0]
 8009250:	f001 fa18 	bl	800a684 <USB_WritePMA>
 8009254:	e3e5      	b.n	8009a22 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800925a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009284:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	441a      	add	r2, r3
 800929a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800929e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80092aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80092b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6a1a      	ldr	r2, [r3, #32]
 80092be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c2:	1ad2      	subs	r2, r2, r3
 80092c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80092d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 81bc 	beq.w	8009670 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800930a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	785b      	ldrb	r3, [r3, #1]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d16d      	bne.n	80093f2 <USB_EPStartXfer+0xc5a>
 8009316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	67bb      	str	r3, [r7, #120]	; 0x78
 8009322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009326:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009330:	b29b      	uxth	r3, r3
 8009332:	461a      	mov	r2, r3
 8009334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009336:	4413      	add	r3, r2
 8009338:	67bb      	str	r3, [r7, #120]	; 0x78
 800933a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800933e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	011a      	lsls	r2, r3, #4
 8009348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800934a:	4413      	add	r3, r2
 800934c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009350:	677b      	str	r3, [r7, #116]	; 0x74
 8009352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d112      	bne.n	8009380 <USB_EPStartXfer+0xbe8>
 800935a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	b29b      	uxth	r3, r3
 8009360:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009364:	b29a      	uxth	r2, r3
 8009366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009368:	801a      	strh	r2, [r3, #0]
 800936a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009378:	b29a      	uxth	r2, r3
 800937a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800937c:	801a      	strh	r2, [r3, #0]
 800937e:	e060      	b.n	8009442 <USB_EPStartXfer+0xcaa>
 8009380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009384:	2b3e      	cmp	r3, #62	; 0x3e
 8009386:	d817      	bhi.n	80093b8 <USB_EPStartXfer+0xc20>
 8009388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938c:	085b      	lsrs	r3, r3, #1
 800938e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d004      	beq.n	80093a8 <USB_EPStartXfer+0xc10>
 800939e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093a2:	3301      	adds	r3, #1
 80093a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	029b      	lsls	r3, r3, #10
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093b4:	801a      	strh	r2, [r3, #0]
 80093b6:	e044      	b.n	8009442 <USB_EPStartXfer+0xcaa>
 80093b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093bc:	095b      	lsrs	r3, r3, #5
 80093be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093c6:	f003 031f 	and.w	r3, r3, #31
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d104      	bne.n	80093d8 <USB_EPStartXfer+0xc40>
 80093ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093d2:	3b01      	subs	r3, #1
 80093d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093dc:	b29b      	uxth	r3, r3
 80093de:	029b      	lsls	r3, r3, #10
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093ee:	801a      	strh	r2, [r3, #0]
 80093f0:	e027      	b.n	8009442 <USB_EPStartXfer+0xcaa>
 80093f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d11f      	bne.n	8009442 <USB_EPStartXfer+0xcaa>
 8009402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009406:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009410:	b29b      	uxth	r3, r3
 8009412:	461a      	mov	r2, r3
 8009414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009418:	4413      	add	r3, r2
 800941a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800941e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	011a      	lsls	r2, r3, #4
 800942c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009430:	4413      	add	r3, r2
 8009432:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009436:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800943c:	b29a      	uxth	r2, r3
 800943e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009440:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	895b      	ldrh	r3, [r3, #10]
 800944e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6959      	ldr	r1, [r3, #20]
 800945e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009462:	b29b      	uxth	r3, r3
 8009464:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009468:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800946c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009470:	6800      	ldr	r0, [r0, #0]
 8009472:	f001 f907 	bl	800a684 <USB_WritePMA>
          ep->xfer_buff += len;
 8009476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800947a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	695a      	ldr	r2, [r3, #20]
 8009482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009486:	441a      	add	r2, r3
 8009488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6a1a      	ldr	r2, [r3, #32]
 80094a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d90f      	bls.n	80094d0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80094b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6a1a      	ldr	r2, [r3, #32]
 80094bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c0:	1ad2      	subs	r2, r2, r3
 80094c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	621a      	str	r2, [r3, #32]
 80094ce:	e00e      	b.n	80094ee <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80094d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6a1b      	ldr	r3, [r3, #32]
 80094dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80094e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2200      	movs	r2, #0
 80094ec:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80094ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 8295 	beq.w	8009a22 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d16d      	bne.n	80095e4 <USB_EPStartXfer+0xe4c>
 8009508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	66bb      	str	r3, [r7, #104]	; 0x68
 8009514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009518:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009522:	b29b      	uxth	r3, r3
 8009524:	461a      	mov	r2, r3
 8009526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009528:	4413      	add	r3, r2
 800952a:	66bb      	str	r3, [r7, #104]	; 0x68
 800952c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	011a      	lsls	r2, r3, #4
 800953a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800953c:	4413      	add	r3, r2
 800953e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009542:	667b      	str	r3, [r7, #100]	; 0x64
 8009544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d112      	bne.n	8009572 <USB_EPStartXfer+0xdda>
 800954c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800954e:	881b      	ldrh	r3, [r3, #0]
 8009550:	b29b      	uxth	r3, r3
 8009552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009556:	b29a      	uxth	r2, r3
 8009558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	b29b      	uxth	r3, r3
 8009562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800956a:	b29a      	uxth	r2, r3
 800956c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	e063      	b.n	800963a <USB_EPStartXfer+0xea2>
 8009572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009576:	2b3e      	cmp	r3, #62	; 0x3e
 8009578:	d817      	bhi.n	80095aa <USB_EPStartXfer+0xe12>
 800957a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <USB_EPStartXfer+0xe02>
 8009590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009594:	3301      	adds	r3, #1
 8009596:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800959a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959e:	b29b      	uxth	r3, r3
 80095a0:	029b      	lsls	r3, r3, #10
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	e047      	b.n	800963a <USB_EPStartXfer+0xea2>
 80095aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ae:	095b      	lsrs	r3, r3, #5
 80095b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b8:	f003 031f 	and.w	r3, r3, #31
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d104      	bne.n	80095ca <USB_EPStartXfer+0xe32>
 80095c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c4:	3b01      	subs	r3, #1
 80095c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	029b      	lsls	r3, r3, #10
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095dc:	b29a      	uxth	r2, r3
 80095de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095e0:	801a      	strh	r2, [r3, #0]
 80095e2:	e02a      	b.n	800963a <USB_EPStartXfer+0xea2>
 80095e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d122      	bne.n	800963a <USB_EPStartXfer+0xea2>
 80095f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	673b      	str	r3, [r7, #112]	; 0x70
 8009600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009604:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800960e:	b29b      	uxth	r3, r3
 8009610:	461a      	mov	r2, r3
 8009612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009614:	4413      	add	r3, r2
 8009616:	673b      	str	r3, [r7, #112]	; 0x70
 8009618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	011a      	lsls	r2, r3, #4
 8009626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009628:	4413      	add	r3, r2
 800962a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800962e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009634:	b29a      	uxth	r2, r3
 8009636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009638:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800963a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800963e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	891b      	ldrh	r3, [r3, #8]
 8009646:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800964a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6959      	ldr	r1, [r3, #20]
 8009656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800965a:	b29b      	uxth	r3, r3
 800965c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009660:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009664:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009668:	6800      	ldr	r0, [r0, #0]
 800966a:	f001 f80b 	bl	800a684 <USB_WritePMA>
 800966e:	e1d8      	b.n	8009a22 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	785b      	ldrb	r3, [r3, #1]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d178      	bne.n	8009772 <USB_EPStartXfer+0xfda>
 8009680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800968e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800969c:	b29b      	uxth	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096a4:	4413      	add	r3, r2
 80096a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	011a      	lsls	r2, r3, #4
 80096b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096bc:	4413      	add	r3, r2
 80096be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d116      	bne.n	80096fc <USB_EPStartXfer+0xf64>
 80096ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096da:	b29a      	uxth	r2, r3
 80096dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096e0:	801a      	strh	r2, [r3, #0]
 80096e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096f8:	801a      	strh	r2, [r3, #0]
 80096fa:	e06b      	b.n	80097d4 <USB_EPStartXfer+0x103c>
 80096fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009700:	2b3e      	cmp	r3, #62	; 0x3e
 8009702:	d818      	bhi.n	8009736 <USB_EPStartXfer+0xf9e>
 8009704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009708:	085b      	lsrs	r3, r3, #1
 800970a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800970e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <USB_EPStartXfer+0xf8c>
 800971a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800971e:	3301      	adds	r3, #1
 8009720:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009724:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009728:	b29b      	uxth	r3, r3
 800972a:	029b      	lsls	r3, r3, #10
 800972c:	b29a      	uxth	r2, r3
 800972e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009732:	801a      	strh	r2, [r3, #0]
 8009734:	e04e      	b.n	80097d4 <USB_EPStartXfer+0x103c>
 8009736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800973a:	095b      	lsrs	r3, r3, #5
 800973c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009744:	f003 031f 	and.w	r3, r3, #31
 8009748:	2b00      	cmp	r3, #0
 800974a:	d104      	bne.n	8009756 <USB_EPStartXfer+0xfbe>
 800974c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009750:	3b01      	subs	r3, #1
 8009752:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009756:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800975a:	b29b      	uxth	r3, r3
 800975c:	029b      	lsls	r3, r3, #10
 800975e:	b29b      	uxth	r3, r3
 8009760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009768:	b29a      	uxth	r2, r3
 800976a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800976e:	801a      	strh	r2, [r3, #0]
 8009770:	e030      	b.n	80097d4 <USB_EPStartXfer+0x103c>
 8009772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	785b      	ldrb	r3, [r3, #1]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d128      	bne.n	80097d4 <USB_EPStartXfer+0x103c>
 8009782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009786:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800979e:	b29b      	uxth	r3, r3
 80097a0:	461a      	mov	r2, r3
 80097a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097a6:	4413      	add	r3, r2
 80097a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	011a      	lsls	r2, r3, #4
 80097ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097be:	4413      	add	r3, r2
 80097c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80097d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	891b      	ldrh	r3, [r3, #8]
 80097e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6959      	ldr	r1, [r3, #20]
 80097f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80097fa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80097fe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009802:	6800      	ldr	r0, [r0, #0]
 8009804:	f000 ff3e 	bl	800a684 <USB_WritePMA>
          ep->xfer_buff += len;
 8009808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800980c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	695a      	ldr	r2, [r3, #20]
 8009814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009818:	441a      	add	r2, r3
 800981a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800981e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800982a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6a1a      	ldr	r2, [r3, #32]
 8009832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	429a      	cmp	r2, r3
 8009840:	d90f      	bls.n	8009862 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6a1a      	ldr	r2, [r3, #32]
 800984e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009852:	1ad2      	subs	r2, r2, r3
 8009854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	621a      	str	r2, [r3, #32]
 8009860:	e00e      	b.n	8009880 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2200      	movs	r2, #0
 800987e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 80cc 	beq.w	8009a22 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800988a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800988e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800989c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d178      	bne.n	800999a <USB_EPStartXfer+0x1202>
 80098a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	461a      	mov	r2, r3
 80098c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098cc:	4413      	add	r3, r2
 80098ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	011a      	lsls	r2, r3, #4
 80098e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098e4:	4413      	add	r3, r2
 80098e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d116      	bne.n	8009924 <USB_EPStartXfer+0x118c>
 80098f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009902:	b29a      	uxth	r2, r3
 8009904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009908:	801a      	strh	r2, [r3, #0]
 800990a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	b29b      	uxth	r3, r3
 8009912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800991a:	b29a      	uxth	r2, r3
 800991c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009920:	801a      	strh	r2, [r3, #0]
 8009922:	e064      	b.n	80099ee <USB_EPStartXfer+0x1256>
 8009924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009928:	2b3e      	cmp	r3, #62	; 0x3e
 800992a:	d818      	bhi.n	800995e <USB_EPStartXfer+0x11c6>
 800992c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009930:	085b      	lsrs	r3, r3, #1
 8009932:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d004      	beq.n	800994c <USB_EPStartXfer+0x11b4>
 8009942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009946:	3301      	adds	r3, #1
 8009948:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800994c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009950:	b29b      	uxth	r3, r3
 8009952:	029b      	lsls	r3, r3, #10
 8009954:	b29a      	uxth	r2, r3
 8009956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800995a:	801a      	strh	r2, [r3, #0]
 800995c:	e047      	b.n	80099ee <USB_EPStartXfer+0x1256>
 800995e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009962:	095b      	lsrs	r3, r3, #5
 8009964:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800996c:	f003 031f 	and.w	r3, r3, #31
 8009970:	2b00      	cmp	r3, #0
 8009972:	d104      	bne.n	800997e <USB_EPStartXfer+0x11e6>
 8009974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009978:	3b01      	subs	r3, #1
 800997a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800997e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009982:	b29b      	uxth	r3, r3
 8009984:	029b      	lsls	r3, r3, #10
 8009986:	b29b      	uxth	r3, r3
 8009988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800998c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009990:	b29a      	uxth	r2, r3
 8009992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009996:	801a      	strh	r2, [r3, #0]
 8009998:	e029      	b.n	80099ee <USB_EPStartXfer+0x1256>
 800999a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800999e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d121      	bne.n	80099ee <USB_EPStartXfer+0x1256>
 80099aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	461a      	mov	r2, r3
 80099bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099c0:	4413      	add	r3, r2
 80099c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	011a      	lsls	r2, r3, #4
 80099d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099d8:	4413      	add	r3, r2
 80099da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80099ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	895b      	ldrh	r3, [r3, #10]
 80099fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6959      	ldr	r1, [r3, #20]
 8009a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a14:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009a18:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009a1c:	6800      	ldr	r0, [r0, #0]
 8009a1e:	f000 fe31 	bl	800a684 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a44:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a50:	8013      	strh	r3, [r2, #0]
 8009a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a56:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009a5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a5e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a62:	8812      	ldrh	r2, [r2, #0]
 8009a64:	f082 0210 	eor.w	r2, r2, #16
 8009a68:	801a      	strh	r2, [r3, #0]
 8009a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a6e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009a72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a76:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a7a:	8812      	ldrh	r2, [r2, #0]
 8009a7c:	f082 0220 	eor.w	r2, r2, #32
 8009a80:	801a      	strh	r2, [r3, #0]
 8009a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	441a      	add	r2, r3
 8009a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aa0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	8013      	strh	r3, [r2, #0]
 8009aba:	f000 bc9f 	b.w	800a3fc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	7b1b      	ldrb	r3, [r3, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f040 80ae 	bne.w	8009c2c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	699a      	ldr	r2, [r3, #24]
 8009adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d917      	bls.n	8009b1c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	699a      	ldr	r2, [r3, #24]
 8009b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b0c:	1ad2      	subs	r2, r2, r3
 8009b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	619a      	str	r2, [r3, #24]
 8009b1a:	e00e      	b.n	8009b3a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2200      	movs	r2, #0
 8009b38:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	461a      	mov	r2, r3
 8009b5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b5e:	4413      	add	r3, r2
 8009b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	011a      	lsls	r2, r3, #4
 8009b72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b76:	4413      	add	r3, r2
 8009b78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d116      	bne.n	8009bb6 <USB_EPStartXfer+0x141e>
 8009b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b9a:	801a      	strh	r2, [r3, #0]
 8009b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bb2:	801a      	strh	r2, [r3, #0]
 8009bb4:	e3e8      	b.n	800a388 <USB_EPStartXfer+0x1bf0>
 8009bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bba:	2b3e      	cmp	r3, #62	; 0x3e
 8009bbc:	d818      	bhi.n	8009bf0 <USB_EPStartXfer+0x1458>
 8009bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <USB_EPStartXfer+0x1446>
 8009bd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bd8:	3301      	adds	r3, #1
 8009bda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	029b      	lsls	r3, r3, #10
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bec:	801a      	strh	r2, [r3, #0]
 8009bee:	e3cb      	b.n	800a388 <USB_EPStartXfer+0x1bf0>
 8009bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bf4:	095b      	lsrs	r3, r3, #5
 8009bf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bfe:	f003 031f 	and.w	r3, r3, #31
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d104      	bne.n	8009c10 <USB_EPStartXfer+0x1478>
 8009c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009c10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	029b      	lsls	r3, r3, #10
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c28:	801a      	strh	r2, [r3, #0]
 8009c2a:	e3ad      	b.n	800a388 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	78db      	ldrb	r3, [r3, #3]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	f040 8200 	bne.w	800a03e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	785b      	ldrb	r3, [r3, #1]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f040 8091 	bne.w	8009d72 <USB_EPStartXfer+0x15da>
 8009c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c74:	4413      	add	r3, r2
 8009c76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	011a      	lsls	r2, r3, #4
 8009c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d116      	bne.n	8009cd4 <USB_EPStartXfer+0x153c>
 8009ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cb8:	801a      	strh	r2, [r3, #0]
 8009cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cd0:	801a      	strh	r2, [r3, #0]
 8009cd2:	e083      	b.n	8009ddc <USB_EPStartXfer+0x1644>
 8009cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	2b3e      	cmp	r3, #62	; 0x3e
 8009ce2:	d820      	bhi.n	8009d26 <USB_EPStartXfer+0x158e>
 8009ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	085b      	lsrs	r3, r3, #1
 8009cf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d004      	beq.n	8009d14 <USB_EPStartXfer+0x157c>
 8009d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d0e:	3301      	adds	r3, #1
 8009d10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	029b      	lsls	r3, r3, #10
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	e05a      	b.n	8009ddc <USB_EPStartXfer+0x1644>
 8009d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	095b      	lsrs	r3, r3, #5
 8009d34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	f003 031f 	and.w	r3, r3, #31
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d104      	bne.n	8009d56 <USB_EPStartXfer+0x15be>
 8009d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d50:	3b01      	subs	r3, #1
 8009d52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	029b      	lsls	r3, r3, #10
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d6e:	801a      	strh	r2, [r3, #0]
 8009d70:	e034      	b.n	8009ddc <USB_EPStartXfer+0x1644>
 8009d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	785b      	ldrb	r3, [r3, #1]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d12c      	bne.n	8009ddc <USB_EPStartXfer+0x1644>
 8009d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	461a      	mov	r2, r3
 8009da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009da6:	4413      	add	r3, r2
 8009da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	011a      	lsls	r2, r3, #4
 8009dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009dda:	801a      	strh	r2, [r3, #0]
 8009ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	785b      	ldrb	r3, [r3, #1]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f040 8091 	bne.w	8009f1e <USB_EPStartXfer+0x1786>
 8009dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e20:	4413      	add	r3, r2
 8009e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	011a      	lsls	r2, r3, #4
 8009e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e38:	4413      	add	r3, r2
 8009e3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d116      	bne.n	8009e80 <USB_EPStartXfer+0x16e8>
 8009e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e56:	881b      	ldrh	r3, [r3, #0]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e64:	801a      	strh	r2, [r3, #0]
 8009e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e7c:	801a      	strh	r2, [r3, #0]
 8009e7e:	e07c      	b.n	8009f7a <USB_EPStartXfer+0x17e2>
 8009e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	2b3e      	cmp	r3, #62	; 0x3e
 8009e8e:	d820      	bhi.n	8009ed2 <USB_EPStartXfer+0x173a>
 8009e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	085b      	lsrs	r3, r3, #1
 8009e9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d004      	beq.n	8009ec0 <USB_EPStartXfer+0x1728>
 8009eb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009eba:	3301      	adds	r3, #1
 8009ebc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ec0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	029b      	lsls	r3, r3, #10
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ece:	801a      	strh	r2, [r3, #0]
 8009ed0:	e053      	b.n	8009f7a <USB_EPStartXfer+0x17e2>
 8009ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	095b      	lsrs	r3, r3, #5
 8009ee0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	f003 031f 	and.w	r3, r3, #31
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d104      	bne.n	8009f02 <USB_EPStartXfer+0x176a>
 8009ef8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009efc:	3b01      	subs	r3, #1
 8009efe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	029b      	lsls	r3, r3, #10
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f1a:	801a      	strh	r2, [r3, #0]
 8009f1c:	e02d      	b.n	8009f7a <USB_EPStartXfer+0x17e2>
 8009f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	785b      	ldrb	r3, [r3, #1]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d125      	bne.n	8009f7a <USB_EPStartXfer+0x17e2>
 8009f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	461a      	mov	r2, r3
 8009f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f44:	4413      	add	r3, r2
 8009f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	011a      	lsls	r2, r3, #4
 8009f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f78:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	69db      	ldr	r3, [r3, #28]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 81fe 	beq.w	800a388 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <USB_EPStartXfer+0x182c>
 8009fb8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10d      	bne.n	8009fe0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fc4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f040 81db 	bne.w	800a388 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fd2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f040 81d4 	bne.w	800a388 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	4413      	add	r3, r2
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a006:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a00a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a00e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	441a      	add	r2, r3
 800a024:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a02c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a038:	b29b      	uxth	r3, r3
 800a03a:	8013      	strh	r3, [r2, #0]
 800a03c:	e1a4      	b.n	800a388 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a03e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	78db      	ldrb	r3, [r3, #3]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	f040 819a 	bne.w	800a384 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	699a      	ldr	r2, [r3, #24]
 800a05c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d917      	bls.n	800a09c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a06c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a07c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	699a      	ldr	r2, [r3, #24]
 800a088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a08c:	1ad2      	subs	r2, r2, r3
 800a08e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	619a      	str	r2, [r3, #24]
 800a09a:	e00e      	b.n	800a0ba <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a09c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a0ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a0ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	785b      	ldrb	r3, [r3, #1]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d178      	bne.n	800a1bc <USB_EPStartXfer+0x1a24>
 800a0ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	011a      	lsls	r2, r3, #4
 800a102:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a106:	4413      	add	r3, r2
 800a108:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a10c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d116      	bne.n	800a146 <USB_EPStartXfer+0x19ae>
 800a118:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a124:	b29a      	uxth	r2, r3
 800a126:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a12a:	801a      	strh	r2, [r3, #0]
 800a12c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	b29b      	uxth	r3, r3
 800a134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a142:	801a      	strh	r2, [r3, #0]
 800a144:	e06b      	b.n	800a21e <USB_EPStartXfer+0x1a86>
 800a146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a14a:	2b3e      	cmp	r3, #62	; 0x3e
 800a14c:	d818      	bhi.n	800a180 <USB_EPStartXfer+0x19e8>
 800a14e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a152:	085b      	lsrs	r3, r3, #1
 800a154:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	d004      	beq.n	800a16e <USB_EPStartXfer+0x19d6>
 800a164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a168:	3301      	adds	r3, #1
 800a16a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a16e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a172:	b29b      	uxth	r3, r3
 800a174:	029b      	lsls	r3, r3, #10
 800a176:	b29a      	uxth	r2, r3
 800a178:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a17c:	801a      	strh	r2, [r3, #0]
 800a17e:	e04e      	b.n	800a21e <USB_EPStartXfer+0x1a86>
 800a180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a184:	095b      	lsrs	r3, r3, #5
 800a186:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a18a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a18e:	f003 031f 	and.w	r3, r3, #31
 800a192:	2b00      	cmp	r3, #0
 800a194:	d104      	bne.n	800a1a0 <USB_EPStartXfer+0x1a08>
 800a196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a19a:	3b01      	subs	r3, #1
 800a19c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a1a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	029b      	lsls	r3, r3, #10
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1b8:	801a      	strh	r2, [r3, #0]
 800a1ba:	e030      	b.n	800a21e <USB_EPStartXfer+0x1a86>
 800a1bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	785b      	ldrb	r3, [r3, #1]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d128      	bne.n	800a21e <USB_EPStartXfer+0x1a86>
 800a1cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	011a      	lsls	r2, r3, #4
 800a204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a208:	4413      	add	r3, r2
 800a20a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a20e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a216:	b29a      	uxth	r2, r3
 800a218:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a21c:	801a      	strh	r2, [r3, #0]
 800a21e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a22c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	785b      	ldrb	r3, [r3, #1]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d178      	bne.n	800a32e <USB_EPStartXfer+0x1b96>
 800a23c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a24a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a24e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a258:	b29b      	uxth	r3, r3
 800a25a:	461a      	mov	r2, r3
 800a25c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a260:	4413      	add	r3, r2
 800a262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a26a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	011a      	lsls	r2, r3, #4
 800a274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a278:	4413      	add	r3, r2
 800a27a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a27e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a286:	2b00      	cmp	r3, #0
 800a288:	d116      	bne.n	800a2b8 <USB_EPStartXfer+0x1b20>
 800a28a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a28e:	881b      	ldrh	r3, [r3, #0]
 800a290:	b29b      	uxth	r3, r3
 800a292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a296:	b29a      	uxth	r2, r3
 800a298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a29c:	801a      	strh	r2, [r3, #0]
 800a29e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2a2:	881b      	ldrh	r3, [r3, #0]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2b4:	801a      	strh	r2, [r3, #0]
 800a2b6:	e067      	b.n	800a388 <USB_EPStartXfer+0x1bf0>
 800a2b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2bc:	2b3e      	cmp	r3, #62	; 0x3e
 800a2be:	d818      	bhi.n	800a2f2 <USB_EPStartXfer+0x1b5a>
 800a2c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2c4:	085b      	lsrs	r3, r3, #1
 800a2c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d004      	beq.n	800a2e0 <USB_EPStartXfer+0x1b48>
 800a2d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2da:	3301      	adds	r3, #1
 800a2dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	029b      	lsls	r3, r3, #10
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2ee:	801a      	strh	r2, [r3, #0]
 800a2f0:	e04a      	b.n	800a388 <USB_EPStartXfer+0x1bf0>
 800a2f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2f6:	095b      	lsrs	r3, r3, #5
 800a2f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a300:	f003 031f 	and.w	r3, r3, #31
 800a304:	2b00      	cmp	r3, #0
 800a306:	d104      	bne.n	800a312 <USB_EPStartXfer+0x1b7a>
 800a308:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a30c:	3b01      	subs	r3, #1
 800a30e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a316:	b29b      	uxth	r3, r3
 800a318:	029b      	lsls	r3, r3, #10
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a324:	b29a      	uxth	r2, r3
 800a326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a32a:	801a      	strh	r2, [r3, #0]
 800a32c:	e02c      	b.n	800a388 <USB_EPStartXfer+0x1bf0>
 800a32e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	785b      	ldrb	r3, [r3, #1]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d124      	bne.n	800a388 <USB_EPStartXfer+0x1bf0>
 800a33e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	461a      	mov	r2, r3
 800a350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a354:	4413      	add	r3, r2
 800a356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a35a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a35e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	011a      	lsls	r2, r3, #4
 800a368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a36c:	4413      	add	r3, r2
 800a36e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a372:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a380:	801a      	strh	r2, [r3, #0]
 800a382:	e001      	b.n	800a388 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e03a      	b.n	800a3fe <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a38c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	881b      	ldrh	r3, [r3, #0]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3b2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	441a      	add	r2, r3
 800a3e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	785b      	ldrb	r3, [r3, #1]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d020      	beq.n	800a45c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	b29b      	uxth	r3, r3
 800a428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a42c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a430:	81bb      	strh	r3, [r7, #12]
 800a432:	89bb      	ldrh	r3, [r7, #12]
 800a434:	f083 0310 	eor.w	r3, r3, #16
 800a438:	81bb      	strh	r3, [r7, #12]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	441a      	add	r2, r3
 800a444:	89bb      	ldrh	r3, [r7, #12]
 800a446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a44a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a44e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a456:	b29b      	uxth	r3, r3
 800a458:	8013      	strh	r3, [r2, #0]
 800a45a:	e01f      	b.n	800a49c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	b29b      	uxth	r3, r3
 800a46a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a46e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a472:	81fb      	strh	r3, [r7, #14]
 800a474:	89fb      	ldrh	r3, [r7, #14]
 800a476:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a47a:	81fb      	strh	r3, [r7, #14]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	441a      	add	r2, r3
 800a486:	89fb      	ldrh	r3, [r7, #14]
 800a488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a48c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a498:	b29b      	uxth	r3, r3
 800a49a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bc80      	pop	{r7}
 800a4a6:	4770      	bx	lr

0800a4a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	7b1b      	ldrb	r3, [r3, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f040 809d 	bne.w	800a5f6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	785b      	ldrb	r3, [r3, #1]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d04c      	beq.n	800a55e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	823b      	strh	r3, [r7, #16]
 800a4d2:	8a3b      	ldrh	r3, [r7, #16]
 800a4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d01b      	beq.n	800a514 <USB_EPClearStall+0x6c>
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f2:	81fb      	strh	r3, [r7, #14]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	441a      	add	r2, r3
 800a4fe:	89fb      	ldrh	r3, [r7, #14]
 800a500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a50c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a510:	b29b      	uxth	r3, r3
 800a512:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	78db      	ldrb	r3, [r3, #3]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d06c      	beq.n	800a5f6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4413      	add	r3, r2
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a52e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a532:	81bb      	strh	r3, [r7, #12]
 800a534:	89bb      	ldrh	r3, [r7, #12]
 800a536:	f083 0320 	eor.w	r3, r3, #32
 800a53a:	81bb      	strh	r3, [r7, #12]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	441a      	add	r2, r3
 800a546:	89bb      	ldrh	r3, [r7, #12]
 800a548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a54c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a558:	b29b      	uxth	r3, r3
 800a55a:	8013      	strh	r3, [r2, #0]
 800a55c:	e04b      	b.n	800a5f6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	82fb      	strh	r3, [r7, #22]
 800a56c:	8afb      	ldrh	r3, [r7, #22]
 800a56e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d01b      	beq.n	800a5ae <USB_EPClearStall+0x106>
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	b29b      	uxth	r3, r3
 800a584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a58c:	82bb      	strh	r3, [r7, #20]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	441a      	add	r2, r3
 800a598:	8abb      	ldrh	r3, [r7, #20]
 800a59a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a59e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	881b      	ldrh	r3, [r3, #0]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c4:	827b      	strh	r3, [r7, #18]
 800a5c6:	8a7b      	ldrh	r3, [r7, #18]
 800a5c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5cc:	827b      	strh	r3, [r7, #18]
 800a5ce:	8a7b      	ldrh	r3, [r7, #18]
 800a5d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5d4:	827b      	strh	r3, [r7, #18]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	441a      	add	r2, r3
 800a5e0:	8a7b      	ldrh	r3, [r7, #18]
 800a5e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	371c      	adds	r7, #28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bc80      	pop	{r7}
 800a600:	4770      	bx	lr

0800a602 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a602:	b480      	push	{r7}
 800a604:	b083      	sub	sp, #12
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	460b      	mov	r3, r1
 800a60c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a60e:	78fb      	ldrb	r3, [r7, #3]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d103      	bne.n	800a61c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2280      	movs	r2, #128	; 0x80
 800a618:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	bc80      	pop	{r7}
 800a626:	4770      	bx	lr

0800a628 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	bc80      	pop	{r7}
 800a63a:	4770      	bx	lr

0800a63c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bc80      	pop	{r7}
 800a64e:	4770      	bx	lr

0800a650 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a65e:	b29b      	uxth	r3, r3
 800a660:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a662:	68fb      	ldr	r3, [r7, #12]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	bc80      	pop	{r7}
 800a66c:	4770      	bx	lr

0800a66e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	bc80      	pop	{r7}
 800a682:	4770      	bx	lr

0800a684 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a684:	b480      	push	{r7}
 800a686:	b08d      	sub	sp, #52	; 0x34
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	4611      	mov	r1, r2
 800a690:	461a      	mov	r2, r3
 800a692:	460b      	mov	r3, r1
 800a694:	80fb      	strh	r3, [r7, #6]
 800a696:	4613      	mov	r3, r2
 800a698:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a69a:	88bb      	ldrh	r3, [r7, #4]
 800a69c:	3301      	adds	r3, #1
 800a69e:	085b      	lsrs	r3, r3, #1
 800a6a0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a6aa:	88fb      	ldrh	r3, [r7, #6]
 800a6ac:	005a      	lsls	r2, r3, #1
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6b6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6bc:	e01e      	b.n	800a6fc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	021b      	lsls	r3, r3, #8
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	3302      	adds	r3, #2
 800a6e8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	3302      	adds	r3, #2
 800a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1dd      	bne.n	800a6be <USB_WritePMA+0x3a>
  }
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	3734      	adds	r7, #52	; 0x34
 800a708:	46bd      	mov	sp, r7
 800a70a:	bc80      	pop	{r7}
 800a70c:	4770      	bx	lr

0800a70e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a70e:	b480      	push	{r7}
 800a710:	b08b      	sub	sp, #44	; 0x2c
 800a712:	af00      	add	r7, sp, #0
 800a714:	60f8      	str	r0, [r7, #12]
 800a716:	60b9      	str	r1, [r7, #8]
 800a718:	4611      	mov	r1, r2
 800a71a:	461a      	mov	r2, r3
 800a71c:	460b      	mov	r3, r1
 800a71e:	80fb      	strh	r3, [r7, #6]
 800a720:	4613      	mov	r3, r2
 800a722:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a724:	88bb      	ldrh	r3, [r7, #4]
 800a726:	085b      	lsrs	r3, r3, #1
 800a728:	b29b      	uxth	r3, r3
 800a72a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a734:	88fb      	ldrh	r3, [r7, #6]
 800a736:	005a      	lsls	r2, r3, #1
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a740:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	627b      	str	r3, [r7, #36]	; 0x24
 800a746:	e01b      	b.n	800a780 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	881b      	ldrh	r3, [r3, #0]
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	3302      	adds	r3, #2
 800a754:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	3301      	adds	r3, #1
 800a762:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	0a1b      	lsrs	r3, r3, #8
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	3301      	adds	r3, #1
 800a772:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	3302      	adds	r3, #2
 800a778:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	3b01      	subs	r3, #1
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e0      	bne.n	800a748 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a786:	88bb      	ldrh	r3, [r7, #4]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	b29b      	uxth	r3, r3
 800a798:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	701a      	strb	r2, [r3, #0]
  }
}
 800a7a2:	bf00      	nop
 800a7a4:	372c      	adds	r7, #44	; 0x2c
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bc80      	pop	{r7}
 800a7aa:	4770      	bx	lr

0800a7ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	7c1b      	ldrb	r3, [r3, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d115      	bne.n	800a7f0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7c8:	2202      	movs	r2, #2
 800a7ca:	2181      	movs	r1, #129	; 0x81
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f001 fe8c 	bl	800c4ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7dc:	2202      	movs	r2, #2
 800a7de:	2101      	movs	r1, #1
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 fe82 	bl	800c4ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a7ee:	e012      	b.n	800a816 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7f0:	2340      	movs	r3, #64	; 0x40
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	2181      	movs	r1, #129	; 0x81
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f001 fe77 	bl	800c4ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a802:	2340      	movs	r3, #64	; 0x40
 800a804:	2202      	movs	r2, #2
 800a806:	2101      	movs	r1, #1
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f001 fe6e 	bl	800c4ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a816:	2308      	movs	r3, #8
 800a818:	2203      	movs	r2, #3
 800a81a:	2182      	movs	r1, #130	; 0x82
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 fe64 	bl	800c4ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a828:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a82c:	f001 ff84 	bl	800c738 <USBD_static_malloc>
 800a830:	4602      	mov	r2, r0
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d102      	bne.n	800a848 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a842:	2301      	movs	r3, #1
 800a844:	73fb      	strb	r3, [r7, #15]
 800a846:	e026      	b.n	800a896 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2200      	movs	r2, #0
 800a866:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	7c1b      	ldrb	r3, [r3, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d109      	bne.n	800a886 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a87c:	2101      	movs	r1, #1
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 ff24 	bl	800c6cc <USBD_LL_PrepareReceive>
 800a884:	e007      	b.n	800a896 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a88c:	2340      	movs	r3, #64	; 0x40
 800a88e:	2101      	movs	r1, #1
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 ff1b 	bl	800c6cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a896:	7bfb      	ldrb	r3, [r7, #15]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a8b0:	2181      	movs	r1, #129	; 0x81
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f001 fe3f 	bl	800c536 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8be:	2101      	movs	r1, #1
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f001 fe38 	bl	800c536 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a8ce:	2182      	movs	r1, #130	; 0x82
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 fe30 	bl	800c536 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00e      	beq.n	800a904 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f001 ff2a 	bl	800c750 <USBD_static_free>
    pdev->pClassData = NULL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b086      	sub	sp, #24
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a934:	2b00      	cmp	r3, #0
 800a936:	d039      	beq.n	800a9ac <USBD_CDC_Setup+0x9e>
 800a938:	2b20      	cmp	r3, #32
 800a93a:	d17f      	bne.n	800aa3c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	88db      	ldrh	r3, [r3, #6]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d029      	beq.n	800a998 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	b25b      	sxtb	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	da11      	bge.n	800a972 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a95a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	88d2      	ldrh	r2, [r2, #6]
 800a960:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a962:	6939      	ldr	r1, [r7, #16]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	88db      	ldrh	r3, [r3, #6]
 800a968:	461a      	mov	r2, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f001 fa09 	bl	800bd82 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a970:	e06b      	b.n	800aa4a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	785a      	ldrb	r2, [r3, #1]
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	88db      	ldrh	r3, [r3, #6]
 800a980:	b2da      	uxtb	r2, r3
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a988:	6939      	ldr	r1, [r7, #16]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	88db      	ldrh	r3, [r3, #6]
 800a98e:	461a      	mov	r2, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 fa24 	bl	800bdde <USBD_CtlPrepareRx>
      break;
 800a996:	e058      	b.n	800aa4a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	7850      	ldrb	r0, [r2, #1]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	6839      	ldr	r1, [r7, #0]
 800a9a8:	4798      	blx	r3
      break;
 800a9aa:	e04e      	b.n	800aa4a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	785b      	ldrb	r3, [r3, #1]
 800a9b0:	2b0b      	cmp	r3, #11
 800a9b2:	d02e      	beq.n	800aa12 <USBD_CDC_Setup+0x104>
 800a9b4:	2b0b      	cmp	r3, #11
 800a9b6:	dc38      	bgt.n	800aa2a <USBD_CDC_Setup+0x11c>
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <USBD_CDC_Setup+0xb4>
 800a9bc:	2b0a      	cmp	r3, #10
 800a9be:	d014      	beq.n	800a9ea <USBD_CDC_Setup+0xdc>
 800a9c0:	e033      	b.n	800aa2a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d107      	bne.n	800a9dc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a9cc:	f107 030c 	add.w	r3, r7, #12
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f001 f9d4 	bl	800bd82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9da:	e02e      	b.n	800aa3a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f001 f965 	bl	800bcae <USBD_CtlError>
            ret = USBD_FAIL;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	75fb      	strb	r3, [r7, #23]
          break;
 800a9e8:	e027      	b.n	800aa3a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d107      	bne.n	800aa04 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a9f4:	f107 030f 	add.w	r3, r7, #15
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f001 f9c0 	bl	800bd82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa02:	e01a      	b.n	800aa3a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 f951 	bl	800bcae <USBD_CtlError>
            ret = USBD_FAIL;
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	75fb      	strb	r3, [r7, #23]
          break;
 800aa10:	e013      	b.n	800aa3a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d00d      	beq.n	800aa38 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f001 f945 	bl	800bcae <USBD_CtlError>
            ret = USBD_FAIL;
 800aa24:	2302      	movs	r3, #2
 800aa26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa28:	e006      	b.n	800aa38 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 f93e 	bl	800bcae <USBD_CtlError>
          ret = USBD_FAIL;
 800aa32:	2302      	movs	r3, #2
 800aa34:	75fb      	strb	r3, [r7, #23]
          break;
 800aa36:	e000      	b.n	800aa3a <USBD_CDC_Setup+0x12c>
          break;
 800aa38:	bf00      	nop
      }
      break;
 800aa3a:	e006      	b.n	800aa4a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f001 f935 	bl	800bcae <USBD_CtlError>
      ret = USBD_FAIL;
 800aa44:	2302      	movs	r3, #2
 800aa46:	75fb      	strb	r3, [r7, #23]
      break;
 800aa48:	bf00      	nop
  }

  return ret;
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa66:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa6e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d03a      	beq.n	800aaf0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa7a:	78fa      	ldrb	r2, [r7, #3]
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	440b      	add	r3, r1
 800aa88:	331c      	adds	r3, #28
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d029      	beq.n	800aae4 <USBD_CDC_DataIn+0x90>
 800aa90:	78fa      	ldrb	r2, [r7, #3]
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	4613      	mov	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	440b      	add	r3, r1
 800aa9e:	331c      	adds	r3, #28
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	78f9      	ldrb	r1, [r7, #3]
 800aaa4:	68b8      	ldr	r0, [r7, #8]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	440b      	add	r3, r1
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	4403      	add	r3, r0
 800aab0:	3338      	adds	r3, #56	; 0x38
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	fbb2 f1f3 	udiv	r1, r2, r3
 800aab8:	fb01 f303 	mul.w	r3, r1, r3
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d110      	bne.n	800aae4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aac2:	78fa      	ldrb	r2, [r7, #3]
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	440b      	add	r3, r1
 800aad0:	331c      	adds	r3, #28
 800aad2:	2200      	movs	r2, #0
 800aad4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aad6:	78f9      	ldrb	r1, [r7, #3]
 800aad8:	2300      	movs	r3, #0
 800aada:	2200      	movs	r2, #0
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 fdd2 	bl	800c686 <USBD_LL_Transmit>
 800aae2:	e003      	b.n	800aaec <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	e000      	b.n	800aaf2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800aaf0:	2302      	movs	r3, #2
  }
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	460b      	mov	r3, r1
 800ab04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab0e:	78fb      	ldrb	r3, [r7, #3]
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 fdfd 	bl	800c712 <USBD_LL_GetRxDataSize>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00d      	beq.n	800ab46 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ab3e:	4611      	mov	r1, r2
 800ab40:	4798      	blx	r3

    return USBD_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e000      	b.n	800ab48 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ab46:	2302      	movs	r3, #2
  }
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab5e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d015      	beq.n	800ab96 <USBD_CDC_EP0_RxReady+0x46>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab70:	2bff      	cmp	r3, #255	; 0xff
 800ab72:	d010      	beq.n	800ab96 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ab82:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab8a:	b292      	uxth	r2, r2
 800ab8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	22ff      	movs	r2, #255	; 0xff
 800ab92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2243      	movs	r2, #67	; 0x43
 800abac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800abae:	4b03      	ldr	r3, [pc, #12]	; (800abbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bc80      	pop	{r7}
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	20000094 	.word	0x20000094

0800abc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2243      	movs	r2, #67	; 0x43
 800abcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800abce:	4b03      	ldr	r3, [pc, #12]	; (800abdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bc80      	pop	{r7}
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	20000050 	.word	0x20000050

0800abe0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2243      	movs	r2, #67	; 0x43
 800abec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800abee:	4b03      	ldr	r3, [pc, #12]	; (800abfc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bc80      	pop	{r7}
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	200000d8 	.word	0x200000d8

0800ac00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ac0e:	4b03      	ldr	r3, [pc, #12]	; (800ac1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	2000000c 	.word	0x2000000c

0800ac20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ac2a:	2302      	movs	r3, #2
 800ac2c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d005      	beq.n	800ac40 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bc80      	pop	{r7}
 800ac4a:	4770      	bx	lr

0800ac4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	4613      	mov	r3, r2
 800ac58:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac6a:	88fa      	ldrh	r2, [r7, #6]
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	371c      	adds	r7, #28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bc80      	pop	{r7}
 800ac7c:	4770      	bx	lr

0800ac7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b085      	sub	sp, #20
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac8e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bc80      	pop	{r7}
 800aca2:	4770      	bx	lr

0800aca4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d01c      	beq.n	800acf8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d115      	bne.n	800acf4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2201      	movs	r2, #1
 800accc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	2181      	movs	r1, #129	; 0x81
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f001 fccb 	bl	800c686 <USBD_LL_Transmit>

      return USBD_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	e002      	b.n	800acfa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e000      	b.n	800acfa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800acf8:	2302      	movs	r3, #2
  }
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad10:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d017      	beq.n	800ad4c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	7c1b      	ldrb	r3, [r3, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d109      	bne.n	800ad38 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad2e:	2101      	movs	r1, #1
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 fccb 	bl	800c6cc <USBD_LL_PrepareReceive>
 800ad36:	e007      	b.n	800ad48 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad3e:	2340      	movs	r3, #64	; 0x40
 800ad40:	2101      	movs	r1, #1
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f001 fcc2 	bl	800c6cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	e000      	b.n	800ad4e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ad4c:	2302      	movs	r3, #2
  }
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	4613      	mov	r3, r2
 800ad62:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	e01a      	b.n	800ada4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	79fa      	ldrb	r2, [r7, #7]
 800ad9a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f001 fb2f 	bl	800c400 <USBD_LL_Init>

  return USBD_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d006      	beq.n	800adce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
 800adcc:	e001      	b.n	800add2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800adce:	2302      	movs	r3, #2
 800add0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800add2:	7bfb      	ldrb	r3, [r7, #15]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	bc80      	pop	{r7}
 800addc:	4770      	bx	lr

0800adde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f001 fb64 	bl	800c4b4 <USBD_LL_Start>

  return USBD_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bc80      	pop	{r7}
 800ae08:	4770      	bx	lr

0800ae0a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	460b      	mov	r3, r1
 800ae14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae16:	2302      	movs	r3, #2
 800ae18:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00c      	beq.n	800ae3e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	78fa      	ldrb	r2, [r7, #3]
 800ae2e:	4611      	mov	r1, r2
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	4798      	blx	r3
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d101      	bne.n	800ae3e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	78fa      	ldrb	r2, [r7, #3]
 800ae5e:	4611      	mov	r1, r2
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	4798      	blx	r3

  return USBD_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 fed8 	bl	800bc36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ae94:	461a      	mov	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aea2:	f003 031f 	and.w	r3, r3, #31
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d016      	beq.n	800aed8 <USBD_LL_SetupStage+0x6a>
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d81c      	bhi.n	800aee8 <USBD_LL_SetupStage+0x7a>
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <USBD_LL_SetupStage+0x4a>
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d008      	beq.n	800aec8 <USBD_LL_SetupStage+0x5a>
 800aeb6:	e017      	b.n	800aee8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f9cb 	bl	800b25c <USBD_StdDevReq>
      break;
 800aec6:	e01a      	b.n	800aefe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fa2d 	bl	800b330 <USBD_StdItfReq>
      break;
 800aed6:	e012      	b.n	800aefe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fa6d 	bl	800b3c0 <USBD_StdEPReq>
      break;
 800aee6:	e00a      	b.n	800aefe <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aeee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f001 fb3c 	bl	800c574 <USBD_LL_StallEP>
      break;
 800aefc:	bf00      	nop
  }

  return USBD_OK;
 800aefe:	2300      	movs	r3, #0
}
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	460b      	mov	r3, r1
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af16:	7afb      	ldrb	r3, [r7, #11]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d14b      	bne.n	800afb4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800af22:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d134      	bne.n	800af98 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	68da      	ldr	r2, [r3, #12]
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	429a      	cmp	r2, r3
 800af38:	d919      	bls.n	800af6e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	68da      	ldr	r2, [r3, #12]
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	1ad2      	subs	r2, r2, r3
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	68da      	ldr	r2, [r3, #12]
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af50:	429a      	cmp	r2, r3
 800af52:	d203      	bcs.n	800af5c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800af58:	b29b      	uxth	r3, r3
 800af5a:	e002      	b.n	800af62 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af60:	b29b      	uxth	r3, r3
 800af62:	461a      	mov	r2, r3
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 ff57 	bl	800be1a <USBD_CtlContinueRx>
 800af6c:	e038      	b.n	800afe0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00a      	beq.n	800af90 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af80:	2b03      	cmp	r3, #3
 800af82:	d105      	bne.n	800af90 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f000 ff54 	bl	800be3e <USBD_CtlSendStatus>
 800af96:	e023      	b.n	800afe0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af9e:	2b05      	cmp	r3, #5
 800afa0:	d11e      	bne.n	800afe0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800afaa:	2100      	movs	r1, #0
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f001 fae1 	bl	800c574 <USBD_LL_StallEP>
 800afb2:	e015      	b.n	800afe0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00d      	beq.n	800afdc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d108      	bne.n	800afdc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	7afa      	ldrb	r2, [r7, #11]
 800afd4:	4611      	mov	r1, r2
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	4798      	blx	r3
 800afda:	e001      	b.n	800afe0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800afdc:	2302      	movs	r3, #2
 800afde:	e000      	b.n	800afe2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3718      	adds	r7, #24
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b086      	sub	sp, #24
 800afee:	af00      	add	r7, sp, #0
 800aff0:	60f8      	str	r0, [r7, #12]
 800aff2:	460b      	mov	r3, r1
 800aff4:	607a      	str	r2, [r7, #4]
 800aff6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aff8:	7afb      	ldrb	r3, [r7, #11]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d17f      	bne.n	800b0fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3314      	adds	r3, #20
 800b002:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d15c      	bne.n	800b0c8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	68da      	ldr	r2, [r3, #12]
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	429a      	cmp	r2, r3
 800b018:	d915      	bls.n	800b046 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	1ad2      	subs	r2, r2, r3
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	461a      	mov	r2, r3
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f000 fec1 	bl	800bdba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b038:	2300      	movs	r3, #0
 800b03a:	2200      	movs	r2, #0
 800b03c:	2100      	movs	r1, #0
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f001 fb44 	bl	800c6cc <USBD_LL_PrepareReceive>
 800b044:	e04e      	b.n	800b0e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	6912      	ldr	r2, [r2, #16]
 800b04e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b052:	fb01 f202 	mul.w	r2, r1, r2
 800b056:	1a9b      	subs	r3, r3, r2
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d11c      	bne.n	800b096 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	689a      	ldr	r2, [r3, #8]
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b064:	429a      	cmp	r2, r3
 800b066:	d316      	bcc.n	800b096 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b072:	429a      	cmp	r2, r3
 800b074:	d20f      	bcs.n	800b096 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b076:	2200      	movs	r2, #0
 800b078:	2100      	movs	r1, #0
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 fe9d 	bl	800bdba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b088:	2300      	movs	r3, #0
 800b08a:	2200      	movs	r2, #0
 800b08c:	2100      	movs	r1, #0
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f001 fb1c 	bl	800c6cc <USBD_LL_PrepareReceive>
 800b094:	e026      	b.n	800b0e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d105      	bne.n	800b0b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b0b8:	2180      	movs	r1, #128	; 0x80
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f001 fa5a 	bl	800c574 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 fecf 	bl	800be64 <USBD_CtlReceiveStatus>
 800b0c6:	e00d      	b.n	800b0e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0ce:	2b04      	cmp	r3, #4
 800b0d0:	d004      	beq.n	800b0dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d103      	bne.n	800b0e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b0dc:	2180      	movs	r1, #128	; 0x80
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f001 fa48 	bl	800c574 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d11d      	bne.n	800b12a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff fe81 	bl	800adf6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b0fc:	e015      	b.n	800b12a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00d      	beq.n	800b126 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b110:	2b03      	cmp	r3, #3
 800b112:	d108      	bne.n	800b126 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	7afa      	ldrb	r2, [r7, #11]
 800b11e:	4611      	mov	r1, r2
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	4798      	blx	r3
 800b124:	e001      	b.n	800b12a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b126:	2302      	movs	r3, #2
 800b128:	e000      	b.n	800b12c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b13c:	2340      	movs	r3, #64	; 0x40
 800b13e:	2200      	movs	r2, #0
 800b140:	2100      	movs	r1, #0
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 f9d1 	bl	800c4ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2240      	movs	r2, #64	; 0x40
 800b154:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b158:	2340      	movs	r3, #64	; 0x40
 800b15a:	2200      	movs	r2, #0
 800b15c:	2180      	movs	r1, #128	; 0x80
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f001 f9c3 	bl	800c4ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2240      	movs	r2, #64	; 0x40
 800b16e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b194:	2b00      	cmp	r3, #0
 800b196:	d009      	beq.n	800b1ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	6852      	ldr	r2, [r2, #4]
 800b1a4:	b2d2      	uxtb	r2, r2
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	4798      	blx	r3
  }

  return USBD_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	78fa      	ldrb	r2, [r7, #3]
 800b1c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bc80      	pop	{r7}
 800b1d2:	4770      	bx	lr

0800b1d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bc80      	pop	{r7}
 800b1fa:	4770      	bx	lr

0800b1fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d105      	bne.n	800b21a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	bc80      	pop	{r7}
 800b224:	4770      	bx	lr

0800b226 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b082      	sub	sp, #8
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b234:	2b03      	cmp	r3, #3
 800b236:	d10b      	bne.n	800b250 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d005      	beq.n	800b250 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b272:	2b40      	cmp	r3, #64	; 0x40
 800b274:	d005      	beq.n	800b282 <USBD_StdDevReq+0x26>
 800b276:	2b40      	cmp	r3, #64	; 0x40
 800b278:	d84f      	bhi.n	800b31a <USBD_StdDevReq+0xbe>
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d009      	beq.n	800b292 <USBD_StdDevReq+0x36>
 800b27e:	2b20      	cmp	r3, #32
 800b280:	d14b      	bne.n	800b31a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	4798      	blx	r3
      break;
 800b290:	e048      	b.n	800b324 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	785b      	ldrb	r3, [r3, #1]
 800b296:	2b09      	cmp	r3, #9
 800b298:	d839      	bhi.n	800b30e <USBD_StdDevReq+0xb2>
 800b29a:	a201      	add	r2, pc, #4	; (adr r2, 800b2a0 <USBD_StdDevReq+0x44>)
 800b29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a0:	0800b2f1 	.word	0x0800b2f1
 800b2a4:	0800b305 	.word	0x0800b305
 800b2a8:	0800b30f 	.word	0x0800b30f
 800b2ac:	0800b2fb 	.word	0x0800b2fb
 800b2b0:	0800b30f 	.word	0x0800b30f
 800b2b4:	0800b2d3 	.word	0x0800b2d3
 800b2b8:	0800b2c9 	.word	0x0800b2c9
 800b2bc:	0800b30f 	.word	0x0800b30f
 800b2c0:	0800b2e7 	.word	0x0800b2e7
 800b2c4:	0800b2dd 	.word	0x0800b2dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f9dc 	bl	800b688 <USBD_GetDescriptor>
          break;
 800b2d0:	e022      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fb3f 	bl	800b958 <USBD_SetAddress>
          break;
 800b2da:	e01d      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fb7e 	bl	800b9e0 <USBD_SetConfig>
          break;
 800b2e4:	e018      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2e6:	6839      	ldr	r1, [r7, #0]
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fc07 	bl	800bafc <USBD_GetConfig>
          break;
 800b2ee:	e013      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fc37 	bl	800bb66 <USBD_GetStatus>
          break;
 800b2f8:	e00e      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fc65 	bl	800bbcc <USBD_SetFeature>
          break;
 800b302:	e009      	b.n	800b318 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fc74 	bl	800bbf4 <USBD_ClrFeature>
          break;
 800b30c:	e004      	b.n	800b318 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fccc 	bl	800bcae <USBD_CtlError>
          break;
 800b316:	bf00      	nop
      }
      break;
 800b318:	e004      	b.n	800b324 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fcc6 	bl	800bcae <USBD_CtlError>
      break;
 800b322:	bf00      	nop
  }

  return ret;
 800b324:	7bfb      	ldrb	r3, [r7, #15]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop

0800b330 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b346:	2b40      	cmp	r3, #64	; 0x40
 800b348:	d005      	beq.n	800b356 <USBD_StdItfReq+0x26>
 800b34a:	2b40      	cmp	r3, #64	; 0x40
 800b34c:	d82e      	bhi.n	800b3ac <USBD_StdItfReq+0x7c>
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <USBD_StdItfReq+0x26>
 800b352:	2b20      	cmp	r3, #32
 800b354:	d12a      	bne.n	800b3ac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b35c:	3b01      	subs	r3, #1
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d81d      	bhi.n	800b39e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	889b      	ldrh	r3, [r3, #4]
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d813      	bhi.n	800b394 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	4798      	blx	r3
 800b37a:	4603      	mov	r3, r0
 800b37c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	88db      	ldrh	r3, [r3, #6]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d110      	bne.n	800b3a8 <USBD_StdItfReq+0x78>
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10d      	bne.n	800b3a8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 fd56 	bl	800be3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b392:	e009      	b.n	800b3a8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fc89 	bl	800bcae <USBD_CtlError>
          break;
 800b39c:	e004      	b.n	800b3a8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fc84 	bl	800bcae <USBD_CtlError>
          break;
 800b3a6:	e000      	b.n	800b3aa <USBD_StdItfReq+0x7a>
          break;
 800b3a8:	bf00      	nop
      }
      break;
 800b3aa:	e004      	b.n	800b3b6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fc7d 	bl	800bcae <USBD_CtlError>
      break;
 800b3b4:	bf00      	nop
  }

  return USBD_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	889b      	ldrh	r3, [r3, #4]
 800b3d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3dc:	2b40      	cmp	r3, #64	; 0x40
 800b3de:	d007      	beq.n	800b3f0 <USBD_StdEPReq+0x30>
 800b3e0:	2b40      	cmp	r3, #64	; 0x40
 800b3e2:	f200 8146 	bhi.w	800b672 <USBD_StdEPReq+0x2b2>
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00a      	beq.n	800b400 <USBD_StdEPReq+0x40>
 800b3ea:	2b20      	cmp	r3, #32
 800b3ec:	f040 8141 	bne.w	800b672 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	4798      	blx	r3
      break;
 800b3fe:	e13d      	b.n	800b67c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b408:	2b20      	cmp	r3, #32
 800b40a:	d10a      	bne.n	800b422 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	4798      	blx	r3
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	e12d      	b.n	800b67e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	785b      	ldrb	r3, [r3, #1]
 800b426:	2b03      	cmp	r3, #3
 800b428:	d007      	beq.n	800b43a <USBD_StdEPReq+0x7a>
 800b42a:	2b03      	cmp	r3, #3
 800b42c:	f300 811b 	bgt.w	800b666 <USBD_StdEPReq+0x2a6>
 800b430:	2b00      	cmp	r3, #0
 800b432:	d072      	beq.n	800b51a <USBD_StdEPReq+0x15a>
 800b434:	2b01      	cmp	r3, #1
 800b436:	d03a      	beq.n	800b4ae <USBD_StdEPReq+0xee>
 800b438:	e115      	b.n	800b666 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b440:	2b02      	cmp	r3, #2
 800b442:	d002      	beq.n	800b44a <USBD_StdEPReq+0x8a>
 800b444:	2b03      	cmp	r3, #3
 800b446:	d015      	beq.n	800b474 <USBD_StdEPReq+0xb4>
 800b448:	e02b      	b.n	800b4a2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b44a:	7bbb      	ldrb	r3, [r7, #14]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00c      	beq.n	800b46a <USBD_StdEPReq+0xaa>
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	2b80      	cmp	r3, #128	; 0x80
 800b454:	d009      	beq.n	800b46a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b456:	7bbb      	ldrb	r3, [r7, #14]
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f001 f88a 	bl	800c574 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b460:	2180      	movs	r1, #128	; 0x80
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f001 f886 	bl	800c574 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b468:	e020      	b.n	800b4ac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fc1e 	bl	800bcae <USBD_CtlError>
              break;
 800b472:	e01b      	b.n	800b4ac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	885b      	ldrh	r3, [r3, #2]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10e      	bne.n	800b49a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00b      	beq.n	800b49a <USBD_StdEPReq+0xda>
 800b482:	7bbb      	ldrb	r3, [r7, #14]
 800b484:	2b80      	cmp	r3, #128	; 0x80
 800b486:	d008      	beq.n	800b49a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	88db      	ldrh	r3, [r3, #6]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d104      	bne.n	800b49a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b490:	7bbb      	ldrb	r3, [r7, #14]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f001 f86d 	bl	800c574 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fccf 	bl	800be3e <USBD_CtlSendStatus>

              break;
 800b4a0:	e004      	b.n	800b4ac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fc02 	bl	800bcae <USBD_CtlError>
              break;
 800b4aa:	bf00      	nop
          }
          break;
 800b4ac:	e0e0      	b.n	800b670 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d002      	beq.n	800b4be <USBD_StdEPReq+0xfe>
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d015      	beq.n	800b4e8 <USBD_StdEPReq+0x128>
 800b4bc:	e026      	b.n	800b50c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4be:	7bbb      	ldrb	r3, [r7, #14]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00c      	beq.n	800b4de <USBD_StdEPReq+0x11e>
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
 800b4c6:	2b80      	cmp	r3, #128	; 0x80
 800b4c8:	d009      	beq.n	800b4de <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b4ca:	7bbb      	ldrb	r3, [r7, #14]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f001 f850 	bl	800c574 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b4d4:	2180      	movs	r1, #128	; 0x80
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f001 f84c 	bl	800c574 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4dc:	e01c      	b.n	800b518 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fbe4 	bl	800bcae <USBD_CtlError>
              break;
 800b4e6:	e017      	b.n	800b518 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	885b      	ldrh	r3, [r3, #2]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d112      	bne.n	800b516 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d004      	beq.n	800b504 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f001 f857 	bl	800c5b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fc9a 	bl	800be3e <USBD_CtlSendStatus>
              }
              break;
 800b50a:	e004      	b.n	800b516 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fbcd 	bl	800bcae <USBD_CtlError>
              break;
 800b514:	e000      	b.n	800b518 <USBD_StdEPReq+0x158>
              break;
 800b516:	bf00      	nop
          }
          break;
 800b518:	e0aa      	b.n	800b670 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b520:	2b02      	cmp	r3, #2
 800b522:	d002      	beq.n	800b52a <USBD_StdEPReq+0x16a>
 800b524:	2b03      	cmp	r3, #3
 800b526:	d032      	beq.n	800b58e <USBD_StdEPReq+0x1ce>
 800b528:	e097      	b.n	800b65a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b52a:	7bbb      	ldrb	r3, [r7, #14]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d007      	beq.n	800b540 <USBD_StdEPReq+0x180>
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	2b80      	cmp	r3, #128	; 0x80
 800b534:	d004      	beq.n	800b540 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b536:	6839      	ldr	r1, [r7, #0]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fbb8 	bl	800bcae <USBD_CtlError>
                break;
 800b53e:	e091      	b.n	800b664 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b544:	2b00      	cmp	r3, #0
 800b546:	da0b      	bge.n	800b560 <USBD_StdEPReq+0x1a0>
 800b548:	7bbb      	ldrb	r3, [r7, #14]
 800b54a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b54e:	4613      	mov	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4413      	add	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	3310      	adds	r3, #16
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	4413      	add	r3, r2
 800b55c:	3304      	adds	r3, #4
 800b55e:	e00b      	b.n	800b578 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b560:	7bbb      	ldrb	r3, [r7, #14]
 800b562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b566:	4613      	mov	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4413      	add	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	4413      	add	r3, r2
 800b576:	3304      	adds	r3, #4
 800b578:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2200      	movs	r2, #0
 800b57e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2202      	movs	r2, #2
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fbfb 	bl	800bd82 <USBD_CtlSendData>
              break;
 800b58c:	e06a      	b.n	800b664 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b58e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b592:	2b00      	cmp	r3, #0
 800b594:	da11      	bge.n	800b5ba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	f003 020f 	and.w	r2, r3, #15
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	3318      	adds	r3, #24
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d117      	bne.n	800b5e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5b0:	6839      	ldr	r1, [r7, #0]
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fb7b 	bl	800bcae <USBD_CtlError>
                  break;
 800b5b8:	e054      	b.n	800b664 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
 800b5bc:	f003 020f 	and.w	r2, r3, #15
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4413      	add	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	440b      	add	r3, r1
 800b5cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d104      	bne.n	800b5e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fb68 	bl	800bcae <USBD_CtlError>
                  break;
 800b5de:	e041      	b.n	800b664 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	da0b      	bge.n	800b600 <USBD_StdEPReq+0x240>
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	3310      	adds	r3, #16
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	e00b      	b.n	800b618 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b600:	7bbb      	ldrb	r3, [r7, #14]
 800b602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b606:	4613      	mov	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	4413      	add	r3, r2
 800b616:	3304      	adds	r3, #4
 800b618:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b61a:	7bbb      	ldrb	r3, [r7, #14]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <USBD_StdEPReq+0x266>
 800b620:	7bbb      	ldrb	r3, [r7, #14]
 800b622:	2b80      	cmp	r3, #128	; 0x80
 800b624:	d103      	bne.n	800b62e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	e00e      	b.n	800b64c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 ffdc 	bl	800c5f0 <USBD_LL_IsStallEP>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	2201      	movs	r2, #1
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	e002      	b.n	800b64c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2200      	movs	r2, #0
 800b64a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2202      	movs	r2, #2
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fb95 	bl	800bd82 <USBD_CtlSendData>
              break;
 800b658:	e004      	b.n	800b664 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fb26 	bl	800bcae <USBD_CtlError>
              break;
 800b662:	bf00      	nop
          }
          break;
 800b664:	e004      	b.n	800b670 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fb20 	bl	800bcae <USBD_CtlError>
          break;
 800b66e:	bf00      	nop
      }
      break;
 800b670:	e004      	b.n	800b67c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fb1a 	bl	800bcae <USBD_CtlError>
      break;
 800b67a:	bf00      	nop
  }

  return ret;
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
	...

0800b688 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b692:	2300      	movs	r3, #0
 800b694:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b69a:	2300      	movs	r3, #0
 800b69c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	885b      	ldrh	r3, [r3, #2]
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	2b06      	cmp	r3, #6
 800b6aa:	f200 8128 	bhi.w	800b8fe <USBD_GetDescriptor+0x276>
 800b6ae:	a201      	add	r2, pc, #4	; (adr r2, 800b6b4 <USBD_GetDescriptor+0x2c>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b6d1 	.word	0x0800b6d1
 800b6b8:	0800b6e9 	.word	0x0800b6e9
 800b6bc:	0800b729 	.word	0x0800b729
 800b6c0:	0800b8ff 	.word	0x0800b8ff
 800b6c4:	0800b8ff 	.word	0x0800b8ff
 800b6c8:	0800b89f 	.word	0x0800b89f
 800b6cc:	0800b8cb 	.word	0x0800b8cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	7c12      	ldrb	r2, [r2, #16]
 800b6dc:	f107 0108 	add.w	r1, r7, #8
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	4798      	blx	r3
 800b6e4:	60f8      	str	r0, [r7, #12]
      break;
 800b6e6:	e112      	b.n	800b90e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	7c1b      	ldrb	r3, [r3, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10d      	bne.n	800b70c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f8:	f107 0208 	add.w	r2, r7, #8
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	4798      	blx	r3
 800b700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3301      	adds	r3, #1
 800b706:	2202      	movs	r2, #2
 800b708:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b70a:	e100      	b.n	800b90e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b714:	f107 0208 	add.w	r2, r7, #8
 800b718:	4610      	mov	r0, r2
 800b71a:	4798      	blx	r3
 800b71c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	3301      	adds	r3, #1
 800b722:	2202      	movs	r2, #2
 800b724:	701a      	strb	r2, [r3, #0]
      break;
 800b726:	e0f2      	b.n	800b90e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	885b      	ldrh	r3, [r3, #2]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b05      	cmp	r3, #5
 800b730:	f200 80ac 	bhi.w	800b88c <USBD_GetDescriptor+0x204>
 800b734:	a201      	add	r2, pc, #4	; (adr r2, 800b73c <USBD_GetDescriptor+0xb4>)
 800b736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73a:	bf00      	nop
 800b73c:	0800b755 	.word	0x0800b755
 800b740:	0800b789 	.word	0x0800b789
 800b744:	0800b7bd 	.word	0x0800b7bd
 800b748:	0800b7f1 	.word	0x0800b7f1
 800b74c:	0800b825 	.word	0x0800b825
 800b750:	0800b859 	.word	0x0800b859
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00b      	beq.n	800b778 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	7c12      	ldrb	r2, [r2, #16]
 800b76c:	f107 0108 	add.w	r1, r7, #8
 800b770:	4610      	mov	r0, r2
 800b772:	4798      	blx	r3
 800b774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b776:	e091      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa97 	bl	800bcae <USBD_CtlError>
            err++;
 800b780:	7afb      	ldrb	r3, [r7, #11]
 800b782:	3301      	adds	r3, #1
 800b784:	72fb      	strb	r3, [r7, #11]
          break;
 800b786:	e089      	b.n	800b89c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	7c12      	ldrb	r2, [r2, #16]
 800b7a0:	f107 0108 	add.w	r1, r7, #8
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	4798      	blx	r3
 800b7a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7aa:	e077      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa7d 	bl	800bcae <USBD_CtlError>
            err++;
 800b7b4:	7afb      	ldrb	r3, [r7, #11]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ba:	e06f      	b.n	800b89c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00b      	beq.n	800b7e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	7c12      	ldrb	r2, [r2, #16]
 800b7d4:	f107 0108 	add.w	r1, r7, #8
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7de:	e05d      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fa63 	bl	800bcae <USBD_CtlError>
            err++;
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ee:	e055      	b.n	800b89c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00b      	beq.n	800b814 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	7c12      	ldrb	r2, [r2, #16]
 800b808:	f107 0108 	add.w	r1, r7, #8
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
 800b810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b812:	e043      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fa49 	bl	800bcae <USBD_CtlError>
            err++;
 800b81c:	7afb      	ldrb	r3, [r7, #11]
 800b81e:	3301      	adds	r3, #1
 800b820:	72fb      	strb	r3, [r7, #11]
          break;
 800b822:	e03b      	b.n	800b89c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00b      	beq.n	800b848 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	7c12      	ldrb	r2, [r2, #16]
 800b83c:	f107 0108 	add.w	r1, r7, #8
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
 800b844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b846:	e029      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b848:	6839      	ldr	r1, [r7, #0]
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 fa2f 	bl	800bcae <USBD_CtlError>
            err++;
 800b850:	7afb      	ldrb	r3, [r7, #11]
 800b852:	3301      	adds	r3, #1
 800b854:	72fb      	strb	r3, [r7, #11]
          break;
 800b856:	e021      	b.n	800b89c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00b      	beq.n	800b87c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	7c12      	ldrb	r2, [r2, #16]
 800b870:	f107 0108 	add.w	r1, r7, #8
 800b874:	4610      	mov	r0, r2
 800b876:	4798      	blx	r3
 800b878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b87a:	e00f      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fa15 	bl	800bcae <USBD_CtlError>
            err++;
 800b884:	7afb      	ldrb	r3, [r7, #11]
 800b886:	3301      	adds	r3, #1
 800b888:	72fb      	strb	r3, [r7, #11]
          break;
 800b88a:	e007      	b.n	800b89c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fa0d 	bl	800bcae <USBD_CtlError>
          err++;
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	3301      	adds	r3, #1
 800b898:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b89a:	e038      	b.n	800b90e <USBD_GetDescriptor+0x286>
 800b89c:	e037      	b.n	800b90e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	7c1b      	ldrb	r3, [r3, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d109      	bne.n	800b8ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ae:	f107 0208 	add.w	r2, r7, #8
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	4798      	blx	r3
 800b8b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8b8:	e029      	b.n	800b90e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 f9f6 	bl	800bcae <USBD_CtlError>
        err++;
 800b8c2:	7afb      	ldrb	r3, [r7, #11]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b8c8:	e021      	b.n	800b90e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	7c1b      	ldrb	r3, [r3, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10d      	bne.n	800b8ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8da:	f107 0208 	add.w	r2, r7, #8
 800b8de:	4610      	mov	r0, r2
 800b8e0:	4798      	blx	r3
 800b8e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	2207      	movs	r2, #7
 800b8ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8ec:	e00f      	b.n	800b90e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f9dc 	bl	800bcae <USBD_CtlError>
        err++;
 800b8f6:	7afb      	ldrb	r3, [r7, #11]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b8fc:	e007      	b.n	800b90e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f9d4 	bl	800bcae <USBD_CtlError>
      err++;
 800b906:	7afb      	ldrb	r3, [r7, #11]
 800b908:	3301      	adds	r3, #1
 800b90a:	72fb      	strb	r3, [r7, #11]
      break;
 800b90c:	bf00      	nop
  }

  if (err != 0U)
 800b90e:	7afb      	ldrb	r3, [r7, #11]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d11c      	bne.n	800b94e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b914:	893b      	ldrh	r3, [r7, #8]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d011      	beq.n	800b93e <USBD_GetDescriptor+0x2b6>
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	88db      	ldrh	r3, [r3, #6]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00d      	beq.n	800b93e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	88da      	ldrh	r2, [r3, #6]
 800b926:	893b      	ldrh	r3, [r7, #8]
 800b928:	4293      	cmp	r3, r2
 800b92a:	bf28      	it	cs
 800b92c:	4613      	movcs	r3, r2
 800b92e:	b29b      	uxth	r3, r3
 800b930:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b932:	893b      	ldrh	r3, [r7, #8]
 800b934:	461a      	mov	r2, r3
 800b936:	68f9      	ldr	r1, [r7, #12]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fa22 	bl	800bd82 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	88db      	ldrh	r3, [r3, #6]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d104      	bne.n	800b950 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fa79 	bl	800be3e <USBD_CtlSendStatus>
 800b94c:	e000      	b.n	800b950 <USBD_GetDescriptor+0x2c8>
    return;
 800b94e:	bf00      	nop
    }
  }
}
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop

0800b958 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	889b      	ldrh	r3, [r3, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d130      	bne.n	800b9cc <USBD_SetAddress+0x74>
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	88db      	ldrh	r3, [r3, #6]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d12c      	bne.n	800b9cc <USBD_SetAddress+0x74>
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	885b      	ldrh	r3, [r3, #2]
 800b976:	2b7f      	cmp	r3, #127	; 0x7f
 800b978:	d828      	bhi.n	800b9cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	885b      	ldrh	r3, [r3, #2]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b984:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d104      	bne.n	800b99a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f98b 	bl	800bcae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b998:	e01d      	b.n	800b9d6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	7bfa      	ldrb	r2, [r7, #15]
 800b99e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fe4e 	bl	800c648 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fa46 	bl	800be3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d004      	beq.n	800b9c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c0:	e009      	b.n	800b9d6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ca:	e004      	b.n	800b9d6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f96d 	bl	800bcae <USBD_CtlError>
  }
}
 800b9d4:	bf00      	nop
 800b9d6:	bf00      	nop
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
	...

0800b9e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	885b      	ldrh	r3, [r3, #2]
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	4b41      	ldr	r3, [pc, #260]	; (800baf8 <USBD_SetConfig+0x118>)
 800b9f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b9f4:	4b40      	ldr	r3, [pc, #256]	; (800baf8 <USBD_SetConfig+0x118>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d904      	bls.n	800ba06 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f955 	bl	800bcae <USBD_CtlError>
 800ba04:	e075      	b.n	800baf2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d002      	beq.n	800ba16 <USBD_SetConfig+0x36>
 800ba10:	2b03      	cmp	r3, #3
 800ba12:	d023      	beq.n	800ba5c <USBD_SetConfig+0x7c>
 800ba14:	e062      	b.n	800badc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ba16:	4b38      	ldr	r3, [pc, #224]	; (800baf8 <USBD_SetConfig+0x118>)
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d01a      	beq.n	800ba54 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ba1e:	4b36      	ldr	r3, [pc, #216]	; (800baf8 <USBD_SetConfig+0x118>)
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	461a      	mov	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2203      	movs	r2, #3
 800ba2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba30:	4b31      	ldr	r3, [pc, #196]	; (800baf8 <USBD_SetConfig+0x118>)
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	4619      	mov	r1, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff f9e7 	bl	800ae0a <USBD_SetClassConfig>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d104      	bne.n	800ba4c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f932 	bl	800bcae <USBD_CtlError>
            return;
 800ba4a:	e052      	b.n	800baf2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f9f6 	bl	800be3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba52:	e04e      	b.n	800baf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f9f2 	bl	800be3e <USBD_CtlSendStatus>
        break;
 800ba5a:	e04a      	b.n	800baf2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ba5c:	4b26      	ldr	r3, [pc, #152]	; (800baf8 <USBD_SetConfig+0x118>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d112      	bne.n	800ba8a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2202      	movs	r2, #2
 800ba68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ba6c:	4b22      	ldr	r3, [pc, #136]	; (800baf8 <USBD_SetConfig+0x118>)
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	461a      	mov	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ba76:	4b20      	ldr	r3, [pc, #128]	; (800baf8 <USBD_SetConfig+0x118>)
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7ff f9e3 	bl	800ae48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f9db 	bl	800be3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba88:	e033      	b.n	800baf2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ba8a:	4b1b      	ldr	r3, [pc, #108]	; (800baf8 <USBD_SetConfig+0x118>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d01d      	beq.n	800bad4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff f9d1 	bl	800ae48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800baa6:	4b14      	ldr	r3, [pc, #80]	; (800baf8 <USBD_SetConfig+0x118>)
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bab0:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <USBD_SetConfig+0x118>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff f9a7 	bl	800ae0a <USBD_SetClassConfig>
 800babc:	4603      	mov	r3, r0
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d104      	bne.n	800bacc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f8f2 	bl	800bcae <USBD_CtlError>
            return;
 800baca:	e012      	b.n	800baf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f9b6 	bl	800be3e <USBD_CtlSendStatus>
        break;
 800bad2:	e00e      	b.n	800baf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f9b2 	bl	800be3e <USBD_CtlSendStatus>
        break;
 800bada:	e00a      	b.n	800baf2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f8e5 	bl	800bcae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bae4:	4b04      	ldr	r3, [pc, #16]	; (800baf8 <USBD_SetConfig+0x118>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	4619      	mov	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7ff f9ac 	bl	800ae48 <USBD_ClrClassConfig>
        break;
 800baf0:	bf00      	nop
    }
  }
}
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	20000638 	.word	0x20000638

0800bafc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	88db      	ldrh	r3, [r3, #6]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d004      	beq.n	800bb18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb0e:	6839      	ldr	r1, [r7, #0]
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f8cc 	bl	800bcae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb16:	e022      	b.n	800bb5e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	dc02      	bgt.n	800bb28 <USBD_GetConfig+0x2c>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	dc03      	bgt.n	800bb2e <USBD_GetConfig+0x32>
 800bb26:	e015      	b.n	800bb54 <USBD_GetConfig+0x58>
 800bb28:	2b03      	cmp	r3, #3
 800bb2a:	d00b      	beq.n	800bb44 <USBD_GetConfig+0x48>
 800bb2c:	e012      	b.n	800bb54 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3308      	adds	r3, #8
 800bb38:	2201      	movs	r2, #1
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f920 	bl	800bd82 <USBD_CtlSendData>
        break;
 800bb42:	e00c      	b.n	800bb5e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3304      	adds	r3, #4
 800bb48:	2201      	movs	r2, #1
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f918 	bl	800bd82 <USBD_CtlSendData>
        break;
 800bb52:	e004      	b.n	800bb5e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f8a9 	bl	800bcae <USBD_CtlError>
        break;
 800bb5c:	bf00      	nop
}
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb76:	3b01      	subs	r3, #1
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d81e      	bhi.n	800bbba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	88db      	ldrh	r3, [r3, #6]
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	d004      	beq.n	800bb8e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f891 	bl	800bcae <USBD_CtlError>
        break;
 800bb8c:	e01a      	b.n	800bbc4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d005      	beq.n	800bbaa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	f043 0202 	orr.w	r2, r3, #2
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	330c      	adds	r3, #12
 800bbae:	2202      	movs	r2, #2
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f8e5 	bl	800bd82 <USBD_CtlSendData>
      break;
 800bbb8:	e004      	b.n	800bbc4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f876 	bl	800bcae <USBD_CtlError>
      break;
 800bbc2:	bf00      	nop
  }
}
 800bbc4:	bf00      	nop
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	885b      	ldrh	r3, [r3, #2]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d106      	bne.n	800bbec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f929 	bl	800be3e <USBD_CtlSendStatus>
  }
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc04:	3b01      	subs	r3, #1
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d80b      	bhi.n	800bc22 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	885b      	ldrh	r3, [r3, #2]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d10c      	bne.n	800bc2c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f90f 	bl	800be3e <USBD_CtlSendStatus>
      }
      break;
 800bc20:	e004      	b.n	800bc2c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f842 	bl	800bcae <USBD_CtlError>
      break;
 800bc2a:	e000      	b.n	800bc2e <USBD_ClrFeature+0x3a>
      break;
 800bc2c:	bf00      	nop
  }
}
 800bc2e:	bf00      	nop
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc36:	b480      	push	{r7}
 800bc38:	b083      	sub	sp, #12
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	781a      	ldrb	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	785a      	ldrb	r2, [r3, #1]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	3302      	adds	r3, #2
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	3303      	adds	r3, #3
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	021b      	lsls	r3, r3, #8
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	4413      	add	r3, r2
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	3305      	adds	r3, #5
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	021b      	lsls	r3, r3, #8
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	4413      	add	r3, r2
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	3306      	adds	r3, #6
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	3307      	adds	r3, #7
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	021b      	lsls	r3, r3, #8
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	4413      	add	r3, r2
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	80da      	strh	r2, [r3, #6]

}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bc80      	pop	{r7}
 800bcac:	4770      	bx	lr

0800bcae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b082      	sub	sp, #8
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bcb8:	2180      	movs	r1, #128	; 0x80
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 fc5a 	bl	800c574 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fc56 	bl	800c574 <USBD_LL_StallEP>
}
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d032      	beq.n	800bd4c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f000 f834 	bl	800bd54 <USBD_GetLen>
 800bcec:	4603      	mov	r3, r0
 800bcee:	3301      	adds	r3, #1
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	005b      	lsls	r3, r3, #1
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	75fa      	strb	r2, [r7, #23]
 800bd00:	461a      	mov	r2, r3
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	4413      	add	r3, r2
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	7812      	ldrb	r2, [r2, #0]
 800bd0a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	1c5a      	adds	r2, r3, #1
 800bd10:	75fa      	strb	r2, [r7, #23]
 800bd12:	461a      	mov	r2, r3
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	4413      	add	r3, r2
 800bd18:	2203      	movs	r2, #3
 800bd1a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bd1c:	e012      	b.n	800bd44 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	1c5a      	adds	r2, r3, #1
 800bd22:	60fa      	str	r2, [r7, #12]
 800bd24:	7dfa      	ldrb	r2, [r7, #23]
 800bd26:	1c51      	adds	r1, r2, #1
 800bd28:	75f9      	strb	r1, [r7, #23]
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	440a      	add	r2, r1
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bd34:	7dfb      	ldrb	r3, [r7, #23]
 800bd36:	1c5a      	adds	r2, r3, #1
 800bd38:	75fa      	strb	r2, [r7, #23]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	4413      	add	r3, r2
 800bd40:	2200      	movs	r2, #0
 800bd42:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e8      	bne.n	800bd1e <USBD_GetString+0x4e>
    }
  }
}
 800bd4c:	bf00      	nop
 800bd4e:	3718      	adds	r7, #24
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bd60:	e005      	b.n	800bd6e <USBD_GetLen+0x1a>
  {
    len++;
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
 800bd64:	3301      	adds	r3, #1
 800bd66:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1f5      	bne.n	800bd62 <USBD_GetLen+0xe>
  }

  return len;
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bc80      	pop	{r7}
 800bd80:	4770      	bx	lr

0800bd82 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b084      	sub	sp, #16
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	60f8      	str	r0, [r7, #12]
 800bd8a:	60b9      	str	r1, [r7, #8]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bd98:	88fa      	ldrh	r2, [r7, #6]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bd9e:	88fa      	ldrh	r2, [r7, #6]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bda4:	88fb      	ldrh	r3, [r7, #6]
 800bda6:	68ba      	ldr	r2, [r7, #8]
 800bda8:	2100      	movs	r1, #0
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 fc6b 	bl	800c686 <USBD_LL_Transmit>

  return USBD_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b084      	sub	sp, #16
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdc8:	88fb      	ldrh	r3, [r7, #6]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	2100      	movs	r1, #0
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 fc59 	bl	800c686 <USBD_LL_Transmit>

  return USBD_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b084      	sub	sp, #16
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	60f8      	str	r0, [r7, #12]
 800bde6:	60b9      	str	r1, [r7, #8]
 800bde8:	4613      	mov	r3, r2
 800bdea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2203      	movs	r2, #3
 800bdf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bdf4:	88fa      	ldrh	r2, [r7, #6]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bdfc:	88fa      	ldrh	r2, [r7, #6]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be04:	88fb      	ldrh	r3, [r7, #6]
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	2100      	movs	r1, #0
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f000 fc5e 	bl	800c6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b084      	sub	sp, #16
 800be1e:	af00      	add	r7, sp, #0
 800be20:	60f8      	str	r0, [r7, #12]
 800be22:	60b9      	str	r1, [r7, #8]
 800be24:	4613      	mov	r3, r2
 800be26:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be28:	88fb      	ldrh	r3, [r7, #6]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	2100      	movs	r1, #0
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f000 fc4c 	bl	800c6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2204      	movs	r2, #4
 800be4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be4e:	2300      	movs	r3, #0
 800be50:	2200      	movs	r2, #0
 800be52:	2100      	movs	r1, #0
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fc16 	bl	800c686 <USBD_LL_Transmit>

  return USBD_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2205      	movs	r2, #5
 800be70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be74:	2300      	movs	r3, #0
 800be76:	2200      	movs	r2, #0
 800be78:	2100      	movs	r1, #0
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fc26 	bl	800c6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3708      	adds	r7, #8
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
	...

0800be8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be90:	2200      	movs	r2, #0
 800be92:	4912      	ldr	r1, [pc, #72]	; (800bedc <MX_USB_DEVICE_Init+0x50>)
 800be94:	4812      	ldr	r0, [pc, #72]	; (800bee0 <MX_USB_DEVICE_Init+0x54>)
 800be96:	f7fe ff5e 	bl	800ad56 <USBD_Init>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d001      	beq.n	800bea4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bea0:	f7f7 f8b6 	bl	8003010 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bea4:	490f      	ldr	r1, [pc, #60]	; (800bee4 <MX_USB_DEVICE_Init+0x58>)
 800bea6:	480e      	ldr	r0, [pc, #56]	; (800bee0 <MX_USB_DEVICE_Init+0x54>)
 800bea8:	f7fe ff80 	bl	800adac <USBD_RegisterClass>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800beb2:	f7f7 f8ad 	bl	8003010 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800beb6:	490c      	ldr	r1, [pc, #48]	; (800bee8 <MX_USB_DEVICE_Init+0x5c>)
 800beb8:	4809      	ldr	r0, [pc, #36]	; (800bee0 <MX_USB_DEVICE_Init+0x54>)
 800beba:	f7fe feb1 	bl	800ac20 <USBD_CDC_RegisterInterface>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bec4:	f7f7 f8a4 	bl	8003010 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bec8:	4805      	ldr	r0, [pc, #20]	; (800bee0 <MX_USB_DEVICE_Init+0x54>)
 800beca:	f7fe ff88 	bl	800adde <USBD_Start>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bed4:	f7f7 f89c 	bl	8003010 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bed8:	bf00      	nop
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	2000012c 	.word	0x2000012c
 800bee0:	2000063c 	.word	0x2000063c
 800bee4:	20000018 	.word	0x20000018
 800bee8:	2000011c 	.word	0x2000011c

0800beec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bef0:	2200      	movs	r2, #0
 800bef2:	4905      	ldr	r1, [pc, #20]	; (800bf08 <CDC_Init_FS+0x1c>)
 800bef4:	4805      	ldr	r0, [pc, #20]	; (800bf0c <CDC_Init_FS+0x20>)
 800bef6:	f7fe fea9 	bl	800ac4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800befa:	4905      	ldr	r1, [pc, #20]	; (800bf10 <CDC_Init_FS+0x24>)
 800befc:	4803      	ldr	r0, [pc, #12]	; (800bf0c <CDC_Init_FS+0x20>)
 800befe:	f7fe febe 	bl	800ac7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	20000d00 	.word	0x20000d00
 800bf0c:	2000063c 	.word	0x2000063c
 800bf10:	20000900 	.word	0x20000900

0800bf14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf14:	b480      	push	{r7}
 800bf16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bc80      	pop	{r7}
 800bf20:	4770      	bx	lr
	...

0800bf24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	6039      	str	r1, [r7, #0]
 800bf2e:	71fb      	strb	r3, [r7, #7]
 800bf30:	4613      	mov	r3, r2
 800bf32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf34:	79fb      	ldrb	r3, [r7, #7]
 800bf36:	2b23      	cmp	r3, #35	; 0x23
 800bf38:	d84a      	bhi.n	800bfd0 <CDC_Control_FS+0xac>
 800bf3a:	a201      	add	r2, pc, #4	; (adr r2, 800bf40 <CDC_Control_FS+0x1c>)
 800bf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf40:	0800bfd1 	.word	0x0800bfd1
 800bf44:	0800bfd1 	.word	0x0800bfd1
 800bf48:	0800bfd1 	.word	0x0800bfd1
 800bf4c:	0800bfd1 	.word	0x0800bfd1
 800bf50:	0800bfd1 	.word	0x0800bfd1
 800bf54:	0800bfd1 	.word	0x0800bfd1
 800bf58:	0800bfd1 	.word	0x0800bfd1
 800bf5c:	0800bfd1 	.word	0x0800bfd1
 800bf60:	0800bfd1 	.word	0x0800bfd1
 800bf64:	0800bfd1 	.word	0x0800bfd1
 800bf68:	0800bfd1 	.word	0x0800bfd1
 800bf6c:	0800bfd1 	.word	0x0800bfd1
 800bf70:	0800bfd1 	.word	0x0800bfd1
 800bf74:	0800bfd1 	.word	0x0800bfd1
 800bf78:	0800bfd1 	.word	0x0800bfd1
 800bf7c:	0800bfd1 	.word	0x0800bfd1
 800bf80:	0800bfd1 	.word	0x0800bfd1
 800bf84:	0800bfd1 	.word	0x0800bfd1
 800bf88:	0800bfd1 	.word	0x0800bfd1
 800bf8c:	0800bfd1 	.word	0x0800bfd1
 800bf90:	0800bfd1 	.word	0x0800bfd1
 800bf94:	0800bfd1 	.word	0x0800bfd1
 800bf98:	0800bfd1 	.word	0x0800bfd1
 800bf9c:	0800bfd1 	.word	0x0800bfd1
 800bfa0:	0800bfd1 	.word	0x0800bfd1
 800bfa4:	0800bfd1 	.word	0x0800bfd1
 800bfa8:	0800bfd1 	.word	0x0800bfd1
 800bfac:	0800bfd1 	.word	0x0800bfd1
 800bfb0:	0800bfd1 	.word	0x0800bfd1
 800bfb4:	0800bfd1 	.word	0x0800bfd1
 800bfb8:	0800bfd1 	.word	0x0800bfd1
 800bfbc:	0800bfd1 	.word	0x0800bfd1
 800bfc0:	0800bfd1 	.word	0x0800bfd1
 800bfc4:	0800bfd1 	.word	0x0800bfd1
 800bfc8:	0800bfd1 	.word	0x0800bfd1
 800bfcc:	0800bfd1 	.word	0x0800bfd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bfd0:	bf00      	nop
  }

  return (USBD_OK);
 800bfd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bc80      	pop	{r7}
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop

0800bfe0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bfea:	6879      	ldr	r1, [r7, #4]
 800bfec:	4808      	ldr	r0, [pc, #32]	; (800c010 <CDC_Receive_FS+0x30>)
 800bfee:	f7fe fe46 	bl	800ac7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bff2:	4807      	ldr	r0, [pc, #28]	; (800c010 <CDC_Receive_FS+0x30>)
 800bff4:	f7fe fe85 	bl	800ad02 <USBD_CDC_ReceivePacket>
  USB_Packet_Received(&Buf[0], Len[0]);
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4619      	mov	r1, r3
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f7f5 fcb6 	bl	8001970 <USB_Packet_Received>
  return (USBD_OK);
 800c004:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	2000063c 	.word	0x2000063c

0800c014 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	460b      	mov	r3, r1
 800c01e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c024:	4b0d      	ldr	r3, [pc, #52]	; (800c05c <CDC_Transmit_FS+0x48>)
 800c026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c02a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c036:	2301      	movs	r3, #1
 800c038:	e00b      	b.n	800c052 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c03a:	887b      	ldrh	r3, [r7, #2]
 800c03c:	461a      	mov	r2, r3
 800c03e:	6879      	ldr	r1, [r7, #4]
 800c040:	4806      	ldr	r0, [pc, #24]	; (800c05c <CDC_Transmit_FS+0x48>)
 800c042:	f7fe fe03 	bl	800ac4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c046:	4805      	ldr	r0, [pc, #20]	; (800c05c <CDC_Transmit_FS+0x48>)
 800c048:	f7fe fe2c 	bl	800aca4 <USBD_CDC_TransmitPacket>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c050:	7bfb      	ldrb	r3, [r7, #15]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	2000063c 	.word	0x2000063c

0800c060 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	4603      	mov	r3, r0
 800c068:	6039      	str	r1, [r7, #0]
 800c06a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	2212      	movs	r2, #18
 800c070:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c072:	4b03      	ldr	r3, [pc, #12]	; (800c080 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c074:	4618      	mov	r0, r3
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	bc80      	pop	{r7}
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	20000148 	.word	0x20000148

0800c084 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	6039      	str	r1, [r7, #0]
 800c08e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	2204      	movs	r2, #4
 800c094:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c096:	4b03      	ldr	r3, [pc, #12]	; (800c0a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c098:	4618      	mov	r0, r3
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bc80      	pop	{r7}
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	2000015c 	.word	0x2000015c

0800c0a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	6039      	str	r1, [r7, #0]
 800c0b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0b4:	79fb      	ldrb	r3, [r7, #7]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d105      	bne.n	800c0c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	4907      	ldr	r1, [pc, #28]	; (800c0dc <USBD_FS_ProductStrDescriptor+0x34>)
 800c0be:	4808      	ldr	r0, [pc, #32]	; (800c0e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0c0:	f7ff fe06 	bl	800bcd0 <USBD_GetString>
 800c0c4:	e004      	b.n	800c0d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	4904      	ldr	r1, [pc, #16]	; (800c0dc <USBD_FS_ProductStrDescriptor+0x34>)
 800c0ca:	4805      	ldr	r0, [pc, #20]	; (800c0e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0cc:	f7ff fe00 	bl	800bcd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0d0:	4b02      	ldr	r3, [pc, #8]	; (800c0dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20001100 	.word	0x20001100
 800c0e0:	0800c87c 	.word	0x0800c87c

0800c0e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	6039      	str	r1, [r7, #0]
 800c0ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	4904      	ldr	r1, [pc, #16]	; (800c104 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c0f4:	4804      	ldr	r0, [pc, #16]	; (800c108 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c0f6:	f7ff fdeb 	bl	800bcd0 <USBD_GetString>
  return USBD_StrDesc;
 800c0fa:	4b02      	ldr	r3, [pc, #8]	; (800c104 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	20001100 	.word	0x20001100
 800c108:	0800c890 	.word	0x0800c890

0800c10c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	4603      	mov	r3, r0
 800c114:	6039      	str	r1, [r7, #0]
 800c116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	221a      	movs	r2, #26
 800c11c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c11e:	f000 f843 	bl	800c1a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c122:	4b02      	ldr	r3, [pc, #8]	; (800c12c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c124:	4618      	mov	r0, r3
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	20000160 	.word	0x20000160

0800c130 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	6039      	str	r1, [r7, #0]
 800c13a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c13c:	79fb      	ldrb	r3, [r7, #7]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d105      	bne.n	800c14e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	4907      	ldr	r1, [pc, #28]	; (800c164 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c146:	4808      	ldr	r0, [pc, #32]	; (800c168 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c148:	f7ff fdc2 	bl	800bcd0 <USBD_GetString>
 800c14c:	e004      	b.n	800c158 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	4904      	ldr	r1, [pc, #16]	; (800c164 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c152:	4805      	ldr	r0, [pc, #20]	; (800c168 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c154:	f7ff fdbc 	bl	800bcd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c158:	4b02      	ldr	r3, [pc, #8]	; (800c164 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	20001100 	.word	0x20001100
 800c168:	0800c8a4 	.word	0x0800c8a4

0800c16c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	6039      	str	r1, [r7, #0]
 800c176:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c178:	79fb      	ldrb	r3, [r7, #7]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d105      	bne.n	800c18a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c17e:	683a      	ldr	r2, [r7, #0]
 800c180:	4907      	ldr	r1, [pc, #28]	; (800c1a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c182:	4808      	ldr	r0, [pc, #32]	; (800c1a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c184:	f7ff fda4 	bl	800bcd0 <USBD_GetString>
 800c188:	e004      	b.n	800c194 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	4904      	ldr	r1, [pc, #16]	; (800c1a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c18e:	4805      	ldr	r0, [pc, #20]	; (800c1a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c190:	f7ff fd9e 	bl	800bcd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c194:	4b02      	ldr	r3, [pc, #8]	; (800c1a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c196:	4618      	mov	r0, r3
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	20001100 	.word	0x20001100
 800c1a4:	0800c8b0 	.word	0x0800c8b0

0800c1a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1ae:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <Get_SerialNum+0x44>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1b4:	4b0e      	ldr	r3, [pc, #56]	; (800c1f0 <Get_SerialNum+0x48>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1ba:	4b0e      	ldr	r3, [pc, #56]	; (800c1f4 <Get_SerialNum+0x4c>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d009      	beq.n	800c1e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c1ce:	2208      	movs	r2, #8
 800c1d0:	4909      	ldr	r1, [pc, #36]	; (800c1f8 <Get_SerialNum+0x50>)
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f000 f814 	bl	800c200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c1d8:	2204      	movs	r2, #4
 800c1da:	4908      	ldr	r1, [pc, #32]	; (800c1fc <Get_SerialNum+0x54>)
 800c1dc:	68b8      	ldr	r0, [r7, #8]
 800c1de:	f000 f80f 	bl	800c200 <IntToUnicode>
  }
}
 800c1e2:	bf00      	nop
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	1ffff7e8 	.word	0x1ffff7e8
 800c1f0:	1ffff7ec 	.word	0x1ffff7ec
 800c1f4:	1ffff7f0 	.word	0x1ffff7f0
 800c1f8:	20000162 	.word	0x20000162
 800c1fc:	20000172 	.word	0x20000172

0800c200 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c200:	b480      	push	{r7}
 800c202:	b087      	sub	sp, #28
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	4613      	mov	r3, r2
 800c20c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c212:	2300      	movs	r3, #0
 800c214:	75fb      	strb	r3, [r7, #23]
 800c216:	e027      	b.n	800c268 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	0f1b      	lsrs	r3, r3, #28
 800c21c:	2b09      	cmp	r3, #9
 800c21e:	d80b      	bhi.n	800c238 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	0f1b      	lsrs	r3, r3, #28
 800c224:	b2da      	uxtb	r2, r3
 800c226:	7dfb      	ldrb	r3, [r7, #23]
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	4619      	mov	r1, r3
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	440b      	add	r3, r1
 800c230:	3230      	adds	r2, #48	; 0x30
 800c232:	b2d2      	uxtb	r2, r2
 800c234:	701a      	strb	r2, [r3, #0]
 800c236:	e00a      	b.n	800c24e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	0f1b      	lsrs	r3, r3, #28
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	005b      	lsls	r3, r3, #1
 800c242:	4619      	mov	r1, r3
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	440b      	add	r3, r1
 800c248:	3237      	adds	r2, #55	; 0x37
 800c24a:	b2d2      	uxtb	r2, r2
 800c24c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	011b      	lsls	r3, r3, #4
 800c252:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c254:	7dfb      	ldrb	r3, [r7, #23]
 800c256:	005b      	lsls	r3, r3, #1
 800c258:	3301      	adds	r3, #1
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	4413      	add	r3, r2
 800c25e:	2200      	movs	r2, #0
 800c260:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c262:	7dfb      	ldrb	r3, [r7, #23]
 800c264:	3301      	adds	r3, #1
 800c266:	75fb      	strb	r3, [r7, #23]
 800c268:	7dfa      	ldrb	r2, [r7, #23]
 800c26a:	79fb      	ldrb	r3, [r7, #7]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d3d3      	bcc.n	800c218 <IntToUnicode+0x18>
  }
}
 800c270:	bf00      	nop
 800c272:	bf00      	nop
 800c274:	371c      	adds	r7, #28
 800c276:	46bd      	mov	sp, r7
 800c278:	bc80      	pop	{r7}
 800c27a:	4770      	bx	lr

0800c27c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a0d      	ldr	r2, [pc, #52]	; (800c2c0 <HAL_PCD_MspInit+0x44>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d113      	bne.n	800c2b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c28e:	4b0d      	ldr	r3, [pc, #52]	; (800c2c4 <HAL_PCD_MspInit+0x48>)
 800c290:	69db      	ldr	r3, [r3, #28]
 800c292:	4a0c      	ldr	r2, [pc, #48]	; (800c2c4 <HAL_PCD_MspInit+0x48>)
 800c294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c298:	61d3      	str	r3, [r2, #28]
 800c29a:	4b0a      	ldr	r3, [pc, #40]	; (800c2c4 <HAL_PCD_MspInit+0x48>)
 800c29c:	69db      	ldr	r3, [r3, #28]
 800c29e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2a2:	60fb      	str	r3, [r7, #12]
 800c2a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	2103      	movs	r1, #3
 800c2aa:	2014      	movs	r0, #20
 800c2ac:	f7f7 fe3b 	bl	8003f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c2b0:	2014      	movs	r0, #20
 800c2b2:	f7f7 fe54 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c2b6:	bf00      	nop
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	40005c00 	.word	0x40005c00
 800c2c4:	40021000 	.word	0x40021000

0800c2c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4610      	mov	r0, r2
 800c2e0:	f7fe fdc5 	bl	800ae6e <USBD_LL_SetupStage>
}
 800c2e4:	bf00      	nop
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c2fe:	78fa      	ldrb	r2, [r7, #3]
 800c300:	6879      	ldr	r1, [r7, #4]
 800c302:	4613      	mov	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4413      	add	r3, r2
 800c308:	00db      	lsls	r3, r3, #3
 800c30a:	440b      	add	r3, r1
 800c30c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	78fb      	ldrb	r3, [r7, #3]
 800c314:	4619      	mov	r1, r3
 800c316:	f7fe fdf7 	bl	800af08 <USBD_LL_DataOutStage>
}
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b082      	sub	sp, #8
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	460b      	mov	r3, r1
 800c32c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c334:	78fa      	ldrb	r2, [r7, #3]
 800c336:	6879      	ldr	r1, [r7, #4]
 800c338:	4613      	mov	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4413      	add	r3, r2
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	440b      	add	r3, r1
 800c342:	333c      	adds	r3, #60	; 0x3c
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	78fb      	ldrb	r3, [r7, #3]
 800c348:	4619      	mov	r1, r3
 800c34a:	f7fe fe4e 	bl	800afea <USBD_LL_DataInStage>
}
 800c34e:	bf00      	nop
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b082      	sub	sp, #8
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c364:	4618      	mov	r0, r3
 800c366:	f7fe ff5e 	bl	800b226 <USBD_LL_SOF>
}
 800c36a:	bf00      	nop
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b084      	sub	sp, #16
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c37a:	2301      	movs	r3, #1
 800c37c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	2b02      	cmp	r3, #2
 800c384:	d001      	beq.n	800c38a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c386:	f7f6 fe43 	bl	8003010 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c390:	7bfa      	ldrb	r2, [r7, #15]
 800c392:	4611      	mov	r1, r2
 800c394:	4618      	mov	r0, r3
 800c396:	f7fe ff0e 	bl	800b1b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fe fec7 	bl	800b134 <USBD_LL_Reset>
}
 800c3a6:	bf00      	nop
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
	...

0800c3b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe ff08 	bl	800b1d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d005      	beq.n	800c3d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3cc:	4b04      	ldr	r3, [pc, #16]	; (800c3e0 <HAL_PCD_SuspendCallback+0x30>)
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	4a03      	ldr	r2, [pc, #12]	; (800c3e0 <HAL_PCD_SuspendCallback+0x30>)
 800c3d2:	f043 0306 	orr.w	r3, r3, #6
 800c3d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	e000ed00 	.word	0xe000ed00

0800c3e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe ff02 	bl	800b1fc <USBD_LL_Resume>
}
 800c3f8:	bf00      	nop
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c408:	4a28      	ldr	r2, [pc, #160]	; (800c4ac <USBD_LL_Init+0xac>)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a26      	ldr	r2, [pc, #152]	; (800c4ac <USBD_LL_Init+0xac>)
 800c414:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c418:	4b24      	ldr	r3, [pc, #144]	; (800c4ac <USBD_LL_Init+0xac>)
 800c41a:	4a25      	ldr	r2, [pc, #148]	; (800c4b0 <USBD_LL_Init+0xb0>)
 800c41c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c41e:	4b23      	ldr	r3, [pc, #140]	; (800c4ac <USBD_LL_Init+0xac>)
 800c420:	2208      	movs	r2, #8
 800c422:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c424:	4b21      	ldr	r3, [pc, #132]	; (800c4ac <USBD_LL_Init+0xac>)
 800c426:	2202      	movs	r2, #2
 800c428:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c42a:	4b20      	ldr	r3, [pc, #128]	; (800c4ac <USBD_LL_Init+0xac>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c430:	4b1e      	ldr	r3, [pc, #120]	; (800c4ac <USBD_LL_Init+0xac>)
 800c432:	2200      	movs	r2, #0
 800c434:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c436:	4b1d      	ldr	r3, [pc, #116]	; (800c4ac <USBD_LL_Init+0xac>)
 800c438:	2200      	movs	r2, #0
 800c43a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c43c:	481b      	ldr	r0, [pc, #108]	; (800c4ac <USBD_LL_Init+0xac>)
 800c43e:	f7f8 f9c3 	bl	80047c8 <HAL_PCD_Init>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d001      	beq.n	800c44c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c448:	f7f6 fde2 	bl	8003010 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c452:	2318      	movs	r3, #24
 800c454:	2200      	movs	r2, #0
 800c456:	2100      	movs	r1, #0
 800c458:	f7f9 fe37 	bl	80060ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c462:	2358      	movs	r3, #88	; 0x58
 800c464:	2200      	movs	r2, #0
 800c466:	2180      	movs	r1, #128	; 0x80
 800c468:	f7f9 fe2f 	bl	80060ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c472:	23c0      	movs	r3, #192	; 0xc0
 800c474:	2200      	movs	r2, #0
 800c476:	2181      	movs	r1, #129	; 0x81
 800c478:	f7f9 fe27 	bl	80060ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c482:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c486:	2200      	movs	r2, #0
 800c488:	2101      	movs	r1, #1
 800c48a:	f7f9 fe1e 	bl	80060ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c498:	2200      	movs	r2, #0
 800c49a:	2182      	movs	r1, #130	; 0x82
 800c49c:	f7f9 fe15 	bl	80060ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	20001300 	.word	0x20001300
 800c4b0:	40005c00 	.word	0x40005c00

0800c4b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7f8 fa87 	bl	80049de <HAL_PCD_Start>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 f94e 	bl	800c778 <USBD_Get_USB_Status>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b084      	sub	sp, #16
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	4608      	mov	r0, r1
 800c4f4:	4611      	mov	r1, r2
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	70fb      	strb	r3, [r7, #3]
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	70bb      	strb	r3, [r7, #2]
 800c500:	4613      	mov	r3, r2
 800c502:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c512:	78bb      	ldrb	r3, [r7, #2]
 800c514:	883a      	ldrh	r2, [r7, #0]
 800c516:	78f9      	ldrb	r1, [r7, #3]
 800c518:	f7f8 fbff 	bl	8004d1a <HAL_PCD_EP_Open>
 800c51c:	4603      	mov	r3, r0
 800c51e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c520:	7bfb      	ldrb	r3, [r7, #15]
 800c522:	4618      	mov	r0, r3
 800c524:	f000 f928 	bl	800c778 <USBD_Get_USB_Status>
 800c528:	4603      	mov	r3, r0
 800c52a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	460b      	mov	r3, r1
 800c540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c542:	2300      	movs	r3, #0
 800c544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c550:	78fa      	ldrb	r2, [r7, #3]
 800c552:	4611      	mov	r1, r2
 800c554:	4618      	mov	r0, r3
 800c556:	f7f8 fc46 	bl	8004de6 <HAL_PCD_EP_Close>
 800c55a:	4603      	mov	r3, r0
 800c55c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
 800c560:	4618      	mov	r0, r3
 800c562:	f000 f909 	bl	800c778 <USBD_Get_USB_Status>
 800c566:	4603      	mov	r3, r0
 800c568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	460b      	mov	r3, r1
 800c57e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c584:	2300      	movs	r3, #0
 800c586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c58e:	78fa      	ldrb	r2, [r7, #3]
 800c590:	4611      	mov	r1, r2
 800c592:	4618      	mov	r0, r3
 800c594:	f7f8 fd06 	bl	8004fa4 <HAL_PCD_EP_SetStall>
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f000 f8ea 	bl	800c778 <USBD_Get_USB_Status>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b084      	sub	sp, #16
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5cc:	78fa      	ldrb	r2, [r7, #3]
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7f8 fd47 	bl	8005064 <HAL_PCD_EP_ClrStall>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5da:	7bfb      	ldrb	r3, [r7, #15]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 f8cb 	bl	800c778 <USBD_Get_USB_Status>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c602:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	da0c      	bge.n	800c626 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c60c:	78fb      	ldrb	r3, [r7, #3]
 800c60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	1c5a      	adds	r2, r3, #1
 800c616:	4613      	mov	r3, r2
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	4413      	add	r3, r2
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	440b      	add	r3, r1
 800c620:	3302      	adds	r3, #2
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	e00b      	b.n	800c63e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c626:	78fb      	ldrb	r3, [r7, #3]
 800c628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c62c:	68f9      	ldr	r1, [r7, #12]
 800c62e:	4613      	mov	r3, r2
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4413      	add	r3, r2
 800c634:	00db      	lsls	r3, r3, #3
 800c636:	440b      	add	r3, r1
 800c638:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c63c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	bc80      	pop	{r7}
 800c646:	4770      	bx	lr

0800c648 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	460b      	mov	r3, r1
 800c652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c654:	2300      	movs	r3, #0
 800c656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c662:	78fa      	ldrb	r2, [r7, #3]
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7f8 fb32 	bl	8004cd0 <HAL_PCD_SetAddress>
 800c66c:	4603      	mov	r3, r0
 800c66e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	4618      	mov	r0, r3
 800c674:	f000 f880 	bl	800c778 <USBD_Get_USB_Status>
 800c678:	4603      	mov	r3, r0
 800c67a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c67c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b086      	sub	sp, #24
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	60f8      	str	r0, [r7, #12]
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	461a      	mov	r2, r3
 800c692:	460b      	mov	r3, r1
 800c694:	72fb      	strb	r3, [r7, #11]
 800c696:	4613      	mov	r3, r2
 800c698:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c69a:	2300      	movs	r3, #0
 800c69c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c6a8:	893b      	ldrh	r3, [r7, #8]
 800c6aa:	7af9      	ldrb	r1, [r7, #11]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	f7f8 fc36 	bl	8004f1e <HAL_PCD_EP_Transmit>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 f85d 	bl	800c778 <USBD_Get_USB_Status>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3718      	adds	r7, #24
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	607a      	str	r2, [r7, #4]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	460b      	mov	r3, r1
 800c6da:	72fb      	strb	r3, [r7, #11]
 800c6dc:	4613      	mov	r3, r2
 800c6de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c6ee:	893b      	ldrh	r3, [r7, #8]
 800c6f0:	7af9      	ldrb	r1, [r7, #11]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	f7f8 fbbf 	bl	8004e76 <HAL_PCD_EP_Receive>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6fc:	7dfb      	ldrb	r3, [r7, #23]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 f83a 	bl	800c778 <USBD_Get_USB_Status>
 800c704:	4603      	mov	r3, r0
 800c706:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c708:	7dbb      	ldrb	r3, [r7, #22]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3718      	adds	r7, #24
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	460b      	mov	r3, r1
 800c71c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c724:	78fa      	ldrb	r2, [r7, #3]
 800c726:	4611      	mov	r1, r2
 800c728:	4618      	mov	r0, r3
 800c72a:	f7f8 fbe1 	bl	8004ef0 <HAL_PCD_EP_GetRxCount>
 800c72e:	4603      	mov	r3, r0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c740:	4b02      	ldr	r3, [pc, #8]	; (800c74c <USBD_static_malloc+0x14>)
}
 800c742:	4618      	mov	r0, r3
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	bc80      	pop	{r7}
 800c74a:	4770      	bx	lr
 800c74c:	200015ec 	.word	0x200015ec

0800c750 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]

}
 800c758:	bf00      	nop
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bc80      	pop	{r7}
 800c760:	4770      	bx	lr

0800c762 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c762:	b480      	push	{r7}
 800c764:	b083      	sub	sp, #12
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	460b      	mov	r3, r1
 800c76c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c76e:	bf00      	nop
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	bc80      	pop	{r7}
 800c776:	4770      	bx	lr

0800c778 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	2b03      	cmp	r3, #3
 800c78a:	d817      	bhi.n	800c7bc <USBD_Get_USB_Status+0x44>
 800c78c:	a201      	add	r2, pc, #4	; (adr r2, 800c794 <USBD_Get_USB_Status+0x1c>)
 800c78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c792:	bf00      	nop
 800c794:	0800c7a5 	.word	0x0800c7a5
 800c798:	0800c7ab 	.word	0x0800c7ab
 800c79c:	0800c7b1 	.word	0x0800c7b1
 800c7a0:	0800c7b7 	.word	0x0800c7b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a8:	e00b      	b.n	800c7c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ae:	e008      	b.n	800c7c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7b4:	e005      	b.n	800c7c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7b6:	2302      	movs	r3, #2
 800c7b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ba:	e002      	b.n	800c7c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c7bc:	2302      	movs	r3, #2
 800c7be:	73fb      	strb	r3, [r7, #15]
    break;
 800c7c0:	bf00      	nop
  }
  return usb_status;
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bc80      	pop	{r7}
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop

0800c7d0 <__libc_init_array>:
 800c7d0:	b570      	push	{r4, r5, r6, lr}
 800c7d2:	2600      	movs	r6, #0
 800c7d4:	4d0c      	ldr	r5, [pc, #48]	; (800c808 <__libc_init_array+0x38>)
 800c7d6:	4c0d      	ldr	r4, [pc, #52]	; (800c80c <__libc_init_array+0x3c>)
 800c7d8:	1b64      	subs	r4, r4, r5
 800c7da:	10a4      	asrs	r4, r4, #2
 800c7dc:	42a6      	cmp	r6, r4
 800c7de:	d109      	bne.n	800c7f4 <__libc_init_array+0x24>
 800c7e0:	f000 f830 	bl	800c844 <_init>
 800c7e4:	2600      	movs	r6, #0
 800c7e6:	4d0a      	ldr	r5, [pc, #40]	; (800c810 <__libc_init_array+0x40>)
 800c7e8:	4c0a      	ldr	r4, [pc, #40]	; (800c814 <__libc_init_array+0x44>)
 800c7ea:	1b64      	subs	r4, r4, r5
 800c7ec:	10a4      	asrs	r4, r4, #2
 800c7ee:	42a6      	cmp	r6, r4
 800c7f0:	d105      	bne.n	800c7fe <__libc_init_array+0x2e>
 800c7f2:	bd70      	pop	{r4, r5, r6, pc}
 800c7f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7f8:	4798      	blx	r3
 800c7fa:	3601      	adds	r6, #1
 800c7fc:	e7ee      	b.n	800c7dc <__libc_init_array+0xc>
 800c7fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c802:	4798      	blx	r3
 800c804:	3601      	adds	r6, #1
 800c806:	e7f2      	b.n	800c7ee <__libc_init_array+0x1e>
 800c808:	0800c91c 	.word	0x0800c91c
 800c80c:	0800c91c 	.word	0x0800c91c
 800c810:	0800c91c 	.word	0x0800c91c
 800c814:	0800c920 	.word	0x0800c920

0800c818 <memcpy>:
 800c818:	440a      	add	r2, r1
 800c81a:	4291      	cmp	r1, r2
 800c81c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c820:	d100      	bne.n	800c824 <memcpy+0xc>
 800c822:	4770      	bx	lr
 800c824:	b510      	push	{r4, lr}
 800c826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c82a:	4291      	cmp	r1, r2
 800c82c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c830:	d1f9      	bne.n	800c826 <memcpy+0xe>
 800c832:	bd10      	pop	{r4, pc}

0800c834 <memset>:
 800c834:	4603      	mov	r3, r0
 800c836:	4402      	add	r2, r0
 800c838:	4293      	cmp	r3, r2
 800c83a:	d100      	bne.n	800c83e <memset+0xa>
 800c83c:	4770      	bx	lr
 800c83e:	f803 1b01 	strb.w	r1, [r3], #1
 800c842:	e7f9      	b.n	800c838 <memset+0x4>

0800c844 <_init>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	bf00      	nop
 800c848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c84a:	bc08      	pop	{r3}
 800c84c:	469e      	mov	lr, r3
 800c84e:	4770      	bx	lr

0800c850 <_fini>:
 800c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c852:	bf00      	nop
 800c854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c856:	bc08      	pop	{r3}
 800c858:	469e      	mov	lr, r3
 800c85a:	4770      	bx	lr
