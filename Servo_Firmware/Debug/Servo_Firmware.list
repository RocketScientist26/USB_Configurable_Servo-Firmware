
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c100  0800c100  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c100  0800c100  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c100  0800c100  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c100  0800c100  0001c100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c104  0800c104  0001c104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800c108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c4  200001a8  0800c2ac  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800c2ac  0002166c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b07  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049fb  00000000  00000000  00038cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0ee  00000000  00000000  0003ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d212  00000000  00000000  0005d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936b9  00000000  00000000  0007a250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d909  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005560  00000000  00000000  0010d95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c06c 	.word	0x0800c06c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	0800c06c 	.word	0x0800c06c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <Potentiometer_Ready>:
extern uint8_t usb_rq;
extern uint8_t usb_rq_sett_revert_flash;
extern uint8_t usb_rq_stat_motor;
extern uint8_t usb_rq_stat_phold;

void Potentiometer_Ready(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	pid_input = potentiometer_position;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <Potentiometer_Ready+0x80>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <Potentiometer_Ready+0x84>)
 800074a:	6013      	str	r3, [r2, #0]
	if(!pid_running){
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <Potentiometer_Ready+0x88>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d133      	bne.n	80007bc <Potentiometer_Ready+0x7c>
		if(motor_running){
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <Potentiometer_Ready+0x8c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d02f      	beq.n	80007bc <Potentiometer_Ready+0x7c>
			if((potentiometer_position <= potentiometer_min) && (Motor_Get() < 0)){
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <Potentiometer_Ready+0x90>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fdad 	bl	80002c0 <__aeabi_i2f>
 8000766:	4602      	mov	r2, r0
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <Potentiometer_Ready+0x80>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4610      	mov	r0, r2
 8000770:	f7ff ffac 	bl	80006cc <__aeabi_fcmpge>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d008      	beq.n	800078c <Potentiometer_Ready+0x4c>
 800077a:	f000 fb15 	bl	8000da8 <Motor_Get>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	da03      	bge.n	800078c <Potentiometer_Ready+0x4c>
				Motor_Set(0);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 faa7 	bl	8000cd8 <Motor_Set>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 800078a:	e017      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <Potentiometer_Ready+0x94>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd95 	bl	80002c0 <__aeabi_i2f>
 8000796:	4602      	mov	r2, r0
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <Potentiometer_Ready+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f7ff ff8a 	bl	80006b8 <__aeabi_fcmple>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <Potentiometer_Ready+0x6c>
}
 80007aa:	e007      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 80007ac:	f000 fafc 	bl	8000da8 <Motor_Get>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	dd02      	ble.n	80007bc <Potentiometer_Ready+0x7c>
				Motor_Set(0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fa8e 	bl	8000cd8 <Motor_Set>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001f8 	.word	0x200001f8
 80007c4:	200001dc 	.word	0x200001dc
 80007c8:	200001d8 	.word	0x200001d8
 80007cc:	200001c8 	.word	0x200001c8
 80007d0:	200001ec 	.word	0x200001ec
 80007d4:	200001ee 	.word	0x200001ee

080007d8 <PID_Ready>:
void PID_Ready(float output){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff87 	bl	80006f4 <__aeabi_f2iz>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fa74 	bl	8000cd8 <Motor_Set>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <App_Init>:

void App_Init(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	Settings_Read();
 80007fc:	f000 fdd6 	bl	80013ac <Settings_Read>
	USB_Init();
 8000800:	f001 fb30 	bl	8001e64 <USB_Init>
	Signal_Init();
 8000804:	f001 fad8 	bl	8001db8 <Signal_Init>
	Potentiometer_Init();
 8000808:	f000 fdb8 	bl	800137c <Potentiometer_Init>
	Motor_Init();
 800080c:	f000 fb0a 	bl	8000e24 <Motor_Init>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <App_Loop>:
void App_Loop(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	switch(usb_rq){
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <App_Loop+0xf8>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d002      	beq.n	8000826 <App_Loop+0x12>
 8000820:	2b02      	cmp	r3, #2
 8000822:	d019      	beq.n	8000858 <App_Loop+0x44>
 8000824:	e06e      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_CONF:
			if(usb_rq_sett_revert_flash == USB_SETTINGS_REVERT){
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <App_Loop+0xfc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d105      	bne.n	800083a <App_Loop+0x26>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <App_Loop+0xfc>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
				//Read from flash
				Settings_Read();
 8000834:	f000 fdba 	bl	80013ac <Settings_Read>
 8000838:	e008      	b.n	800084c <App_Loop+0x38>
			}else if(usb_rq_sett_revert_flash == USB_SETTINGS_FLASH){
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <App_Loop+0xfc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d104      	bne.n	800084c <App_Loop+0x38>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <App_Loop+0xfc>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
				//Write to flash
				Settings_Write();
 8000848:	f001 f894 	bl	8001974 <Settings_Write>
			}
			USB_Send_Config();
 800084c:	f001 fb9c 	bl	8001f88 <USB_Send_Config>
			usb_rq = USB_RQ_NONE;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <App_Loop+0xf8>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e055      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_STAT:
			if(usb_rq_stat_motor != 0){
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <App_Loop+0x100>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d033      	beq.n	80008c8 <App_Loop+0xb4>
				//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout
				if(usb_rq_stat_motor == 1){//Backward
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <App_Loop+0x100>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d112      	bne.n	800088e <App_Loop+0x7a>
					if(potentiometer_position > potentiometer_min){
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <App_Loop+0x104>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fd27 	bl	80002c0 <__aeabi_i2f>
 8000872:	4602      	mov	r2, r0
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <App_Loop+0x108>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f7ff ff12 	bl	80006a4 <__aeabi_fcmplt>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01a      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(-1000);
 8000886:	4826      	ldr	r0, [pc, #152]	; (8000920 <App_Loop+0x10c>)
 8000888:	f000 fa26 	bl	8000cd8 <Motor_Set>
 800088c:	e016      	b.n	80008bc <App_Loop+0xa8>
					}
				}else if(usb_rq_stat_motor == 2){//Forward
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <App_Loop+0x100>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d112      	bne.n	80008bc <App_Loop+0xa8>
					if(potentiometer_position < potentiometer_max){
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <App_Loop+0x110>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd10 	bl	80002c0 <__aeabi_i2f>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <App_Loop+0x108>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff ff19 	bl	80006e0 <__aeabi_fcmpgt>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d003      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f000 fa0e 	bl	8000cd8 <Motor_Set>
					}
				}
				motor_systick = 0;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <App_Loop+0x114>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
				usb_rq_stat_motor = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <App_Loop+0x100>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
			}
			if(usb_rq_stat_phold == 1){
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <App_Loop+0x118>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d109      	bne.n	80008e4 <App_Loop+0xd0>
				usb_rq_stat_phold = 0;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <App_Loop+0x118>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
				if(!pid_running){//Run pid with signal timeout
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <App_Loop+0x11c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10c      	bne.n	80008f8 <App_Loop+0xe4>
					PID_Start();
 80008de:	f000 fcdf 	bl	80012a0 <PID_Start>
 80008e2:	e009      	b.n	80008f8 <App_Loop+0xe4>
				}
			}else if(signal_ignore && pid_running){
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <App_Loop+0x120>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d005      	beq.n	80008f8 <App_Loop+0xe4>
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <App_Loop+0x11c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <App_Loop+0xe4>
				PID_Stop();
 80008f4:	f000 fcf6 	bl	80012e4 <PID_Stop>
			}
			USB_Send_Status();
 80008f8:	f001 fd14 	bl	8002324 <USB_Send_Status>
			usb_rq = USB_RQ_NONE;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <App_Loop+0xf8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
		break;
 8000902:	bf00      	nop
	}
	LED_Update();
 8000904:	f000 f988 	bl	8000c18 <LED_Update>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000249 	.word	0x20000249
 8000910:	2000024a 	.word	0x2000024a
 8000914:	2000024b 	.word	0x2000024b
 8000918:	200001ec 	.word	0x200001ec
 800091c:	200001f8 	.word	0x200001f8
 8000920:	fffffc18 	.word	0xfffffc18
 8000924:	200001ee 	.word	0x200001ee
 8000928:	200001c9 	.word	0x200001c9
 800092c:	2000024c 	.word	0x2000024c
 8000930:	200001d8 	.word	0x200001d8
 8000934:	2000023c 	.word	0x2000023c

08000938 <Flash_Read>:
#include "main.h"
#include "flash.h"

void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000948:	e00b      	b.n	8000962 <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	4413      	add	r3, r2
 8000958:	780a      	ldrb	r2, [r1, #0]
 800095a:	701a      	strb	r2, [r3, #0]
		i++;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	d1ef      	bne.n	800094a <Flash_Read+0x12>
	}
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	371c      	adds	r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <Flash_Write>:
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 8000976:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8000994:	f002 ffe0 	bl	8003958 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8000998:	f107 0210 	add.w	r2, r7, #16
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 f8c0 	bl	8003b28 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80009c0:	e027      	b.n	8000a12 <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8)|(uint32_t)data[i+3]);
 80009c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	18d0      	adds	r0, r2, r3
 80009c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	061a      	lsls	r2, r3, #24
 80009d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009d4:	3301      	adds	r3, #1
 80009d6:	68f9      	ldr	r1, [r7, #12]
 80009d8:	440b      	add	r3, r1
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	041b      	lsls	r3, r3, #16
 80009de:	431a      	orrs	r2, r3
 80009e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009e2:	3302      	adds	r3, #2
 80009e4:	68f9      	ldr	r1, [r7, #12]
 80009e6:	440b      	add	r3, r1
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	4313      	orrs	r3, r2
 80009ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009f0:	3203      	adds	r2, #3
 80009f2:	68f9      	ldr	r1, [r7, #12]
 80009f4:	440a      	add	r2, r1
 80009f6:	7812      	ldrb	r2, [r2, #0]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	2200      	movs	r2, #0
 80009fc:	4698      	mov	r8, r3
 80009fe:	4691      	mov	r9, r2
 8000a00:	4642      	mov	r2, r8
 8000a02:	464b      	mov	r3, r9
 8000a04:	4601      	mov	r1, r0
 8000a06:	2002      	movs	r0, #2
 8000a08:	f002 ff36 	bl	8003878 <HAL_FLASH_Program>
		i+=4;
 8000a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a0e:	3304      	adds	r3, #4
 8000a10:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 8000a12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d1d2      	bne.n	80009c2 <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 8000a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d03f      	beq.n	8000aa2 <Flash_Write+0x12c>
		uint32_t wdata = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 8000a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d114      	bne.n	8000a56 <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8);
 8000a2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	061a      	lsls	r2, r3, #24
 8000a36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a38:	3301      	adds	r3, #1
 8000a3a:	68f9      	ldr	r1, [r7, #12]
 8000a3c:	440b      	add	r3, r1
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	431a      	orrs	r2, r3
 8000a44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a46:	3302      	adds	r3, #2
 8000a48:	68f9      	ldr	r1, [r7, #12]
 8000a4a:	440b      	add	r3, r1
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	4313      	orrs	r3, r2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a54:	e019      	b.n	8000a8a <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 8000a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d10d      	bne.n	8000a78 <Flash_Write+0x102>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16);
 8000a5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	061a      	lsls	r2, r3, #24
 8000a66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a68:	3301      	adds	r3, #1
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	041b      	lsls	r3, r3, #16
 8000a72:	4313      	orrs	r3, r2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a76:	e008      	b.n	8000a8a <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 8000a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d105      	bne.n	8000a8a <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 8000a7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	061b      	lsls	r3, r3, #24
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 8000a8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	18d1      	adds	r1, r2, r3
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	2200      	movs	r2, #0
 8000a94:	461c      	mov	r4, r3
 8000a96:	4615      	mov	r5, r2
 8000a98:	4622      	mov	r2, r4
 8000a9a:	462b      	mov	r3, r5
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f002 feeb 	bl	8003878 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8000aa2:	f002 ff7f 	bl	80039a4 <HAL_FLASH_Lock>
}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	; 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000ab0 <General_Copy_32_Bit>:
#include "main.h"
#include "general.h"

void General_Copy_32_Bit(uint32_t address_to, uint32_t address_from){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000abe:	e00b      	b.n	8000ad8 <General_Copy_32_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000ac0:	7bfa      	ldrb	r2, [r7, #15]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	7bfa      	ldrb	r2, [r7, #15]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	780a      	ldrb	r2, [r1, #0]
 8000ad0:	701a      	strb	r2, [r3, #0]
		i++;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d1f0      	bne.n	8000ac0 <General_Copy_32_Bit+0x10>
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <General_Copy_16_Bit>:
void General_Copy_16_Bit(uint32_t address_to, uint32_t address_from){
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000af8:	e00b      	b.n	8000b12 <General_Copy_16_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	780a      	ldrb	r2, [r1, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
		i++;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d1f0      	bne.n	8000afa <General_Copy_16_Bit+0x10>
	}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <HAL_ADC_ConvCpltCallback>:
#include "motor.h"
#include "signal.h"
#include "usb.h"
#include "led.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_ADC_ConvCpltCallback+0x20>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 8000b36:	f000 fbe5 	bl	8001304 <Potentiometer_ADC_Interrupt>
    }
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012400 	.word	0x40012400

08000b48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
		PID_Timer_Interrupt();
 8000b5a:	f000 f98b 	bl	8000e74 <PID_Timer_Interrupt>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40000400 	.word	0x40000400

08000b6c <Interrupts_SysTick>:

void Interrupts_SysTick(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	Motor_SysTick_Interrupt();
 8000b70:	f000 f890 	bl	8000c94 <Motor_SysTick_Interrupt>
	Signal_SysTick_Interrupt();
 8000b74:	f000 ffe0 	bl	8001b38 <Signal_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 8000b78:	f000 f818 	bl	8000bac <LED_SysTick_Interrupt>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_EXTI_Callback+0x18>
 8000b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_EXTI_Callback+0x1e>
		break;
		case USB_DET_Pin:
			USB_Det_Interrupt();
		break;
	}
}
 8000b96:	e005      	b.n	8000ba4 <HAL_GPIO_EXTI_Callback+0x24>
			Signal_Interrupt();
 8000b98:	f001 f814 	bl	8001bc4 <Signal_Interrupt>
		break;
 8000b9c:	e002      	b.n	8000ba4 <HAL_GPIO_EXTI_Callback+0x24>
			USB_Det_Interrupt();
 8000b9e:	f001 f947 	bl	8001e30 <USB_Det_Interrupt>
		break;
 8000ba2:	bf00      	nop
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LED_SysTick_Interrupt>:

uint8_t led_mode = 0;
uint8_t led_position_changed = 0;
uint8_t led_systick = 0;

void LED_SysTick_Interrupt(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	if(led_mode == LED_MODE_POSITION_CHANGE){
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <LED_SysTick_Interrupt+0x30>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d10f      	bne.n	8000bd8 <LED_SysTick_Interrupt+0x2c>
		led_systick++;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bc2:	701a      	strb	r2, [r3, #0]
		if(led_systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b13      	cmp	r3, #19
 8000bca:	d905      	bls.n	8000bd8 <LED_SysTick_Interrupt+0x2c>
			LED_Set(OFF);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 f809 	bl	8000be4 <LED_Set>
			led_systick = 0;
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001c4 	.word	0x200001c4
 8000be0:	200001c6 	.word	0x200001c6

08000be4 <LED_Set>:

void LED_Set(uint8_t state){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	if(state == ON){
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d105      	bne.n	8000c00 <LED_Set+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <LED_Set+0x30>)
 8000bfa:	f003 f9d8 	bl	8003fae <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 8000bfe:	e004      	b.n	8000c0a <LED_Set+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <LED_Set+0x30>)
 8000c06:	f003 f9d2 	bl	8003fae <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010800 	.word	0x40010800

08000c18 <LED_Update>:
void LED_Update(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	switch(led_mode){
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <LED_Update+0x6c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d82a      	bhi.n	8000c7a <LED_Update+0x62>
 8000c24:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <LED_Update+0x14>)
 8000c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000c3d 	.word	0x08000c3d
 8000c30:	08000c45 	.word	0x08000c45
 8000c34:	08000c4d 	.word	0x08000c4d
 8000c38:	08000c65 	.word	0x08000c65
		case LED_MODE_OFF:
			LED_Set(OFF);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ffd1 	bl	8000be4 <LED_Set>
		break;
 8000c42:	e01a      	b.n	8000c7a <LED_Update+0x62>
		case LED_MODE_POWER:
			LED_Set(ON);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ffcd 	bl	8000be4 <LED_Set>
		break;
 8000c4a:	e016      	b.n	8000c7a <LED_Update+0x62>
		case LED_MODE_SIGNAL:
			if(pid_running){
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <LED_Update+0x70>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <LED_Update+0x44>
				LED_Set(ON);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff ffc5 	bl	8000be4 <LED_Set>
			}else{
				LED_Set(OFF);
			}
		break;
 8000c5a:	e00e      	b.n	8000c7a <LED_Update+0x62>
				LED_Set(OFF);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ffc1 	bl	8000be4 <LED_Set>
		break;
 8000c62:	e00a      	b.n	8000c7a <LED_Update+0x62>
		case LED_MODE_POSITION_CHANGE:
			if(led_position_changed){
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <LED_Update+0x74>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <LED_Update+0x60>
				led_systick = 0;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <LED_Update+0x78>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
				LED_Set(ON);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff ffb6 	bl	8000be4 <LED_Set>
			}
		break;
 8000c78:	bf00      	nop
	}
	led_position_changed = 0;
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <LED_Update+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200001c4 	.word	0x200001c4
 8000c88:	200001d8 	.word	0x200001d8
 8000c8c:	200001c5 	.word	0x200001c5
 8000c90:	200001c6 	.word	0x200001c6

08000c94 <Motor_SysTick_Interrupt>:
uint8_t motor_invert = MOTOR_NORMAL;
uint16_t motor_max_power = 1000;
uint8_t motor_running = 0;
uint8_t motor_systick = 0;

void Motor_SysTick_Interrupt(){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	if(!pid_running){
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <Motor_SysTick_Interrupt+0x38>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d113      	bne.n	8000cc8 <Motor_SysTick_Interrupt+0x34>
		if(motor_running){
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <Motor_SysTick_Interrupt+0x3c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00f      	beq.n	8000cc8 <Motor_SysTick_Interrupt+0x34>
			motor_systick++;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000cb2:	701a      	strb	r2, [r3, #0]
			if(motor_systick == MOTOR_USB_TEST_TIMEOUT_MS){
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b32      	cmp	r3, #50	; 0x32
 8000cba:	d105      	bne.n	8000cc8 <Motor_SysTick_Interrupt+0x34>
				Motor_Set(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f80b 	bl	8000cd8 <Motor_Set>
				motor_systick = 0;
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200001d8 	.word	0x200001d8
 8000cd0:	200001c8 	.word	0x200001c8
 8000cd4:	200001c9 	.word	0x200001c9

08000cd8 <Motor_Set>:

void Motor_Set(int16_t strength){//-1000 0 1000 Strength
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	if(motor_invert == MOTOR_INVERT){
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <Motor_Set+0xc0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d103      	bne.n	8000cf2 <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	425b      	negs	r3, r3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	80fb      	strh	r3, [r7, #6]
	}

	if(strength == 0){
 8000cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d110      	bne.n	8000d1c <Motor_Set+0x44>
		TIM2 -> CCR1 = 1000;
 8000cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d0c:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 0;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <Motor_Set+0xc4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
		motor_systick = 0;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <Motor_Set+0xc8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
		TIM2 -> CCR2 = 1000;
		motor_running = 1;
	}
}
 8000d1a:	e038      	b.n	8000d8e <Motor_Set+0xb6>
	}else if(strength < 0){
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da18      	bge.n	8000d56 <Motor_Set+0x7e>
		TIM2 -> CCR1 = 1000;
 8000d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000 + (strength / (1000 / motor_max_power));
 8000d2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <Motor_Set+0xcc>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3c:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d44:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <Motor_Set+0xc4>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	e01b      	b.n	8000d8e <Motor_Set+0xb6>
	}else if(strength > 0){
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	dd17      	ble.n	8000d8e <Motor_Set+0xb6>
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
 8000d5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <Motor_Set+0xcc>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	4619      	mov	r1, r3
 8000d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6c:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d86:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <Motor_Set+0xc4>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	200001c7 	.word	0x200001c7
 8000d9c:	200001c8 	.word	0x200001c8
 8000da0:	200001c9 	.word	0x200001c9
 8000da4:	20000000 	.word	0x20000000

08000da8 <Motor_Get>:
int16_t Motor_Get(){
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	if(TIM2 -> CCR1 != 1000){
 8000dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000db6:	d013      	beq.n	8000de0 <Motor_Get+0x38>
		return (1000 - (int16_t)(TIM2 -> CCR1)) * (1000 / motor_max_power);
 8000db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <Motor_Get+0x78>)
 8000dc8:	8812      	ldrh	r2, [r2, #0]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd0:	fb92 f2f1 	sdiv	r2, r2, r1
 8000dd4:	b292      	uxth	r2, r2
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	e01a      	b.n	8000e16 <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dea:	d013      	beq.n	8000e14 <Motor_Get+0x6c>
		return ((int16_t)(TIM2 -> CCR2) - 1000) * (1000 / motor_max_power);
 8000dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <Motor_Get+0x78>)
 8000dfc:	8812      	ldrh	r2, [r2, #0]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e04:	fb92 f2f1 	sdiv	r2, r2, r1
 8000e08:	b292      	uxth	r2, r2
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	e000      	b.n	8000e16 <Motor_Get+0x6e>
	}
	return 0;
 8000e14:	2300      	movs	r3, #0
} 
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000000 	.word	0x20000000

08000e24 <Motor_Init>:
void Motor_Init(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <Motor_Init+0x18>)
 8000e2c:	f005 fca2 	bl	8006774 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e30:	2104      	movs	r1, #4
 8000e32:	4802      	ldr	r0, [pc, #8]	; (8000e3c <Motor_Init+0x18>)
 8000e34:	f005 fc9e 	bl	8006774 <HAL_TIM_PWM_Start>
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200003c8 	.word	0x200003c8

08000e40 <PID_Timer_Stop>:
float pid_setpoint = 2047;
//Runtime variables
float pid_last_input = 0;
float pid_output_sum = 0;

void PID_Timer_Stop(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <PID_Timer_Stop+0x10>)
 8000e46:	f005 fc0f 	bl	8006668 <HAL_TIM_Base_Stop_IT>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000410 	.word	0x20000410

08000e54 <PID_Timer_Restart>:
void PID_Timer_Restart(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <PID_Timer_Restart+0x1c>)
 8000e5a:	f005 fc05 	bl	8006668 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <PID_Timer_Restart+0x1c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <PID_Timer_Restart+0x1c>)
 8000e68:	f005 fbac 	bl	80065c4 <HAL_TIM_Base_Start_IT>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000410 	.word	0x20000410

08000e74 <PID_Timer_Interrupt>:
void PID_Timer_Interrupt(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	PID_Compute();
 8000e78:	f000 f838 	bl	8000eec <PID_Compute>
	PID_Ready(pid_output);
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <PID_Timer_Interrupt+0x1c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fca9 	bl	80007d8 <PID_Ready>
	PID_Timer_Restart();
 8000e86:	f7ff ffe5 	bl	8000e54 <PID_Timer_Restart>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001e0 	.word	0x200001e0

08000e94 <PID_Get_Sampling_Time>:

uint16_t PID_Get_Sampling_Time(){
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <PID_Get_Sampling_Time+0x1c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <PID_Get_Sampling_Time+0x20>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	095b      	lsrs	r3, r3, #5
 8000ea6:	b29b      	uxth	r3, r3
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	20000410 	.word	0x20000410
 8000eb4:	51eb851f 	.word	0x51eb851f

08000eb8 <PID_Set_Sampling_Time>:
void PID_Set_Sampling_Time(uint16_t ms){
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	2264      	movs	r2, #100	; 0x64
 8000ec6:	fb03 f202 	mul.w	r2, r3, r2
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <PID_Set_Sampling_Time+0x30>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	2264      	movs	r2, #100	; 0x64
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <PID_Set_Sampling_Time+0x30>)
 8000edc:	60da      	str	r2, [r3, #12]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	20000410 	.word	0x20000410

08000eec <PID_Compute>:
void PID_Compute(){
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
	float input = pid_input;
 8000ef2:	4b94      	ldr	r3, [pc, #592]	; (8001144 <PID_Compute+0x258>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	60bb      	str	r3, [r7, #8]
	float error = pid_setpoint - input;
 8000ef8:	4b93      	ldr	r3, [pc, #588]	; (8001148 <PID_Compute+0x25c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff f928 	bl	8000154 <__aeabi_fsub>
 8000f04:	4603      	mov	r3, r0
 8000f06:	607b      	str	r3, [r7, #4]
	float input_d = (input - pid_last_input);
 8000f08:	4b90      	ldr	r3, [pc, #576]	; (800114c <PID_Compute+0x260>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	68b8      	ldr	r0, [r7, #8]
 8000f10:	f7ff f920 	bl	8000154 <__aeabi_fsub>
 8000f14:	4603      	mov	r3, r0
 8000f16:	603b      	str	r3, [r7, #0]
	float output = 0;
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]

	if(error >= pid_split_1){
 8000f1e:	4b8c      	ldr	r3, [pc, #560]	; (8001150 <PID_Compute+0x264>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff f9cc 	bl	80002c0 <__aeabi_i2f>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff fbcd 	bl	80006cc <__aeabi_fcmpge>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d074      	beq.n	8001022 <PID_Compute+0x136>
		pid_output_sum += pid_ki_1 * error;
 8000f38:	4b86      	ldr	r3, [pc, #536]	; (8001154 <PID_Compute+0x268>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fa12 	bl	8000368 <__aeabi_fmul>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b83      	ldr	r3, [pc, #524]	; (8001158 <PID_Compute+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f7ff f902 	bl	8000158 <__addsf3>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b7f      	ldr	r3, [pc, #508]	; (8001158 <PID_Compute+0x26c>)
 8000f5a:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8000f5c:	4b7f      	ldr	r3, [pc, #508]	; (800115c <PID_Compute+0x270>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d110      	bne.n	8000f86 <PID_Compute+0x9a>
			pid_output_sum -= pid_kp_1 * input_d;
 8000f64:	4b7c      	ldr	r3, [pc, #496]	; (8001158 <PID_Compute+0x26c>)
 8000f66:	681c      	ldr	r4, [r3, #0]
 8000f68:	4b7d      	ldr	r3, [pc, #500]	; (8001160 <PID_Compute+0x274>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6839      	ldr	r1, [r7, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff f9fa 	bl	8000368 <__aeabi_fmul>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4619      	mov	r1, r3
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f7ff f8eb 	bl	8000154 <__aeabi_fsub>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b75      	ldr	r3, [pc, #468]	; (8001158 <PID_Compute+0x26c>)
 8000f84:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 8000f86:	4b74      	ldr	r3, [pc, #464]	; (8001158 <PID_Compute+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4976      	ldr	r1, [pc, #472]	; (8001164 <PID_Compute+0x278>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fba7 	bl	80006e0 <__aeabi_fcmpgt>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <PID_Compute+0xb4>
			pid_output_sum = 1000.0f;
 8000f98:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <PID_Compute+0x26c>)
 8000f9a:	4a72      	ldr	r2, [pc, #456]	; (8001164 <PID_Compute+0x278>)
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e00b      	b.n	8000fb8 <PID_Compute+0xcc>
		}else if(pid_output_sum < -1000.0f){
 8000fa0:	4b6d      	ldr	r3, [pc, #436]	; (8001158 <PID_Compute+0x26c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4970      	ldr	r1, [pc, #448]	; (8001168 <PID_Compute+0x27c>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fb7c 	bl	80006a4 <__aeabi_fcmplt>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <PID_Compute+0xcc>
			pid_output_sum = -1000.0f;
 8000fb2:	4b69      	ldr	r3, [pc, #420]	; (8001158 <PID_Compute+0x26c>)
 8000fb4:	4a6c      	ldr	r2, [pc, #432]	; (8001168 <PID_Compute+0x27c>)
 8000fb6:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8000fb8:	4b68      	ldr	r3, [pc, #416]	; (800115c <PID_Compute+0x270>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <PID_Compute+0xe4>
			output = pid_kp_1 * error;
 8000fc0:	4b67      	ldr	r3, [pc, #412]	; (8001160 <PID_Compute+0x274>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff f9ce 	bl	8000368 <__aeabi_fmul>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_1 * input_d;
 8000fd0:	4b61      	ldr	r3, [pc, #388]	; (8001158 <PID_Compute+0x26c>)
 8000fd2:	681c      	ldr	r4, [r3, #0]
 8000fd4:	4b65      	ldr	r3, [pc, #404]	; (800116c <PID_Compute+0x280>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f9c4 	bl	8000368 <__aeabi_fmul>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff f8b5 	bl	8000154 <__aeabi_fsub>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4619      	mov	r1, r3
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f7ff f8b2 	bl	8000158 <__addsf3>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8000ff8:	495a      	ldr	r1, [pc, #360]	; (8001164 <PID_Compute+0x278>)
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff fb70 	bl	80006e0 <__aeabi_fcmpgt>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <PID_Compute+0x120>
			output = 1000.0f;
 8001006:	4b57      	ldr	r3, [pc, #348]	; (8001164 <PID_Compute+0x278>)
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e12c      	b.n	8001266 <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 800100c:	4956      	ldr	r1, [pc, #344]	; (8001168 <PID_Compute+0x27c>)
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff fb48 	bl	80006a4 <__aeabi_fcmplt>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 8125 	beq.w	8001266 <PID_Compute+0x37a>
			output = -1000.0f;
 800101c:	4b52      	ldr	r3, [pc, #328]	; (8001168 <PID_Compute+0x27c>)
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e121      	b.n	8001266 <PID_Compute+0x37a>
		}
	}else if((error < pid_split_1) && (error >= pid_split_2)){
 8001022:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <PID_Compute+0x264>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f94a 	bl	80002c0 <__aeabi_i2f>
 800102c:	4603      	mov	r3, r0
 800102e:	4619      	mov	r1, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fb37 	bl	80006a4 <__aeabi_fcmplt>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80a1 	beq.w	8001180 <PID_Compute+0x294>
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <PID_Compute+0x284>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f93c 	bl	80002c0 <__aeabi_i2f>
 8001048:	4603      	mov	r3, r0
 800104a:	4619      	mov	r1, r3
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fb3d 	bl	80006cc <__aeabi_fcmpge>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 8093 	beq.w	8001180 <PID_Compute+0x294>
		pid_output_sum += pid_ki_2 * error;
 800105a:	4b46      	ldr	r3, [pc, #280]	; (8001174 <PID_Compute+0x288>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f981 	bl	8000368 <__aeabi_fmul>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <PID_Compute+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f7ff f871 	bl	8000158 <__addsf3>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b37      	ldr	r3, [pc, #220]	; (8001158 <PID_Compute+0x26c>)
 800107c:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <PID_Compute+0x270>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d110      	bne.n	80010a8 <PID_Compute+0x1bc>
			pid_output_sum -= pid_kp_2 * input_d;
 8001086:	4b34      	ldr	r3, [pc, #208]	; (8001158 <PID_Compute+0x26c>)
 8001088:	681c      	ldr	r4, [r3, #0]
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <PID_Compute+0x28c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f969 	bl	8000368 <__aeabi_fmul>
 8001096:	4603      	mov	r3, r0
 8001098:	4619      	mov	r1, r3
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff f85a 	bl	8000154 <__aeabi_fsub>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <PID_Compute+0x26c>)
 80010a6:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <PID_Compute+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	492d      	ldr	r1, [pc, #180]	; (8001164 <PID_Compute+0x278>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fb16 	bl	80006e0 <__aeabi_fcmpgt>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <PID_Compute+0x1d6>
			pid_output_sum = 1000.0f;
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <PID_Compute+0x26c>)
 80010bc:	4a29      	ldr	r2, [pc, #164]	; (8001164 <PID_Compute+0x278>)
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e00b      	b.n	80010da <PID_Compute+0x1ee>
		}else if(pid_output_sum < -1000.0f){
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <PID_Compute+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4928      	ldr	r1, [pc, #160]	; (8001168 <PID_Compute+0x27c>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff faeb 	bl	80006a4 <__aeabi_fcmplt>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <PID_Compute+0x1ee>
			pid_output_sum = -1000.0f;
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <PID_Compute+0x26c>)
 80010d6:	4a24      	ldr	r2, [pc, #144]	; (8001168 <PID_Compute+0x27c>)
 80010d8:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <PID_Compute+0x270>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <PID_Compute+0x206>
			output = pid_kp_2 * error;
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <PID_Compute+0x28c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff f93d 	bl	8000368 <__aeabi_fmul>
 80010ee:	4603      	mov	r3, r0
 80010f0:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_2 * input_d;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <PID_Compute+0x26c>)
 80010f4:	681c      	ldr	r4, [r3, #0]
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <PID_Compute+0x290>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f933 	bl	8000368 <__aeabi_fmul>
 8001102:	4603      	mov	r3, r0
 8001104:	4619      	mov	r1, r3
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff f824 	bl	8000154 <__aeabi_fsub>
 800110c:	4603      	mov	r3, r0
 800110e:	4619      	mov	r1, r3
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff f821 	bl	8000158 <__addsf3>
 8001116:	4603      	mov	r3, r0
 8001118:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800111a:	4912      	ldr	r1, [pc, #72]	; (8001164 <PID_Compute+0x278>)
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff fadf 	bl	80006e0 <__aeabi_fcmpgt>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <PID_Compute+0x242>
			output = 1000.0f;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <PID_Compute+0x278>)
 800112a:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800112c:	e09b      	b.n	8001266 <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 800112e:	490e      	ldr	r1, [pc, #56]	; (8001168 <PID_Compute+0x27c>)
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff fab7 	bl	80006a4 <__aeabi_fcmplt>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d100      	bne.n	800113e <PID_Compute+0x252>
		if(output > 1000.0f){
 800113c:	e093      	b.n	8001266 <PID_Compute+0x37a>
			output = -1000.0f;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <PID_Compute+0x27c>)
 8001140:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001142:	e090      	b.n	8001266 <PID_Compute+0x37a>
 8001144:	200001dc 	.word	0x200001dc
 8001148:	20000024 	.word	0x20000024
 800114c:	200001e4 	.word	0x200001e4
 8001150:	2000001c 	.word	0x2000001c
 8001154:	200001cc 	.word	0x200001cc
 8001158:	200001e8 	.word	0x200001e8
 800115c:	20000020 	.word	0x20000020
 8001160:	20000004 	.word	0x20000004
 8001164:	447a0000 	.word	0x447a0000
 8001168:	c47a0000 	.word	0xc47a0000
 800116c:	20000008 	.word	0x20000008
 8001170:	2000001e 	.word	0x2000001e
 8001174:	200001d0 	.word	0x200001d0
 8001178:	2000000c 	.word	0x2000000c
 800117c:	20000010 	.word	0x20000010
		}
	}else{
		pid_output_sum += pid_ki_3 * error;
 8001180:	4b3e      	ldr	r3, [pc, #248]	; (800127c <PID_Compute+0x390>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f8ee 	bl	8000368 <__aeabi_fmul>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <PID_Compute+0x394>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	4610      	mov	r0, r2
 8001198:	f7fe ffde 	bl	8000158 <__addsf3>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b37      	ldr	r3, [pc, #220]	; (8001280 <PID_Compute+0x394>)
 80011a2:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 80011a4:	4b37      	ldr	r3, [pc, #220]	; (8001284 <PID_Compute+0x398>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d110      	bne.n	80011ce <PID_Compute+0x2e2>
			pid_output_sum -= pid_kp_3 * input_d;
 80011ac:	4b34      	ldr	r3, [pc, #208]	; (8001280 <PID_Compute+0x394>)
 80011ae:	681c      	ldr	r4, [r3, #0]
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <PID_Compute+0x39c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6839      	ldr	r1, [r7, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f8d6 	bl	8000368 <__aeabi_fmul>
 80011bc:	4603      	mov	r3, r0
 80011be:	4619      	mov	r1, r3
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7fe ffc7 	bl	8000154 <__aeabi_fsub>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <PID_Compute+0x394>)
 80011cc:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <PID_Compute+0x394>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	492e      	ldr	r1, [pc, #184]	; (800128c <PID_Compute+0x3a0>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fa83 	bl	80006e0 <__aeabi_fcmpgt>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <PID_Compute+0x2fc>
			pid_output_sum = 1000.0f;
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <PID_Compute+0x394>)
 80011e2:	4a2a      	ldr	r2, [pc, #168]	; (800128c <PID_Compute+0x3a0>)
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e00b      	b.n	8001200 <PID_Compute+0x314>
		}else if(pid_output_sum < -1000.0f){
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <PID_Compute+0x394>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4928      	ldr	r1, [pc, #160]	; (8001290 <PID_Compute+0x3a4>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fa58 	bl	80006a4 <__aeabi_fcmplt>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <PID_Compute+0x314>
			pid_output_sum = -1000.0f;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <PID_Compute+0x394>)
 80011fc:	4a24      	ldr	r2, [pc, #144]	; (8001290 <PID_Compute+0x3a4>)
 80011fe:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <PID_Compute+0x398>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d107      	bne.n	8001218 <PID_Compute+0x32c>
			output = pid_kp_3 * error;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <PID_Compute+0x39c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff f8aa 	bl	8000368 <__aeabi_fmul>
 8001214:	4603      	mov	r3, r0
 8001216:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_3 * input_d;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <PID_Compute+0x394>)
 800121a:	681c      	ldr	r4, [r3, #0]
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <PID_Compute+0x3a8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6839      	ldr	r1, [r7, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f8a0 	bl	8000368 <__aeabi_fmul>
 8001228:	4603      	mov	r3, r0
 800122a:	4619      	mov	r1, r3
 800122c:	4620      	mov	r0, r4
 800122e:	f7fe ff91 	bl	8000154 <__aeabi_fsub>
 8001232:	4603      	mov	r3, r0
 8001234:	4619      	mov	r1, r3
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7fe ff8e 	bl	8000158 <__addsf3>
 800123c:	4603      	mov	r3, r0
 800123e:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001240:	4912      	ldr	r1, [pc, #72]	; (800128c <PID_Compute+0x3a0>)
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f7ff fa4c 	bl	80006e0 <__aeabi_fcmpgt>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <PID_Compute+0x368>
			output = 1000.0f;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <PID_Compute+0x3a0>)
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e008      	b.n	8001266 <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001254:	490e      	ldr	r1, [pc, #56]	; (8001290 <PID_Compute+0x3a4>)
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fa24 	bl	80006a4 <__aeabi_fcmplt>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <PID_Compute+0x37a>
			output = -1000.0f;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <PID_Compute+0x3a4>)
 8001264:	60fb      	str	r3, [r7, #12]
		}
	}

	pid_output = output;
 8001266:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <PID_Compute+0x3ac>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6013      	str	r3, [r2, #0]
	pid_last_input = input;
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <PID_Compute+0x3b0>)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	6013      	str	r3, [r2, #0]
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	200001d4 	.word	0x200001d4
 8001280:	200001e8 	.word	0x200001e8
 8001284:	20000020 	.word	0x20000020
 8001288:	20000014 	.word	0x20000014
 800128c:	447a0000 	.word	0x447a0000
 8001290:	c47a0000 	.word	0xc47a0000
 8001294:	20000018 	.word	0x20000018
 8001298:	200001e0 	.word	0x200001e0
 800129c:	200001e4 	.word	0x200001e4

080012a0 <PID_Start>:
void PID_Start(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	pid_last_input = pid_input;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <PID_Start+0x30>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <PID_Start+0x34>)
 80012aa:	6013      	str	r3, [r2, #0]
	pid_output_sum = 0;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <PID_Start+0x38>)
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
    PID_Set_Sampling_Time(pid_sampling_time);
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <PID_Start+0x3c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fdfc 	bl	8000eb8 <PID_Set_Sampling_Time>
	PID_Timer_Restart();
 80012c0:	f7ff fdc8 	bl	8000e54 <PID_Timer_Restart>
	pid_running = 1;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <PID_Start+0x40>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001dc 	.word	0x200001dc
 80012d4:	200001e4 	.word	0x200001e4
 80012d8:	200001e8 	.word	0x200001e8
 80012dc:	20000002 	.word	0x20000002
 80012e0:	200001d8 	.word	0x200001d8

080012e4 <PID_Stop>:
void PID_Stop(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	PID_Timer_Stop();
 80012e8:	f7ff fdaa 	bl	8000e40 <PID_Timer_Stop>
	PID_Ready(0);
 80012ec:	f04f 0000 	mov.w	r0, #0
 80012f0:	f7ff fa72 	bl	80007d8 <PID_Ready>
	pid_running = 0;
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <PID_Stop+0x1c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001d8 	.word	0x200001d8

08001304 <Potentiometer_ADC_Interrupt>:
uint32_t potentiometer_adctmp = 0;
uint16_t potentiometer_adccnt = 0;
uint8_t potentiometer_init_cplt = 0;
float potentiometer_position = 0;

void Potentiometer_ADC_Interrupt(){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	potentiometer_adctmp += HAL_ADC_GetValue(&hadc1);
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <Potentiometer_ADC_Interrupt+0x60>)
 800130a:	f001 fe37 	bl	8002f7c <HAL_ADC_GetValue>
 800130e:	4602      	mov	r2, r0
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <Potentiometer_ADC_Interrupt+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4413      	add	r3, r2
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <Potentiometer_ADC_Interrupt+0x64>)
 8001318:	6013      	str	r3, [r2, #0]
	potentiometer_adccnt++;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <Potentiometer_ADC_Interrupt+0x68>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <Potentiometer_ADC_Interrupt+0x68>)
 8001324:	801a      	strh	r2, [r3, #0]
	if(potentiometer_adccnt == POTENTIOMETER_SAMPLE_CNT){
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <Potentiometer_ADC_Interrupt+0x68>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d115      	bne.n	800135a <Potentiometer_ADC_Interrupt+0x56>
		potentiometer_position = (float)potentiometer_adctmp/POTENTIOMETER_SAMPLE_CNT;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <Potentiometer_ADC_Interrupt+0x64>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffc0 	bl	80002b8 <__aeabi_ui2f>
 8001338:	4603      	mov	r3, r0
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <Potentiometer_ADC_Interrupt+0x6c>)
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8c7 	bl	80004d0 <__aeabi_fdiv>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <Potentiometer_ADC_Interrupt+0x70>)
 8001348:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 800134a:	f7ff f9f9 	bl	8000740 <Potentiometer_Ready>
		potentiometer_adccnt = 0;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <Potentiometer_ADC_Interrupt+0x68>)
 8001350:	2200      	movs	r2, #0
 8001352:	801a      	strh	r2, [r3, #0]
		potentiometer_adctmp = 0;
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <Potentiometer_ADC_Interrupt+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
	}
	potentiometer_init_cplt = 1;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <Potentiometer_ADC_Interrupt+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000390 	.word	0x20000390
 8001368:	200001f0 	.word	0x200001f0
 800136c:	200001f4 	.word	0x200001f4
 8001370:	42c80000 	.word	0x42c80000
 8001374:	200001f8 	.word	0x200001f8
 8001378:	200001f6 	.word	0x200001f6

0800137c <Potentiometer_Init>:

void Potentiometer_Init(){
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001380:	bf00      	nop
 8001382:	4808      	ldr	r0, [pc, #32]	; (80013a4 <Potentiometer_Init+0x28>)
 8001384:	f002 f866 	bl	8003454 <HAL_ADCEx_Calibration_Start>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f9      	bne.n	8001382 <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <Potentiometer_Init+0x28>)
 8001390:	f001 fd3e 	bl	8002e10 <HAL_ADC_Start_IT>
	while(!potentiometer_init_cplt);
 8001394:	bf00      	nop
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <Potentiometer_Init+0x2c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0fb      	beq.n	8001396 <Potentiometer_Init+0x1a>
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000390 	.word	0x20000390
 80013a8:	200001f6 	.word	0x200001f6

080013ac <Settings_Read>:
extern uint16_t pid_split_2;
extern uint8_t pid_sampling_time;

uint8_t settings[SETTINGS_TOTAL_LENGTH];

void Settings_Read(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	//Read
	Flash_Read(&settings[0], SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	49a3      	ldr	r1, [pc, #652]	; (8001644 <Settings_Read+0x298>)
 80013b6:	48a4      	ldr	r0, [pc, #656]	; (8001648 <Settings_Read+0x29c>)
 80013b8:	f7ff fabe 	bl	8000938 <Flash_Read>
	//Get CRC
	uint32_t crc = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&crc, (uint32_t)&settings[32]);
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4aa2      	ldr	r2, [pc, #648]	; (800164c <Settings_Read+0x2a0>)
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb72 	bl	8000ab0 <General_Copy_32_Bit>
	//If CRC is correct
	if(HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1) == crc){
 80013cc:	220f      	movs	r2, #15
 80013ce:	499e      	ldr	r1, [pc, #632]	; (8001648 <Settings_Read+0x29c>)
 80013d0:	489f      	ldr	r0, [pc, #636]	; (8001650 <Settings_Read+0x2a4>)
 80013d2:	f002 fa1e 	bl	8003812 <HAL_CRC_Calculate>
 80013d6:	4602      	mov	r2, r0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	f040 8249 	bne.w	8001872 <Settings_Read+0x4c6>
		//Parse
		General_Copy_16_Bit((uint32_t)&potentiometer_min, (uint32_t)&settings[0]);
 80013e0:	4b9c      	ldr	r3, [pc, #624]	; (8001654 <Settings_Read+0x2a8>)
 80013e2:	4a99      	ldr	r2, [pc, #612]	; (8001648 <Settings_Read+0x29c>)
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fb7f 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&potentiometer_max, (uint32_t)&settings[2]);
 80013ec:	4b9a      	ldr	r3, [pc, #616]	; (8001658 <Settings_Read+0x2ac>)
 80013ee:	4a9b      	ldr	r2, [pc, #620]	; (800165c <Settings_Read+0x2b0>)
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fb79 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&motor_max_power, (uint32_t)&settings[4]);
 80013f8:	4b99      	ldr	r3, [pc, #612]	; (8001660 <Settings_Read+0x2b4>)
 80013fa:	4a9a      	ldr	r2, [pc, #616]	; (8001664 <Settings_Read+0x2b8>)
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fb73 	bl	8000aea <General_Copy_16_Bit>
		motor_invert = settings[6];
 8001404:	4b90      	ldr	r3, [pc, #576]	; (8001648 <Settings_Read+0x29c>)
 8001406:	799a      	ldrb	r2, [r3, #6]
 8001408:	4b97      	ldr	r3, [pc, #604]	; (8001668 <Settings_Read+0x2bc>)
 800140a:	701a      	strb	r2, [r3, #0]
		signal_ignore = settings[7];
 800140c:	4b8e      	ldr	r3, [pc, #568]	; (8001648 <Settings_Read+0x29c>)
 800140e:	79da      	ldrb	r2, [r3, #7]
 8001410:	4b96      	ldr	r3, [pc, #600]	; (800166c <Settings_Read+0x2c0>)
 8001412:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&settings[8]);
 8001414:	4b96      	ldr	r3, [pc, #600]	; (8001670 <Settings_Read+0x2c4>)
 8001416:	4a97      	ldr	r2, [pc, #604]	; (8001674 <Settings_Read+0x2c8>)
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fb48 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&settings[12]);
 8001420:	4b95      	ldr	r3, [pc, #596]	; (8001678 <Settings_Read+0x2cc>)
 8001422:	4a96      	ldr	r2, [pc, #600]	; (800167c <Settings_Read+0x2d0>)
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fb42 	bl	8000ab0 <General_Copy_32_Bit>
		led_mode = settings[16];
 800142c:	4b86      	ldr	r3, [pc, #536]	; (8001648 <Settings_Read+0x29c>)
 800142e:	7c1a      	ldrb	r2, [r3, #16]
 8001430:	4b93      	ldr	r3, [pc, #588]	; (8001680 <Settings_Read+0x2d4>)
 8001432:	701a      	strb	r2, [r3, #0]
		pid_on = settings[17];
 8001434:	4b84      	ldr	r3, [pc, #528]	; (8001648 <Settings_Read+0x29c>)
 8001436:	7c5a      	ldrb	r2, [r3, #17]
 8001438:	4b92      	ldr	r3, [pc, #584]	; (8001684 <Settings_Read+0x2d8>)
 800143a:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&settings[18]);
 800143c:	4b92      	ldr	r3, [pc, #584]	; (8001688 <Settings_Read+0x2dc>)
 800143e:	4a93      	ldr	r2, [pc, #588]	; (800168c <Settings_Read+0x2e0>)
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fb34 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&settings[22]);
 8001448:	4b91      	ldr	r3, [pc, #580]	; (8001690 <Settings_Read+0x2e4>)
 800144a:	4a92      	ldr	r2, [pc, #584]	; (8001694 <Settings_Read+0x2e8>)
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fb2e 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&settings[26]);
 8001454:	4b90      	ldr	r3, [pc, #576]	; (8001698 <Settings_Read+0x2ec>)
 8001456:	4a91      	ldr	r2, [pc, #580]	; (800169c <Settings_Read+0x2f0>)
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fb28 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&settings[30]);
 8001460:	4b8f      	ldr	r3, [pc, #572]	; (80016a0 <Settings_Read+0x2f4>)
 8001462:	4a90      	ldr	r2, [pc, #576]	; (80016a4 <Settings_Read+0x2f8>)
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fb22 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&settings[34]);
 800146c:	4b8e      	ldr	r3, [pc, #568]	; (80016a8 <Settings_Read+0x2fc>)
 800146e:	4a8f      	ldr	r2, [pc, #572]	; (80016ac <Settings_Read+0x300>)
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fb1c 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&settings[38]);
 8001478:	4b8d      	ldr	r3, [pc, #564]	; (80016b0 <Settings_Read+0x304>)
 800147a:	4a8e      	ldr	r2, [pc, #568]	; (80016b4 <Settings_Read+0x308>)
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fb16 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&settings[42]);
 8001484:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <Settings_Read+0x30c>)
 8001486:	4a8d      	ldr	r2, [pc, #564]	; (80016bc <Settings_Read+0x310>)
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb10 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&settings[46]);
 8001490:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <Settings_Read+0x314>)
 8001492:	4a8c      	ldr	r2, [pc, #560]	; (80016c4 <Settings_Read+0x318>)
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fb0a 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&settings[50]);
 800149c:	4b8a      	ldr	r3, [pc, #552]	; (80016c8 <Settings_Read+0x31c>)
 800149e:	4a8b      	ldr	r2, [pc, #556]	; (80016cc <Settings_Read+0x320>)
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fb04 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&settings[54]);
 80014a8:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <Settings_Read+0x324>)
 80014aa:	4a8a      	ldr	r2, [pc, #552]	; (80016d4 <Settings_Read+0x328>)
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fb1b 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&settings[56]);
 80014b4:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <Settings_Read+0x32c>)
 80014b6:	4a89      	ldr	r2, [pc, #548]	; (80016dc <Settings_Read+0x330>)
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fb15 	bl	8000aea <General_Copy_16_Bit>
		pid_sampling_time = settings[58];
 80014c0:	4b61      	ldr	r3, [pc, #388]	; (8001648 <Settings_Read+0x29c>)
 80014c2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80014c6:	4b86      	ldr	r3, [pc, #536]	; (80016e0 <Settings_Read+0x334>)
 80014c8:	701a      	strb	r2, [r3, #0]

		//Verify
		if((potentiometer_min < SETTINGS_DEF_POTENTIOMETER_MIN_MIN)||(potentiometer_min > SETTINGS_DEF_POTENTIOMETER_MIN_MAX)){
 80014ca:	4b62      	ldr	r3, [pc, #392]	; (8001654 <Settings_Read+0x2a8>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 80014d2:	d302      	bcc.n	80014da <Settings_Read+0x12e>
			potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 80014d4:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <Settings_Read+0x2a8>)
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	801a      	strh	r2, [r3, #0]
		}
		if((potentiometer_max < SETTINGS_DEF_POTENTIOMETER_MAX_MIN)||(potentiometer_max > SETTINGS_DEF_POTENTIOMETER_MAX_MAX)){
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <Settings_Read+0x2ac>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	2b7f      	cmp	r3, #127	; 0x7f
 80014e0:	d904      	bls.n	80014ec <Settings_Read+0x140>
 80014e2:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <Settings_Read+0x2ac>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ea:	d303      	bcc.n	80014f4 <Settings_Read+0x148>
			potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 80014ec:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <Settings_Read+0x2ac>)
 80014ee:	f640 727f 	movw	r2, #3967	; 0xf7f
 80014f2:	801a      	strh	r2, [r3, #0]
		}
		if((motor_max_power < SETTINGS_DEF_MOTOR_MAX_POWER_MIN)||(motor_max_power > SETTINGS_DEF_MOTOR_MAX_POWER_MAX)){
 80014f4:	4b5a      	ldr	r3, [pc, #360]	; (8001660 <Settings_Read+0x2b4>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fc:	d903      	bls.n	8001506 <Settings_Read+0x15a>
			motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <Settings_Read+0x2b4>)
 8001500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001504:	801a      	strh	r2, [r3, #0]
		}
		if((motor_invert != MOTOR_NORMAL) && (motor_invert != MOTOR_INVERT)){
 8001506:	4b58      	ldr	r3, [pc, #352]	; (8001668 <Settings_Read+0x2bc>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <Settings_Read+0x170>
 800150e:	4b56      	ldr	r3, [pc, #344]	; (8001668 <Settings_Read+0x2bc>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d002      	beq.n	800151c <Settings_Read+0x170>
			motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8001516:	4b54      	ldr	r3, [pc, #336]	; (8001668 <Settings_Read+0x2bc>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
		}
		if((signal_ignore != GENERAL_TRUE) && (signal_ignore != GENERAL_FALSE)){
 800151c:	4b53      	ldr	r3, [pc, #332]	; (800166c <Settings_Read+0x2c0>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d006      	beq.n	8001532 <Settings_Read+0x186>
 8001524:	4b51      	ldr	r3, [pc, #324]	; (800166c <Settings_Read+0x2c0>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <Settings_Read+0x186>
			signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 800152c:	4b4f      	ldr	r3, [pc, #316]	; (800166c <Settings_Read+0x2c0>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
		}
		if((signal_length < SETTINGS_DEF_SIGNAL_LENGTH_MIN)||(signal_length > SETTINGS_DEF_SIGNAL_LENGTH_MAX)){
 8001532:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <Settings_Read+0x2c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f8b2 	bl	80006a4 <__aeabi_fcmplt>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d108      	bne.n	8001558 <Settings_Read+0x1ac>
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <Settings_Read+0x2c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4966      	ldr	r1, [pc, #408]	; (80016e4 <Settings_Read+0x338>)
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f8c7 	bl	80006e0 <__aeabi_fcmpgt>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <Settings_Read+0x1b4>
			signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <Settings_Read+0x2c4>)
 800155a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155e:	601a      	str	r2, [r3, #0]
		}
		if((signal_timeout < SETTINGS_DEF_SIGNAL_TIMEOUT_MIN)||(signal_timeout > SETTINGS_DEF_SIGNAL_TIMEOUT_MAX)){
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <Settings_Read+0x2cc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f89b 	bl	80006a4 <__aeabi_fcmplt>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d108      	bne.n	8001586 <Settings_Read+0x1da>
 8001574:	4b40      	ldr	r3, [pc, #256]	; (8001678 <Settings_Read+0x2cc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	495b      	ldr	r1, [pc, #364]	; (80016e8 <Settings_Read+0x33c>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f8b0 	bl	80006e0 <__aeabi_fcmpgt>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <Settings_Read+0x1e0>
			signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8001586:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <Settings_Read+0x2cc>)
 8001588:	4a58      	ldr	r2, [pc, #352]	; (80016ec <Settings_Read+0x340>)
 800158a:	601a      	str	r2, [r3, #0]
		}
		if((led_mode != LED_MODE_OFF) && (led_mode != LED_MODE_POWER) && (led_mode != LED_MODE_SIGNAL) && (led_mode != LED_MODE_POSITION_CHANGE)){
 800158c:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <Settings_Read+0x2d4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <Settings_Read+0x206>
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <Settings_Read+0x2d4>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d00a      	beq.n	80015b2 <Settings_Read+0x206>
 800159c:	4b38      	ldr	r3, [pc, #224]	; (8001680 <Settings_Read+0x2d4>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d006      	beq.n	80015b2 <Settings_Read+0x206>
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <Settings_Read+0x2d4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d002      	beq.n	80015b2 <Settings_Read+0x206>
			led_mode = SETTINGS_DEF_LED_MODE_DEF;
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <Settings_Read+0x2d4>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
		}
		if((pid_on != PID_ON_M) && (pid_on != PID_ON_E)){
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <Settings_Read+0x2d8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <Settings_Read+0x21c>
 80015ba:	4b32      	ldr	r3, [pc, #200]	; (8001684 <Settings_Read+0x2d8>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d002      	beq.n	80015c8 <Settings_Read+0x21c>
			pid_on = SETTINGS_DEF_PID_ON_DEF;
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <Settings_Read+0x2d8>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
		}
		if((pid_kp_1 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_1 > SETTINGS_DEF_PID_KP_MAX)){
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <Settings_Read+0x2dc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f04f 0100 	mov.w	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f867 	bl	80006a4 <__aeabi_fcmplt>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d108      	bne.n	80015ee <Settings_Read+0x242>
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <Settings_Read+0x2dc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4941      	ldr	r1, [pc, #260]	; (80016e8 <Settings_Read+0x33c>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f87c 	bl	80006e0 <__aeabi_fcmpgt>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <Settings_Read+0x24a>
			pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <Settings_Read+0x2dc>)
 80015f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015f4:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_1 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_1 > SETTINGS_DEF_PID_KI_MAX)){
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <Settings_Read+0x2e4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f850 	bl	80006a4 <__aeabi_fcmplt>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <Settings_Read+0x270>
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <Settings_Read+0x2e4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4936      	ldr	r1, [pc, #216]	; (80016e8 <Settings_Read+0x33c>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f865 	bl	80006e0 <__aeabi_fcmpgt>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <Settings_Read+0x278>
			pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <Settings_Read+0x2e4>)
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_1 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_1 > SETTINGS_DEF_PID_KD_MAX)){
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <Settings_Read+0x2ec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f839 	bl	80006a4 <__aeabi_fcmplt>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d160      	bne.n	80016fa <Settings_Read+0x34e>
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <Settings_Read+0x2ec>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	492a      	ldr	r1, [pc, #168]	; (80016e8 <Settings_Read+0x33c>)
 800163e:	4618      	mov	r0, r3
 8001640:	e056      	b.n	80016f0 <Settings_Read+0x344>
 8001642:	bf00      	nop
 8001644:	0800fc00 	.word	0x0800fc00
 8001648:	200001fc 	.word	0x200001fc
 800164c:	2000021c 	.word	0x2000021c
 8001650:	200003c0 	.word	0x200003c0
 8001654:	200001ec 	.word	0x200001ec
 8001658:	200001ee 	.word	0x200001ee
 800165c:	200001fe 	.word	0x200001fe
 8001660:	20000000 	.word	0x20000000
 8001664:	20000200 	.word	0x20000200
 8001668:	200001c7 	.word	0x200001c7
 800166c:	2000023c 	.word	0x2000023c
 8001670:	20000240 	.word	0x20000240
 8001674:	20000204 	.word	0x20000204
 8001678:	20000244 	.word	0x20000244
 800167c:	20000208 	.word	0x20000208
 8001680:	200001c4 	.word	0x200001c4
 8001684:	20000020 	.word	0x20000020
 8001688:	20000004 	.word	0x20000004
 800168c:	2000020e 	.word	0x2000020e
 8001690:	200001cc 	.word	0x200001cc
 8001694:	20000212 	.word	0x20000212
 8001698:	20000008 	.word	0x20000008
 800169c:	20000216 	.word	0x20000216
 80016a0:	2000000c 	.word	0x2000000c
 80016a4:	2000021a 	.word	0x2000021a
 80016a8:	200001d0 	.word	0x200001d0
 80016ac:	2000021e 	.word	0x2000021e
 80016b0:	20000010 	.word	0x20000010
 80016b4:	20000222 	.word	0x20000222
 80016b8:	20000014 	.word	0x20000014
 80016bc:	20000226 	.word	0x20000226
 80016c0:	200001d4 	.word	0x200001d4
 80016c4:	2000022a 	.word	0x2000022a
 80016c8:	20000018 	.word	0x20000018
 80016cc:	2000022e 	.word	0x2000022e
 80016d0:	2000001c 	.word	0x2000001c
 80016d4:	20000232 	.word	0x20000232
 80016d8:	2000001e 	.word	0x2000001e
 80016dc:	20000234 	.word	0x20000234
 80016e0:	20000002 	.word	0x20000002
 80016e4:	41200000 	.word	0x41200000
 80016e8:	42c80000 	.word	0x42c80000
 80016ec:	41a00000 	.word	0x41a00000
 80016f0:	f7fe fff6 	bl	80006e0 <__aeabi_fcmpgt>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <Settings_Read+0x354>
			pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 80016fa:	4b85      	ldr	r3, [pc, #532]	; (8001910 <Settings_Read+0x564>)
 80016fc:	4a85      	ldr	r2, [pc, #532]	; (8001914 <Settings_Read+0x568>)
 80016fe:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_2 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_2 > SETTINGS_DEF_PID_KP_MAX)){
 8001700:	4b85      	ldr	r3, [pc, #532]	; (8001918 <Settings_Read+0x56c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f04f 0100 	mov.w	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ffcb 	bl	80006a4 <__aeabi_fcmplt>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d108      	bne.n	8001726 <Settings_Read+0x37a>
 8001714:	4b80      	ldr	r3, [pc, #512]	; (8001918 <Settings_Read+0x56c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4980      	ldr	r1, [pc, #512]	; (800191c <Settings_Read+0x570>)
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ffe0 	bl	80006e0 <__aeabi_fcmpgt>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <Settings_Read+0x382>
			pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 8001726:	4b7c      	ldr	r3, [pc, #496]	; (8001918 <Settings_Read+0x56c>)
 8001728:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800172c:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_2 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_2 > SETTINGS_DEF_PID_KI_MAX)){
 800172e:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <Settings_Read+0x574>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f04f 0100 	mov.w	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ffb4 	bl	80006a4 <__aeabi_fcmplt>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d108      	bne.n	8001754 <Settings_Read+0x3a8>
 8001742:	4b77      	ldr	r3, [pc, #476]	; (8001920 <Settings_Read+0x574>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4975      	ldr	r1, [pc, #468]	; (800191c <Settings_Read+0x570>)
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ffc9 	bl	80006e0 <__aeabi_fcmpgt>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <Settings_Read+0x3b0>
			pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 8001754:	4b72      	ldr	r3, [pc, #456]	; (8001920 <Settings_Read+0x574>)
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_2 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_2 > SETTINGS_DEF_PID_KD_MAX)){
 800175c:	4b71      	ldr	r3, [pc, #452]	; (8001924 <Settings_Read+0x578>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe ff9d 	bl	80006a4 <__aeabi_fcmplt>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d108      	bne.n	8001782 <Settings_Read+0x3d6>
 8001770:	4b6c      	ldr	r3, [pc, #432]	; (8001924 <Settings_Read+0x578>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4969      	ldr	r1, [pc, #420]	; (800191c <Settings_Read+0x570>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe ffb2 	bl	80006e0 <__aeabi_fcmpgt>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <Settings_Read+0x3dc>
			pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 8001782:	4b68      	ldr	r3, [pc, #416]	; (8001924 <Settings_Read+0x578>)
 8001784:	4a63      	ldr	r2, [pc, #396]	; (8001914 <Settings_Read+0x568>)
 8001786:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_3 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_3 > SETTINGS_DEF_PID_KP_MAX)){
 8001788:	4b67      	ldr	r3, [pc, #412]	; (8001928 <Settings_Read+0x57c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f04f 0100 	mov.w	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe ff87 	bl	80006a4 <__aeabi_fcmplt>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d108      	bne.n	80017ae <Settings_Read+0x402>
 800179c:	4b62      	ldr	r3, [pc, #392]	; (8001928 <Settings_Read+0x57c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	495e      	ldr	r1, [pc, #376]	; (800191c <Settings_Read+0x570>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe ff9c 	bl	80006e0 <__aeabi_fcmpgt>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <Settings_Read+0x40a>
			pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80017ae:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <Settings_Read+0x57c>)
 80017b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017b4:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_3 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_3 > SETTINGS_DEF_PID_KI_MAX)){
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <Settings_Read+0x580>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe ff70 	bl	80006a4 <__aeabi_fcmplt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d108      	bne.n	80017dc <Settings_Read+0x430>
 80017ca:	4b58      	ldr	r3, [pc, #352]	; (800192c <Settings_Read+0x580>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4953      	ldr	r1, [pc, #332]	; (800191c <Settings_Read+0x570>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe ff85 	bl	80006e0 <__aeabi_fcmpgt>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <Settings_Read+0x438>
			pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <Settings_Read+0x580>)
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_3 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_3 > SETTINGS_DEF_PID_KD_MAX)){
 80017e4:	4b52      	ldr	r3, [pc, #328]	; (8001930 <Settings_Read+0x584>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f04f 0100 	mov.w	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe ff59 	bl	80006a4 <__aeabi_fcmplt>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d108      	bne.n	800180a <Settings_Read+0x45e>
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <Settings_Read+0x584>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4947      	ldr	r1, [pc, #284]	; (800191c <Settings_Read+0x570>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe ff6e 	bl	80006e0 <__aeabi_fcmpgt>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <Settings_Read+0x464>
			pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <Settings_Read+0x584>)
 800180c:	4a41      	ldr	r2, [pc, #260]	; (8001914 <Settings_Read+0x568>)
 800180e:	601a      	str	r2, [r3, #0]
		}
		if((pid_split_1 < SETTINGS_DEF_PID_SPLIT_1_MIN)||(pid_split_1 > SETTINGS_DEF_PID_SPLIT_1_MAX)){
 8001810:	4b48      	ldr	r3, [pc, #288]	; (8001934 <Settings_Read+0x588>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001818:	d303      	bcc.n	8001822 <Settings_Read+0x476>
			pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 800181a:	4b46      	ldr	r3, [pc, #280]	; (8001934 <Settings_Read+0x588>)
 800181c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001820:	801a      	strh	r2, [r3, #0]
		}
		if((pid_split_2 < SETTINGS_DEF_PID_SPLIT_2_MIN)||(pid_split_2 > SETTINGS_DEF_PID_SPLIT_2_MAX)){
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <Settings_Read+0x58c>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182a:	d303      	bcc.n	8001834 <Settings_Read+0x488>
			pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <Settings_Read+0x58c>)
 800182e:	f640 32fc 	movw	r2, #3068	; 0xbfc
 8001832:	801a      	strh	r2, [r3, #0]
		}
		if((pid_sampling_time < SETTINGS_DEF_PID_SAMPLING_TIME_MIN)||(pid_sampling_time > SETTINGS_DEF_PID_SAMPLING_TIME_MAX)){
 8001834:	4b41      	ldr	r3, [pc, #260]	; (800193c <Settings_Read+0x590>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd41 	bl	80002c0 <__aeabi_i2f>
 800183e:	4603      	mov	r3, r0
 8001840:	493f      	ldr	r1, [pc, #252]	; (8001940 <Settings_Read+0x594>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe ff2e 	bl	80006a4 <__aeabi_fcmplt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10d      	bne.n	800186a <Settings_Read+0x4be>
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <Settings_Read+0x590>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fd34 	bl	80002c0 <__aeabi_i2f>
 8001858:	4603      	mov	r3, r0
 800185a:	4930      	ldr	r1, [pc, #192]	; (800191c <Settings_Read+0x570>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe ff3f 	bl	80006e0 <__aeabi_fcmpgt>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d100      	bne.n	800186a <Settings_Read+0x4be>
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
	}
}
 8001868:	e04d      	b.n	8001906 <Settings_Read+0x55a>
			pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <Settings_Read+0x590>)
 800186c:	2205      	movs	r2, #5
 800186e:	701a      	strb	r2, [r3, #0]
}
 8001870:	e049      	b.n	8001906 <Settings_Read+0x55a>
		potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 8001872:	4b34      	ldr	r3, [pc, #208]	; (8001944 <Settings_Read+0x598>)
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	801a      	strh	r2, [r3, #0]
		potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001878:	4b33      	ldr	r3, [pc, #204]	; (8001948 <Settings_Read+0x59c>)
 800187a:	f640 727f 	movw	r2, #3967	; 0xf7f
 800187e:	801a      	strh	r2, [r3, #0]
		motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001880:	4b32      	ldr	r3, [pc, #200]	; (800194c <Settings_Read+0x5a0>)
 8001882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001886:	801a      	strh	r2, [r3, #0]
		motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <Settings_Read+0x5a4>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
		signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <Settings_Read+0x5a8>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
		signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <Settings_Read+0x5ac>)
 8001896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800189a:	601a      	str	r2, [r3, #0]
		signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <Settings_Read+0x5b0>)
 800189e:	4a30      	ldr	r2, [pc, #192]	; (8001960 <Settings_Read+0x5b4>)
 80018a0:	601a      	str	r2, [r3, #0]
		led_mode = SETTINGS_DEF_LED_MODE_DEF;
 80018a2:	4b30      	ldr	r3, [pc, #192]	; (8001964 <Settings_Read+0x5b8>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
		pid_on = SETTINGS_DEF_PID_ON_DEF;
 80018a8:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <Settings_Read+0x5bc>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
		pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <Settings_Read+0x5c0>)
 80018b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018b4:	601a      	str	r2, [r3, #0]
		pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 80018b6:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <Settings_Read+0x5c4>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
		pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <Settings_Read+0x564>)
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <Settings_Read+0x568>)
 80018c2:	601a      	str	r2, [r3, #0]
		pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <Settings_Read+0x56c>)
 80018c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018ca:	601a      	str	r2, [r3, #0]
		pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <Settings_Read+0x574>)
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
		pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <Settings_Read+0x578>)
 80018d6:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <Settings_Read+0x568>)
 80018d8:	601a      	str	r2, [r3, #0]
		pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <Settings_Read+0x57c>)
 80018dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018e0:	601a      	str	r2, [r3, #0]
		pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <Settings_Read+0x580>)
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <Settings_Read+0x584>)
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <Settings_Read+0x568>)
 80018ee:	601a      	str	r2, [r3, #0]
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <Settings_Read+0x588>)
 80018f2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018f6:	801a      	strh	r2, [r3, #0]
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <Settings_Read+0x58c>)
 80018fa:	f640 32fc 	movw	r2, #3068	; 0xbfc
 80018fe:	801a      	strh	r2, [r3, #0]
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <Settings_Read+0x590>)
 8001902:	2205      	movs	r2, #5
 8001904:	701a      	strb	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008
 8001914:	40400000 	.word	0x40400000
 8001918:	2000000c 	.word	0x2000000c
 800191c:	42c80000 	.word	0x42c80000
 8001920:	200001d0 	.word	0x200001d0
 8001924:	20000010 	.word	0x20000010
 8001928:	20000014 	.word	0x20000014
 800192c:	200001d4 	.word	0x200001d4
 8001930:	20000018 	.word	0x20000018
 8001934:	2000001c 	.word	0x2000001c
 8001938:	2000001e 	.word	0x2000001e
 800193c:	20000002 	.word	0x20000002
 8001940:	40a00000 	.word	0x40a00000
 8001944:	200001ec 	.word	0x200001ec
 8001948:	200001ee 	.word	0x200001ee
 800194c:	20000000 	.word	0x20000000
 8001950:	200001c7 	.word	0x200001c7
 8001954:	2000023c 	.word	0x2000023c
 8001958:	20000240 	.word	0x20000240
 800195c:	20000244 	.word	0x20000244
 8001960:	41a00000 	.word	0x41a00000
 8001964:	200001c4 	.word	0x200001c4
 8001968:	20000020 	.word	0x20000020
 800196c:	20000004 	.word	0x20000004
 8001970:	200001cc 	.word	0x200001cc

08001974 <Settings_Write>:
void Settings_Write(){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
	General_Copy_16_Bit((uint32_t)&settings[0], (uint32_t)&potentiometer_min);
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <Settings_Write+0x124>)
 800197c:	4a47      	ldr	r2, [pc, #284]	; (8001a9c <Settings_Write+0x128>)
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f8b2 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[2], (uint32_t)&potentiometer_max);
 8001986:	4b46      	ldr	r3, [pc, #280]	; (8001aa0 <Settings_Write+0x12c>)
 8001988:	4a46      	ldr	r2, [pc, #280]	; (8001aa4 <Settings_Write+0x130>)
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f8ac 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[4], (uint32_t)&motor_max_power);
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <Settings_Write+0x134>)
 8001994:	4a45      	ldr	r2, [pc, #276]	; (8001aac <Settings_Write+0x138>)
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f8a6 	bl	8000aea <General_Copy_16_Bit>
	settings[6] = motor_invert;
 800199e:	4b44      	ldr	r3, [pc, #272]	; (8001ab0 <Settings_Write+0x13c>)
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <Settings_Write+0x124>)
 80019a4:	719a      	strb	r2, [r3, #6]
	settings[7] = signal_ignore;
 80019a6:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <Settings_Write+0x140>)
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <Settings_Write+0x124>)
 80019ac:	71da      	strb	r2, [r3, #7]
	General_Copy_32_Bit((uint32_t)&settings[8], (uint32_t)&signal_length);
 80019ae:	4b42      	ldr	r3, [pc, #264]	; (8001ab8 <Settings_Write+0x144>)
 80019b0:	4a42      	ldr	r2, [pc, #264]	; (8001abc <Settings_Write+0x148>)
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f87b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[12], (uint32_t)&signal_timeout);
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <Settings_Write+0x14c>)
 80019bc:	4a41      	ldr	r2, [pc, #260]	; (8001ac4 <Settings_Write+0x150>)
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f875 	bl	8000ab0 <General_Copy_32_Bit>
	settings[16] = led_mode;
 80019c6:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <Settings_Write+0x154>)
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <Settings_Write+0x124>)
 80019cc:	741a      	strb	r2, [r3, #16]
	settings[17] = pid_on;
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <Settings_Write+0x158>)
 80019d0:	781a      	ldrb	r2, [r3, #0]
 80019d2:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <Settings_Write+0x124>)
 80019d4:	745a      	strb	r2, [r3, #17]
	General_Copy_32_Bit((uint32_t)&settings[18], (uint32_t)&pid_kp_1);
 80019d6:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <Settings_Write+0x15c>)
 80019d8:	4a3e      	ldr	r2, [pc, #248]	; (8001ad4 <Settings_Write+0x160>)
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f867 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[22], (uint32_t)&pid_ki_1);
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <Settings_Write+0x164>)
 80019e4:	4a3d      	ldr	r2, [pc, #244]	; (8001adc <Settings_Write+0x168>)
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f861 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[26], (uint32_t)&pid_kd_1);
 80019ee:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <Settings_Write+0x16c>)
 80019f0:	4a3c      	ldr	r2, [pc, #240]	; (8001ae4 <Settings_Write+0x170>)
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f85b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[30], (uint32_t)&pid_kp_2);
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <Settings_Write+0x174>)
 80019fc:	4a3b      	ldr	r2, [pc, #236]	; (8001aec <Settings_Write+0x178>)
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f855 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[34], (uint32_t)&pid_ki_2);
 8001a06:	4b3a      	ldr	r3, [pc, #232]	; (8001af0 <Settings_Write+0x17c>)
 8001a08:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <Settings_Write+0x180>)
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f84f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[38], (uint32_t)&pid_kd_2);
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <Settings_Write+0x184>)
 8001a14:	4a39      	ldr	r2, [pc, #228]	; (8001afc <Settings_Write+0x188>)
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f849 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[42], (uint32_t)&pid_kp_3);
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <Settings_Write+0x18c>)
 8001a20:	4a38      	ldr	r2, [pc, #224]	; (8001b04 <Settings_Write+0x190>)
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f843 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[46], (uint32_t)&pid_ki_3);
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <Settings_Write+0x194>)
 8001a2c:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <Settings_Write+0x198>)
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f83d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[50], (uint32_t)&pid_kd_3);
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <Settings_Write+0x19c>)
 8001a38:	4a36      	ldr	r2, [pc, #216]	; (8001b14 <Settings_Write+0x1a0>)
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff f837 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&settings[54], (uint32_t)&pid_split_1);
 8001a42:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <Settings_Write+0x1a4>)
 8001a44:	4a35      	ldr	r2, [pc, #212]	; (8001b1c <Settings_Write+0x1a8>)
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f84e 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[56], (uint32_t)&pid_split_2);
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <Settings_Write+0x1ac>)
 8001a50:	4a34      	ldr	r2, [pc, #208]	; (8001b24 <Settings_Write+0x1b0>)
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f848 	bl	8000aea <General_Copy_16_Bit>
	settings[58] = pid_sampling_time;
 8001a5a:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <Settings_Write+0x1b4>)
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <Settings_Write+0x124>)
 8001a60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	settings[59] = SETTINGS_CRC_PADDING;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <Settings_Write+0x124>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1);
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	490a      	ldr	r1, [pc, #40]	; (8001a98 <Settings_Write+0x124>)
 8001a70:	482e      	ldr	r0, [pc, #184]	; (8001b2c <Settings_Write+0x1b8>)
 8001a72:	f001 fece 	bl	8003812 <HAL_CRC_Calculate>
 8001a76:	4603      	mov	r3, r0
 8001a78:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&settings[60], (uint32_t)&crc);
 8001a7a:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <Settings_Write+0x1bc>)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f7ff f815 	bl	8000ab0 <General_Copy_32_Bit>
	Flash_Write(&settings[0], SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	492a      	ldr	r1, [pc, #168]	; (8001b34 <Settings_Write+0x1c0>)
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <Settings_Write+0x124>)
 8001a8c:	f7fe ff73 	bl	8000976 <Flash_Write>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200001fc 	.word	0x200001fc
 8001a9c:	200001ec 	.word	0x200001ec
 8001aa0:	200001fe 	.word	0x200001fe
 8001aa4:	200001ee 	.word	0x200001ee
 8001aa8:	20000200 	.word	0x20000200
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	200001c7 	.word	0x200001c7
 8001ab4:	2000023c 	.word	0x2000023c
 8001ab8:	20000204 	.word	0x20000204
 8001abc:	20000240 	.word	0x20000240
 8001ac0:	20000208 	.word	0x20000208
 8001ac4:	20000244 	.word	0x20000244
 8001ac8:	200001c4 	.word	0x200001c4
 8001acc:	20000020 	.word	0x20000020
 8001ad0:	2000020e 	.word	0x2000020e
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	20000212 	.word	0x20000212
 8001adc:	200001cc 	.word	0x200001cc
 8001ae0:	20000216 	.word	0x20000216
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	2000021a 	.word	0x2000021a
 8001aec:	2000000c 	.word	0x2000000c
 8001af0:	2000021e 	.word	0x2000021e
 8001af4:	200001d0 	.word	0x200001d0
 8001af8:	20000222 	.word	0x20000222
 8001afc:	20000010 	.word	0x20000010
 8001b00:	20000226 	.word	0x20000226
 8001b04:	20000014 	.word	0x20000014
 8001b08:	2000022a 	.word	0x2000022a
 8001b0c:	200001d4 	.word	0x200001d4
 8001b10:	2000022e 	.word	0x2000022e
 8001b14:	20000018 	.word	0x20000018
 8001b18:	20000232 	.word	0x20000232
 8001b1c:	2000001c 	.word	0x2000001c
 8001b20:	20000234 	.word	0x20000234
 8001b24:	2000001e 	.word	0x2000001e
 8001b28:	20000002 	.word	0x20000002
 8001b2c:	200003c0 	.word	0x200003c0
 8001b30:	20000238 	.word	0x20000238
 8001b34:	0800fc00 	.word	0x0800fc00

08001b38 <Signal_SysTick_Interrupt>:
float signal_length;
float signal_timeout;

uint8_t signal_present = 0;

void Signal_SysTick_Interrupt(){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	if(((float)(Signal_Read_Timer() + 1) / 500.0f) > signal_timeout){
 8001b3c:	f000 f8f4 	bl	8001d28 <Signal_Read_Timer>
 8001b40:	4603      	mov	r3, r0
 8001b42:	3301      	adds	r3, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fbb7 	bl	80002b8 <__aeabi_ui2f>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4916      	ldr	r1, [pc, #88]	; (8001ba8 <Signal_SysTick_Interrupt+0x70>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fcbe 	bl	80004d0 <__aeabi_fdiv>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <Signal_SysTick_Interrupt+0x74>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f7fe fdbe 	bl	80006e0 <__aeabi_fcmpgt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d100      	bne.n	8001b6c <Signal_SysTick_Interrupt+0x34>
				PID_Stop();
			}
			pid_setpoint = 0;
		}
	}
}
 8001b6a:	e01a      	b.n	8001ba2 <Signal_SysTick_Interrupt+0x6a>
		signal_present = 0;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <Signal_SysTick_Interrupt+0x78>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
		Signal_Timer_Reset();
 8001b72:	f000 f8e5 	bl	8001d40 <Signal_Timer_Reset>
		if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <Signal_SysTick_Interrupt+0x7c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <Signal_SysTick_Interrupt+0x56>
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <Signal_SysTick_Interrupt+0x7c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <Signal_SysTick_Interrupt+0x6a>
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <Signal_SysTick_Interrupt+0x80>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <Signal_SysTick_Interrupt+0x6a>
			if(pid_running){
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <Signal_SysTick_Interrupt+0x84>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <Signal_SysTick_Interrupt+0x62>
				PID_Stop();
 8001b96:	f7ff fba5 	bl	80012e4 <PID_Stop>
			pid_setpoint = 0;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <Signal_SysTick_Interrupt+0x88>)
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	43fa0000 	.word	0x43fa0000
 8001bac:	20000244 	.word	0x20000244
 8001bb0:	20000248 	.word	0x20000248
 8001bb4:	2000023c 	.word	0x2000023c
 8001bb8:	2000024d 	.word	0x2000024d
 8001bbc:	200001d8 	.word	0x200001d8
 8001bc0:	20000024 	.word	0x20000024

08001bc4 <Signal_Interrupt>:
void Signal_Interrupt(){
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
	uint32_t cnt = Signal_Read_Timer();
 8001bca:	f000 f8ad 	bl	8001d28 <Signal_Read_Timer>
 8001bce:	60f8      	str	r0, [r7, #12]
	if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001bd0:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <Signal_Interrupt+0x13c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d009      	beq.n	8001bec <Signal_Interrupt+0x28>
 8001bd8:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <Signal_Interrupt+0x13c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 808a 	beq.w	8001cf6 <Signal_Interrupt+0x132>
 8001be2:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <Signal_Interrupt+0x140>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 8085 	bne.w	8001cf6 <Signal_Interrupt+0x132>
		if(Signal_Read() == SIGNAL_HIGH){
 8001bec:	f000 f8b4 	bl	8001d58 <Signal_Read>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d105      	bne.n	8001c02 <Signal_Interrupt+0x3e>
			Signal_Timer_Reset();
 8001bf6:	f000 f8a3 	bl	8001d40 <Signal_Timer_Reset>
			signal_present = 1;
 8001bfa:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <Signal_Interrupt+0x144>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
					PID_Stop();
				}
			}
		}
	}
}
 8001c00:	e079      	b.n	8001cf6 <Signal_Interrupt+0x132>
		}else if(signal_present){
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <Signal_Interrupt+0x144>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d075      	beq.n	8001cf6 <Signal_Interrupt+0x132>
			float received_length_ms  = (float)((uint32_t)cnt + (uint32_t)1) / 500.0f;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fb52 	bl	80002b8 <__aeabi_ui2f>
 8001c14:	4603      	mov	r3, r0
 8001c16:	493d      	ldr	r1, [pc, #244]	; (8001d0c <Signal_Interrupt+0x148>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc59 	bl	80004d0 <__aeabi_fdiv>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	60bb      	str	r3, [r7, #8]
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <Signal_Interrupt+0x14c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4619      	mov	r1, r3
 8001c28:	68b8      	ldr	r0, [r7, #8]
 8001c2a:	f7fe fd45 	bl	80006b8 <__aeabi_fcmple>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d055      	beq.n	8001ce0 <Signal_Interrupt+0x11c>
 8001c34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c38:	68b8      	ldr	r0, [r7, #8]
 8001c3a:	f7fe fd47 	bl	80006cc <__aeabi_fcmpge>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d04d      	beq.n	8001ce0 <Signal_Interrupt+0x11c>
				float new_pid_setpoint = (((float)potentiometer_max - (float)potentiometer_min) * ((received_length_ms - 1.0f) / (signal_length - 1.0f))) + (float)potentiometer_min;
 8001c44:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <Signal_Interrupt+0x150>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fb35 	bl	80002b8 <__aeabi_ui2f>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <Signal_Interrupt+0x154>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fb2f 	bl	80002b8 <__aeabi_ui2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7fe fa78 	bl	8000154 <__aeabi_fsub>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461c      	mov	r4, r3
 8001c68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c6c:	68b8      	ldr	r0, [r7, #8]
 8001c6e:	f7fe fa71 	bl	8000154 <__aeabi_fsub>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461d      	mov	r5, r3
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <Signal_Interrupt+0x14c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fa68 	bl	8000154 <__aeabi_fsub>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4619      	mov	r1, r3
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f7fe fc21 	bl	80004d0 <__aeabi_fdiv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4619      	mov	r1, r3
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7fe fb68 	bl	8000368 <__aeabi_fmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <Signal_Interrupt+0x154>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fb09 	bl	80002b8 <__aeabi_ui2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7fe fa54 	bl	8000158 <__addsf3>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	607b      	str	r3, [r7, #4]
				if(pid_setpoint != new_pid_setpoint){
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <Signal_Interrupt+0x158>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fce8 	bl	8000690 <__aeabi_fcmpeq>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <Signal_Interrupt+0x108>
					led_position_changed = 1;
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <Signal_Interrupt+0x15c>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
				pid_setpoint = new_pid_setpoint;
 8001ccc:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <Signal_Interrupt+0x158>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
				if(!pid_running){
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <Signal_Interrupt+0x160>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10c      	bne.n	8001cf4 <Signal_Interrupt+0x130>
					PID_Start();
 8001cda:	f7ff fae1 	bl	80012a0 <PID_Start>
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8001cde:	e009      	b.n	8001cf4 <Signal_Interrupt+0x130>
				signal_present = 0;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <Signal_Interrupt+0x144>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
				if(pid_running){
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <Signal_Interrupt+0x160>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <Signal_Interrupt+0x132>
					PID_Stop();
 8001cee:	f7ff faf9 	bl	80012e4 <PID_Stop>
}
 8001cf2:	e000      	b.n	8001cf6 <Signal_Interrupt+0x132>
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8001cf4:	bf00      	nop
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000023c 	.word	0x2000023c
 8001d04:	2000024d 	.word	0x2000024d
 8001d08:	20000248 	.word	0x20000248
 8001d0c:	43fa0000 	.word	0x43fa0000
 8001d10:	20000240 	.word	0x20000240
 8001d14:	200001ee 	.word	0x200001ee
 8001d18:	200001ec 	.word	0x200001ec
 8001d1c:	20000024 	.word	0x20000024
 8001d20:	200001c5 	.word	0x200001c5
 8001d24:	200001d8 	.word	0x200001d8

08001d28 <Signal_Read_Timer>:

uint32_t Signal_Read_Timer(){
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <Signal_Read_Timer+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000458 	.word	0x20000458

08001d40 <Signal_Timer_Reset>:
void Signal_Timer_Reset(){
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <Signal_Timer_Reset+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000458 	.word	0x20000458

08001d58 <Signal_Read>:
uint8_t Signal_Read(){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001d66:	e01d      	b.n	8001da4 <Signal_Read+0x4c>
		i = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	4811      	ldr	r0, [pc, #68]	; (8001db4 <Signal_Read+0x5c>)
 8001d70:	f002 f906 	bl	8003f80 <HAL_GPIO_ReadPin>
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001d78:	e011      	b.n	8001d9e <Signal_Read+0x46>
			i++;
 8001d7a:	797b      	ldrb	r3, [r7, #5]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 8001d80:	2102      	movs	r1, #2
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <Signal_Read+0x5c>)
 8001d84:	f002 f8fc 	bl	8003f80 <HAL_GPIO_ReadPin>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d000      	beq.n	8001d94 <Signal_Read+0x3c>
				break;
 8001d92:	e007      	b.n	8001da4 <Signal_Read+0x4c>
			}
			if(i == SIGNAL_DEBOUNCE_SAMPLES){
 8001d94:	797b      	ldrb	r3, [r7, #5]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d101      	bne.n	8001d9e <Signal_Read+0x46>
				d = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	71bb      	strb	r3, [r7, #6]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001d9e:	797b      	ldrb	r3, [r7, #5]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d1ea      	bne.n	8001d7a <Signal_Read+0x22>
	while(d != 1){
 8001da4:	79bb      	ldrb	r3, [r7, #6]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d1de      	bne.n	8001d68 <Signal_Read+0x10>
			}
		}
	}
	return level;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40010c00 	.word	0x40010c00

08001db8 <Signal_Init>:

void Signal_Init(){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <Signal_Init+0x10>)
 8001dbe:	f004 fbb7 	bl	8006530 <HAL_TIM_Base_Start>
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000458 	.word	0x20000458

08001dcc <USB_Det_Read>:

uint8_t usb_present = 0;
uint8_t usb_tx_buffer[64];
uint8_t usb_long_buffer[256];

uint8_t USB_Det_Read(){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001dda:	e01f      	b.n	8001e1c <USB_Det_Read+0x50>
		i = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8001de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de4:	4811      	ldr	r0, [pc, #68]	; (8001e2c <USB_Det_Read+0x60>)
 8001de6:	f002 f8cb 	bl	8003f80 <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001dee:	e012      	b.n	8001e16 <USB_Det_Read+0x4a>
			i++;
 8001df0:	797b      	ldrb	r3, [r7, #5]
 8001df2:	3301      	adds	r3, #1
 8001df4:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 8001df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dfa:	480c      	ldr	r0, [pc, #48]	; (8001e2c <USB_Det_Read+0x60>)
 8001dfc:	f002 f8c0 	bl	8003f80 <HAL_GPIO_ReadPin>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d000      	beq.n	8001e0c <USB_Det_Read+0x40>
				break;
 8001e0a:	e007      	b.n	8001e1c <USB_Det_Read+0x50>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 8001e0c:	797b      	ldrb	r3, [r7, #5]
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d101      	bne.n	8001e16 <USB_Det_Read+0x4a>
				d = 1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001e16:	797b      	ldrb	r3, [r7, #5]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d1e9      	bne.n	8001df0 <USB_Det_Read+0x24>
	while(d != 1){
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d1dc      	bne.n	8001ddc <USB_Det_Read+0x10>
			}
		}
	}
	return level;
 8001e22:	79fb      	ldrb	r3, [r7, #7]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40010c00 	.word	0x40010c00

08001e30 <USB_Det_Interrupt>:
void USB_Det_Interrupt(){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e34:	f7ff ffca 	bl	8001dcc <USB_Det_Read>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d103      	bne.n	8001e46 <USB_Det_Interrupt+0x16>
		usb_present = 1;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <USB_Det_Interrupt+0x2c>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e002      	b.n	8001e4c <USB_Det_Interrupt+0x1c>
	}else{
		usb_present = 0;
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <USB_Det_Interrupt+0x2c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
	}
	if(pid_running){
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <USB_Det_Interrupt+0x30>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <USB_Det_Interrupt+0x28>
		PID_Stop();
 8001e54:	f7ff fa46 	bl	80012e4 <PID_Stop>
	}
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000024d 	.word	0x2000024d
 8001e60:	200001d8 	.word	0x200001d8

08001e64 <USB_Init>:
void USB_Init(){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e68:	f7ff ffb0 	bl	8001dcc <USB_Det_Read>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d103      	bne.n	8001e7a <USB_Init+0x16>
		usb_present = 1;
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <USB_Init+0x20>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
	}else{
		usb_present = 0;
	}
}
 8001e78:	e002      	b.n	8001e80 <USB_Init+0x1c>
		usb_present = 0;
 8001e7a:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <USB_Init+0x20>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000024d 	.word	0x2000024d

08001e88 <USB_Packet_Received>:
void USB_Packet_Received(uint8_t *data, uint32_t length){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	if((data[1] == USB_CMD_CONFIG) && (uint32_t)data[0] == length){
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3301      	adds	r3, #1
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d11c      	bne.n	8001ed6 <USB_Packet_Received+0x4e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d116      	bne.n	8001ed6 <USB_Packet_Received+0x4e>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3b01      	subs	r3, #1
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4829      	ldr	r0, [pc, #164]	; (8001f58 <USB_Packet_Received+0xd0>)
 8001eb4:	f001 fcad 	bl	8003812 <HAL_CRC_Calculate>
 8001eb8:	4601      	mov	r1, r0
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	3b04      	subs	r3, #4
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4299      	cmp	r1, r3
 8001ec6:	d143      	bne.n	8001f50 <USB_Packet_Received+0xc8>
			USB_Parse_Config(data);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f84d 	bl	8001f68 <USB_Parse_Config>
			usb_rq = USB_RQ_CONF;
 8001ece:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <USB_Packet_Received+0xd4>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001ed4:	e03c      	b.n	8001f50 <USB_Packet_Received+0xc8>
		}
	}else if((data[1] == USB_CMD_STATUS) && (length == 64)){
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d108      	bne.n	8001ef2 <USB_Packet_Received+0x6a>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b40      	cmp	r3, #64	; 0x40
 8001ee4:	d105      	bne.n	8001ef2 <USB_Packet_Received+0x6a>
		memcpy(usb_long_buffer, data, 64);
 8001ee6:	2240      	movs	r2, #64	; 0x40
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	481d      	ldr	r0, [pc, #116]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001eec:	f00a f8a8 	bl	800c040 <memcpy>
 8001ef0:	e02e      	b.n	8001f50 <USB_Packet_Received+0xc8>
	}
	else if((usb_long_buffer[1] == USB_CMD_STATUS) && (usb_long_buffer[0] == (length + 64))){
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001ef4:	785b      	ldrb	r3, [r3, #1]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d126      	bne.n	8001f48 <USB_Packet_Received+0xc0>
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	3340      	adds	r3, #64	; 0x40
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d11f      	bne.n	8001f48 <USB_Packet_Received+0xc0>
		memcpy(&usb_long_buffer[64], data, length);
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4815      	ldr	r0, [pc, #84]	; (8001f64 <USB_Packet_Received+0xdc>)
 8001f0e:	f00a f897 	bl	800c040 <memcpy>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)usb_long_buffer, ((length + 64) / 4) - 1) == *(uint32_t *)&usb_long_buffer[length + 64- 4]){
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	3340      	adds	r3, #64	; 0x40
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4910      	ldr	r1, [pc, #64]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001f1e:	480e      	ldr	r0, [pc, #56]	; (8001f58 <USB_Packet_Received+0xd0>)
 8001f20:	f001 fc77 	bl	8003812 <HAL_CRC_Calculate>
 8001f24:	4602      	mov	r2, r0
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	333c      	adds	r3, #60	; 0x3c
 8001f2a:	490d      	ldr	r1, [pc, #52]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001f2c:	440b      	add	r3, r1
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d105      	bne.n	8001f40 <USB_Packet_Received+0xb8>
			USB_Parse_Status(usb_long_buffer);
 8001f34:	480a      	ldr	r0, [pc, #40]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001f36:	f000 f8ff 	bl	8002138 <USB_Parse_Status>
			usb_rq = USB_RQ_STAT;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <USB_Packet_Received+0xd4>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	701a      	strb	r2, [r3, #0]
		}
		usb_long_buffer[1] = 0xff;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001f42:	22ff      	movs	r2, #255	; 0xff
 8001f44:	705a      	strb	r2, [r3, #1]
 8001f46:	e003      	b.n	8001f50 <USB_Packet_Received+0xc8>
	}else{
		usb_long_buffer[1] = 0xff;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001f4a:	22ff      	movs	r2, #255	; 0xff
 8001f4c:	705a      	strb	r2, [r3, #1]
	}
}
 8001f4e:	bf00      	nop
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200003c0 	.word	0x200003c0
 8001f5c:	20000249 	.word	0x20000249
 8001f60:	20000290 	.word	0x20000290
 8001f64:	200002d0 	.word	0x200002d0

08001f68 <USB_Parse_Config>:
void USB_Parse_Config(uint8_t *data){
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	usb_rq_sett_revert_flash = data[2];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	789a      	ldrb	r2, [r3, #2]
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <USB_Parse_Config+0x1c>)
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2000024a 	.word	0x2000024a

08001f88 <USB_Send_Config>:
void USB_Send_Config(){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_CONFIG_LENGTH;
 8001f8e:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <USB_Send_Config+0x128>)
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_CONFIG;
 8001f94:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <USB_Send_Config+0x128>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	705a      	strb	r2, [r3, #1]
	*(uint16_t *)&usb_tx_buffer[2] = potentiometer_min;
 8001f9a:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <USB_Send_Config+0x12c>)
 8001f9c:	4a46      	ldr	r2, [pc, #280]	; (80020b8 <USB_Send_Config+0x130>)
 8001f9e:	8812      	ldrh	r2, [r2, #0]
 8001fa0:	801a      	strh	r2, [r3, #0]
	*(uint16_t *)&usb_tx_buffer[4] = potentiometer_max;
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <USB_Send_Config+0x134>)
 8001fa4:	4a46      	ldr	r2, [pc, #280]	; (80020c0 <USB_Send_Config+0x138>)
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	801a      	strh	r2, [r3, #0]
	usb_tx_buffer[6] = (uint8_t)((uint16_t)motor_max_power / 10);
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <USB_Send_Config+0x13c>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	4a46      	ldr	r2, [pc, #280]	; (80020c8 <USB_Send_Config+0x140>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <USB_Send_Config+0x128>)
 8001fbc:	719a      	strb	r2, [r3, #6]
	usb_tx_buffer[7] = motor_invert;
 8001fbe:	4b43      	ldr	r3, [pc, #268]	; (80020cc <USB_Send_Config+0x144>)
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <USB_Send_Config+0x128>)
 8001fc4:	71da      	strb	r2, [r3, #7]
	usb_tx_buffer[8] = signal_ignore;
 8001fc6:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <USB_Send_Config+0x148>)
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <USB_Send_Config+0x128>)
 8001fcc:	721a      	strb	r2, [r3, #8]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[9], (uint32_t)&signal_length);
 8001fce:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <USB_Send_Config+0x14c>)
 8001fd0:	4a41      	ldr	r2, [pc, #260]	; (80020d8 <USB_Send_Config+0x150>)
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fd6b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[13], (uint32_t)&signal_timeout);
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <USB_Send_Config+0x154>)
 8001fdc:	4a40      	ldr	r2, [pc, #256]	; (80020e0 <USB_Send_Config+0x158>)
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fd65 	bl	8000ab0 <General_Copy_32_Bit>
	usb_tx_buffer[17] = led_mode;
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <USB_Send_Config+0x15c>)
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <USB_Send_Config+0x128>)
 8001fec:	745a      	strb	r2, [r3, #17]
	usb_tx_buffer[18] = pid_on;
 8001fee:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <USB_Send_Config+0x160>)
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <USB_Send_Config+0x128>)
 8001ff4:	749a      	strb	r2, [r3, #18]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[19], (uint32_t)&pid_kp_1);
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <USB_Send_Config+0x164>)
 8001ff8:	4a3d      	ldr	r2, [pc, #244]	; (80020f0 <USB_Send_Config+0x168>)
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fd57 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[23], (uint32_t)&pid_ki_1);
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <USB_Send_Config+0x16c>)
 8002004:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <USB_Send_Config+0x170>)
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fd51 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[27], (uint32_t)&pid_kd_1);
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <USB_Send_Config+0x174>)
 8002010:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <USB_Send_Config+0x178>)
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fd4b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[31], (uint32_t)&pid_kp_1);
 800201a:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <USB_Send_Config+0x17c>)
 800201c:	4a34      	ldr	r2, [pc, #208]	; (80020f0 <USB_Send_Config+0x168>)
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fd45 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[35], (uint32_t)&pid_ki_1);
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <USB_Send_Config+0x180>)
 8002028:	4a33      	ldr	r2, [pc, #204]	; (80020f8 <USB_Send_Config+0x170>)
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fd3f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[39], (uint32_t)&pid_kd_1);
 8002032:	4b36      	ldr	r3, [pc, #216]	; (800210c <USB_Send_Config+0x184>)
 8002034:	4a32      	ldr	r2, [pc, #200]	; (8002100 <USB_Send_Config+0x178>)
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fd39 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[43], (uint32_t)&pid_kp_1);
 800203e:	4b34      	ldr	r3, [pc, #208]	; (8002110 <USB_Send_Config+0x188>)
 8002040:	4a2b      	ldr	r2, [pc, #172]	; (80020f0 <USB_Send_Config+0x168>)
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fd33 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[47], (uint32_t)&pid_ki_1);
 800204a:	4b32      	ldr	r3, [pc, #200]	; (8002114 <USB_Send_Config+0x18c>)
 800204c:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <USB_Send_Config+0x170>)
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fd2d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[51], (uint32_t)&pid_kd_1);
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <USB_Send_Config+0x190>)
 8002058:	4a29      	ldr	r2, [pc, #164]	; (8002100 <USB_Send_Config+0x178>)
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fd27 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[55], (uint32_t)&pid_split_1);
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <USB_Send_Config+0x194>)
 8002064:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <USB_Send_Config+0x198>)
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fd3e 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[57], (uint32_t)&pid_split_2);
 800206e:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <USB_Send_Config+0x19c>)
 8002070:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <USB_Send_Config+0x1a0>)
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fd38 	bl	8000aea <General_Copy_16_Bit>
	usb_tx_buffer[59] = pid_sampling_time;
 800207a:	4b2c      	ldr	r3, [pc, #176]	; (800212c <USB_Send_Config+0x1a4>)
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <USB_Send_Config+0x128>)
 8002080:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_CONFIG_LENGTH / 4) - 1);
 8002084:	220f      	movs	r2, #15
 8002086:	490a      	ldr	r1, [pc, #40]	; (80020b0 <USB_Send_Config+0x128>)
 8002088:	4829      	ldr	r0, [pc, #164]	; (8002130 <USB_Send_Config+0x1a8>)
 800208a:	f001 fbc2 	bl	8003812 <HAL_CRC_Calculate>
 800208e:	4603      	mov	r3, r0
 8002090:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[60], (uint32_t)&crc);
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <USB_Send_Config+0x1ac>)
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4610      	mov	r0, r2
 800209a:	f7fe fd09 	bl	8000ab0 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_CONFIG_LENGTH);
 800209e:	2140      	movs	r1, #64	; 0x40
 80020a0:	4803      	ldr	r0, [pc, #12]	; (80020b0 <USB_Send_Config+0x128>)
 80020a2:	f009 fbcb 	bl	800b83c <CDC_Transmit_FS>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000250 	.word	0x20000250
 80020b4:	20000252 	.word	0x20000252
 80020b8:	200001ec 	.word	0x200001ec
 80020bc:	20000254 	.word	0x20000254
 80020c0:	200001ee 	.word	0x200001ee
 80020c4:	20000000 	.word	0x20000000
 80020c8:	cccccccd 	.word	0xcccccccd
 80020cc:	200001c7 	.word	0x200001c7
 80020d0:	2000023c 	.word	0x2000023c
 80020d4:	20000259 	.word	0x20000259
 80020d8:	20000240 	.word	0x20000240
 80020dc:	2000025d 	.word	0x2000025d
 80020e0:	20000244 	.word	0x20000244
 80020e4:	200001c4 	.word	0x200001c4
 80020e8:	20000020 	.word	0x20000020
 80020ec:	20000263 	.word	0x20000263
 80020f0:	20000004 	.word	0x20000004
 80020f4:	20000267 	.word	0x20000267
 80020f8:	200001cc 	.word	0x200001cc
 80020fc:	2000026b 	.word	0x2000026b
 8002100:	20000008 	.word	0x20000008
 8002104:	2000026f 	.word	0x2000026f
 8002108:	20000273 	.word	0x20000273
 800210c:	20000277 	.word	0x20000277
 8002110:	2000027b 	.word	0x2000027b
 8002114:	2000027f 	.word	0x2000027f
 8002118:	20000283 	.word	0x20000283
 800211c:	20000287 	.word	0x20000287
 8002120:	2000001c 	.word	0x2000001c
 8002124:	20000289 	.word	0x20000289
 8002128:	2000001e 	.word	0x2000001e
 800212c:	20000002 	.word	0x20000002
 8002130:	200003c0 	.word	0x200003c0
 8002134:	2000028c 	.word	0x2000028c

08002138 <USB_Parse_Status>:
void USB_Parse_Status(uint8_t *data){
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	potentiometer_min = *(uint16_t *)&data[2];
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	885a      	ldrh	r2, [r3, #2]
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <USB_Parse_Status+0x188>)
 8002146:	801a      	strh	r2, [r3, #0]
	potentiometer_max = *(uint16_t *)&data[4];
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	889a      	ldrh	r2, [r3, #4]
 800214c:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <USB_Parse_Status+0x18c>)
 800214e:	801a      	strh	r2, [r3, #0]
	motor_max_power = (uint16_t)data[6] * 10;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3306      	adds	r3, #6
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	4413      	add	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <USB_Parse_Status+0x190>)
 8002164:	801a      	strh	r2, [r3, #0]
	motor_invert = data[7];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	79da      	ldrb	r2, [r3, #7]
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <USB_Parse_Status+0x194>)
 800216c:	701a      	strb	r2, [r3, #0]
	signal_ignore = data[8];
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7a1a      	ldrb	r2, [r3, #8]
 8002172:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <USB_Parse_Status+0x198>)
 8002174:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&data[9]);
 8002176:	4a57      	ldr	r2, [pc, #348]	; (80022d4 <USB_Parse_Status+0x19c>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3309      	adds	r3, #9
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f7fe fc96 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&data[13]);
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <USB_Parse_Status+0x1a0>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	330d      	adds	r3, #13
 800218a:	4619      	mov	r1, r3
 800218c:	4610      	mov	r0, r2
 800218e:	f7fe fc8f 	bl	8000ab0 <General_Copy_32_Bit>
	led_mode = data[17];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7c5a      	ldrb	r2, [r3, #17]
 8002196:	4b51      	ldr	r3, [pc, #324]	; (80022dc <USB_Parse_Status+0x1a4>)
 8002198:	701a      	strb	r2, [r3, #0]
	pid_on = data[18];
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7c9a      	ldrb	r2, [r3, #18]
 800219e:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <USB_Parse_Status+0x1a8>)
 80021a0:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&data[19]);
 80021a2:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <USB_Parse_Status+0x1ac>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3313      	adds	r3, #19
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f7fe fc80 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&data[23]);
 80021b0:	4a4d      	ldr	r2, [pc, #308]	; (80022e8 <USB_Parse_Status+0x1b0>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3317      	adds	r3, #23
 80021b6:	4619      	mov	r1, r3
 80021b8:	4610      	mov	r0, r2
 80021ba:	f7fe fc79 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&data[27]);
 80021be:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <USB_Parse_Status+0x1b4>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	331b      	adds	r3, #27
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f7fe fc72 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&data[31]);
 80021cc:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <USB_Parse_Status+0x1b8>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	331f      	adds	r3, #31
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f7fe fc6b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&data[35]);
 80021da:	4a46      	ldr	r2, [pc, #280]	; (80022f4 <USB_Parse_Status+0x1bc>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3323      	adds	r3, #35	; 0x23
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f7fe fc64 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&data[39]);
 80021e8:	4a43      	ldr	r2, [pc, #268]	; (80022f8 <USB_Parse_Status+0x1c0>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3327      	adds	r3, #39	; 0x27
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7fe fc5d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&data[43]);
 80021f6:	4a41      	ldr	r2, [pc, #260]	; (80022fc <USB_Parse_Status+0x1c4>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	332b      	adds	r3, #43	; 0x2b
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7fe fc56 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&data[47]);
 8002204:	4a3e      	ldr	r2, [pc, #248]	; (8002300 <USB_Parse_Status+0x1c8>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	332f      	adds	r3, #47	; 0x2f
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7fe fc4f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&data[51]);
 8002212:	4a3c      	ldr	r2, [pc, #240]	; (8002304 <USB_Parse_Status+0x1cc>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3333      	adds	r3, #51	; 0x33
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f7fe fc48 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&data[55]);
 8002220:	4a39      	ldr	r2, [pc, #228]	; (8002308 <USB_Parse_Status+0x1d0>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3337      	adds	r3, #55	; 0x37
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7fe fc5e 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&data[57]);
 800222e:	4a37      	ldr	r2, [pc, #220]	; (800230c <USB_Parse_Status+0x1d4>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3339      	adds	r3, #57	; 0x39
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f7fe fc57 	bl	8000aea <General_Copy_16_Bit>
	pid_sampling_time = data[59];
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <USB_Parse_Status+0x1d8>)
 8002244:	701a      	strb	r2, [r3, #0]
	if(PID_Get_Sampling_Time() != pid_sampling_time){
 8002246:	f7fe fe25 	bl	8000e94 <PID_Get_Sampling_Time>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <USB_Parse_Status+0x1d8>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	429a      	cmp	r2, r3
 8002256:	d005      	beq.n	8002264 <USB_Parse_Status+0x12c>
		PID_Set_Sampling_Time(pid_sampling_time);
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <USB_Parse_Status+0x1d8>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fe2a 	bl	8000eb8 <PID_Set_Sampling_Time>
	}
	float new_pid_setpoint = 0;
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
	General_Copy_32_Bit((uint32_t)&new_pid_setpoint, (uint32_t)&data[60]);
 800226a:	f107 020c 	add.w	r2, r7, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	333c      	adds	r3, #60	; 0x3c
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7fe fc1b 	bl	8000ab0 <General_Copy_32_Bit>
	if(signal_ignore){
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <USB_Parse_Status+0x198>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00f      	beq.n	80022a2 <USB_Parse_Status+0x16a>
		if(pid_setpoint != new_pid_setpoint){
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <USB_Parse_Status+0x1dc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fa00 	bl	8000690 <__aeabi_fcmpeq>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <USB_Parse_Status+0x164>
			led_position_changed = 1;
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <USB_Parse_Status+0x1e0>)
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
		}
		pid_setpoint = new_pid_setpoint;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <USB_Parse_Status+0x1dc>)
 80022a0:	6013      	str	r3, [r2, #0]
	}
	usb_rq_stat_phold = data[64];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <USB_Parse_Status+0x1e4>)
 80022aa:	701a      	strb	r2, [r3, #0]
	usb_rq_stat_motor = data[65];
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <USB_Parse_Status+0x1e8>)
 80022b4:	701a      	strb	r2, [r3, #0]
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200001ec 	.word	0x200001ec
 80022c4:	200001ee 	.word	0x200001ee
 80022c8:	20000000 	.word	0x20000000
 80022cc:	200001c7 	.word	0x200001c7
 80022d0:	2000023c 	.word	0x2000023c
 80022d4:	20000240 	.word	0x20000240
 80022d8:	20000244 	.word	0x20000244
 80022dc:	200001c4 	.word	0x200001c4
 80022e0:	20000020 	.word	0x20000020
 80022e4:	20000004 	.word	0x20000004
 80022e8:	200001cc 	.word	0x200001cc
 80022ec:	20000008 	.word	0x20000008
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	200001d0 	.word	0x200001d0
 80022f8:	20000010 	.word	0x20000010
 80022fc:	20000014 	.word	0x20000014
 8002300:	200001d4 	.word	0x200001d4
 8002304:	20000018 	.word	0x20000018
 8002308:	2000001c 	.word	0x2000001c
 800230c:	2000001e 	.word	0x2000001e
 8002310:	20000002 	.word	0x20000002
 8002314:	20000024 	.word	0x20000024
 8002318:	200001c5 	.word	0x200001c5
 800231c:	2000024c 	.word	0x2000024c
 8002320:	2000024b 	.word	0x2000024b

08002324 <USB_Send_Status>:
void USB_Send_Status(){
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_STATUS_LENGTH;
 800232a:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <USB_Send_Status+0x84>)
 800232c:	2214      	movs	r2, #20
 800232e:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_STATUS;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <USB_Send_Status+0x84>)
 8002332:	2201      	movs	r2, #1
 8002334:	705a      	strb	r2, [r3, #1]
	usb_tx_buffer[2] = pid_running;
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <USB_Send_Status+0x88>)
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <USB_Send_Status+0x84>)
 800233c:	709a      	strb	r2, [r3, #2]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[3], (uint32_t)&pid_setpoint);
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <USB_Send_Status+0x8c>)
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <USB_Send_Status+0x90>)
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fbb3 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[7], (uint32_t)&potentiometer_position);
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <USB_Send_Status+0x94>)
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <USB_Send_Status+0x98>)
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fbad 	bl	8000ab0 <General_Copy_32_Bit>
	int16_t motor_val = Motor_Get();
 8002356:	f7fe fd27 	bl	8000da8 <Motor_Get>
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[11], (uint32_t)&motor_val);
 800235e:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <USB_Send_Status+0x9c>)
 8002360:	1dbb      	adds	r3, r7, #6
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7fe fbc0 	bl	8000aea <General_Copy_16_Bit>
	usb_tx_buffer[13] = USB_CRC_PADDING;
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <USB_Send_Status+0x84>)
 800236c:	2200      	movs	r2, #0
 800236e:	735a      	strb	r2, [r3, #13]
	usb_tx_buffer[14] = USB_CRC_PADDING;
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <USB_Send_Status+0x84>)
 8002372:	2200      	movs	r2, #0
 8002374:	739a      	strb	r2, [r3, #14]
	usb_tx_buffer[15] = USB_CRC_PADDING;
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <USB_Send_Status+0x84>)
 8002378:	2200      	movs	r2, #0
 800237a:	73da      	strb	r2, [r3, #15]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_STATUS_LENGTH / 4) - 1);
 800237c:	2204      	movs	r2, #4
 800237e:	490a      	ldr	r1, [pc, #40]	; (80023a8 <USB_Send_Status+0x84>)
 8002380:	4810      	ldr	r0, [pc, #64]	; (80023c4 <USB_Send_Status+0xa0>)
 8002382:	f001 fa46 	bl	8003812 <HAL_CRC_Calculate>
 8002386:	4603      	mov	r3, r0
 8002388:	603b      	str	r3, [r7, #0]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[16], (uint32_t)&crc);
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <USB_Send_Status+0xa4>)
 800238c:	463b      	mov	r3, r7
 800238e:	4619      	mov	r1, r3
 8002390:	4610      	mov	r0, r2
 8002392:	f7fe fb8d 	bl	8000ab0 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_STATUS_LENGTH);
 8002396:	2114      	movs	r1, #20
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <USB_Send_Status+0x84>)
 800239a:	f009 fa4f 	bl	800b83c <CDC_Transmit_FS>
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000250 	.word	0x20000250
 80023ac:	200001d8 	.word	0x200001d8
 80023b0:	20000253 	.word	0x20000253
 80023b4:	20000024 	.word	0x20000024
 80023b8:	20000257 	.word	0x20000257
 80023bc:	200001f8 	.word	0x200001f8
 80023c0:	2000025b 	.word	0x2000025b
 80023c4:	200003c0 	.word	0x200003c0
 80023c8:	20000260 	.word	0x20000260

080023cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023d0:	f000 fbe4 	bl	8002b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023d4:	f000 f813 	bl	80023fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023d8:	f000 f9de 	bl	8002798 <MX_GPIO_Init>
  MX_ADC1_Init();
 80023dc:	f000 f86c 	bl	80024b8 <MX_ADC1_Init>
  MX_CRC_Init();
 80023e0:	f000 f8a8 	bl	8002534 <MX_CRC_Init>
  MX_TIM2_Init();
 80023e4:	f000 f8ba 	bl	800255c <MX_TIM2_Init>
  MX_TIM3_Init();
 80023e8:	f000 f93a 	bl	8002660 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023ec:	f000 f986 	bl	80026fc <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80023f0:	f009 f960 	bl	800b6b4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
App_Init();
 80023f4:	f7fe fa00 	bl	80007f8 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
App_Loop();
 80023f8:	f7fe fa0c 	bl	8000814 <App_Loop>
 80023fc:	e7fc      	b.n	80023f8 <main+0x2c>

080023fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b094      	sub	sp, #80	; 0x50
 8002402:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002408:	2228      	movs	r2, #40	; 0x28
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f009 fe25 	bl	800c05c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800242e:	2301      	movs	r3, #1
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800243c:	2301      	movs	r3, #1
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002440:	2302      	movs	r3, #2
 8002442:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002448:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800244a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800244e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002454:	4618      	mov	r0, r3
 8002456:	f003 fa9f 	bl	8005998 <HAL_RCC_OscConfig>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002460:	f000 fa04 	bl	800286c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002464:	230f      	movs	r3, #15
 8002466:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002468:	2302      	movs	r3, #2
 800246a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002474:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	2102      	movs	r1, #2
 8002480:	4618      	mov	r0, r3
 8002482:	f003 fd0b 	bl	8005e9c <HAL_RCC_ClockConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800248c:	f000 f9ee 	bl	800286c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002490:	2312      	movs	r3, #18
 8002492:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002498:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fe7f 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80024ac:	f000 f9de 	bl	800286c <Error_Handler>
  }
}
 80024b0:	bf00      	nop
 80024b2:	3750      	adds	r7, #80	; 0x50
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <MX_ADC1_Init+0x74>)
 80024ca:	4a19      	ldr	r2, [pc, #100]	; (8002530 <MX_ADC1_Init+0x78>)
 80024cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <MX_ADC1_Init+0x74>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <MX_ADC1_Init+0x74>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <MX_ADC1_Init+0x74>)
 80024dc:	2200      	movs	r2, #0
 80024de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <MX_ADC1_Init+0x74>)
 80024e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80024e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <MX_ADC1_Init+0x74>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <MX_ADC1_Init+0x74>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <MX_ADC1_Init+0x74>)
 80024f6:	f000 fbb3 	bl	8002c60 <HAL_ADC_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002500:	f000 f9b4 	bl	800286c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002504:	2304      	movs	r3, #4
 8002506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002508:	2301      	movs	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800250c:	2307      	movs	r3, #7
 800250e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_ADC1_Init+0x74>)
 8002516:	f000 fe09 	bl	800312c <HAL_ADC_ConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002520:	f000 f9a4 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000390 	.word	0x20000390
 8002530:	40012400 	.word	0x40012400

08002534 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_CRC_Init+0x20>)
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <MX_CRC_Init+0x24>)
 800253c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_CRC_Init+0x20>)
 8002540:	f001 f94b 	bl	80037da <HAL_CRC_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800254a:	f000 f98f 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200003c0 	.word	0x200003c0
 8002558:	40023000 	.word	0x40023000

0800255c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	; 0x38
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002570:	f107 0320 	add.w	r3, r7, #32
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
 8002588:	615a      	str	r2, [r3, #20]
 800258a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800258c:	4b33      	ldr	r3, [pc, #204]	; (800265c <MX_TIM2_Init+0x100>)
 800258e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <MX_TIM2_Init+0x100>)
 8002596:	2207      	movs	r2, #7
 8002598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b30      	ldr	r3, [pc, #192]	; (800265c <MX_TIM2_Init+0x100>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <MX_TIM2_Init+0x100>)
 80025a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b2c      	ldr	r3, [pc, #176]	; (800265c <MX_TIM2_Init+0x100>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <MX_TIM2_Init+0x100>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025b4:	4829      	ldr	r0, [pc, #164]	; (800265c <MX_TIM2_Init+0x100>)
 80025b6:	f003 ff6b 	bl	8006490 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025c0:	f000 f954 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ce:	4619      	mov	r1, r3
 80025d0:	4822      	ldr	r0, [pc, #136]	; (800265c <MX_TIM2_Init+0x100>)
 80025d2:	f004 fb37 	bl	8006c44 <HAL_TIM_ConfigClockSource>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025dc:	f000 f946 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025e0:	481e      	ldr	r0, [pc, #120]	; (800265c <MX_TIM2_Init+0x100>)
 80025e2:	f004 f86f 	bl	80066c4 <HAL_TIM_PWM_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025ec:	f000 f93e 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f0:	2300      	movs	r3, #0
 80025f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f8:	f107 0320 	add.w	r3, r7, #32
 80025fc:	4619      	mov	r1, r3
 80025fe:	4817      	ldr	r0, [pc, #92]	; (800265c <MX_TIM2_Init+0x100>)
 8002600:	f004 feac 	bl	800735c <HAL_TIMEx_MasterConfigSynchronization>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800260a:	f000 f92f 	bl	800286c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800260e:	2360      	movs	r3, #96	; 0x60
 8002610:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002616:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002618:	2302      	movs	r3, #2
 800261a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	2200      	movs	r2, #0
 8002624:	4619      	mov	r1, r3
 8002626:	480d      	ldr	r0, [pc, #52]	; (800265c <MX_TIM2_Init+0x100>)
 8002628:	f004 fa4e 	bl	8006ac8 <HAL_TIM_PWM_ConfigChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002632:	f000 f91b 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	2204      	movs	r2, #4
 800263a:	4619      	mov	r1, r3
 800263c:	4807      	ldr	r0, [pc, #28]	; (800265c <MX_TIM2_Init+0x100>)
 800263e:	f004 fa43 	bl	8006ac8 <HAL_TIM_PWM_ConfigChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002648:	f000 f910 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800264c:	4803      	ldr	r0, [pc, #12]	; (800265c <MX_TIM2_Init+0x100>)
 800264e:	f000 f9f3 	bl	8002a38 <HAL_TIM_MspPostInit>

}
 8002652:	bf00      	nop
 8002654:	3738      	adds	r7, #56	; 0x38
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200003c8 	.word	0x200003c8

08002660 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002666:	f107 0308 	add.w	r3, r7, #8
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002674:	463b      	mov	r3, r7
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <MX_TIM3_Init+0x94>)
 800267e:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <MX_TIM3_Init+0x98>)
 8002680:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002682:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <MX_TIM3_Init+0x94>)
 8002684:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <MX_TIM3_Init+0x94>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <MX_TIM3_Init+0x94>)
 8002692:	22c7      	movs	r2, #199	; 0xc7
 8002694:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <MX_TIM3_Init+0x94>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <MX_TIM3_Init+0x94>)
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026a2:	4814      	ldr	r0, [pc, #80]	; (80026f4 <MX_TIM3_Init+0x94>)
 80026a4:	f003 fef4 	bl	8006490 <HAL_TIM_Base_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80026ae:	f000 f8dd 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	4619      	mov	r1, r3
 80026be:	480d      	ldr	r0, [pc, #52]	; (80026f4 <MX_TIM3_Init+0x94>)
 80026c0:	f004 fac0 	bl	8006c44 <HAL_TIM_ConfigClockSource>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80026ca:	f000 f8cf 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026d6:	463b      	mov	r3, r7
 80026d8:	4619      	mov	r1, r3
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <MX_TIM3_Init+0x94>)
 80026dc:	f004 fe3e 	bl	800735c <HAL_TIMEx_MasterConfigSynchronization>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026e6:	f000 f8c1 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000410 	.word	0x20000410
 80026f8:	40000400 	.word	0x40000400

080026fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002702:	f107 0308 	add.w	r3, r7, #8
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002710:	463b      	mov	r3, r7
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <MX_TIM4_Init+0x94>)
 800271a:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <MX_TIM4_Init+0x98>)
 800271c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 143;
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <MX_TIM4_Init+0x94>)
 8002720:	228f      	movs	r2, #143	; 0x8f
 8002722:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <MX_TIM4_Init+0x94>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <MX_TIM4_Init+0x94>)
 800272c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002730:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <MX_TIM4_Init+0x94>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <MX_TIM4_Init+0x94>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800273e:	4814      	ldr	r0, [pc, #80]	; (8002790 <MX_TIM4_Init+0x94>)
 8002740:	f003 fea6 	bl	8006490 <HAL_TIM_Base_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800274a:	f000 f88f 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002752:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002754:	f107 0308 	add.w	r3, r7, #8
 8002758:	4619      	mov	r1, r3
 800275a:	480d      	ldr	r0, [pc, #52]	; (8002790 <MX_TIM4_Init+0x94>)
 800275c:	f004 fa72 	bl	8006c44 <HAL_TIM_ConfigClockSource>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002766:	f000 f881 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002772:	463b      	mov	r3, r7
 8002774:	4619      	mov	r1, r3
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <MX_TIM4_Init+0x94>)
 8002778:	f004 fdf0 	bl	800735c <HAL_TIMEx_MasterConfigSynchronization>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002782:	f000 f873 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000458 	.word	0x20000458
 8002794:	40000800 	.word	0x40000800

08002798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279e:	f107 0310 	add.w	r3, r7, #16
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <MX_GPIO_Init+0xc4>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	; (800285c <MX_GPIO_Init+0xc4>)
 80027b2:	f043 0320 	orr.w	r3, r3, #32
 80027b6:	6193      	str	r3, [r2, #24]
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <MX_GPIO_Init+0xc4>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <MX_GPIO_Init+0xc4>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4a24      	ldr	r2, [pc, #144]	; (800285c <MX_GPIO_Init+0xc4>)
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	6193      	str	r3, [r2, #24]
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <MX_GPIO_Init+0xc4>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027dc:	4b1f      	ldr	r3, [pc, #124]	; (800285c <MX_GPIO_Init+0xc4>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	; (800285c <MX_GPIO_Init+0xc4>)
 80027e2:	f043 0308 	orr.w	r3, r3, #8
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <MX_GPIO_Init+0xc4>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	4819      	ldr	r0, [pc, #100]	; (8002860 <MX_GPIO_Init+0xc8>)
 80027fa:	f001 fbd8 	bl	8003fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002802:	2301      	movs	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002806:	2302      	movs	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800280e:	f107 0310 	add.w	r3, r7, #16
 8002812:	4619      	mov	r1, r3
 8002814:	4812      	ldr	r0, [pc, #72]	; (8002860 <MX_GPIO_Init+0xc8>)
 8002816:	f001 fa2f 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_Pin USB_DET_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin|USB_DET_Pin;
 800281a:	f240 2302 	movw	r3, #514	; 0x202
 800281e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <MX_GPIO_Init+0xcc>)
 8002822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	4619      	mov	r1, r3
 800282e:	480e      	ldr	r0, [pc, #56]	; (8002868 <MX_GPIO_Init+0xd0>)
 8002830:	f001 fa22 	bl	8003c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	2007      	movs	r0, #7
 800283a:	f000 ff98 	bl	800376e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800283e:	2007      	movs	r0, #7
 8002840:	f000 ffb1 	bl	80037a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2105      	movs	r1, #5
 8002848:	2017      	movs	r0, #23
 800284a:	f000 ff90 	bl	800376e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800284e:	2017      	movs	r0, #23
 8002850:	f000 ffa9 	bl	80037a6 <HAL_NVIC_EnableIRQ>

}
 8002854:	bf00      	nop
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	40010800 	.word	0x40010800
 8002864:	10310000 	.word	0x10310000
 8002868:	40010c00 	.word	0x40010c00

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	e7fe      	b.n	8002874 <Error_Handler+0x8>
	...

08002878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_MspInit+0x5c>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_MspInit+0x5c>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6193      	str	r3, [r2, #24]
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_MspInit+0x5c>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <HAL_MspInit+0x5c>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <HAL_MspInit+0x5c>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_MspInit+0x5c>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_MspInit+0x60>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_MspInit+0x60>)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40010000 	.word	0x40010000

080028dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a18      	ldr	r2, [pc, #96]	; (8002958 <HAL_ADC_MspInit+0x7c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d129      	bne.n	8002950 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_ADC_MspInit+0x80>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4a16      	ldr	r2, [pc, #88]	; (800295c <HAL_ADC_MspInit+0x80>)
 8002902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002906:	6193      	str	r3, [r2, #24]
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_ADC_MspInit+0x80>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_ADC_MspInit+0x80>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4a10      	ldr	r2, [pc, #64]	; (800295c <HAL_ADC_MspInit+0x80>)
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	6193      	str	r3, [r2, #24]
 8002920:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_ADC_MspInit+0x80>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 800292c:	2310      	movs	r3, #16
 800292e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002930:	2303      	movs	r3, #3
 8002932:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4619      	mov	r1, r3
 800293a:	4809      	ldr	r0, [pc, #36]	; (8002960 <HAL_ADC_MspInit+0x84>)
 800293c:	f001 f99c 	bl	8003c78 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002940:	2200      	movs	r2, #0
 8002942:	2102      	movs	r1, #2
 8002944:	2012      	movs	r0, #18
 8002946:	f000 ff12 	bl	800376e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800294a:	2012      	movs	r0, #18
 800294c:	f000 ff2b 	bl	80037a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002950:	bf00      	nop
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40012400 	.word	0x40012400
 800295c:	40021000 	.word	0x40021000
 8002960:	40010800 	.word	0x40010800

08002964 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_CRC_MspInit+0x34>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10b      	bne.n	800298e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_CRC_MspInit+0x38>)
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_CRC_MspInit+0x38>)
 800297c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002980:	6153      	str	r3, [r2, #20]
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_CRC_MspInit+0x38>)
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	40023000 	.word	0x40023000
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d10c      	bne.n	80029cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_TIM_Base_MspInit+0x8c>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_TIM_Base_MspInit+0x8c>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	61d3      	str	r3, [r2, #28]
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_TIM_Base_MspInit+0x8c>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029ca:	e02a      	b.n	8002a22 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_TIM_Base_MspInit+0x90>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d114      	bne.n	8002a00 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_TIM_Base_MspInit+0x8c>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <HAL_TIM_Base_MspInit+0x8c>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	61d3      	str	r3, [r2, #28]
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_TIM_Base_MspInit+0x8c>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2101      	movs	r1, #1
 80029f2:	201d      	movs	r0, #29
 80029f4:	f000 febb 	bl	800376e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029f8:	201d      	movs	r0, #29
 80029fa:	f000 fed4 	bl	80037a6 <HAL_NVIC_EnableIRQ>
}
 80029fe:	e010      	b.n	8002a22 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <HAL_TIM_Base_MspInit+0x94>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10b      	bne.n	8002a22 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_TIM_Base_MspInit+0x8c>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <HAL_TIM_Base_MspInit+0x8c>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	61d3      	str	r3, [r2, #28]
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_TIM_Base_MspInit+0x8c>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800

08002a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a56:	d117      	bne.n	8002a88 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_TIM_MspPostInit+0x58>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <HAL_TIM_MspPostInit+0x58>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6193      	str	r3, [r2, #24]
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_TIM_MspPostInit+0x58>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8002a70:	2303      	movs	r3, #3
 8002a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a74:	2302      	movs	r3, #2
 8002a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 0310 	add.w	r3, r7, #16
 8002a80:	4619      	mov	r1, r3
 8002a82:	4804      	ldr	r0, [pc, #16]	; (8002a94 <HAL_TIM_MspPostInit+0x5c>)
 8002a84:	f001 f8f8 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a88:	bf00      	nop
 8002a8a:	3720      	adds	r7, #32
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40010800 	.word	0x40010800

08002a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <NMI_Handler+0x4>

08002a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <HardFault_Handler+0x4>

08002aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <MemManage_Handler+0x4>

08002aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aae:	e7fe      	b.n	8002aae <BusFault_Handler+0x4>

08002ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <UsageFault_Handler+0x4>

08002ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ade:	f000 f8a3 	bl	8002c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 8002ae2:	f7fe f843 	bl	8000b6c <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 8002aee:	2002      	movs	r0, #2
 8002af0:	f001 fa76 	bl	8003fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <ADC1_2_IRQHandler+0x10>)
 8002afe:	f000 fa49 	bl	8002f94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000390 	.word	0x20000390

08002b0c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b12:	f001 fbae 	bl	8004272 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20001160 	.word	0x20001160

08002b20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DET_Pin);
 8002b24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b28:	f001 fa5a 	bl	8003fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <TIM3_IRQHandler+0x10>)
 8002b36:	f003 febf 	bl	80068b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000410 	.word	0x20000410

08002b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b52:	490d      	ldr	r1, [pc, #52]	; (8002b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b54:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b58:	e002      	b.n	8002b60 <LoopCopyDataInit>

08002b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5e:	3304      	adds	r3, #4

08002b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b64:	d3f9      	bcc.n	8002b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b68:	4c0a      	ldr	r4, [pc, #40]	; (8002b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b6c:	e001      	b.n	8002b72 <LoopFillZerobss>

08002b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b70:	3204      	adds	r2, #4

08002b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b74:	d3fb      	bcc.n	8002b6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b76:	f7ff ffe5 	bl	8002b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b7a:	f009 fa3d 	bl	800bff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b7e:	f7ff fc25 	bl	80023cc <main>
  bx lr
 8002b82:	4770      	bx	lr
  ldr r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b88:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8002b8c:	0800c108 	.word	0x0800c108
  ldr r2, =_sbss
 8002b90:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8002b94:	2000166c 	.word	0x2000166c

08002b98 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <CAN1_RX1_IRQHandler>
	...

08002b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_Init+0x28>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <HAL_Init+0x28>)
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bac:	2003      	movs	r0, #3
 8002bae:	f000 fdd3 	bl	8003758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb2:	2004      	movs	r0, #4
 8002bb4:	f000 f808 	bl	8002bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb8:	f7ff fe5e 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40022000 	.word	0x40022000

08002bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_InitTick+0x54>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_InitTick+0x58>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fdeb 	bl	80037c2 <HAL_SYSTICK_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00e      	b.n	8002c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b0f      	cmp	r3, #15
 8002bfa:	d80a      	bhi.n	8002c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f000 fdb3 	bl	800376e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c08:	4a06      	ldr	r2, [pc, #24]	; (8002c24 <HAL_InitTick+0x5c>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e000      	b.n	8002c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000028 	.word	0x20000028
 8002c20:	20000030 	.word	0x20000030
 8002c24:	2000002c 	.word	0x2000002c

08002c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_IncTick+0x1c>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_IncTick+0x20>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	4a03      	ldr	r2, [pc, #12]	; (8002c48 <HAL_IncTick+0x20>)
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	20000030 	.word	0x20000030
 8002c48:	200004a0 	.word	0x200004a0

08002c4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b02      	ldr	r3, [pc, #8]	; (8002c5c <HAL_GetTick+0x10>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	200004a0 	.word	0x200004a0

08002c60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0be      	b.n	8002e00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff fe1c 	bl	80028dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fb93 	bl	80033d0 <ADC_ConversionStop_Disable>
 8002caa:	4603      	mov	r3, r0
 8002cac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 8099 	bne.w	8002dee <HAL_ADC_Init+0x18e>
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 8095 	bne.w	8002dee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ccc:	f023 0302 	bic.w	r3, r3, #2
 8002cd0:	f043 0202 	orr.w	r2, r3, #2
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ce0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7b1b      	ldrb	r3, [r3, #12]
 8002ce6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ce8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf8:	d003      	beq.n	8002d02 <HAL_ADC_Init+0xa2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_ADC_Init+0xa8>
 8002d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d06:	e000      	b.n	8002d0a <HAL_ADC_Init+0xaa>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7d1b      	ldrb	r3, [r3, #20]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d119      	bne.n	8002d4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7b1b      	ldrb	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	035a      	lsls	r2, r3, #13
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	e00b      	b.n	8002d4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <HAL_ADC_Init+0x1a8>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7c:	d003      	beq.n	8002d86 <HAL_ADC_Init+0x126>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d104      	bne.n	8002d90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	051b      	lsls	r3, r3, #20
 8002d8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <HAL_ADC_Init+0x1ac>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d10b      	bne.n	8002dcc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dca:	e018      	b.n	8002dfe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	f023 0312 	bic.w	r3, r3, #18
 8002dd4:	f043 0210 	orr.w	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dec:	e007      	b.n	8002dfe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	ffe1f7fd 	.word	0xffe1f7fd
 8002e0c:	ff1f0efe 	.word	0xff1f0efe

08002e10 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_Start_IT+0x1a>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e0a0      	b.n	8002f6c <HAL_ADC_Start_IT+0x15c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa72 	bl	800331c <ADC_Enable>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 808f 	bne.w	8002f62 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a45      	ldr	r2, [pc, #276]	; (8002f74 <HAL_ADC_Start_IT+0x164>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d105      	bne.n	8002e6e <HAL_ADC_Start_IT+0x5e>
 8002e62:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <HAL_ADC_Start_IT+0x168>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d115      	bne.n	8002e9a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d026      	beq.n	8002ed6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e98:	e01d      	b.n	8002ed6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a33      	ldr	r2, [pc, #204]	; (8002f78 <HAL_ADC_Start_IT+0x168>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_ADC_Start_IT+0xaa>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_ADC_Start_IT+0x164>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10d      	bne.n	8002ed6 <HAL_ADC_Start_IT+0xc6>
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <HAL_ADC_Start_IT+0x168>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ece:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f023 0206 	bic.w	r2, r3, #6
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eee:	e002      	b.n	8002ef6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f06f 0202 	mvn.w	r2, #2
 8002f06:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0220 	orr.w	r2, r2, #32
 8002f16:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f22:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f26:	d113      	bne.n	8002f50 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_ADC_Start_IT+0x164>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d105      	bne.n	8002f3e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_ADC_Start_IT+0x168>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	e00c      	b.n	8002f6a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40012800 	.word	0x40012800
 8002f78:	40012400 	.word	0x40012400

08002f7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d140      	bne.n	800302c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d139      	bne.n	800302c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fda:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002fde:	d11d      	bne.n	800301c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d119      	bne.n	800301c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0220 	bic.w	r2, r2, #32
 8002ff6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	f043 0201 	orr.w	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fd fd81 	bl	8000b24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0212 	mvn.w	r2, #18
 800302a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b80      	cmp	r3, #128	; 0x80
 8003038:	d14f      	bne.n	80030da <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b04      	cmp	r3, #4
 8003046:	d148      	bne.n	80030da <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800306a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800306e:	d012      	beq.n	8003096 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800307a:	2b00      	cmp	r3, #0
 800307c:	d125      	bne.n	80030ca <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003088:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800308c:	d11d      	bne.n	80030ca <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003092:	2b00      	cmp	r3, #0
 8003094:	d119      	bne.n	80030ca <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030a4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa6e 	bl	80035ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 020c 	mvn.w	r2, #12
 80030d8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d114      	bne.n	8003112 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10d      	bne.n	8003112 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f809 	bl	800311a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0201 	mvn.w	r2, #1
 8003110:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x20>
 8003148:	2302      	movs	r3, #2
 800314a:	e0dc      	b.n	8003306 <HAL_ADC_ConfigChannel+0x1da>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b06      	cmp	r3, #6
 800315a:	d81c      	bhi.n	8003196 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	3b05      	subs	r3, #5
 800316e:	221f      	movs	r2, #31
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	4019      	ands	r1, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	3b05      	subs	r3, #5
 8003188:	fa00 f203 	lsl.w	r2, r0, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	635a      	str	r2, [r3, #52]	; 0x34
 8003194:	e03c      	b.n	8003210 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d81c      	bhi.n	80031d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	3b23      	subs	r3, #35	; 0x23
 80031b0:	221f      	movs	r2, #31
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	4019      	ands	r1, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	3b23      	subs	r3, #35	; 0x23
 80031ca:	fa00 f203 	lsl.w	r2, r0, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
 80031d6:	e01b      	b.n	8003210 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	3b41      	subs	r3, #65	; 0x41
 80031ea:	221f      	movs	r2, #31
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	4019      	ands	r1, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	3b41      	subs	r3, #65	; 0x41
 8003204:	fa00 f203 	lsl.w	r2, r0, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b09      	cmp	r3, #9
 8003216:	d91c      	bls.n	8003252 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68d9      	ldr	r1, [r3, #12]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	3b1e      	subs	r3, #30
 800322a:	2207      	movs	r2, #7
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	4019      	ands	r1, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6898      	ldr	r0, [r3, #8]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	3b1e      	subs	r3, #30
 8003244:	fa00 f203 	lsl.w	r2, r0, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e019      	b.n	8003286 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6919      	ldr	r1, [r3, #16]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	2207      	movs	r2, #7
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	4019      	ands	r1, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6898      	ldr	r0, [r3, #8]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	fa00 f203 	lsl.w	r2, r0, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b10      	cmp	r3, #16
 800328c:	d003      	beq.n	8003296 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003292:	2b11      	cmp	r3, #17
 8003294:	d132      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <HAL_ADC_ConfigChannel+0x1e4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d125      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d126      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d11a      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032c6:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_ADC_ConfigChannel+0x1e8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a13      	ldr	r2, [pc, #76]	; (8003318 <HAL_ADC_ConfigChannel+0x1ec>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	0c9a      	lsrs	r2, r3, #18
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032dc:	e002      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f9      	bne.n	80032de <HAL_ADC_ConfigChannel+0x1b2>
 80032ea:	e007      	b.n	80032fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	40012400 	.word	0x40012400
 8003314:	20000028 	.word	0x20000028
 8003318:	431bde83 	.word	0x431bde83

0800331c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d040      	beq.n	80033bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0201 	orr.w	r2, r2, #1
 8003348:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800334a:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <ADC_Enable+0xac>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <ADC_Enable+0xb0>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	0c9b      	lsrs	r3, r3, #18
 8003356:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003358:	e002      	b.n	8003360 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3b01      	subs	r3, #1
 800335e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f9      	bne.n	800335a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003366:	f7ff fc71 	bl	8002c4c <HAL_GetTick>
 800336a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800336c:	e01f      	b.n	80033ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800336e:	f7ff fc6d 	bl	8002c4c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d918      	bls.n	80033ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d011      	beq.n	80033ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	f043 0210 	orr.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e007      	b.n	80033be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d1d8      	bne.n	800336e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000028 	.word	0x20000028
 80033cc:	431bde83 	.word	0x431bde83

080033d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d12e      	bne.n	8003448 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033fa:	f7ff fc27 	bl	8002c4c <HAL_GetTick>
 80033fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003400:	e01b      	b.n	800343a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003402:	f7ff fc23 	bl	8002c4c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d914      	bls.n	800343a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10d      	bne.n	800343a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	f043 0210 	orr.w	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e007      	b.n	800344a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d0dc      	beq.n	8003402 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_ADCEx_Calibration_Start+0x1e>
 800346e:	2302      	movs	r3, #2
 8003470:	e095      	b.n	800359e <HAL_ADCEx_Calibration_Start+0x14a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffa8 	bl	80033d0 <ADC_ConversionStop_Disable>
 8003480:	4603      	mov	r3, r0
 8003482:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8084 	bne.w	8003594 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003494:	f023 0302 	bic.w	r3, r3, #2
 8003498:	f043 0202 	orr.w	r2, r3, #2
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034a0:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <HAL_ADCEx_Calibration_Start+0x154>)
 80034a2:	681c      	ldr	r4, [r3, #0]
 80034a4:	2002      	movs	r0, #2
 80034a6:	f002 ff33 	bl	8006310 <HAL_RCCEx_GetPeriphCLKFreq>
 80034aa:	4603      	mov	r3, r0
 80034ac:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80034b0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80034b2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80034b4:	e002      	b.n	80034bc <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f9      	bne.n	80034b6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ff2a 	bl	800331c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0208 	orr.w	r2, r2, #8
 80034d6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034d8:	f7ff fbb8 	bl	8002c4c <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034de:	e01b      	b.n	8003518 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034e0:	f7ff fbb4 	bl	8002c4c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b0a      	cmp	r3, #10
 80034ec:	d914      	bls.n	8003518 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	f023 0312 	bic.w	r3, r3, #18
 8003504:	f043 0210 	orr.w	r2, r3, #16
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e042      	b.n	800359e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1dc      	bne.n	80034e0 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0204 	orr.w	r2, r2, #4
 8003534:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003536:	f7ff fb89 	bl	8002c4c <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800353c:	e01b      	b.n	8003576 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800353e:	f7ff fb85 	bl	8002c4c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b0a      	cmp	r3, #10
 800354a:	d914      	bls.n	8003576 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	f023 0312 	bic.w	r3, r3, #18
 8003562:	f043 0210 	orr.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e013      	b.n	800359e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1dc      	bne.n	800353e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	f023 0303 	bic.w	r3, r3, #3
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800359c:	7dfb      	ldrb	r3, [r7, #23]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd90      	pop	{r4, r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000028 	.word	0x20000028

080035ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
	...

080035c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <__NVIC_SetPriorityGrouping+0x44>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035dc:	4013      	ands	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f2:	4a04      	ldr	r2, [pc, #16]	; (8003604 <__NVIC_SetPriorityGrouping+0x44>)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	60d3      	str	r3, [r2, #12]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <__NVIC_GetPriorityGrouping+0x18>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	f003 0307 	and.w	r3, r3, #7
}
 8003616:	4618      	mov	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	2b00      	cmp	r3, #0
 8003634:	db0b      	blt.n	800364e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	f003 021f 	and.w	r2, r3, #31
 800363c:	4906      	ldr	r1, [pc, #24]	; (8003658 <__NVIC_EnableIRQ+0x34>)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	2001      	movs	r0, #1
 8003646:	fa00 f202 	lsl.w	r2, r0, r2
 800364a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	e000e100 	.word	0xe000e100

0800365c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	2b00      	cmp	r3, #0
 800366e:	db0a      	blt.n	8003686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	490c      	ldr	r1, [pc, #48]	; (80036a8 <__NVIC_SetPriority+0x4c>)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	0112      	lsls	r2, r2, #4
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	440b      	add	r3, r1
 8003680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003684:	e00a      	b.n	800369c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4908      	ldr	r1, [pc, #32]	; (80036ac <__NVIC_SetPriority+0x50>)
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	3b04      	subs	r3, #4
 8003694:	0112      	lsls	r2, r2, #4
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	440b      	add	r3, r1
 800369a:	761a      	strb	r2, [r3, #24]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	e000e100 	.word	0xe000e100
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f1c3 0307 	rsb	r3, r3, #7
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	bf28      	it	cs
 80036ce:	2304      	movcs	r3, #4
 80036d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3304      	adds	r3, #4
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d902      	bls.n	80036e0 <NVIC_EncodePriority+0x30>
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3b03      	subs	r3, #3
 80036de:	e000      	b.n	80036e2 <NVIC_EncodePriority+0x32>
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	401a      	ands	r2, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036f8:	f04f 31ff 	mov.w	r1, #4294967295
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	43d9      	mvns	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	4313      	orrs	r3, r2
         );
}
 800370a:	4618      	mov	r0, r3
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3b01      	subs	r3, #1
 8003720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003724:	d301      	bcc.n	800372a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003726:	2301      	movs	r3, #1
 8003728:	e00f      	b.n	800374a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800372a:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <SysTick_Config+0x40>)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003732:	210f      	movs	r1, #15
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	f7ff ff90 	bl	800365c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <SysTick_Config+0x40>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003742:	4b04      	ldr	r3, [pc, #16]	; (8003754 <SysTick_Config+0x40>)
 8003744:	2207      	movs	r2, #7
 8003746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	e000e010 	.word	0xe000e010

08003758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff2d 	bl	80035c0 <__NVIC_SetPriorityGrouping>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003780:	f7ff ff42 	bl	8003608 <__NVIC_GetPriorityGrouping>
 8003784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	6978      	ldr	r0, [r7, #20]
 800378c:	f7ff ff90 	bl	80036b0 <NVIC_EncodePriority>
 8003790:	4602      	mov	r2, r0
 8003792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff5f 	bl	800365c <__NVIC_SetPriority>
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	4603      	mov	r3, r0
 80037ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff ff35 	bl	8003624 <__NVIC_EnableIRQ>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff ffa2 	bl	8003714 <SysTick_Config>
 80037d0:	4603      	mov	r3, r0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e00e      	b.n	800380a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	795b      	ldrb	r3, [r3, #5]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d105      	bne.n	8003802 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff f8b1 	bl	8002964 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003812:	b480      	push	{r7}
 8003814:	b087      	sub	sp, #28
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2202      	movs	r2, #2
 8003826:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e00a      	b.n	8003854 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	441a      	add	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	3301      	adds	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	429a      	cmp	r2, r3
 800385a:	d3f0      	bcc.n	800383e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800386a:	693b      	ldr	r3, [r7, #16]
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
	...

08003878 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003892:	4b2f      	ldr	r3, [pc, #188]	; (8003950 <HAL_FLASH_Program+0xd8>)
 8003894:	7e1b      	ldrb	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_FLASH_Program+0x26>
 800389a:	2302      	movs	r3, #2
 800389c:	e054      	b.n	8003948 <HAL_FLASH_Program+0xd0>
 800389e:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <HAL_FLASH_Program+0xd8>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038a8:	f000 f8a8 	bl	80039fc <FLASH_WaitForLastOperation>
 80038ac:	4603      	mov	r3, r0
 80038ae:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d144      	bne.n	8003940 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d102      	bne.n	80038c2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80038bc:	2301      	movs	r3, #1
 80038be:	757b      	strb	r3, [r7, #21]
 80038c0:	e007      	b.n	80038d2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d102      	bne.n	80038ce <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80038c8:	2302      	movs	r3, #2
 80038ca:	757b      	strb	r3, [r7, #21]
 80038cc:	e001      	b.n	80038d2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80038ce:	2304      	movs	r3, #4
 80038d0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	75bb      	strb	r3, [r7, #22]
 80038d6:	e02d      	b.n	8003934 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80038d8:	7dbb      	ldrb	r3, [r7, #22]
 80038da:	005a      	lsls	r2, r3, #1
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	eb02 0c03 	add.w	ip, r2, r3
 80038e2:	7dbb      	ldrb	r3, [r7, #22]
 80038e4:	0119      	lsls	r1, r3, #4
 80038e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ea:	f1c1 0620 	rsb	r6, r1, #32
 80038ee:	f1a1 0020 	sub.w	r0, r1, #32
 80038f2:	fa22 f401 	lsr.w	r4, r2, r1
 80038f6:	fa03 f606 	lsl.w	r6, r3, r6
 80038fa:	4334      	orrs	r4, r6
 80038fc:	fa23 f000 	lsr.w	r0, r3, r0
 8003900:	4304      	orrs	r4, r0
 8003902:	fa23 f501 	lsr.w	r5, r3, r1
 8003906:	b2a3      	uxth	r3, r4
 8003908:	4619      	mov	r1, r3
 800390a:	4660      	mov	r0, ip
 800390c:	f000 f85a 	bl	80039c4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003910:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003914:	f000 f872 	bl	80039fc <FLASH_WaitForLastOperation>
 8003918:	4603      	mov	r3, r0
 800391a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <HAL_FLASH_Program+0xdc>)
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <HAL_FLASH_Program+0xdc>)
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d107      	bne.n	800393e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800392e:	7dbb      	ldrb	r3, [r7, #22]
 8003930:	3301      	adds	r3, #1
 8003932:	75bb      	strb	r3, [r7, #22]
 8003934:	7dba      	ldrb	r2, [r7, #22]
 8003936:	7d7b      	ldrb	r3, [r7, #21]
 8003938:	429a      	cmp	r2, r3
 800393a:	d3cd      	bcc.n	80038d8 <HAL_FLASH_Program+0x60>
 800393c:	e000      	b.n	8003940 <HAL_FLASH_Program+0xc8>
      {
        break;
 800393e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_FLASH_Program+0xd8>)
 8003942:	2200      	movs	r2, #0
 8003944:	761a      	strb	r2, [r3, #24]

  return status;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
}
 8003948:	4618      	mov	r0, r3
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003950:	200004a8 	.word	0x200004a8
 8003954:	40022000 	.word	0x40022000

08003958 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <HAL_FLASH_Unlock+0x40>)
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_FLASH_Unlock+0x40>)
 8003970:	4a0a      	ldr	r2, [pc, #40]	; (800399c <HAL_FLASH_Unlock+0x44>)
 8003972:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <HAL_FLASH_Unlock+0x40>)
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <HAL_FLASH_Unlock+0x48>)
 8003978:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <HAL_FLASH_Unlock+0x40>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800398a:	79fb      	ldrb	r3, [r7, #7]
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40022000 	.word	0x40022000
 800399c:	45670123 	.word	0x45670123
 80039a0:	cdef89ab 	.word	0xcdef89ab

080039a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_FLASH_Lock+0x1c>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <HAL_FLASH_Lock+0x1c>)
 80039ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40022000 	.word	0x40022000

080039c4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <FLASH_Program_HalfWord+0x30>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <FLASH_Program_HalfWord+0x34>)
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <FLASH_Program_HalfWord+0x34>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	887a      	ldrh	r2, [r7, #2]
 80039e6:	801a      	strh	r2, [r3, #0]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200004a8 	.word	0x200004a8
 80039f8:	40022000 	.word	0x40022000

080039fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a04:	f7ff f922 	bl	8002c4c <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a0a:	e010      	b.n	8003a2e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d00c      	beq.n	8003a2e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <FLASH_WaitForLastOperation+0x2e>
 8003a1a:	f7ff f917 	bl	8002c4c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d201      	bcs.n	8003a2e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e025      	b.n	8003a7a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <FLASH_WaitForLastOperation+0x88>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e8      	bne.n	8003a0c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <FLASH_WaitForLastOperation+0x88>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <FLASH_WaitForLastOperation+0x88>)
 8003a48:	2220      	movs	r2, #32
 8003a4a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <FLASH_WaitForLastOperation+0x88>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <FLASH_WaitForLastOperation+0x88>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <FLASH_WaitForLastOperation+0x88>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a70:	f000 f80a 	bl	8003a88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40022000 	.word	0x40022000

08003a88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003a92:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <FLASH_SetErrorCode+0x98>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a9e:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <FLASH_SetErrorCode+0x9c>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
 8003aa6:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <FLASH_SetErrorCode+0x9c>)
 8003aa8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f043 0310 	orr.w	r3, r3, #16
 8003ab0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <FLASH_SetErrorCode+0x98>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003abe:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <FLASH_SetErrorCode+0x9c>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <FLASH_SetErrorCode+0x9c>)
 8003ac8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <FLASH_SetErrorCode+0x98>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <FLASH_SetErrorCode+0x9c>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f043 0304 	orr.w	r3, r3, #4
 8003ae6:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <FLASH_SetErrorCode+0x9c>)
 8003ae8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <FLASH_SetErrorCode+0x98>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4a0c      	ldr	r2, [pc, #48]	; (8003b20 <FLASH_SetErrorCode+0x98>)
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f240 1201 	movw	r2, #257	; 0x101
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d106      	bne.n	8003b0e <FLASH_SetErrorCode+0x86>
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <FLASH_SetErrorCode+0x98>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	4a06      	ldr	r2, [pc, #24]	; (8003b20 <FLASH_SetErrorCode+0x98>)
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	61d3      	str	r3, [r2, #28]
}  
 8003b0c:	e002      	b.n	8003b14 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b0e:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <FLASH_SetErrorCode+0x98>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60d3      	str	r3, [r2, #12]
}  
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40022000 	.word	0x40022000
 8003b24:	200004a8 	.word	0x200004a8

08003b28 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <HAL_FLASHEx_Erase+0xd0>)
 8003b3c:	7e1b      	ldrb	r3, [r3, #24]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_FLASHEx_Erase+0x1e>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e053      	b.n	8003bee <HAL_FLASHEx_Erase+0xc6>
 8003b46:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <HAL_FLASHEx_Erase+0xd0>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d116      	bne.n	8003b82 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b58:	f7ff ff50 	bl	80039fc <FLASH_WaitForLastOperation>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d141      	bne.n	8003be6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f000 f84c 	bl	8003c00 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b6c:	f7ff ff46 	bl	80039fc <FLASH_WaitForLastOperation>
 8003b70:	4603      	mov	r3, r0
 8003b72:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b74:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <HAL_FLASHEx_Erase+0xd4>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <HAL_FLASHEx_Erase+0xd4>)
 8003b7a:	f023 0304 	bic.w	r3, r3, #4
 8003b7e:	6113      	str	r3, [r2, #16]
 8003b80:	e031      	b.n	8003be6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b82:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b86:	f7ff ff39 	bl	80039fc <FLASH_WaitForLastOperation>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d12a      	bne.n	8003be6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f04f 32ff 	mov.w	r2, #4294967295
 8003b96:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	e019      	b.n	8003bd4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003ba0:	68b8      	ldr	r0, [r7, #8]
 8003ba2:	f000 f849 	bl	8003c38 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ba6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003baa:	f7ff ff27 	bl	80039fc <FLASH_WaitForLastOperation>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_FLASHEx_Erase+0xd4>)
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	4a11      	ldr	r2, [pc, #68]	; (8003bfc <HAL_FLASHEx_Erase+0xd4>)
 8003bb8:	f023 0302 	bic.w	r3, r3, #2
 8003bbc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	601a      	str	r2, [r3, #0]
            break;
 8003bca:	e00c      	b.n	8003be6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	029a      	lsls	r2, r3, #10
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d3dc      	bcc.n	8003ba0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <HAL_FLASHEx_Erase+0xd0>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	761a      	strb	r2, [r3, #24]

  return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	200004a8 	.word	0x200004a8
 8003bfc:	40022000 	.word	0x40022000

08003c00 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <FLASH_MassErase+0x30>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <FLASH_MassErase+0x34>)
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <FLASH_MassErase+0x34>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <FLASH_MassErase+0x34>)
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <FLASH_MassErase+0x34>)
 8003c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c24:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	200004a8 	.word	0x200004a8
 8003c34:	40022000 	.word	0x40022000

08003c38 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <FLASH_PageErase+0x38>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <FLASH_PageErase+0x3c>)
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <FLASH_PageErase+0x3c>)
 8003c4c:	f043 0302 	orr.w	r3, r3, #2
 8003c50:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <FLASH_PageErase+0x3c>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <FLASH_PageErase+0x3c>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <FLASH_PageErase+0x3c>)
 8003c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c62:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	200004a8 	.word	0x200004a8
 8003c74:	40022000 	.word	0x40022000

08003c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b08b      	sub	sp, #44	; 0x2c
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c86:	2300      	movs	r3, #0
 8003c88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8a:	e169      	b.n	8003f60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	f040 8158 	bne.w	8003f5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4a9a      	ldr	r2, [pc, #616]	; (8003f18 <HAL_GPIO_Init+0x2a0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d05e      	beq.n	8003d72 <HAL_GPIO_Init+0xfa>
 8003cb4:	4a98      	ldr	r2, [pc, #608]	; (8003f18 <HAL_GPIO_Init+0x2a0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d875      	bhi.n	8003da6 <HAL_GPIO_Init+0x12e>
 8003cba:	4a98      	ldr	r2, [pc, #608]	; (8003f1c <HAL_GPIO_Init+0x2a4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d058      	beq.n	8003d72 <HAL_GPIO_Init+0xfa>
 8003cc0:	4a96      	ldr	r2, [pc, #600]	; (8003f1c <HAL_GPIO_Init+0x2a4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d86f      	bhi.n	8003da6 <HAL_GPIO_Init+0x12e>
 8003cc6:	4a96      	ldr	r2, [pc, #600]	; (8003f20 <HAL_GPIO_Init+0x2a8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d052      	beq.n	8003d72 <HAL_GPIO_Init+0xfa>
 8003ccc:	4a94      	ldr	r2, [pc, #592]	; (8003f20 <HAL_GPIO_Init+0x2a8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d869      	bhi.n	8003da6 <HAL_GPIO_Init+0x12e>
 8003cd2:	4a94      	ldr	r2, [pc, #592]	; (8003f24 <HAL_GPIO_Init+0x2ac>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d04c      	beq.n	8003d72 <HAL_GPIO_Init+0xfa>
 8003cd8:	4a92      	ldr	r2, [pc, #584]	; (8003f24 <HAL_GPIO_Init+0x2ac>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d863      	bhi.n	8003da6 <HAL_GPIO_Init+0x12e>
 8003cde:	4a92      	ldr	r2, [pc, #584]	; (8003f28 <HAL_GPIO_Init+0x2b0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d046      	beq.n	8003d72 <HAL_GPIO_Init+0xfa>
 8003ce4:	4a90      	ldr	r2, [pc, #576]	; (8003f28 <HAL_GPIO_Init+0x2b0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d85d      	bhi.n	8003da6 <HAL_GPIO_Init+0x12e>
 8003cea:	2b12      	cmp	r3, #18
 8003cec:	d82a      	bhi.n	8003d44 <HAL_GPIO_Init+0xcc>
 8003cee:	2b12      	cmp	r3, #18
 8003cf0:	d859      	bhi.n	8003da6 <HAL_GPIO_Init+0x12e>
 8003cf2:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <HAL_GPIO_Init+0x80>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003d73 	.word	0x08003d73
 8003cfc:	08003d4d 	.word	0x08003d4d
 8003d00:	08003d5f 	.word	0x08003d5f
 8003d04:	08003da1 	.word	0x08003da1
 8003d08:	08003da7 	.word	0x08003da7
 8003d0c:	08003da7 	.word	0x08003da7
 8003d10:	08003da7 	.word	0x08003da7
 8003d14:	08003da7 	.word	0x08003da7
 8003d18:	08003da7 	.word	0x08003da7
 8003d1c:	08003da7 	.word	0x08003da7
 8003d20:	08003da7 	.word	0x08003da7
 8003d24:	08003da7 	.word	0x08003da7
 8003d28:	08003da7 	.word	0x08003da7
 8003d2c:	08003da7 	.word	0x08003da7
 8003d30:	08003da7 	.word	0x08003da7
 8003d34:	08003da7 	.word	0x08003da7
 8003d38:	08003da7 	.word	0x08003da7
 8003d3c:	08003d55 	.word	0x08003d55
 8003d40:	08003d69 	.word	0x08003d69
 8003d44:	4a79      	ldr	r2, [pc, #484]	; (8003f2c <HAL_GPIO_Init+0x2b4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d4a:	e02c      	b.n	8003da6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	623b      	str	r3, [r7, #32]
          break;
 8003d52:	e029      	b.n	8003da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	623b      	str	r3, [r7, #32]
          break;
 8003d5c:	e024      	b.n	8003da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	3308      	adds	r3, #8
 8003d64:	623b      	str	r3, [r7, #32]
          break;
 8003d66:	e01f      	b.n	8003da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	623b      	str	r3, [r7, #32]
          break;
 8003d70:	e01a      	b.n	8003da8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d102      	bne.n	8003d80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	623b      	str	r3, [r7, #32]
          break;
 8003d7e:	e013      	b.n	8003da8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d105      	bne.n	8003d94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d88:	2308      	movs	r3, #8
 8003d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	611a      	str	r2, [r3, #16]
          break;
 8003d92:	e009      	b.n	8003da8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d94:	2308      	movs	r3, #8
 8003d96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	615a      	str	r2, [r3, #20]
          break;
 8003d9e:	e003      	b.n	8003da8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
          break;
 8003da4:	e000      	b.n	8003da8 <HAL_GPIO_Init+0x130>
          break;
 8003da6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2bff      	cmp	r3, #255	; 0xff
 8003dac:	d801      	bhi.n	8003db2 <HAL_GPIO_Init+0x13a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	e001      	b.n	8003db6 <HAL_GPIO_Init+0x13e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3304      	adds	r3, #4
 8003db6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2bff      	cmp	r3, #255	; 0xff
 8003dbc:	d802      	bhi.n	8003dc4 <HAL_GPIO_Init+0x14c>
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	e002      	b.n	8003dca <HAL_GPIO_Init+0x152>
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	3b08      	subs	r3, #8
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	210f      	movs	r1, #15
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	401a      	ands	r2, r3
 8003ddc:	6a39      	ldr	r1, [r7, #32]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	431a      	orrs	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80b1 	beq.w	8003f5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003df8:	4b4d      	ldr	r3, [pc, #308]	; (8003f30 <HAL_GPIO_Init+0x2b8>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4a4c      	ldr	r2, [pc, #304]	; (8003f30 <HAL_GPIO_Init+0x2b8>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6193      	str	r3, [r2, #24]
 8003e04:	4b4a      	ldr	r3, [pc, #296]	; (8003f30 <HAL_GPIO_Init+0x2b8>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e10:	4a48      	ldr	r2, [pc, #288]	; (8003f34 <HAL_GPIO_Init+0x2bc>)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	089b      	lsrs	r3, r3, #2
 8003e16:	3302      	adds	r3, #2
 8003e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	220f      	movs	r2, #15
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4013      	ands	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a40      	ldr	r2, [pc, #256]	; (8003f38 <HAL_GPIO_Init+0x2c0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d013      	beq.n	8003e64 <HAL_GPIO_Init+0x1ec>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3f      	ldr	r2, [pc, #252]	; (8003f3c <HAL_GPIO_Init+0x2c4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00d      	beq.n	8003e60 <HAL_GPIO_Init+0x1e8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3e      	ldr	r2, [pc, #248]	; (8003f40 <HAL_GPIO_Init+0x2c8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <HAL_GPIO_Init+0x1e4>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3d      	ldr	r2, [pc, #244]	; (8003f44 <HAL_GPIO_Init+0x2cc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d101      	bne.n	8003e58 <HAL_GPIO_Init+0x1e0>
 8003e54:	2303      	movs	r3, #3
 8003e56:	e006      	b.n	8003e66 <HAL_GPIO_Init+0x1ee>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	e004      	b.n	8003e66 <HAL_GPIO_Init+0x1ee>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e002      	b.n	8003e66 <HAL_GPIO_Init+0x1ee>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_GPIO_Init+0x1ee>
 8003e64:	2300      	movs	r3, #0
 8003e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e68:	f002 0203 	and.w	r2, r2, #3
 8003e6c:	0092      	lsls	r2, r2, #2
 8003e6e:	4093      	lsls	r3, r2
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e76:	492f      	ldr	r1, [pc, #188]	; (8003f34 <HAL_GPIO_Init+0x2bc>)
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d006      	beq.n	8003e9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	492c      	ldr	r1, [pc, #176]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e9e:	4b2a      	ldr	r3, [pc, #168]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	4928      	ldr	r1, [pc, #160]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d006      	beq.n	8003ec6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003eb8:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	4922      	ldr	r1, [pc, #136]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
 8003ec4:	e006      	b.n	8003ed4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	491e      	ldr	r1, [pc, #120]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d006      	beq.n	8003eee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ee0:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	4918      	ldr	r1, [pc, #96]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]
 8003eec:	e006      	b.n	8003efc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003eee:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	4914      	ldr	r1, [pc, #80]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d021      	beq.n	8003f4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	490e      	ldr	r1, [pc, #56]	; (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60cb      	str	r3, [r1, #12]
 8003f14:	e021      	b.n	8003f5a <HAL_GPIO_Init+0x2e2>
 8003f16:	bf00      	nop
 8003f18:	10320000 	.word	0x10320000
 8003f1c:	10310000 	.word	0x10310000
 8003f20:	10220000 	.word	0x10220000
 8003f24:	10210000 	.word	0x10210000
 8003f28:	10120000 	.word	0x10120000
 8003f2c:	10110000 	.word	0x10110000
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40010800 	.word	0x40010800
 8003f3c:	40010c00 	.word	0x40010c00
 8003f40:	40011000 	.word	0x40011000
 8003f44:	40011400 	.word	0x40011400
 8003f48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_GPIO_Init+0x304>)
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	4909      	ldr	r1, [pc, #36]	; (8003f7c <HAL_GPIO_Init+0x304>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f47f ae8e 	bne.w	8003c8c <HAL_GPIO_Init+0x14>
  }
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	372c      	adds	r7, #44	; 0x2c
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	40010400 	.word	0x40010400

08003f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	887b      	ldrh	r3, [r7, #2]
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	e001      	b.n	8003fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	807b      	strh	r3, [r7, #2]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fbe:	787b      	ldrb	r3, [r7, #1]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fc4:	887a      	ldrh	r2, [r7, #2]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fca:	e003      	b.n	8003fd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	041a      	lsls	r2, r3, #16
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	611a      	str	r2, [r3, #16]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
	...

08003fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d006      	beq.n	8004004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc fdbe 	bl	8000b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40010400 	.word	0x40010400

08004010 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004012:	b08b      	sub	sp, #44	; 0x2c
 8004014:	af06      	add	r7, sp, #24
 8004016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e0fd      	b.n	800421e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f007 fd34 	bl	800baa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2203      	movs	r2, #3
 8004040:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f003 fa1d 	bl	8007488 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	687e      	ldr	r6, [r7, #4]
 8004056:	466d      	mov	r5, sp
 8004058:	f106 0410 	add.w	r4, r6, #16
 800405c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800405e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	602b      	str	r3, [r5, #0]
 8004064:	1d33      	adds	r3, r6, #4
 8004066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004068:	6838      	ldr	r0, [r7, #0]
 800406a:	f003 f9e7 	bl	800743c <USB_CoreInit>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0ce      	b.n	800421e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f003 fa18 	bl	80074bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	e04c      	b.n	800412c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	3301      	adds	r3, #1
 80040a4:	2201      	movs	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	440b      	add	r3, r1
 80040b8:	7bfa      	ldrb	r2, [r7, #15]
 80040ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	b298      	uxth	r0, r3
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	440b      	add	r3, r1
 80040ce:	3336      	adds	r3, #54	; 0x36
 80040d0:	4602      	mov	r2, r0
 80040d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	440b      	add	r3, r1
 80040e4:	3303      	adds	r3, #3
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	440b      	add	r3, r1
 80040f8:	3338      	adds	r3, #56	; 0x38
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	440b      	add	r3, r1
 800410c:	333c      	adds	r3, #60	; 0x3c
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	440b      	add	r3, r1
 8004120:	3340      	adds	r3, #64	; 0x40
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	3301      	adds	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	429a      	cmp	r2, r3
 8004134:	d3ad      	bcc.n	8004092 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
 800413a:	e044      	b.n	80041c6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	440b      	add	r3, r1
 800414a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004164:	7bfa      	ldrb	r2, [r7, #15]
 8004166:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	440b      	add	r3, r1
 8004176:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	440b      	add	r3, r1
 800418c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	3301      	adds	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	7bfa      	ldrb	r2, [r7, #15]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d3b5      	bcc.n	800413c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	687e      	ldr	r6, [r7, #4]
 80041d8:	466d      	mov	r5, sp
 80041da:	f106 0410 	add.w	r4, r6, #16
 80041de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	602b      	str	r3, [r5, #0]
 80041e6:	1d33      	adds	r3, r6, #4
 80041e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041ea:	6838      	ldr	r0, [r7, #0]
 80041ec:	f003 f972 	bl	80074d4 <USB_DevInit>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e00d      	b.n	800421e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f005 fe24 	bl	8009e64 <USB_DevDisconnect>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004226 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_PCD_Start+0x16>
 8004238:	2302      	movs	r3, #2
 800423a:	e016      	b.n	800426a <HAL_PCD_Start+0x44>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f003 f907 	bl	800745c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800424e:	2101      	movs	r1, #1
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f007 fe9a 	bl	800bf8a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f005 fdf8 	bl	8009e50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b088      	sub	sp, #32
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f005 fdfa 	bl	8009e78 <USB_ReadInterrupts>
 8004284:	4603      	mov	r3, r0
 8004286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800428a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428e:	d102      	bne.n	8004296 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fb5f 	bl	8004954 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f005 fdec 	bl	8009e78 <USB_ReadInterrupts>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042aa:	d112      	bne.n	80042d2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042be:	b292      	uxth	r2, r2
 80042c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f007 fc68 	bl	800bb9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80042ca:	2100      	movs	r1, #0
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f923 	bl	8004518 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f005 fdce 	bl	8009e78 <USB_ReadInterrupts>
 80042dc:	4603      	mov	r3, r0
 80042de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e6:	d10b      	bne.n	8004300 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042fa:	b292      	uxth	r2, r2
 80042fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f005 fdb7 	bl	8009e78 <USB_ReadInterrupts>
 800430a:	4603      	mov	r3, r0
 800430c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004314:	d10b      	bne.n	800432e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800431e:	b29a      	uxth	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004328:	b292      	uxth	r2, r2
 800432a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f005 fda0 	bl	8009e78 <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d126      	bne.n	8004392 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0204 	bic.w	r2, r2, #4
 8004356:	b292      	uxth	r2, r2
 8004358:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004364:	b29a      	uxth	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0208 	bic.w	r2, r2, #8
 800436e:	b292      	uxth	r2, r2
 8004370:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f007 fc49 	bl	800bc0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800438c:	b292      	uxth	r2, r2
 800438e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f005 fd6e 	bl	8009e78 <USB_ReadInterrupts>
 800439c:	4603      	mov	r3, r0
 800439e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a6:	f040 8082 	bne.w	80044ae <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80043aa:	2300      	movs	r3, #0
 80043ac:	77fb      	strb	r3, [r7, #31]
 80043ae:	e010      	b.n	80043d2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	441a      	add	r2, r3
 80043bc:	7ffb      	ldrb	r3, [r7, #31]
 80043be:	8812      	ldrh	r2, [r2, #0]
 80043c0:	b292      	uxth	r2, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	3320      	adds	r3, #32
 80043c6:	443b      	add	r3, r7
 80043c8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80043cc:	7ffb      	ldrb	r3, [r7, #31]
 80043ce:	3301      	adds	r3, #1
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	7ffb      	ldrb	r3, [r7, #31]
 80043d4:	2b07      	cmp	r3, #7
 80043d6:	d9eb      	bls.n	80043b0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	b292      	uxth	r2, r2
 80043ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	b292      	uxth	r2, r2
 8004404:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004408:	bf00      	nop
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004412:	b29b      	uxth	r3, r3
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f6      	beq.n	800440a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442e:	b292      	uxth	r2, r2
 8004430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004434:	2300      	movs	r3, #0
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e00f      	b.n	800445a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800443a:	7ffb      	ldrb	r3, [r7, #31]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	4611      	mov	r1, r2
 8004442:	7ffa      	ldrb	r2, [r7, #31]
 8004444:	0092      	lsls	r2, r2, #2
 8004446:	440a      	add	r2, r1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	3320      	adds	r3, #32
 800444c:	443b      	add	r3, r7
 800444e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004452:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004454:	7ffb      	ldrb	r3, [r7, #31]
 8004456:	3301      	adds	r3, #1
 8004458:	77fb      	strb	r3, [r7, #31]
 800445a:	7ffb      	ldrb	r3, [r7, #31]
 800445c:	2b07      	cmp	r3, #7
 800445e:	d9ec      	bls.n	800443a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004468:	b29a      	uxth	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0208 	orr.w	r2, r2, #8
 8004472:	b292      	uxth	r2, r2
 8004474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800448a:	b292      	uxth	r2, r2
 800448c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0204 	orr.w	r2, r2, #4
 80044a2:	b292      	uxth	r2, r2
 80044a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f007 fb95 	bl	800bbd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f005 fce0 	bl	8009e78 <USB_ReadInterrupts>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c2:	d10e      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044d6:	b292      	uxth	r2, r2
 80044d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f007 fb4e 	bl	800bb7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f005 fcc6 	bl	8009e78 <USB_ReadInterrupts>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f6:	d10b      	bne.n	8004510 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004500:	b29a      	uxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800450a:	b292      	uxth	r2, r2
 800450c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004510:	bf00      	nop
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_PCD_SetAddress+0x1a>
 800452e:	2302      	movs	r3, #2
 8004530:	e013      	b.n	800455a <HAL_PCD_SetAddress+0x42>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f005 fc6d 	bl	8009e2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	4608      	mov	r0, r1
 800456c:	4611      	mov	r1, r2
 800456e:	461a      	mov	r2, r3
 8004570:	4603      	mov	r3, r0
 8004572:	70fb      	strb	r3, [r7, #3]
 8004574:	460b      	mov	r3, r1
 8004576:	803b      	strh	r3, [r7, #0]
 8004578:	4613      	mov	r3, r2
 800457a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004584:	2b00      	cmp	r3, #0
 8004586:	da0e      	bge.n	80045a6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4413      	add	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	705a      	strb	r2, [r3, #1]
 80045a4:	e00e      	b.n	80045c4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	f003 0207 	and.w	r2, r3, #7
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	4413      	add	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045d0:	883a      	ldrh	r2, [r7, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	78ba      	ldrb	r2, [r7, #2]
 80045da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045ee:	78bb      	ldrb	r3, [r7, #2]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d102      	bne.n	80045fa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_PCD_EP_Open+0xa6>
 8004604:	2302      	movs	r3, #2
 8004606:	e00e      	b.n	8004626 <HAL_PCD_EP_Open+0xc4>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	4618      	mov	r0, r3
 8004618:	f002 ff7c 	bl	8007514 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004624:	7afb      	ldrb	r3, [r7, #11]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800463a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800463e:	2b00      	cmp	r3, #0
 8004640:	da0e      	bge.n	8004660 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	705a      	strb	r2, [r3, #1]
 800465e:	e00e      	b.n	800467e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f003 0207 	and.w	r2, r3, #7
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_PCD_EP_Close+0x6a>
 8004694:	2302      	movs	r3, #2
 8004696:	e00e      	b.n	80046b6 <HAL_PCD_EP_Close+0x88>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68f9      	ldr	r1, [r7, #12]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f003 fa9e 	bl	8007be8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	460b      	mov	r3, r1
 80046cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ce:	7afb      	ldrb	r3, [r7, #11]
 80046d0:	f003 0207 	and.w	r2, r3, #7
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2200      	movs	r2, #0
 80046f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2200      	movs	r2, #0
 80046fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fe:	7afb      	ldrb	r3, [r7, #11]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	b2da      	uxtb	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800470a:	7afb      	ldrb	r3, [r7, #11]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6979      	ldr	r1, [r7, #20]
 800471a:	4618      	mov	r0, r3
 800471c:	f003 fc50 	bl	8007fc0 <USB_EPStartXfer>
 8004720:	e005      	b.n	800472e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	4618      	mov	r0, r3
 800472a:	f003 fc49 	bl	8007fc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	f003 0207 	and.w	r2, r3, #7
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	440b      	add	r3, r1
 8004756:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800475a:	681b      	ldr	r3, [r3, #0]
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b086      	sub	sp, #24
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	460b      	mov	r3, r1
 8004774:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004776:	7afb      	ldrb	r3, [r7, #11]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2200      	movs	r2, #0
 80047aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2201      	movs	r2, #1
 80047b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047b2:	7afb      	ldrb	r3, [r7, #11]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047be:	7afb      	ldrb	r3, [r7, #11]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6979      	ldr	r1, [r7, #20]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f003 fbf6 	bl	8007fc0 <USB_EPStartXfer>
 80047d4:	e005      	b.n	80047e2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6979      	ldr	r1, [r7, #20]
 80047dc:	4618      	mov	r0, r3
 80047de:	f003 fbef 	bl	8007fc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	f003 0207 	and.w	r2, r3, #7
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d901      	bls.n	800480a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e04c      	b.n	80048a4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800480a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800480e:	2b00      	cmp	r3, #0
 8004810:	da0e      	bge.n	8004830 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4413      	add	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	705a      	strb	r2, [r3, #1]
 800482e:	e00c      	b.n	800484a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4413      	add	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	b2da      	uxtb	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_PCD_EP_SetStall+0x7e>
 8004866:	2302      	movs	r3, #2
 8004868:	e01c      	b.n	80048a4 <HAL_PCD_EP_SetStall+0xb8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	4618      	mov	r0, r3
 800487a:	f005 f9d9 	bl	8009c30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	2b00      	cmp	r3, #0
 8004886:	d108      	bne.n	800489a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f005 fafe 	bl	8009e96 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 020f 	and.w	r2, r3, #15
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d901      	bls.n	80048ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e040      	b.n	800494c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	da0e      	bge.n	80048f0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	705a      	strb	r2, [r3, #1]
 80048ee:	e00e      	b.n	800490e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	f003 0207 	and.w	r2, r3, #7
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	4413      	add	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_PCD_EP_ClrStall+0x82>
 800492a:	2302      	movs	r3, #2
 800492c:	e00e      	b.n	800494c <HAL_PCD_EP_ClrStall+0xa0>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68f9      	ldr	r1, [r7, #12]
 800493c:	4618      	mov	r0, r3
 800493e:	f005 f9c7 	bl	8009cd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08e      	sub	sp, #56	; 0x38
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800495c:	e2ec      	b.n	8004f38 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004966:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004968:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004974:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004978:	2b00      	cmp	r3, #0
 800497a:	f040 8161 	bne.w	8004c40 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800497e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	d152      	bne.n	8004a2e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004998:	81fb      	strh	r3, [r7, #14]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	89fb      	ldrh	r3, [r7, #14]
 80049a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3328      	adds	r3, #40	; 0x28
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4413      	add	r3, r2
 80049c6:	3302      	adds	r3, #2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	441a      	add	r2, r3
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80049ec:	2100      	movs	r1, #0
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f007 f8ab 	bl	800bb4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 829b 	beq.w	8004f38 <PCD_EP_ISR_Handler+0x5e4>
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 8296 	bne.w	8004f38 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a2c:	e284      	b.n	8004f38 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004a3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d034      	beq.n	8004ab2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3306      	adds	r3, #6
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f005 fa55 	bl	8009f36 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a98:	4013      	ands	r3, r2
 8004a9a:	823b      	strh	r3, [r7, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	8a3a      	ldrh	r2, [r7, #16]
 8004aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aa6:	b292      	uxth	r2, r2
 8004aa8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f007 f820 	bl	800baf0 <HAL_PCD_SetupStageCallback>
 8004ab0:	e242      	b.n	8004f38 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ab2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f280 823e 	bge.w	8004f38 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ac8:	4013      	ands	r3, r2
 8004aca:	83bb      	strh	r3, [r7, #28]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	8bba      	ldrh	r2, [r7, #28]
 8004ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4413      	add	r3, r2
 8004aee:	3306      	adds	r3, #6
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d019      	beq.n	8004b42 <PCD_EP_ISR_Handler+0x1ee>
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d015      	beq.n	8004b42 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	6959      	ldr	r1, [r3, #20]
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f005 fa05 	bl	8009f36 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	441a      	add	r2, r3
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f006 ffe9 	bl	800bb14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f040 81f2 	bne.w	8004f38 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	4413      	add	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d112      	bne.n	8004ba2 <PCD_EP_ISR_Handler+0x24e>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	801a      	strh	r2, [r3, #0]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	e02f      	b.n	8004c02 <PCD_EP_ISR_Handler+0x2ae>
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ba8:	d813      	bhi.n	8004bd2 <PCD_EP_ISR_Handler+0x27e>
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <PCD_EP_ISR_Handler+0x270>
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	e017      	b.n	8004c02 <PCD_EP_ISR_Handler+0x2ae>
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d102      	bne.n	8004bec <PCD_EP_ISR_Handler+0x298>
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	3b01      	subs	r3, #1
 8004bea:	633b      	str	r3, [r7, #48]	; 0x30
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	029b      	lsls	r3, r3, #10
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	827b      	strh	r3, [r7, #18]
 8004c14:	8a7b      	ldrh	r3, [r7, #18]
 8004c16:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c1a:	827b      	strh	r3, [r7, #18]
 8004c1c:	8a7b      	ldrh	r3, [r7, #18]
 8004c1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c22:	827b      	strh	r3, [r7, #18]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	8a7b      	ldrh	r3, [r7, #18]
 8004c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	8013      	strh	r3, [r2, #0]
 8004c3e:	e17b      	b.n	8004f38 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c52:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f280 80ea 	bge.w	8004e30 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c72:	4013      	ands	r3, r2
 8004c74:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004c8e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	7b1b      	ldrb	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d122      	bne.n	8004cf2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3306      	adds	r3, #6
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004cd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8087 	beq.w	8004dec <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	6959      	ldr	r1, [r3, #20]
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	88da      	ldrh	r2, [r3, #6]
 8004cea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cec:	f005 f923 	bl	8009f36 <USB_ReadPMA>
 8004cf0:	e07c      	b.n	8004dec <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	78db      	ldrb	r3, [r3, #3]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d108      	bne.n	8004d0c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004cfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f927 	bl	8004f54 <HAL_PCD_EP_DB_Receive>
 8004d06:	4603      	mov	r3, r0
 8004d08:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d0a:	e06f      	b.n	8004dec <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d021      	beq.n	8004daa <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d8e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02a      	beq.n	8004dec <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	6959      	ldr	r1, [r3, #20]
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	891a      	ldrh	r2, [r3, #8]
 8004da2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004da4:	f005 f8c7 	bl	8009f36 <USB_ReadPMA>
 8004da8:	e020      	b.n	8004dec <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3306      	adds	r3, #6
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004dd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	6959      	ldr	r1, [r3, #20]
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	895a      	ldrh	r2, [r3, #10]
 8004de6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004de8:	f005 f8a5 	bl	8009f36 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004df2:	441a      	add	r2, r3
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dfe:	441a      	add	r2, r3
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <PCD_EP_ISR_Handler+0x4c2>
 8004e0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d206      	bcs.n	8004e24 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f006 fe79 	bl	800bb14 <HAL_PCD_DataOutStageCallback>
 8004e22:	e005      	b.n	8004e30 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f003 f8c8 	bl	8007fc0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d07e      	beq.n	8004f38 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e68:	843b      	strh	r3, [r7, #32]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	8c3b      	ldrh	r3, [r7, #32]
 8004e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	78db      	ldrb	r3, [r3, #3]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d00c      	beq.n	8004ea8 <PCD_EP_ISR_Handler+0x554>
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	78db      	ldrb	r3, [r3, #3]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d146      	bne.n	8004f2c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d141      	bne.n	8004f2c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4413      	add	r3, r2
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ed0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	8bfb      	ldrh	r3, [r7, #30]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d906      	bls.n	8004eea <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	8bfb      	ldrh	r3, [r7, #30]
 8004ee2:	1ad2      	subs	r2, r2, r3
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	619a      	str	r2, [r3, #24]
 8004ee8:	e002      	b.n	8004ef0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	2200      	movs	r2, #0
 8004eee:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f006 fe23 	bl	800bb4a <HAL_PCD_DataInStageCallback>
 8004f04:	e018      	b.n	8004f38 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	8bfb      	ldrh	r3, [r7, #30]
 8004f0c:	441a      	add	r2, r3
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	69da      	ldr	r2, [r3, #28]
 8004f16:	8bfb      	ldrh	r3, [r7, #30]
 8004f18:	441a      	add	r2, r3
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f24:	4618      	mov	r0, r3
 8004f26:	f003 f84b 	bl	8007fc0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004f2a:	e005      	b.n	8004f38 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f91b 	bl	800516e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	b21b      	sxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f6ff ad0a 	blt.w	800495e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3738      	adds	r7, #56	; 0x38
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d07e      	beq.n	800506a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4413      	add	r3, r2
 8004f80:	3302      	adds	r3, #2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	8b7b      	ldrh	r3, [r7, #26]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d306      	bcc.n	8004fae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	699a      	ldr	r2, [r3, #24]
 8004fa4:	8b7b      	ldrh	r3, [r7, #26]
 8004fa6:	1ad2      	subs	r2, r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	619a      	str	r2, [r3, #24]
 8004fac:	e002      	b.n	8004fb4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d123      	bne.n	8005004 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	833b      	strh	r3, [r7, #24]
 8004fd8:	8b3b      	ldrh	r3, [r7, #24]
 8004fda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fde:	833b      	strh	r3, [r7, #24]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	8b3b      	ldrh	r3, [r7, #24]
 8004ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005000:	b29b      	uxth	r3, r3
 8005002:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01f      	beq.n	800504e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	82fb      	strh	r3, [r7, #22]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	8afb      	ldrh	r3, [r7, #22]
 800503a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800504e:	8b7b      	ldrh	r3, [r7, #26]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8087 	beq.w	8005164 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	6959      	ldr	r1, [r3, #20]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	891a      	ldrh	r2, [r3, #8]
 8005062:	8b7b      	ldrh	r3, [r7, #26]
 8005064:	f004 ff67 	bl	8009f36 <USB_ReadPMA>
 8005068:	e07c      	b.n	8005164 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005072:	b29b      	uxth	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	4413      	add	r3, r2
 800507e:	3306      	adds	r3, #6
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005092:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	699a      	ldr	r2, [r3, #24]
 8005098:	8b7b      	ldrh	r3, [r7, #26]
 800509a:	429a      	cmp	r2, r3
 800509c:	d306      	bcc.n	80050ac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	8b7b      	ldrh	r3, [r7, #26]
 80050a4:	1ad2      	subs	r2, r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	619a      	str	r2, [r3, #24]
 80050aa:	e002      	b.n	80050b2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d123      	bne.n	8005102 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d4:	83fb      	strh	r3, [r7, #30]
 80050d6:	8bfb      	ldrh	r3, [r7, #30]
 80050d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050dc:	83fb      	strh	r3, [r7, #30]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	441a      	add	r2, r3
 80050ec:	8bfb      	ldrh	r3, [r7, #30]
 80050ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050fe:	b29b      	uxth	r3, r3
 8005100:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d11f      	bne.n	800514c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	83bb      	strh	r3, [r7, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	441a      	add	r2, r3
 8005136:	8bbb      	ldrh	r3, [r7, #28]
 8005138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005144:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005148:	b29b      	uxth	r3, r3
 800514a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800514c:	8b7b      	ldrh	r3, [r7, #26]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6959      	ldr	r1, [r3, #20]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	895a      	ldrh	r2, [r3, #10]
 800515e:	8b7b      	ldrh	r3, [r7, #26]
 8005160:	f004 fee9 	bl	8009f36 <USB_ReadPMA>
    }
  }

  return count;
 8005164:	8b7b      	ldrh	r3, [r7, #26]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b0a2      	sub	sp, #136	; 0x88
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 81c7 	beq.w	8005516 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005190:	b29b      	uxth	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	4413      	add	r3, r2
 800519c:	3302      	adds	r3, #2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051bc:	429a      	cmp	r2, r3
 80051be:	d907      	bls.n	80051d0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	699a      	ldr	r2, [r3, #24]
 80051c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051c8:	1ad2      	subs	r2, r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	619a      	str	r2, [r3, #24]
 80051ce:	e002      	b.n	80051d6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2200      	movs	r2, #0
 80051d4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f040 80b9 	bne.w	8005352 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d126      	bne.n	8005236 <HAL_PCD_EP_DB_Transmit+0xc8>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	4413      	add	r3, r2
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	011a      	lsls	r2, r3, #4
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	4413      	add	r3, r2
 800520a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800521a:	b29a      	uxth	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522e:	b29a      	uxth	r2, r3
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	e01a      	b.n	800526c <HAL_PCD_EP_DB_Transmit+0xfe>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d116      	bne.n	800526c <HAL_PCD_EP_DB_Transmit+0xfe>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	633b      	str	r3, [r7, #48]	; 0x30
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524c:	b29b      	uxth	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	4413      	add	r3, r2
 8005254:	633b      	str	r3, [r7, #48]	; 0x30
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	011a      	lsls	r2, r3, #4
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	4413      	add	r3, r2
 8005260:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	2200      	movs	r2, #0
 800526a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	623b      	str	r3, [r7, #32]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d126      	bne.n	80052c8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005288:	b29b      	uxth	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	4413      	add	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	011a      	lsls	r2, r3, #4
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	4413      	add	r3, r2
 800529c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e017      	b.n	80052f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d113      	bne.n	80052f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d8:	b29b      	uxth	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	4413      	add	r3, r2
 80052e0:	623b      	str	r3, [r7, #32]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	011a      	lsls	r2, r3, #4
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	4413      	add	r3, r2
 80052ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2200      	movs	r2, #0
 80052f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	4619      	mov	r1, r3
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f006 fc23 	bl	800bb4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005304:	88fb      	ldrh	r3, [r7, #6]
 8005306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 82d4 	beq.w	80058b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	827b      	strh	r3, [r7, #18]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	441a      	add	r2, r3
 800533a:	8a7b      	ldrh	r3, [r7, #18]
 800533c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534c:	b29b      	uxth	r3, r3
 800534e:	8013      	strh	r3, [r2, #0]
 8005350:	e2b2      	b.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d021      	beq.n	80053a0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005376:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	441a      	add	r2, r3
 8005388:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800538c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	b29b      	uxth	r3, r3
 800539e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	f040 8286 	bne.w	80058b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053b4:	441a      	add	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	69da      	ldr	r2, [r3, #28]
 80053be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053c2:	441a      	add	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d309      	bcc.n	80053e8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e0:	1ad2      	subs	r2, r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	621a      	str	r2, [r3, #32]
 80053e6:	e015      	b.n	8005414 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d107      	bne.n	8005400 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80053f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053fe:	e009      	b.n	8005414 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2200      	movs	r2, #0
 8005412:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	785b      	ldrb	r3, [r3, #1]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d155      	bne.n	80054c8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	63bb      	str	r3, [r7, #56]	; 0x38
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542a:	b29b      	uxth	r3, r3
 800542c:	461a      	mov	r2, r3
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	4413      	add	r3, r2
 8005432:	63bb      	str	r3, [r7, #56]	; 0x38
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	011a      	lsls	r2, r3, #4
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	4413      	add	r3, r2
 800543e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
 8005444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005446:	2b00      	cmp	r3, #0
 8005448:	d112      	bne.n	8005470 <HAL_PCD_EP_DB_Transmit+0x302>
 800544a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005454:	b29a      	uxth	r2, r3
 8005456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005468:	b29a      	uxth	r2, r3
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546c:	801a      	strh	r2, [r3, #0]
 800546e:	e047      	b.n	8005500 <HAL_PCD_EP_DB_Transmit+0x392>
 8005470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005472:	2b3e      	cmp	r3, #62	; 0x3e
 8005474:	d811      	bhi.n	800549a <HAL_PCD_EP_DB_Transmit+0x32c>
 8005476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	64bb      	str	r3, [r7, #72]	; 0x48
 800547c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_PCD_EP_DB_Transmit+0x31e>
 8005486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005488:	3301      	adds	r3, #1
 800548a:	64bb      	str	r3, [r7, #72]	; 0x48
 800548c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548e:	b29b      	uxth	r3, r3
 8005490:	029b      	lsls	r3, r3, #10
 8005492:	b29a      	uxth	r2, r3
 8005494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005496:	801a      	strh	r2, [r3, #0]
 8005498:	e032      	b.n	8005500 <HAL_PCD_EP_DB_Transmit+0x392>
 800549a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d102      	bne.n	80054b0 <HAL_PCD_EP_DB_Transmit+0x342>
 80054aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ac:	3b01      	subs	r3, #1
 80054ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	029b      	lsls	r3, r3, #10
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	e01b      	b.n	8005500 <HAL_PCD_EP_DB_Transmit+0x392>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d117      	bne.n	8005500 <HAL_PCD_EP_DB_Transmit+0x392>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	643b      	str	r3, [r7, #64]	; 0x40
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054de:	b29b      	uxth	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e4:	4413      	add	r3, r2
 80054e6:	643b      	str	r3, [r7, #64]	; 0x40
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	011a      	lsls	r2, r3, #4
 80054ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f0:	4413      	add	r3, r2
 80054f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6959      	ldr	r1, [r3, #20]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	891a      	ldrh	r2, [r3, #8]
 800550c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550e:	b29b      	uxth	r3, r3
 8005510:	f004 fccc 	bl	8009eac <USB_WritePMA>
 8005514:	e1d0      	b.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	3306      	adds	r3, #6
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800554a:	429a      	cmp	r2, r3
 800554c:	d307      	bcc.n	800555e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	619a      	str	r2, [r3, #24]
 800555c:	e002      	b.n	8005564 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2200      	movs	r2, #0
 8005562:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f040 80c4 	bne.w	80056f6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d126      	bne.n	80055c4 <HAL_PCD_EP_DB_Transmit+0x456>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005584:	b29b      	uxth	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558a:	4413      	add	r3, r2
 800558c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	011a      	lsls	r2, r3, #4
 8005594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005596:	4413      	add	r3, r2
 8005598:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800559c:	66bb      	str	r3, [r7, #104]	; 0x68
 800559e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e01a      	b.n	80055fa <HAL_PCD_EP_DB_Transmit+0x48c>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d116      	bne.n	80055fa <HAL_PCD_EP_DB_Transmit+0x48c>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	677b      	str	r3, [r7, #116]	; 0x74
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055da:	b29b      	uxth	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e0:	4413      	add	r3, r2
 80055e2:	677b      	str	r3, [r7, #116]	; 0x74
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	011a      	lsls	r2, r3, #4
 80055ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ec:	4413      	add	r3, r2
 80055ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055f2:	673b      	str	r3, [r7, #112]	; 0x70
 80055f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f6:	2200      	movs	r2, #0
 80055f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d12f      	bne.n	8005668 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005618:	b29b      	uxth	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005620:	4413      	add	r3, r2
 8005622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	011a      	lsls	r2, r3, #4
 800562c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005630:	4413      	add	r3, r2
 8005632:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800563a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005646:	b29a      	uxth	r2, r3
 8005648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800564c:	801a      	strh	r2, [r3, #0]
 800564e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565e:	b29a      	uxth	r2, r3
 8005660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	e017      	b.n	8005698 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d113      	bne.n	8005698 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800567e:	4413      	add	r3, r2
 8005680:	67bb      	str	r3, [r7, #120]	; 0x78
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	011a      	lsls	r2, r3, #4
 8005688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800568a:	4413      	add	r3, r2
 800568c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005690:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005692:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005694:	2200      	movs	r2, #0
 8005696:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	4619      	mov	r1, r3
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f006 fa53 	bl	800bb4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f040 8104 	bne.w	80058b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	441a      	add	r2, r3
 80056dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80056e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]
 80056f4:	e0e0      	b.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d121      	bne.n	8005744 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	441a      	add	r2, r3
 800572c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800573c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800574a:	2b01      	cmp	r3, #1
 800574c:	f040 80b4 	bne.w	80058b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005758:	441a      	add	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005766:	441a      	add	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6a1a      	ldr	r2, [r3, #32]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	429a      	cmp	r2, r3
 8005776:	d309      	bcc.n	800578c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6a1a      	ldr	r2, [r3, #32]
 8005782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005784:	1ad2      	subs	r2, r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	621a      	str	r2, [r3, #32]
 800578a:	e015      	b.n	80057b8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d107      	bne.n	80057a4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005794:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005798:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057a2:	e009      	b.n	80057b8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2200      	movs	r2, #0
 80057ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	667b      	str	r3, [r7, #100]	; 0x64
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d155      	bne.n	8005872 <HAL_PCD_EP_DB_Transmit+0x704>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057da:	4413      	add	r3, r2
 80057dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	011a      	lsls	r2, r3, #4
 80057e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e6:	4413      	add	r3, r2
 80057e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80057ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d112      	bne.n	800581a <HAL_PCD_EP_DB_Transmit+0x6ac>
 80057f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005812:	b29a      	uxth	r2, r3
 8005814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	e044      	b.n	80058a4 <HAL_PCD_EP_DB_Transmit+0x736>
 800581a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581c:	2b3e      	cmp	r3, #62	; 0x3e
 800581e:	d811      	bhi.n	8005844 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	657b      	str	r3, [r7, #84]	; 0x54
 8005826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005832:	3301      	adds	r3, #1
 8005834:	657b      	str	r3, [r7, #84]	; 0x54
 8005836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005838:	b29b      	uxth	r3, r3
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	b29a      	uxth	r2, r3
 800583e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005840:	801a      	strh	r2, [r3, #0]
 8005842:	e02f      	b.n	80058a4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	657b      	str	r3, [r7, #84]	; 0x54
 800584a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005856:	3b01      	subs	r3, #1
 8005858:	657b      	str	r3, [r7, #84]	; 0x54
 800585a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800585c:	b29b      	uxth	r3, r3
 800585e:	029b      	lsls	r3, r3, #10
 8005860:	b29b      	uxth	r3, r3
 8005862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586a:	b29a      	uxth	r2, r3
 800586c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	e018      	b.n	80058a4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d114      	bne.n	80058a4 <HAL_PCD_EP_DB_Transmit+0x736>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005882:	b29b      	uxth	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005888:	4413      	add	r3, r2
 800588a:	667b      	str	r3, [r7, #100]	; 0x64
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	011a      	lsls	r2, r3, #4
 8005892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005894:	4413      	add	r3, r2
 8005896:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800589a:	663b      	str	r3, [r7, #96]	; 0x60
 800589c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589e:	b29a      	uxth	r2, r3
 80058a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	6959      	ldr	r1, [r3, #20]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	895a      	ldrh	r2, [r3, #10]
 80058b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	f004 fafa 	bl	8009eac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d2:	823b      	strh	r3, [r7, #16]
 80058d4:	8a3b      	ldrh	r3, [r7, #16]
 80058d6:	f083 0310 	eor.w	r3, r3, #16
 80058da:	823b      	strh	r3, [r7, #16]
 80058dc:	8a3b      	ldrh	r3, [r7, #16]
 80058de:	f083 0320 	eor.w	r3, r3, #32
 80058e2:	823b      	strh	r3, [r7, #16]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	441a      	add	r2, r3
 80058f2:	8a3b      	ldrh	r3, [r7, #16]
 80058f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005904:	b29b      	uxth	r3, r3
 8005906:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3788      	adds	r7, #136	; 0x88
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005912:	b480      	push	{r7}
 8005914:	b087      	sub	sp, #28
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	817b      	strh	r3, [r7, #10]
 8005920:	4613      	mov	r3, r2
 8005922:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005924:	897b      	ldrh	r3, [r7, #10]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00b      	beq.n	8005948 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005930:	897b      	ldrh	r3, [r7, #10]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e009      	b.n	800595c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005948:	897a      	ldrh	r2, [r7, #10]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4413      	add	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800595c:	893b      	ldrh	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d107      	bne.n	8005972 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2200      	movs	r2, #0
 8005966:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	b29a      	uxth	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	80da      	strh	r2, [r3, #6]
 8005970:	e00b      	b.n	800598a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2201      	movs	r2, #1
 8005976:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	b29a      	uxth	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	0c1b      	lsrs	r3, r3, #16
 8005984:	b29a      	uxth	r2, r3
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr
	...

08005998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e272      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 8087 	beq.w	8005ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059b8:	4b92      	ldr	r3, [pc, #584]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 030c 	and.w	r3, r3, #12
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d00c      	beq.n	80059de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80059c4:	4b8f      	ldr	r3, [pc, #572]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 030c 	and.w	r3, r3, #12
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d112      	bne.n	80059f6 <HAL_RCC_OscConfig+0x5e>
 80059d0:	4b8c      	ldr	r3, [pc, #560]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d10b      	bne.n	80059f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059de:	4b89      	ldr	r3, [pc, #548]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d06c      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x12c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d168      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e24c      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fe:	d106      	bne.n	8005a0e <HAL_RCC_OscConfig+0x76>
 8005a00:	4b80      	ldr	r3, [pc, #512]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a7f      	ldr	r2, [pc, #508]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	e02e      	b.n	8005a6c <HAL_RCC_OscConfig+0xd4>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10c      	bne.n	8005a30 <HAL_RCC_OscConfig+0x98>
 8005a16:	4b7b      	ldr	r3, [pc, #492]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a7a      	ldr	r2, [pc, #488]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	4b78      	ldr	r3, [pc, #480]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a77      	ldr	r2, [pc, #476]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	e01d      	b.n	8005a6c <HAL_RCC_OscConfig+0xd4>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a38:	d10c      	bne.n	8005a54 <HAL_RCC_OscConfig+0xbc>
 8005a3a:	4b72      	ldr	r3, [pc, #456]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a71      	ldr	r2, [pc, #452]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	4b6f      	ldr	r3, [pc, #444]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a6e      	ldr	r2, [pc, #440]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	e00b      	b.n	8005a6c <HAL_RCC_OscConfig+0xd4>
 8005a54:	4b6b      	ldr	r3, [pc, #428]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a6a      	ldr	r2, [pc, #424]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	4b68      	ldr	r3, [pc, #416]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a67      	ldr	r2, [pc, #412]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d013      	beq.n	8005a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a74:	f7fd f8ea 	bl	8002c4c <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a7c:	f7fd f8e6 	bl	8002c4c <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b64      	cmp	r3, #100	; 0x64
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e200      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8e:	4b5d      	ldr	r3, [pc, #372]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0xe4>
 8005a9a:	e014      	b.n	8005ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9c:	f7fd f8d6 	bl	8002c4c <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aa4:	f7fd f8d2 	bl	8002c4c <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b64      	cmp	r3, #100	; 0x64
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e1ec      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ab6:	4b53      	ldr	r3, [pc, #332]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f0      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x10c>
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d063      	beq.n	8005b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ad2:	4b4c      	ldr	r3, [pc, #304]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00b      	beq.n	8005af6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ade:	4b49      	ldr	r3, [pc, #292]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d11c      	bne.n	8005b24 <HAL_RCC_OscConfig+0x18c>
 8005aea:	4b46      	ldr	r3, [pc, #280]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d116      	bne.n	8005b24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005af6:	4b43      	ldr	r3, [pc, #268]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_RCC_OscConfig+0x176>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d001      	beq.n	8005b0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e1c0      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4939      	ldr	r1, [pc, #228]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b22:	e03a      	b.n	8005b9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d020      	beq.n	8005b6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b32:	f7fd f88b 	bl	8002c4c <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b3a:	f7fd f887 	bl	8002c4c <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e1a1      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4c:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0f0      	beq.n	8005b3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b58:	4b2a      	ldr	r3, [pc, #168]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	4927      	ldr	r1, [pc, #156]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	600b      	str	r3, [r1, #0]
 8005b6c:	e015      	b.n	8005b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b6e:	4b26      	ldr	r3, [pc, #152]	; (8005c08 <HAL_RCC_OscConfig+0x270>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b74:	f7fd f86a 	bl	8002c4c <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b7c:	f7fd f866 	bl	8002c4c <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e180      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b8e:	4b1d      	ldr	r3, [pc, #116]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d03a      	beq.n	8005c1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d019      	beq.n	8005be2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <HAL_RCC_OscConfig+0x274>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb4:	f7fd f84a 	bl	8002c4c <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bbc:	f7fd f846 	bl	8002c4c <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e160      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bce:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <HAL_RCC_OscConfig+0x26c>)
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f0      	beq.n	8005bbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005bda:	2001      	movs	r0, #1
 8005bdc:	f000 fac4 	bl	8006168 <RCC_Delay>
 8005be0:	e01c      	b.n	8005c1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <HAL_RCC_OscConfig+0x274>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005be8:	f7fd f830 	bl	8002c4c <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bee:	e00f      	b.n	8005c10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bf0:	f7fd f82c 	bl	8002c4c <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d908      	bls.n	8005c10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e146      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
 8005c02:	bf00      	nop
 8005c04:	40021000 	.word	0x40021000
 8005c08:	42420000 	.word	0x42420000
 8005c0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c10:	4b92      	ldr	r3, [pc, #584]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e9      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80a6 	beq.w	8005d76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c2e:	4b8b      	ldr	r3, [pc, #556]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10d      	bne.n	8005c56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3a:	4b88      	ldr	r3, [pc, #544]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	4a87      	ldr	r2, [pc, #540]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c44:	61d3      	str	r3, [r2, #28]
 8005c46:	4b85      	ldr	r3, [pc, #532]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c56:	4b82      	ldr	r3, [pc, #520]	; (8005e60 <HAL_RCC_OscConfig+0x4c8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d118      	bne.n	8005c94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c62:	4b7f      	ldr	r3, [pc, #508]	; (8005e60 <HAL_RCC_OscConfig+0x4c8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a7e      	ldr	r2, [pc, #504]	; (8005e60 <HAL_RCC_OscConfig+0x4c8>)
 8005c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c6e:	f7fc ffed 	bl	8002c4c <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c76:	f7fc ffe9 	bl	8002c4c <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b64      	cmp	r3, #100	; 0x64
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e103      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c88:	4b75      	ldr	r3, [pc, #468]	; (8005e60 <HAL_RCC_OscConfig+0x4c8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0f0      	beq.n	8005c76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d106      	bne.n	8005caa <HAL_RCC_OscConfig+0x312>
 8005c9c:	4b6f      	ldr	r3, [pc, #444]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	4a6e      	ldr	r2, [pc, #440]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	6213      	str	r3, [r2, #32]
 8005ca8:	e02d      	b.n	8005d06 <HAL_RCC_OscConfig+0x36e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RCC_OscConfig+0x334>
 8005cb2:	4b6a      	ldr	r3, [pc, #424]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	4a69      	ldr	r2, [pc, #420]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	6213      	str	r3, [r2, #32]
 8005cbe:	4b67      	ldr	r3, [pc, #412]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	4a66      	ldr	r2, [pc, #408]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005cc4:	f023 0304 	bic.w	r3, r3, #4
 8005cc8:	6213      	str	r3, [r2, #32]
 8005cca:	e01c      	b.n	8005d06 <HAL_RCC_OscConfig+0x36e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	2b05      	cmp	r3, #5
 8005cd2:	d10c      	bne.n	8005cee <HAL_RCC_OscConfig+0x356>
 8005cd4:	4b61      	ldr	r3, [pc, #388]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	4a60      	ldr	r2, [pc, #384]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005cda:	f043 0304 	orr.w	r3, r3, #4
 8005cde:	6213      	str	r3, [r2, #32]
 8005ce0:	4b5e      	ldr	r3, [pc, #376]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	4a5d      	ldr	r2, [pc, #372]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6213      	str	r3, [r2, #32]
 8005cec:	e00b      	b.n	8005d06 <HAL_RCC_OscConfig+0x36e>
 8005cee:	4b5b      	ldr	r3, [pc, #364]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	4a5a      	ldr	r2, [pc, #360]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	6213      	str	r3, [r2, #32]
 8005cfa:	4b58      	ldr	r3, [pc, #352]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	4a57      	ldr	r2, [pc, #348]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005d00:	f023 0304 	bic.w	r3, r3, #4
 8005d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d015      	beq.n	8005d3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d0e:	f7fc ff9d 	bl	8002c4c <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d14:	e00a      	b.n	8005d2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d16:	f7fc ff99 	bl	8002c4c <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e0b1      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2c:	4b4b      	ldr	r3, [pc, #300]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0ee      	beq.n	8005d16 <HAL_RCC_OscConfig+0x37e>
 8005d38:	e014      	b.n	8005d64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d3a:	f7fc ff87 	bl	8002c4c <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d40:	e00a      	b.n	8005d58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d42:	f7fc ff83 	bl	8002c4c <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e09b      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d58:	4b40      	ldr	r3, [pc, #256]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ee      	bne.n	8005d42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d105      	bne.n	8005d76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d6a:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	4a3b      	ldr	r2, [pc, #236]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8087 	beq.w	8005e8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d80:	4b36      	ldr	r3, [pc, #216]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f003 030c 	and.w	r3, r3, #12
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d061      	beq.n	8005e50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d146      	bne.n	8005e22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d94:	4b33      	ldr	r3, [pc, #204]	; (8005e64 <HAL_RCC_OscConfig+0x4cc>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9a:	f7fc ff57 	bl	8002c4c <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da2:	f7fc ff53 	bl	8002c4c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e06d      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005db4:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1f0      	bne.n	8005da2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc8:	d108      	bne.n	8005ddc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005dca:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	4921      	ldr	r1, [pc, #132]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ddc:	4b1f      	ldr	r3, [pc, #124]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a19      	ldr	r1, [r3, #32]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	430b      	orrs	r3, r1
 8005dee:	491b      	ldr	r1, [pc, #108]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <HAL_RCC_OscConfig+0x4cc>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfa:	f7fc ff27 	bl	8002c4c <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e02:	f7fc ff23 	bl	8002c4c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e03d      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e14:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x46a>
 8005e20:	e035      	b.n	8005e8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e22:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <HAL_RCC_OscConfig+0x4cc>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e28:	f7fc ff10 	bl	8002c4c <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e30:	f7fc ff0c 	bl	8002c4c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e026      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <HAL_RCC_OscConfig+0x4c4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <HAL_RCC_OscConfig+0x498>
 8005e4e:	e01e      	b.n	8005e8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d107      	bne.n	8005e68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e019      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	40007000 	.word	0x40007000
 8005e64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_OscConfig+0x500>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d106      	bne.n	8005e8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d001      	beq.n	8005e8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40021000 	.word	0x40021000

08005e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0d0      	b.n	8006052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb0:	4b6a      	ldr	r3, [pc, #424]	; (800605c <HAL_RCC_ClockConfig+0x1c0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d910      	bls.n	8005ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ebe:	4b67      	ldr	r3, [pc, #412]	; (800605c <HAL_RCC_ClockConfig+0x1c0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 0207 	bic.w	r2, r3, #7
 8005ec6:	4965      	ldr	r1, [pc, #404]	; (800605c <HAL_RCC_ClockConfig+0x1c0>)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ece:	4b63      	ldr	r3, [pc, #396]	; (800605c <HAL_RCC_ClockConfig+0x1c0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d001      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0b8      	b.n	8006052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d020      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ef8:	4b59      	ldr	r3, [pc, #356]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4a58      	ldr	r2, [pc, #352]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f10:	4b53      	ldr	r3, [pc, #332]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4a52      	ldr	r2, [pc, #328]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f1c:	4b50      	ldr	r3, [pc, #320]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	494d      	ldr	r1, [pc, #308]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d040      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d107      	bne.n	8005f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f42:	4b47      	ldr	r3, [pc, #284]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d115      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e07f      	b.n	8006052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d107      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f5a:	4b41      	ldr	r3, [pc, #260]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e073      	b.n	8006052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f6a:	4b3d      	ldr	r3, [pc, #244]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e06b      	b.n	8006052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f7a:	4b39      	ldr	r3, [pc, #228]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f023 0203 	bic.w	r2, r3, #3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	4936      	ldr	r1, [pc, #216]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f8c:	f7fc fe5e 	bl	8002c4c <HAL_GetTick>
 8005f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f92:	e00a      	b.n	8005faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f94:	f7fc fe5a 	bl	8002c4c <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e053      	b.n	8006052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005faa:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f003 020c 	and.w	r2, r3, #12
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d1eb      	bne.n	8005f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fbc:	4b27      	ldr	r3, [pc, #156]	; (800605c <HAL_RCC_ClockConfig+0x1c0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d210      	bcs.n	8005fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fca:	4b24      	ldr	r3, [pc, #144]	; (800605c <HAL_RCC_ClockConfig+0x1c0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f023 0207 	bic.w	r2, r3, #7
 8005fd2:	4922      	ldr	r1, [pc, #136]	; (800605c <HAL_RCC_ClockConfig+0x1c0>)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fda:	4b20      	ldr	r3, [pc, #128]	; (800605c <HAL_RCC_ClockConfig+0x1c0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d001      	beq.n	8005fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e032      	b.n	8006052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff8:	4b19      	ldr	r3, [pc, #100]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4916      	ldr	r1, [pc, #88]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8006006:	4313      	orrs	r3, r2
 8006008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006016:	4b12      	ldr	r3, [pc, #72]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	490e      	ldr	r1, [pc, #56]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8006026:	4313      	orrs	r3, r2
 8006028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800602a:	f000 f821 	bl	8006070 <HAL_RCC_GetSysClockFreq>
 800602e:	4602      	mov	r2, r0
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <HAL_RCC_ClockConfig+0x1c4>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	490a      	ldr	r1, [pc, #40]	; (8006064 <HAL_RCC_ClockConfig+0x1c8>)
 800603c:	5ccb      	ldrb	r3, [r1, r3]
 800603e:	fa22 f303 	lsr.w	r3, r2, r3
 8006042:	4a09      	ldr	r2, [pc, #36]	; (8006068 <HAL_RCC_ClockConfig+0x1cc>)
 8006044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <HAL_RCC_ClockConfig+0x1d0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f7fc fdbc 	bl	8002bc8 <HAL_InitTick>

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40022000 	.word	0x40022000
 8006060:	40021000 	.word	0x40021000
 8006064:	0800c0e8 	.word	0x0800c0e8
 8006068:	20000028 	.word	0x20000028
 800606c:	2000002c 	.word	0x2000002c

08006070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006070:	b490      	push	{r4, r7}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006076:	4b29      	ldr	r3, [pc, #164]	; (800611c <HAL_RCC_GetSysClockFreq+0xac>)
 8006078:	1d3c      	adds	r4, r7, #4
 800607a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800607c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006080:	f240 2301 	movw	r3, #513	; 0x201
 8006084:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	2300      	movs	r3, #0
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	2300      	movs	r3, #0
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800609a:	4b21      	ldr	r3, [pc, #132]	; (8006120 <HAL_RCC_GetSysClockFreq+0xb0>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d002      	beq.n	80060b0 <HAL_RCC_GetSysClockFreq+0x40>
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d003      	beq.n	80060b6 <HAL_RCC_GetSysClockFreq+0x46>
 80060ae:	e02b      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060b0:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <HAL_RCC_GetSysClockFreq+0xb4>)
 80060b2:	623b      	str	r3, [r7, #32]
      break;
 80060b4:	e02b      	b.n	800610e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	0c9b      	lsrs	r3, r3, #18
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	3328      	adds	r3, #40	; 0x28
 80060c0:	443b      	add	r3, r7
 80060c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80060c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d012      	beq.n	80060f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060d2:	4b13      	ldr	r3, [pc, #76]	; (8006120 <HAL_RCC_GetSysClockFreq+0xb0>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	0c5b      	lsrs	r3, r3, #17
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	3328      	adds	r3, #40	; 0x28
 80060de:	443b      	add	r3, r7
 80060e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80060e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4a0e      	ldr	r2, [pc, #56]	; (8006124 <HAL_RCC_GetSysClockFreq+0xb4>)
 80060ea:	fb03 f202 	mul.w	r2, r3, r2
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
 80060f6:	e004      	b.n	8006102 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4a0b      	ldr	r2, [pc, #44]	; (8006128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060fc:	fb02 f303 	mul.w	r3, r2, r3
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	623b      	str	r3, [r7, #32]
      break;
 8006106:	e002      	b.n	800610e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006108:	4b06      	ldr	r3, [pc, #24]	; (8006124 <HAL_RCC_GetSysClockFreq+0xb4>)
 800610a:	623b      	str	r3, [r7, #32]
      break;
 800610c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800610e:	6a3b      	ldr	r3, [r7, #32]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3728      	adds	r7, #40	; 0x28
 8006114:	46bd      	mov	sp, r7
 8006116:	bc90      	pop	{r4, r7}
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	0800c084 	.word	0x0800c084
 8006120:	40021000 	.word	0x40021000
 8006124:	007a1200 	.word	0x007a1200
 8006128:	003d0900 	.word	0x003d0900

0800612c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006130:	4b02      	ldr	r3, [pc, #8]	; (800613c <HAL_RCC_GetHCLKFreq+0x10>)
 8006132:	681b      	ldr	r3, [r3, #0]
}
 8006134:	4618      	mov	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr
 800613c:	20000028 	.word	0x20000028

08006140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006144:	f7ff fff2 	bl	800612c <HAL_RCC_GetHCLKFreq>
 8006148:	4602      	mov	r2, r0
 800614a:	4b05      	ldr	r3, [pc, #20]	; (8006160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	0adb      	lsrs	r3, r3, #11
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	4903      	ldr	r1, [pc, #12]	; (8006164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006156:	5ccb      	ldrb	r3, [r1, r3]
 8006158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800615c:	4618      	mov	r0, r3
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40021000 	.word	0x40021000
 8006164:	0800c0f8 	.word	0x0800c0f8

08006168 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <RCC_Delay+0x34>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <RCC_Delay+0x38>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	0a5b      	lsrs	r3, r3, #9
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006184:	bf00      	nop
  }
  while (Delay --);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1e5a      	subs	r2, r3, #1
 800618a:	60fa      	str	r2, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1f9      	bne.n	8006184 <RCC_Delay+0x1c>
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr
 800619c:	20000028 	.word	0x20000028
 80061a0:	10624dd3 	.word	0x10624dd3

080061a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d07d      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80061c0:	2300      	movs	r3, #0
 80061c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061c4:	4b4f      	ldr	r3, [pc, #316]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10d      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061d0:	4b4c      	ldr	r3, [pc, #304]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	4a4b      	ldr	r2, [pc, #300]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061da:	61d3      	str	r3, [r2, #28]
 80061dc:	4b49      	ldr	r3, [pc, #292]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061e8:	2301      	movs	r3, #1
 80061ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ec:	4b46      	ldr	r3, [pc, #280]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d118      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061f8:	4b43      	ldr	r3, [pc, #268]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a42      	ldr	r2, [pc, #264]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006202:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006204:	f7fc fd22 	bl	8002c4c <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620a:	e008      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800620c:	f7fc fd1e 	bl	8002c4c <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b64      	cmp	r3, #100	; 0x64
 8006218:	d901      	bls.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e06d      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800621e:	4b3a      	ldr	r3, [pc, #232]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800622a:	4b36      	ldr	r3, [pc, #216]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d02e      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	429a      	cmp	r2, r3
 8006246:	d027      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006248:	4b2e      	ldr	r3, [pc, #184]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006250:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006252:	4b2e      	ldr	r3, [pc, #184]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006254:	2201      	movs	r2, #1
 8006256:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006258:	4b2c      	ldr	r3, [pc, #176]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800625e:	4a29      	ldr	r2, [pc, #164]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d014      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626e:	f7fc fced 	bl	8002c4c <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006274:	e00a      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7fc fce9 	bl	8002c4c <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f241 3288 	movw	r2, #5000	; 0x1388
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e036      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628c:	4b1d      	ldr	r3, [pc, #116]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0ee      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006298:	4b1a      	ldr	r3, [pc, #104]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	4917      	ldr	r1, [pc, #92]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d105      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b0:	4b14      	ldr	r3, [pc, #80]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	4a13      	ldr	r2, [pc, #76]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062c8:	4b0e      	ldr	r3, [pc, #56]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	490b      	ldr	r1, [pc, #44]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d008      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062e6:	4b07      	ldr	r3, [pc, #28]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	4904      	ldr	r1, [pc, #16]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40021000 	.word	0x40021000
 8006308:	40007000 	.word	0x40007000
 800630c:	42420440 	.word	0x42420440

08006310 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006310:	b590      	push	{r4, r7, lr}
 8006312:	b08d      	sub	sp, #52	; 0x34
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006318:	4b58      	ldr	r3, [pc, #352]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800631a:	f107 040c 	add.w	r4, r7, #12
 800631e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006324:	f240 2301 	movw	r3, #513	; 0x201
 8006328:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
 800632e:	2300      	movs	r3, #0
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006332:	2300      	movs	r3, #0
 8006334:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	2300      	movs	r3, #0
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b10      	cmp	r3, #16
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b10      	cmp	r3, #16
 8006348:	f200 808e 	bhi.w	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d049      	beq.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d079      	beq.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006358:	e086      	b.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800635a:	4b49      	ldr	r3, [pc, #292]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006360:	4b47      	ldr	r3, [pc, #284]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d07f      	beq.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	0c9b      	lsrs	r3, r3, #18
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	3330      	adds	r3, #48	; 0x30
 8006376:	443b      	add	r3, r7
 8006378:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800637c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d017      	beq.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006388:	4b3d      	ldr	r3, [pc, #244]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	0c5b      	lsrs	r3, r3, #17
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	3330      	adds	r3, #48	; 0x30
 8006394:	443b      	add	r3, r7
 8006396:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00d      	beq.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80063a6:	4a37      	ldr	r2, [pc, #220]	; (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	fb02 f303 	mul.w	r3, r2, r3
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063b6:	e004      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	4a33      	ldr	r2, [pc, #204]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80063bc:	fb02 f303 	mul.w	r3, r2, r3
 80063c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80063c2:	4b2f      	ldr	r3, [pc, #188]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ce:	d102      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80063d4:	e04a      	b.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	4a2c      	ldr	r2, [pc, #176]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80063dc:	fba2 2303 	umull	r2, r3, r2, r3
 80063e0:	085b      	lsrs	r3, r3, #1
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80063e4:	e042      	b.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80063e6:	4b26      	ldr	r3, [pc, #152]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f6:	d108      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28
 8006408:	e01f      	b.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006414:	d109      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006416:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006422:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
 8006428:	e00f      	b.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006434:	d11c      	bne.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006436:	4b12      	ldr	r3, [pc, #72]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d016      	beq.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006442:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006446:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006448:	e012      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800644a:	e011      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800644c:	f7ff fe78 	bl	8006140 <HAL_RCC_GetPCLK2Freq>
 8006450:	4602      	mov	r2, r0
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	0b9b      	lsrs	r3, r3, #14
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	3301      	adds	r3, #1
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	fbb2 f3f3 	udiv	r3, r2, r3
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006466:	e004      	b.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006468:	bf00      	nop
 800646a:	e002      	b.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800646c:	bf00      	nop
 800646e:	e000      	b.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006470:	bf00      	nop
    }
  }
  return (frequency);
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006474:	4618      	mov	r0, r3
 8006476:	3734      	adds	r7, #52	; 0x34
 8006478:	46bd      	mov	sp, r7
 800647a:	bd90      	pop	{r4, r7, pc}
 800647c:	0800c094 	.word	0x0800c094
 8006480:	40021000 	.word	0x40021000
 8006484:	007a1200 	.word	0x007a1200
 8006488:	003d0900 	.word	0x003d0900
 800648c:	aaaaaaab 	.word	0xaaaaaaab

08006490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e041      	b.n	8006526 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fc fa72 	bl	80029a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f000 fca0 	bl	8006e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b01      	cmp	r3, #1
 8006542:	d001      	beq.n	8006548 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e032      	b.n	80065ae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a18      	ldr	r2, [pc, #96]	; (80065b8 <HAL_TIM_Base_Start+0x88>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_TIM_Base_Start+0x48>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006562:	d009      	beq.n	8006578 <HAL_TIM_Base_Start+0x48>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a14      	ldr	r2, [pc, #80]	; (80065bc <HAL_TIM_Base_Start+0x8c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_TIM_Base_Start+0x48>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a13      	ldr	r2, [pc, #76]	; (80065c0 <HAL_TIM_Base_Start+0x90>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d111      	bne.n	800659c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b06      	cmp	r3, #6
 8006588:	d010      	beq.n	80065ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0201 	orr.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659a:	e007      	b.n	80065ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800

080065c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d001      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e03a      	b.n	8006652 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a18      	ldr	r2, [pc, #96]	; (800665c <HAL_TIM_Base_Start_IT+0x98>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00e      	beq.n	800661c <HAL_TIM_Base_Start_IT+0x58>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006606:	d009      	beq.n	800661c <HAL_TIM_Base_Start_IT+0x58>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a14      	ldr	r2, [pc, #80]	; (8006660 <HAL_TIM_Base_Start_IT+0x9c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d004      	beq.n	800661c <HAL_TIM_Base_Start_IT+0x58>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a13      	ldr	r2, [pc, #76]	; (8006664 <HAL_TIM_Base_Start_IT+0xa0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d111      	bne.n	8006640 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b06      	cmp	r3, #6
 800662c:	d010      	beq.n	8006650 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663e:	e007      	b.n	8006650 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	bc80      	pop	{r7}
 800665a:	4770      	bx	lr
 800665c:	40012c00 	.word	0x40012c00
 8006660:	40000400 	.word	0x40000400
 8006664:	40000800 	.word	0x40000800

08006668 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0201 	bic.w	r2, r2, #1
 800667e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a1a      	ldr	r2, [r3, #32]
 8006686:	f241 1311 	movw	r3, #4369	; 0x1111
 800668a:	4013      	ands	r3, r2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10f      	bne.n	80066b0 <HAL_TIM_Base_Stop_IT+0x48>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6a1a      	ldr	r2, [r3, #32]
 8006696:	f240 4344 	movw	r3, #1092	; 0x444
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d107      	bne.n	80066b0 <HAL_TIM_Base_Stop_IT+0x48>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e041      	b.n	800675a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f839 	bl	8006762 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3304      	adds	r3, #4
 8006700:	4619      	mov	r1, r3
 8006702:	4610      	mov	r0, r2
 8006704:	f000 fb86 	bl	8006e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d109      	bne.n	8006798 <HAL_TIM_PWM_Start+0x24>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	bf14      	ite	ne
 8006790:	2301      	movne	r3, #1
 8006792:	2300      	moveq	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	e022      	b.n	80067de <HAL_TIM_PWM_Start+0x6a>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b04      	cmp	r3, #4
 800679c:	d109      	bne.n	80067b2 <HAL_TIM_PWM_Start+0x3e>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	bf14      	ite	ne
 80067aa:	2301      	movne	r3, #1
 80067ac:	2300      	moveq	r3, #0
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	e015      	b.n	80067de <HAL_TIM_PWM_Start+0x6a>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d109      	bne.n	80067cc <HAL_TIM_PWM_Start+0x58>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	bf14      	ite	ne
 80067c4:	2301      	movne	r3, #1
 80067c6:	2300      	moveq	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	e008      	b.n	80067de <HAL_TIM_PWM_Start+0x6a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	bf14      	ite	ne
 80067d8:	2301      	movne	r3, #1
 80067da:	2300      	moveq	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e05e      	b.n	80068a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <HAL_TIM_PWM_Start+0x82>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067f4:	e013      	b.n	800681e <HAL_TIM_PWM_Start+0xaa>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d104      	bne.n	8006806 <HAL_TIM_PWM_Start+0x92>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006804:	e00b      	b.n	800681e <HAL_TIM_PWM_Start+0xaa>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b08      	cmp	r3, #8
 800680a:	d104      	bne.n	8006816 <HAL_TIM_PWM_Start+0xa2>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006814:	e003      	b.n	800681e <HAL_TIM_PWM_Start+0xaa>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2201      	movs	r2, #1
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fd74 	bl	8007314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1e      	ldr	r2, [pc, #120]	; (80068ac <HAL_TIM_PWM_Start+0x138>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d107      	bne.n	8006846 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a18      	ldr	r2, [pc, #96]	; (80068ac <HAL_TIM_PWM_Start+0x138>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00e      	beq.n	800686e <HAL_TIM_PWM_Start+0xfa>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006858:	d009      	beq.n	800686e <HAL_TIM_PWM_Start+0xfa>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a14      	ldr	r2, [pc, #80]	; (80068b0 <HAL_TIM_PWM_Start+0x13c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d004      	beq.n	800686e <HAL_TIM_PWM_Start+0xfa>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a12      	ldr	r2, [pc, #72]	; (80068b4 <HAL_TIM_PWM_Start+0x140>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d111      	bne.n	8006892 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b06      	cmp	r3, #6
 800687e:	d010      	beq.n	80068a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006890:	e007      	b.n	80068a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800

080068b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d122      	bne.n	8006914 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d11b      	bne.n	8006914 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0202 	mvn.w	r2, #2
 80068e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa6f 	bl	8006dde <HAL_TIM_IC_CaptureCallback>
 8006900:	e005      	b.n	800690e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa62 	bl	8006dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa71 	bl	8006df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b04      	cmp	r3, #4
 8006920:	d122      	bne.n	8006968 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b04      	cmp	r3, #4
 800692e:	d11b      	bne.n	8006968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0204 	mvn.w	r2, #4
 8006938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa45 	bl	8006dde <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa38 	bl	8006dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fa47 	bl	8006df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b08      	cmp	r3, #8
 8006974:	d122      	bne.n	80069bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b08      	cmp	r3, #8
 8006982:	d11b      	bne.n	80069bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0208 	mvn.w	r2, #8
 800698c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2204      	movs	r2, #4
 8006992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa1b 	bl	8006dde <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa0e 	bl	8006dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fa1d 	bl	8006df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b10      	cmp	r3, #16
 80069c8:	d122      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b10      	cmp	r3, #16
 80069d6:	d11b      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0210 	mvn.w	r2, #16
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2208      	movs	r2, #8
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9f1 	bl	8006dde <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f9e4 	bl	8006dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f9f3 	bl	8006df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d10e      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d107      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0201 	mvn.w	r2, #1
 8006a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fa f886 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a46:	2b80      	cmp	r3, #128	; 0x80
 8006a48:	d10e      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a54:	2b80      	cmp	r3, #128	; 0x80
 8006a56:	d107      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fce1 	bl	800742a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d10e      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d107      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f9b7 	bl	8006e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d10e      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d107      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0220 	mvn.w	r2, #32
 8006ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fcac 	bl	8007418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e0ac      	b.n	8006c3c <HAL_TIM_PWM_ConfigChannel+0x174>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b0c      	cmp	r3, #12
 8006aee:	f200 809f 	bhi.w	8006c30 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006af2:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b2d 	.word	0x08006b2d
 8006afc:	08006c31 	.word	0x08006c31
 8006b00:	08006c31 	.word	0x08006c31
 8006b04:	08006c31 	.word	0x08006c31
 8006b08:	08006b6d 	.word	0x08006b6d
 8006b0c:	08006c31 	.word	0x08006c31
 8006b10:	08006c31 	.word	0x08006c31
 8006b14:	08006c31 	.word	0x08006c31
 8006b18:	08006baf 	.word	0x08006baf
 8006b1c:	08006c31 	.word	0x08006c31
 8006b20:	08006c31 	.word	0x08006c31
 8006b24:	08006c31 	.word	0x08006c31
 8006b28:	08006bef 	.word	0x08006bef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 f9d0 	bl	8006ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0208 	orr.w	r2, r2, #8
 8006b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0204 	bic.w	r2, r2, #4
 8006b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6999      	ldr	r1, [r3, #24]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	691a      	ldr	r2, [r3, #16]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	619a      	str	r2, [r3, #24]
      break;
 8006b6a:	e062      	b.n	8006c32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fa16 	bl	8006fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6999      	ldr	r1, [r3, #24]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	021a      	lsls	r2, r3, #8
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	619a      	str	r2, [r3, #24]
      break;
 8006bac:	e041      	b.n	8006c32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fa5f 	bl	8007078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0208 	orr.w	r2, r2, #8
 8006bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0204 	bic.w	r2, r2, #4
 8006bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69d9      	ldr	r1, [r3, #28]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	61da      	str	r2, [r3, #28]
      break;
 8006bec:	e021      	b.n	8006c32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 faa9 	bl	800714c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69d9      	ldr	r1, [r3, #28]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	021a      	lsls	r2, r3, #8
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	61da      	str	r2, [r3, #28]
      break;
 8006c2e:	e000      	b.n	8006c32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006c30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_TIM_ConfigClockSource+0x18>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e0b3      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x180>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c94:	d03e      	beq.n	8006d14 <HAL_TIM_ConfigClockSource+0xd0>
 8006c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c9a:	f200 8087 	bhi.w	8006dac <HAL_TIM_ConfigClockSource+0x168>
 8006c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca2:	f000 8085 	beq.w	8006db0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006caa:	d87f      	bhi.n	8006dac <HAL_TIM_ConfigClockSource+0x168>
 8006cac:	2b70      	cmp	r3, #112	; 0x70
 8006cae:	d01a      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0xa2>
 8006cb0:	2b70      	cmp	r3, #112	; 0x70
 8006cb2:	d87b      	bhi.n	8006dac <HAL_TIM_ConfigClockSource+0x168>
 8006cb4:	2b60      	cmp	r3, #96	; 0x60
 8006cb6:	d050      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x116>
 8006cb8:	2b60      	cmp	r3, #96	; 0x60
 8006cba:	d877      	bhi.n	8006dac <HAL_TIM_ConfigClockSource+0x168>
 8006cbc:	2b50      	cmp	r3, #80	; 0x50
 8006cbe:	d03c      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0xf6>
 8006cc0:	2b50      	cmp	r3, #80	; 0x50
 8006cc2:	d873      	bhi.n	8006dac <HAL_TIM_ConfigClockSource+0x168>
 8006cc4:	2b40      	cmp	r3, #64	; 0x40
 8006cc6:	d058      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x136>
 8006cc8:	2b40      	cmp	r3, #64	; 0x40
 8006cca:	d86f      	bhi.n	8006dac <HAL_TIM_ConfigClockSource+0x168>
 8006ccc:	2b30      	cmp	r3, #48	; 0x30
 8006cce:	d064      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0x156>
 8006cd0:	2b30      	cmp	r3, #48	; 0x30
 8006cd2:	d86b      	bhi.n	8006dac <HAL_TIM_ConfigClockSource+0x168>
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d060      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0x156>
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d867      	bhi.n	8006dac <HAL_TIM_ConfigClockSource+0x168>
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d05c      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0x156>
 8006ce0:	2b10      	cmp	r3, #16
 8006ce2:	d05a      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ce4:	e062      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	6899      	ldr	r1, [r3, #8]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f000 faee 	bl	80072d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	609a      	str	r2, [r3, #8]
      break;
 8006d12:	e04e      	b.n	8006db2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	6899      	ldr	r1, [r3, #8]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f000 fad7 	bl	80072d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d36:	609a      	str	r2, [r3, #8]
      break;
 8006d38:	e03b      	b.n	8006db2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6859      	ldr	r1, [r3, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	461a      	mov	r2, r3
 8006d48:	f000 fa4e 	bl	80071e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2150      	movs	r1, #80	; 0x50
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 faa5 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006d58:	e02b      	b.n	8006db2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6859      	ldr	r1, [r3, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	461a      	mov	r2, r3
 8006d68:	f000 fa6c 	bl	8007244 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2160      	movs	r1, #96	; 0x60
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fa95 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006d78:	e01b      	b.n	8006db2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6859      	ldr	r1, [r3, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f000 fa2e 	bl	80071e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2140      	movs	r1, #64	; 0x40
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fa85 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006d98:	e00b      	b.n	8006db2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f000 fa7c 	bl	80072a2 <TIM_ITRx_SetConfig>
        break;
 8006daa:	e002      	b.n	8006db2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dac:	bf00      	nop
 8006dae:	e000      	b.n	8006db2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006db0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr

08006dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr

08006df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr

08006e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a29      	ldr	r2, [pc, #164]	; (8006ecc <TIM_Base_SetConfig+0xb8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00b      	beq.n	8006e44 <TIM_Base_SetConfig+0x30>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e32:	d007      	beq.n	8006e44 <TIM_Base_SetConfig+0x30>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a26      	ldr	r2, [pc, #152]	; (8006ed0 <TIM_Base_SetConfig+0xbc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <TIM_Base_SetConfig+0x30>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a25      	ldr	r2, [pc, #148]	; (8006ed4 <TIM_Base_SetConfig+0xc0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d108      	bne.n	8006e56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a1c      	ldr	r2, [pc, #112]	; (8006ecc <TIM_Base_SetConfig+0xb8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00b      	beq.n	8006e76 <TIM_Base_SetConfig+0x62>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e64:	d007      	beq.n	8006e76 <TIM_Base_SetConfig+0x62>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a19      	ldr	r2, [pc, #100]	; (8006ed0 <TIM_Base_SetConfig+0xbc>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d003      	beq.n	8006e76 <TIM_Base_SetConfig+0x62>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a18      	ldr	r2, [pc, #96]	; (8006ed4 <TIM_Base_SetConfig+0xc0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d108      	bne.n	8006e88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a07      	ldr	r2, [pc, #28]	; (8006ecc <TIM_Base_SetConfig+0xb8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d103      	bne.n	8006ebc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	691a      	ldr	r2, [r3, #16]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	615a      	str	r2, [r3, #20]
}
 8006ec2:	bf00      	nop
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr
 8006ecc:	40012c00 	.word	0x40012c00
 8006ed0:	40000400 	.word	0x40000400
 8006ed4:	40000800 	.word	0x40000800

08006ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0201 	bic.w	r2, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0303 	bic.w	r3, r3, #3
 8006f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f023 0302 	bic.w	r3, r3, #2
 8006f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a1c      	ldr	r2, [pc, #112]	; (8006fa0 <TIM_OC1_SetConfig+0xc8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d10c      	bne.n	8006f4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 0308 	bic.w	r3, r3, #8
 8006f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f023 0304 	bic.w	r3, r3, #4
 8006f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a13      	ldr	r2, [pc, #76]	; (8006fa0 <TIM_OC1_SetConfig+0xc8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d111      	bne.n	8006f7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	621a      	str	r2, [r3, #32]
}
 8006f94:	bf00      	nop
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40012c00 	.word	0x40012c00

08006fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	f023 0210 	bic.w	r2, r3, #16
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0320 	bic.w	r3, r3, #32
 8006fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <TIM_OC2_SetConfig+0xd0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d10d      	bne.n	8007020 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800700a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a14      	ldr	r2, [pc, #80]	; (8007074 <TIM_OC2_SetConfig+0xd0>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d113      	bne.n	8007050 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800702e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	40012c00 	.word	0x40012c00

08007078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0303 	bic.w	r3, r3, #3
 80070ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a1d      	ldr	r2, [pc, #116]	; (8007148 <TIM_OC3_SetConfig+0xd0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10d      	bne.n	80070f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a14      	ldr	r2, [pc, #80]	; (8007148 <TIM_OC3_SetConfig+0xd0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d113      	bne.n	8007122 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	621a      	str	r2, [r3, #32]
}
 800713c:	bf00      	nop
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40012c00 	.word	0x40012c00

0800714c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	031b      	lsls	r3, r3, #12
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a0f      	ldr	r2, [pc, #60]	; (80071e4 <TIM_OC4_SetConfig+0x98>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d109      	bne.n	80071c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	019b      	lsls	r3, r3, #6
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr
 80071e4:	40012c00 	.word	0x40012c00

080071e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f023 0201 	bic.w	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f023 030a 	bic.w	r3, r3, #10
 8007224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	bc80      	pop	{r7}
 8007242:	4770      	bx	lr

08007244 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	f023 0210 	bic.w	r2, r3, #16
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800726e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	031b      	lsls	r3, r3, #12
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	4313      	orrs	r3, r2
 8007278:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007280:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	621a      	str	r2, [r3, #32]
}
 8007298:	bf00      	nop
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr

080072a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b085      	sub	sp, #20
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	f043 0307 	orr.w	r3, r3, #7
 80072c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	609a      	str	r2, [r3, #8]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr

080072d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b087      	sub	sp, #28
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	607a      	str	r2, [r7, #4]
 80072e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	021a      	lsls	r2, r3, #8
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	609a      	str	r2, [r3, #8]
}
 800730a:	bf00      	nop
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr

08007314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	2201      	movs	r2, #1
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a1a      	ldr	r2, [r3, #32]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	43db      	mvns	r3, r3
 8007336:	401a      	ands	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a1a      	ldr	r2, [r3, #32]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	fa01 f303 	lsl.w	r3, r1, r3
 800734c:	431a      	orrs	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	621a      	str	r2, [r3, #32]
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007370:	2302      	movs	r3, #2
 8007372:	e046      	b.n	8007402 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a16      	ldr	r2, [pc, #88]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00e      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c0:	d009      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a12      	ldr	r2, [pc, #72]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a10      	ldr	r2, [pc, #64]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d10c      	bne.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr
 800740c:	40012c00 	.word	0x40012c00
 8007410:	40000400 	.word	0x40000400
 8007414:	40000800 	.word	0x40000800

08007418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	bc80      	pop	{r7}
 8007428:	4770      	bx	lr

0800742a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr

0800743c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800743c:	b084      	sub	sp, #16
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	f107 0014 	add.w	r0, r7, #20
 800744a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	bc80      	pop	{r7}
 8007458:	b004      	add	sp, #16
 800745a:	4770      	bx	lr

0800745c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800746c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007470:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	b29a      	uxth	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr

08007488 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007490:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007494:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	43db      	mvns	r3, r3
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	4013      	ands	r3, r2
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr

080074bc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr

080074d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074d4:	b084      	sub	sp, #16
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	f107 0014 	add.w	r0, r7, #20
 80074e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	b004      	add	sp, #16
 8007512:	4770      	bx	lr

08007514 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007514:	b480      	push	{r7}
 8007516:	b09b      	sub	sp, #108	; 0x6c
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	b29b      	uxth	r3, r3
 8007532:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	78db      	ldrb	r3, [r3, #3]
 8007542:	2b03      	cmp	r3, #3
 8007544:	d81f      	bhi.n	8007586 <USB_ActivateEndpoint+0x72>
 8007546:	a201      	add	r2, pc, #4	; (adr r2, 800754c <USB_ActivateEndpoint+0x38>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	0800755d 	.word	0x0800755d
 8007550:	08007579 	.word	0x08007579
 8007554:	0800758f 	.word	0x0800758f
 8007558:	0800756b 	.word	0x0800756b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800755c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007564:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007568:	e012      	b.n	8007590 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800756a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800756e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007572:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007576:	e00b      	b.n	8007590 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007578:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800757c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007580:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007584:	e004      	b.n	8007590 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800758c:	e000      	b.n	8007590 <USB_ActivateEndpoint+0x7c>
      break;
 800758e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	441a      	add	r2, r3
 800759a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800759e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	441a      	add	r2, r3
 80075e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80075e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	7b1b      	ldrb	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8149 	bne.w	8007894 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 8084 	beq.w	8007714 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007616:	b29b      	uxth	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	4413      	add	r3, r2
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	011a      	lsls	r2, r3, #4
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	88db      	ldrh	r3, [r3, #6]
 8007634:	085b      	lsrs	r3, r3, #1
 8007636:	b29b      	uxth	r3, r3
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	81fb      	strh	r3, [r7, #14]
 800764e:	89fb      	ldrh	r3, [r7, #14]
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01b      	beq.n	8007690 <USB_ActivateEndpoint+0x17c>
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766e:	81bb      	strh	r3, [r7, #12]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	441a      	add	r2, r3
 800767a:	89bb      	ldrh	r3, [r7, #12]
 800767c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007688:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800768c:	b29b      	uxth	r3, r3
 800768e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	78db      	ldrb	r3, [r3, #3]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d020      	beq.n	80076da <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ae:	813b      	strh	r3, [r7, #8]
 80076b0:	893b      	ldrh	r3, [r7, #8]
 80076b2:	f083 0320 	eor.w	r3, r3, #32
 80076b6:	813b      	strh	r3, [r7, #8]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	441a      	add	r2, r3
 80076c2:	893b      	ldrh	r3, [r7, #8]
 80076c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	8013      	strh	r3, [r2, #0]
 80076d8:	e27f      	b.n	8007bda <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f0:	817b      	strh	r3, [r7, #10]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	441a      	add	r2, r3
 80076fc:	897b      	ldrh	r3, [r7, #10]
 80076fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800770a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800770e:	b29b      	uxth	r3, r3
 8007710:	8013      	strh	r3, [r2, #0]
 8007712:	e262      	b.n	8007bda <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800771e:	b29b      	uxth	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	4413      	add	r3, r2
 8007726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	011a      	lsls	r2, r3, #4
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007730:	4413      	add	r3, r2
 8007732:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007736:	62bb      	str	r3, [r7, #40]	; 0x28
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	88db      	ldrh	r3, [r3, #6]
 800773c:	085b      	lsrs	r3, r3, #1
 800773e:	b29b      	uxth	r3, r3
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007752:	b29b      	uxth	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	4413      	add	r3, r2
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	011a      	lsls	r2, r3, #4
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	4413      	add	r3, r2
 8007766:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800776a:	623b      	str	r3, [r7, #32]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d112      	bne.n	800779a <USB_ActivateEndpoint+0x286>
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800777e:	b29a      	uxth	r2, r3
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	801a      	strh	r2, [r3, #0]
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800778e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007792:	b29a      	uxth	r2, r3
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	e02f      	b.n	80077fa <USB_ActivateEndpoint+0x2e6>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b3e      	cmp	r3, #62	; 0x3e
 80077a0:	d813      	bhi.n	80077ca <USB_ActivateEndpoint+0x2b6>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	663b      	str	r3, [r7, #96]	; 0x60
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <USB_ActivateEndpoint+0x2a8>
 80077b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077b8:	3301      	adds	r3, #1
 80077ba:	663b      	str	r3, [r7, #96]	; 0x60
 80077bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077be:	b29b      	uxth	r3, r3
 80077c0:	029b      	lsls	r3, r3, #10
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	e017      	b.n	80077fa <USB_ActivateEndpoint+0x2e6>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	095b      	lsrs	r3, r3, #5
 80077d0:	663b      	str	r3, [r7, #96]	; 0x60
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d102      	bne.n	80077e4 <USB_ActivateEndpoint+0x2d0>
 80077de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e0:	3b01      	subs	r3, #1
 80077e2:	663b      	str	r3, [r7, #96]	; 0x60
 80077e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	029b      	lsls	r3, r3, #10
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	83fb      	strh	r3, [r7, #30]
 8007808:	8bfb      	ldrh	r3, [r7, #30]
 800780a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01b      	beq.n	800784a <USB_ActivateEndpoint+0x336>
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007828:	83bb      	strh	r3, [r7, #28]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	441a      	add	r2, r3
 8007834:	8bbb      	ldrh	r3, [r7, #28]
 8007836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800783a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800783e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007846:	b29b      	uxth	r3, r3
 8007848:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800785c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007860:	837b      	strh	r3, [r7, #26]
 8007862:	8b7b      	ldrh	r3, [r7, #26]
 8007864:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007868:	837b      	strh	r3, [r7, #26]
 800786a:	8b7b      	ldrh	r3, [r7, #26]
 800786c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007870:	837b      	strh	r3, [r7, #26]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	441a      	add	r2, r3
 800787c:	8b7b      	ldrh	r3, [r7, #26]
 800787e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788e:	b29b      	uxth	r3, r3
 8007890:	8013      	strh	r3, [r2, #0]
 8007892:	e1a2      	b.n	8007bda <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	441a      	add	r2, r3
 80078b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80078bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80078c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078da:	b29b      	uxth	r3, r3
 80078dc:	461a      	mov	r2, r3
 80078de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078e0:	4413      	add	r3, r2
 80078e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	011a      	lsls	r2, r3, #4
 80078ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f2:	657b      	str	r3, [r7, #84]	; 0x54
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	891b      	ldrh	r3, [r3, #8]
 80078f8:	085b      	lsrs	r3, r3, #1
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	b29a      	uxth	r2, r3
 8007900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007902:	801a      	strh	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	653b      	str	r3, [r7, #80]	; 0x50
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800790e:	b29b      	uxth	r3, r3
 8007910:	461a      	mov	r2, r3
 8007912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007914:	4413      	add	r3, r2
 8007916:	653b      	str	r3, [r7, #80]	; 0x50
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	011a      	lsls	r2, r3, #4
 800791e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007920:	4413      	add	r3, r2
 8007922:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	895b      	ldrh	r3, [r3, #10]
 800792c:	085b      	lsrs	r3, r3, #1
 800792e:	b29b      	uxth	r3, r3
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007936:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f040 8091 	bne.w	8007a64 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007950:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01b      	beq.n	8007992 <USB_ActivateEndpoint+0x47e>
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007970:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	441a      	add	r2, r3
 800797c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800797e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800798a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798e:	b29b      	uxth	r3, r3
 8007990:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	873b      	strh	r3, [r7, #56]	; 0x38
 80079a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d01b      	beq.n	80079e2 <USB_ActivateEndpoint+0x4ce>
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	441a      	add	r2, r3
 80079cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80079ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079de:	b29b      	uxth	r3, r3
 80079e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80079fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80079fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a00:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a08:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	441a      	add	r2, r3
 8007a14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a40:	867b      	strh	r3, [r7, #50]	; 0x32
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	441a      	add	r2, r3
 8007a4c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	8013      	strh	r3, [r2, #0]
 8007a62:	e0ba      	b.n	8007bda <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007a74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01d      	beq.n	8007abc <USB_ActivateEndpoint+0x5a8>
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	441a      	add	r2, r3
 8007aa4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007acc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01d      	beq.n	8007b14 <USB_ActivateEndpoint+0x600>
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	441a      	add	r2, r3
 8007afc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	78db      	ldrb	r3, [r3, #3]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d024      	beq.n	8007b66 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b3a:	f083 0320 	eor.w	r3, r3, #32
 8007b3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	441a      	add	r2, r3
 8007b4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	8013      	strh	r3, [r2, #0]
 8007b64:	e01d      	b.n	8007ba2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	441a      	add	r2, r3
 8007bc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007bda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	376c      	adds	r7, #108	; 0x6c
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc80      	pop	{r7}
 8007be6:	4770      	bx	lr

08007be8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b08d      	sub	sp, #52	; 0x34
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	7b1b      	ldrb	r3, [r3, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 808e 	bne.w	8007d18 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	785b      	ldrb	r3, [r3, #1]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d044      	beq.n	8007c8e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	81bb      	strh	r3, [r7, #12]
 8007c12:	89bb      	ldrh	r3, [r7, #12]
 8007c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01b      	beq.n	8007c54 <USB_DeactivateEndpoint+0x6c>
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c32:	817b      	strh	r3, [r7, #10]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	441a      	add	r2, r3
 8007c3e:	897b      	ldrh	r3, [r7, #10]
 8007c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c6a:	813b      	strh	r3, [r7, #8]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	441a      	add	r2, r3
 8007c76:	893b      	ldrh	r3, [r7, #8]
 8007c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	8013      	strh	r3, [r2, #0]
 8007c8c:	e192      	b.n	8007fb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	827b      	strh	r3, [r7, #18]
 8007c9c:	8a7b      	ldrh	r3, [r7, #18]
 8007c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d01b      	beq.n	8007cde <USB_DeactivateEndpoint+0xf6>
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbc:	823b      	strh	r3, [r7, #16]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	441a      	add	r2, r3
 8007cc8:	8a3b      	ldrh	r3, [r7, #16]
 8007cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf4:	81fb      	strh	r3, [r7, #14]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	441a      	add	r2, r3
 8007d00:	89fb      	ldrh	r3, [r7, #14]
 8007d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	8013      	strh	r3, [r2, #0]
 8007d16:	e14d      	b.n	8007fb4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f040 80a5 	bne.w	8007e6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	843b      	strh	r3, [r7, #32]
 8007d30:	8c3b      	ldrh	r3, [r7, #32]
 8007d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01b      	beq.n	8007d72 <USB_DeactivateEndpoint+0x18a>
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d50:	83fb      	strh	r3, [r7, #30]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	441a      	add	r2, r3
 8007d5c:	8bfb      	ldrh	r3, [r7, #30]
 8007d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	83bb      	strh	r3, [r7, #28]
 8007d80:	8bbb      	ldrh	r3, [r7, #28]
 8007d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d01b      	beq.n	8007dc2 <USB_DeactivateEndpoint+0x1da>
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da0:	837b      	strh	r3, [r7, #26]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	441a      	add	r2, r3
 8007dac:	8b7b      	ldrh	r3, [r7, #26]
 8007dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd8:	833b      	strh	r3, [r7, #24]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	441a      	add	r2, r3
 8007de4:	8b3b      	ldrh	r3, [r7, #24]
 8007de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e10:	82fb      	strh	r3, [r7, #22]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	441a      	add	r2, r3
 8007e1c:	8afb      	ldrh	r3, [r7, #22]
 8007e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e48:	82bb      	strh	r3, [r7, #20]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	441a      	add	r2, r3
 8007e54:	8abb      	ldrh	r3, [r7, #20]
 8007e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	8013      	strh	r3, [r2, #0]
 8007e6a:	e0a3      	b.n	8007fb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007e7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01b      	beq.n	8007ebc <USB_DeactivateEndpoint+0x2d4>
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	441a      	add	r2, r3
 8007ea6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007eca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d01b      	beq.n	8007f0c <USB_DeactivateEndpoint+0x324>
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eea:	853b      	strh	r3, [r7, #40]	; 0x28
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	441a      	add	r2, r3
 8007ef6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	441a      	add	r2, r3
 8007f2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	441a      	add	r2, r3
 8007f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f92:	847b      	strh	r3, [r7, #34]	; 0x22
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	441a      	add	r2, r3
 8007f9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3734      	adds	r7, #52	; 0x34
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bc80      	pop	{r7}
 8007fbe:	4770      	bx	lr

08007fc0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b0cc      	sub	sp, #304	; 0x130
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fce:	6018      	str	r0, [r3, #0]
 8007fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	785b      	ldrb	r3, [r3, #1]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	f041 817d 	bne.w	80092e6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699a      	ldr	r2, [r3, #24]
 8007ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	429a      	cmp	r2, r3
 8008006:	d908      	bls.n	800801a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008018:	e007      	b.n	800802a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800801a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800802a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	7b1b      	ldrb	r3, [r3, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d152      	bne.n	80080e0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800803a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6959      	ldr	r1, [r3, #20]
 8008046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	88da      	ldrh	r2, [r3, #6]
 8008052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008056:	b29b      	uxth	r3, r3
 8008058:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800805c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008060:	6800      	ldr	r0, [r0, #0]
 8008062:	f001 ff23 	bl	8009eac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800806e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008072:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008088:	b29b      	uxth	r3, r3
 800808a:	4619      	mov	r1, r3
 800808c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008090:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008094:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008098:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800809c:	6812      	ldr	r2, [r2, #0]
 800809e:	440a      	add	r2, r1
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	011a      	lsls	r2, r3, #4
 80080b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4413      	add	r3, r2
 80080bc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80080c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	f001 b8b5 	b.w	800924a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80080e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	78db      	ldrb	r3, [r3, #3]
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	f040 84c6 	bne.w	8008a7e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80080f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6a1a      	ldr	r2, [r3, #32]
 80080fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	429a      	cmp	r2, r3
 800810c:	f240 8443 	bls.w	8008996 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008136:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800813a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	441a      	add	r2, r3
 8008154:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800815c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008160:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008168:	b29b      	uxth	r3, r3
 800816a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800816c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6a1a      	ldr	r2, [r3, #32]
 8008178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817c:	1ad2      	subs	r2, r2, r3
 800817e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800818a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 823e 	beq.w	800862e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80081ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081be:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	785b      	ldrb	r3, [r3, #1]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 809a 	bne.w	800830c <USB_EPStartXfer+0x34c>
 80081d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081e4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80081e8:	6812      	ldr	r2, [r2, #0]
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4619      	mov	r1, r3
 80081fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008206:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800820a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	440a      	add	r2, r1
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	011a      	lsls	r2, r3, #4
 8008222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4413      	add	r3, r2
 800822e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008236:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008240:	2b00      	cmp	r3, #0
 8008242:	d122      	bne.n	800828a <USB_EPStartXfer+0x2ca>
 8008244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008248:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	b29b      	uxth	r3, r3
 8008252:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008256:	b29a      	uxth	r2, r3
 8008258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	801a      	strh	r2, [r3, #0]
 8008264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008268:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827a:	b29a      	uxth	r2, r3
 800827c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008280:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	801a      	strh	r2, [r3, #0]
 8008288:	e079      	b.n	800837e <USB_EPStartXfer+0x3be>
 800828a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828e:	2b3e      	cmp	r3, #62	; 0x3e
 8008290:	d81b      	bhi.n	80082ca <USB_EPStartXfer+0x30a>
 8008292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800829c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d004      	beq.n	80082b2 <USB_EPStartXfer+0x2f2>
 80082a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082ac:	3301      	adds	r3, #1
 80082ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	029b      	lsls	r3, r3, #10
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	e059      	b.n	800837e <USB_EPStartXfer+0x3be>
 80082ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ce:	095b      	lsrs	r3, r3, #5
 80082d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d8:	f003 031f 	and.w	r3, r3, #31
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d104      	bne.n	80082ea <USB_EPStartXfer+0x32a>
 80082e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082e4:	3b01      	subs	r3, #1
 80082e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	029b      	lsls	r3, r3, #10
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008302:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	801a      	strh	r2, [r3, #0]
 800830a:	e038      	b.n	800837e <USB_EPStartXfer+0x3be>
 800830c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d130      	bne.n	800837e <USB_EPStartXfer+0x3be>
 800831c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800832a:	b29b      	uxth	r3, r3
 800832c:	4619      	mov	r1, r3
 800832e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008332:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008336:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800833a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800833e:	6812      	ldr	r2, [r2, #0]
 8008340:	440a      	add	r2, r1
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	011a      	lsls	r2, r3, #4
 8008352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008356:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4413      	add	r3, r2
 800835e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008370:	b29a      	uxth	r2, r3
 8008372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800837e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	895b      	ldrh	r3, [r3, #10]
 800838a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800838e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6959      	ldr	r1, [r3, #20]
 800839a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800839e:	b29b      	uxth	r3, r3
 80083a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80083a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80083a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80083ac:	6800      	ldr	r0, [r0, #0]
 80083ae:	f001 fd7d 	bl	8009eac <USB_WritePMA>
            ep->xfer_buff += len;
 80083b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	695a      	ldr	r2, [r3, #20]
 80083be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c2:	441a      	add	r2, r3
 80083c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80083d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6a1a      	ldr	r2, [r3, #32]
 80083dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d90f      	bls.n	800840c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80083ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6a1a      	ldr	r2, [r3, #32]
 80083f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fc:	1ad2      	subs	r2, r2, r3
 80083fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	621a      	str	r2, [r3, #32]
 800840a:	e00e      	b.n	800842a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800840c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800841c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2200      	movs	r2, #0
 8008428:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800842a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	785b      	ldrb	r3, [r3, #1]
 8008436:	2b00      	cmp	r3, #0
 8008438:	f040 809a 	bne.w	8008570 <USB_EPStartXfer+0x5b0>
 800843c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008440:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008444:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008448:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008454:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800845e:	b29b      	uxth	r3, r3
 8008460:	4619      	mov	r1, r3
 8008462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008466:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800846a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800846e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008472:	6812      	ldr	r2, [r2, #0]
 8008474:	440a      	add	r2, r1
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	011a      	lsls	r2, r3, #4
 8008486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4413      	add	r3, r2
 8008492:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d122      	bne.n	80084ee <USB_EPStartXfer+0x52e>
 80084a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	801a      	strh	r2, [r3, #0]
 80084c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084de:	b29a      	uxth	r2, r3
 80084e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	e083      	b.n	80085f6 <USB_EPStartXfer+0x636>
 80084ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f2:	2b3e      	cmp	r3, #62	; 0x3e
 80084f4:	d81b      	bhi.n	800852e <USB_EPStartXfer+0x56e>
 80084f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <USB_EPStartXfer+0x556>
 800850c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008510:	3301      	adds	r3, #1
 8008512:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008516:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800851a:	b29b      	uxth	r3, r3
 800851c:	029b      	lsls	r3, r3, #10
 800851e:	b29a      	uxth	r2, r3
 8008520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008524:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	801a      	strh	r2, [r3, #0]
 800852c:	e063      	b.n	80085f6 <USB_EPStartXfer+0x636>
 800852e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008532:	095b      	lsrs	r3, r3, #5
 8008534:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853c:	f003 031f 	and.w	r3, r3, #31
 8008540:	2b00      	cmp	r3, #0
 8008542:	d104      	bne.n	800854e <USB_EPStartXfer+0x58e>
 8008544:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008548:	3b01      	subs	r3, #1
 800854a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800854e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008552:	b29b      	uxth	r3, r3
 8008554:	029b      	lsls	r3, r3, #10
 8008556:	b29b      	uxth	r3, r3
 8008558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800855c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008560:	b29a      	uxth	r2, r3
 8008562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008566:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	801a      	strh	r2, [r3, #0]
 800856e:	e042      	b.n	80085f6 <USB_EPStartXfer+0x636>
 8008570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	785b      	ldrb	r3, [r3, #1]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d13a      	bne.n	80085f6 <USB_EPStartXfer+0x636>
 8008580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008584:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008588:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800858c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	4619      	mov	r1, r3
 80085a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80085ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085b2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80085b6:	6812      	ldr	r2, [r2, #0]
 80085b8:	440a      	add	r2, r1
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	011a      	lsls	r2, r3, #4
 80085ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4413      	add	r3, r2
 80085d6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80085da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	891b      	ldrh	r3, [r3, #8]
 8008602:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6959      	ldr	r1, [r3, #20]
 8008612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008616:	b29b      	uxth	r3, r3
 8008618:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800861c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008620:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008624:	6800      	ldr	r0, [r0, #0]
 8008626:	f001 fc41 	bl	8009eac <USB_WritePMA>
 800862a:	f000 be0e 	b.w	800924a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800862e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d16d      	bne.n	800871a <USB_EPStartXfer+0x75a>
 800863e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008642:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	64bb      	str	r3, [r7, #72]	; 0x48
 800864a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008658:	b29b      	uxth	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865e:	4413      	add	r3, r2
 8008660:	64bb      	str	r3, [r7, #72]	; 0x48
 8008662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	011a      	lsls	r2, r3, #4
 8008670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008672:	4413      	add	r3, r2
 8008674:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008678:	647b      	str	r3, [r7, #68]	; 0x44
 800867a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d112      	bne.n	80086a8 <USB_EPStartXfer+0x6e8>
 8008682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800868c:	b29a      	uxth	r2, r3
 800868e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008690:	801a      	strh	r2, [r3, #0]
 8008692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800869c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	e063      	b.n	8008770 <USB_EPStartXfer+0x7b0>
 80086a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ac:	2b3e      	cmp	r3, #62	; 0x3e
 80086ae:	d817      	bhi.n	80086e0 <USB_EPStartXfer+0x720>
 80086b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b4:	085b      	lsrs	r3, r3, #1
 80086b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <USB_EPStartXfer+0x710>
 80086c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086ca:	3301      	adds	r3, #1
 80086cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	029b      	lsls	r3, r3, #10
 80086d8:	b29a      	uxth	r2, r3
 80086da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086dc:	801a      	strh	r2, [r3, #0]
 80086de:	e047      	b.n	8008770 <USB_EPStartXfer+0x7b0>
 80086e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e4:	095b      	lsrs	r3, r3, #5
 80086e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d104      	bne.n	8008700 <USB_EPStartXfer+0x740>
 80086f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086fa:	3b01      	subs	r3, #1
 80086fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008700:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008704:	b29b      	uxth	r3, r3
 8008706:	029b      	lsls	r3, r3, #10
 8008708:	b29b      	uxth	r3, r3
 800870a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800870e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008712:	b29a      	uxth	r2, r3
 8008714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008716:	801a      	strh	r2, [r3, #0]
 8008718:	e02a      	b.n	8008770 <USB_EPStartXfer+0x7b0>
 800871a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	785b      	ldrb	r3, [r3, #1]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d122      	bne.n	8008770 <USB_EPStartXfer+0x7b0>
 800872a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	653b      	str	r3, [r7, #80]	; 0x50
 8008736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008744:	b29b      	uxth	r3, r3
 8008746:	461a      	mov	r2, r3
 8008748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800874a:	4413      	add	r3, r2
 800874c:	653b      	str	r3, [r7, #80]	; 0x50
 800874e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	011a      	lsls	r2, r3, #4
 800875c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800875e:	4413      	add	r3, r2
 8008760:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800876a:	b29a      	uxth	r2, r3
 800876c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800876e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	891b      	ldrh	r3, [r3, #8]
 800877c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6959      	ldr	r1, [r3, #20]
 800878c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008790:	b29b      	uxth	r3, r3
 8008792:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008796:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800879a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800879e:	6800      	ldr	r0, [r0, #0]
 80087a0:	f001 fb84 	bl	8009eac <USB_WritePMA>
            ep->xfer_buff += len;
 80087a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695a      	ldr	r2, [r3, #20]
 80087b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b4:	441a      	add	r2, r3
 80087b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6a1a      	ldr	r2, [r3, #32]
 80087ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d90f      	bls.n	80087fe <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80087de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6a1a      	ldr	r2, [r3, #32]
 80087ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ee:	1ad2      	subs	r2, r2, r3
 80087f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	621a      	str	r2, [r3, #32]
 80087fc:	e00e      	b.n	800881c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80087fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800880e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2200      	movs	r2, #0
 800881a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800881c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008820:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	643b      	str	r3, [r7, #64]	; 0x40
 8008828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	785b      	ldrb	r3, [r3, #1]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d16d      	bne.n	8008914 <USB_EPStartXfer+0x954>
 8008838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800883c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	63bb      	str	r3, [r7, #56]	; 0x38
 8008844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008848:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008852:	b29b      	uxth	r3, r3
 8008854:	461a      	mov	r2, r3
 8008856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008858:	4413      	add	r3, r2
 800885a:	63bb      	str	r3, [r7, #56]	; 0x38
 800885c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	011a      	lsls	r2, r3, #4
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	4413      	add	r3, r2
 800886e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008872:	637b      	str	r3, [r7, #52]	; 0x34
 8008874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d112      	bne.n	80088a2 <USB_EPStartXfer+0x8e2>
 800887c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	b29b      	uxth	r3, r3
 8008882:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008886:	b29a      	uxth	r2, r3
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	b29b      	uxth	r3, r3
 8008892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800889a:	b29a      	uxth	r2, r3
 800889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	e05d      	b.n	800895e <USB_EPStartXfer+0x99e>
 80088a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a6:	2b3e      	cmp	r3, #62	; 0x3e
 80088a8:	d817      	bhi.n	80088da <USB_EPStartXfer+0x91a>
 80088aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ae:	085b      	lsrs	r3, r3, #1
 80088b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80088b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d004      	beq.n	80088ca <USB_EPStartXfer+0x90a>
 80088c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088c4:	3301      	adds	r3, #1
 80088c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80088ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	029b      	lsls	r3, r3, #10
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	801a      	strh	r2, [r3, #0]
 80088d8:	e041      	b.n	800895e <USB_EPStartXfer+0x99e>
 80088da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088de:	095b      	lsrs	r3, r3, #5
 80088e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80088e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e8:	f003 031f 	and.w	r3, r3, #31
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d104      	bne.n	80088fa <USB_EPStartXfer+0x93a>
 80088f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088f4:	3b01      	subs	r3, #1
 80088f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80088fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088fe:	b29b      	uxth	r3, r3
 8008900:	029b      	lsls	r3, r3, #10
 8008902:	b29b      	uxth	r3, r3
 8008904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800890c:	b29a      	uxth	r2, r3
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	801a      	strh	r2, [r3, #0]
 8008912:	e024      	b.n	800895e <USB_EPStartXfer+0x99e>
 8008914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	785b      	ldrb	r3, [r3, #1]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d11c      	bne.n	800895e <USB_EPStartXfer+0x99e>
 8008924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008928:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008932:	b29b      	uxth	r3, r3
 8008934:	461a      	mov	r2, r3
 8008936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008938:	4413      	add	r3, r2
 800893a:	643b      	str	r3, [r7, #64]	; 0x40
 800893c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008940:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	011a      	lsls	r2, r3, #4
 800894a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800894c:	4413      	add	r3, r2
 800894e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008958:	b29a      	uxth	r2, r3
 800895a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800895e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	895b      	ldrh	r3, [r3, #10]
 800896a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800896e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6959      	ldr	r1, [r3, #20]
 800897a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800897e:	b29b      	uxth	r3, r3
 8008980:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008984:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008988:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800898c:	6800      	ldr	r0, [r0, #0]
 800898e:	f001 fa8d 	bl	8009eac <USB_WritePMA>
 8008992:	f000 bc5a 	b.w	800924a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800899a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80089a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80089c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80089d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	441a      	add	r2, r3
 80089ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80089ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	461a      	mov	r2, r3
 8008a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a22:	4413      	add	r3, r2
 8008a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	011a      	lsls	r2, r3, #4
 8008a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a36:	4413      	add	r3, r2
 8008a38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	891b      	ldrh	r3, [r3, #8]
 8008a54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6959      	ldr	r1, [r3, #20]
 8008a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a6e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008a72:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008a76:	6800      	ldr	r0, [r0, #0]
 8008a78:	f001 fa18 	bl	8009eac <USB_WritePMA>
 8008a7c:	e3e5      	b.n	800924a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4413      	add	r3, r2
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	441a      	add	r2, r3
 8008ac2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ace:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6a1a      	ldr	r2, [r3, #32]
 8008ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aea:	1ad2      	subs	r2, r2, r3
 8008aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 81bc 	beq.w	8008e98 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d16d      	bne.n	8008c1a <USB_EPStartXfer+0xc5a>
 8008b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b5e:	4413      	add	r3, r2
 8008b60:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	011a      	lsls	r2, r3, #4
 8008b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b72:	4413      	add	r3, r2
 8008b74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b78:	677b      	str	r3, [r7, #116]	; 0x74
 8008b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d112      	bne.n	8008ba8 <USB_EPStartXfer+0xbe8>
 8008b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b90:	801a      	strh	r2, [r3, #0]
 8008b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba4:	801a      	strh	r2, [r3, #0]
 8008ba6:	e060      	b.n	8008c6a <USB_EPStartXfer+0xcaa>
 8008ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bac:	2b3e      	cmp	r3, #62	; 0x3e
 8008bae:	d817      	bhi.n	8008be0 <USB_EPStartXfer+0xc20>
 8008bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <USB_EPStartXfer+0xc10>
 8008bc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	029b      	lsls	r3, r3, #10
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bdc:	801a      	strh	r2, [r3, #0]
 8008bde:	e044      	b.n	8008c6a <USB_EPStartXfer+0xcaa>
 8008be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008be4:	095b      	lsrs	r3, r3, #5
 8008be6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bee:	f003 031f 	and.w	r3, r3, #31
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d104      	bne.n	8008c00 <USB_EPStartXfer+0xc40>
 8008bf6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	029b      	lsls	r3, r3, #10
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c16:	801a      	strh	r2, [r3, #0]
 8008c18:	e027      	b.n	8008c6a <USB_EPStartXfer+0xcaa>
 8008c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	785b      	ldrb	r3, [r3, #1]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d11f      	bne.n	8008c6a <USB_EPStartXfer+0xcaa>
 8008c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c40:	4413      	add	r3, r2
 8008c42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	011a      	lsls	r2, r3, #4
 8008c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c58:	4413      	add	r3, r2
 8008c5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	895b      	ldrh	r3, [r3, #10]
 8008c76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6959      	ldr	r1, [r3, #20]
 8008c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008c94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008c98:	6800      	ldr	r0, [r0, #0]
 8008c9a:	f001 f907 	bl	8009eac <USB_WritePMA>
          ep->xfer_buff += len;
 8008c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	695a      	ldr	r2, [r3, #20]
 8008caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cae:	441a      	add	r2, r3
 8008cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6a1a      	ldr	r2, [r3, #32]
 8008cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d90f      	bls.n	8008cf8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6a1a      	ldr	r2, [r3, #32]
 8008ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce8:	1ad2      	subs	r2, r2, r3
 8008cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	621a      	str	r2, [r3, #32]
 8008cf6:	e00e      	b.n	8008d16 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2200      	movs	r2, #0
 8008d14:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 8295 	beq.w	800924a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	785b      	ldrb	r3, [r3, #1]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d16d      	bne.n	8008e0c <USB_EPStartXfer+0xe4c>
 8008d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d50:	4413      	add	r3, r2
 8008d52:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	011a      	lsls	r2, r3, #4
 8008d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d64:	4413      	add	r3, r2
 8008d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d6a:	667b      	str	r3, [r7, #100]	; 0x64
 8008d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d112      	bne.n	8008d9a <USB_EPStartXfer+0xdda>
 8008d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d82:	801a      	strh	r2, [r3, #0]
 8008d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	e063      	b.n	8008e62 <USB_EPStartXfer+0xea2>
 8008d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008da0:	d817      	bhi.n	8008dd2 <USB_EPStartXfer+0xe12>
 8008da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <USB_EPStartXfer+0xe02>
 8008db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	029b      	lsls	r3, r3, #10
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dce:	801a      	strh	r2, [r3, #0]
 8008dd0:	e047      	b.n	8008e62 <USB_EPStartXfer+0xea2>
 8008dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd6:	095b      	lsrs	r3, r3, #5
 8008dd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de0:	f003 031f 	and.w	r3, r3, #31
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <USB_EPStartXfer+0xe32>
 8008de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dec:	3b01      	subs	r3, #1
 8008dee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	029b      	lsls	r3, r3, #10
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e08:	801a      	strh	r2, [r3, #0]
 8008e0a:	e02a      	b.n	8008e62 <USB_EPStartXfer+0xea2>
 8008e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	785b      	ldrb	r3, [r3, #1]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d122      	bne.n	8008e62 <USB_EPStartXfer+0xea2>
 8008e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	673b      	str	r3, [r7, #112]	; 0x70
 8008e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e3c:	4413      	add	r3, r2
 8008e3e:	673b      	str	r3, [r7, #112]	; 0x70
 8008e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	011a      	lsls	r2, r3, #4
 8008e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e50:	4413      	add	r3, r2
 8008e52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	891b      	ldrh	r3, [r3, #8]
 8008e6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6959      	ldr	r1, [r3, #20]
 8008e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008e8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008e90:	6800      	ldr	r0, [r0, #0]
 8008e92:	f001 f80b 	bl	8009eac <USB_WritePMA>
 8008e96:	e1d8      	b.n	800924a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	785b      	ldrb	r3, [r3, #1]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d178      	bne.n	8008f9a <USB_EPStartXfer+0xfda>
 8008ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ecc:	4413      	add	r3, r2
 8008ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	011a      	lsls	r2, r3, #4
 8008ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008eea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d116      	bne.n	8008f24 <USB_EPStartXfer+0xf64>
 8008ef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f08:	801a      	strh	r2, [r3, #0]
 8008f0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f20:	801a      	strh	r2, [r3, #0]
 8008f22:	e06b      	b.n	8008ffc <USB_EPStartXfer+0x103c>
 8008f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f28:	2b3e      	cmp	r3, #62	; 0x3e
 8008f2a:	d818      	bhi.n	8008f5e <USB_EPStartXfer+0xf9e>
 8008f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f30:	085b      	lsrs	r3, r3, #1
 8008f32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d004      	beq.n	8008f4c <USB_EPStartXfer+0xf8c>
 8008f42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f46:	3301      	adds	r3, #1
 8008f48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	029b      	lsls	r3, r3, #10
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f5a:	801a      	strh	r2, [r3, #0]
 8008f5c:	e04e      	b.n	8008ffc <USB_EPStartXfer+0x103c>
 8008f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f6c:	f003 031f 	and.w	r3, r3, #31
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d104      	bne.n	8008f7e <USB_EPStartXfer+0xfbe>
 8008f74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	029b      	lsls	r3, r3, #10
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f96:	801a      	strh	r2, [r3, #0]
 8008f98:	e030      	b.n	8008ffc <USB_EPStartXfer+0x103c>
 8008f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d128      	bne.n	8008ffc <USB_EPStartXfer+0x103c>
 8008faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fce:	4413      	add	r3, r2
 8008fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	011a      	lsls	r2, r3, #4
 8008fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ffa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	891b      	ldrh	r3, [r3, #8]
 8009008:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800900c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6959      	ldr	r1, [r3, #20]
 8009018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901c:	b29b      	uxth	r3, r3
 800901e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009022:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009026:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800902a:	6800      	ldr	r0, [r0, #0]
 800902c:	f000 ff3e 	bl	8009eac <USB_WritePMA>
          ep->xfer_buff += len;
 8009030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	695a      	ldr	r2, [r3, #20]
 800903c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009040:	441a      	add	r2, r3
 8009042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800904e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6a1a      	ldr	r2, [r3, #32]
 800905a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800905e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	429a      	cmp	r2, r3
 8009068:	d90f      	bls.n	800908a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800906a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800906e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6a1a      	ldr	r2, [r3, #32]
 8009076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	621a      	str	r2, [r3, #32]
 8009088:	e00e      	b.n	80090a8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800908a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800909a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2200      	movs	r2, #0
 80090a6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80090a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 80cc 	beq.w	800924a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	785b      	ldrb	r3, [r3, #1]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d178      	bne.n	80091c2 <USB_EPStartXfer+0x1202>
 80090d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	461a      	mov	r2, r3
 80090f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090f4:	4413      	add	r3, r2
 80090f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	011a      	lsls	r2, r3, #4
 8009108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800910c:	4413      	add	r3, r2
 800910e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d116      	bne.n	800914c <USB_EPStartXfer+0x118c>
 800911e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800912a:	b29a      	uxth	r2, r3
 800912c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009130:	801a      	strh	r2, [r3, #0]
 8009132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	b29b      	uxth	r3, r3
 800913a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009142:	b29a      	uxth	r2, r3
 8009144:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009148:	801a      	strh	r2, [r3, #0]
 800914a:	e064      	b.n	8009216 <USB_EPStartXfer+0x1256>
 800914c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009150:	2b3e      	cmp	r3, #62	; 0x3e
 8009152:	d818      	bhi.n	8009186 <USB_EPStartXfer+0x11c6>
 8009154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009158:	085b      	lsrs	r3, r3, #1
 800915a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800915e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d004      	beq.n	8009174 <USB_EPStartXfer+0x11b4>
 800916a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800916e:	3301      	adds	r3, #1
 8009170:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009178:	b29b      	uxth	r3, r3
 800917a:	029b      	lsls	r3, r3, #10
 800917c:	b29a      	uxth	r2, r3
 800917e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009182:	801a      	strh	r2, [r3, #0]
 8009184:	e047      	b.n	8009216 <USB_EPStartXfer+0x1256>
 8009186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800918a:	095b      	lsrs	r3, r3, #5
 800918c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009194:	f003 031f 	and.w	r3, r3, #31
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <USB_EPStartXfer+0x11e6>
 800919c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091a0:	3b01      	subs	r3, #1
 80091a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	029b      	lsls	r3, r3, #10
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091be:	801a      	strh	r2, [r3, #0]
 80091c0:	e029      	b.n	8009216 <USB_EPStartXfer+0x1256>
 80091c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d121      	bne.n	8009216 <USB_EPStartXfer+0x1256>
 80091d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	461a      	mov	r2, r3
 80091e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091e8:	4413      	add	r3, r2
 80091ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	011a      	lsls	r2, r3, #4
 80091fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009200:	4413      	add	r3, r2
 8009202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800920a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800920e:	b29a      	uxth	r2, r3
 8009210:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009214:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800921a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	895b      	ldrh	r3, [r3, #10]
 8009222:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800922a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6959      	ldr	r1, [r3, #20]
 8009232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009236:	b29b      	uxth	r3, r3
 8009238:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800923c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009240:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009244:	6800      	ldr	r0, [r0, #0]
 8009246:	f000 fe31 	bl	8009eac <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800924a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800924e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	b29b      	uxth	r3, r3
 8009268:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800926c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009278:	8013      	strh	r3, [r2, #0]
 800927a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800927e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009282:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009286:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800928a:	8812      	ldrh	r2, [r2, #0]
 800928c:	f082 0210 	eor.w	r2, r2, #16
 8009290:	801a      	strh	r2, [r3, #0]
 8009292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009296:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800929a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800929e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80092a2:	8812      	ldrh	r2, [r2, #0]
 80092a4:	f082 0220 	eor.w	r2, r2, #32
 80092a8:	801a      	strh	r2, [r3, #0]
 80092aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	441a      	add	r2, r3
 80092c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80092cc:	881b      	ldrh	r3, [r3, #0]
 80092ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092de:	b29b      	uxth	r3, r3
 80092e0:	8013      	strh	r3, [r2, #0]
 80092e2:	f000 bc9f 	b.w	8009c24 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80092e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	7b1b      	ldrb	r3, [r3, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f040 80ae 	bne.w	8009454 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80092f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	699a      	ldr	r2, [r3, #24]
 8009304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	429a      	cmp	r2, r3
 8009312:	d917      	bls.n	8009344 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009318:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	699a      	ldr	r2, [r3, #24]
 8009330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009334:	1ad2      	subs	r2, r2, r3
 8009336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800933a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	619a      	str	r2, [r3, #24]
 8009342:	e00e      	b.n	8009362 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2200      	movs	r2, #0
 8009360:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009366:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009374:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800937e:	b29b      	uxth	r3, r3
 8009380:	461a      	mov	r2, r3
 8009382:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009386:	4413      	add	r3, r2
 8009388:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800938c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	011a      	lsls	r2, r3, #4
 800939a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800939e:	4413      	add	r3, r2
 80093a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d116      	bne.n	80093de <USB_EPStartXfer+0x141e>
 80093b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093bc:	b29a      	uxth	r2, r3
 80093be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093c2:	801a      	strh	r2, [r3, #0]
 80093c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093da:	801a      	strh	r2, [r3, #0]
 80093dc:	e3e8      	b.n	8009bb0 <USB_EPStartXfer+0x1bf0>
 80093de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093e2:	2b3e      	cmp	r3, #62	; 0x3e
 80093e4:	d818      	bhi.n	8009418 <USB_EPStartXfer+0x1458>
 80093e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ea:	085b      	lsrs	r3, r3, #1
 80093ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80093f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d004      	beq.n	8009406 <USB_EPStartXfer+0x1446>
 80093fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009400:	3301      	adds	r3, #1
 8009402:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009406:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800940a:	b29b      	uxth	r3, r3
 800940c:	029b      	lsls	r3, r3, #10
 800940e:	b29a      	uxth	r2, r3
 8009410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009414:	801a      	strh	r2, [r3, #0]
 8009416:	e3cb      	b.n	8009bb0 <USB_EPStartXfer+0x1bf0>
 8009418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800941c:	095b      	lsrs	r3, r3, #5
 800941e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009426:	f003 031f 	and.w	r3, r3, #31
 800942a:	2b00      	cmp	r3, #0
 800942c:	d104      	bne.n	8009438 <USB_EPStartXfer+0x1478>
 800942e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009432:	3b01      	subs	r3, #1
 8009434:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800943c:	b29b      	uxth	r3, r3
 800943e:	029b      	lsls	r3, r3, #10
 8009440:	b29b      	uxth	r3, r3
 8009442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800944a:	b29a      	uxth	r2, r3
 800944c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	e3ad      	b.n	8009bb0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	78db      	ldrb	r3, [r3, #3]
 8009460:	2b02      	cmp	r3, #2
 8009462:	f040 8200 	bne.w	8009866 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	785b      	ldrb	r3, [r3, #1]
 8009472:	2b00      	cmp	r3, #0
 8009474:	f040 8091 	bne.w	800959a <USB_EPStartXfer+0x15da>
 8009478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800947c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009494:	b29b      	uxth	r3, r3
 8009496:	461a      	mov	r2, r3
 8009498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800949c:	4413      	add	r3, r2
 800949e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	011a      	lsls	r2, r3, #4
 80094b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094b4:	4413      	add	r3, r2
 80094b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d116      	bne.n	80094fc <USB_EPStartXfer+0x153c>
 80094ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094da:	b29a      	uxth	r2, r3
 80094dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094e0:	801a      	strh	r2, [r3, #0]
 80094e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094e6:	881b      	ldrh	r3, [r3, #0]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094f8:	801a      	strh	r2, [r3, #0]
 80094fa:	e083      	b.n	8009604 <USB_EPStartXfer+0x1644>
 80094fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	2b3e      	cmp	r3, #62	; 0x3e
 800950a:	d820      	bhi.n	800954e <USB_EPStartXfer+0x158e>
 800950c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	085b      	lsrs	r3, r3, #1
 800951a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800951e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <USB_EPStartXfer+0x157c>
 8009532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009536:	3301      	adds	r3, #1
 8009538:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800953c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009540:	b29b      	uxth	r3, r3
 8009542:	029b      	lsls	r3, r3, #10
 8009544:	b29a      	uxth	r2, r3
 8009546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	e05a      	b.n	8009604 <USB_EPStartXfer+0x1644>
 800954e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	095b      	lsrs	r3, r3, #5
 800955c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f003 031f 	and.w	r3, r3, #31
 8009570:	2b00      	cmp	r3, #0
 8009572:	d104      	bne.n	800957e <USB_EPStartXfer+0x15be>
 8009574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009578:	3b01      	subs	r3, #1
 800957a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800957e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009582:	b29b      	uxth	r3, r3
 8009584:	029b      	lsls	r3, r3, #10
 8009586:	b29b      	uxth	r3, r3
 8009588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800958c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009590:	b29a      	uxth	r2, r3
 8009592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009596:	801a      	strh	r2, [r3, #0]
 8009598:	e034      	b.n	8009604 <USB_EPStartXfer+0x1644>
 800959a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800959e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	785b      	ldrb	r3, [r3, #1]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d12c      	bne.n	8009604 <USB_EPStartXfer+0x1644>
 80095aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	461a      	mov	r2, r3
 80095ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095ce:	4413      	add	r3, r2
 80095d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	011a      	lsls	r2, r3, #4
 80095e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095e6:	4413      	add	r3, r2
 80095e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009602:	801a      	strh	r2, [r3, #0]
 8009604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	785b      	ldrb	r3, [r3, #1]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f040 8091 	bne.w	8009746 <USB_EPStartXfer+0x1786>
 8009624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009636:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009640:	b29b      	uxth	r3, r3
 8009642:	461a      	mov	r2, r3
 8009644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009648:	4413      	add	r3, r2
 800964a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800964e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	011a      	lsls	r2, r3, #4
 800965c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009660:	4413      	add	r3, r2
 8009662:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009666:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800966a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800966e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d116      	bne.n	80096a8 <USB_EPStartXfer+0x16e8>
 800967a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	b29b      	uxth	r3, r3
 8009682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009686:	b29a      	uxth	r2, r3
 8009688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800968c:	801a      	strh	r2, [r3, #0]
 800968e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800969a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800969e:	b29a      	uxth	r2, r3
 80096a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096a4:	801a      	strh	r2, [r3, #0]
 80096a6:	e07c      	b.n	80097a2 <USB_EPStartXfer+0x17e2>
 80096a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	2b3e      	cmp	r3, #62	; 0x3e
 80096b6:	d820      	bhi.n	80096fa <USB_EPStartXfer+0x173a>
 80096b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	085b      	lsrs	r3, r3, #1
 80096c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d004      	beq.n	80096e8 <USB_EPStartXfer+0x1728>
 80096de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096e2:	3301      	adds	r3, #1
 80096e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	029b      	lsls	r3, r3, #10
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096f6:	801a      	strh	r2, [r3, #0]
 80096f8:	e053      	b.n	80097a2 <USB_EPStartXfer+0x17e2>
 80096fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800970c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	f003 031f 	and.w	r3, r3, #31
 800971c:	2b00      	cmp	r3, #0
 800971e:	d104      	bne.n	800972a <USB_EPStartXfer+0x176a>
 8009720:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009724:	3b01      	subs	r3, #1
 8009726:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800972a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800972e:	b29b      	uxth	r3, r3
 8009730:	029b      	lsls	r3, r3, #10
 8009732:	b29b      	uxth	r3, r3
 8009734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973c:	b29a      	uxth	r2, r3
 800973e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	e02d      	b.n	80097a2 <USB_EPStartXfer+0x17e2>
 8009746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800974a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d125      	bne.n	80097a2 <USB_EPStartXfer+0x17e2>
 8009756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800975a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009764:	b29b      	uxth	r3, r3
 8009766:	461a      	mov	r2, r3
 8009768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800976c:	4413      	add	r3, r2
 800976e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	011a      	lsls	r2, r3, #4
 8009780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009784:	4413      	add	r3, r2
 8009786:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800978a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800978e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	b29a      	uxth	r2, r3
 800979c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80097a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 81fe 	beq.w	8009bb0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80097b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80097d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80097d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <USB_EPStartXfer+0x182c>
 80097e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80097e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10d      	bne.n	8009808 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80097ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80097f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f040 81db 	bne.w	8009bb0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80097fa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80097fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009802:	2b00      	cmp	r3, #0
 8009804:	f040 81d4 	bne.w	8009bb0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800980c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	441a      	add	r2, r3
 800984c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800985c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009860:	b29b      	uxth	r3, r3
 8009862:	8013      	strh	r3, [r2, #0]
 8009864:	e1a4      	b.n	8009bb0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800986a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	78db      	ldrb	r3, [r3, #3]
 8009872:	2b01      	cmp	r3, #1
 8009874:	f040 819a 	bne.w	8009bac <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800987c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	699a      	ldr	r2, [r3, #24]
 8009884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	429a      	cmp	r2, r3
 8009892:	d917      	bls.n	80098c4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8009894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80098a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	699a      	ldr	r2, [r3, #24]
 80098b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b4:	1ad2      	subs	r2, r2, r3
 80098b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	619a      	str	r2, [r3, #24]
 80098c2:	e00e      	b.n	80098e2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80098c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80098d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2200      	movs	r2, #0
 80098e0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80098e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d178      	bne.n	80099e4 <USB_EPStartXfer+0x1a24>
 80098f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009904:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800990e:	b29b      	uxth	r3, r3
 8009910:	461a      	mov	r2, r3
 8009912:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009916:	4413      	add	r3, r2
 8009918:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800991c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	011a      	lsls	r2, r3, #4
 800992a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800992e:	4413      	add	r3, r2
 8009930:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009934:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d116      	bne.n	800996e <USB_EPStartXfer+0x19ae>
 8009940:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	b29b      	uxth	r3, r3
 8009948:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800994c:	b29a      	uxth	r2, r3
 800994e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009952:	801a      	strh	r2, [r3, #0]
 8009954:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	b29b      	uxth	r3, r3
 800995c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009964:	b29a      	uxth	r2, r3
 8009966:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800996a:	801a      	strh	r2, [r3, #0]
 800996c:	e06b      	b.n	8009a46 <USB_EPStartXfer+0x1a86>
 800996e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009972:	2b3e      	cmp	r3, #62	; 0x3e
 8009974:	d818      	bhi.n	80099a8 <USB_EPStartXfer+0x19e8>
 8009976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800997a:	085b      	lsrs	r3, r3, #1
 800997c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d004      	beq.n	8009996 <USB_EPStartXfer+0x19d6>
 800998c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009990:	3301      	adds	r3, #1
 8009992:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800999a:	b29b      	uxth	r3, r3
 800999c:	029b      	lsls	r3, r3, #10
 800999e:	b29a      	uxth	r2, r3
 80099a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099a4:	801a      	strh	r2, [r3, #0]
 80099a6:	e04e      	b.n	8009a46 <USB_EPStartXfer+0x1a86>
 80099a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099b6:	f003 031f 	and.w	r3, r3, #31
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d104      	bne.n	80099c8 <USB_EPStartXfer+0x1a08>
 80099be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099c2:	3b01      	subs	r3, #1
 80099c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	029b      	lsls	r3, r3, #10
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099da:	b29a      	uxth	r2, r3
 80099dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099e0:	801a      	strh	r2, [r3, #0]
 80099e2:	e030      	b.n	8009a46 <USB_EPStartXfer+0x1a86>
 80099e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	785b      	ldrb	r3, [r3, #1]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d128      	bne.n	8009a46 <USB_EPStartXfer+0x1a86>
 80099f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	461a      	mov	r2, r3
 8009a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a18:	4413      	add	r3, r2
 8009a1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	011a      	lsls	r2, r3, #4
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a30:	4413      	add	r3, r2
 8009a32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009a44:	801a      	strh	r2, [r3, #0]
 8009a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	785b      	ldrb	r3, [r3, #1]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d178      	bne.n	8009b56 <USB_EPStartXfer+0x1b96>
 8009a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	461a      	mov	r2, r3
 8009a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a88:	4413      	add	r3, r2
 8009a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	011a      	lsls	r2, r3, #4
 8009a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d116      	bne.n	8009ae0 <USB_EPStartXfer+0x1b20>
 8009ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ab6:	881b      	ldrh	r3, [r3, #0]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ac4:	801a      	strh	r2, [r3, #0]
 8009ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009adc:	801a      	strh	r2, [r3, #0]
 8009ade:	e067      	b.n	8009bb0 <USB_EPStartXfer+0x1bf0>
 8009ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8009ae6:	d818      	bhi.n	8009b1a <USB_EPStartXfer+0x1b5a>
 8009ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aec:	085b      	lsrs	r3, r3, #1
 8009aee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d004      	beq.n	8009b08 <USB_EPStartXfer+0x1b48>
 8009afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b02:	3301      	adds	r3, #1
 8009b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	029b      	lsls	r3, r3, #10
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b16:	801a      	strh	r2, [r3, #0]
 8009b18:	e04a      	b.n	8009bb0 <USB_EPStartXfer+0x1bf0>
 8009b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b1e:	095b      	lsrs	r3, r3, #5
 8009b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b28:	f003 031f 	and.w	r3, r3, #31
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d104      	bne.n	8009b3a <USB_EPStartXfer+0x1b7a>
 8009b30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b34:	3b01      	subs	r3, #1
 8009b36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	029b      	lsls	r3, r3, #10
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b52:	801a      	strh	r2, [r3, #0]
 8009b54:	e02c      	b.n	8009bb0 <USB_EPStartXfer+0x1bf0>
 8009b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	785b      	ldrb	r3, [r3, #1]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d124      	bne.n	8009bb0 <USB_EPStartXfer+0x1bf0>
 8009b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	461a      	mov	r2, r3
 8009b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	011a      	lsls	r2, r3, #4
 8009b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b94:	4413      	add	r3, r2
 8009b96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ba8:	801a      	strh	r2, [r3, #0]
 8009baa:	e001      	b.n	8009bb0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e03a      	b.n	8009c26 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009bda:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009bde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009be2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009be6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009bea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009bee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	441a      	add	r2, r3
 8009c0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d020      	beq.n	8009c84 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c58:	81bb      	strh	r3, [r7, #12]
 8009c5a:	89bb      	ldrh	r3, [r7, #12]
 8009c5c:	f083 0310 	eor.w	r3, r3, #16
 8009c60:	81bb      	strh	r3, [r7, #12]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	441a      	add	r2, r3
 8009c6c:	89bb      	ldrh	r3, [r7, #12]
 8009c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	8013      	strh	r3, [r2, #0]
 8009c82:	e01f      	b.n	8009cc4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c9a:	81fb      	strh	r3, [r7, #14]
 8009c9c:	89fb      	ldrh	r3, [r7, #14]
 8009c9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ca2:	81fb      	strh	r3, [r7, #14]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	441a      	add	r2, r3
 8009cae:	89fb      	ldrh	r3, [r7, #14]
 8009cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bc80      	pop	{r7}
 8009cce:	4770      	bx	lr

08009cd0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	7b1b      	ldrb	r3, [r3, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f040 809d 	bne.w	8009e1e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	785b      	ldrb	r3, [r3, #1]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d04c      	beq.n	8009d86 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	823b      	strh	r3, [r7, #16]
 8009cfa:	8a3b      	ldrh	r3, [r7, #16]
 8009cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01b      	beq.n	8009d3c <USB_EPClearStall+0x6c>
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	881b      	ldrh	r3, [r3, #0]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d1a:	81fb      	strh	r3, [r7, #14]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	441a      	add	r2, r3
 8009d26:	89fb      	ldrh	r3, [r7, #14]
 8009d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	78db      	ldrb	r3, [r3, #3]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d06c      	beq.n	8009e1e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d5a:	81bb      	strh	r3, [r7, #12]
 8009d5c:	89bb      	ldrh	r3, [r7, #12]
 8009d5e:	f083 0320 	eor.w	r3, r3, #32
 8009d62:	81bb      	strh	r3, [r7, #12]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	441a      	add	r2, r3
 8009d6e:	89bb      	ldrh	r3, [r7, #12]
 8009d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	8013      	strh	r3, [r2, #0]
 8009d84:	e04b      	b.n	8009e1e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4413      	add	r3, r2
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	82fb      	strh	r3, [r7, #22]
 8009d94:	8afb      	ldrh	r3, [r7, #22]
 8009d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d01b      	beq.n	8009dd6 <USB_EPClearStall+0x106>
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	881b      	ldrh	r3, [r3, #0]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db4:	82bb      	strh	r3, [r7, #20]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	441a      	add	r2, r3
 8009dc0:	8abb      	ldrh	r3, [r7, #20]
 8009dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dec:	827b      	strh	r3, [r7, #18]
 8009dee:	8a7b      	ldrh	r3, [r7, #18]
 8009df0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009df4:	827b      	strh	r3, [r7, #18]
 8009df6:	8a7b      	ldrh	r3, [r7, #18]
 8009df8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009dfc:	827b      	strh	r3, [r7, #18]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	441a      	add	r2, r3
 8009e08:	8a7b      	ldrh	r3, [r7, #18]
 8009e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bc80      	pop	{r7}
 8009e28:	4770      	bx	lr

08009e2a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009e36:	78fb      	ldrb	r3, [r7, #3]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2280      	movs	r2, #128	; 0x80
 8009e40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bc80      	pop	{r7}
 8009e4e:	4770      	bx	lr

08009e50 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bc80      	pop	{r7}
 8009e62:	4770      	bx	lr

08009e64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bc80      	pop	{r7}
 8009e76:	4770      	bx	lr

08009e78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bc80      	pop	{r7}
 8009e94:	4770      	bx	lr

08009e96 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bc80      	pop	{r7}
 8009eaa:	4770      	bx	lr

08009eac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b08d      	sub	sp, #52	; 0x34
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	461a      	mov	r2, r3
 8009eba:	460b      	mov	r3, r1
 8009ebc:	80fb      	strh	r3, [r7, #6]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009ec2:	88bb      	ldrh	r3, [r7, #4]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	085b      	lsrs	r3, r3, #1
 8009ec8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ed2:	88fb      	ldrh	r3, [r7, #6]
 8009ed4:	005a      	lsls	r2, r3, #1
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ede:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ee4:	e01e      	b.n	8009f24 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	3301      	adds	r3, #1
 8009ef0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	461a      	mov	r2, r3
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	3302      	adds	r3, #2
 8009f10:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	3302      	adds	r3, #2
 8009f16:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f20:	3b01      	subs	r3, #1
 8009f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1dd      	bne.n	8009ee6 <USB_WritePMA+0x3a>
  }
}
 8009f2a:	bf00      	nop
 8009f2c:	bf00      	nop
 8009f2e:	3734      	adds	r7, #52	; 0x34
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bc80      	pop	{r7}
 8009f34:	4770      	bx	lr

08009f36 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b08b      	sub	sp, #44	; 0x2c
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	60b9      	str	r1, [r7, #8]
 8009f40:	4611      	mov	r1, r2
 8009f42:	461a      	mov	r2, r3
 8009f44:	460b      	mov	r3, r1
 8009f46:	80fb      	strh	r3, [r7, #6]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009f4c:	88bb      	ldrh	r3, [r7, #4]
 8009f4e:	085b      	lsrs	r3, r3, #1
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009f5c:	88fb      	ldrh	r3, [r7, #6]
 8009f5e:	005a      	lsls	r2, r3, #1
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f68:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f6e:	e01b      	b.n	8009fa8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009f70:	6a3b      	ldr	r3, [r7, #32]
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	3302      	adds	r3, #2
 8009f7c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	0a1b      	lsrs	r3, r3, #8
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	3302      	adds	r3, #2
 8009fa0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e0      	bne.n	8009f70 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009fae:	88bb      	ldrh	r3, [r7, #4]
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d007      	beq.n	8009fca <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	701a      	strb	r2, [r3, #0]
  }
}
 8009fca:	bf00      	nop
 8009fcc:	372c      	adds	r7, #44	; 0x2c
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bc80      	pop	{r7}
 8009fd2:	4770      	bx	lr

08009fd4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	7c1b      	ldrb	r3, [r3, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d115      	bne.n	800a018 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	2181      	movs	r1, #129	; 0x81
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 fe8c 	bl	800bd12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a000:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a004:	2202      	movs	r2, #2
 800a006:	2101      	movs	r1, #1
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 fe82 	bl	800bd12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a016:	e012      	b.n	800a03e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a018:	2340      	movs	r3, #64	; 0x40
 800a01a:	2202      	movs	r2, #2
 800a01c:	2181      	movs	r1, #129	; 0x81
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f001 fe77 	bl	800bd12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a02a:	2340      	movs	r3, #64	; 0x40
 800a02c:	2202      	movs	r2, #2
 800a02e:	2101      	movs	r1, #1
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f001 fe6e 	bl	800bd12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a03e:	2308      	movs	r3, #8
 800a040:	2203      	movs	r2, #3
 800a042:	2182      	movs	r1, #130	; 0x82
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f001 fe64 	bl	800bd12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a050:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a054:	f001 ff84 	bl	800bf60 <USBD_static_malloc>
 800a058:	4602      	mov	r2, r0
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a06a:	2301      	movs	r3, #1
 800a06c:	73fb      	strb	r3, [r7, #15]
 800a06e:	e026      	b.n	800a0be <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a076:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2200      	movs	r2, #0
 800a086:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	7c1b      	ldrb	r3, [r3, #16]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d109      	bne.n	800a0ae <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 ff24 	bl	800bef4 <USBD_LL_PrepareReceive>
 800a0ac:	e007      	b.n	800a0be <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0b4:	2340      	movs	r3, #64	; 0x40
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f001 ff1b 	bl	800bef4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a0d8:	2181      	movs	r1, #129	; 0x81
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 fe3f 	bl	800bd5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f001 fe38 	bl	800bd5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a0f6:	2182      	movs	r1, #130	; 0x82
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 fe30 	bl	800bd5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00e      	beq.n	800a12c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a11e:	4618      	mov	r0, r3
 800a120:	f001 ff2a 	bl	800bf78 <USBD_static_free>
    pdev->pClassData = NULL;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b086      	sub	sp, #24
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a146:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a14c:	2300      	movs	r3, #0
 800a14e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d039      	beq.n	800a1d4 <USBD_CDC_Setup+0x9e>
 800a160:	2b20      	cmp	r3, #32
 800a162:	d17f      	bne.n	800a264 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	88db      	ldrh	r3, [r3, #6]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d029      	beq.n	800a1c0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	b25b      	sxtb	r3, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	da11      	bge.n	800a19a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a182:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	88d2      	ldrh	r2, [r2, #6]
 800a188:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a18a:	6939      	ldr	r1, [r7, #16]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	88db      	ldrh	r3, [r3, #6]
 800a190:	461a      	mov	r2, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f001 fa09 	bl	800b5aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a198:	e06b      	b.n	800a272 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	785a      	ldrb	r2, [r3, #1]
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	88db      	ldrh	r3, [r3, #6]
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a1b0:	6939      	ldr	r1, [r7, #16]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	88db      	ldrh	r3, [r3, #6]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 fa24 	bl	800b606 <USBD_CtlPrepareRx>
      break;
 800a1be:	e058      	b.n	800a272 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	7850      	ldrb	r0, [r2, #1]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	4798      	blx	r3
      break;
 800a1d2:	e04e      	b.n	800a272 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	785b      	ldrb	r3, [r3, #1]
 800a1d8:	2b0b      	cmp	r3, #11
 800a1da:	d02e      	beq.n	800a23a <USBD_CDC_Setup+0x104>
 800a1dc:	2b0b      	cmp	r3, #11
 800a1de:	dc38      	bgt.n	800a252 <USBD_CDC_Setup+0x11c>
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <USBD_CDC_Setup+0xb4>
 800a1e4:	2b0a      	cmp	r3, #10
 800a1e6:	d014      	beq.n	800a212 <USBD_CDC_Setup+0xdc>
 800a1e8:	e033      	b.n	800a252 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f0:	2b03      	cmp	r3, #3
 800a1f2:	d107      	bne.n	800a204 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a1f4:	f107 030c 	add.w	r3, r7, #12
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 f9d4 	bl	800b5aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a202:	e02e      	b.n	800a262 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f001 f965 	bl	800b4d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a20c:	2302      	movs	r3, #2
 800a20e:	75fb      	strb	r3, [r7, #23]
          break;
 800a210:	e027      	b.n	800a262 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d107      	bne.n	800a22c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a21c:	f107 030f 	add.w	r3, r7, #15
 800a220:	2201      	movs	r2, #1
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f001 f9c0 	bl	800b5aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a22a:	e01a      	b.n	800a262 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f001 f951 	bl	800b4d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a234:	2302      	movs	r3, #2
 800a236:	75fb      	strb	r3, [r7, #23]
          break;
 800a238:	e013      	b.n	800a262 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a240:	2b03      	cmp	r3, #3
 800a242:	d00d      	beq.n	800a260 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f001 f945 	bl	800b4d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a24c:	2302      	movs	r3, #2
 800a24e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a250:	e006      	b.n	800a260 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f001 f93e 	bl	800b4d6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a25a:	2302      	movs	r3, #2
 800a25c:	75fb      	strb	r3, [r7, #23]
          break;
 800a25e:	e000      	b.n	800a262 <USBD_CDC_Setup+0x12c>
          break;
 800a260:	bf00      	nop
      }
      break;
 800a262:	e006      	b.n	800a272 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 f935 	bl	800b4d6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a26c:	2302      	movs	r3, #2
 800a26e:	75fb      	strb	r3, [r7, #23]
      break;
 800a270:	bf00      	nop
  }

  return ret;
 800a272:	7dfb      	ldrb	r3, [r7, #23]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a296:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d03a      	beq.n	800a318 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a2a2:	78fa      	ldrb	r2, [r7, #3]
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	440b      	add	r3, r1
 800a2b0:	331c      	adds	r3, #28
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d029      	beq.n	800a30c <USBD_CDC_DataIn+0x90>
 800a2b8:	78fa      	ldrb	r2, [r7, #3]
 800a2ba:	6879      	ldr	r1, [r7, #4]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	331c      	adds	r3, #28
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	78f9      	ldrb	r1, [r7, #3]
 800a2cc:	68b8      	ldr	r0, [r7, #8]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	440b      	add	r3, r1
 800a2d4:	00db      	lsls	r3, r3, #3
 800a2d6:	4403      	add	r3, r0
 800a2d8:	3338      	adds	r3, #56	; 0x38
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a2e0:	fb01 f303 	mul.w	r3, r1, r3
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d110      	bne.n	800a30c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	440b      	add	r3, r1
 800a2f8:	331c      	adds	r3, #28
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a2fe:	78f9      	ldrb	r1, [r7, #3]
 800a300:	2300      	movs	r3, #0
 800a302:	2200      	movs	r2, #0
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f001 fdd2 	bl	800beae <USBD_LL_Transmit>
 800a30a:	e003      	b.n	800a314 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	e000      	b.n	800a31a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a318:	2302      	movs	r3, #2
  }
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	460b      	mov	r3, r1
 800a32c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a334:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a336:	78fb      	ldrb	r3, [r7, #3]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f001 fdfd 	bl	800bf3a <USBD_LL_GetRxDataSize>
 800a340:	4602      	mov	r2, r0
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00d      	beq.n	800a36e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a366:	4611      	mov	r1, r2
 800a368:	4798      	blx	r3

    return USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	e000      	b.n	800a370 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a36e:	2302      	movs	r3, #2
  }
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a386:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d015      	beq.n	800a3be <USBD_CDC_EP0_RxReady+0x46>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a398:	2bff      	cmp	r3, #255	; 0xff
 800a39a:	d010      	beq.n	800a3be <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a3aa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a3b2:	b292      	uxth	r2, r2
 800a3b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	22ff      	movs	r2, #255	; 0xff
 800a3ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2243      	movs	r2, #67	; 0x43
 800a3d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a3d6:	4b03      	ldr	r3, [pc, #12]	; (800a3e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bc80      	pop	{r7}
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	200000bc 	.word	0x200000bc

0800a3e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2243      	movs	r2, #67	; 0x43
 800a3f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a3f6:	4b03      	ldr	r3, [pc, #12]	; (800a404 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bc80      	pop	{r7}
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	20000078 	.word	0x20000078

0800a408 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2243      	movs	r2, #67	; 0x43
 800a414:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a416:	4b03      	ldr	r3, [pc, #12]	; (800a424 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bc80      	pop	{r7}
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	20000100 	.word	0x20000100

0800a428 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	220a      	movs	r2, #10
 800a434:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a436:	4b03      	ldr	r3, [pc, #12]	; (800a444 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	20000034 	.word	0x20000034

0800a448 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a452:	2302      	movs	r3, #2
 800a454:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d005      	beq.n	800a468 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a468:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	bc80      	pop	{r7}
 800a472:	4770      	bx	lr

0800a474 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a474:	b480      	push	{r7}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	4613      	mov	r3, r2
 800a480:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a488:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a492:	88fa      	ldrh	r2, [r7, #6]
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	371c      	adds	r7, #28
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bc80      	pop	{r7}
 800a4a4:	4770      	bx	lr

0800a4a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b085      	sub	sp, #20
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bc80      	pop	{r7}
 800a4ca:	4770      	bx	lr

0800a4cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d01c      	beq.n	800a520 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d115      	bne.n	800a51c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a50e:	b29b      	uxth	r3, r3
 800a510:	2181      	movs	r1, #129	; 0x81
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f001 fccb 	bl	800beae <USBD_LL_Transmit>

      return USBD_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	e002      	b.n	800a522 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e000      	b.n	800a522 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a520:	2302      	movs	r3, #2
  }
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a538:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a540:	2b00      	cmp	r3, #0
 800a542:	d017      	beq.n	800a574 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	7c1b      	ldrb	r3, [r3, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d109      	bne.n	800a560 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a552:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a556:	2101      	movs	r1, #1
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 fccb 	bl	800bef4 <USBD_LL_PrepareReceive>
 800a55e:	e007      	b.n	800a570 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a566:	2340      	movs	r3, #64	; 0x40
 800a568:	2101      	movs	r1, #1
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f001 fcc2 	bl	800bef4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	e000      	b.n	800a576 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a574:	2302      	movs	r3, #2
  }
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	60f8      	str	r0, [r7, #12]
 800a586:	60b9      	str	r1, [r7, #8]
 800a588:	4613      	mov	r3, r2
 800a58a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a592:	2302      	movs	r3, #2
 800a594:	e01a      	b.n	800a5cc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d003      	beq.n	800a5a8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	79fa      	ldrb	r2, [r7, #7]
 800a5c2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f001 fb2f 	bl	800bc28 <USBD_LL_Init>

  return USBD_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d006      	beq.n	800a5f6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73fb      	strb	r3, [r7, #15]
 800a5f4:	e001      	b.n	800a5fa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	bc80      	pop	{r7}
 800a604:	4770      	bx	lr

0800a606 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 fb64 	bl	800bcdc <USBD_LL_Start>

  return USBD_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bc80      	pop	{r7}
 800a630:	4770      	bx	lr

0800a632 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	460b      	mov	r3, r1
 800a63c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a63e:	2302      	movs	r3, #2
 800a640:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00c      	beq.n	800a666 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	78fa      	ldrb	r2, [r7, #3]
 800a656:	4611      	mov	r1, r2
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	4798      	blx	r3
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d101      	bne.n	800a666 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	78fa      	ldrb	r2, [r7, #3]
 800a686:	4611      	mov	r1, r2
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	4798      	blx	r3

  return USBD_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b082      	sub	sp, #8
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 fed8 	bl	800b45e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6bc:	461a      	mov	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a6ca:	f003 031f 	and.w	r3, r3, #31
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d016      	beq.n	800a700 <USBD_LL_SetupStage+0x6a>
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d81c      	bhi.n	800a710 <USBD_LL_SetupStage+0x7a>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <USBD_LL_SetupStage+0x4a>
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d008      	beq.n	800a6f0 <USBD_LL_SetupStage+0x5a>
 800a6de:	e017      	b.n	800a710 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f9cb 	bl	800aa84 <USBD_StdDevReq>
      break;
 800a6ee:	e01a      	b.n	800a726 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fa2d 	bl	800ab58 <USBD_StdItfReq>
      break;
 800a6fe:	e012      	b.n	800a726 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fa6d 	bl	800abe8 <USBD_StdEPReq>
      break;
 800a70e:	e00a      	b.n	800a726 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a716:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f001 fb3c 	bl	800bd9c <USBD_LL_StallEP>
      break;
 800a724:	bf00      	nop
  }

  return USBD_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	460b      	mov	r3, r1
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a73e:	7afb      	ldrb	r3, [r7, #11]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d14b      	bne.n	800a7dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a74a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a752:	2b03      	cmp	r3, #3
 800a754:	d134      	bne.n	800a7c0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	68da      	ldr	r2, [r3, #12]
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d919      	bls.n	800a796 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	68da      	ldr	r2, [r3, #12]
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	1ad2      	subs	r2, r2, r3
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a778:	429a      	cmp	r2, r3
 800a77a:	d203      	bcs.n	800a784 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a780:	b29b      	uxth	r3, r3
 800a782:	e002      	b.n	800a78a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a788:	b29b      	uxth	r3, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f000 ff57 	bl	800b642 <USBD_CtlContinueRx>
 800a794:	e038      	b.n	800a808 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00a      	beq.n	800a7b8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a7a8:	2b03      	cmp	r3, #3
 800a7aa:	d105      	bne.n	800a7b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 ff54 	bl	800b666 <USBD_CtlSendStatus>
 800a7be:	e023      	b.n	800a808 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7c6:	2b05      	cmp	r3, #5
 800a7c8:	d11e      	bne.n	800a808 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f001 fae1 	bl	800bd9c <USBD_LL_StallEP>
 800a7da:	e015      	b.n	800a808 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00d      	beq.n	800a804 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	d108      	bne.n	800a804 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	7afa      	ldrb	r2, [r7, #11]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	4798      	blx	r3
 800a802:	e001      	b.n	800a808 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a804:	2302      	movs	r3, #2
 800a806:	e000      	b.n	800a80a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b086      	sub	sp, #24
 800a816:	af00      	add	r7, sp, #0
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	460b      	mov	r3, r1
 800a81c:	607a      	str	r2, [r7, #4]
 800a81e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a820:	7afb      	ldrb	r3, [r7, #11]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d17f      	bne.n	800a926 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3314      	adds	r3, #20
 800a82a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a832:	2b02      	cmp	r3, #2
 800a834:	d15c      	bne.n	800a8f0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	68da      	ldr	r2, [r3, #12]
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d915      	bls.n	800a86e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	68da      	ldr	r2, [r3, #12]
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	b29b      	uxth	r3, r3
 800a856:	461a      	mov	r2, r3
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 fec1 	bl	800b5e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a860:	2300      	movs	r3, #0
 800a862:	2200      	movs	r2, #0
 800a864:	2100      	movs	r1, #0
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f001 fb44 	bl	800bef4 <USBD_LL_PrepareReceive>
 800a86c:	e04e      	b.n	800a90c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	6912      	ldr	r2, [r2, #16]
 800a876:	fbb3 f1f2 	udiv	r1, r3, r2
 800a87a:	fb01 f202 	mul.w	r2, r1, r2
 800a87e:	1a9b      	subs	r3, r3, r2
 800a880:	2b00      	cmp	r3, #0
 800a882:	d11c      	bne.n	800a8be <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	689a      	ldr	r2, [r3, #8]
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d316      	bcc.n	800a8be <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	689a      	ldr	r2, [r3, #8]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d20f      	bcs.n	800a8be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 fe9d 	bl	800b5e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f001 fb1c 	bl	800bef4 <USBD_LL_PrepareReceive>
 800a8bc:	e026      	b.n	800a90c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00a      	beq.n	800a8e0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	d105      	bne.n	800a8e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a8e0:	2180      	movs	r1, #128	; 0x80
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f001 fa5a 	bl	800bd9c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f000 fecf 	bl	800b68c <USBD_CtlReceiveStatus>
 800a8ee:	e00d      	b.n	800a90c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	d004      	beq.n	800a904 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a900:	2b00      	cmp	r3, #0
 800a902:	d103      	bne.n	800a90c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a904:	2180      	movs	r1, #128	; 0x80
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f001 fa48 	bl	800bd9c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a912:	2b01      	cmp	r3, #1
 800a914:	d11d      	bne.n	800a952 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f7ff fe81 	bl	800a61e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a924:	e015      	b.n	800a952 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00d      	beq.n	800a94e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a938:	2b03      	cmp	r3, #3
 800a93a:	d108      	bne.n	800a94e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	7afa      	ldrb	r2, [r7, #11]
 800a946:	4611      	mov	r1, r2
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	4798      	blx	r3
 800a94c:	e001      	b.n	800a952 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a94e:	2302      	movs	r3, #2
 800a950:	e000      	b.n	800a954 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3718      	adds	r7, #24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a964:	2340      	movs	r3, #64	; 0x40
 800a966:	2200      	movs	r2, #0
 800a968:	2100      	movs	r1, #0
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f001 f9d1 	bl	800bd12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2240      	movs	r2, #64	; 0x40
 800a97c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a980:	2340      	movs	r3, #64	; 0x40
 800a982:	2200      	movs	r2, #0
 800a984:	2180      	movs	r1, #128	; 0x80
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f001 f9c3 	bl	800bd12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2240      	movs	r2, #64	; 0x40
 800a996:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d009      	beq.n	800a9d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	6852      	ldr	r2, [r2, #4]
 800a9cc:	b2d2      	uxtb	r2, r2
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	4798      	blx	r3
  }

  return USBD_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3708      	adds	r7, #8
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b083      	sub	sp, #12
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	78fa      	ldrb	r2, [r7, #3]
 800a9ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bc80      	pop	{r7}
 800a9fa:	4770      	bx	lr

0800a9fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2204      	movs	r2, #4
 800aa14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bc80      	pop	{r7}
 800aa22:	4770      	bx	lr

0800aa24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	d105      	bne.n	800aa42 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bc80      	pop	{r7}
 800aa4c:	4770      	bx	lr

0800aa4e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa5c:	2b03      	cmp	r3, #3
 800aa5e:	d10b      	bne.n	800aa78 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa66:	69db      	ldr	r3, [r3, #28]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d005      	beq.n	800aa78 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa72:	69db      	ldr	r3, [r3, #28]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
	...

0800aa84 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa9a:	2b40      	cmp	r3, #64	; 0x40
 800aa9c:	d005      	beq.n	800aaaa <USBD_StdDevReq+0x26>
 800aa9e:	2b40      	cmp	r3, #64	; 0x40
 800aaa0:	d84f      	bhi.n	800ab42 <USBD_StdDevReq+0xbe>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d009      	beq.n	800aaba <USBD_StdDevReq+0x36>
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	d14b      	bne.n	800ab42 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	6839      	ldr	r1, [r7, #0]
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	4798      	blx	r3
      break;
 800aab8:	e048      	b.n	800ab4c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	785b      	ldrb	r3, [r3, #1]
 800aabe:	2b09      	cmp	r3, #9
 800aac0:	d839      	bhi.n	800ab36 <USBD_StdDevReq+0xb2>
 800aac2:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <USBD_StdDevReq+0x44>)
 800aac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac8:	0800ab19 	.word	0x0800ab19
 800aacc:	0800ab2d 	.word	0x0800ab2d
 800aad0:	0800ab37 	.word	0x0800ab37
 800aad4:	0800ab23 	.word	0x0800ab23
 800aad8:	0800ab37 	.word	0x0800ab37
 800aadc:	0800aafb 	.word	0x0800aafb
 800aae0:	0800aaf1 	.word	0x0800aaf1
 800aae4:	0800ab37 	.word	0x0800ab37
 800aae8:	0800ab0f 	.word	0x0800ab0f
 800aaec:	0800ab05 	.word	0x0800ab05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f9dc 	bl	800aeb0 <USBD_GetDescriptor>
          break;
 800aaf8:	e022      	b.n	800ab40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fb3f 	bl	800b180 <USBD_SetAddress>
          break;
 800ab02:	e01d      	b.n	800ab40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fb7e 	bl	800b208 <USBD_SetConfig>
          break;
 800ab0c:	e018      	b.n	800ab40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fc07 	bl	800b324 <USBD_GetConfig>
          break;
 800ab16:	e013      	b.n	800ab40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fc37 	bl	800b38e <USBD_GetStatus>
          break;
 800ab20:	e00e      	b.n	800ab40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fc65 	bl	800b3f4 <USBD_SetFeature>
          break;
 800ab2a:	e009      	b.n	800ab40 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fc74 	bl	800b41c <USBD_ClrFeature>
          break;
 800ab34:	e004      	b.n	800ab40 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fccc 	bl	800b4d6 <USBD_CtlError>
          break;
 800ab3e:	bf00      	nop
      }
      break;
 800ab40:	e004      	b.n	800ab4c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fcc6 	bl	800b4d6 <USBD_CtlError>
      break;
 800ab4a:	bf00      	nop
  }

  return ret;
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop

0800ab58 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab6e:	2b40      	cmp	r3, #64	; 0x40
 800ab70:	d005      	beq.n	800ab7e <USBD_StdItfReq+0x26>
 800ab72:	2b40      	cmp	r3, #64	; 0x40
 800ab74:	d82e      	bhi.n	800abd4 <USBD_StdItfReq+0x7c>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <USBD_StdItfReq+0x26>
 800ab7a:	2b20      	cmp	r3, #32
 800ab7c:	d12a      	bne.n	800abd4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab84:	3b01      	subs	r3, #1
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d81d      	bhi.n	800abc6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	889b      	ldrh	r3, [r3, #4]
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d813      	bhi.n	800abbc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	4798      	blx	r3
 800aba2:	4603      	mov	r3, r0
 800aba4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	88db      	ldrh	r3, [r3, #6]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d110      	bne.n	800abd0 <USBD_StdItfReq+0x78>
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10d      	bne.n	800abd0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fd56 	bl	800b666 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abba:	e009      	b.n	800abd0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800abbc:	6839      	ldr	r1, [r7, #0]
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fc89 	bl	800b4d6 <USBD_CtlError>
          break;
 800abc4:	e004      	b.n	800abd0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fc84 	bl	800b4d6 <USBD_CtlError>
          break;
 800abce:	e000      	b.n	800abd2 <USBD_StdItfReq+0x7a>
          break;
 800abd0:	bf00      	nop
      }
      break;
 800abd2:	e004      	b.n	800abde <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fc7d 	bl	800b4d6 <USBD_CtlError>
      break;
 800abdc:	bf00      	nop
  }

  return USBD_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	889b      	ldrh	r3, [r3, #4]
 800abfa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac04:	2b40      	cmp	r3, #64	; 0x40
 800ac06:	d007      	beq.n	800ac18 <USBD_StdEPReq+0x30>
 800ac08:	2b40      	cmp	r3, #64	; 0x40
 800ac0a:	f200 8146 	bhi.w	800ae9a <USBD_StdEPReq+0x2b2>
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <USBD_StdEPReq+0x40>
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	f040 8141 	bne.w	800ae9a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	6839      	ldr	r1, [r7, #0]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
      break;
 800ac26:	e13d      	b.n	800aea4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac30:	2b20      	cmp	r3, #32
 800ac32:	d10a      	bne.n	800ac4a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	4798      	blx	r3
 800ac42:	4603      	mov	r3, r0
 800ac44:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	e12d      	b.n	800aea6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	785b      	ldrb	r3, [r3, #1]
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d007      	beq.n	800ac62 <USBD_StdEPReq+0x7a>
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	f300 811b 	bgt.w	800ae8e <USBD_StdEPReq+0x2a6>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d072      	beq.n	800ad42 <USBD_StdEPReq+0x15a>
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d03a      	beq.n	800acd6 <USBD_StdEPReq+0xee>
 800ac60:	e115      	b.n	800ae8e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d002      	beq.n	800ac72 <USBD_StdEPReq+0x8a>
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	d015      	beq.n	800ac9c <USBD_StdEPReq+0xb4>
 800ac70:	e02b      	b.n	800acca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac72:	7bbb      	ldrb	r3, [r7, #14]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00c      	beq.n	800ac92 <USBD_StdEPReq+0xaa>
 800ac78:	7bbb      	ldrb	r3, [r7, #14]
 800ac7a:	2b80      	cmp	r3, #128	; 0x80
 800ac7c:	d009      	beq.n	800ac92 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f001 f88a 	bl	800bd9c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ac88:	2180      	movs	r1, #128	; 0x80
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f001 f886 	bl	800bd9c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac90:	e020      	b.n	800acd4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fc1e 	bl	800b4d6 <USBD_CtlError>
              break;
 800ac9a:	e01b      	b.n	800acd4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	885b      	ldrh	r3, [r3, #2]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10e      	bne.n	800acc2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800aca4:	7bbb      	ldrb	r3, [r7, #14]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00b      	beq.n	800acc2 <USBD_StdEPReq+0xda>
 800acaa:	7bbb      	ldrb	r3, [r7, #14]
 800acac:	2b80      	cmp	r3, #128	; 0x80
 800acae:	d008      	beq.n	800acc2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	88db      	ldrh	r3, [r3, #6]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d104      	bne.n	800acc2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800acb8:	7bbb      	ldrb	r3, [r7, #14]
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f001 f86d 	bl	800bd9c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fccf 	bl	800b666 <USBD_CtlSendStatus>

              break;
 800acc8:	e004      	b.n	800acd4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fc02 	bl	800b4d6 <USBD_CtlError>
              break;
 800acd2:	bf00      	nop
          }
          break;
 800acd4:	e0e0      	b.n	800ae98 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d002      	beq.n	800ace6 <USBD_StdEPReq+0xfe>
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d015      	beq.n	800ad10 <USBD_StdEPReq+0x128>
 800ace4:	e026      	b.n	800ad34 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ace6:	7bbb      	ldrb	r3, [r7, #14]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00c      	beq.n	800ad06 <USBD_StdEPReq+0x11e>
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	2b80      	cmp	r3, #128	; 0x80
 800acf0:	d009      	beq.n	800ad06 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800acf2:	7bbb      	ldrb	r3, [r7, #14]
 800acf4:	4619      	mov	r1, r3
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f001 f850 	bl	800bd9c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800acfc:	2180      	movs	r1, #128	; 0x80
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f001 f84c 	bl	800bd9c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad04:	e01c      	b.n	800ad40 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fbe4 	bl	800b4d6 <USBD_CtlError>
              break;
 800ad0e:	e017      	b.n	800ad40 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	885b      	ldrh	r3, [r3, #2]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d112      	bne.n	800ad3e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d004      	beq.n	800ad2c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad22:	7bbb      	ldrb	r3, [r7, #14]
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f001 f857 	bl	800bdda <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fc9a 	bl	800b666 <USBD_CtlSendStatus>
              }
              break;
 800ad32:	e004      	b.n	800ad3e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fbcd 	bl	800b4d6 <USBD_CtlError>
              break;
 800ad3c:	e000      	b.n	800ad40 <USBD_StdEPReq+0x158>
              break;
 800ad3e:	bf00      	nop
          }
          break;
 800ad40:	e0aa      	b.n	800ae98 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d002      	beq.n	800ad52 <USBD_StdEPReq+0x16a>
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d032      	beq.n	800adb6 <USBD_StdEPReq+0x1ce>
 800ad50:	e097      	b.n	800ae82 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d007      	beq.n	800ad68 <USBD_StdEPReq+0x180>
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	2b80      	cmp	r3, #128	; 0x80
 800ad5c:	d004      	beq.n	800ad68 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fbb8 	bl	800b4d6 <USBD_CtlError>
                break;
 800ad66:	e091      	b.n	800ae8c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	da0b      	bge.n	800ad88 <USBD_StdEPReq+0x1a0>
 800ad70:	7bbb      	ldrb	r3, [r7, #14]
 800ad72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad76:	4613      	mov	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	3310      	adds	r3, #16
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	4413      	add	r3, r2
 800ad84:	3304      	adds	r3, #4
 800ad86:	e00b      	b.n	800ada0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	3304      	adds	r3, #4
 800ada0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	2200      	movs	r2, #0
 800ada6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2202      	movs	r2, #2
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fbfb 	bl	800b5aa <USBD_CtlSendData>
              break;
 800adb4:	e06a      	b.n	800ae8c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800adb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	da11      	bge.n	800ade2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	f003 020f 	and.w	r2, r3, #15
 800adc4:	6879      	ldr	r1, [r7, #4]
 800adc6:	4613      	mov	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	440b      	add	r3, r1
 800add0:	3318      	adds	r3, #24
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d117      	bne.n	800ae08 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fb7b 	bl	800b4d6 <USBD_CtlError>
                  break;
 800ade0:	e054      	b.n	800ae8c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ade2:	7bbb      	ldrb	r3, [r7, #14]
 800ade4:	f003 020f 	and.w	r2, r3, #15
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	440b      	add	r3, r1
 800adf4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d104      	bne.n	800ae08 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fb68 	bl	800b4d6 <USBD_CtlError>
                  break;
 800ae06:	e041      	b.n	800ae8c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	da0b      	bge.n	800ae28 <USBD_StdEPReq+0x240>
 800ae10:	7bbb      	ldrb	r3, [r7, #14]
 800ae12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	3310      	adds	r3, #16
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	4413      	add	r3, r2
 800ae24:	3304      	adds	r3, #4
 800ae26:	e00b      	b.n	800ae40 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae2e:	4613      	mov	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	4413      	add	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	3304      	adds	r3, #4
 800ae40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <USBD_StdEPReq+0x266>
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
 800ae4a:	2b80      	cmp	r3, #128	; 0x80
 800ae4c:	d103      	bne.n	800ae56 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2200      	movs	r2, #0
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e00e      	b.n	800ae74 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 ffdc 	bl	800be18 <USBD_LL_IsStallEP>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	e002      	b.n	800ae74 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2202      	movs	r2, #2
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fb95 	bl	800b5aa <USBD_CtlSendData>
              break;
 800ae80:	e004      	b.n	800ae8c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fb26 	bl	800b4d6 <USBD_CtlError>
              break;
 800ae8a:	bf00      	nop
          }
          break;
 800ae8c:	e004      	b.n	800ae98 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fb20 	bl	800b4d6 <USBD_CtlError>
          break;
 800ae96:	bf00      	nop
      }
      break;
 800ae98:	e004      	b.n	800aea4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fb1a 	bl	800b4d6 <USBD_CtlError>
      break;
 800aea2:	bf00      	nop
  }

  return ret;
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
	...

0800aeb0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aeba:	2300      	movs	r3, #0
 800aebc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	885b      	ldrh	r3, [r3, #2]
 800aeca:	0a1b      	lsrs	r3, r3, #8
 800aecc:	b29b      	uxth	r3, r3
 800aece:	3b01      	subs	r3, #1
 800aed0:	2b06      	cmp	r3, #6
 800aed2:	f200 8128 	bhi.w	800b126 <USBD_GetDescriptor+0x276>
 800aed6:	a201      	add	r2, pc, #4	; (adr r2, 800aedc <USBD_GetDescriptor+0x2c>)
 800aed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aedc:	0800aef9 	.word	0x0800aef9
 800aee0:	0800af11 	.word	0x0800af11
 800aee4:	0800af51 	.word	0x0800af51
 800aee8:	0800b127 	.word	0x0800b127
 800aeec:	0800b127 	.word	0x0800b127
 800aef0:	0800b0c7 	.word	0x0800b0c7
 800aef4:	0800b0f3 	.word	0x0800b0f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	7c12      	ldrb	r2, [r2, #16]
 800af04:	f107 0108 	add.w	r1, r7, #8
 800af08:	4610      	mov	r0, r2
 800af0a:	4798      	blx	r3
 800af0c:	60f8      	str	r0, [r7, #12]
      break;
 800af0e:	e112      	b.n	800b136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	7c1b      	ldrb	r3, [r3, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10d      	bne.n	800af34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af20:	f107 0208 	add.w	r2, r7, #8
 800af24:	4610      	mov	r0, r2
 800af26:	4798      	blx	r3
 800af28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3301      	adds	r3, #1
 800af2e:	2202      	movs	r2, #2
 800af30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af32:	e100      	b.n	800b136 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	f107 0208 	add.w	r2, r7, #8
 800af40:	4610      	mov	r0, r2
 800af42:	4798      	blx	r3
 800af44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3301      	adds	r3, #1
 800af4a:	2202      	movs	r2, #2
 800af4c:	701a      	strb	r2, [r3, #0]
      break;
 800af4e:	e0f2      	b.n	800b136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	885b      	ldrh	r3, [r3, #2]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b05      	cmp	r3, #5
 800af58:	f200 80ac 	bhi.w	800b0b4 <USBD_GetDescriptor+0x204>
 800af5c:	a201      	add	r2, pc, #4	; (adr r2, 800af64 <USBD_GetDescriptor+0xb4>)
 800af5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af62:	bf00      	nop
 800af64:	0800af7d 	.word	0x0800af7d
 800af68:	0800afb1 	.word	0x0800afb1
 800af6c:	0800afe5 	.word	0x0800afe5
 800af70:	0800b019 	.word	0x0800b019
 800af74:	0800b04d 	.word	0x0800b04d
 800af78:	0800b081 	.word	0x0800b081
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00b      	beq.n	800afa0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	7c12      	ldrb	r2, [r2, #16]
 800af94:	f107 0108 	add.w	r1, r7, #8
 800af98:	4610      	mov	r0, r2
 800af9a:	4798      	blx	r3
 800af9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af9e:	e091      	b.n	800b0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fa97 	bl	800b4d6 <USBD_CtlError>
            err++;
 800afa8:	7afb      	ldrb	r3, [r7, #11]
 800afaa:	3301      	adds	r3, #1
 800afac:	72fb      	strb	r3, [r7, #11]
          break;
 800afae:	e089      	b.n	800b0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00b      	beq.n	800afd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	7c12      	ldrb	r2, [r2, #16]
 800afc8:	f107 0108 	add.w	r1, r7, #8
 800afcc:	4610      	mov	r0, r2
 800afce:	4798      	blx	r3
 800afd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afd2:	e077      	b.n	800b0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fa7d 	bl	800b4d6 <USBD_CtlError>
            err++;
 800afdc:	7afb      	ldrb	r3, [r7, #11]
 800afde:	3301      	adds	r3, #1
 800afe0:	72fb      	strb	r3, [r7, #11]
          break;
 800afe2:	e06f      	b.n	800b0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00b      	beq.n	800b008 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	7c12      	ldrb	r2, [r2, #16]
 800affc:	f107 0108 	add.w	r1, r7, #8
 800b000:	4610      	mov	r0, r2
 800b002:	4798      	blx	r3
 800b004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b006:	e05d      	b.n	800b0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fa63 	bl	800b4d6 <USBD_CtlError>
            err++;
 800b010:	7afb      	ldrb	r3, [r7, #11]
 800b012:	3301      	adds	r3, #1
 800b014:	72fb      	strb	r3, [r7, #11]
          break;
 800b016:	e055      	b.n	800b0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00b      	beq.n	800b03c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	7c12      	ldrb	r2, [r2, #16]
 800b030:	f107 0108 	add.w	r1, r7, #8
 800b034:	4610      	mov	r0, r2
 800b036:	4798      	blx	r3
 800b038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b03a:	e043      	b.n	800b0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fa49 	bl	800b4d6 <USBD_CtlError>
            err++;
 800b044:	7afb      	ldrb	r3, [r7, #11]
 800b046:	3301      	adds	r3, #1
 800b048:	72fb      	strb	r3, [r7, #11]
          break;
 800b04a:	e03b      	b.n	800b0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00b      	beq.n	800b070 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	7c12      	ldrb	r2, [r2, #16]
 800b064:	f107 0108 	add.w	r1, r7, #8
 800b068:	4610      	mov	r0, r2
 800b06a:	4798      	blx	r3
 800b06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b06e:	e029      	b.n	800b0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa2f 	bl	800b4d6 <USBD_CtlError>
            err++;
 800b078:	7afb      	ldrb	r3, [r7, #11]
 800b07a:	3301      	adds	r3, #1
 800b07c:	72fb      	strb	r3, [r7, #11]
          break;
 800b07e:	e021      	b.n	800b0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00b      	beq.n	800b0a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	7c12      	ldrb	r2, [r2, #16]
 800b098:	f107 0108 	add.w	r1, r7, #8
 800b09c:	4610      	mov	r0, r2
 800b09e:	4798      	blx	r3
 800b0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0a2:	e00f      	b.n	800b0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fa15 	bl	800b4d6 <USBD_CtlError>
            err++;
 800b0ac:	7afb      	ldrb	r3, [r7, #11]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b0b2:	e007      	b.n	800b0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fa0d 	bl	800b4d6 <USBD_CtlError>
          err++;
 800b0bc:	7afb      	ldrb	r3, [r7, #11]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b0c2:	e038      	b.n	800b136 <USBD_GetDescriptor+0x286>
 800b0c4:	e037      	b.n	800b136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	7c1b      	ldrb	r3, [r3, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d109      	bne.n	800b0e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d6:	f107 0208 	add.w	r2, r7, #8
 800b0da:	4610      	mov	r0, r2
 800b0dc:	4798      	blx	r3
 800b0de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0e0:	e029      	b.n	800b136 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f9f6 	bl	800b4d6 <USBD_CtlError>
        err++;
 800b0ea:	7afb      	ldrb	r3, [r7, #11]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	72fb      	strb	r3, [r7, #11]
      break;
 800b0f0:	e021      	b.n	800b136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	7c1b      	ldrb	r3, [r3, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10d      	bne.n	800b116 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b102:	f107 0208 	add.w	r2, r7, #8
 800b106:	4610      	mov	r0, r2
 800b108:	4798      	blx	r3
 800b10a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3301      	adds	r3, #1
 800b110:	2207      	movs	r2, #7
 800b112:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b114:	e00f      	b.n	800b136 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f9dc 	bl	800b4d6 <USBD_CtlError>
        err++;
 800b11e:	7afb      	ldrb	r3, [r7, #11]
 800b120:	3301      	adds	r3, #1
 800b122:	72fb      	strb	r3, [r7, #11]
      break;
 800b124:	e007      	b.n	800b136 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f9d4 	bl	800b4d6 <USBD_CtlError>
      err++;
 800b12e:	7afb      	ldrb	r3, [r7, #11]
 800b130:	3301      	adds	r3, #1
 800b132:	72fb      	strb	r3, [r7, #11]
      break;
 800b134:	bf00      	nop
  }

  if (err != 0U)
 800b136:	7afb      	ldrb	r3, [r7, #11]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d11c      	bne.n	800b176 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b13c:	893b      	ldrh	r3, [r7, #8]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d011      	beq.n	800b166 <USBD_GetDescriptor+0x2b6>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	88db      	ldrh	r3, [r3, #6]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00d      	beq.n	800b166 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	88da      	ldrh	r2, [r3, #6]
 800b14e:	893b      	ldrh	r3, [r7, #8]
 800b150:	4293      	cmp	r3, r2
 800b152:	bf28      	it	cs
 800b154:	4613      	movcs	r3, r2
 800b156:	b29b      	uxth	r3, r3
 800b158:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b15a:	893b      	ldrh	r3, [r7, #8]
 800b15c:	461a      	mov	r2, r3
 800b15e:	68f9      	ldr	r1, [r7, #12]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fa22 	bl	800b5aa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	88db      	ldrh	r3, [r3, #6]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d104      	bne.n	800b178 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fa79 	bl	800b666 <USBD_CtlSendStatus>
 800b174:	e000      	b.n	800b178 <USBD_GetDescriptor+0x2c8>
    return;
 800b176:	bf00      	nop
    }
  }
}
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop

0800b180 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	889b      	ldrh	r3, [r3, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d130      	bne.n	800b1f4 <USBD_SetAddress+0x74>
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	88db      	ldrh	r3, [r3, #6]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d12c      	bne.n	800b1f4 <USBD_SetAddress+0x74>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	885b      	ldrh	r3, [r3, #2]
 800b19e:	2b7f      	cmp	r3, #127	; 0x7f
 800b1a0:	d828      	bhi.n	800b1f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	885b      	ldrh	r3, [r3, #2]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d104      	bne.n	800b1c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f98b 	bl	800b4d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c0:	e01d      	b.n	800b1fe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	7bfa      	ldrb	r2, [r7, #15]
 800b1c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fe4e 	bl	800be70 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fa46 	bl	800b666 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d004      	beq.n	800b1ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1e8:	e009      	b.n	800b1fe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1f2:	e004      	b.n	800b1fe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f96d 	bl	800b4d6 <USBD_CtlError>
  }
}
 800b1fc:	bf00      	nop
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
	...

0800b208 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	885b      	ldrh	r3, [r3, #2]
 800b216:	b2da      	uxtb	r2, r3
 800b218:	4b41      	ldr	r3, [pc, #260]	; (800b320 <USBD_SetConfig+0x118>)
 800b21a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b21c:	4b40      	ldr	r3, [pc, #256]	; (800b320 <USBD_SetConfig+0x118>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d904      	bls.n	800b22e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f955 	bl	800b4d6 <USBD_CtlError>
 800b22c:	e075      	b.n	800b31a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b234:	2b02      	cmp	r3, #2
 800b236:	d002      	beq.n	800b23e <USBD_SetConfig+0x36>
 800b238:	2b03      	cmp	r3, #3
 800b23a:	d023      	beq.n	800b284 <USBD_SetConfig+0x7c>
 800b23c:	e062      	b.n	800b304 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b23e:	4b38      	ldr	r3, [pc, #224]	; (800b320 <USBD_SetConfig+0x118>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d01a      	beq.n	800b27c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b246:	4b36      	ldr	r3, [pc, #216]	; (800b320 <USBD_SetConfig+0x118>)
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2203      	movs	r2, #3
 800b254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b258:	4b31      	ldr	r3, [pc, #196]	; (800b320 <USBD_SetConfig+0x118>)
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7ff f9e7 	bl	800a632 <USBD_SetClassConfig>
 800b264:	4603      	mov	r3, r0
 800b266:	2b02      	cmp	r3, #2
 800b268:	d104      	bne.n	800b274 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 f932 	bl	800b4d6 <USBD_CtlError>
            return;
 800b272:	e052      	b.n	800b31a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f9f6 	bl	800b666 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b27a:	e04e      	b.n	800b31a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f9f2 	bl	800b666 <USBD_CtlSendStatus>
        break;
 800b282:	e04a      	b.n	800b31a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b284:	4b26      	ldr	r3, [pc, #152]	; (800b320 <USBD_SetConfig+0x118>)
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d112      	bne.n	800b2b2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2202      	movs	r2, #2
 800b290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b294:	4b22      	ldr	r3, [pc, #136]	; (800b320 <USBD_SetConfig+0x118>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	461a      	mov	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b29e:	4b20      	ldr	r3, [pc, #128]	; (800b320 <USBD_SetConfig+0x118>)
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f7ff f9e3 	bl	800a670 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f9db 	bl	800b666 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b2b0:	e033      	b.n	800b31a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b2b2:	4b1b      	ldr	r3, [pc, #108]	; (800b320 <USBD_SetConfig+0x118>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d01d      	beq.n	800b2fc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7ff f9d1 	bl	800a670 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b2ce:	4b14      	ldr	r3, [pc, #80]	; (800b320 <USBD_SetConfig+0x118>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b2d8:	4b11      	ldr	r3, [pc, #68]	; (800b320 <USBD_SetConfig+0x118>)
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7ff f9a7 	bl	800a632 <USBD_SetClassConfig>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d104      	bne.n	800b2f4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f8f2 	bl	800b4d6 <USBD_CtlError>
            return;
 800b2f2:	e012      	b.n	800b31a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f9b6 	bl	800b666 <USBD_CtlSendStatus>
        break;
 800b2fa:	e00e      	b.n	800b31a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f9b2 	bl	800b666 <USBD_CtlSendStatus>
        break;
 800b302:	e00a      	b.n	800b31a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f8e5 	bl	800b4d6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b30c:	4b04      	ldr	r3, [pc, #16]	; (800b320 <USBD_SetConfig+0x118>)
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	4619      	mov	r1, r3
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7ff f9ac 	bl	800a670 <USBD_ClrClassConfig>
        break;
 800b318:	bf00      	nop
    }
  }
}
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	200004c8 	.word	0x200004c8

0800b324 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	88db      	ldrh	r3, [r3, #6]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d004      	beq.n	800b340 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f8cc 	bl	800b4d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b33e:	e022      	b.n	800b386 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b346:	2b02      	cmp	r3, #2
 800b348:	dc02      	bgt.n	800b350 <USBD_GetConfig+0x2c>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	dc03      	bgt.n	800b356 <USBD_GetConfig+0x32>
 800b34e:	e015      	b.n	800b37c <USBD_GetConfig+0x58>
 800b350:	2b03      	cmp	r3, #3
 800b352:	d00b      	beq.n	800b36c <USBD_GetConfig+0x48>
 800b354:	e012      	b.n	800b37c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3308      	adds	r3, #8
 800b360:	2201      	movs	r2, #1
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f920 	bl	800b5aa <USBD_CtlSendData>
        break;
 800b36a:	e00c      	b.n	800b386 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3304      	adds	r3, #4
 800b370:	2201      	movs	r2, #1
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f918 	bl	800b5aa <USBD_CtlSendData>
        break;
 800b37a:	e004      	b.n	800b386 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b37c:	6839      	ldr	r1, [r7, #0]
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f8a9 	bl	800b4d6 <USBD_CtlError>
        break;
 800b384:	bf00      	nop
}
 800b386:	bf00      	nop
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b082      	sub	sp, #8
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d81e      	bhi.n	800b3e2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	88db      	ldrh	r3, [r3, #6]
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d004      	beq.n	800b3b6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f891 	bl	800b4d6 <USBD_CtlError>
        break;
 800b3b4:	e01a      	b.n	800b3ec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d005      	beq.n	800b3d2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	f043 0202 	orr.w	r2, r3, #2
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	330c      	adds	r3, #12
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f8e5 	bl	800b5aa <USBD_CtlSendData>
      break;
 800b3e0:	e004      	b.n	800b3ec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 f876 	bl	800b4d6 <USBD_CtlError>
      break;
 800b3ea:	bf00      	nop
  }
}
 800b3ec:	bf00      	nop
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	885b      	ldrh	r3, [r3, #2]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d106      	bne.n	800b414 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f929 	bl	800b666 <USBD_CtlSendStatus>
  }
}
 800b414:	bf00      	nop
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b42c:	3b01      	subs	r3, #1
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d80b      	bhi.n	800b44a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	885b      	ldrh	r3, [r3, #2]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d10c      	bne.n	800b454 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 f90f 	bl	800b666 <USBD_CtlSendStatus>
      }
      break;
 800b448:	e004      	b.n	800b454 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f842 	bl	800b4d6 <USBD_CtlError>
      break;
 800b452:	e000      	b.n	800b456 <USBD_ClrFeature+0x3a>
      break;
 800b454:	bf00      	nop
  }
}
 800b456:	bf00      	nop
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b45e:	b480      	push	{r7}
 800b460:	b083      	sub	sp, #12
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	781a      	ldrb	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	785a      	ldrb	r2, [r3, #1]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	3302      	adds	r3, #2
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	b29a      	uxth	r2, r3
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	3303      	adds	r3, #3
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	b29b      	uxth	r3, r3
 800b488:	021b      	lsls	r3, r3, #8
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	4413      	add	r3, r2
 800b48e:	b29a      	uxth	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	3304      	adds	r3, #4
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	3305      	adds	r3, #5
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	021b      	lsls	r3, r3, #8
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	4413      	add	r3, r2
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	3306      	adds	r3, #6
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	3307      	adds	r3, #7
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	021b      	lsls	r3, r3, #8
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	4413      	add	r3, r2
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	80da      	strh	r2, [r3, #6]

}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bc80      	pop	{r7}
 800b4d4:	4770      	bx	lr

0800b4d6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b4e0:	2180      	movs	r1, #128	; 0x80
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fc5a 	bl	800bd9c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fc56 	bl	800bd9c <USBD_LL_StallEP>
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b504:	2300      	movs	r3, #0
 800b506:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d032      	beq.n	800b574 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f000 f834 	bl	800b57c <USBD_GetLen>
 800b514:	4603      	mov	r3, r0
 800b516:	3301      	adds	r3, #1
 800b518:	b29b      	uxth	r3, r3
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b522:	7dfb      	ldrb	r3, [r7, #23]
 800b524:	1c5a      	adds	r2, r3, #1
 800b526:	75fa      	strb	r2, [r7, #23]
 800b528:	461a      	mov	r2, r3
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	4413      	add	r3, r2
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	7812      	ldrb	r2, [r2, #0]
 800b532:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	75fa      	strb	r2, [r7, #23]
 800b53a:	461a      	mov	r2, r3
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	4413      	add	r3, r2
 800b540:	2203      	movs	r2, #3
 800b542:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b544:	e012      	b.n	800b56c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	60fa      	str	r2, [r7, #12]
 800b54c:	7dfa      	ldrb	r2, [r7, #23]
 800b54e:	1c51      	adds	r1, r2, #1
 800b550:	75f9      	strb	r1, [r7, #23]
 800b552:	4611      	mov	r1, r2
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	440a      	add	r2, r1
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b55c:	7dfb      	ldrb	r3, [r7, #23]
 800b55e:	1c5a      	adds	r2, r3, #1
 800b560:	75fa      	strb	r2, [r7, #23]
 800b562:	461a      	mov	r2, r3
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	4413      	add	r3, r2
 800b568:	2200      	movs	r2, #0
 800b56a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1e8      	bne.n	800b546 <USBD_GetString+0x4e>
    }
  }
}
 800b574:	bf00      	nop
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b584:	2300      	movs	r3, #0
 800b586:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b588:	e005      	b.n	800b596 <USBD_GetLen+0x1a>
  {
    len++;
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
 800b58c:	3301      	adds	r3, #1
 800b58e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3301      	adds	r3, #1
 800b594:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1f5      	bne.n	800b58a <USBD_GetLen+0xe>
  }

  return len;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bc80      	pop	{r7}
 800b5a8:	4770      	bx	lr

0800b5aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b5c0:	88fa      	ldrh	r2, [r7, #6]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b5c6:	88fa      	ldrh	r2, [r7, #6]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5cc:	88fb      	ldrh	r3, [r7, #6]
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 fc6b 	bl	800beae <USBD_LL_Transmit>

  return USBD_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b084      	sub	sp, #16
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	60f8      	str	r0, [r7, #12]
 800b5ea:	60b9      	str	r1, [r7, #8]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5f0:	88fb      	ldrh	r3, [r7, #6]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f000 fc59 	bl	800beae <USBD_LL_Transmit>

  return USBD_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	60f8      	str	r0, [r7, #12]
 800b60e:	60b9      	str	r1, [r7, #8]
 800b610:	4613      	mov	r3, r2
 800b612:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2203      	movs	r2, #3
 800b618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b61c:	88fa      	ldrh	r2, [r7, #6]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b624:	88fa      	ldrh	r2, [r7, #6]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b62c:	88fb      	ldrh	r3, [r7, #6]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	2100      	movs	r1, #0
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f000 fc5e 	bl	800bef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	4613      	mov	r3, r2
 800b64e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b650:	88fb      	ldrh	r3, [r7, #6]
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	2100      	movs	r1, #0
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f000 fc4c 	bl	800bef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b082      	sub	sp, #8
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2204      	movs	r2, #4
 800b672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b676:	2300      	movs	r3, #0
 800b678:	2200      	movs	r2, #0
 800b67a:	2100      	movs	r1, #0
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fc16 	bl	800beae <USBD_LL_Transmit>

  return USBD_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2205      	movs	r2, #5
 800b698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b69c:	2300      	movs	r3, #0
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fc26 	bl	800bef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	4912      	ldr	r1, [pc, #72]	; (800b704 <MX_USB_DEVICE_Init+0x50>)
 800b6bc:	4812      	ldr	r0, [pc, #72]	; (800b708 <MX_USB_DEVICE_Init+0x54>)
 800b6be:	f7fe ff5e 	bl	800a57e <USBD_Init>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b6c8:	f7f7 f8d0 	bl	800286c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b6cc:	490f      	ldr	r1, [pc, #60]	; (800b70c <MX_USB_DEVICE_Init+0x58>)
 800b6ce:	480e      	ldr	r0, [pc, #56]	; (800b708 <MX_USB_DEVICE_Init+0x54>)
 800b6d0:	f7fe ff80 	bl	800a5d4 <USBD_RegisterClass>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b6da:	f7f7 f8c7 	bl	800286c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b6de:	490c      	ldr	r1, [pc, #48]	; (800b710 <MX_USB_DEVICE_Init+0x5c>)
 800b6e0:	4809      	ldr	r0, [pc, #36]	; (800b708 <MX_USB_DEVICE_Init+0x54>)
 800b6e2:	f7fe feb1 	bl	800a448 <USBD_CDC_RegisterInterface>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d001      	beq.n	800b6f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b6ec:	f7f7 f8be 	bl	800286c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6f0:	4805      	ldr	r0, [pc, #20]	; (800b708 <MX_USB_DEVICE_Init+0x54>)
 800b6f2:	f7fe ff88 	bl	800a606 <USBD_Start>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b6fc:	f7f7 f8b6 	bl	800286c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b700:	bf00      	nop
 800b702:	bd80      	pop	{r7, pc}
 800b704:	20000154 	.word	0x20000154
 800b708:	200004cc 	.word	0x200004cc
 800b70c:	20000040 	.word	0x20000040
 800b710:	20000144 	.word	0x20000144

0800b714 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b718:	2200      	movs	r2, #0
 800b71a:	4905      	ldr	r1, [pc, #20]	; (800b730 <CDC_Init_FS+0x1c>)
 800b71c:	4805      	ldr	r0, [pc, #20]	; (800b734 <CDC_Init_FS+0x20>)
 800b71e:	f7fe fea9 	bl	800a474 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b722:	4905      	ldr	r1, [pc, #20]	; (800b738 <CDC_Init_FS+0x24>)
 800b724:	4803      	ldr	r0, [pc, #12]	; (800b734 <CDC_Init_FS+0x20>)
 800b726:	f7fe febe 	bl	800a4a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b72a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	20000b78 	.word	0x20000b78
 800b734:	200004cc 	.word	0x200004cc
 800b738:	20000790 	.word	0x20000790

0800b73c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b73c:	b480      	push	{r7}
 800b73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b740:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b742:	4618      	mov	r0, r3
 800b744:	46bd      	mov	sp, r7
 800b746:	bc80      	pop	{r7}
 800b748:	4770      	bx	lr
	...

0800b74c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	6039      	str	r1, [r7, #0]
 800b756:	71fb      	strb	r3, [r7, #7]
 800b758:	4613      	mov	r3, r2
 800b75a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	2b23      	cmp	r3, #35	; 0x23
 800b760:	d84a      	bhi.n	800b7f8 <CDC_Control_FS+0xac>
 800b762:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <CDC_Control_FS+0x1c>)
 800b764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b768:	0800b7f9 	.word	0x0800b7f9
 800b76c:	0800b7f9 	.word	0x0800b7f9
 800b770:	0800b7f9 	.word	0x0800b7f9
 800b774:	0800b7f9 	.word	0x0800b7f9
 800b778:	0800b7f9 	.word	0x0800b7f9
 800b77c:	0800b7f9 	.word	0x0800b7f9
 800b780:	0800b7f9 	.word	0x0800b7f9
 800b784:	0800b7f9 	.word	0x0800b7f9
 800b788:	0800b7f9 	.word	0x0800b7f9
 800b78c:	0800b7f9 	.word	0x0800b7f9
 800b790:	0800b7f9 	.word	0x0800b7f9
 800b794:	0800b7f9 	.word	0x0800b7f9
 800b798:	0800b7f9 	.word	0x0800b7f9
 800b79c:	0800b7f9 	.word	0x0800b7f9
 800b7a0:	0800b7f9 	.word	0x0800b7f9
 800b7a4:	0800b7f9 	.word	0x0800b7f9
 800b7a8:	0800b7f9 	.word	0x0800b7f9
 800b7ac:	0800b7f9 	.word	0x0800b7f9
 800b7b0:	0800b7f9 	.word	0x0800b7f9
 800b7b4:	0800b7f9 	.word	0x0800b7f9
 800b7b8:	0800b7f9 	.word	0x0800b7f9
 800b7bc:	0800b7f9 	.word	0x0800b7f9
 800b7c0:	0800b7f9 	.word	0x0800b7f9
 800b7c4:	0800b7f9 	.word	0x0800b7f9
 800b7c8:	0800b7f9 	.word	0x0800b7f9
 800b7cc:	0800b7f9 	.word	0x0800b7f9
 800b7d0:	0800b7f9 	.word	0x0800b7f9
 800b7d4:	0800b7f9 	.word	0x0800b7f9
 800b7d8:	0800b7f9 	.word	0x0800b7f9
 800b7dc:	0800b7f9 	.word	0x0800b7f9
 800b7e0:	0800b7f9 	.word	0x0800b7f9
 800b7e4:	0800b7f9 	.word	0x0800b7f9
 800b7e8:	0800b7f9 	.word	0x0800b7f9
 800b7ec:	0800b7f9 	.word	0x0800b7f9
 800b7f0:	0800b7f9 	.word	0x0800b7f9
 800b7f4:	0800b7f9 	.word	0x0800b7f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b7f8:	bf00      	nop
  }

  return (USBD_OK);
 800b7fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	bc80      	pop	{r7}
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop

0800b808 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b812:	6879      	ldr	r1, [r7, #4]
 800b814:	4808      	ldr	r0, [pc, #32]	; (800b838 <CDC_Receive_FS+0x30>)
 800b816:	f7fe fe46 	bl	800a4a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b81a:	4807      	ldr	r0, [pc, #28]	; (800b838 <CDC_Receive_FS+0x30>)
 800b81c:	f7fe fe85 	bl	800a52a <USBD_CDC_ReceivePacket>
USB_Packet_Received(&Buf[0], Len[0]);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f7f6 fb2e 	bl	8001e88 <USB_Packet_Received>
  return (USBD_OK);
 800b82c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	200004cc 	.word	0x200004cc

0800b83c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b84c:	4b0d      	ldr	r3, [pc, #52]	; (800b884 <CDC_Transmit_FS+0x48>)
 800b84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b852:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b85e:	2301      	movs	r3, #1
 800b860:	e00b      	b.n	800b87a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b862:	887b      	ldrh	r3, [r7, #2]
 800b864:	461a      	mov	r2, r3
 800b866:	6879      	ldr	r1, [r7, #4]
 800b868:	4806      	ldr	r0, [pc, #24]	; (800b884 <CDC_Transmit_FS+0x48>)
 800b86a:	f7fe fe03 	bl	800a474 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b86e:	4805      	ldr	r0, [pc, #20]	; (800b884 <CDC_Transmit_FS+0x48>)
 800b870:	f7fe fe2c 	bl	800a4cc <USBD_CDC_TransmitPacket>
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b878:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	200004cc 	.word	0x200004cc

0800b888 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	4603      	mov	r3, r0
 800b890:	6039      	str	r1, [r7, #0]
 800b892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2212      	movs	r2, #18
 800b898:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b89a:	4b03      	ldr	r3, [pc, #12]	; (800b8a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bc80      	pop	{r7}
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	20000170 	.word	0x20000170

0800b8ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	6039      	str	r1, [r7, #0]
 800b8b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8be:	4b03      	ldr	r3, [pc, #12]	; (800b8cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bc80      	pop	{r7}
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	20000184 	.word	0x20000184

0800b8d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	6039      	str	r1, [r7, #0]
 800b8da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8dc:	79fb      	ldrb	r3, [r7, #7]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d105      	bne.n	800b8ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	4907      	ldr	r1, [pc, #28]	; (800b904 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8e6:	4808      	ldr	r0, [pc, #32]	; (800b908 <USBD_FS_ProductStrDescriptor+0x38>)
 800b8e8:	f7ff fe06 	bl	800b4f8 <USBD_GetString>
 800b8ec:	e004      	b.n	800b8f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	4904      	ldr	r1, [pc, #16]	; (800b904 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8f2:	4805      	ldr	r0, [pc, #20]	; (800b908 <USBD_FS_ProductStrDescriptor+0x38>)
 800b8f4:	f7ff fe00 	bl	800b4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8f8:	4b02      	ldr	r3, [pc, #8]	; (800b904 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20000f60 	.word	0x20000f60
 800b908:	0800c0a4 	.word	0x0800c0a4

0800b90c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	4603      	mov	r3, r0
 800b914:	6039      	str	r1, [r7, #0]
 800b916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	4904      	ldr	r1, [pc, #16]	; (800b92c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b91c:	4804      	ldr	r0, [pc, #16]	; (800b930 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b91e:	f7ff fdeb 	bl	800b4f8 <USBD_GetString>
  return USBD_StrDesc;
 800b922:	4b02      	ldr	r3, [pc, #8]	; (800b92c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b924:	4618      	mov	r0, r3
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20000f60 	.word	0x20000f60
 800b930:	0800c0b8 	.word	0x0800c0b8

0800b934 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	4603      	mov	r3, r0
 800b93c:	6039      	str	r1, [r7, #0]
 800b93e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	221a      	movs	r2, #26
 800b944:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b946:	f000 f843 	bl	800b9d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b94a:	4b02      	ldr	r3, [pc, #8]	; (800b954 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	20000188 	.word	0x20000188

0800b958 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	4603      	mov	r3, r0
 800b960:	6039      	str	r1, [r7, #0]
 800b962:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d105      	bne.n	800b976 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	4907      	ldr	r1, [pc, #28]	; (800b98c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b96e:	4808      	ldr	r0, [pc, #32]	; (800b990 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b970:	f7ff fdc2 	bl	800b4f8 <USBD_GetString>
 800b974:	e004      	b.n	800b980 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	4904      	ldr	r1, [pc, #16]	; (800b98c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b97a:	4805      	ldr	r0, [pc, #20]	; (800b990 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b97c:	f7ff fdbc 	bl	800b4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b980:	4b02      	ldr	r3, [pc, #8]	; (800b98c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b982:	4618      	mov	r0, r3
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	20000f60 	.word	0x20000f60
 800b990:	0800c0cc 	.word	0x0800c0cc

0800b994 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	4603      	mov	r3, r0
 800b99c:	6039      	str	r1, [r7, #0]
 800b99e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9a0:	79fb      	ldrb	r3, [r7, #7]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d105      	bne.n	800b9b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	4907      	ldr	r1, [pc, #28]	; (800b9c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9aa:	4808      	ldr	r0, [pc, #32]	; (800b9cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9ac:	f7ff fda4 	bl	800b4f8 <USBD_GetString>
 800b9b0:	e004      	b.n	800b9bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	4904      	ldr	r1, [pc, #16]	; (800b9c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9b6:	4805      	ldr	r0, [pc, #20]	; (800b9cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9b8:	f7ff fd9e 	bl	800b4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9bc:	4b02      	ldr	r3, [pc, #8]	; (800b9c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20000f60 	.word	0x20000f60
 800b9cc:	0800c0d8 	.word	0x0800c0d8

0800b9d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9d6:	4b0f      	ldr	r3, [pc, #60]	; (800ba14 <Get_SerialNum+0x44>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9dc:	4b0e      	ldr	r3, [pc, #56]	; (800ba18 <Get_SerialNum+0x48>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9e2:	4b0e      	ldr	r3, [pc, #56]	; (800ba1c <Get_SerialNum+0x4c>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d009      	beq.n	800ba0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9f6:	2208      	movs	r2, #8
 800b9f8:	4909      	ldr	r1, [pc, #36]	; (800ba20 <Get_SerialNum+0x50>)
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f000 f814 	bl	800ba28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba00:	2204      	movs	r2, #4
 800ba02:	4908      	ldr	r1, [pc, #32]	; (800ba24 <Get_SerialNum+0x54>)
 800ba04:	68b8      	ldr	r0, [r7, #8]
 800ba06:	f000 f80f 	bl	800ba28 <IntToUnicode>
  }
}
 800ba0a:	bf00      	nop
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	1ffff7e8 	.word	0x1ffff7e8
 800ba18:	1ffff7ec 	.word	0x1ffff7ec
 800ba1c:	1ffff7f0 	.word	0x1ffff7f0
 800ba20:	2000018a 	.word	0x2000018a
 800ba24:	2000019a 	.word	0x2000019a

0800ba28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b087      	sub	sp, #28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	4613      	mov	r3, r2
 800ba34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	75fb      	strb	r3, [r7, #23]
 800ba3e:	e027      	b.n	800ba90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	0f1b      	lsrs	r3, r3, #28
 800ba44:	2b09      	cmp	r3, #9
 800ba46:	d80b      	bhi.n	800ba60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	0f1b      	lsrs	r3, r3, #28
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	005b      	lsls	r3, r3, #1
 800ba52:	4619      	mov	r1, r3
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	440b      	add	r3, r1
 800ba58:	3230      	adds	r2, #48	; 0x30
 800ba5a:	b2d2      	uxtb	r2, r2
 800ba5c:	701a      	strb	r2, [r3, #0]
 800ba5e:	e00a      	b.n	800ba76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	0f1b      	lsrs	r3, r3, #28
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	005b      	lsls	r3, r3, #1
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	440b      	add	r3, r1
 800ba70:	3237      	adds	r2, #55	; 0x37
 800ba72:	b2d2      	uxtb	r2, r2
 800ba74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	011b      	lsls	r3, r3, #4
 800ba7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba7c:	7dfb      	ldrb	r3, [r7, #23]
 800ba7e:	005b      	lsls	r3, r3, #1
 800ba80:	3301      	adds	r3, #1
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	4413      	add	r3, r2
 800ba86:	2200      	movs	r2, #0
 800ba88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba8a:	7dfb      	ldrb	r3, [r7, #23]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	75fb      	strb	r3, [r7, #23]
 800ba90:	7dfa      	ldrb	r2, [r7, #23]
 800ba92:	79fb      	ldrb	r3, [r7, #7]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d3d3      	bcc.n	800ba40 <IntToUnicode+0x18>
  }
}
 800ba98:	bf00      	nop
 800ba9a:	bf00      	nop
 800ba9c:	371c      	adds	r7, #28
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bc80      	pop	{r7}
 800baa2:	4770      	bx	lr

0800baa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a0d      	ldr	r2, [pc, #52]	; (800bae8 <HAL_PCD_MspInit+0x44>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d113      	bne.n	800bade <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bab6:	4b0d      	ldr	r3, [pc, #52]	; (800baec <HAL_PCD_MspInit+0x48>)
 800bab8:	69db      	ldr	r3, [r3, #28]
 800baba:	4a0c      	ldr	r2, [pc, #48]	; (800baec <HAL_PCD_MspInit+0x48>)
 800babc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bac0:	61d3      	str	r3, [r2, #28]
 800bac2:	4b0a      	ldr	r3, [pc, #40]	; (800baec <HAL_PCD_MspInit+0x48>)
 800bac4:	69db      	ldr	r3, [r3, #28]
 800bac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baca:	60fb      	str	r3, [r7, #12]
 800bacc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 800bace:	2200      	movs	r2, #0
 800bad0:	2103      	movs	r1, #3
 800bad2:	2014      	movs	r0, #20
 800bad4:	f7f7 fe4b 	bl	800376e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bad8:	2014      	movs	r0, #20
 800bada:	f7f7 fe64 	bl	80037a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	40005c00 	.word	0x40005c00
 800baec:	40021000 	.word	0x40021000

0800baf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bb04:	4619      	mov	r1, r3
 800bb06:	4610      	mov	r0, r2
 800bb08:	f7fe fdc5 	bl	800a696 <USBD_LL_SetupStage>
}
 800bb0c:	bf00      	nop
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb26:	78fa      	ldrb	r2, [r7, #3]
 800bb28:	6879      	ldr	r1, [r7, #4]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4413      	add	r3, r2
 800bb30:	00db      	lsls	r3, r3, #3
 800bb32:	440b      	add	r3, r1
 800bb34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	78fb      	ldrb	r3, [r7, #3]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	f7fe fdf7 	bl	800a730 <USBD_LL_DataOutStage>
}
 800bb42:	bf00      	nop
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b082      	sub	sp, #8
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	460b      	mov	r3, r1
 800bb54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb5c:	78fa      	ldrb	r2, [r7, #3]
 800bb5e:	6879      	ldr	r1, [r7, #4]
 800bb60:	4613      	mov	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	00db      	lsls	r3, r3, #3
 800bb68:	440b      	add	r3, r1
 800bb6a:	333c      	adds	r3, #60	; 0x3c
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	78fb      	ldrb	r3, [r7, #3]
 800bb70:	4619      	mov	r1, r3
 800bb72:	f7fe fe4e 	bl	800a812 <USBD_LL_DataInStage>
}
 800bb76:	bf00      	nop
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b082      	sub	sp, #8
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7fe ff5e 	bl	800aa4e <USBD_LL_SOF>
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bba2:	2301      	movs	r3, #1
 800bba4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d001      	beq.n	800bbb2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bbae:	f7f6 fe5d 	bl	800286c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbb8:	7bfa      	ldrb	r2, [r7, #15]
 800bbba:	4611      	mov	r1, r2
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe ff0e 	bl	800a9de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe fec7 	bl	800a95c <USBD_LL_Reset>
}
 800bbce:	bf00      	nop
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
	...

0800bbd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fe ff08 	bl	800a9fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d005      	beq.n	800bc00 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbf4:	4b04      	ldr	r3, [pc, #16]	; (800bc08 <HAL_PCD_SuspendCallback+0x30>)
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	4a03      	ldr	r2, [pc, #12]	; (800bc08 <HAL_PCD_SuspendCallback+0x30>)
 800bbfa:	f043 0306 	orr.w	r3, r3, #6
 800bbfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc00:	bf00      	nop
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	e000ed00 	.word	0xe000ed00

0800bc0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fe ff02 	bl	800aa24 <USBD_LL_Resume>
}
 800bc20:	bf00      	nop
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bc30:	4a28      	ldr	r2, [pc, #160]	; (800bcd4 <USBD_LL_Init+0xac>)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a26      	ldr	r2, [pc, #152]	; (800bcd4 <USBD_LL_Init+0xac>)
 800bc3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bc40:	4b24      	ldr	r3, [pc, #144]	; (800bcd4 <USBD_LL_Init+0xac>)
 800bc42:	4a25      	ldr	r2, [pc, #148]	; (800bcd8 <USBD_LL_Init+0xb0>)
 800bc44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc46:	4b23      	ldr	r3, [pc, #140]	; (800bcd4 <USBD_LL_Init+0xac>)
 800bc48:	2208      	movs	r2, #8
 800bc4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc4c:	4b21      	ldr	r3, [pc, #132]	; (800bcd4 <USBD_LL_Init+0xac>)
 800bc4e:	2202      	movs	r2, #2
 800bc50:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc52:	4b20      	ldr	r3, [pc, #128]	; (800bcd4 <USBD_LL_Init+0xac>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc58:	4b1e      	ldr	r3, [pc, #120]	; (800bcd4 <USBD_LL_Init+0xac>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc5e:	4b1d      	ldr	r3, [pc, #116]	; (800bcd4 <USBD_LL_Init+0xac>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bc64:	481b      	ldr	r0, [pc, #108]	; (800bcd4 <USBD_LL_Init+0xac>)
 800bc66:	f7f8 f9d3 	bl	8004010 <HAL_PCD_Init>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bc70:	f7f6 fdfc 	bl	800286c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc7a:	2318      	movs	r3, #24
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2100      	movs	r1, #0
 800bc80:	f7f9 fe47 	bl	8005912 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc8a:	2358      	movs	r3, #88	; 0x58
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	2180      	movs	r1, #128	; 0x80
 800bc90:	f7f9 fe3f 	bl	8005912 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc9a:	23c0      	movs	r3, #192	; 0xc0
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	2181      	movs	r1, #129	; 0x81
 800bca0:	f7f9 fe37 	bl	8005912 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcaa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bcae:	2200      	movs	r2, #0
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	f7f9 fe2e 	bl	8005912 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2182      	movs	r1, #130	; 0x82
 800bcc4:	f7f9 fe25 	bl	8005912 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20001160 	.word	0x20001160
 800bcd8:	40005c00 	.word	0x40005c00

0800bcdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7f8 fa97 	bl	8004226 <HAL_PCD_Start>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 f94e 	bl	800bfa0 <USBD_Get_USB_Status>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd08:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	4608      	mov	r0, r1
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	461a      	mov	r2, r3
 800bd20:	4603      	mov	r3, r0
 800bd22:	70fb      	strb	r3, [r7, #3]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70bb      	strb	r3, [r7, #2]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd3a:	78bb      	ldrb	r3, [r7, #2]
 800bd3c:	883a      	ldrh	r2, [r7, #0]
 800bd3e:	78f9      	ldrb	r1, [r7, #3]
 800bd40:	f7f8 fc0f 	bl	8004562 <HAL_PCD_EP_Open>
 800bd44:	4603      	mov	r3, r0
 800bd46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 f928 	bl	800bfa0 <USBD_Get_USB_Status>
 800bd50:	4603      	mov	r3, r0
 800bd52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd54:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b084      	sub	sp, #16
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	460b      	mov	r3, r1
 800bd68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd78:	78fa      	ldrb	r2, [r7, #3]
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7f8 fc56 	bl	800462e <HAL_PCD_EP_Close>
 800bd82:	4603      	mov	r3, r0
 800bd84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 f909 	bl	800bfa0 <USBD_Get_USB_Status>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd92:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	460b      	mov	r3, r1
 800bda6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdb6:	78fa      	ldrb	r2, [r7, #3]
 800bdb8:	4611      	mov	r1, r2
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7f8 fd16 	bl	80047ec <HAL_PCD_EP_SetStall>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 f8ea 	bl	800bfa0 <USBD_Get_USB_Status>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b084      	sub	sp, #16
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	460b      	mov	r3, r1
 800bde4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdf4:	78fa      	ldrb	r2, [r7, #3]
 800bdf6:	4611      	mov	r1, r2
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7f8 fd57 	bl	80048ac <HAL_PCD_EP_ClrStall>
 800bdfe:	4603      	mov	r3, r0
 800be00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be02:	7bfb      	ldrb	r3, [r7, #15]
 800be04:	4618      	mov	r0, r3
 800be06:	f000 f8cb 	bl	800bfa0 <USBD_Get_USB_Status>
 800be0a:	4603      	mov	r3, r0
 800be0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be10:	4618      	mov	r0, r3
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	460b      	mov	r3, r1
 800be22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be30:	2b00      	cmp	r3, #0
 800be32:	da0c      	bge.n	800be4e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be3a:	68f9      	ldr	r1, [r7, #12]
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	4613      	mov	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	00db      	lsls	r3, r3, #3
 800be46:	440b      	add	r3, r1
 800be48:	3302      	adds	r3, #2
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	e00b      	b.n	800be66 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be4e:	78fb      	ldrb	r3, [r7, #3]
 800be50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be54:	68f9      	ldr	r1, [r7, #12]
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	00db      	lsls	r3, r3, #3
 800be5e:	440b      	add	r3, r1
 800be60:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800be64:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be66:	4618      	mov	r0, r3
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bc80      	pop	{r7}
 800be6e:	4770      	bx	lr

0800be70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be7c:	2300      	movs	r3, #0
 800be7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be80:	2300      	movs	r3, #0
 800be82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be8a:	78fa      	ldrb	r2, [r7, #3]
 800be8c:	4611      	mov	r1, r2
 800be8e:	4618      	mov	r0, r3
 800be90:	f7f8 fb42 	bl	8004518 <HAL_PCD_SetAddress>
 800be94:	4603      	mov	r3, r0
 800be96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be98:	7bfb      	ldrb	r3, [r7, #15]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 f880 	bl	800bfa0 <USBD_Get_USB_Status>
 800bea0:	4603      	mov	r3, r0
 800bea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bea4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b086      	sub	sp, #24
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	607a      	str	r2, [r7, #4]
 800beb8:	461a      	mov	r2, r3
 800beba:	460b      	mov	r3, r1
 800bebc:	72fb      	strb	r3, [r7, #11]
 800bebe:	4613      	mov	r3, r2
 800bec0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bed0:	893b      	ldrh	r3, [r7, #8]
 800bed2:	7af9      	ldrb	r1, [r7, #11]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	f7f8 fc46 	bl	8004766 <HAL_PCD_EP_Transmit>
 800beda:	4603      	mov	r3, r0
 800bedc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 f85d 	bl	800bfa0 <USBD_Get_USB_Status>
 800bee6:	4603      	mov	r3, r0
 800bee8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800beea:	7dbb      	ldrb	r3, [r7, #22]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	607a      	str	r2, [r7, #4]
 800befe:	461a      	mov	r2, r3
 800bf00:	460b      	mov	r3, r1
 800bf02:	72fb      	strb	r3, [r7, #11]
 800bf04:	4613      	mov	r3, r2
 800bf06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf16:	893b      	ldrh	r3, [r7, #8]
 800bf18:	7af9      	ldrb	r1, [r7, #11]
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	f7f8 fbcf 	bl	80046be <HAL_PCD_EP_Receive>
 800bf20:	4603      	mov	r3, r0
 800bf22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f000 f83a 	bl	800bfa0 <USBD_Get_USB_Status>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf30:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b082      	sub	sp, #8
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	460b      	mov	r3, r1
 800bf44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf4c:	78fa      	ldrb	r2, [r7, #3]
 800bf4e:	4611      	mov	r1, r2
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7f8 fbf1 	bl	8004738 <HAL_PCD_EP_GetRxCount>
 800bf56:	4603      	mov	r3, r0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf68:	4b02      	ldr	r3, [pc, #8]	; (800bf74 <USBD_static_malloc+0x14>)
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bc80      	pop	{r7}
 800bf72:	4770      	bx	lr
 800bf74:	2000144c 	.word	0x2000144c

0800bf78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]

}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bc80      	pop	{r7}
 800bf88:	4770      	bx	lr

0800bf8a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b083      	sub	sp, #12
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	460b      	mov	r3, r1
 800bf94:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bf96:	bf00      	nop
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bc80      	pop	{r7}
 800bf9e:	4770      	bx	lr

0800bfa0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	2b03      	cmp	r3, #3
 800bfb2:	d817      	bhi.n	800bfe4 <USBD_Get_USB_Status+0x44>
 800bfb4:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <USBD_Get_USB_Status+0x1c>)
 800bfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfba:	bf00      	nop
 800bfbc:	0800bfcd 	.word	0x0800bfcd
 800bfc0:	0800bfd3 	.word	0x0800bfd3
 800bfc4:	0800bfd9 	.word	0x0800bfd9
 800bfc8:	0800bfdf 	.word	0x0800bfdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd0:	e00b      	b.n	800bfea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfd2:	2302      	movs	r3, #2
 800bfd4:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd6:	e008      	b.n	800bfea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	73fb      	strb	r3, [r7, #15]
    break;
 800bfdc:	e005      	b.n	800bfea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfde:	2302      	movs	r3, #2
 800bfe0:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe2:	e002      	b.n	800bfea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe8:	bf00      	nop
  }
  return usb_status;
 800bfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3714      	adds	r7, #20
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bc80      	pop	{r7}
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop

0800bff8 <__libc_init_array>:
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	2600      	movs	r6, #0
 800bffc:	4d0c      	ldr	r5, [pc, #48]	; (800c030 <__libc_init_array+0x38>)
 800bffe:	4c0d      	ldr	r4, [pc, #52]	; (800c034 <__libc_init_array+0x3c>)
 800c000:	1b64      	subs	r4, r4, r5
 800c002:	10a4      	asrs	r4, r4, #2
 800c004:	42a6      	cmp	r6, r4
 800c006:	d109      	bne.n	800c01c <__libc_init_array+0x24>
 800c008:	f000 f830 	bl	800c06c <_init>
 800c00c:	2600      	movs	r6, #0
 800c00e:	4d0a      	ldr	r5, [pc, #40]	; (800c038 <__libc_init_array+0x40>)
 800c010:	4c0a      	ldr	r4, [pc, #40]	; (800c03c <__libc_init_array+0x44>)
 800c012:	1b64      	subs	r4, r4, r5
 800c014:	10a4      	asrs	r4, r4, #2
 800c016:	42a6      	cmp	r6, r4
 800c018:	d105      	bne.n	800c026 <__libc_init_array+0x2e>
 800c01a:	bd70      	pop	{r4, r5, r6, pc}
 800c01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c020:	4798      	blx	r3
 800c022:	3601      	adds	r6, #1
 800c024:	e7ee      	b.n	800c004 <__libc_init_array+0xc>
 800c026:	f855 3b04 	ldr.w	r3, [r5], #4
 800c02a:	4798      	blx	r3
 800c02c:	3601      	adds	r6, #1
 800c02e:	e7f2      	b.n	800c016 <__libc_init_array+0x1e>
 800c030:	0800c100 	.word	0x0800c100
 800c034:	0800c100 	.word	0x0800c100
 800c038:	0800c100 	.word	0x0800c100
 800c03c:	0800c104 	.word	0x0800c104

0800c040 <memcpy>:
 800c040:	440a      	add	r2, r1
 800c042:	4291      	cmp	r1, r2
 800c044:	f100 33ff 	add.w	r3, r0, #4294967295
 800c048:	d100      	bne.n	800c04c <memcpy+0xc>
 800c04a:	4770      	bx	lr
 800c04c:	b510      	push	{r4, lr}
 800c04e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c052:	4291      	cmp	r1, r2
 800c054:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c058:	d1f9      	bne.n	800c04e <memcpy+0xe>
 800c05a:	bd10      	pop	{r4, pc}

0800c05c <memset>:
 800c05c:	4603      	mov	r3, r0
 800c05e:	4402      	add	r2, r0
 800c060:	4293      	cmp	r3, r2
 800c062:	d100      	bne.n	800c066 <memset+0xa>
 800c064:	4770      	bx	lr
 800c066:	f803 1b01 	strb.w	r1, [r3], #1
 800c06a:	e7f9      	b.n	800c060 <memset+0x4>

0800c06c <_init>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	bf00      	nop
 800c070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c072:	bc08      	pop	{r3}
 800c074:	469e      	mov	lr, r3
 800c076:	4770      	bx	lr

0800c078 <_fini>:
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	bf00      	nop
 800c07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07e:	bc08      	pop	{r3}
 800c080:	469e      	mov	lr, r3
 800c082:	4770      	bx	lr
