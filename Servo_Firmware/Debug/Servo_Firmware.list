
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c760  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800c870  0800c870  0001c870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8ec  0800c8ec  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800c8ec  0800c8ec  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c8ec  0800c8ec  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8ec  0800c8ec  0001c8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8f0  0800c8f0  0001c8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  20000180  0800ca74  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016a4  0800ca74  000216a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e97  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a52  00000000  00000000  00039040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003da98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003eff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d44d  00000000  00000000  00040308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d3dd  00000000  00000000  0005d755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093efe  00000000  00000000  0007ab32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ea30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005704  00000000  00000000  0010ea80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c858 	.word	0x0800c858

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800c858 	.word	0x0800c858

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_frsub>:
 80009fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a00:	e002      	b.n	8000a08 <__addsf3>
 8000a02:	bf00      	nop

08000a04 <__aeabi_fsub>:
 8000a04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a08 <__addsf3>:
 8000a08:	0042      	lsls	r2, r0, #1
 8000a0a:	bf1f      	itttt	ne
 8000a0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a10:	ea92 0f03 	teqne	r2, r3
 8000a14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a1c:	d06a      	beq.n	8000af4 <__addsf3+0xec>
 8000a1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a26:	bfc1      	itttt	gt
 8000a28:	18d2      	addgt	r2, r2, r3
 8000a2a:	4041      	eorgt	r1, r0
 8000a2c:	4048      	eorgt	r0, r1
 8000a2e:	4041      	eorgt	r1, r0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	2b19      	cmp	r3, #25
 8000a36:	bf88      	it	hi
 8000a38:	4770      	bxhi	lr
 8000a3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4249      	negne	r1, r1
 8000a5a:	ea92 0f03 	teq	r2, r3
 8000a5e:	d03f      	beq.n	8000ae0 <__addsf3+0xd8>
 8000a60:	f1a2 0201 	sub.w	r2, r2, #1
 8000a64:	fa41 fc03 	asr.w	ip, r1, r3
 8000a68:	eb10 000c 	adds.w	r0, r0, ip
 8000a6c:	f1c3 0320 	rsb	r3, r3, #32
 8000a70:	fa01 f103 	lsl.w	r1, r1, r3
 8000a74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a78:	d502      	bpl.n	8000a80 <__addsf3+0x78>
 8000a7a:	4249      	negs	r1, r1
 8000a7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a84:	d313      	bcc.n	8000aae <__addsf3+0xa6>
 8000a86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a8a:	d306      	bcc.n	8000a9a <__addsf3+0x92>
 8000a8c:	0840      	lsrs	r0, r0, #1
 8000a8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a92:	f102 0201 	add.w	r2, r2, #1
 8000a96:	2afe      	cmp	r2, #254	; 0xfe
 8000a98:	d251      	bcs.n	8000b3e <__addsf3+0x136>
 8000a9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa2:	bf08      	it	eq
 8000aa4:	f020 0001 	biceq.w	r0, r0, #1
 8000aa8:	ea40 0003 	orr.w	r0, r0, r3
 8000aac:	4770      	bx	lr
 8000aae:	0049      	lsls	r1, r1, #1
 8000ab0:	eb40 0000 	adc.w	r0, r0, r0
 8000ab4:	3a01      	subs	r2, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000abc:	d2ed      	bcs.n	8000a9a <__addsf3+0x92>
 8000abe:	fab0 fc80 	clz	ip, r0
 8000ac2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ac6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ace:	bfaa      	itet	ge
 8000ad0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ad4:	4252      	neglt	r2, r2
 8000ad6:	4318      	orrge	r0, r3
 8000ad8:	bfbc      	itt	lt
 8000ada:	40d0      	lsrlt	r0, r2
 8000adc:	4318      	orrlt	r0, r3
 8000ade:	4770      	bx	lr
 8000ae0:	f092 0f00 	teq	r2, #0
 8000ae4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae8:	bf06      	itte	eq
 8000aea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aee:	3201      	addeq	r2, #1
 8000af0:	3b01      	subne	r3, #1
 8000af2:	e7b5      	b.n	8000a60 <__addsf3+0x58>
 8000af4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000afc:	bf18      	it	ne
 8000afe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b02:	d021      	beq.n	8000b48 <__addsf3+0x140>
 8000b04:	ea92 0f03 	teq	r2, r3
 8000b08:	d004      	beq.n	8000b14 <__addsf3+0x10c>
 8000b0a:	f092 0f00 	teq	r2, #0
 8000b0e:	bf08      	it	eq
 8000b10:	4608      	moveq	r0, r1
 8000b12:	4770      	bx	lr
 8000b14:	ea90 0f01 	teq	r0, r1
 8000b18:	bf1c      	itt	ne
 8000b1a:	2000      	movne	r0, #0
 8000b1c:	4770      	bxne	lr
 8000b1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b22:	d104      	bne.n	8000b2e <__addsf3+0x126>
 8000b24:	0040      	lsls	r0, r0, #1
 8000b26:	bf28      	it	cs
 8000b28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	4770      	bx	lr
 8000b2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b32:	bf3c      	itt	cc
 8000b34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bxcc	lr
 8000b3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	4770      	bx	lr
 8000b48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b4c:	bf16      	itet	ne
 8000b4e:	4608      	movne	r0, r1
 8000b50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b54:	4601      	movne	r1, r0
 8000b56:	0242      	lsls	r2, r0, #9
 8000b58:	bf06      	itte	eq
 8000b5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b5e:	ea90 0f01 	teqeq	r0, r1
 8000b62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_ui2f>:
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e004      	b.n	8000b78 <__aeabi_i2f+0x8>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_i2f>:
 8000b70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b74:	bf48      	it	mi
 8000b76:	4240      	negmi	r0, r0
 8000b78:	ea5f 0c00 	movs.w	ip, r0
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b84:	4601      	mov	r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	e01c      	b.n	8000bc6 <__aeabi_l2f+0x2a>

08000b8c <__aeabi_ul2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e00a      	b.n	8000bb0 <__aeabi_l2f+0x14>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_l2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__aeabi_l2f+0x14>
 8000baa:	4240      	negs	r0, r0
 8000bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb0:	ea5f 0c01 	movs.w	ip, r1
 8000bb4:	bf02      	ittt	eq
 8000bb6:	4684      	moveq	ip, r0
 8000bb8:	4601      	moveq	r1, r0
 8000bba:	2000      	moveq	r0, #0
 8000bbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bca:	fabc f28c 	clz	r2, ip
 8000bce:	3a08      	subs	r2, #8
 8000bd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bd4:	db10      	blt.n	8000bf8 <__aeabi_l2f+0x5c>
 8000bd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bda:	4463      	add	r3, ip
 8000bdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f102 0220 	add.w	r2, r2, #32
 8000bfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c08:	fa21 f202 	lsr.w	r2, r1, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_fmul>:
 8000c18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c20:	bf1e      	ittt	ne
 8000c22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c26:	ea92 0f0c 	teqne	r2, ip
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d06f      	beq.n	8000d10 <__aeabi_fmul+0xf8>
 8000c30:	441a      	add	r2, r3
 8000c32:	ea80 0c01 	eor.w	ip, r0, r1
 8000c36:	0240      	lsls	r0, r0, #9
 8000c38:	bf18      	it	ne
 8000c3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c3e:	d01e      	beq.n	8000c7e <__aeabi_fmul+0x66>
 8000c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c58:	bf3e      	ittt	cc
 8000c5a:	0049      	lslcc	r1, r1, #1
 8000c5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c60:	005b      	lslcc	r3, r3, #1
 8000c62:	ea40 0001 	orr.w	r0, r0, r1
 8000c66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c6a:	2afd      	cmp	r2, #253	; 0xfd
 8000c6c:	d81d      	bhi.n	8000caa <__aeabi_fmul+0x92>
 8000c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c86:	bf08      	it	eq
 8000c88:	0249      	lsleq	r1, r1, #9
 8000c8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c92:	3a7f      	subs	r2, #127	; 0x7f
 8000c94:	bfc2      	ittt	gt
 8000c96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c9e:	4770      	bxgt	lr
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	dc5d      	bgt.n	8000d68 <__aeabi_fmul+0x150>
 8000cac:	f112 0f19 	cmn.w	r2, #25
 8000cb0:	bfdc      	itt	le
 8000cb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cb6:	4770      	bxle	lr
 8000cb8:	f1c2 0200 	rsb	r2, r2, #0
 8000cbc:	0041      	lsls	r1, r0, #1
 8000cbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000cc2:	f1c2 0220 	rsb	r2, r2, #32
 8000cc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cce:	f140 0000 	adc.w	r0, r0, #0
 8000cd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cd6:	bf08      	it	eq
 8000cd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cdc:	4770      	bx	lr
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ce6:	bf02      	ittt	eq
 8000ce8:	0040      	lsleq	r0, r0, #1
 8000cea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cee:	3a01      	subeq	r2, #1
 8000cf0:	d0f9      	beq.n	8000ce6 <__aeabi_fmul+0xce>
 8000cf2:	ea40 000c 	orr.w	r0, r0, ip
 8000cf6:	f093 0f00 	teq	r3, #0
 8000cfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0049      	lsleq	r1, r1, #1
 8000d02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d06:	3b01      	subeq	r3, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fmul+0xe6>
 8000d0a:	ea41 010c 	orr.w	r1, r1, ip
 8000d0e:	e78f      	b.n	8000c30 <__aeabi_fmul+0x18>
 8000d10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d14:	ea92 0f0c 	teq	r2, ip
 8000d18:	bf18      	it	ne
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d00a      	beq.n	8000d36 <__aeabi_fmul+0x11e>
 8000d20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d24:	bf18      	it	ne
 8000d26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	d1d8      	bne.n	8000cde <__aeabi_fmul+0xc6>
 8000d2c:	ea80 0001 	eor.w	r0, r0, r1
 8000d30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	bf17      	itett	ne
 8000d3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d40:	4608      	moveq	r0, r1
 8000d42:	f091 0f00 	teqne	r1, #0
 8000d46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d4a:	d014      	beq.n	8000d76 <__aeabi_fmul+0x15e>
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	d101      	bne.n	8000d56 <__aeabi_fmul+0x13e>
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	d10f      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d56:	ea93 0f0c 	teq	r3, ip
 8000d5a:	d103      	bne.n	8000d64 <__aeabi_fmul+0x14c>
 8000d5c:	024b      	lsls	r3, r1, #9
 8000d5e:	bf18      	it	ne
 8000d60:	4608      	movne	r0, r1
 8000d62:	d108      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bx	lr
 8000d76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fdiv>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d069      	beq.n	8000e6c <__aeabi_fdiv+0xec>
 8000d98:	eba2 0203 	sub.w	r2, r2, r3
 8000d9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000da0:	0249      	lsls	r1, r1, #9
 8000da2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000da6:	d037      	beq.n	8000e18 <__aeabi_fdiv+0x98>
 8000da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000db0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	428b      	cmp	r3, r1
 8000dba:	bf38      	it	cc
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	bf24      	itt	cs
 8000dca:	1a5b      	subcs	r3, r3, r1
 8000dcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dd4:	bf24      	itt	cs
 8000dd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000de2:	bf24      	itt	cs
 8000de4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000de8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000df0:	bf24      	itt	cs
 8000df2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000df6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	bf18      	it	ne
 8000dfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e02:	d1e0      	bne.n	8000dc6 <__aeabi_fdiv+0x46>
 8000e04:	2afd      	cmp	r2, #253	; 0xfd
 8000e06:	f63f af50 	bhi.w	8000caa <__aeabi_fmul+0x92>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e20:	327f      	adds	r2, #127	; 0x7f
 8000e22:	bfc2      	ittt	gt
 8000e24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2c:	4770      	bxgt	lr
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	3a01      	subs	r2, #1
 8000e38:	e737      	b.n	8000caa <__aeabi_fmul+0x92>
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fdiv+0xc2>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fdiv+0xda>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e795      	b.n	8000d98 <__aeabi_fdiv+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d108      	bne.n	8000e88 <__aeabi_fdiv+0x108>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	f47f af7d 	bne.w	8000d76 <__aeabi_fmul+0x15e>
 8000e7c:	ea93 0f0c 	teq	r3, ip
 8000e80:	f47f af70 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e776      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e88:	ea93 0f0c 	teq	r3, ip
 8000e8c:	d104      	bne.n	8000e98 <__aeabi_fdiv+0x118>
 8000e8e:	024b      	lsls	r3, r1, #9
 8000e90:	f43f af4c 	beq.w	8000d2c <__aeabi_fmul+0x114>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e76e      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1ca      	bne.n	8000e3a <__aeabi_fdiv+0xba>
 8000ea4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ea8:	f47f af5c 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000eac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eb0:	f47f af3c 	bne.w	8000d2c <__aeabi_fmul+0x114>
 8000eb4:	e75f      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000eb6:	bf00      	nop

08000eb8 <__gesf2>:
 8000eb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ebc:	e006      	b.n	8000ecc <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__lesf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	e002      	b.n	8000ecc <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__cmpsf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	bf18      	it	ne
 8000ede:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ee2:	d011      	beq.n	8000f08 <__cmpsf2+0x40>
 8000ee4:	b001      	add	sp, #4
 8000ee6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eea:	bf18      	it	ne
 8000eec:	ea90 0f01 	teqne	r0, r1
 8000ef0:	bf58      	it	pl
 8000ef2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ef6:	bf88      	it	hi
 8000ef8:	17c8      	asrhi	r0, r1, #31
 8000efa:	bf38      	it	cc
 8000efc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f00:	bf18      	it	ne
 8000f02:	f040 0001 	orrne.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	d102      	bne.n	8000f14 <__cmpsf2+0x4c>
 8000f0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f12:	d105      	bne.n	8000f20 <__cmpsf2+0x58>
 8000f14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f18:	d1e4      	bne.n	8000ee4 <__cmpsf2+0x1c>
 8000f1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1e:	d0e1      	beq.n	8000ee4 <__cmpsf2+0x1c>
 8000f20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__aeabi_cfrcmple>:
 8000f28:	4684      	mov	ip, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4661      	mov	r1, ip
 8000f2e:	e7ff      	b.n	8000f30 <__aeabi_cfcmpeq>

08000f30 <__aeabi_cfcmpeq>:
 8000f30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f32:	f7ff ffc9 	bl	8000ec8 <__cmpsf2>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	bf48      	it	mi
 8000f3a:	f110 0f00 	cmnmi.w	r0, #0
 8000f3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f40 <__aeabi_fcmpeq>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff fff4 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f48:	bf0c      	ite	eq
 8000f4a:	2001      	moveq	r0, #1
 8000f4c:	2000      	movne	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmplt>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffea 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f5c:	bf34      	ite	cc
 8000f5e:	2001      	movcc	r0, #1
 8000f60:	2000      	movcs	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmple>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffe0 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f70:	bf94      	ite	ls
 8000f72:	2001      	movls	r0, #1
 8000f74:	2000      	movhi	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_fcmpge>:
 8000f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f80:	f7ff ffd2 	bl	8000f28 <__aeabi_cfrcmple>
 8000f84:	bf94      	ite	ls
 8000f86:	2001      	movls	r0, #1
 8000f88:	2000      	movhi	r0, #0
 8000f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8e:	bf00      	nop

08000f90 <__aeabi_fcmpgt>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff ffc8 	bl	8000f28 <__aeabi_cfrcmple>
 8000f98:	bf34      	ite	cc
 8000f9a:	2001      	movcc	r0, #1
 8000f9c:	2000      	movcs	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2iz>:
 8000fa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30f      	bcc.n	8000fce <__aeabi_f2iz+0x2a>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d90d      	bls.n	8000fd4 <__aeabi_f2iz+0x30>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	bf18      	it	ne
 8000fca:	4240      	negne	r0, r0
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr
 8000fd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd8:	d101      	bne.n	8000fde <__aeabi_f2iz+0x3a>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	d105      	bne.n	8000fea <__aeabi_f2iz+0x46>
 8000fde:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe2:	bf08      	it	eq
 8000fe4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe8:	4770      	bx	lr
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4770      	bx	lr

08000ff0 <Potentiometer_Ready>:
extern uint8_t usb_rq;
extern uint8_t usb_rq_sett_revert_flash;
extern uint8_t usb_rq_stat_motor;
extern uint8_t usb_rq_stat_phold;

void Potentiometer_Ready(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	pid_input = potentiometer_position;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <Potentiometer_Ready+0x80>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <Potentiometer_Ready+0x84>)
 8000ffa:	6013      	str	r3, [r2, #0]
	if(!pid_running){
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <Potentiometer_Ready+0x88>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d133      	bne.n	800106c <Potentiometer_Ready+0x7c>
		if(motor_running){
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <Potentiometer_Ready+0x8c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d02f      	beq.n	800106c <Potentiometer_Ready+0x7c>
			if((potentiometer_position <= potentiometer_min) && (Motor_Get() < 0)){
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <Potentiometer_Ready+0x90>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fdad 	bl	8000b70 <__aeabi_i2f>
 8001016:	4602      	mov	r2, r0
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <Potentiometer_Ready+0x80>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4610      	mov	r0, r2
 8001020:	f7ff ffac 	bl	8000f7c <__aeabi_fcmpge>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d008      	beq.n	800103c <Potentiometer_Ready+0x4c>
 800102a:	f000 fb1b 	bl	8001664 <Motor_Get>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	da03      	bge.n	800103c <Potentiometer_Ready+0x4c>
				Motor_Set(0);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 faab 	bl	8001590 <Motor_Set>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 800103a:	e017      	b.n	800106c <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <Potentiometer_Ready+0x94>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fd95 	bl	8000b70 <__aeabi_i2f>
 8001046:	4602      	mov	r2, r0
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <Potentiometer_Ready+0x80>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f7ff ff8a 	bl	8000f68 <__aeabi_fcmple>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d100      	bne.n	800105c <Potentiometer_Ready+0x6c>
}
 800105a:	e007      	b.n	800106c <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800105c:	f000 fb02 	bl	8001664 <Motor_Get>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	dd02      	ble.n	800106c <Potentiometer_Ready+0x7c>
				Motor_Set(0);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 fa92 	bl	8001590 <Motor_Set>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200001f0 	.word	0x200001f0
 8001074:	200001d4 	.word	0x200001d4
 8001078:	200001d1 	.word	0x200001d1
 800107c:	200001a2 	.word	0x200001a2
 8001080:	200001e4 	.word	0x200001e4
 8001084:	200001e6 	.word	0x200001e6

08001088 <PID_Ready>:
void PID_Ready(float output){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff87 	bl	8000fa4 <__aeabi_f2iz>
 8001096:	4603      	mov	r3, r0
 8001098:	b21b      	sxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fa78 	bl	8001590 <Motor_Set>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <App_Init>:

void App_Init(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	Settings_Read();
 80010ac:	f000 fcfc 	bl	8001aa8 <Settings_Read>
	USB_Det();
 80010b0:	f001 faa6 	bl	8002600 <USB_Det>
	Signal_Init();
 80010b4:	f001 fa9a 	bl	80025ec <Signal_Init>
	Potentiometer_Init();
 80010b8:	f000 fcde 	bl	8001a78 <Potentiometer_Init>
	Motor_Init();
 80010bc:	f000 fb12 	bl	80016e4 <Motor_Init>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <App_Loop>:
void App_Loop(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	switch(usb_rq){
 80010c8:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <App_Loop+0xfc>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d002      	beq.n	80010d6 <App_Loop+0x12>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d019      	beq.n	8001108 <App_Loop+0x44>
 80010d4:	e06e      	b.n	80011b4 <App_Loop+0xf0>
		case USB_RQ_CONF:
			if(usb_rq_sett_revert_flash == USB_SETTINGS_REVERT){
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <App_Loop+0x100>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d105      	bne.n	80010ea <App_Loop+0x26>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <App_Loop+0x100>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
				//Read from flash
				Settings_Read();
 80010e4:	f000 fce0 	bl	8001aa8 <Settings_Read>
 80010e8:	e008      	b.n	80010fc <App_Loop+0x38>
			}else if(usb_rq_sett_revert_flash == USB_SETTINGS_FLASH){
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <App_Loop+0x100>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d104      	bne.n	80010fc <App_Loop+0x38>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <App_Loop+0x100>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
				//Write to flash
				Settings_Write();
 80010f8:	f000 ffee 	bl	80020d8 <Settings_Write>
			}
			USB_Send_Config();
 80010fc:	f001 fb26 	bl	800274c <USB_Send_Config>
			usb_rq = USB_RQ_NONE;
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <App_Loop+0xfc>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
		break;
 8001106:	e055      	b.n	80011b4 <App_Loop+0xf0>
		case USB_RQ_STAT:
			if(usb_rq_stat_motor != 0){
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <App_Loop+0x104>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d033      	beq.n	8001178 <App_Loop+0xb4>
				//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout
				if(usb_rq_stat_motor == 1){//Backward
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <App_Loop+0x104>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d112      	bne.n	800113e <App_Loop+0x7a>
					if(potentiometer_position > potentiometer_min){
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <App_Loop+0x108>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fd27 	bl	8000b70 <__aeabi_i2f>
 8001122:	4602      	mov	r2, r0
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <App_Loop+0x10c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f7ff ff12 	bl	8000f54 <__aeabi_fcmplt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d01a      	beq.n	800116c <App_Loop+0xa8>
						Motor_Set(-1000);
 8001136:	4827      	ldr	r0, [pc, #156]	; (80011d4 <App_Loop+0x110>)
 8001138:	f000 fa2a 	bl	8001590 <Motor_Set>
 800113c:	e016      	b.n	800116c <App_Loop+0xa8>
					}
				}else if(usb_rq_stat_motor == 2){//Forward
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <App_Loop+0x104>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d112      	bne.n	800116c <App_Loop+0xa8>
					if(potentiometer_position < potentiometer_max){
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <App_Loop+0x114>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fd10 	bl	8000b70 <__aeabi_i2f>
 8001150:	4602      	mov	r2, r0
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <App_Loop+0x10c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff ff19 	bl	8000f90 <__aeabi_fcmpgt>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <App_Loop+0xa8>
						Motor_Set(1000);
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f000 fa12 	bl	8001590 <Motor_Set>
					}
				}
				motor_systick = 0;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <App_Loop+0x118>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
				usb_rq_stat_motor = 0;
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <App_Loop+0x104>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
			}
			if(usb_rq_stat_phold == 1){
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <App_Loop+0x11c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d109      	bne.n	8001194 <App_Loop+0xd0>
				usb_rq_stat_phold = 0;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <App_Loop+0x11c>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
				if(!pid_running){//Run pid with signal timeout
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <App_Loop+0x120>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <App_Loop+0xe4>
					PID_Start();
 800118e:	f000 fc05 	bl	800199c <PID_Start>
 8001192:	e009      	b.n	80011a8 <App_Loop+0xe4>
				}
			}else if(signal_ignore && pid_running){
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <App_Loop+0x124>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <App_Loop+0xe4>
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <App_Loop+0x120>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <App_Loop+0xe4>
				PID_Stop();
 80011a4:	f000 fc1c 	bl	80019e0 <PID_Stop>
			}
			USB_Send_Status();
 80011a8:	f001 fcb0 	bl	8002b0c <USB_Send_Status>
			usb_rq = USB_RQ_NONE;
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <App_Loop+0xfc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
		break;
 80011b2:	bf00      	nop
	}
	USB_Det();
 80011b4:	f001 fa24 	bl	8002600 <USB_Det>
	LED_Update();
 80011b8:	f000 f98a 	bl	80014d0 <LED_Update>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000250 	.word	0x20000250
 80011c4:	20000251 	.word	0x20000251
 80011c8:	20000252 	.word	0x20000252
 80011cc:	200001e4 	.word	0x200001e4
 80011d0:	200001f0 	.word	0x200001f0
 80011d4:	fffffc18 	.word	0xfffffc18
 80011d8:	200001e6 	.word	0x200001e6
 80011dc:	200001a3 	.word	0x200001a3
 80011e0:	20000253 	.word	0x20000253
 80011e4:	200001d1 	.word	0x200001d1
 80011e8:	20000238 	.word	0x20000238

080011ec <Flash_Read>:
#include "main.h"
#include "flash.h"

void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	while(i != length){
 80011fc:	e00b      	b.n	8001216 <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	4413      	add	r3, r2
 8001204:	4619      	mov	r1, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	4413      	add	r3, r2
 800120c:	780a      	ldrb	r2, [r1, #0]
 800120e:	701a      	strb	r2, [r3, #0]
		i++;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
	while(i != length){
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d1ef      	bne.n	80011fe <Flash_Read+0x12>
	}
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <Flash_Write>:
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 800122a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8001248:	f002 ff7c 	bl	8004144 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 800124c:	f107 0210 	add.w	r2, r7, #16
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f003 f85c 	bl	8004314 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	b29a      	uxth	r2, r3
 8001266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	b29b      	uxth	r3, r3
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 8001274:	e027      	b.n	80012c6 <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 8001276:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	18d0      	adds	r0, r2, r3
				((uint32_t)data[i+3]<<24)|
 800127c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800127e:	3303      	adds	r3, #3
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	061a      	lsls	r2, r3, #24
				((uint32_t)data[i+2]<<16)|
 8001288:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800128a:	3302      	adds	r3, #2
 800128c:	68f9      	ldr	r1, [r7, #12]
 800128e:	440b      	add	r3, r1
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	041b      	lsls	r3, r3, #16
				((uint32_t)data[i+3]<<24)|
 8001294:	431a      	orrs	r2, r3
				((uint32_t)data[i+1]<<8)|
 8001296:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001298:	3301      	adds	r3, #1
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	440b      	add	r3, r1
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	021b      	lsls	r3, r3, #8
				((uint32_t)data[i+2]<<16)|
 80012a2:	4313      	orrs	r3, r2
				(uint32_t)data[i]
 80012a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012a6:	68f9      	ldr	r1, [r7, #12]
 80012a8:	440a      	add	r2, r1
 80012aa:	7812      	ldrb	r2, [r2, #0]
				((uint32_t)data[i+1]<<8)|
 80012ac:	4313      	orrs	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80012ae:	2200      	movs	r2, #0
 80012b0:	4698      	mov	r8, r3
 80012b2:	4691      	mov	r9, r2
 80012b4:	4642      	mov	r2, r8
 80012b6:	464b      	mov	r3, r9
 80012b8:	4601      	mov	r1, r0
 80012ba:	2002      	movs	r0, #2
 80012bc:	f002 fed2 	bl	8004064 <HAL_FLASH_Program>
		);
		i+=4;
 80012c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012c2:	3304      	adds	r3, #4
 80012c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80012c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d1d2      	bne.n	8001276 <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 80012d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d03f      	beq.n	8001356 <Flash_Write+0x12c>
		uint32_t wdata = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 80012da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d114      	bne.n	800130a <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i+2]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i]<<8);
 80012e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012e2:	3302      	adds	r3, #2
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	061a      	lsls	r2, r3, #24
 80012ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012ee:	3301      	adds	r3, #1
 80012f0:	68f9      	ldr	r1, [r7, #12]
 80012f2:	440b      	add	r3, r1
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	041b      	lsls	r3, r3, #16
 80012f8:	431a      	orrs	r2, r3
 80012fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012fc:	68f9      	ldr	r1, [r7, #12]
 80012fe:	440b      	add	r3, r1
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	4313      	orrs	r3, r2
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
 8001308:	e019      	b.n	800133e <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 800130a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800130c:	2b02      	cmp	r3, #2
 800130e:	d10d      	bne.n	800132c <Flash_Write+0x102>
			wdata = ((uint32_t)data[i+1]<<24)|((uint32_t)data[i]<<16);
 8001310:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001312:	3301      	adds	r3, #1
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	061a      	lsls	r2, r3, #24
 800131c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	440b      	add	r3, r1
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	4313      	orrs	r3, r2
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
 800132a:	e008      	b.n	800133e <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 800132c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800132e:	2b01      	cmp	r3, #1
 8001330:	d105      	bne.n	800133e <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 8001332:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	061b      	lsls	r3, r3, #24
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 800133e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	18d1      	adds	r1, r2, r3
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	2200      	movs	r2, #0
 8001348:	461c      	mov	r4, r3
 800134a:	4615      	mov	r5, r2
 800134c:	4622      	mov	r2, r4
 800134e:	462b      	mov	r3, r5
 8001350:	2002      	movs	r0, #2
 8001352:	f002 fe87 	bl	8004064 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8001356:	f002 ff1b 	bl	8004190 <HAL_FLASH_Lock>
}
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001364 <General_Copy_32_Bit>:
#include "main.h"
#include "general.h"

void General_Copy_32_Bit(uint32_t address_to, uint32_t address_from){
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8001372:	e00b      	b.n	800138c <General_Copy_32_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	4619      	mov	r1, r3
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	780a      	ldrb	r2, [r1, #0]
 8001384:	701a      	strb	r2, [r3, #0]
		i++;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3301      	adds	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2b04      	cmp	r3, #4
 8001390:	d1f0      	bne.n	8001374 <General_Copy_32_Bit+0x10>
	}
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <General_Copy_16_Bit>:
void General_Copy_16_Bit(uint32_t address_to, uint32_t address_from){
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 80013ac:	e00b      	b.n	80013c6 <General_Copy_16_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	780a      	ldrb	r2, [r1, #0]
 80013be:	701a      	strb	r2, [r3, #0]
		i++;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	3301      	adds	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d1f0      	bne.n	80013ae <General_Copy_16_Bit+0x10>
	}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <HAL_ADC_ConvCpltCallback>:
#include "pid.h"
#include "motor.h"
#include "signal.h"
#include "led.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x20>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 80013ea:	f000 fb09 	bl	8001a00 <Potentiometer_ADC_Interrupt>
    }
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40012400 	.word	0x40012400

080013fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d102      	bne.n	8001414 <HAL_TIM_PeriodElapsedCallback+0x18>
		PID_Timer_Interrupt();
 800140e:	f000 f991 	bl	8001734 <PID_Timer_Interrupt>
	}
	else if(htim->Instance == TIM4){
		Signal_Timer_Interrupt();
	}
}
 8001412:	e006      	b.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x26>
	else if(htim->Instance == TIM4){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x26>
		Signal_Timer_Interrupt();
 800141e:	f000 ff83 	bl	8002328 <Signal_Timer_Interrupt>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40000400 	.word	0x40000400
 8001430:	40000800 	.word	0x40000800

08001434 <Interrupts_SysTick>:

void Interrupts_SysTick(){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	Motor_SysTick_Interrupt();
 8001438:	f000 f888 	bl	800154c <Motor_SysTick_Interrupt>
	Signal_SysTick_Interrupt();
 800143c:	f000 ff38 	bl	80022b0 <Signal_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 8001440:	f000 f810 	bl	8001464 <LED_SysTick_Interrupt>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SIGNAL_Pin){
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_EXTI_Callback+0x14>
		Signal_Interrupt();
 8001458:	f000 ff72 	bl	8002340 <Signal_Interrupt>
	}
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <LED_SysTick_Interrupt>:

uint8_t led_mode;
uint8_t led_position_changed = 0;
uint8_t led_systick = 0;

void LED_SysTick_Interrupt(){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	if(led_mode == LED_MODE_POSITION_CHANGE){
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <LED_SysTick_Interrupt+0x30>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d10f      	bne.n	8001490 <LED_SysTick_Interrupt+0x2c>
		led_systick++;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <LED_SysTick_Interrupt+0x34>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <LED_SysTick_Interrupt+0x34>)
 800147a:	701a      	strb	r2, [r3, #0]
		if(led_systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <LED_SysTick_Interrupt+0x34>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b13      	cmp	r3, #19
 8001482:	d905      	bls.n	8001490 <LED_SysTick_Interrupt+0x2c>
			LED_Set(OFF);
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f809 	bl	800149c <LED_Set>
			led_systick = 0;
 800148a:	4b03      	ldr	r3, [pc, #12]	; (8001498 <LED_SysTick_Interrupt+0x34>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2000019c 	.word	0x2000019c
 8001498:	2000019e 	.word	0x2000019e

0800149c <LED_Set>:

void LED_Set(uint8_t state){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	if(state == ON){
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <LED_Set+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	4806      	ldr	r0, [pc, #24]	; (80014cc <LED_Set+0x30>)
 80014b2:	f003 f972 	bl	800479a <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 80014b6:	e004      	b.n	80014c2 <LED_Set+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <LED_Set+0x30>)
 80014be:	f003 f96c 	bl	800479a <HAL_GPIO_WritePin>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40010800 	.word	0x40010800

080014d0 <LED_Update>:
void LED_Update(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	switch(led_mode){
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <LED_Update+0x6c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d82a      	bhi.n	8001532 <LED_Update+0x62>
 80014dc:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <LED_Update+0x14>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f5 	.word	0x080014f5
 80014e8:	080014fd 	.word	0x080014fd
 80014ec:	08001505 	.word	0x08001505
 80014f0:	0800151d 	.word	0x0800151d
		case LED_MODE_OFF:
			LED_Set(OFF);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff ffd1 	bl	800149c <LED_Set>
		break;
 80014fa:	e01a      	b.n	8001532 <LED_Update+0x62>
		case LED_MODE_POWER:
			LED_Set(ON);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff ffcd 	bl	800149c <LED_Set>
		break;
 8001502:	e016      	b.n	8001532 <LED_Update+0x62>
		case LED_MODE_SIGNAL:
			if(pid_running){
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <LED_Update+0x70>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <LED_Update+0x44>
				LED_Set(ON);
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff ffc5 	bl	800149c <LED_Set>
			}else{
				LED_Set(OFF);
			}
		break;
 8001512:	e00e      	b.n	8001532 <LED_Update+0x62>
				LED_Set(OFF);
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff ffc1 	bl	800149c <LED_Set>
		break;
 800151a:	e00a      	b.n	8001532 <LED_Update+0x62>
		case LED_MODE_POSITION_CHANGE:
			if(led_position_changed){
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <LED_Update+0x74>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <LED_Update+0x60>
				led_systick = 0;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <LED_Update+0x78>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
				LED_Set(ON);
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff ffb6 	bl	800149c <LED_Set>
			}
		break;
 8001530:	bf00      	nop
	}
	led_position_changed = 0;
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <LED_Update+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000019c 	.word	0x2000019c
 8001540:	200001d1 	.word	0x200001d1
 8001544:	2000019d 	.word	0x2000019d
 8001548:	2000019e 	.word	0x2000019e

0800154c <Motor_SysTick_Interrupt>:
uint8_t motor_invert;
uint16_t motor_max_power;
uint8_t motor_running = 0;
uint8_t motor_systick = 0;

void Motor_SysTick_Interrupt(){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	if(!pid_running){
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <Motor_SysTick_Interrupt+0x38>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d113      	bne.n	8001580 <Motor_SysTick_Interrupt+0x34>
		if(motor_running){
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <Motor_SysTick_Interrupt+0x3c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00f      	beq.n	8001580 <Motor_SysTick_Interrupt+0x34>
			motor_systick++;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <Motor_SysTick_Interrupt+0x40>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <Motor_SysTick_Interrupt+0x40>)
 800156a:	701a      	strb	r2, [r3, #0]
			if(motor_systick == MOTOR_USB_TEST_TIMEOUT_MS){
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <Motor_SysTick_Interrupt+0x40>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d105      	bne.n	8001580 <Motor_SysTick_Interrupt+0x34>
				Motor_Set(0);
 8001574:	2000      	movs	r0, #0
 8001576:	f000 f80b 	bl	8001590 <Motor_Set>
				motor_systick = 0;
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <Motor_SysTick_Interrupt+0x40>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200001d1 	.word	0x200001d1
 8001588:	200001a2 	.word	0x200001a2
 800158c:	200001a3 	.word	0x200001a3

08001590 <Motor_Set>:

void Motor_Set(int16_t strength){//-1000 0 1000 Strength
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
	if(motor_invert == MOTOR_INVERT){
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <Motor_Set+0xc0>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d103      	bne.n	80015aa <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	425b      	negs	r3, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	80fb      	strh	r3, [r7, #6]
	}

	if(strength == 0){
 80015aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d110      	bne.n	80015d4 <Motor_Set+0x44>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <Motor_Set+0xc4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <Motor_Set+0xc4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c4:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 0;
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <Motor_Set+0xc8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
		motor_systick = 0;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <Motor_Set+0xcc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000 - (strength / (1000 / motor_max_power)));
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
		motor_running = 1;
	}
}
 80015d2:	e038      	b.n	8001646 <Motor_Set+0xb6>
	}else if(strength < 0){
 80015d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da18      	bge.n	800160e <Motor_Set+0x7e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <Motor_Set+0xc4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000 + (strength / (1000 / motor_max_power)));
 80015e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <Motor_Set+0xd0>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	4619      	mov	r1, r3
 80015f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f4:	fb93 f3f1 	sdiv	r3, r3, r1
 80015f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80015fc:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <Motor_Set+0xc4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <Motor_Set+0xc8>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	e01b      	b.n	8001646 <Motor_Set+0xb6>
	}else if(strength > 0){
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	2b00      	cmp	r3, #0
 8001614:	dd17      	ble.n	8001646 <Motor_Set+0xb6>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000 - (strength / (1000 / motor_max_power)));
 8001616:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <Motor_Set+0xd0>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001624:	fb93 f3f1 	sdiv	r3, r3, r1
 8001628:	fb92 f3f3 	sdiv	r3, r2, r3
 800162c:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <Motor_Set+0xc4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <Motor_Set+0xc4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <Motor_Set+0xc8>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	2000019f 	.word	0x2000019f
 8001654:	200003d0 	.word	0x200003d0
 8001658:	200001a2 	.word	0x200001a2
 800165c:	200001a3 	.word	0x200001a3
 8001660:	200001a0 	.word	0x200001a0

08001664 <Motor_Get>:
int16_t Motor_Get(){
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1) != 1000){
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <Motor_Get+0x78>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001672:	d013      	beq.n	800169c <Motor_Get+0x38>
		return (1000 - (int16_t)__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1)) * (1000 / motor_max_power);
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <Motor_Get+0x78>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167a:	b21b      	sxth	r3, r3
 800167c:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001680:	b29b      	uxth	r3, r3
 8001682:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <Motor_Get+0x7c>)
 8001684:	8812      	ldrh	r2, [r2, #0]
 8001686:	4611      	mov	r1, r2
 8001688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800168c:	fb92 f2f1 	sdiv	r2, r2, r1
 8001690:	b292      	uxth	r2, r2
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	b29b      	uxth	r3, r3
 8001698:	b21b      	sxth	r3, r3
 800169a:	e01a      	b.n	80016d2 <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 800169c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a6:	d013      	beq.n	80016d0 <Motor_Get+0x6c>
		return ((int16_t)__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1000) * (1000 / motor_max_power);
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <Motor_Get+0x78>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <Motor_Get+0x7c>)
 80016b8:	8812      	ldrh	r2, [r2, #0]
 80016ba:	4611      	mov	r1, r2
 80016bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c0:	fb92 f2f1 	sdiv	r2, r2, r1
 80016c4:	b292      	uxth	r2, r2
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	e000      	b.n	80016d2 <Motor_Get+0x6e>
	}
	return 0;
 80016d0:	2300      	movs	r3, #0
} 
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	200003d0 	.word	0x200003d0
 80016e0:	200001a0 	.word	0x200001a0

080016e4 <Motor_Init>:
void Motor_Init(){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016e8:	2100      	movs	r1, #0
 80016ea:	4804      	ldr	r0, [pc, #16]	; (80016fc <Motor_Init+0x18>)
 80016ec:	f005 fc38 	bl	8006f60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016f0:	2104      	movs	r1, #4
 80016f2:	4802      	ldr	r0, [pc, #8]	; (80016fc <Motor_Init+0x18>)
 80016f4:	f005 fc34 	bl	8006f60 <HAL_TIM_PWM_Start>
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200003d0 	.word	0x200003d0

08001700 <PID_Timer_Stop>:
float pid_setpoint = 2047;
//Runtime variables
float pid_last_input = 0;
float pid_output_sum = 0;

void PID_Timer_Stop(){
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <PID_Timer_Stop+0x10>)
 8001706:	f005 fba5 	bl	8006e54 <HAL_TIM_Base_Stop_IT>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000418 	.word	0x20000418

08001714 <PID_Timer_Restart>:
void PID_Timer_Restart(){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <PID_Timer_Restart+0x1c>)
 800171a:	f005 fb9b 	bl	8006e54 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <PID_Timer_Restart+0x1c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 8001726:	4802      	ldr	r0, [pc, #8]	; (8001730 <PID_Timer_Restart+0x1c>)
 8001728:	f005 fb42 	bl	8006db0 <HAL_TIM_Base_Start_IT>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000418 	.word	0x20000418

08001734 <PID_Timer_Interrupt>:
void PID_Timer_Interrupt(){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	PID_Compute();
 8001738:	f000 f838 	bl	80017ac <PID_Compute>
	PID_Ready(pid_output);
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <PID_Timer_Interrupt+0x1c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fca1 	bl	8001088 <PID_Ready>
	PID_Timer_Restart();
 8001746:	f7ff ffe5 	bl	8001714 <PID_Timer_Restart>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200001d8 	.word	0x200001d8

08001754 <PID_Get_Sampling_Time>:

uint16_t PID_Get_Sampling_Time(){
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <PID_Get_Sampling_Time+0x1c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <PID_Get_Sampling_Time+0x20>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	095b      	lsrs	r3, r3, #5
 8001766:	b29b      	uxth	r3, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	20000418 	.word	0x20000418
 8001774:	51eb851f 	.word	0x51eb851f

08001778 <PID_Set_Sampling_Time>:
void PID_Set_Sampling_Time(uint16_t ms){
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	2264      	movs	r2, #100	; 0x64
 8001786:	fb03 f202 	mul.w	r2, r3, r2
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <PID_Set_Sampling_Time+0x30>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	2264      	movs	r2, #100	; 0x64
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <PID_Set_Sampling_Time+0x30>)
 800179c:	60da      	str	r2, [r3, #12]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	20000418 	.word	0x20000418

080017ac <PID_Compute>:
void PID_Compute(){
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
	float input = pid_input;
 80017b2:	4b67      	ldr	r3, [pc, #412]	; (8001950 <PID_Compute+0x1a4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60fb      	str	r3, [r7, #12]
	float error = pid_setpoint - input;
 80017b8:	4b66      	ldr	r3, [pc, #408]	; (8001954 <PID_Compute+0x1a8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f920 	bl	8000a04 <__aeabi_fsub>
 80017c4:	4603      	mov	r3, r0
 80017c6:	60bb      	str	r3, [r7, #8]
	float input_d = (input - pid_last_input);
 80017c8:	4b63      	ldr	r3, [pc, #396]	; (8001958 <PID_Compute+0x1ac>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff f918 	bl	8000a04 <__aeabi_fsub>
 80017d4:	4603      	mov	r3, r0
 80017d6:	607b      	str	r3, [r7, #4]
	float output = 0;
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]

	//Select parameters for range
	float kp, ki, kd;
	if(error >= pid_split_1){
 80017de:	4b5f      	ldr	r3, [pc, #380]	; (800195c <PID_Compute+0x1b0>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f9c4 	bl	8000b70 <__aeabi_i2f>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4619      	mov	r1, r3
 80017ec:	68b8      	ldr	r0, [r7, #8]
 80017ee:	f7ff fbc5 	bl	8000f7c <__aeabi_fcmpge>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <PID_Compute+0x60>
		kp = pid_kp_1;
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <PID_Compute+0x1b4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	61bb      	str	r3, [r7, #24]
		ki = pid_ki_1;
 80017fe:	4b59      	ldr	r3, [pc, #356]	; (8001964 <PID_Compute+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	617b      	str	r3, [r7, #20]
		kd = pid_kd_1;
 8001804:	4b58      	ldr	r3, [pc, #352]	; (8001968 <PID_Compute+0x1bc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	e02c      	b.n	8001866 <PID_Compute+0xba>
	}else if((error < pid_split_1) && (error >= pid_split_2)){
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <PID_Compute+0x1b0>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff f9ad 	bl	8000b70 <__aeabi_i2f>
 8001816:	4603      	mov	r3, r0
 8001818:	4619      	mov	r1, r3
 800181a:	68b8      	ldr	r0, [r7, #8]
 800181c:	f7ff fb9a 	bl	8000f54 <__aeabi_fcmplt>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d016      	beq.n	8001854 <PID_Compute+0xa8>
 8001826:	4b51      	ldr	r3, [pc, #324]	; (800196c <PID_Compute+0x1c0>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f9a0 	bl	8000b70 <__aeabi_i2f>
 8001830:	4603      	mov	r3, r0
 8001832:	4619      	mov	r1, r3
 8001834:	68b8      	ldr	r0, [r7, #8]
 8001836:	f7ff fba1 	bl	8000f7c <__aeabi_fcmpge>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d009      	beq.n	8001854 <PID_Compute+0xa8>
		kp = pid_kp_2;
 8001840:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <PID_Compute+0x1c4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	61bb      	str	r3, [r7, #24]
		ki = pid_ki_2;
 8001846:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <PID_Compute+0x1c8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	617b      	str	r3, [r7, #20]
		kd = pid_kd_2;
 800184c:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <PID_Compute+0x1cc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	e008      	b.n	8001866 <PID_Compute+0xba>
	}else{
		kp = pid_kp_3;
 8001854:	4b49      	ldr	r3, [pc, #292]	; (800197c <PID_Compute+0x1d0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
		ki = pid_ki_3;
 800185a:	4b49      	ldr	r3, [pc, #292]	; (8001980 <PID_Compute+0x1d4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	617b      	str	r3, [r7, #20]
		kd = pid_kd_3;
 8001860:	4b48      	ldr	r3, [pc, #288]	; (8001984 <PID_Compute+0x1d8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	613b      	str	r3, [r7, #16]
	}

	//Calculate output
	pid_output_sum += ki * error;
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	6978      	ldr	r0, [r7, #20]
 800186a:	f7ff f9d5 	bl	8000c18 <__aeabi_fmul>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b45      	ldr	r3, [pc, #276]	; (8001988 <PID_Compute+0x1dc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	4610      	mov	r0, r2
 800187a:	f7ff f8c5 	bl	8000a08 <__addsf3>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	4b41      	ldr	r3, [pc, #260]	; (8001988 <PID_Compute+0x1dc>)
 8001884:	601a      	str	r2, [r3, #0]
	if(pid_on == PID_ON_M){
 8001886:	4b41      	ldr	r3, [pc, #260]	; (800198c <PID_Compute+0x1e0>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10e      	bne.n	80018ac <PID_Compute+0x100>
		pid_output_sum -= kp * input_d;
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <PID_Compute+0x1dc>)
 8001890:	681c      	ldr	r4, [r3, #0]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	69b8      	ldr	r0, [r7, #24]
 8001896:	f7ff f9bf 	bl	8000c18 <__aeabi_fmul>
 800189a:	4603      	mov	r3, r0
 800189c:	4619      	mov	r1, r3
 800189e:	4620      	mov	r0, r4
 80018a0:	f7ff f8b0 	bl	8000a04 <__aeabi_fsub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b37      	ldr	r3, [pc, #220]	; (8001988 <PID_Compute+0x1dc>)
 80018aa:	601a      	str	r2, [r3, #0]
	}

	if(pid_output_sum > 1000.0f){
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <PID_Compute+0x1dc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4937      	ldr	r1, [pc, #220]	; (8001990 <PID_Compute+0x1e4>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fb6c 	bl	8000f90 <__aeabi_fcmpgt>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <PID_Compute+0x11a>
		pid_output_sum = 1000.0f;
 80018be:	4b32      	ldr	r3, [pc, #200]	; (8001988 <PID_Compute+0x1dc>)
 80018c0:	4a33      	ldr	r2, [pc, #204]	; (8001990 <PID_Compute+0x1e4>)
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e00b      	b.n	80018de <PID_Compute+0x132>
	}else if(pid_output_sum < -1000.0f){
 80018c6:	4b30      	ldr	r3, [pc, #192]	; (8001988 <PID_Compute+0x1dc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4932      	ldr	r1, [pc, #200]	; (8001994 <PID_Compute+0x1e8>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fb41 	bl	8000f54 <__aeabi_fcmplt>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <PID_Compute+0x132>
		pid_output_sum = -1000.0f;
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <PID_Compute+0x1dc>)
 80018da:	4a2e      	ldr	r2, [pc, #184]	; (8001994 <PID_Compute+0x1e8>)
 80018dc:	601a      	str	r2, [r3, #0]
	}

	if(pid_on == PID_ON_E){
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <PID_Compute+0x1e0>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <PID_Compute+0x146>
		output = kp * error;
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	69b8      	ldr	r0, [r7, #24]
 80018ea:	f7ff f995 	bl	8000c18 <__aeabi_fmul>
 80018ee:	4603      	mov	r3, r0
 80018f0:	61fb      	str	r3, [r7, #28]
	}

	output += pid_output_sum - kd * input_d;
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <PID_Compute+0x1dc>)
 80018f4:	681c      	ldr	r4, [r3, #0]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	6938      	ldr	r0, [r7, #16]
 80018fa:	f7ff f98d 	bl	8000c18 <__aeabi_fmul>
 80018fe:	4603      	mov	r3, r0
 8001900:	4619      	mov	r1, r3
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff f87e 	bl	8000a04 <__aeabi_fsub>
 8001908:	4603      	mov	r3, r0
 800190a:	4619      	mov	r1, r3
 800190c:	69f8      	ldr	r0, [r7, #28]
 800190e:	f7ff f87b 	bl	8000a08 <__addsf3>
 8001912:	4603      	mov	r3, r0
 8001914:	61fb      	str	r3, [r7, #28]
	if(output > 1000.0f){
 8001916:	491e      	ldr	r1, [pc, #120]	; (8001990 <PID_Compute+0x1e4>)
 8001918:	69f8      	ldr	r0, [r7, #28]
 800191a:	f7ff fb39 	bl	8000f90 <__aeabi_fcmpgt>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <PID_Compute+0x17e>
		output = 1000.0f;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <PID_Compute+0x1e4>)
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	e008      	b.n	800193c <PID_Compute+0x190>
	}
	else if(output < -1000.0f){
 800192a:	491a      	ldr	r1, [pc, #104]	; (8001994 <PID_Compute+0x1e8>)
 800192c:	69f8      	ldr	r0, [r7, #28]
 800192e:	f7ff fb11 	bl	8000f54 <__aeabi_fcmplt>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <PID_Compute+0x190>
		output = -1000.0f;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <PID_Compute+0x1e8>)
 800193a:	61fb      	str	r3, [r7, #28]
	}

	//Store
	pid_output = output;
 800193c:	4a16      	ldr	r2, [pc, #88]	; (8001998 <PID_Compute+0x1ec>)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	6013      	str	r3, [r2, #0]
	pid_last_input = input;
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <PID_Compute+0x1ac>)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	3724      	adds	r7, #36	; 0x24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	200001d4 	.word	0x200001d4
 8001954:	20000000 	.word	0x20000000
 8001958:	200001dc 	.word	0x200001dc
 800195c:	200001cc 	.word	0x200001cc
 8001960:	200001a8 	.word	0x200001a8
 8001964:	200001ac 	.word	0x200001ac
 8001968:	200001b0 	.word	0x200001b0
 800196c:	200001ce 	.word	0x200001ce
 8001970:	200001b4 	.word	0x200001b4
 8001974:	200001b8 	.word	0x200001b8
 8001978:	200001bc 	.word	0x200001bc
 800197c:	200001c0 	.word	0x200001c0
 8001980:	200001c4 	.word	0x200001c4
 8001984:	200001c8 	.word	0x200001c8
 8001988:	200001e0 	.word	0x200001e0
 800198c:	200001d0 	.word	0x200001d0
 8001990:	447a0000 	.word	0x447a0000
 8001994:	c47a0000 	.word	0xc47a0000
 8001998:	200001d8 	.word	0x200001d8

0800199c <PID_Start>:
void PID_Start(){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	pid_last_input = pid_input;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <PID_Start+0x30>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <PID_Start+0x34>)
 80019a6:	6013      	str	r3, [r2, #0]
	pid_output_sum = 0;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <PID_Start+0x38>)
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
	PID_Set_Sampling_Time(pid_sampling_time);
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <PID_Start+0x3c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fede 	bl	8001778 <PID_Set_Sampling_Time>
	PID_Timer_Restart();
 80019bc:	f7ff feaa 	bl	8001714 <PID_Timer_Restart>
	pid_running = 1;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <PID_Start+0x40>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200001d4 	.word	0x200001d4
 80019d0:	200001dc 	.word	0x200001dc
 80019d4:	200001e0 	.word	0x200001e0
 80019d8:	200001a4 	.word	0x200001a4
 80019dc:	200001d1 	.word	0x200001d1

080019e0 <PID_Stop>:
void PID_Stop(){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	PID_Timer_Stop();
 80019e4:	f7ff fe8c 	bl	8001700 <PID_Timer_Stop>
	PID_Ready(0);
 80019e8:	f04f 0000 	mov.w	r0, #0
 80019ec:	f7ff fb4c 	bl	8001088 <PID_Ready>
	pid_running = 0;
 80019f0:	4b02      	ldr	r3, [pc, #8]	; (80019fc <PID_Stop+0x1c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200001d1 	.word	0x200001d1

08001a00 <Potentiometer_ADC_Interrupt>:
uint32_t potentiometer_adctmp = 0;
uint16_t potentiometer_adccnt = 0;
uint8_t potentiometer_init_cplt = 0;
float potentiometer_position = 0;

void Potentiometer_ADC_Interrupt(){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	potentiometer_adctmp += HAL_ADC_GetValue(&hadc1);
 8001a04:	4816      	ldr	r0, [pc, #88]	; (8001a60 <Potentiometer_ADC_Interrupt+0x60>)
 8001a06:	f001 feaf 	bl	8003768 <HAL_ADC_GetValue>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <Potentiometer_ADC_Interrupt+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <Potentiometer_ADC_Interrupt+0x64>)
 8001a14:	6013      	str	r3, [r2, #0]
	potentiometer_adccnt++;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <Potentiometer_ADC_Interrupt+0x68>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <Potentiometer_ADC_Interrupt+0x68>)
 8001a20:	801a      	strh	r2, [r3, #0]
	if(potentiometer_adccnt == POTENTIOMETER_SAMPLE_CNT){
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <Potentiometer_ADC_Interrupt+0x68>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d115      	bne.n	8001a56 <Potentiometer_ADC_Interrupt+0x56>
		potentiometer_position = (float)potentiometer_adctmp/POTENTIOMETER_SAMPLE_CNT;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <Potentiometer_ADC_Interrupt+0x64>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f89a 	bl	8000b68 <__aeabi_ui2f>
 8001a34:	4603      	mov	r3, r0
 8001a36:	490d      	ldr	r1, [pc, #52]	; (8001a6c <Potentiometer_ADC_Interrupt+0x6c>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f9a1 	bl	8000d80 <__aeabi_fdiv>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <Potentiometer_ADC_Interrupt+0x70>)
 8001a44:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 8001a46:	f7ff fad3 	bl	8000ff0 <Potentiometer_Ready>
		potentiometer_adccnt = 0;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <Potentiometer_ADC_Interrupt+0x68>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	801a      	strh	r2, [r3, #0]
		potentiometer_adctmp = 0;
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <Potentiometer_ADC_Interrupt+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
	}
	potentiometer_init_cplt = 1;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <Potentiometer_ADC_Interrupt+0x74>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000398 	.word	0x20000398
 8001a64:	200001e8 	.word	0x200001e8
 8001a68:	200001ec 	.word	0x200001ec
 8001a6c:	42c80000 	.word	0x42c80000
 8001a70:	200001f0 	.word	0x200001f0
 8001a74:	200001ee 	.word	0x200001ee

08001a78 <Potentiometer_Init>:

void Potentiometer_Init(){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001a7c:	bf00      	nop
 8001a7e:	4808      	ldr	r0, [pc, #32]	; (8001aa0 <Potentiometer_Init+0x28>)
 8001a80:	f002 f8de 	bl	8003c40 <HAL_ADCEx_Calibration_Start>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <Potentiometer_Init+0x28>)
 8001a8c:	f001 fdb6 	bl	80035fc <HAL_ADC_Start_IT>
	while(!potentiometer_init_cplt);
 8001a90:	bf00      	nop
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <Potentiometer_Init+0x2c>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0fb      	beq.n	8001a92 <Potentiometer_Init+0x1a>
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000398 	.word	0x20000398
 8001aa4:	200001ee 	.word	0x200001ee

08001aa8 <Settings_Read>:
extern uint16_t pid_split_2;
extern uint8_t pid_sampling_time;

uint8_t settings[SETTINGS_TOTAL_LENGTH];

void Settings_Read(){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	//Read
	Flash_Read(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 8001aae:	2244      	movs	r2, #68	; 0x44
 8001ab0:	49a2      	ldr	r1, [pc, #648]	; (8001d3c <Settings_Read+0x294>)
 8001ab2:	48a3      	ldr	r0, [pc, #652]	; (8001d40 <Settings_Read+0x298>)
 8001ab4:	f7ff fb9a 	bl	80011ec <Flash_Read>
	//Get CRC
	uint32_t crc = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&crc, (uint32_t)&settings[SETTINGS_TOTAL_LENGTH - 4]);
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	4aa1      	ldr	r2, [pc, #644]	; (8001d44 <Settings_Read+0x29c>)
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fc4e 	bl	8001364 <General_Copy_32_Bit>
	//If CRC is correct
	if(HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1) == crc){
 8001ac8:	2210      	movs	r2, #16
 8001aca:	499d      	ldr	r1, [pc, #628]	; (8001d40 <Settings_Read+0x298>)
 8001acc:	489e      	ldr	r0, [pc, #632]	; (8001d48 <Settings_Read+0x2a0>)
 8001ace:	f002 fa96 	bl	8003ffe <HAL_CRC_Calculate>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	f040 8279 	bne.w	8001fce <Settings_Read+0x526>
		//Parse
		General_Copy_16_Bit((uint32_t)&potentiometer_min, (uint32_t)&settings[0]);
 8001adc:	4b9b      	ldr	r3, [pc, #620]	; (8001d4c <Settings_Read+0x2a4>)
 8001ade:	4a98      	ldr	r2, [pc, #608]	; (8001d40 <Settings_Read+0x298>)
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fc5b 	bl	800139e <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&potentiometer_max, (uint32_t)&settings[2]);
 8001ae8:	4b99      	ldr	r3, [pc, #612]	; (8001d50 <Settings_Read+0x2a8>)
 8001aea:	4a9a      	ldr	r2, [pc, #616]	; (8001d54 <Settings_Read+0x2ac>)
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fc55 	bl	800139e <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&motor_max_power, (uint32_t)&settings[4]);
 8001af4:	4b98      	ldr	r3, [pc, #608]	; (8001d58 <Settings_Read+0x2b0>)
 8001af6:	4a99      	ldr	r2, [pc, #612]	; (8001d5c <Settings_Read+0x2b4>)
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fc4f 	bl	800139e <General_Copy_16_Bit>
		motor_invert = settings[6];
 8001b00:	4b8f      	ldr	r3, [pc, #572]	; (8001d40 <Settings_Read+0x298>)
 8001b02:	799a      	ldrb	r2, [r3, #6]
 8001b04:	4b96      	ldr	r3, [pc, #600]	; (8001d60 <Settings_Read+0x2b8>)
 8001b06:	701a      	strb	r2, [r3, #0]
		signal_ignore = settings[7];
 8001b08:	4b8d      	ldr	r3, [pc, #564]	; (8001d40 <Settings_Read+0x298>)
 8001b0a:	79da      	ldrb	r2, [r3, #7]
 8001b0c:	4b95      	ldr	r3, [pc, #596]	; (8001d64 <Settings_Read+0x2bc>)
 8001b0e:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&signal_min, (uint32_t)&settings[8]);
 8001b10:	4b95      	ldr	r3, [pc, #596]	; (8001d68 <Settings_Read+0x2c0>)
 8001b12:	4a96      	ldr	r2, [pc, #600]	; (8001d6c <Settings_Read+0x2c4>)
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fc24 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&signal_max, (uint32_t)&settings[12]);
 8001b1c:	4b94      	ldr	r3, [pc, #592]	; (8001d70 <Settings_Read+0x2c8>)
 8001b1e:	4a95      	ldr	r2, [pc, #596]	; (8001d74 <Settings_Read+0x2cc>)
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fc1e 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&settings[16]);
 8001b28:	4b93      	ldr	r3, [pc, #588]	; (8001d78 <Settings_Read+0x2d0>)
 8001b2a:	4a94      	ldr	r2, [pc, #592]	; (8001d7c <Settings_Read+0x2d4>)
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fc18 	bl	8001364 <General_Copy_32_Bit>
		led_mode = settings[20];
 8001b34:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <Settings_Read+0x298>)
 8001b36:	7d1a      	ldrb	r2, [r3, #20]
 8001b38:	4b91      	ldr	r3, [pc, #580]	; (8001d80 <Settings_Read+0x2d8>)
 8001b3a:	701a      	strb	r2, [r3, #0]
		pid_on = settings[21];
 8001b3c:	4b80      	ldr	r3, [pc, #512]	; (8001d40 <Settings_Read+0x298>)
 8001b3e:	7d5a      	ldrb	r2, [r3, #21]
 8001b40:	4b90      	ldr	r3, [pc, #576]	; (8001d84 <Settings_Read+0x2dc>)
 8001b42:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&settings[22]);
 8001b44:	4b90      	ldr	r3, [pc, #576]	; (8001d88 <Settings_Read+0x2e0>)
 8001b46:	4a91      	ldr	r2, [pc, #580]	; (8001d8c <Settings_Read+0x2e4>)
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fc0a 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&settings[26]);
 8001b50:	4b8f      	ldr	r3, [pc, #572]	; (8001d90 <Settings_Read+0x2e8>)
 8001b52:	4a90      	ldr	r2, [pc, #576]	; (8001d94 <Settings_Read+0x2ec>)
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fc04 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&settings[30]);
 8001b5c:	4b8e      	ldr	r3, [pc, #568]	; (8001d98 <Settings_Read+0x2f0>)
 8001b5e:	4a8f      	ldr	r2, [pc, #572]	; (8001d9c <Settings_Read+0x2f4>)
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fbfe 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&settings[34]);
 8001b68:	4b8d      	ldr	r3, [pc, #564]	; (8001da0 <Settings_Read+0x2f8>)
 8001b6a:	4a8e      	ldr	r2, [pc, #568]	; (8001da4 <Settings_Read+0x2fc>)
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fbf8 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&settings[38]);
 8001b74:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <Settings_Read+0x300>)
 8001b76:	4a8d      	ldr	r2, [pc, #564]	; (8001dac <Settings_Read+0x304>)
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fbf2 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&settings[42]);
 8001b80:	4b8b      	ldr	r3, [pc, #556]	; (8001db0 <Settings_Read+0x308>)
 8001b82:	4a8c      	ldr	r2, [pc, #560]	; (8001db4 <Settings_Read+0x30c>)
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fbec 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&settings[46]);
 8001b8c:	4b8a      	ldr	r3, [pc, #552]	; (8001db8 <Settings_Read+0x310>)
 8001b8e:	4a8b      	ldr	r2, [pc, #556]	; (8001dbc <Settings_Read+0x314>)
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fbe6 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&settings[50]);
 8001b98:	4b89      	ldr	r3, [pc, #548]	; (8001dc0 <Settings_Read+0x318>)
 8001b9a:	4a8a      	ldr	r2, [pc, #552]	; (8001dc4 <Settings_Read+0x31c>)
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fbe0 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&settings[54]);
 8001ba4:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <Settings_Read+0x320>)
 8001ba6:	4a89      	ldr	r2, [pc, #548]	; (8001dcc <Settings_Read+0x324>)
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fbda 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&settings[58]);
 8001bb0:	4b87      	ldr	r3, [pc, #540]	; (8001dd0 <Settings_Read+0x328>)
 8001bb2:	4a88      	ldr	r2, [pc, #544]	; (8001dd4 <Settings_Read+0x32c>)
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fbf1 	bl	800139e <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&settings[60]);
 8001bbc:	4b86      	ldr	r3, [pc, #536]	; (8001dd8 <Settings_Read+0x330>)
 8001bbe:	4a87      	ldr	r2, [pc, #540]	; (8001ddc <Settings_Read+0x334>)
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fbeb 	bl	800139e <General_Copy_16_Bit>
		pid_sampling_time = settings[62];
 8001bc8:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <Settings_Read+0x298>)
 8001bca:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001bce:	4b84      	ldr	r3, [pc, #528]	; (8001de0 <Settings_Read+0x338>)
 8001bd0:	701a      	strb	r2, [r3, #0]

		//Verify
		if((potentiometer_min < SETTINGS_DEF_POTENTIOMETER_MIN_MIN)||(potentiometer_min > SETTINGS_DEF_POTENTIOMETER_MIN_MAX)){
 8001bd2:	4b5e      	ldr	r3, [pc, #376]	; (8001d4c <Settings_Read+0x2a4>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8001bda:	d302      	bcc.n	8001be2 <Settings_Read+0x13a>
			potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 8001bdc:	4b5b      	ldr	r3, [pc, #364]	; (8001d4c <Settings_Read+0x2a4>)
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	801a      	strh	r2, [r3, #0]
		}
		if((potentiometer_max < SETTINGS_DEF_POTENTIOMETER_MAX_MIN)||(potentiometer_max > SETTINGS_DEF_POTENTIOMETER_MAX_MAX)){
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <Settings_Read+0x2a8>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	2b7f      	cmp	r3, #127	; 0x7f
 8001be8:	d904      	bls.n	8001bf4 <Settings_Read+0x14c>
 8001bea:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <Settings_Read+0x2a8>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf2:	d303      	bcc.n	8001bfc <Settings_Read+0x154>
			potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001bf4:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <Settings_Read+0x2a8>)
 8001bf6:	f640 727f 	movw	r2, #3967	; 0xf7f
 8001bfa:	801a      	strh	r2, [r3, #0]
		}
		if((motor_max_power < SETTINGS_DEF_MOTOR_MAX_POWER_MIN)||(motor_max_power > SETTINGS_DEF_MOTOR_MAX_POWER_MAX)){
 8001bfc:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <Settings_Read+0x2b0>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c04:	d903      	bls.n	8001c0e <Settings_Read+0x166>
			motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001c06:	4b54      	ldr	r3, [pc, #336]	; (8001d58 <Settings_Read+0x2b0>)
 8001c08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c0c:	801a      	strh	r2, [r3, #0]
		}
		if((motor_invert != MOTOR_NORMAL) && (motor_invert != MOTOR_INVERT)){
 8001c0e:	4b54      	ldr	r3, [pc, #336]	; (8001d60 <Settings_Read+0x2b8>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <Settings_Read+0x17c>
 8001c16:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <Settings_Read+0x2b8>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d002      	beq.n	8001c24 <Settings_Read+0x17c>
			motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8001c1e:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <Settings_Read+0x2b8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
		}
		if((signal_ignore != GENERAL_TRUE) && (signal_ignore != GENERAL_FALSE)){
 8001c24:	4b4f      	ldr	r3, [pc, #316]	; (8001d64 <Settings_Read+0x2bc>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d006      	beq.n	8001c3a <Settings_Read+0x192>
 8001c2c:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <Settings_Read+0x2bc>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <Settings_Read+0x192>
			signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 8001c34:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <Settings_Read+0x2bc>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
		}
		if((signal_min < SETTINGS_DEF_SIGNAL_MIN_MIN)||(signal_min> SETTINGS_DEF_SIGNAL_MIN_MAX)){
 8001c3a:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <Settings_Read+0x2c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4969      	ldr	r1, [pc, #420]	; (8001de4 <Settings_Read+0x33c>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f987 	bl	8000f54 <__aeabi_fcmplt>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d108      	bne.n	8001c5e <Settings_Read+0x1b6>
 8001c4c:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <Settings_Read+0x2c0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4965      	ldr	r1, [pc, #404]	; (8001de8 <Settings_Read+0x340>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f99c 	bl	8000f90 <__aeabi_fcmpgt>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <Settings_Read+0x1be>
			signal_min = SETTINGS_DEF_SIGNAL_MIN_DEF;
 8001c5e:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <Settings_Read+0x2c0>)
 8001c60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c64:	601a      	str	r2, [r3, #0]
		}
		if((signal_max < SETTINGS_DEF_SIGNAL_MAX_MIN)||(signal_max > SETTINGS_DEF_SIGNAL_MAX_MAX)){
 8001c66:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <Settings_Read+0x2c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f970 	bl	8000f54 <__aeabi_fcmplt>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <Settings_Read+0x1e4>
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <Settings_Read+0x2c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	495b      	ldr	r1, [pc, #364]	; (8001dec <Settings_Read+0x344>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f985 	bl	8000f90 <__aeabi_fcmpgt>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <Settings_Read+0x1ec>
			signal_max = SETTINGS_DEF_SIGNAL_MAX_DEF;
 8001c8c:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <Settings_Read+0x2c8>)
 8001c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c92:	601a      	str	r2, [r3, #0]
		}
		if((signal_max - signal_min) < (SETTINGS_DEF_SIGNAL_MAX_MIN - SETTINGS_DEF_SIGNAL_MIN_MIN)){
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <Settings_Read+0x2c8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a33      	ldr	r2, [pc, #204]	; (8001d68 <Settings_Read+0x2c0>)
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe feb0 	bl	8000a04 <__aeabi_fsub>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4952      	ldr	r1, [pc, #328]	; (8001df0 <Settings_Read+0x348>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f953 	bl	8000f54 <__aeabi_fcmplt>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <Settings_Read+0x21c>
			signal_min = SETTINGS_DEF_SIGNAL_MIN_DEF;
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <Settings_Read+0x2c0>)
 8001cb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cba:	601a      	str	r2, [r3, #0]
			signal_max = SETTINGS_DEF_SIGNAL_MAX_DEF;
 8001cbc:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <Settings_Read+0x2c8>)
 8001cbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc2:	601a      	str	r2, [r3, #0]
		}
		if((signal_timeout < SETTINGS_DEF_SIGNAL_TIMEOUT_MIN)||(signal_timeout > SETTINGS_DEF_SIGNAL_TIMEOUT_MAX)){
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <Settings_Read+0x2d0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d903      	bls.n	8001cd4 <Settings_Read+0x22c>
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <Settings_Read+0x2d0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2bc8      	cmp	r3, #200	; 0xc8
 8001cd2:	d902      	bls.n	8001cda <Settings_Read+0x232>
			signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <Settings_Read+0x2d0>)
 8001cd6:	2219      	movs	r2, #25
 8001cd8:	601a      	str	r2, [r3, #0]
		}
		if((led_mode != LED_MODE_OFF) && (led_mode != LED_MODE_POWER) && (led_mode != LED_MODE_SIGNAL) && (led_mode != LED_MODE_POSITION_CHANGE)){
 8001cda:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <Settings_Read+0x2d8>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00e      	beq.n	8001d00 <Settings_Read+0x258>
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <Settings_Read+0x2d8>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d00a      	beq.n	8001d00 <Settings_Read+0x258>
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <Settings_Read+0x2d8>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d006      	beq.n	8001d00 <Settings_Read+0x258>
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <Settings_Read+0x2d8>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d002      	beq.n	8001d00 <Settings_Read+0x258>
			led_mode = SETTINGS_DEF_LED_MODE_DEF;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <Settings_Read+0x2d8>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
		}
		if((pid_on != PID_ON_M) && (pid_on != PID_ON_E)){
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <Settings_Read+0x2dc>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d006      	beq.n	8001d16 <Settings_Read+0x26e>
 8001d08:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <Settings_Read+0x2dc>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <Settings_Read+0x26e>
			pid_on = SETTINGS_DEF_PID_ON_DEF;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <Settings_Read+0x2dc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
		}
		if((pid_kp_1 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_1 > SETTINGS_DEF_PID_KP_MAX)){
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <Settings_Read+0x2e0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f918 	bl	8000f54 <__aeabi_fcmplt>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d167      	bne.n	8001dfa <Settings_Read+0x352>
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <Settings_Read+0x2e0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4931      	ldr	r1, [pc, #196]	; (8001df4 <Settings_Read+0x34c>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f92d 	bl	8000f90 <__aeabi_fcmpgt>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	e05d      	b.n	8001df8 <Settings_Read+0x350>
 8001d3c:	0800fc00 	.word	0x0800fc00
 8001d40:	200001f4 	.word	0x200001f4
 8001d44:	20000234 	.word	0x20000234
 8001d48:	200003c8 	.word	0x200003c8
 8001d4c:	200001e4 	.word	0x200001e4
 8001d50:	200001e6 	.word	0x200001e6
 8001d54:	200001f6 	.word	0x200001f6
 8001d58:	200001a0 	.word	0x200001a0
 8001d5c:	200001f8 	.word	0x200001f8
 8001d60:	2000019f 	.word	0x2000019f
 8001d64:	20000238 	.word	0x20000238
 8001d68:	2000023c 	.word	0x2000023c
 8001d6c:	200001fc 	.word	0x200001fc
 8001d70:	20000240 	.word	0x20000240
 8001d74:	20000200 	.word	0x20000200
 8001d78:	20000244 	.word	0x20000244
 8001d7c:	20000204 	.word	0x20000204
 8001d80:	2000019c 	.word	0x2000019c
 8001d84:	200001d0 	.word	0x200001d0
 8001d88:	200001a8 	.word	0x200001a8
 8001d8c:	2000020a 	.word	0x2000020a
 8001d90:	200001ac 	.word	0x200001ac
 8001d94:	2000020e 	.word	0x2000020e
 8001d98:	200001b0 	.word	0x200001b0
 8001d9c:	20000212 	.word	0x20000212
 8001da0:	200001b4 	.word	0x200001b4
 8001da4:	20000216 	.word	0x20000216
 8001da8:	200001b8 	.word	0x200001b8
 8001dac:	2000021a 	.word	0x2000021a
 8001db0:	200001bc 	.word	0x200001bc
 8001db4:	2000021e 	.word	0x2000021e
 8001db8:	200001c0 	.word	0x200001c0
 8001dbc:	20000222 	.word	0x20000222
 8001dc0:	200001c4 	.word	0x200001c4
 8001dc4:	20000226 	.word	0x20000226
 8001dc8:	200001c8 	.word	0x200001c8
 8001dcc:	2000022a 	.word	0x2000022a
 8001dd0:	200001cc 	.word	0x200001cc
 8001dd4:	2000022e 	.word	0x2000022e
 8001dd8:	200001ce 	.word	0x200001ce
 8001ddc:	20000230 	.word	0x20000230
 8001de0:	200001a4 	.word	0x200001a4
 8001de4:	3dcccccd 	.word	0x3dcccccd
 8001de8:	40133333 	.word	0x40133333
 8001dec:	402ccccd 	.word	0x402ccccd
 8001df0:	3ecccccd 	.word	0x3ecccccd
 8001df4:	42c80000 	.word	0x42c80000
 8001df8:	d003      	beq.n	8001e02 <Settings_Read+0x35a>
			pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 8001dfa:	4b9e      	ldr	r3, [pc, #632]	; (8002074 <Settings_Read+0x5cc>)
 8001dfc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e00:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_1 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_1 > SETTINGS_DEF_PID_KI_MAX)){
 8001e02:	4b9d      	ldr	r3, [pc, #628]	; (8002078 <Settings_Read+0x5d0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f8a2 	bl	8000f54 <__aeabi_fcmplt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d108      	bne.n	8001e28 <Settings_Read+0x380>
 8001e16:	4b98      	ldr	r3, [pc, #608]	; (8002078 <Settings_Read+0x5d0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4998      	ldr	r1, [pc, #608]	; (800207c <Settings_Read+0x5d4>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f8b7 	bl	8000f90 <__aeabi_fcmpgt>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <Settings_Read+0x388>
			pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 8001e28:	4b93      	ldr	r3, [pc, #588]	; (8002078 <Settings_Read+0x5d0>)
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_1 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_1 > SETTINGS_DEF_PID_KD_MAX)){
 8001e30:	4b93      	ldr	r3, [pc, #588]	; (8002080 <Settings_Read+0x5d8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f04f 0100 	mov.w	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f88b 	bl	8000f54 <__aeabi_fcmplt>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d108      	bne.n	8001e56 <Settings_Read+0x3ae>
 8001e44:	4b8e      	ldr	r3, [pc, #568]	; (8002080 <Settings_Read+0x5d8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	498c      	ldr	r1, [pc, #560]	; (800207c <Settings_Read+0x5d4>)
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff f8a0 	bl	8000f90 <__aeabi_fcmpgt>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <Settings_Read+0x3b4>
			pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 8001e56:	4b8a      	ldr	r3, [pc, #552]	; (8002080 <Settings_Read+0x5d8>)
 8001e58:	4a8a      	ldr	r2, [pc, #552]	; (8002084 <Settings_Read+0x5dc>)
 8001e5a:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_2 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_2 > SETTINGS_DEF_PID_KP_MAX)){
 8001e5c:	4b8a      	ldr	r3, [pc, #552]	; (8002088 <Settings_Read+0x5e0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f875 	bl	8000f54 <__aeabi_fcmplt>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d108      	bne.n	8001e82 <Settings_Read+0x3da>
 8001e70:	4b85      	ldr	r3, [pc, #532]	; (8002088 <Settings_Read+0x5e0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4981      	ldr	r1, [pc, #516]	; (800207c <Settings_Read+0x5d4>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f88a 	bl	8000f90 <__aeabi_fcmpgt>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <Settings_Read+0x3e2>
			pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 8001e82:	4b81      	ldr	r3, [pc, #516]	; (8002088 <Settings_Read+0x5e0>)
 8001e84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e88:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_2 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_2 > SETTINGS_DEF_PID_KI_MAX)){
 8001e8a:	4b80      	ldr	r3, [pc, #512]	; (800208c <Settings_Read+0x5e4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f85e 	bl	8000f54 <__aeabi_fcmplt>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d108      	bne.n	8001eb0 <Settings_Read+0x408>
 8001e9e:	4b7b      	ldr	r3, [pc, #492]	; (800208c <Settings_Read+0x5e4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4976      	ldr	r1, [pc, #472]	; (800207c <Settings_Read+0x5d4>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f873 	bl	8000f90 <__aeabi_fcmpgt>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <Settings_Read+0x410>
			pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 8001eb0:	4b76      	ldr	r3, [pc, #472]	; (800208c <Settings_Read+0x5e4>)
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_2 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_2 > SETTINGS_DEF_PID_KD_MAX)){
 8001eb8:	4b75      	ldr	r3, [pc, #468]	; (8002090 <Settings_Read+0x5e8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f04f 0100 	mov.w	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f847 	bl	8000f54 <__aeabi_fcmplt>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d108      	bne.n	8001ede <Settings_Read+0x436>
 8001ecc:	4b70      	ldr	r3, [pc, #448]	; (8002090 <Settings_Read+0x5e8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	496a      	ldr	r1, [pc, #424]	; (800207c <Settings_Read+0x5d4>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f85c 	bl	8000f90 <__aeabi_fcmpgt>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <Settings_Read+0x43c>
			pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 8001ede:	4b6c      	ldr	r3, [pc, #432]	; (8002090 <Settings_Read+0x5e8>)
 8001ee0:	4a68      	ldr	r2, [pc, #416]	; (8002084 <Settings_Read+0x5dc>)
 8001ee2:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_3 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_3 > SETTINGS_DEF_PID_KP_MAX)){
 8001ee4:	4b6b      	ldr	r3, [pc, #428]	; (8002094 <Settings_Read+0x5ec>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f831 	bl	8000f54 <__aeabi_fcmplt>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d108      	bne.n	8001f0a <Settings_Read+0x462>
 8001ef8:	4b66      	ldr	r3, [pc, #408]	; (8002094 <Settings_Read+0x5ec>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	495f      	ldr	r1, [pc, #380]	; (800207c <Settings_Read+0x5d4>)
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f846 	bl	8000f90 <__aeabi_fcmpgt>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <Settings_Read+0x46a>
			pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 8001f0a:	4b62      	ldr	r3, [pc, #392]	; (8002094 <Settings_Read+0x5ec>)
 8001f0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f10:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_3 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_3 > SETTINGS_DEF_PID_KI_MAX)){
 8001f12:	4b61      	ldr	r3, [pc, #388]	; (8002098 <Settings_Read+0x5f0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f81a 	bl	8000f54 <__aeabi_fcmplt>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d108      	bne.n	8001f38 <Settings_Read+0x490>
 8001f26:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <Settings_Read+0x5f0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4954      	ldr	r1, [pc, #336]	; (800207c <Settings_Read+0x5d4>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff f82f 	bl	8000f90 <__aeabi_fcmpgt>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <Settings_Read+0x498>
			pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 8001f38:	4b57      	ldr	r3, [pc, #348]	; (8002098 <Settings_Read+0x5f0>)
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_3 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_3 > SETTINGS_DEF_PID_KD_MAX)){
 8001f40:	4b56      	ldr	r3, [pc, #344]	; (800209c <Settings_Read+0x5f4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff f803 	bl	8000f54 <__aeabi_fcmplt>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d108      	bne.n	8001f66 <Settings_Read+0x4be>
 8001f54:	4b51      	ldr	r3, [pc, #324]	; (800209c <Settings_Read+0x5f4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4948      	ldr	r1, [pc, #288]	; (800207c <Settings_Read+0x5d4>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f818 	bl	8000f90 <__aeabi_fcmpgt>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <Settings_Read+0x4c4>
			pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 8001f66:	4b4d      	ldr	r3, [pc, #308]	; (800209c <Settings_Read+0x5f4>)
 8001f68:	4a46      	ldr	r2, [pc, #280]	; (8002084 <Settings_Read+0x5dc>)
 8001f6a:	601a      	str	r2, [r3, #0]
		}
		if((pid_split_1 < SETTINGS_DEF_PID_SPLIT_1_MIN)||(pid_split_1 > SETTINGS_DEF_PID_SPLIT_1_MAX)){
 8001f6c:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <Settings_Read+0x5f8>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f74:	d303      	bcc.n	8001f7e <Settings_Read+0x4d6>
			pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <Settings_Read+0x5f8>)
 8001f78:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f7c:	801a      	strh	r2, [r3, #0]
		}
		if((pid_split_2 < SETTINGS_DEF_PID_SPLIT_2_MIN)||(pid_split_2 > SETTINGS_DEF_PID_SPLIT_2_MAX)){
 8001f7e:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <Settings_Read+0x5fc>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f86:	d303      	bcc.n	8001f90 <Settings_Read+0x4e8>
			pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 8001f88:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <Settings_Read+0x5fc>)
 8001f8a:	f640 32fc 	movw	r2, #3068	; 0xbfc
 8001f8e:	801a      	strh	r2, [r3, #0]
		}
		if((pid_sampling_time < SETTINGS_DEF_PID_SAMPLING_TIME_MIN)||(pid_sampling_time > SETTINGS_DEF_PID_SAMPLING_TIME_MAX)){
 8001f90:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <Settings_Read+0x600>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fdeb 	bl	8000b70 <__aeabi_i2f>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4943      	ldr	r1, [pc, #268]	; (80020ac <Settings_Read+0x604>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe ffd8 	bl	8000f54 <__aeabi_fcmplt>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <Settings_Read+0x51e>
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <Settings_Read+0x600>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fdde 	bl	8000b70 <__aeabi_i2f>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4931      	ldr	r1, [pc, #196]	; (800207c <Settings_Read+0x5d4>)
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe ffe9 	bl	8000f90 <__aeabi_fcmpgt>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d100      	bne.n	8001fc6 <Settings_Read+0x51e>
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
	}
}
 8001fc4:	e051      	b.n	800206a <Settings_Read+0x5c2>
			pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 8001fc6:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <Settings_Read+0x600>)
 8001fc8:	2205      	movs	r2, #5
 8001fca:	701a      	strb	r2, [r3, #0]
}
 8001fcc:	e04d      	b.n	800206a <Settings_Read+0x5c2>
		potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <Settings_Read+0x608>)
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	801a      	strh	r2, [r3, #0]
		potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001fd4:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <Settings_Read+0x60c>)
 8001fd6:	f640 727f 	movw	r2, #3967	; 0xf7f
 8001fda:	801a      	strh	r2, [r3, #0]
		motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001fdc:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <Settings_Read+0x610>)
 8001fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fe2:	801a      	strh	r2, [r3, #0]
		motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <Settings_Read+0x614>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
		signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 8001fea:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <Settings_Read+0x618>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
		signal_min = SETTINGS_DEF_SIGNAL_MAX_DEF;
 8001ff0:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <Settings_Read+0x61c>)
 8001ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ff6:	601a      	str	r2, [r3, #0]
		signal_max = SETTINGS_DEF_SIGNAL_MAX_DEF;
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <Settings_Read+0x620>)
 8001ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ffe:	601a      	str	r2, [r3, #0]
		signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8002000:	4b32      	ldr	r3, [pc, #200]	; (80020cc <Settings_Read+0x624>)
 8002002:	2219      	movs	r2, #25
 8002004:	601a      	str	r2, [r3, #0]
		led_mode = SETTINGS_DEF_LED_MODE_DEF;
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <Settings_Read+0x628>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
		pid_on = SETTINGS_DEF_PID_ON_DEF;
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <Settings_Read+0x62c>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
		pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <Settings_Read+0x5cc>)
 8002014:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002018:	601a      	str	r2, [r3, #0]
		pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <Settings_Read+0x5d0>)
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
		pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <Settings_Read+0x5d8>)
 8002024:	4a17      	ldr	r2, [pc, #92]	; (8002084 <Settings_Read+0x5dc>)
 8002026:	601a      	str	r2, [r3, #0]
		pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <Settings_Read+0x5e0>)
 800202a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800202e:	601a      	str	r2, [r3, #0]
		pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <Settings_Read+0x5e4>)
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
		pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <Settings_Read+0x5e8>)
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <Settings_Read+0x5dc>)
 800203c:	601a      	str	r2, [r3, #0]
		pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <Settings_Read+0x5ec>)
 8002040:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002044:	601a      	str	r2, [r3, #0]
		pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 8002046:	4b14      	ldr	r3, [pc, #80]	; (8002098 <Settings_Read+0x5f0>)
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <Settings_Read+0x5f4>)
 8002050:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <Settings_Read+0x5dc>)
 8002052:	601a      	str	r2, [r3, #0]
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <Settings_Read+0x5f8>)
 8002056:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800205a:	801a      	strh	r2, [r3, #0]
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <Settings_Read+0x5fc>)
 800205e:	f640 32fc 	movw	r2, #3068	; 0xbfc
 8002062:	801a      	strh	r2, [r3, #0]
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <Settings_Read+0x600>)
 8002066:	2205      	movs	r2, #5
 8002068:	701a      	strb	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200001a8 	.word	0x200001a8
 8002078:	200001ac 	.word	0x200001ac
 800207c:	42c80000 	.word	0x42c80000
 8002080:	200001b0 	.word	0x200001b0
 8002084:	40400000 	.word	0x40400000
 8002088:	200001b4 	.word	0x200001b4
 800208c:	200001b8 	.word	0x200001b8
 8002090:	200001bc 	.word	0x200001bc
 8002094:	200001c0 	.word	0x200001c0
 8002098:	200001c4 	.word	0x200001c4
 800209c:	200001c8 	.word	0x200001c8
 80020a0:	200001cc 	.word	0x200001cc
 80020a4:	200001ce 	.word	0x200001ce
 80020a8:	200001a4 	.word	0x200001a4
 80020ac:	40a00000 	.word	0x40a00000
 80020b0:	200001e4 	.word	0x200001e4
 80020b4:	200001e6 	.word	0x200001e6
 80020b8:	200001a0 	.word	0x200001a0
 80020bc:	2000019f 	.word	0x2000019f
 80020c0:	20000238 	.word	0x20000238
 80020c4:	2000023c 	.word	0x2000023c
 80020c8:	20000240 	.word	0x20000240
 80020cc:	20000244 	.word	0x20000244
 80020d0:	2000019c 	.word	0x2000019c
 80020d4:	200001d0 	.word	0x200001d0

080020d8 <Settings_Write>:
void Settings_Write(){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
	General_Copy_16_Bit((uint32_t)&settings[0], (uint32_t)&potentiometer_min);
 80020de:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <Settings_Write+0x130>)
 80020e0:	4a4a      	ldr	r2, [pc, #296]	; (800220c <Settings_Write+0x134>)
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff f95a 	bl	800139e <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[2], (uint32_t)&potentiometer_max);
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <Settings_Write+0x138>)
 80020ec:	4a49      	ldr	r2, [pc, #292]	; (8002214 <Settings_Write+0x13c>)
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff f954 	bl	800139e <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[4], (uint32_t)&motor_max_power);
 80020f6:	4b48      	ldr	r3, [pc, #288]	; (8002218 <Settings_Write+0x140>)
 80020f8:	4a48      	ldr	r2, [pc, #288]	; (800221c <Settings_Write+0x144>)
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff f94e 	bl	800139e <General_Copy_16_Bit>
	settings[6] = motor_invert;
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <Settings_Write+0x148>)
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	4b40      	ldr	r3, [pc, #256]	; (8002208 <Settings_Write+0x130>)
 8002108:	719a      	strb	r2, [r3, #6]
	settings[7] = signal_ignore;
 800210a:	4b46      	ldr	r3, [pc, #280]	; (8002224 <Settings_Write+0x14c>)
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <Settings_Write+0x130>)
 8002110:	71da      	strb	r2, [r3, #7]
	General_Copy_32_Bit((uint32_t)&settings[8], (uint32_t)&signal_min);
 8002112:	4b45      	ldr	r3, [pc, #276]	; (8002228 <Settings_Write+0x150>)
 8002114:	4a45      	ldr	r2, [pc, #276]	; (800222c <Settings_Write+0x154>)
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f923 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[12], (uint32_t)&signal_max);
 800211e:	4b44      	ldr	r3, [pc, #272]	; (8002230 <Settings_Write+0x158>)
 8002120:	4a44      	ldr	r2, [pc, #272]	; (8002234 <Settings_Write+0x15c>)
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f91d 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[16], (uint32_t)&signal_timeout);
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <Settings_Write+0x160>)
 800212c:	4a43      	ldr	r2, [pc, #268]	; (800223c <Settings_Write+0x164>)
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f917 	bl	8001364 <General_Copy_32_Bit>
	settings[20] = led_mode;
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <Settings_Write+0x168>)
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	4b33      	ldr	r3, [pc, #204]	; (8002208 <Settings_Write+0x130>)
 800213c:	751a      	strb	r2, [r3, #20]
	settings[21] = pid_on;
 800213e:	4b41      	ldr	r3, [pc, #260]	; (8002244 <Settings_Write+0x16c>)
 8002140:	781a      	ldrb	r2, [r3, #0]
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <Settings_Write+0x130>)
 8002144:	755a      	strb	r2, [r3, #21]
	General_Copy_32_Bit((uint32_t)&settings[22], (uint32_t)&pid_kp_1);
 8002146:	4b40      	ldr	r3, [pc, #256]	; (8002248 <Settings_Write+0x170>)
 8002148:	4a40      	ldr	r2, [pc, #256]	; (800224c <Settings_Write+0x174>)
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff f909 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[26], (uint32_t)&pid_ki_1);
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <Settings_Write+0x178>)
 8002154:	4a3f      	ldr	r2, [pc, #252]	; (8002254 <Settings_Write+0x17c>)
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff f903 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[30], (uint32_t)&pid_kd_1);
 800215e:	4b3e      	ldr	r3, [pc, #248]	; (8002258 <Settings_Write+0x180>)
 8002160:	4a3e      	ldr	r2, [pc, #248]	; (800225c <Settings_Write+0x184>)
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f8fd 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[34], (uint32_t)&pid_kp_2);
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <Settings_Write+0x188>)
 800216c:	4a3d      	ldr	r2, [pc, #244]	; (8002264 <Settings_Write+0x18c>)
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f8f7 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[38], (uint32_t)&pid_ki_2);
 8002176:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <Settings_Write+0x190>)
 8002178:	4a3c      	ldr	r2, [pc, #240]	; (800226c <Settings_Write+0x194>)
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff f8f1 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[42], (uint32_t)&pid_kd_2);
 8002182:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <Settings_Write+0x198>)
 8002184:	4a3b      	ldr	r2, [pc, #236]	; (8002274 <Settings_Write+0x19c>)
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff f8eb 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[46], (uint32_t)&pid_kp_3);
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <Settings_Write+0x1a0>)
 8002190:	4a3a      	ldr	r2, [pc, #232]	; (800227c <Settings_Write+0x1a4>)
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff f8e5 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[50], (uint32_t)&pid_ki_3);
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <Settings_Write+0x1a8>)
 800219c:	4a39      	ldr	r2, [pc, #228]	; (8002284 <Settings_Write+0x1ac>)
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f8df 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[54], (uint32_t)&pid_kd_3);
 80021a6:	4b38      	ldr	r3, [pc, #224]	; (8002288 <Settings_Write+0x1b0>)
 80021a8:	4a38      	ldr	r2, [pc, #224]	; (800228c <Settings_Write+0x1b4>)
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f8d9 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&settings[58], (uint32_t)&pid_split_1);
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <Settings_Write+0x1b8>)
 80021b4:	4a37      	ldr	r2, [pc, #220]	; (8002294 <Settings_Write+0x1bc>)
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f8f0 	bl	800139e <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[60], (uint32_t)&pid_split_2);
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <Settings_Write+0x1c0>)
 80021c0:	4a36      	ldr	r2, [pc, #216]	; (800229c <Settings_Write+0x1c4>)
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f8ea 	bl	800139e <General_Copy_16_Bit>
	settings[62] = pid_sampling_time;
 80021ca:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <Settings_Write+0x1c8>)
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <Settings_Write+0x130>)
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	settings[63] = SETTINGS_CRC_PADDING;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <Settings_Write+0x130>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1);
 80021dc:	2210      	movs	r2, #16
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <Settings_Write+0x130>)
 80021e0:	4830      	ldr	r0, [pc, #192]	; (80022a4 <Settings_Write+0x1cc>)
 80021e2:	f001 ff0c 	bl	8003ffe <HAL_CRC_Calculate>
 80021e6:	4603      	mov	r3, r0
 80021e8:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&settings[64], (uint32_t)&crc);
 80021ea:	4a2f      	ldr	r2, [pc, #188]	; (80022a8 <Settings_Write+0x1d0>)
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7ff f8b7 	bl	8001364 <General_Copy_32_Bit>
	Flash_Write(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 80021f6:	2244      	movs	r2, #68	; 0x44
 80021f8:	492c      	ldr	r1, [pc, #176]	; (80022ac <Settings_Write+0x1d4>)
 80021fa:	4803      	ldr	r0, [pc, #12]	; (8002208 <Settings_Write+0x130>)
 80021fc:	f7ff f815 	bl	800122a <Flash_Write>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200001f4 	.word	0x200001f4
 800220c:	200001e4 	.word	0x200001e4
 8002210:	200001f6 	.word	0x200001f6
 8002214:	200001e6 	.word	0x200001e6
 8002218:	200001f8 	.word	0x200001f8
 800221c:	200001a0 	.word	0x200001a0
 8002220:	2000019f 	.word	0x2000019f
 8002224:	20000238 	.word	0x20000238
 8002228:	200001fc 	.word	0x200001fc
 800222c:	2000023c 	.word	0x2000023c
 8002230:	20000200 	.word	0x20000200
 8002234:	20000240 	.word	0x20000240
 8002238:	20000204 	.word	0x20000204
 800223c:	20000244 	.word	0x20000244
 8002240:	2000019c 	.word	0x2000019c
 8002244:	200001d0 	.word	0x200001d0
 8002248:	2000020a 	.word	0x2000020a
 800224c:	200001a8 	.word	0x200001a8
 8002250:	2000020e 	.word	0x2000020e
 8002254:	200001ac 	.word	0x200001ac
 8002258:	20000212 	.word	0x20000212
 800225c:	200001b0 	.word	0x200001b0
 8002260:	20000216 	.word	0x20000216
 8002264:	200001b4 	.word	0x200001b4
 8002268:	2000021a 	.word	0x2000021a
 800226c:	200001b8 	.word	0x200001b8
 8002270:	2000021e 	.word	0x2000021e
 8002274:	200001bc 	.word	0x200001bc
 8002278:	20000222 	.word	0x20000222
 800227c:	200001c0 	.word	0x200001c0
 8002280:	20000226 	.word	0x20000226
 8002284:	200001c4 	.word	0x200001c4
 8002288:	2000022a 	.word	0x2000022a
 800228c:	200001c8 	.word	0x200001c8
 8002290:	2000022e 	.word	0x2000022e
 8002294:	200001cc 	.word	0x200001cc
 8002298:	20000230 	.word	0x20000230
 800229c:	200001ce 	.word	0x200001ce
 80022a0:	200001a4 	.word	0x200001a4
 80022a4:	200003c8 	.word	0x200003c8
 80022a8:	20000234 	.word	0x20000234
 80022ac:	0800fc00 	.word	0x0800fc00

080022b0 <Signal_SysTick_Interrupt>:
uint32_t signal_timeout;

uint8_t signal_present = 0;
uint32_t signal_timeout_passed_ms = 0;

void Signal_SysTick_Interrupt(){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	if(signal_present){
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <Signal_SysTick_Interrupt+0x5c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d024      	beq.n	8002306 <Signal_SysTick_Interrupt+0x56>
		if(signal_timeout_passed_ms >= signal_timeout){
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <Signal_SysTick_Interrupt+0x60>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <Signal_SysTick_Interrupt+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d319      	bcc.n	80022fc <Signal_SysTick_Interrupt+0x4c>
			signal_present = 0;
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <Signal_SysTick_Interrupt+0x5c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <Signal_SysTick_Interrupt+0x68>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <Signal_SysTick_Interrupt+0x36>
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <Signal_SysTick_Interrupt+0x68>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d013      	beq.n	8002306 <Signal_SysTick_Interrupt+0x56>
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <Signal_SysTick_Interrupt+0x6c>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <Signal_SysTick_Interrupt+0x56>
				if(pid_running){
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <Signal_SysTick_Interrupt+0x70>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <Signal_SysTick_Interrupt+0x42>
					PID_Stop();
 80022ee:	f7ff fb77 	bl	80019e0 <PID_Stop>
				}
				pid_setpoint = 0;
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <Signal_SysTick_Interrupt+0x74>)
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
			}
		}else{
			signal_timeout_passed_ms++;
		}
	}
}
 80022fa:	e004      	b.n	8002306 <Signal_SysTick_Interrupt+0x56>
			signal_timeout_passed_ms++;
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <Signal_SysTick_Interrupt+0x60>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	4a03      	ldr	r2, [pc, #12]	; (8002310 <Signal_SysTick_Interrupt+0x60>)
 8002304:	6013      	str	r3, [r2, #0]
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000248 	.word	0x20000248
 8002310:	2000024c 	.word	0x2000024c
 8002314:	20000244 	.word	0x20000244
 8002318:	20000238 	.word	0x20000238
 800231c:	20000254 	.word	0x20000254
 8002320:	200001d1 	.word	0x200001d1
 8002324:	20000000 	.word	0x20000000

08002328 <Signal_Timer_Interrupt>:
void Signal_Timer_Interrupt(){
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
	signal_present = 0;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <Signal_Timer_Interrupt+0x14>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000248 	.word	0x20000248

08002340 <Signal_Interrupt>:
void Signal_Interrupt(){
 8002340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
	uint32_t cnt = Signal_Read_Timer();
 8002346:	f000 f909 	bl	800255c <Signal_Read_Timer>
 800234a:	60f8      	str	r0, [r7, #12]
	if(Signal_Read() == SIGNAL_HIGH){
 800234c:	f000 f91e 	bl	800258c <Signal_Read>
 8002350:	4603      	mov	r3, r0
 8002352:	2b01      	cmp	r3, #1
 8002354:	d108      	bne.n	8002368 <Signal_Interrupt+0x28>
		Signal_Timer_Reset();
 8002356:	f000 f90d 	bl	8002574 <Signal_Timer_Reset>
		signal_present = 1;
 800235a:	4b73      	ldr	r3, [pc, #460]	; (8002528 <Signal_Interrupt+0x1e8>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
		signal_timeout_passed_ms = 0;
 8002360:	4b72      	ldr	r3, [pc, #456]	; (800252c <Signal_Interrupt+0x1ec>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
					PID_Stop();
				}
			}
		}
	}
}
 8002366:	e0d4      	b.n	8002512 <Signal_Interrupt+0x1d2>
	}else if(signal_present){
 8002368:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <Signal_Interrupt+0x1e8>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80d0 	beq.w	8002512 <Signal_Interrupt+0x1d2>
		if(!usb_present || (!signal_ignore && usb_present)){
 8002372:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <Signal_Interrupt+0x1f0>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <Signal_Interrupt+0x4e>
 800237a:	4b6e      	ldr	r3, [pc, #440]	; (8002534 <Signal_Interrupt+0x1f4>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 80c7 	bne.w	8002512 <Signal_Interrupt+0x1d2>
 8002384:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <Signal_Interrupt+0x1f0>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80c2 	beq.w	8002512 <Signal_Interrupt+0x1d2>
			float received_length_ms  = (float)((uint32_t)cnt + (uint32_t)1) / 24000.0f;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3301      	adds	r3, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fbe8 	bl	8000b68 <__aeabi_ui2f>
 8002398:	4603      	mov	r3, r0
 800239a:	4967      	ldr	r1, [pc, #412]	; (8002538 <Signal_Interrupt+0x1f8>)
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fcef 	bl	8000d80 <__aeabi_fdiv>
 80023a2:	4603      	mov	r3, r0
 80023a4:	60bb      	str	r3, [r7, #8]
			if((received_length_ms <= signal_max) && (received_length_ms >= signal_min)){
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <Signal_Interrupt+0x1fc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	68b8      	ldr	r0, [r7, #8]
 80023ae:	f7fe fddb 	bl	8000f68 <__aeabi_fcmple>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a1 	beq.w	80024fc <Signal_Interrupt+0x1bc>
 80023ba:	4b61      	ldr	r3, [pc, #388]	; (8002540 <Signal_Interrupt+0x200>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	68b8      	ldr	r0, [r7, #8]
 80023c2:	f7fe fddb 	bl	8000f7c <__aeabi_fcmpge>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8097 	beq.w	80024fc <Signal_Interrupt+0x1bc>
				float new_pid_setpoint = (((float)potentiometer_max - (float)potentiometer_min) * ((received_length_ms - signal_min) / (signal_max - signal_min))) + (float)potentiometer_min;
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <Signal_Interrupt+0x204>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fbc8 	bl	8000b68 <__aeabi_ui2f>
 80023d8:	4604      	mov	r4, r0
 80023da:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <Signal_Interrupt+0x208>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fbc2 	bl	8000b68 <__aeabi_ui2f>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4619      	mov	r1, r3
 80023e8:	4620      	mov	r0, r4
 80023ea:	f7fe fb0b 	bl	8000a04 <__aeabi_fsub>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461c      	mov	r4, r3
 80023f2:	4b53      	ldr	r3, [pc, #332]	; (8002540 <Signal_Interrupt+0x200>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4619      	mov	r1, r3
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	f7fe fb03 	bl	8000a04 <__aeabi_fsub>
 80023fe:	4603      	mov	r3, r0
 8002400:	461d      	mov	r5, r3
 8002402:	4b4e      	ldr	r3, [pc, #312]	; (800253c <Signal_Interrupt+0x1fc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a4e      	ldr	r2, [pc, #312]	; (8002540 <Signal_Interrupt+0x200>)
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe faf9 	bl	8000a04 <__aeabi_fsub>
 8002412:	4603      	mov	r3, r0
 8002414:	4619      	mov	r1, r3
 8002416:	4628      	mov	r0, r5
 8002418:	f7fe fcb2 	bl	8000d80 <__aeabi_fdiv>
 800241c:	4603      	mov	r3, r0
 800241e:	4619      	mov	r1, r3
 8002420:	4620      	mov	r0, r4
 8002422:	f7fe fbf9 	bl	8000c18 <__aeabi_fmul>
 8002426:	4603      	mov	r3, r0
 8002428:	461c      	mov	r4, r3
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <Signal_Interrupt+0x208>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fb9a 	bl	8000b68 <__aeabi_ui2f>
 8002434:	4603      	mov	r3, r0
 8002436:	4619      	mov	r1, r3
 8002438:	4620      	mov	r0, r4
 800243a:	f7fe fae5 	bl	8000a08 <__addsf3>
 800243e:	4603      	mov	r3, r0
 8002440:	607b      	str	r3, [r7, #4]
					fabs((new_pid_setpoint - (float)potentiometer_min) - (pid_setpoint - (float)potentiometer_min)) / (((float)potentiometer_max - (float)potentiometer_min) / 100.0f)
 8002442:	4b41      	ldr	r3, [pc, #260]	; (8002548 <Signal_Interrupt+0x208>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fb8e 	bl	8000b68 <__aeabi_ui2f>
 800244c:	4603      	mov	r3, r0
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7fe fad7 	bl	8000a04 <__aeabi_fsub>
 8002456:	4603      	mov	r3, r0
 8002458:	461d      	mov	r5, r3
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <Signal_Interrupt+0x20c>)
 800245c:	681c      	ldr	r4, [r3, #0]
 800245e:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <Signal_Interrupt+0x208>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fb80 	bl	8000b68 <__aeabi_ui2f>
 8002468:	4603      	mov	r3, r0
 800246a:	4619      	mov	r1, r3
 800246c:	4620      	mov	r0, r4
 800246e:	f7fe fac9 	bl	8000a04 <__aeabi_fsub>
 8002472:	4603      	mov	r3, r0
 8002474:	4619      	mov	r1, r3
 8002476:	4628      	mov	r0, r5
 8002478:	f7fe fac4 	bl	8000a04 <__aeabi_fsub>
 800247c:	4603      	mov	r3, r0
 800247e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002482:	4618      	mov	r0, r3
 8002484:	f7fd ffc8 	bl	8000418 <__aeabi_f2d>
 8002488:	4604      	mov	r4, r0
 800248a:	460d      	mov	r5, r1
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <Signal_Interrupt+0x204>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fb69 	bl	8000b68 <__aeabi_ui2f>
 8002496:	4606      	mov	r6, r0
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <Signal_Interrupt+0x208>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fb63 	bl	8000b68 <__aeabi_ui2f>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4619      	mov	r1, r3
 80024a6:	4630      	mov	r0, r6
 80024a8:	f7fe faac 	bl	8000a04 <__aeabi_fsub>
 80024ac:	4603      	mov	r3, r0
 80024ae:	4928      	ldr	r1, [pc, #160]	; (8002550 <Signal_Interrupt+0x210>)
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fc65 	bl	8000d80 <__aeabi_fdiv>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fd ffad 	bl	8000418 <__aeabi_f2d>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4620      	mov	r0, r4
 80024c4:	4629      	mov	r1, r5
 80024c6:	f7fe f929 	bl	800071c <__aeabi_ddiv>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
				if(
 80024d2:	a313      	add	r3, pc, #76	; (adr r3, 8002520 <Signal_Interrupt+0x1e0>)
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	f7fe fa7c 	bl	80009d4 <__aeabi_dcmpge>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <Signal_Interrupt+0x1a8>
					led_position_changed = 1;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <Signal_Interrupt+0x214>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
				pid_setpoint = new_pid_setpoint;
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <Signal_Interrupt+0x20c>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6013      	str	r3, [r2, #0]
				if(!pid_running){
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <Signal_Interrupt+0x218>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10c      	bne.n	8002510 <Signal_Interrupt+0x1d0>
					PID_Start();
 80024f6:	f7ff fa51 	bl	800199c <PID_Start>
			if((received_length_ms <= signal_max) && (received_length_ms >= signal_min)){
 80024fa:	e009      	b.n	8002510 <Signal_Interrupt+0x1d0>
				signal_present = 0;
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <Signal_Interrupt+0x1e8>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
				if(pid_running){
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <Signal_Interrupt+0x218>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <Signal_Interrupt+0x1d2>
					PID_Stop();
 800250a:	f7ff fa69 	bl	80019e0 <PID_Stop>
}
 800250e:	e000      	b.n	8002512 <Signal_Interrupt+0x1d2>
			if((received_length_ms <= signal_max) && (received_length_ms >= signal_min)){
 8002510:	bf00      	nop
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251a:	bf00      	nop
 800251c:	f3af 8000 	nop.w
 8002520:	a0000000 	.word	0xa0000000
 8002524:	3fc99999 	.word	0x3fc99999
 8002528:	20000248 	.word	0x20000248
 800252c:	2000024c 	.word	0x2000024c
 8002530:	20000254 	.word	0x20000254
 8002534:	20000238 	.word	0x20000238
 8002538:	46bb8000 	.word	0x46bb8000
 800253c:	20000240 	.word	0x20000240
 8002540:	2000023c 	.word	0x2000023c
 8002544:	200001e6 	.word	0x200001e6
 8002548:	200001e4 	.word	0x200001e4
 800254c:	20000000 	.word	0x20000000
 8002550:	42c80000 	.word	0x42c80000
 8002554:	2000019d 	.word	0x2000019d
 8002558:	200001d1 	.word	0x200001d1

0800255c <Signal_Read_Timer>:

uint32_t Signal_Read_Timer(){
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <Signal_Read_Timer+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000460 	.word	0x20000460

08002574 <Signal_Timer_Reset>:
void Signal_Timer_Reset(){
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <Signal_Timer_Reset+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000460 	.word	0x20000460

0800258c <Signal_Read>:
uint8_t Signal_Read(){
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 800259a:	e01d      	b.n	80025d8 <Signal_Read+0x4c>
		i = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 80025a0:	2102      	movs	r1, #2
 80025a2:	4811      	ldr	r0, [pc, #68]	; (80025e8 <Signal_Read+0x5c>)
 80025a4:	f002 f8e2 	bl	800476c <HAL_GPIO_ReadPin>
 80025a8:	4603      	mov	r3, r0
 80025aa:	71fb      	strb	r3, [r7, #7]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 80025ac:	e011      	b.n	80025d2 <Signal_Read+0x46>
			i++;
 80025ae:	797b      	ldrb	r3, [r7, #5]
 80025b0:	3301      	adds	r3, #1
 80025b2:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 80025b4:	2102      	movs	r1, #2
 80025b6:	480c      	ldr	r0, [pc, #48]	; (80025e8 <Signal_Read+0x5c>)
 80025b8:	f002 f8d8 	bl	800476c <HAL_GPIO_ReadPin>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d000      	beq.n	80025c8 <Signal_Read+0x3c>
				break;
 80025c6:	e007      	b.n	80025d8 <Signal_Read+0x4c>
			}
			if(i == SIGNAL_DEBOUNCE_SAMPLES){
 80025c8:	797b      	ldrb	r3, [r7, #5]
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d101      	bne.n	80025d2 <Signal_Read+0x46>
				d = 1;
 80025ce:	2301      	movs	r3, #1
 80025d0:	71bb      	strb	r3, [r7, #6]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 80025d2:	797b      	ldrb	r3, [r7, #5]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d1ea      	bne.n	80025ae <Signal_Read+0x22>
	while(d != 1){
 80025d8:	79bb      	ldrb	r3, [r7, #6]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d1de      	bne.n	800259c <Signal_Read+0x10>
			}
		}
	}
	return level;
 80025de:	79fb      	ldrb	r3, [r7, #7]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40010c00 	.word	0x40010c00

080025ec <Signal_Init>:

void Signal_Init(){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <Signal_Init+0x10>)
 80025f2:	f004 fb93 	bl	8006d1c <HAL_TIM_Base_Start>
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000460 	.word	0x20000460

08002600 <USB_Det>:

uint8_t usb_present = 0;
uint8_t usb_tx_buffer[64];
uint8_t usb_long_buffer[256];

void USB_Det(){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	if((hUsbDeviceFS.dev_state == USBD_STATE_ADDRESSED) || (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)){
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <USB_Det+0x44>)
 8002606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800260a:	2b02      	cmp	r3, #2
 800260c:	d004      	beq.n	8002618 <USB_Det+0x18>
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <USB_Det+0x44>)
 8002610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002614:	2b03      	cmp	r3, #3
 8002616:	d109      	bne.n	800262c <USB_Det+0x2c>
		if(!usb_present){
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <USB_Det+0x48>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <USB_Det+0x24>
			PID_Stop();
 8002620:	f7ff f9de 	bl	80019e0 <PID_Stop>
		}
		usb_present = 1;
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <USB_Det+0x48>)
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e009      	b.n	8002640 <USB_Det+0x40>
	}else{
		if(usb_present){
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <USB_Det+0x48>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <USB_Det+0x38>
			PID_Stop();
 8002634:	f7ff f9d4 	bl	80019e0 <PID_Stop>
		}
		usb_present = 0;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <USB_Det+0x48>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
	}
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200004d4 	.word	0x200004d4
 8002648:	20000254 	.word	0x20000254

0800264c <USB_Packet_Received>:
void USB_Packet_Received(uint8_t *data, uint32_t length){
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	if((data[1] == USB_CMD_CONFIG) && (uint32_t)data[0] == length){
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3301      	adds	r3, #1
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d11c      	bne.n	800269a <USB_Packet_Received+0x4e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	4293      	cmp	r3, r2
 800266a:	d116      	bne.n	800269a <USB_Packet_Received+0x4e>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3b01      	subs	r3, #1
 8002672:	461a      	mov	r2, r3
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4829      	ldr	r0, [pc, #164]	; (800271c <USB_Packet_Received+0xd0>)
 8002678:	f001 fcc1 	bl	8003ffe <HAL_CRC_Calculate>
 800267c:	4601      	mov	r1, r0
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	3b04      	subs	r3, #4
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4299      	cmp	r1, r3
 800268a:	d143      	bne.n	8002714 <USB_Packet_Received+0xc8>
			USB_Parse_Config(data);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f84d 	bl	800272c <USB_Parse_Config>
			usb_rq = USB_RQ_CONF;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <USB_Packet_Received+0xd4>)
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8002698:	e03c      	b.n	8002714 <USB_Packet_Received+0xc8>
		}
	}else if((data[1] == USB_CMD_STATUS) && (length == 64)){
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3301      	adds	r3, #1
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d108      	bne.n	80026b6 <USB_Packet_Received+0x6a>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d105      	bne.n	80026b6 <USB_Packet_Received+0x6a>
		memcpy(usb_long_buffer, data, 64);
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	481d      	ldr	r0, [pc, #116]	; (8002724 <USB_Packet_Received+0xd8>)
 80026b0:	f00a f8bc 	bl	800c82c <memcpy>
 80026b4:	e02e      	b.n	8002714 <USB_Packet_Received+0xc8>
	}
	else if((usb_long_buffer[1] == USB_CMD_STATUS) && (usb_long_buffer[0] == (length + 64))){
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <USB_Packet_Received+0xd8>)
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d126      	bne.n	800270c <USB_Packet_Received+0xc0>
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <USB_Packet_Received+0xd8>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	3340      	adds	r3, #64	; 0x40
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d11f      	bne.n	800270c <USB_Packet_Received+0xc0>
		memcpy(&usb_long_buffer[64], data, length);
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4815      	ldr	r0, [pc, #84]	; (8002728 <USB_Packet_Received+0xdc>)
 80026d2:	f00a f8ab 	bl	800c82c <memcpy>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)usb_long_buffer, ((length + 64) / 4) - 1) == *(uint32_t *)&usb_long_buffer[length + 64- 4]){
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	3340      	adds	r3, #64	; 0x40
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3b01      	subs	r3, #1
 80026de:	461a      	mov	r2, r3
 80026e0:	4910      	ldr	r1, [pc, #64]	; (8002724 <USB_Packet_Received+0xd8>)
 80026e2:	480e      	ldr	r0, [pc, #56]	; (800271c <USB_Packet_Received+0xd0>)
 80026e4:	f001 fc8b 	bl	8003ffe <HAL_CRC_Calculate>
 80026e8:	4602      	mov	r2, r0
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	333c      	adds	r3, #60	; 0x3c
 80026ee:	490d      	ldr	r1, [pc, #52]	; (8002724 <USB_Packet_Received+0xd8>)
 80026f0:	440b      	add	r3, r1
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d105      	bne.n	8002704 <USB_Packet_Received+0xb8>
			USB_Parse_Status(usb_long_buffer);
 80026f8:	480a      	ldr	r0, [pc, #40]	; (8002724 <USB_Packet_Received+0xd8>)
 80026fa:	f000 f909 	bl	8002910 <USB_Parse_Status>
			usb_rq = USB_RQ_STAT;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <USB_Packet_Received+0xd4>)
 8002700:	2202      	movs	r2, #2
 8002702:	701a      	strb	r2, [r3, #0]
		}
		usb_long_buffer[1] = 0xff;
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <USB_Packet_Received+0xd8>)
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	705a      	strb	r2, [r3, #1]
 800270a:	e003      	b.n	8002714 <USB_Packet_Received+0xc8>
	}else{
		usb_long_buffer[1] = 0xff;
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <USB_Packet_Received+0xd8>)
 800270e:	22ff      	movs	r2, #255	; 0xff
 8002710:	705a      	strb	r2, [r3, #1]
	}
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200003c8 	.word	0x200003c8
 8002720:	20000250 	.word	0x20000250
 8002724:	20000298 	.word	0x20000298
 8002728:	200002d8 	.word	0x200002d8

0800272c <USB_Parse_Config>:
void USB_Parse_Config(uint8_t *data){
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	usb_rq_sett_revert_flash = data[2];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	789a      	ldrb	r2, [r3, #2]
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <USB_Parse_Config+0x1c>)
 800273a:	701a      	strb	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000251 	.word	0x20000251

0800274c <USB_Send_Config>:
void USB_Send_Config(){
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_CONFIG_LENGTH;
 8002752:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <USB_Send_Config+0x134>)
 8002754:	2244      	movs	r2, #68	; 0x44
 8002756:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_CONFIG;
 8002758:	4b49      	ldr	r3, [pc, #292]	; (8002880 <USB_Send_Config+0x134>)
 800275a:	2200      	movs	r2, #0
 800275c:	705a      	strb	r2, [r3, #1]
	*(uint16_t *)&usb_tx_buffer[2] = potentiometer_min;
 800275e:	4b49      	ldr	r3, [pc, #292]	; (8002884 <USB_Send_Config+0x138>)
 8002760:	4a49      	ldr	r2, [pc, #292]	; (8002888 <USB_Send_Config+0x13c>)
 8002762:	8812      	ldrh	r2, [r2, #0]
 8002764:	801a      	strh	r2, [r3, #0]
	*(uint16_t *)&usb_tx_buffer[4] = potentiometer_max;
 8002766:	4b49      	ldr	r3, [pc, #292]	; (800288c <USB_Send_Config+0x140>)
 8002768:	4a49      	ldr	r2, [pc, #292]	; (8002890 <USB_Send_Config+0x144>)
 800276a:	8812      	ldrh	r2, [r2, #0]
 800276c:	801a      	strh	r2, [r3, #0]
	usb_tx_buffer[6] = (uint8_t)((uint16_t)motor_max_power / 10);
 800276e:	4b49      	ldr	r3, [pc, #292]	; (8002894 <USB_Send_Config+0x148>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	4a49      	ldr	r2, [pc, #292]	; (8002898 <USB_Send_Config+0x14c>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	b29b      	uxth	r3, r3
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b40      	ldr	r3, [pc, #256]	; (8002880 <USB_Send_Config+0x134>)
 8002780:	719a      	strb	r2, [r3, #6]
	usb_tx_buffer[7] = motor_invert;
 8002782:	4b46      	ldr	r3, [pc, #280]	; (800289c <USB_Send_Config+0x150>)
 8002784:	781a      	ldrb	r2, [r3, #0]
 8002786:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <USB_Send_Config+0x134>)
 8002788:	71da      	strb	r2, [r3, #7]
	usb_tx_buffer[8] = signal_ignore;
 800278a:	4b45      	ldr	r3, [pc, #276]	; (80028a0 <USB_Send_Config+0x154>)
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <USB_Send_Config+0x134>)
 8002790:	721a      	strb	r2, [r3, #8]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[9], (uint32_t)&signal_min);
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <USB_Send_Config+0x158>)
 8002794:	4a44      	ldr	r2, [pc, #272]	; (80028a8 <USB_Send_Config+0x15c>)
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fde3 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[13], (uint32_t)&signal_max);
 800279e:	4b43      	ldr	r3, [pc, #268]	; (80028ac <USB_Send_Config+0x160>)
 80027a0:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <USB_Send_Config+0x164>)
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fddd 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[17], (uint32_t)&signal_timeout);
 80027aa:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <USB_Send_Config+0x168>)
 80027ac:	4a42      	ldr	r2, [pc, #264]	; (80028b8 <USB_Send_Config+0x16c>)
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fdd7 	bl	8001364 <General_Copy_32_Bit>
	usb_tx_buffer[21] = led_mode;
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <USB_Send_Config+0x170>)
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <USB_Send_Config+0x134>)
 80027bc:	755a      	strb	r2, [r3, #21]
	usb_tx_buffer[22] = pid_on;
 80027be:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <USB_Send_Config+0x174>)
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <USB_Send_Config+0x134>)
 80027c4:	759a      	strb	r2, [r3, #22]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[23], (uint32_t)&pid_kp_1);
 80027c6:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <USB_Send_Config+0x178>)
 80027c8:	4a3f      	ldr	r2, [pc, #252]	; (80028c8 <USB_Send_Config+0x17c>)
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fdc9 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[27], (uint32_t)&pid_ki_1);
 80027d2:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <USB_Send_Config+0x180>)
 80027d4:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <USB_Send_Config+0x184>)
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fdc3 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[31], (uint32_t)&pid_kd_1);
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <USB_Send_Config+0x188>)
 80027e0:	4a3d      	ldr	r2, [pc, #244]	; (80028d8 <USB_Send_Config+0x18c>)
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fdbd 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[35], (uint32_t)&pid_kp_1);
 80027ea:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <USB_Send_Config+0x190>)
 80027ec:	4a36      	ldr	r2, [pc, #216]	; (80028c8 <USB_Send_Config+0x17c>)
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fdb7 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[39], (uint32_t)&pid_ki_1);
 80027f6:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <USB_Send_Config+0x194>)
 80027f8:	4a35      	ldr	r2, [pc, #212]	; (80028d0 <USB_Send_Config+0x184>)
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fdb1 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[43], (uint32_t)&pid_kd_1);
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <USB_Send_Config+0x198>)
 8002804:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <USB_Send_Config+0x18c>)
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fdab 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[47], (uint32_t)&pid_kp_1);
 800280e:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <USB_Send_Config+0x19c>)
 8002810:	4a2d      	ldr	r2, [pc, #180]	; (80028c8 <USB_Send_Config+0x17c>)
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fda5 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[51], (uint32_t)&pid_ki_1);
 800281a:	4b34      	ldr	r3, [pc, #208]	; (80028ec <USB_Send_Config+0x1a0>)
 800281c:	4a2c      	ldr	r2, [pc, #176]	; (80028d0 <USB_Send_Config+0x184>)
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fd9f 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[55], (uint32_t)&pid_kd_1);
 8002826:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <USB_Send_Config+0x1a4>)
 8002828:	4a2b      	ldr	r2, [pc, #172]	; (80028d8 <USB_Send_Config+0x18c>)
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fd99 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[59], (uint32_t)&pid_split_1);
 8002832:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <USB_Send_Config+0x1a8>)
 8002834:	4a30      	ldr	r2, [pc, #192]	; (80028f8 <USB_Send_Config+0x1ac>)
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fdb0 	bl	800139e <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[61], (uint32_t)&pid_split_2);
 800283e:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <USB_Send_Config+0x1b0>)
 8002840:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <USB_Send_Config+0x1b4>)
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fdaa 	bl	800139e <General_Copy_16_Bit>
	usb_tx_buffer[63] = pid_sampling_time;
 800284a:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <USB_Send_Config+0x1b8>)
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <USB_Send_Config+0x134>)
 8002850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_CONFIG_LENGTH / 4) - 1);
 8002854:	2210      	movs	r2, #16
 8002856:	490a      	ldr	r1, [pc, #40]	; (8002880 <USB_Send_Config+0x134>)
 8002858:	482b      	ldr	r0, [pc, #172]	; (8002908 <USB_Send_Config+0x1bc>)
 800285a:	f001 fbd0 	bl	8003ffe <HAL_CRC_Calculate>
 800285e:	4603      	mov	r3, r0
 8002860:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[64], (uint32_t)&crc);
 8002862:	4a2a      	ldr	r2, [pc, #168]	; (800290c <USB_Send_Config+0x1c0>)
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f7fe fd7b 	bl	8001364 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_CONFIG_LENGTH);
 800286e:	2144      	movs	r1, #68	; 0x44
 8002870:	4803      	ldr	r0, [pc, #12]	; (8002880 <USB_Send_Config+0x134>)
 8002872:	f009 fbd9 	bl	800c028 <CDC_Transmit_FS>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000258 	.word	0x20000258
 8002884:	2000025a 	.word	0x2000025a
 8002888:	200001e4 	.word	0x200001e4
 800288c:	2000025c 	.word	0x2000025c
 8002890:	200001e6 	.word	0x200001e6
 8002894:	200001a0 	.word	0x200001a0
 8002898:	cccccccd 	.word	0xcccccccd
 800289c:	2000019f 	.word	0x2000019f
 80028a0:	20000238 	.word	0x20000238
 80028a4:	20000261 	.word	0x20000261
 80028a8:	2000023c 	.word	0x2000023c
 80028ac:	20000265 	.word	0x20000265
 80028b0:	20000240 	.word	0x20000240
 80028b4:	20000269 	.word	0x20000269
 80028b8:	20000244 	.word	0x20000244
 80028bc:	2000019c 	.word	0x2000019c
 80028c0:	200001d0 	.word	0x200001d0
 80028c4:	2000026f 	.word	0x2000026f
 80028c8:	200001a8 	.word	0x200001a8
 80028cc:	20000273 	.word	0x20000273
 80028d0:	200001ac 	.word	0x200001ac
 80028d4:	20000277 	.word	0x20000277
 80028d8:	200001b0 	.word	0x200001b0
 80028dc:	2000027b 	.word	0x2000027b
 80028e0:	2000027f 	.word	0x2000027f
 80028e4:	20000283 	.word	0x20000283
 80028e8:	20000287 	.word	0x20000287
 80028ec:	2000028b 	.word	0x2000028b
 80028f0:	2000028f 	.word	0x2000028f
 80028f4:	20000293 	.word	0x20000293
 80028f8:	200001cc 	.word	0x200001cc
 80028fc:	20000295 	.word	0x20000295
 8002900:	200001ce 	.word	0x200001ce
 8002904:	200001a4 	.word	0x200001a4
 8002908:	200003c8 	.word	0x200003c8
 800290c:	20000298 	.word	0x20000298

08002910 <USB_Parse_Status>:
void USB_Parse_Status(uint8_t *data){
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	potentiometer_min = *(uint16_t *)&data[2];
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	885a      	ldrh	r2, [r3, #2]
 800291c:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <USB_Parse_Status+0x194>)
 800291e:	801a      	strh	r2, [r3, #0]
	potentiometer_max = *(uint16_t *)&data[4];
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	889a      	ldrh	r2, [r3, #4]
 8002924:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <USB_Parse_Status+0x198>)
 8002926:	801a      	strh	r2, [r3, #0]
	motor_max_power = (uint16_t)data[6] * 10;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3306      	adds	r3, #6
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	4413      	add	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	4b5c      	ldr	r3, [pc, #368]	; (8002aac <USB_Parse_Status+0x19c>)
 800293c:	801a      	strh	r2, [r3, #0]
	motor_invert = data[7];
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	79da      	ldrb	r2, [r3, #7]
 8002942:	4b5b      	ldr	r3, [pc, #364]	; (8002ab0 <USB_Parse_Status+0x1a0>)
 8002944:	701a      	strb	r2, [r3, #0]
	signal_ignore = data[8];
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7a1a      	ldrb	r2, [r3, #8]
 800294a:	4b5a      	ldr	r3, [pc, #360]	; (8002ab4 <USB_Parse_Status+0x1a4>)
 800294c:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&signal_min, (uint32_t)&data[9]);
 800294e:	4a5a      	ldr	r2, [pc, #360]	; (8002ab8 <USB_Parse_Status+0x1a8>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3309      	adds	r3, #9
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f7fe fd04 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&signal_max, (uint32_t)&data[13]);
 800295c:	4a57      	ldr	r2, [pc, #348]	; (8002abc <USB_Parse_Status+0x1ac>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	330d      	adds	r3, #13
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f7fe fcfd 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&data[17]);
 800296a:	4a55      	ldr	r2, [pc, #340]	; (8002ac0 <USB_Parse_Status+0x1b0>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3311      	adds	r3, #17
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f7fe fcf6 	bl	8001364 <General_Copy_32_Bit>
	led_mode = data[21];
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7d5a      	ldrb	r2, [r3, #21]
 800297c:	4b51      	ldr	r3, [pc, #324]	; (8002ac4 <USB_Parse_Status+0x1b4>)
 800297e:	701a      	strb	r2, [r3, #0]
	pid_on = data[22];
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7d9a      	ldrb	r2, [r3, #22]
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <USB_Parse_Status+0x1b8>)
 8002986:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&data[23]);
 8002988:	4a50      	ldr	r2, [pc, #320]	; (8002acc <USB_Parse_Status+0x1bc>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3317      	adds	r3, #23
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f7fe fce7 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&data[27]);
 8002996:	4a4e      	ldr	r2, [pc, #312]	; (8002ad0 <USB_Parse_Status+0x1c0>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	331b      	adds	r3, #27
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f7fe fce0 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&data[31]);
 80029a4:	4a4b      	ldr	r2, [pc, #300]	; (8002ad4 <USB_Parse_Status+0x1c4>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	331f      	adds	r3, #31
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f7fe fcd9 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&data[35]);
 80029b2:	4a49      	ldr	r2, [pc, #292]	; (8002ad8 <USB_Parse_Status+0x1c8>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3323      	adds	r3, #35	; 0x23
 80029b8:	4619      	mov	r1, r3
 80029ba:	4610      	mov	r0, r2
 80029bc:	f7fe fcd2 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&data[39]);
 80029c0:	4a46      	ldr	r2, [pc, #280]	; (8002adc <USB_Parse_Status+0x1cc>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3327      	adds	r3, #39	; 0x27
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f7fe fccb 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&data[43]);
 80029ce:	4a44      	ldr	r2, [pc, #272]	; (8002ae0 <USB_Parse_Status+0x1d0>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	332b      	adds	r3, #43	; 0x2b
 80029d4:	4619      	mov	r1, r3
 80029d6:	4610      	mov	r0, r2
 80029d8:	f7fe fcc4 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&data[47]);
 80029dc:	4a41      	ldr	r2, [pc, #260]	; (8002ae4 <USB_Parse_Status+0x1d4>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	332f      	adds	r3, #47	; 0x2f
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7fe fcbd 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&data[51]);
 80029ea:	4a3f      	ldr	r2, [pc, #252]	; (8002ae8 <USB_Parse_Status+0x1d8>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3333      	adds	r3, #51	; 0x33
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f7fe fcb6 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&data[55]);
 80029f8:	4a3c      	ldr	r2, [pc, #240]	; (8002aec <USB_Parse_Status+0x1dc>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3337      	adds	r3, #55	; 0x37
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f7fe fcaf 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&data[59]);
 8002a06:	4a3a      	ldr	r2, [pc, #232]	; (8002af0 <USB_Parse_Status+0x1e0>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	333b      	adds	r3, #59	; 0x3b
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f7fe fcc5 	bl	800139e <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&data[61]);
 8002a14:	4a37      	ldr	r2, [pc, #220]	; (8002af4 <USB_Parse_Status+0x1e4>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	333d      	adds	r3, #61	; 0x3d
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	f7fe fcbe 	bl	800139e <General_Copy_16_Bit>
	pid_sampling_time = data[63];
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a28:	4b33      	ldr	r3, [pc, #204]	; (8002af8 <USB_Parse_Status+0x1e8>)
 8002a2a:	701a      	strb	r2, [r3, #0]
	if(PID_Get_Sampling_Time() != pid_sampling_time){
 8002a2c:	f7fe fe92 	bl	8001754 <PID_Get_Sampling_Time>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <USB_Parse_Status+0x1e8>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d005      	beq.n	8002a4a <USB_Parse_Status+0x13a>
		PID_Set_Sampling_Time(pid_sampling_time);
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <USB_Parse_Status+0x1e8>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fe97 	bl	8001778 <PID_Set_Sampling_Time>
	}
	float new_pid_setpoint = 0;
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
	General_Copy_32_Bit((uint32_t)&new_pid_setpoint, (uint32_t)&data[64]);
 8002a50:	f107 020c 	add.w	r2, r7, #12
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3340      	adds	r3, #64	; 0x40
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7fe fc82 	bl	8001364 <General_Copy_32_Bit>
	if(signal_ignore){
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <USB_Parse_Status+0x1a4>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00f      	beq.n	8002a88 <USB_Parse_Status+0x178>
		if(pid_setpoint != new_pid_setpoint){
 8002a68:	4b24      	ldr	r3, [pc, #144]	; (8002afc <USB_Parse_Status+0x1ec>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe fa65 	bl	8000f40 <__aeabi_fcmpeq>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <USB_Parse_Status+0x172>
			led_position_changed = 1;
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <USB_Parse_Status+0x1f0>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
		}
		pid_setpoint = new_pid_setpoint;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <USB_Parse_Status+0x1ec>)
 8002a86:	6013      	str	r3, [r2, #0]
	}
	usb_rq_stat_phold = data[68];
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <USB_Parse_Status+0x1f4>)
 8002a90:	701a      	strb	r2, [r3, #0]
	usb_rq_stat_motor = data[69];
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <USB_Parse_Status+0x1f8>)
 8002a9a:	701a      	strb	r2, [r3, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200001e4 	.word	0x200001e4
 8002aa8:	200001e6 	.word	0x200001e6
 8002aac:	200001a0 	.word	0x200001a0
 8002ab0:	2000019f 	.word	0x2000019f
 8002ab4:	20000238 	.word	0x20000238
 8002ab8:	2000023c 	.word	0x2000023c
 8002abc:	20000240 	.word	0x20000240
 8002ac0:	20000244 	.word	0x20000244
 8002ac4:	2000019c 	.word	0x2000019c
 8002ac8:	200001d0 	.word	0x200001d0
 8002acc:	200001a8 	.word	0x200001a8
 8002ad0:	200001ac 	.word	0x200001ac
 8002ad4:	200001b0 	.word	0x200001b0
 8002ad8:	200001b4 	.word	0x200001b4
 8002adc:	200001b8 	.word	0x200001b8
 8002ae0:	200001bc 	.word	0x200001bc
 8002ae4:	200001c0 	.word	0x200001c0
 8002ae8:	200001c4 	.word	0x200001c4
 8002aec:	200001c8 	.word	0x200001c8
 8002af0:	200001cc 	.word	0x200001cc
 8002af4:	200001ce 	.word	0x200001ce
 8002af8:	200001a4 	.word	0x200001a4
 8002afc:	20000000 	.word	0x20000000
 8002b00:	2000019d 	.word	0x2000019d
 8002b04:	20000253 	.word	0x20000253
 8002b08:	20000252 	.word	0x20000252

08002b0c <USB_Send_Status>:
void USB_Send_Status(){
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_STATUS_LENGTH;
 8002b12:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <USB_Send_Status+0x84>)
 8002b14:	2214      	movs	r2, #20
 8002b16:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_STATUS;
 8002b18:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <USB_Send_Status+0x84>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	705a      	strb	r2, [r3, #1]
	usb_tx_buffer[2] = pid_running;
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <USB_Send_Status+0x88>)
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <USB_Send_Status+0x84>)
 8002b24:	709a      	strb	r2, [r3, #2]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[3], (uint32_t)&pid_setpoint);
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <USB_Send_Status+0x8c>)
 8002b28:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <USB_Send_Status+0x90>)
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fc19 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[7], (uint32_t)&potentiometer_position);
 8002b32:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <USB_Send_Status+0x94>)
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <USB_Send_Status+0x98>)
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fc13 	bl	8001364 <General_Copy_32_Bit>
	int16_t motor_val = Motor_Get();
 8002b3e:	f7fe fd91 	bl	8001664 <Motor_Get>
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[11], (uint32_t)&motor_val);
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <USB_Send_Status+0x9c>)
 8002b48:	1dbb      	adds	r3, r7, #6
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	f7fe fc26 	bl	800139e <General_Copy_16_Bit>
	usb_tx_buffer[13] = USB_CRC_PADDING;
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <USB_Send_Status+0x84>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	735a      	strb	r2, [r3, #13]
	usb_tx_buffer[14] = USB_CRC_PADDING;
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <USB_Send_Status+0x84>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	739a      	strb	r2, [r3, #14]
	usb_tx_buffer[15] = USB_CRC_PADDING;
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <USB_Send_Status+0x84>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	73da      	strb	r2, [r3, #15]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_STATUS_LENGTH / 4) - 1);
 8002b64:	2204      	movs	r2, #4
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <USB_Send_Status+0x84>)
 8002b68:	4810      	ldr	r0, [pc, #64]	; (8002bac <USB_Send_Status+0xa0>)
 8002b6a:	f001 fa48 	bl	8003ffe <HAL_CRC_Calculate>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	603b      	str	r3, [r7, #0]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[16], (uint32_t)&crc);
 8002b72:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <USB_Send_Status+0xa4>)
 8002b74:	463b      	mov	r3, r7
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f7fe fbf3 	bl	8001364 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_STATUS_LENGTH);
 8002b7e:	2114      	movs	r1, #20
 8002b80:	4803      	ldr	r0, [pc, #12]	; (8002b90 <USB_Send_Status+0x84>)
 8002b82:	f009 fa51 	bl	800c028 <CDC_Transmit_FS>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000258 	.word	0x20000258
 8002b94:	200001d1 	.word	0x200001d1
 8002b98:	2000025b 	.word	0x2000025b
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	2000025f 	.word	0x2000025f
 8002ba4:	200001f0 	.word	0x200001f0
 8002ba8:	20000263 	.word	0x20000263
 8002bac:	200003c8 	.word	0x200003c8
 8002bb0:	20000268 	.word	0x20000268

08002bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bb8:	f000 fbe6 	bl	8003388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bbc:	f000 f813 	bl	8002be6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bc0:	f000 f9de 	bl	8002f80 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002bc4:	f000 f86c 	bl	8002ca0 <MX_ADC1_Init>
  MX_CRC_Init();
 8002bc8:	f000 f8a8 	bl	8002d1c <MX_CRC_Init>
  MX_TIM2_Init();
 8002bcc:	f000 f8ba 	bl	8002d44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002bd0:	f000 f93a 	bl	8002e48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002bd4:	f000 f986 	bl	8002ee4 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002bd8:	f009 f962 	bl	800bea0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
App_Init();
 8002bdc:	f7fe fa64 	bl	80010a8 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
App_Loop();
 8002be0:	f7fe fa70 	bl	80010c4 <App_Loop>
 8002be4:	e7fc      	b.n	8002be0 <main+0x2c>

08002be6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b094      	sub	sp, #80	; 0x50
 8002bea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bf0:	2228      	movs	r2, #40	; 0x28
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f009 fe27 	bl	800c848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c16:	2301      	movs	r3, #1
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c20:	2300      	movs	r3, #0
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c24:	2301      	movs	r3, #1
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 faa1 	bl	8006184 <HAL_RCC_OscConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002c48:	f000 f9fc 	bl	8003044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4c:	230f      	movs	r3, #15
 8002c4e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c50:	2302      	movs	r3, #2
 8002c52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	2102      	movs	r1, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 fd0d 	bl	8006688 <HAL_RCC_ClockConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002c74:	f000 f9e6 	bl	8003044 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002c78:	2312      	movs	r3, #18
 8002c7a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c80:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fe81 	bl	8006990 <HAL_RCCEx_PeriphCLKConfig>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002c94:	f000 f9d6 	bl	8003044 <Error_Handler>
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3750      	adds	r7, #80	; 0x50
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <MX_ADC1_Init+0x74>)
 8002cb2:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <MX_ADC1_Init+0x78>)
 8002cb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002cb6:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <MX_ADC1_Init+0x74>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <MX_ADC1_Init+0x74>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <MX_ADC1_Init+0x74>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <MX_ADC1_Init+0x74>)
 8002cca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002cce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <MX_ADC1_Init+0x74>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <MX_ADC1_Init+0x74>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cdc:	480d      	ldr	r0, [pc, #52]	; (8002d14 <MX_ADC1_Init+0x74>)
 8002cde:	f000 fbb5 	bl	800344c <HAL_ADC_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002ce8:	f000 f9ac 	bl	8003044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002cec:	2304      	movs	r3, #4
 8002cee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002cf4:	2307      	movs	r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4805      	ldr	r0, [pc, #20]	; (8002d14 <MX_ADC1_Init+0x74>)
 8002cfe:	f000 fe0b 	bl	8003918 <HAL_ADC_ConfigChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002d08:	f000 f99c 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000398 	.word	0x20000398
 8002d18:	40012400 	.word	0x40012400

08002d1c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <MX_CRC_Init+0x20>)
 8002d22:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <MX_CRC_Init+0x24>)
 8002d24:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002d26:	4805      	ldr	r0, [pc, #20]	; (8002d3c <MX_CRC_Init+0x20>)
 8002d28:	f001 f94d 	bl	8003fc6 <HAL_CRC_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002d32:	f000 f987 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200003c8 	.word	0x200003c8
 8002d40:	40023000 	.word	0x40023000

08002d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08e      	sub	sp, #56	; 0x38
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d58:	f107 0320 	add.w	r3, r7, #32
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
 8002d70:	615a      	str	r2, [r3, #20]
 8002d72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d74:	4b33      	ldr	r3, [pc, #204]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002d7c:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002d7e:	2207      	movs	r2, #7
 8002d80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d82:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002d88:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002d8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d90:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d96:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d9c:	4829      	ldr	r0, [pc, #164]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002d9e:	f003 ff6d 	bl	8006c7c <HAL_TIM_Base_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002da8:	f000 f94c 	bl	8003044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002db6:	4619      	mov	r1, r3
 8002db8:	4822      	ldr	r0, [pc, #136]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002dba:	f004 fb39 	bl	8007430 <HAL_TIM_ConfigClockSource>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002dc4:	f000 f93e 	bl	8003044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002dc8:	481e      	ldr	r0, [pc, #120]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002dca:	f004 f871 	bl	8006eb0 <HAL_TIM_PWM_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002dd4:	f000 f936 	bl	8003044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002de0:	f107 0320 	add.w	r3, r7, #32
 8002de4:	4619      	mov	r1, r3
 8002de6:	4817      	ldr	r0, [pc, #92]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002de8:	f004 feae 	bl	8007b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002df2:	f000 f927 	bl	8003044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df6:	2360      	movs	r3, #96	; 0x60
 8002df8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002e00:	2302      	movs	r3, #2
 8002e02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	480d      	ldr	r0, [pc, #52]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002e10:	f004 fa50 	bl	80072b4 <HAL_TIM_PWM_ConfigChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002e1a:	f000 f913 	bl	8003044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	2204      	movs	r2, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4807      	ldr	r0, [pc, #28]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002e26:	f004 fa45 	bl	80072b4 <HAL_TIM_PWM_ConfigChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002e30:	f000 f908 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e34:	4803      	ldr	r0, [pc, #12]	; (8002e44 <MX_TIM2_Init+0x100>)
 8002e36:	f000 f9f3 	bl	8003220 <HAL_TIM_MspPostInit>

}
 8002e3a:	bf00      	nop
 8002e3c:	3738      	adds	r7, #56	; 0x38
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200003d0 	.word	0x200003d0

08002e48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e4e:	f107 0308 	add.w	r3, r7, #8
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <MX_TIM3_Init+0x94>)
 8002e66:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <MX_TIM3_Init+0x98>)
 8002e68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <MX_TIM3_Init+0x94>)
 8002e6c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002e70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <MX_TIM3_Init+0x94>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <MX_TIM3_Init+0x94>)
 8002e7a:	22c7      	movs	r2, #199	; 0xc7
 8002e7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <MX_TIM3_Init+0x94>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <MX_TIM3_Init+0x94>)
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e8a:	4814      	ldr	r0, [pc, #80]	; (8002edc <MX_TIM3_Init+0x94>)
 8002e8c:	f003 fef6 	bl	8006c7c <HAL_TIM_Base_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e96:	f000 f8d5 	bl	8003044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ea0:	f107 0308 	add.w	r3, r7, #8
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	480d      	ldr	r0, [pc, #52]	; (8002edc <MX_TIM3_Init+0x94>)
 8002ea8:	f004 fac2 	bl	8007430 <HAL_TIM_ConfigClockSource>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002eb2:	f000 f8c7 	bl	8003044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ebe:	463b      	mov	r3, r7
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4806      	ldr	r0, [pc, #24]	; (8002edc <MX_TIM3_Init+0x94>)
 8002ec4:	f004 fe40 	bl	8007b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002ece:	f000 f8b9 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000418 	.word	0x20000418
 8002ee0:	40000400 	.word	0x40000400

08002ee4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef8:	463b      	mov	r3, r7
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <MX_TIM4_Init+0x94>)
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <MX_TIM4_Init+0x98>)
 8002f04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <MX_TIM4_Init+0x94>)
 8002f08:	2202      	movs	r2, #2
 8002f0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <MX_TIM4_Init+0x94>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <MX_TIM4_Init+0x94>)
 8002f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <MX_TIM4_Init+0x94>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <MX_TIM4_Init+0x94>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f26:	4814      	ldr	r0, [pc, #80]	; (8002f78 <MX_TIM4_Init+0x94>)
 8002f28:	f003 fea8 	bl	8006c7c <HAL_TIM_Base_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002f32:	f000 f887 	bl	8003044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f3c:	f107 0308 	add.w	r3, r7, #8
 8002f40:	4619      	mov	r1, r3
 8002f42:	480d      	ldr	r0, [pc, #52]	; (8002f78 <MX_TIM4_Init+0x94>)
 8002f44:	f004 fa74 	bl	8007430 <HAL_TIM_ConfigClockSource>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002f4e:	f000 f879 	bl	8003044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4806      	ldr	r0, [pc, #24]	; (8002f78 <MX_TIM4_Init+0x94>)
 8002f60:	f004 fdf2 	bl	8007b48 <HAL_TIMEx_MasterConfigSynchronization>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002f6a:	f000 f86b 	bl	8003044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000460 	.word	0x20000460
 8002f7c:	40000800 	.word	0x40000800

08002f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f86:	f107 0310 	add.w	r3, r7, #16
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <MX_GPIO_Init+0xb4>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	4a26      	ldr	r2, [pc, #152]	; (8003034 <MX_GPIO_Init+0xb4>)
 8002f9a:	f043 0320 	orr.w	r3, r3, #32
 8002f9e:	6193      	str	r3, [r2, #24]
 8002fa0:	4b24      	ldr	r3, [pc, #144]	; (8003034 <MX_GPIO_Init+0xb4>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <MX_GPIO_Init+0xb4>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	4a20      	ldr	r2, [pc, #128]	; (8003034 <MX_GPIO_Init+0xb4>)
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	6193      	str	r3, [r2, #24]
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <MX_GPIO_Init+0xb4>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <MX_GPIO_Init+0xb4>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <MX_GPIO_Init+0xb4>)
 8002fca:	f043 0308 	orr.w	r3, r3, #8
 8002fce:	6193      	str	r3, [r2, #24]
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <MX_GPIO_Init+0xb4>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	4815      	ldr	r0, [pc, #84]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002fe2:	f001 fbda 	bl	800479a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fea:	2301      	movs	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002ff6:	f107 0310 	add.w	r3, r7, #16
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	480e      	ldr	r0, [pc, #56]	; (8003038 <MX_GPIO_Init+0xb8>)
 8002ffe:	f001 fa31 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8003002:	2302      	movs	r3, #2
 8003004:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <MX_GPIO_Init+0xbc>)
 8003008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800300a:	2302      	movs	r3, #2
 800300c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800300e:	f107 0310 	add.w	r3, r7, #16
 8003012:	4619      	mov	r1, r3
 8003014:	480a      	ldr	r0, [pc, #40]	; (8003040 <MX_GPIO_Init+0xc0>)
 8003016:	f001 fa25 	bl	8004464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	2100      	movs	r1, #0
 800301e:	2007      	movs	r0, #7
 8003020:	f000 ff9b 	bl	8003f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003024:	2007      	movs	r0, #7
 8003026:	f000 ffb4 	bl	8003f92 <HAL_NVIC_EnableIRQ>

}
 800302a:	bf00      	nop
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	40010800 	.word	0x40010800
 800303c:	10310000 	.word	0x10310000
 8003040:	40010c00 	.word	0x40010c00

08003044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003048:	b672      	cpsid	i
}
 800304a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800304c:	e7fe      	b.n	800304c <Error_Handler+0x8>
	...

08003050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_MspInit+0x5c>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	4a14      	ldr	r2, [pc, #80]	; (80030ac <HAL_MspInit+0x5c>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6193      	str	r3, [r2, #24]
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_MspInit+0x5c>)
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <HAL_MspInit+0x5c>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <HAL_MspInit+0x5c>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003078:	61d3      	str	r3, [r2, #28]
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <HAL_MspInit+0x5c>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_MspInit+0x60>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_MspInit+0x60>)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40010000 	.word	0x40010000

080030b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 0310 	add.w	r3, r7, #16
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_ADC_MspInit+0x7c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d129      	bne.n	8003128 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <HAL_ADC_MspInit+0x80>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	4a16      	ldr	r2, [pc, #88]	; (8003134 <HAL_ADC_MspInit+0x80>)
 80030da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030de:	6193      	str	r3, [r2, #24]
 80030e0:	4b14      	ldr	r3, [pc, #80]	; (8003134 <HAL_ADC_MspInit+0x80>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_ADC_MspInit+0x80>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4a10      	ldr	r2, [pc, #64]	; (8003134 <HAL_ADC_MspInit+0x80>)
 80030f2:	f043 0304 	orr.w	r3, r3, #4
 80030f6:	6193      	str	r3, [r2, #24]
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <HAL_ADC_MspInit+0x80>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8003104:	2310      	movs	r3, #16
 8003106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003108:	2303      	movs	r3, #3
 800310a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 800310c:	f107 0310 	add.w	r3, r7, #16
 8003110:	4619      	mov	r1, r3
 8003112:	4809      	ldr	r0, [pc, #36]	; (8003138 <HAL_ADC_MspInit+0x84>)
 8003114:	f001 f9a6 	bl	8004464 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	2102      	movs	r1, #2
 800311c:	2012      	movs	r0, #18
 800311e:	f000 ff1c 	bl	8003f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003122:	2012      	movs	r0, #18
 8003124:	f000 ff35 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003128:	bf00      	nop
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40012400 	.word	0x40012400
 8003134:	40021000 	.word	0x40021000
 8003138:	40010800 	.word	0x40010800

0800313c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a09      	ldr	r2, [pc, #36]	; (8003170 <HAL_CRC_MspInit+0x34>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10b      	bne.n	8003166 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_CRC_MspInit+0x38>)
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	4a08      	ldr	r2, [pc, #32]	; (8003174 <HAL_CRC_MspInit+0x38>)
 8003154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003158:	6153      	str	r3, [r2, #20]
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_CRC_MspInit+0x38>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	40023000 	.word	0x40023000
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d10c      	bne.n	80031a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800318a:	4b22      	ldr	r3, [pc, #136]	; (8003214 <HAL_TIM_Base_MspInit+0x9c>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4a21      	ldr	r2, [pc, #132]	; (8003214 <HAL_TIM_Base_MspInit+0x9c>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	61d3      	str	r3, [r2, #28]
 8003196:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <HAL_TIM_Base_MspInit+0x9c>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031a2:	e032      	b.n	800320a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <HAL_TIM_Base_MspInit+0xa0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d114      	bne.n	80031d8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ae:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_TIM_Base_MspInit+0x9c>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4a18      	ldr	r2, [pc, #96]	; (8003214 <HAL_TIM_Base_MspInit+0x9c>)
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	61d3      	str	r3, [r2, #28]
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <HAL_TIM_Base_MspInit+0x9c>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2101      	movs	r1, #1
 80031ca:	201d      	movs	r0, #29
 80031cc:	f000 fec5 	bl	8003f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031d0:	201d      	movs	r0, #29
 80031d2:	f000 fede 	bl	8003f92 <HAL_NVIC_EnableIRQ>
}
 80031d6:	e018      	b.n	800320a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0f      	ldr	r2, [pc, #60]	; (800321c <HAL_TIM_Base_MspInit+0xa4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d113      	bne.n	800320a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <HAL_TIM_Base_MspInit+0x9c>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <HAL_TIM_Base_MspInit+0x9c>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	61d3      	str	r3, [r2, #28]
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_TIM_Base_MspInit+0x9c>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	201e      	movs	r0, #30
 8003200:	f000 feab 	bl	8003f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003204:	201e      	movs	r0, #30
 8003206:	f000 fec4 	bl	8003f92 <HAL_NVIC_EnableIRQ>
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800

08003220 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 0310 	add.w	r3, r7, #16
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323e:	d117      	bne.n	8003270 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003240:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <HAL_TIM_MspPostInit+0x58>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4a0c      	ldr	r2, [pc, #48]	; (8003278 <HAL_TIM_MspPostInit+0x58>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6193      	str	r3, [r2, #24]
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_TIM_MspPostInit+0x58>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8003258:	2303      	movs	r3, #3
 800325a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003260:	2303      	movs	r3, #3
 8003262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003264:	f107 0310 	add.w	r3, r7, #16
 8003268:	4619      	mov	r1, r3
 800326a:	4804      	ldr	r0, [pc, #16]	; (800327c <HAL_TIM_MspPostInit+0x5c>)
 800326c:	f001 f8fa 	bl	8004464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003270:	bf00      	nop
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	40010800 	.word	0x40010800

08003280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003284:	e7fe      	b.n	8003284 <NMI_Handler+0x4>

08003286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800328a:	e7fe      	b.n	800328a <HardFault_Handler+0x4>

0800328c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003290:	e7fe      	b.n	8003290 <MemManage_Handler+0x4>

08003292 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003296:	e7fe      	b.n	8003296 <BusFault_Handler+0x4>

08003298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800329c:	e7fe      	b.n	800329c <UsageFault_Handler+0x4>

0800329e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c6:	f000 f8a5 	bl	8003414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 80032ca:	f7fe f8b3 	bl	8001434 <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 80032d6:	2002      	movs	r0, #2
 80032d8:	f001 fa78 	bl	80047cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}

080032e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <ADC1_2_IRQHandler+0x10>)
 80032e6:	f000 fa4b 	bl	8003780 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000398 	.word	0x20000398

080032f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80032fa:	f001 fbb0 	bl	8004a5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20001198 	.word	0x20001198

08003308 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <TIM3_IRQHandler+0x10>)
 800330e:	f003 fec9 	bl	80070a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000418 	.word	0x20000418

0800331c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <TIM4_IRQHandler+0x10>)
 8003322:	f003 febf 	bl	80070a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000460 	.word	0x20000460

08003330 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800333c:	480c      	ldr	r0, [pc, #48]	; (8003370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800333e:	490d      	ldr	r1, [pc, #52]	; (8003374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003340:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003344:	e002      	b.n	800334c <LoopCopyDataInit>

08003346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800334a:	3304      	adds	r3, #4

0800334c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800334c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003350:	d3f9      	bcc.n	8003346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003352:	4a0a      	ldr	r2, [pc, #40]	; (800337c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003354:	4c0a      	ldr	r4, [pc, #40]	; (8003380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003358:	e001      	b.n	800335e <LoopFillZerobss>

0800335a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800335a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800335c:	3204      	adds	r2, #4

0800335e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003360:	d3fb      	bcc.n	800335a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003362:	f7ff ffe5 	bl	8003330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003366:	f009 fa3d 	bl	800c7e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800336a:	f7ff fc23 	bl	8002bb4 <main>
  bx lr
 800336e:	4770      	bx	lr
  ldr r0, =_sdata
 8003370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003374:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8003378:	0800c8f4 	.word	0x0800c8f4
  ldr r2, =_sbss
 800337c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8003380:	200016a4 	.word	0x200016a4

08003384 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003384:	e7fe      	b.n	8003384 <CAN1_RX1_IRQHandler>
	...

08003388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_Init+0x28>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <HAL_Init+0x28>)
 8003392:	f043 0310 	orr.w	r3, r3, #16
 8003396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003398:	2003      	movs	r0, #3
 800339a:	f000 fdd3 	bl	8003f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800339e:	2004      	movs	r0, #4
 80033a0:	f000 f808 	bl	80033b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033a4:	f7ff fe54 	bl	8003050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40022000 	.word	0x40022000

080033b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_InitTick+0x54>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_InitTick+0x58>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4619      	mov	r1, r3
 80033c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fdeb 	bl	8003fae <HAL_SYSTICK_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e00e      	b.n	8003400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b0f      	cmp	r3, #15
 80033e6:	d80a      	bhi.n	80033fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e8:	2200      	movs	r2, #0
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	f000 fdb3 	bl	8003f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033f4:	4a06      	ldr	r2, [pc, #24]	; (8003410 <HAL_InitTick+0x5c>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000004 	.word	0x20000004
 800340c:	2000000c 	.word	0x2000000c
 8003410:	20000008 	.word	0x20000008

08003414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_IncTick+0x1c>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_IncTick+0x20>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4413      	add	r3, r2
 8003424:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_IncTick+0x20>)
 8003426:	6013      	str	r3, [r2, #0]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	2000000c 	.word	0x2000000c
 8003434:	200004a8 	.word	0x200004a8

08003438 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return uwTick;
 800343c:	4b02      	ldr	r3, [pc, #8]	; (8003448 <HAL_GetTick+0x10>)
 800343e:	681b      	ldr	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	200004a8 	.word	0x200004a8

0800344c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0be      	b.n	80035ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fe12 	bl	80030b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fb93 	bl	8003bbc <ADC_ConversionStop_Disable>
 8003496:	4603      	mov	r3, r0
 8003498:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 8099 	bne.w	80035da <HAL_ADC_Init+0x18e>
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 8095 	bne.w	80035da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034b8:	f023 0302 	bic.w	r3, r3, #2
 80034bc:	f043 0202 	orr.w	r2, r3, #2
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7b1b      	ldrb	r3, [r3, #12]
 80034d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e4:	d003      	beq.n	80034ee <HAL_ADC_Init+0xa2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d102      	bne.n	80034f4 <HAL_ADC_Init+0xa8>
 80034ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034f2:	e000      	b.n	80034f6 <HAL_ADC_Init+0xaa>
 80034f4:	2300      	movs	r3, #0
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7d1b      	ldrb	r3, [r3, #20]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d119      	bne.n	8003538 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7b1b      	ldrb	r3, [r3, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	3b01      	subs	r3, #1
 8003512:	035a      	lsls	r2, r3, #13
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	e00b      	b.n	8003538 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f043 0220 	orr.w	r2, r3, #32
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <HAL_ADC_Init+0x1a8>)
 8003554:	4013      	ands	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	430b      	orrs	r3, r1
 800355e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003568:	d003      	beq.n	8003572 <HAL_ADC_Init+0x126>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d104      	bne.n	800357c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	3b01      	subs	r3, #1
 8003578:	051b      	lsls	r3, r3, #20
 800357a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	430a      	orrs	r2, r1
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <HAL_ADC_Init+0x1ac>)
 8003598:	4013      	ands	r3, r2
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d10b      	bne.n	80035b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035b6:	e018      	b.n	80035ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	f023 0312 	bic.w	r3, r3, #18
 80035c0:	f043 0210 	orr.w	r2, r3, #16
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035d8:	e007      	b.n	80035ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	f043 0210 	orr.w	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	ffe1f7fd 	.word	0xffe1f7fd
 80035f8:	ff1f0efe 	.word	0xff1f0efe

080035fc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_ADC_Start_IT+0x1a>
 8003612:	2302      	movs	r3, #2
 8003614:	e0a0      	b.n	8003758 <HAL_ADC_Start_IT+0x15c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa72 	bl	8003b08 <ADC_Enable>
 8003624:	4603      	mov	r3, r0
 8003626:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f040 808f 	bne.w	800374e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a45      	ldr	r2, [pc, #276]	; (8003760 <HAL_ADC_Start_IT+0x164>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d105      	bne.n	800365a <HAL_ADC_Start_IT+0x5e>
 800364e:	4b45      	ldr	r3, [pc, #276]	; (8003764 <HAL_ADC_Start_IT+0x168>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d115      	bne.n	8003686 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d026      	beq.n	80036c2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800367c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003684:	e01d      	b.n	80036c2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a33      	ldr	r2, [pc, #204]	; (8003764 <HAL_ADC_Start_IT+0x168>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_ADC_Start_IT+0xaa>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2f      	ldr	r2, [pc, #188]	; (8003760 <HAL_ADC_Start_IT+0x164>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10d      	bne.n	80036c2 <HAL_ADC_Start_IT+0xc6>
 80036a6:	4b2f      	ldr	r3, [pc, #188]	; (8003764 <HAL_ADC_Start_IT+0x168>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	f023 0206 	bic.w	r2, r3, #6
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80036da:	e002      	b.n	80036e2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 0202 	mvn.w	r2, #2
 80036f2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0220 	orr.w	r2, r2, #32
 8003702:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800370e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003712:	d113      	bne.n	800373c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003718:	4a11      	ldr	r2, [pc, #68]	; (8003760 <HAL_ADC_Start_IT+0x164>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d105      	bne.n	800372a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <HAL_ADC_Start_IT+0x168>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003726:	2b00      	cmp	r3, #0
 8003728:	d108      	bne.n	800373c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003738:	609a      	str	r2, [r3, #8]
 800373a:	e00c      	b.n	8003756 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	e003      	b.n	8003756 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40012800 	.word	0x40012800
 8003764:	40012400 	.word	0x40012400

08003768 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d140      	bne.n	8003818 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d139      	bne.n	8003818 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037ca:	d11d      	bne.n	8003808 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d119      	bne.n	8003808 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0220 	bic.w	r2, r2, #32
 80037e2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7fd fde5 	bl	80013d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f06f 0212 	mvn.w	r2, #18
 8003816:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d14f      	bne.n	80038c6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d148      	bne.n	80038c6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d105      	bne.n	800384c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003856:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800385a:	d012      	beq.n	8003882 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003866:	2b00      	cmp	r3, #0
 8003868:	d125      	bne.n	80038b6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003874:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003878:	d11d      	bne.n	80038b6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800387e:	2b00      	cmp	r3, #0
 8003880:	d119      	bne.n	80038b6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003890:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d105      	bne.n	80038b6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa6e 	bl	8003d98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 020c 	mvn.w	r2, #12
 80038c4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d114      	bne.n	80038fe <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d10d      	bne.n	80038fe <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f809 	bl	8003906 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0201 	mvn.w	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x20>
 8003934:	2302      	movs	r3, #2
 8003936:	e0dc      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x1da>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b06      	cmp	r3, #6
 8003946:	d81c      	bhi.n	8003982 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	3b05      	subs	r3, #5
 800395a:	221f      	movs	r2, #31
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	4019      	ands	r1, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	3b05      	subs	r3, #5
 8003974:	fa00 f203 	lsl.w	r2, r0, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	635a      	str	r2, [r3, #52]	; 0x34
 8003980:	e03c      	b.n	80039fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d81c      	bhi.n	80039c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	3b23      	subs	r3, #35	; 0x23
 800399c:	221f      	movs	r2, #31
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	4019      	ands	r1, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	3b23      	subs	r3, #35	; 0x23
 80039b6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
 80039c2:	e01b      	b.n	80039fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	3b41      	subs	r3, #65	; 0x41
 80039d6:	221f      	movs	r2, #31
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	4019      	ands	r1, r3
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	3b41      	subs	r3, #65	; 0x41
 80039f0:	fa00 f203 	lsl.w	r2, r0, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b09      	cmp	r3, #9
 8003a02:	d91c      	bls.n	8003a3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68d9      	ldr	r1, [r3, #12]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	3b1e      	subs	r3, #30
 8003a16:	2207      	movs	r2, #7
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	4019      	ands	r1, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6898      	ldr	r0, [r3, #8]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3b1e      	subs	r3, #30
 8003a30:	fa00 f203 	lsl.w	r2, r0, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	e019      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6919      	ldr	r1, [r3, #16]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	2207      	movs	r2, #7
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	4019      	ands	r1, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6898      	ldr	r0, [r3, #8]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	fa00 f203 	lsl.w	r2, r0, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d003      	beq.n	8003a82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a7e:	2b11      	cmp	r3, #17
 8003a80:	d132      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <HAL_ADC_ConfigChannel+0x1e4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d125      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d126      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003aa8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d11a      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_ADC_ConfigChannel+0x1e8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a13      	ldr	r2, [pc, #76]	; (8003b04 <HAL_ADC_ConfigChannel+0x1ec>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	0c9a      	lsrs	r2, r3, #18
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ac8:	e002      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f9      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x1b2>
 8003ad6:	e007      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	40012400 	.word	0x40012400
 8003b00:	20000004 	.word	0x20000004
 8003b04:	431bde83 	.word	0x431bde83

08003b08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d040      	beq.n	8003ba8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b36:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <ADC_Enable+0xac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <ADC_Enable+0xb0>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	0c9b      	lsrs	r3, r3, #18
 8003b42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b44:	e002      	b.n	8003b4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f9      	bne.n	8003b46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b52:	f7ff fc71 	bl	8003438 <HAL_GetTick>
 8003b56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b58:	e01f      	b.n	8003b9a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b5a:	f7ff fc6d 	bl	8003438 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d918      	bls.n	8003b9a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d011      	beq.n	8003b9a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	f043 0210 	orr.w	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e007      	b.n	8003baa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d1d8      	bne.n	8003b5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000004 	.word	0x20000004
 8003bb8:	431bde83 	.word	0x431bde83

08003bbc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d12e      	bne.n	8003c34 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003be6:	f7ff fc27 	bl	8003438 <HAL_GetTick>
 8003bea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bec:	e01b      	b.n	8003c26 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bee:	f7ff fc23 	bl	8003438 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d914      	bls.n	8003c26 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d10d      	bne.n	8003c26 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	f043 0210 	orr.w	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	f043 0201 	orr.w	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e007      	b.n	8003c36 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d0dc      	beq.n	8003bee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_ADCEx_Calibration_Start+0x1e>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e095      	b.n	8003d8a <HAL_ADCEx_Calibration_Start+0x14a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffa8 	bl	8003bbc <ADC_ConversionStop_Disable>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f040 8084 	bne.w	8003d80 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c80:	f023 0302 	bic.w	r3, r3, #2
 8003c84:	f043 0202 	orr.w	r2, r3, #2
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c8c:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_ADCEx_Calibration_Start+0x154>)
 8003c8e:	681c      	ldr	r4, [r3, #0]
 8003c90:	2002      	movs	r0, #2
 8003c92:	f002 ff33 	bl	8006afc <HAL_RCCEx_GetPeriphCLKFreq>
 8003c96:	4603      	mov	r3, r0
 8003c98:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003c9c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003c9e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003ca0:	e002      	b.n	8003ca8 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f9      	bne.n	8003ca2 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ff2a 	bl	8003b08 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0208 	orr.w	r2, r2, #8
 8003cc2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003cc4:	f7ff fbb8 	bl	8003438 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cca:	e01b      	b.n	8003d04 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ccc:	f7ff fbb4 	bl	8003438 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b0a      	cmp	r3, #10
 8003cd8:	d914      	bls.n	8003d04 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	f023 0312 	bic.w	r3, r3, #18
 8003cf0:	f043 0210 	orr.w	r2, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e042      	b.n	8003d8a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1dc      	bne.n	8003ccc <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0204 	orr.w	r2, r2, #4
 8003d20:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003d22:	f7ff fb89 	bl	8003438 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d28:	e01b      	b.n	8003d62 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003d2a:	f7ff fb85 	bl	8003438 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b0a      	cmp	r3, #10
 8003d36:	d914      	bls.n	8003d62 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	f023 0312 	bic.w	r3, r3, #18
 8003d4e:	f043 0210 	orr.w	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e013      	b.n	8003d8a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1dc      	bne.n	8003d2a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	f023 0303 	bic.w	r3, r3, #3
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd90      	pop	{r4, r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000004 	.word	0x20000004

08003d98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
	...

08003dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dde:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	60d3      	str	r3, [r2, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <__NVIC_GetPriorityGrouping+0x18>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	f003 0307 	and.w	r3, r3, #7
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	db0b      	blt.n	8003e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	4906      	ldr	r1, [pc, #24]	; (8003e44 <__NVIC_EnableIRQ+0x34>)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2001      	movs	r0, #1
 8003e32:	fa00 f202 	lsl.w	r2, r0, r2
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	e000e100 	.word	0xe000e100

08003e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	6039      	str	r1, [r7, #0]
 8003e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	db0a      	blt.n	8003e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	490c      	ldr	r1, [pc, #48]	; (8003e94 <__NVIC_SetPriority+0x4c>)
 8003e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e66:	0112      	lsls	r2, r2, #4
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e70:	e00a      	b.n	8003e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	4908      	ldr	r1, [pc, #32]	; (8003e98 <__NVIC_SetPriority+0x50>)
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	3b04      	subs	r3, #4
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	440b      	add	r3, r1
 8003e86:	761a      	strb	r2, [r3, #24]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	e000e100 	.word	0xe000e100
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f1c3 0307 	rsb	r3, r3, #7
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	bf28      	it	cs
 8003eba:	2304      	movcs	r3, #4
 8003ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d902      	bls.n	8003ecc <NVIC_EncodePriority+0x30>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3b03      	subs	r3, #3
 8003eca:	e000      	b.n	8003ece <NVIC_EncodePriority+0x32>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43da      	mvns	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	401a      	ands	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	43d9      	mvns	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef4:	4313      	orrs	r3, r2
         );
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f10:	d301      	bcc.n	8003f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f12:	2301      	movs	r3, #1
 8003f14:	e00f      	b.n	8003f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <SysTick_Config+0x40>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1e:	210f      	movs	r1, #15
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	f7ff ff90 	bl	8003e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <SysTick_Config+0x40>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2e:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <SysTick_Config+0x40>)
 8003f30:	2207      	movs	r2, #7
 8003f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	e000e010 	.word	0xe000e010

08003f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ff2d 	bl	8003dac <__NVIC_SetPriorityGrouping>
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b086      	sub	sp, #24
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f6c:	f7ff ff42 	bl	8003df4 <__NVIC_GetPriorityGrouping>
 8003f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff ff90 	bl	8003e9c <NVIC_EncodePriority>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff5f 	bl	8003e48 <__NVIC_SetPriority>
}
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4603      	mov	r3, r0
 8003f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff35 	bl	8003e10 <__NVIC_EnableIRQ>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ffa2 	bl	8003f00 <SysTick_Config>
 8003fbc:	4603      	mov	r3, r0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e00e      	b.n	8003ff6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	795b      	ldrb	r3, [r3, #5]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff f8a7 	bl	800313c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b087      	sub	sp, #28
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2202      	movs	r2, #2
 8004012:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e00a      	b.n	8004040 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	441a      	add	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3301      	adds	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d3f0      	bcc.n	800402a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004056:	693b      	ldr	r3, [r7, #16]
}
 8004058:	4618      	mov	r0, r3
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
	...

08004064 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800407e:	4b2f      	ldr	r3, [pc, #188]	; (800413c <HAL_FLASH_Program+0xd8>)
 8004080:	7e1b      	ldrb	r3, [r3, #24]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_FLASH_Program+0x26>
 8004086:	2302      	movs	r3, #2
 8004088:	e054      	b.n	8004134 <HAL_FLASH_Program+0xd0>
 800408a:	4b2c      	ldr	r3, [pc, #176]	; (800413c <HAL_FLASH_Program+0xd8>)
 800408c:	2201      	movs	r2, #1
 800408e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004090:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004094:	f000 f8a8 	bl	80041e8 <FLASH_WaitForLastOperation>
 8004098:	4603      	mov	r3, r0
 800409a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d144      	bne.n	800412c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d102      	bne.n	80040ae <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80040a8:	2301      	movs	r3, #1
 80040aa:	757b      	strb	r3, [r7, #21]
 80040ac:	e007      	b.n	80040be <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d102      	bne.n	80040ba <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80040b4:	2302      	movs	r3, #2
 80040b6:	757b      	strb	r3, [r7, #21]
 80040b8:	e001      	b.n	80040be <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80040ba:	2304      	movs	r3, #4
 80040bc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80040be:	2300      	movs	r3, #0
 80040c0:	75bb      	strb	r3, [r7, #22]
 80040c2:	e02d      	b.n	8004120 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80040c4:	7dbb      	ldrb	r3, [r7, #22]
 80040c6:	005a      	lsls	r2, r3, #1
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	eb02 0c03 	add.w	ip, r2, r3
 80040ce:	7dbb      	ldrb	r3, [r7, #22]
 80040d0:	0119      	lsls	r1, r3, #4
 80040d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040d6:	f1c1 0620 	rsb	r6, r1, #32
 80040da:	f1a1 0020 	sub.w	r0, r1, #32
 80040de:	fa22 f401 	lsr.w	r4, r2, r1
 80040e2:	fa03 f606 	lsl.w	r6, r3, r6
 80040e6:	4334      	orrs	r4, r6
 80040e8:	fa23 f000 	lsr.w	r0, r3, r0
 80040ec:	4304      	orrs	r4, r0
 80040ee:	fa23 f501 	lsr.w	r5, r3, r1
 80040f2:	b2a3      	uxth	r3, r4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4660      	mov	r0, ip
 80040f8:	f000 f85a 	bl	80041b0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004100:	f000 f872 	bl	80041e8 <FLASH_WaitForLastOperation>
 8004104:	4603      	mov	r3, r0
 8004106:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_FLASH_Program+0xdc>)
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <HAL_FLASH_Program+0xdc>)
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d107      	bne.n	800412a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800411a:	7dbb      	ldrb	r3, [r7, #22]
 800411c:	3301      	adds	r3, #1
 800411e:	75bb      	strb	r3, [r7, #22]
 8004120:	7dba      	ldrb	r2, [r7, #22]
 8004122:	7d7b      	ldrb	r3, [r7, #21]
 8004124:	429a      	cmp	r2, r3
 8004126:	d3cd      	bcc.n	80040c4 <HAL_FLASH_Program+0x60>
 8004128:	e000      	b.n	800412c <HAL_FLASH_Program+0xc8>
      {
        break;
 800412a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <HAL_FLASH_Program+0xd8>)
 800412e:	2200      	movs	r2, #0
 8004130:	761a      	strb	r2, [r3, #24]

  return status;
 8004132:	7dfb      	ldrb	r3, [r7, #23]
}
 8004134:	4618      	mov	r0, r3
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800413c:	200004b0 	.word	0x200004b0
 8004140:	40022000 	.word	0x40022000

08004144 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800414e:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <HAL_FLASH_Unlock+0x40>)
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <HAL_FLASH_Unlock+0x40>)
 800415c:	4a0a      	ldr	r2, [pc, #40]	; (8004188 <HAL_FLASH_Unlock+0x44>)
 800415e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <HAL_FLASH_Unlock+0x40>)
 8004162:	4a0a      	ldr	r2, [pc, #40]	; (800418c <HAL_FLASH_Unlock+0x48>)
 8004164:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_FLASH_Unlock+0x40>)
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004176:	79fb      	ldrb	r3, [r7, #7]
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40022000 	.word	0x40022000
 8004188:	45670123 	.word	0x45670123
 800418c:	cdef89ab 	.word	0xcdef89ab

08004190 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_FLASH_Lock+0x1c>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <HAL_FLASH_Lock+0x1c>)
 800419a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40022000 	.word	0x40022000

080041b0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <FLASH_Program_HalfWord+0x30>)
 80041be:	2200      	movs	r2, #0
 80041c0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <FLASH_Program_HalfWord+0x34>)
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <FLASH_Program_HalfWord+0x34>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	887a      	ldrh	r2, [r7, #2]
 80041d2:	801a      	strh	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	200004b0 	.word	0x200004b0
 80041e4:	40022000 	.word	0x40022000

080041e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7ff f922 	bl	8003438 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041f6:	e010      	b.n	800421a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d00c      	beq.n	800421a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <FLASH_WaitForLastOperation+0x2e>
 8004206:	f7ff f917 	bl	8003438 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d201      	bcs.n	800421a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e025      	b.n	8004266 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <FLASH_WaitForLastOperation+0x88>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e8      	bne.n	80041f8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <FLASH_WaitForLastOperation+0x88>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004232:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <FLASH_WaitForLastOperation+0x88>)
 8004234:	2220      	movs	r2, #32
 8004236:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <FLASH_WaitForLastOperation+0x88>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <FLASH_WaitForLastOperation+0x88>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800424c:	2b00      	cmp	r3, #0
 800424e:	d105      	bne.n	800425c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <FLASH_WaitForLastOperation+0x88>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800425c:	f000 f80a 	bl	8004274 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40022000 	.word	0x40022000

08004274 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800427e:	4b23      	ldr	r3, [pc, #140]	; (800430c <FLASH_SetErrorCode+0x98>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800428a:	4b21      	ldr	r3, [pc, #132]	; (8004310 <FLASH_SetErrorCode+0x9c>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f043 0302 	orr.w	r3, r3, #2
 8004292:	4a1f      	ldr	r2, [pc, #124]	; (8004310 <FLASH_SetErrorCode+0x9c>)
 8004294:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f043 0310 	orr.w	r3, r3, #16
 800429c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800429e:	4b1b      	ldr	r3, [pc, #108]	; (800430c <FLASH_SetErrorCode+0x98>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80042aa:	4b19      	ldr	r3, [pc, #100]	; (8004310 <FLASH_SetErrorCode+0x9c>)
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	4a17      	ldr	r2, [pc, #92]	; (8004310 <FLASH_SetErrorCode+0x9c>)
 80042b4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <FLASH_SetErrorCode+0x98>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <FLASH_SetErrorCode+0x9c>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f043 0304 	orr.w	r3, r3, #4
 80042d2:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <FLASH_SetErrorCode+0x9c>)
 80042d4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <FLASH_SetErrorCode+0x98>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <FLASH_SetErrorCode+0x98>)
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f240 1201 	movw	r2, #257	; 0x101
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d106      	bne.n	80042fa <FLASH_SetErrorCode+0x86>
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <FLASH_SetErrorCode+0x98>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	4a06      	ldr	r2, [pc, #24]	; (800430c <FLASH_SetErrorCode+0x98>)
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	61d3      	str	r3, [r2, #28]
}  
 80042f8:	e002      	b.n	8004300 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042fa:	4a04      	ldr	r2, [pc, #16]	; (800430c <FLASH_SetErrorCode+0x98>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60d3      	str	r3, [r2, #12]
}  
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40022000 	.word	0x40022000
 8004310:	200004b0 	.word	0x200004b0

08004314 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004326:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_FLASHEx_Erase+0xd0>)
 8004328:	7e1b      	ldrb	r3, [r3, #24]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_FLASHEx_Erase+0x1e>
 800432e:	2302      	movs	r3, #2
 8004330:	e053      	b.n	80043da <HAL_FLASHEx_Erase+0xc6>
 8004332:	4b2c      	ldr	r3, [pc, #176]	; (80043e4 <HAL_FLASHEx_Erase+0xd0>)
 8004334:	2201      	movs	r2, #1
 8004336:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d116      	bne.n	800436e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004340:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004344:	f7ff ff50 	bl	80041e8 <FLASH_WaitForLastOperation>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d141      	bne.n	80043d2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800434e:	2001      	movs	r0, #1
 8004350:	f000 f84c 	bl	80043ec <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004354:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004358:	f7ff ff46 	bl	80041e8 <FLASH_WaitForLastOperation>
 800435c:	4603      	mov	r3, r0
 800435e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004360:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <HAL_FLASHEx_Erase+0xd4>)
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	4a20      	ldr	r2, [pc, #128]	; (80043e8 <HAL_FLASHEx_Erase+0xd4>)
 8004366:	f023 0304 	bic.w	r3, r3, #4
 800436a:	6113      	str	r3, [r2, #16]
 800436c:	e031      	b.n	80043d2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800436e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004372:	f7ff ff39 	bl	80041e8 <FLASH_WaitForLastOperation>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d12a      	bne.n	80043d2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f04f 32ff 	mov.w	r2, #4294967295
 8004382:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	e019      	b.n	80043c0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800438c:	68b8      	ldr	r0, [r7, #8]
 800438e:	f000 f849 	bl	8004424 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004392:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004396:	f7ff ff27 	bl	80041e8 <FLASH_WaitForLastOperation>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_FLASHEx_Erase+0xd4>)
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <HAL_FLASHEx_Erase+0xd4>)
 80043a4:	f023 0302 	bic.w	r3, r3, #2
 80043a8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	601a      	str	r2, [r3, #0]
            break;
 80043b6:	e00c      	b.n	80043d2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043be:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	029a      	lsls	r2, r3, #10
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d3dc      	bcc.n	800438c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80043d2:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <HAL_FLASHEx_Erase+0xd0>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	761a      	strb	r2, [r3, #24]

  return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200004b0 	.word	0x200004b0
 80043e8:	40022000 	.word	0x40022000

080043ec <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <FLASH_MassErase+0x30>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <FLASH_MassErase+0x34>)
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <FLASH_MassErase+0x34>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <FLASH_MassErase+0x34>)
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	4a05      	ldr	r2, [pc, #20]	; (8004420 <FLASH_MassErase+0x34>)
 800440c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004410:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	200004b0 	.word	0x200004b0
 8004420:	40022000 	.word	0x40022000

08004424 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <FLASH_PageErase+0x38>)
 800442e:	2200      	movs	r2, #0
 8004430:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <FLASH_PageErase+0x3c>)
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <FLASH_PageErase+0x3c>)
 8004438:	f043 0302 	orr.w	r3, r3, #2
 800443c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800443e:	4a08      	ldr	r2, [pc, #32]	; (8004460 <FLASH_PageErase+0x3c>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <FLASH_PageErase+0x3c>)
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	4a05      	ldr	r2, [pc, #20]	; (8004460 <FLASH_PageErase+0x3c>)
 800444a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200004b0 	.word	0x200004b0
 8004460:	40022000 	.word	0x40022000

08004464 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004464:	b480      	push	{r7}
 8004466:	b08b      	sub	sp, #44	; 0x2c
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004472:	2300      	movs	r3, #0
 8004474:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004476:	e169      	b.n	800474c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004478:	2201      	movs	r2, #1
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	429a      	cmp	r2, r3
 8004492:	f040 8158 	bne.w	8004746 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4a9a      	ldr	r2, [pc, #616]	; (8004704 <HAL_GPIO_Init+0x2a0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d05e      	beq.n	800455e <HAL_GPIO_Init+0xfa>
 80044a0:	4a98      	ldr	r2, [pc, #608]	; (8004704 <HAL_GPIO_Init+0x2a0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d875      	bhi.n	8004592 <HAL_GPIO_Init+0x12e>
 80044a6:	4a98      	ldr	r2, [pc, #608]	; (8004708 <HAL_GPIO_Init+0x2a4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d058      	beq.n	800455e <HAL_GPIO_Init+0xfa>
 80044ac:	4a96      	ldr	r2, [pc, #600]	; (8004708 <HAL_GPIO_Init+0x2a4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d86f      	bhi.n	8004592 <HAL_GPIO_Init+0x12e>
 80044b2:	4a96      	ldr	r2, [pc, #600]	; (800470c <HAL_GPIO_Init+0x2a8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d052      	beq.n	800455e <HAL_GPIO_Init+0xfa>
 80044b8:	4a94      	ldr	r2, [pc, #592]	; (800470c <HAL_GPIO_Init+0x2a8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d869      	bhi.n	8004592 <HAL_GPIO_Init+0x12e>
 80044be:	4a94      	ldr	r2, [pc, #592]	; (8004710 <HAL_GPIO_Init+0x2ac>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d04c      	beq.n	800455e <HAL_GPIO_Init+0xfa>
 80044c4:	4a92      	ldr	r2, [pc, #584]	; (8004710 <HAL_GPIO_Init+0x2ac>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d863      	bhi.n	8004592 <HAL_GPIO_Init+0x12e>
 80044ca:	4a92      	ldr	r2, [pc, #584]	; (8004714 <HAL_GPIO_Init+0x2b0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d046      	beq.n	800455e <HAL_GPIO_Init+0xfa>
 80044d0:	4a90      	ldr	r2, [pc, #576]	; (8004714 <HAL_GPIO_Init+0x2b0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d85d      	bhi.n	8004592 <HAL_GPIO_Init+0x12e>
 80044d6:	2b12      	cmp	r3, #18
 80044d8:	d82a      	bhi.n	8004530 <HAL_GPIO_Init+0xcc>
 80044da:	2b12      	cmp	r3, #18
 80044dc:	d859      	bhi.n	8004592 <HAL_GPIO_Init+0x12e>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <HAL_GPIO_Init+0x80>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	0800455f 	.word	0x0800455f
 80044e8:	08004539 	.word	0x08004539
 80044ec:	0800454b 	.word	0x0800454b
 80044f0:	0800458d 	.word	0x0800458d
 80044f4:	08004593 	.word	0x08004593
 80044f8:	08004593 	.word	0x08004593
 80044fc:	08004593 	.word	0x08004593
 8004500:	08004593 	.word	0x08004593
 8004504:	08004593 	.word	0x08004593
 8004508:	08004593 	.word	0x08004593
 800450c:	08004593 	.word	0x08004593
 8004510:	08004593 	.word	0x08004593
 8004514:	08004593 	.word	0x08004593
 8004518:	08004593 	.word	0x08004593
 800451c:	08004593 	.word	0x08004593
 8004520:	08004593 	.word	0x08004593
 8004524:	08004593 	.word	0x08004593
 8004528:	08004541 	.word	0x08004541
 800452c:	08004555 	.word	0x08004555
 8004530:	4a79      	ldr	r2, [pc, #484]	; (8004718 <HAL_GPIO_Init+0x2b4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004536:	e02c      	b.n	8004592 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	623b      	str	r3, [r7, #32]
          break;
 800453e:	e029      	b.n	8004594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	3304      	adds	r3, #4
 8004546:	623b      	str	r3, [r7, #32]
          break;
 8004548:	e024      	b.n	8004594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	3308      	adds	r3, #8
 8004550:	623b      	str	r3, [r7, #32]
          break;
 8004552:	e01f      	b.n	8004594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	330c      	adds	r3, #12
 800455a:	623b      	str	r3, [r7, #32]
          break;
 800455c:	e01a      	b.n	8004594 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d102      	bne.n	800456c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004566:	2304      	movs	r3, #4
 8004568:	623b      	str	r3, [r7, #32]
          break;
 800456a:	e013      	b.n	8004594 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d105      	bne.n	8004580 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004574:	2308      	movs	r3, #8
 8004576:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	611a      	str	r2, [r3, #16]
          break;
 800457e:	e009      	b.n	8004594 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004580:	2308      	movs	r3, #8
 8004582:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	615a      	str	r2, [r3, #20]
          break;
 800458a:	e003      	b.n	8004594 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800458c:	2300      	movs	r3, #0
 800458e:	623b      	str	r3, [r7, #32]
          break;
 8004590:	e000      	b.n	8004594 <HAL_GPIO_Init+0x130>
          break;
 8004592:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2bff      	cmp	r3, #255	; 0xff
 8004598:	d801      	bhi.n	800459e <HAL_GPIO_Init+0x13a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	e001      	b.n	80045a2 <HAL_GPIO_Init+0x13e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2bff      	cmp	r3, #255	; 0xff
 80045a8:	d802      	bhi.n	80045b0 <HAL_GPIO_Init+0x14c>
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	e002      	b.n	80045b6 <HAL_GPIO_Init+0x152>
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	3b08      	subs	r3, #8
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	210f      	movs	r1, #15
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	401a      	ands	r2, r3
 80045c8:	6a39      	ldr	r1, [r7, #32]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	fa01 f303 	lsl.w	r3, r1, r3
 80045d0:	431a      	orrs	r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80b1 	beq.w	8004746 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045e4:	4b4d      	ldr	r3, [pc, #308]	; (800471c <HAL_GPIO_Init+0x2b8>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	4a4c      	ldr	r2, [pc, #304]	; (800471c <HAL_GPIO_Init+0x2b8>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6193      	str	r3, [r2, #24]
 80045f0:	4b4a      	ldr	r3, [pc, #296]	; (800471c <HAL_GPIO_Init+0x2b8>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045fc:	4a48      	ldr	r2, [pc, #288]	; (8004720 <HAL_GPIO_Init+0x2bc>)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	3302      	adds	r3, #2
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	220f      	movs	r2, #15
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a40      	ldr	r2, [pc, #256]	; (8004724 <HAL_GPIO_Init+0x2c0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <HAL_GPIO_Init+0x1ec>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a3f      	ldr	r2, [pc, #252]	; (8004728 <HAL_GPIO_Init+0x2c4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00d      	beq.n	800464c <HAL_GPIO_Init+0x1e8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3e      	ldr	r2, [pc, #248]	; (800472c <HAL_GPIO_Init+0x2c8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <HAL_GPIO_Init+0x1e4>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3d      	ldr	r2, [pc, #244]	; (8004730 <HAL_GPIO_Init+0x2cc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <HAL_GPIO_Init+0x1e0>
 8004640:	2303      	movs	r3, #3
 8004642:	e006      	b.n	8004652 <HAL_GPIO_Init+0x1ee>
 8004644:	2304      	movs	r3, #4
 8004646:	e004      	b.n	8004652 <HAL_GPIO_Init+0x1ee>
 8004648:	2302      	movs	r3, #2
 800464a:	e002      	b.n	8004652 <HAL_GPIO_Init+0x1ee>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <HAL_GPIO_Init+0x1ee>
 8004650:	2300      	movs	r3, #0
 8004652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004654:	f002 0203 	and.w	r2, r2, #3
 8004658:	0092      	lsls	r2, r2, #2
 800465a:	4093      	lsls	r3, r2
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004662:	492f      	ldr	r1, [pc, #188]	; (8004720 <HAL_GPIO_Init+0x2bc>)
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	089b      	lsrs	r3, r3, #2
 8004668:	3302      	adds	r3, #2
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d006      	beq.n	800468a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800467c:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	492c      	ldr	r1, [pc, #176]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]
 8004688:	e006      	b.n	8004698 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800468a:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	43db      	mvns	r3, r3
 8004692:	4928      	ldr	r1, [pc, #160]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 8004694:	4013      	ands	r3, r2
 8004696:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d006      	beq.n	80046b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046a4:	4b23      	ldr	r3, [pc, #140]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	4922      	ldr	r1, [pc, #136]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
 80046b0:	e006      	b.n	80046c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046b2:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	491e      	ldr	r1, [pc, #120]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 80046bc:	4013      	ands	r3, r2
 80046be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d006      	beq.n	80046da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046cc:	4b19      	ldr	r3, [pc, #100]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	4918      	ldr	r1, [pc, #96]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	608b      	str	r3, [r1, #8]
 80046d8:	e006      	b.n	80046e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046da:	4b16      	ldr	r3, [pc, #88]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	43db      	mvns	r3, r3
 80046e2:	4914      	ldr	r1, [pc, #80]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d021      	beq.n	8004738 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	490e      	ldr	r1, [pc, #56]	; (8004734 <HAL_GPIO_Init+0x2d0>)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60cb      	str	r3, [r1, #12]
 8004700:	e021      	b.n	8004746 <HAL_GPIO_Init+0x2e2>
 8004702:	bf00      	nop
 8004704:	10320000 	.word	0x10320000
 8004708:	10310000 	.word	0x10310000
 800470c:	10220000 	.word	0x10220000
 8004710:	10210000 	.word	0x10210000
 8004714:	10120000 	.word	0x10120000
 8004718:	10110000 	.word	0x10110000
 800471c:	40021000 	.word	0x40021000
 8004720:	40010000 	.word	0x40010000
 8004724:	40010800 	.word	0x40010800
 8004728:	40010c00 	.word	0x40010c00
 800472c:	40011000 	.word	0x40011000
 8004730:	40011400 	.word	0x40011400
 8004734:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_GPIO_Init+0x304>)
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	43db      	mvns	r3, r3
 8004740:	4909      	ldr	r1, [pc, #36]	; (8004768 <HAL_GPIO_Init+0x304>)
 8004742:	4013      	ands	r3, r2
 8004744:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	3301      	adds	r3, #1
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	fa22 f303 	lsr.w	r3, r2, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	f47f ae8e 	bne.w	8004478 <HAL_GPIO_Init+0x14>
  }
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	372c      	adds	r7, #44	; 0x2c
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	40010400 	.word	0x40010400

0800476c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	887b      	ldrh	r3, [r7, #2]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e001      	b.n	800478e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr

0800479a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	460b      	mov	r3, r1
 80047a4:	807b      	strh	r3, [r7, #2]
 80047a6:	4613      	mov	r3, r2
 80047a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047aa:	787b      	ldrb	r3, [r7, #1]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047b0:	887a      	ldrh	r2, [r7, #2]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047b6:	e003      	b.n	80047c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047b8:	887b      	ldrh	r3, [r7, #2]
 80047ba:	041a      	lsls	r2, r3, #16
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	611a      	str	r2, [r3, #16]
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d006      	beq.n	80047f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047e2:	4a05      	ldr	r2, [pc, #20]	; (80047f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fc fe2c 	bl	8001448 <HAL_GPIO_EXTI_Callback>
  }
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40010400 	.word	0x40010400

080047fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fe:	b08b      	sub	sp, #44	; 0x2c
 8004800:	af06      	add	r7, sp, #24
 8004802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e0fd      	b.n	8004a0a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f007 fd34 	bl	800c290 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2203      	movs	r2, #3
 800482c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f003 fa1d 	bl	8007c74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	687e      	ldr	r6, [r7, #4]
 8004842:	466d      	mov	r5, sp
 8004844:	f106 0410 	add.w	r4, r6, #16
 8004848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800484a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	602b      	str	r3, [r5, #0]
 8004850:	1d33      	adds	r3, r6, #4
 8004852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004854:	6838      	ldr	r0, [r7, #0]
 8004856:	f003 f9e7 	bl	8007c28 <USB_CoreInit>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0ce      	b.n	8004a0a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f003 fa18 	bl	8007ca8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
 800487c:	e04c      	b.n	8004918 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	3301      	adds	r3, #1
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	4613      	mov	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	440b      	add	r3, r1
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048a8:	7bfa      	ldrb	r2, [r7, #15]
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	b298      	uxth	r0, r3
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	440b      	add	r3, r1
 80048ba:	3336      	adds	r3, #54	; 0x36
 80048bc:	4602      	mov	r2, r0
 80048be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	440b      	add	r3, r1
 80048d0:	3303      	adds	r3, #3
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048d6:	7bfa      	ldrb	r2, [r7, #15]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	440b      	add	r3, r1
 80048e4:	3338      	adds	r3, #56	; 0x38
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048ea:	7bfa      	ldrb	r2, [r7, #15]
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	440b      	add	r3, r1
 80048f8:	333c      	adds	r3, #60	; 0x3c
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048fe:	7bfa      	ldrb	r2, [r7, #15]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	440b      	add	r3, r1
 800490c:	3340      	adds	r3, #64	; 0x40
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	3301      	adds	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	7bfa      	ldrb	r2, [r7, #15]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	429a      	cmp	r2, r3
 8004920:	d3ad      	bcc.n	800487e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
 8004926:	e044      	b.n	80049b2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004928:	7bfa      	ldrb	r2, [r7, #15]
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	440b      	add	r3, r1
 8004936:	f203 1369 	addw	r3, r3, #361	; 0x169
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800493e:	7bfa      	ldrb	r2, [r7, #15]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	440b      	add	r3, r1
 800494c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004950:	7bfa      	ldrb	r2, [r7, #15]
 8004952:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004954:	7bfa      	ldrb	r2, [r7, #15]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	440b      	add	r3, r1
 8004962:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004966:	2200      	movs	r2, #0
 8004968:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	440b      	add	r3, r1
 8004978:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004980:	7bfa      	ldrb	r2, [r7, #15]
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	440b      	add	r3, r1
 800498e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004996:	7bfa      	ldrb	r2, [r7, #15]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	440b      	add	r3, r1
 80049a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	3301      	adds	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
 80049b2:	7bfa      	ldrb	r2, [r7, #15]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3b5      	bcc.n	8004928 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	687e      	ldr	r6, [r7, #4]
 80049c4:	466d      	mov	r5, sp
 80049c6:	f106 0410 	add.w	r4, r6, #16
 80049ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	602b      	str	r3, [r5, #0]
 80049d2:	1d33      	adds	r3, r6, #4
 80049d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049d6:	6838      	ldr	r0, [r7, #0]
 80049d8:	f003 f972 	bl	8007cc0 <USB_DevInit>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e00d      	b.n	8004a0a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f005 fe24 	bl	800a650 <USB_DevDisconnect>

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_PCD_Start+0x16>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e016      	b.n	8004a56 <HAL_PCD_Start+0x44>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f003 f907 	bl	8007c48 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f007 fe9a 	bl	800c776 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f005 fdf8 	bl	800a63c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b088      	sub	sp, #32
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f005 fdfa 	bl	800a664 <USB_ReadInterrupts>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7a:	d102      	bne.n	8004a82 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fb5f 	bl	8005140 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f005 fdec 	bl	800a664 <USB_ReadInterrupts>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a96:	d112      	bne.n	8004abe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aaa:	b292      	uxth	r2, r2
 8004aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f007 fc68 	bl	800c386 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f923 	bl	8004d04 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f005 fdce 	bl	800a664 <USB_ReadInterrupts>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad2:	d10b      	bne.n	8004aec <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ae6:	b292      	uxth	r2, r2
 8004ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f005 fdb7 	bl	800a664 <USB_ReadInterrupts>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b00:	d10b      	bne.n	8004b1a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b14:	b292      	uxth	r2, r2
 8004b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f005 fda0 	bl	800a664 <USB_ReadInterrupts>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d126      	bne.n	8004b7e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0204 	bic.w	r2, r2, #4
 8004b42:	b292      	uxth	r2, r2
 8004b44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0208 	bic.w	r2, r2, #8
 8004b5a:	b292      	uxth	r2, r2
 8004b5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f007 fc49 	bl	800c3f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b78:	b292      	uxth	r2, r2
 8004b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f005 fd6e 	bl	800a664 <USB_ReadInterrupts>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b92:	f040 8082 	bne.w	8004c9a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e010      	b.n	8004bbe <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	7ffb      	ldrb	r3, [r7, #31]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	7ffb      	ldrb	r3, [r7, #31]
 8004baa:	8812      	ldrh	r2, [r2, #0]
 8004bac:	b292      	uxth	r2, r2
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	3320      	adds	r3, #32
 8004bb2:	443b      	add	r3, r7
 8004bb4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004bb8:	7ffb      	ldrb	r3, [r7, #31]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	7ffb      	ldrb	r3, [r7, #31]
 8004bc0:	2b07      	cmp	r3, #7
 8004bc2:	d9eb      	bls.n	8004b9c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	b292      	uxth	r2, r2
 8004bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004bf4:	bf00      	nop
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f6      	beq.n	8004bf6 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e00f      	b.n	8004c46 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004c26:	7ffb      	ldrb	r3, [r7, #31]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	7ffa      	ldrb	r2, [r7, #31]
 8004c30:	0092      	lsls	r2, r2, #2
 8004c32:	440a      	add	r2, r1
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	3320      	adds	r3, #32
 8004c38:	443b      	add	r3, r7
 8004c3a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004c3e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004c40:	7ffb      	ldrb	r3, [r7, #31]
 8004c42:	3301      	adds	r3, #1
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
 8004c48:	2b07      	cmp	r3, #7
 8004c4a:	d9ec      	bls.n	8004c26 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0208 	orr.w	r2, r2, #8
 8004c5e:	b292      	uxth	r2, r2
 8004c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c76:	b292      	uxth	r2, r2
 8004c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0204 	orr.w	r2, r2, #4
 8004c8e:	b292      	uxth	r2, r2
 8004c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f007 fb95 	bl	800c3c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f005 fce0 	bl	800a664 <USB_ReadInterrupts>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cae:	d10e      	bne.n	8004cce <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f007 fb4e 	bl	800c36a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f005 fcc6 	bl	800a664 <USB_ReadInterrupts>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce2:	d10b      	bne.n	8004cfc <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cf6:	b292      	uxth	r2, r2
 8004cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_PCD_SetAddress+0x1a>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e013      	b.n	8004d46 <HAL_PCD_SetAddress+0x42>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f005 fc6d 	bl	800a616 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	4608      	mov	r0, r1
 8004d58:	4611      	mov	r1, r2
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	70fb      	strb	r3, [r7, #3]
 8004d60:	460b      	mov	r3, r1
 8004d62:	803b      	strh	r3, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	da0e      	bge.n	8004d92 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4413      	add	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	705a      	strb	r2, [r3, #1]
 8004d90:	e00e      	b.n	8004db0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	f003 0207 	and.w	r2, r3, #7
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004dbc:	883a      	ldrh	r2, [r7, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	78ba      	ldrb	r2, [r7, #2]
 8004dc6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004dda:	78bb      	ldrb	r3, [r7, #2]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d102      	bne.n	8004de6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_PCD_EP_Open+0xa6>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e00e      	b.n	8004e12 <HAL_PCD_EP_Open+0xc4>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68f9      	ldr	r1, [r7, #12]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f002 ff7c 	bl	8007d00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004e10:	7afb      	ldrb	r3, [r7, #11]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	da0e      	bge.n	8004e4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	705a      	strb	r2, [r3, #1]
 8004e4a:	e00e      	b.n	8004e6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	f003 0207 	and.w	r2, r3, #7
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4413      	add	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_PCD_EP_Close+0x6a>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e00e      	b.n	8004ea2 <HAL_PCD_EP_Close+0x88>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68f9      	ldr	r1, [r7, #12]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f003 fa9e 	bl	80083d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b086      	sub	sp, #24
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eba:	7afb      	ldrb	r3, [r7, #11]
 8004ebc:	f003 0207 	and.w	r2, r3, #7
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eea:	7afb      	ldrb	r3, [r7, #11]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ef6:	7afb      	ldrb	r3, [r7, #11]
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6979      	ldr	r1, [r7, #20]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f003 fc50 	bl	80087ac <USB_EPStartXfer>
 8004f0c:	e005      	b.n	8004f1a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6979      	ldr	r1, [r7, #20]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f003 fc49 	bl	80087ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	f003 0207 	and.w	r2, r3, #7
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	440b      	add	r3, r1
 8004f42:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004f46:	681b      	ldr	r3, [r3, #0]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2200      	movs	r2, #0
 8004f96:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f9e:	7afb      	ldrb	r3, [r7, #11]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004faa:	7afb      	ldrb	r3, [r7, #11]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6979      	ldr	r1, [r7, #20]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f003 fbf6 	bl	80087ac <USB_EPStartXfer>
 8004fc0:	e005      	b.n	8004fce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f003 fbef 	bl	80087ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	f003 0207 	and.w	r2, r3, #7
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d901      	bls.n	8004ff6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e04c      	b.n	8005090 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da0e      	bge.n	800501c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	705a      	strb	r2, [r3, #1]
 800501a:	e00c      	b.n	8005036 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	4413      	add	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	b2da      	uxtb	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_PCD_EP_SetStall+0x7e>
 8005052:	2302      	movs	r3, #2
 8005054:	e01c      	b.n	8005090 <HAL_PCD_EP_SetStall+0xb8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	4618      	mov	r0, r3
 8005066:	f005 f9d9 	bl	800a41c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	2b00      	cmp	r3, #0
 8005072:	d108      	bne.n	8005086 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f005 fafe 	bl	800a682 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	f003 020f 	and.w	r2, r3, #15
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d901      	bls.n	80050b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e040      	b.n	8005138 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	da0e      	bge.n	80050dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	705a      	strb	r2, [r3, #1]
 80050da:	e00e      	b.n	80050fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	f003 0207 	and.w	r2, r3, #7
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	b2da      	uxtb	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_PCD_EP_ClrStall+0x82>
 8005116:	2302      	movs	r3, #2
 8005118:	e00e      	b.n	8005138 <HAL_PCD_EP_ClrStall+0xa0>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	4618      	mov	r0, r3
 800512a:	f005 f9c7 	bl	800a4bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08e      	sub	sp, #56	; 0x38
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005148:	e2ec      	b.n	8005724 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005152:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005154:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005160:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005164:	2b00      	cmp	r3, #0
 8005166:	f040 8161 	bne.w	800542c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800516a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	d152      	bne.n	800521a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005184:	81fb      	strh	r3, [r7, #14]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	89fb      	ldrh	r3, [r7, #14]
 800518c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005194:	b29b      	uxth	r3, r3
 8005196:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3328      	adds	r3, #40	; 0x28
 800519c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4413      	add	r3, r2
 80051b2:	3302      	adds	r3, #2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	441a      	add	r2, r3
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051d8:	2100      	movs	r1, #0
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f007 f8ab 	bl	800c336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 829b 	beq.w	8005724 <PCD_EP_ISR_Handler+0x5e4>
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 8296 	bne.w	8005724 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005204:	b2da      	uxtb	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	b292      	uxth	r2, r2
 800520c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005218:	e284      	b.n	8005724 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800522a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800522c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005230:	2b00      	cmp	r3, #0
 8005232:	d034      	beq.n	800529e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523c:	b29b      	uxth	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	3306      	adds	r3, #6
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005272:	b29b      	uxth	r3, r3
 8005274:	f005 fa55 	bl	800a722 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29a      	uxth	r2, r3
 8005280:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005284:	4013      	ands	r3, r2
 8005286:	823b      	strh	r3, [r7, #16]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	8a3a      	ldrh	r2, [r7, #16]
 800528e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005292:	b292      	uxth	r2, r2
 8005294:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f007 f820 	bl	800c2dc <HAL_PCD_SetupStageCallback>
 800529c:	e242      	b.n	8005724 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800529e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f280 823e 	bge.w	8005724 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052b4:	4013      	ands	r3, r2
 80052b6:	83bb      	strh	r3, [r7, #28]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	8bba      	ldrh	r2, [r7, #28]
 80052be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052c2:	b292      	uxth	r2, r2
 80052c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	3306      	adds	r3, #6
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d019      	beq.n	800532e <PCD_EP_ISR_Handler+0x1ee>
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d015      	beq.n	800532e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	6959      	ldr	r1, [r3, #20]
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005312:	b29b      	uxth	r3, r3
 8005314:	f005 fa05 	bl	800a722 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	441a      	add	r2, r3
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005326:	2100      	movs	r1, #0
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f006 ffe9 	bl	800c300 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 81f2 	bne.w	8005724 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534e:	b29b      	uxth	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	4413      	add	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d112      	bne.n	800538e <PCD_EP_ISR_Handler+0x24e>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005372:	b29a      	uxth	r2, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005386:	b29a      	uxth	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	e02f      	b.n	80053ee <PCD_EP_ISR_Handler+0x2ae>
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b3e      	cmp	r3, #62	; 0x3e
 8005394:	d813      	bhi.n	80053be <PCD_EP_ISR_Handler+0x27e>
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	633b      	str	r3, [r7, #48]	; 0x30
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <PCD_EP_ISR_Handler+0x270>
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	3301      	adds	r3, #1
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	029b      	lsls	r3, r3, #10
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e017      	b.n	80053ee <PCD_EP_ISR_Handler+0x2ae>
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	633b      	str	r3, [r7, #48]	; 0x30
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <PCD_EP_ISR_Handler+0x298>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	3b01      	subs	r3, #1
 80053d6:	633b      	str	r3, [r7, #48]	; 0x30
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	b29b      	uxth	r3, r3
 80053dc:	029b      	lsls	r3, r3, #10
 80053de:	b29b      	uxth	r3, r3
 80053e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	827b      	strh	r3, [r7, #18]
 8005400:	8a7b      	ldrh	r3, [r7, #18]
 8005402:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005406:	827b      	strh	r3, [r7, #18]
 8005408:	8a7b      	ldrh	r3, [r7, #18]
 800540a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800540e:	827b      	strh	r3, [r7, #18]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	8a7b      	ldrh	r3, [r7, #18]
 8005416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005426:	b29b      	uxth	r3, r3
 8005428:	8013      	strh	r3, [r2, #0]
 800542a:	e17b      	b.n	8005724 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800543e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005442:	2b00      	cmp	r3, #0
 8005444:	f280 80ea 	bge.w	800561c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29a      	uxth	r2, r3
 800545a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800545e:	4013      	ands	r3, r2
 8005460:	853b      	strh	r3, [r7, #40]	; 0x28
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005476:	b292      	uxth	r2, r2
 8005478:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800547a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	4413      	add	r3, r2
 800548e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	7b1b      	ldrb	r3, [r3, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d122      	bne.n	80054de <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	4413      	add	r3, r2
 80054ac:	3306      	adds	r3, #6
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80054c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8087 	beq.w	80055d8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	6959      	ldr	r1, [r3, #20]
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	88da      	ldrh	r2, [r3, #6]
 80054d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054d8:	f005 f923 	bl	800a722 <USB_ReadPMA>
 80054dc:	e07c      	b.n	80055d8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	78db      	ldrb	r3, [r3, #3]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d108      	bne.n	80054f8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054e8:	461a      	mov	r2, r3
 80054ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f927 	bl	8005740 <HAL_PCD_EP_DB_Receive>
 80054f2:	4603      	mov	r3, r0
 80054f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054f6:	e06f      	b.n	80055d8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b29b      	uxth	r3, r3
 800550a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	847b      	strh	r3, [r7, #34]	; 0x22
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005534:	b29b      	uxth	r3, r3
 8005536:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d021      	beq.n	8005596 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555a:	b29b      	uxth	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4413      	add	r3, r2
 8005566:	3302      	adds	r3, #2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800557a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800557c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800557e:	2b00      	cmp	r3, #0
 8005580:	d02a      	beq.n	80055d8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	6959      	ldr	r1, [r3, #20]
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	891a      	ldrh	r2, [r3, #8]
 800558e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005590:	f005 f8c7 	bl	800a722 <USB_ReadPMA>
 8005594:	e020      	b.n	80055d8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559e:	b29b      	uxth	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	3306      	adds	r3, #6
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80055c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	6959      	ldr	r1, [r3, #20]
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	895a      	ldrh	r2, [r3, #10]
 80055d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055d4:	f005 f8a5 	bl	800a722 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055de:	441a      	add	r2, r3
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055ea:	441a      	add	r2, r3
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <PCD_EP_ISR_Handler+0x4c2>
 80055f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d206      	bcs.n	8005610 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f006 fe79 	bl	800c300 <HAL_PCD_DataOutStageCallback>
 800560e:	e005      	b.n	800561c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005616:	4618      	mov	r0, r3
 8005618:	f003 f8c8 	bl	80087ac <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800561c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d07e      	beq.n	8005724 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005626:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4413      	add	r3, r2
 8005638:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005654:	843b      	strh	r3, [r7, #32]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	441a      	add	r2, r3
 8005664:	8c3b      	ldrh	r3, [r7, #32]
 8005666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	78db      	ldrb	r3, [r3, #3]
 8005676:	2b03      	cmp	r3, #3
 8005678:	d00c      	beq.n	8005694 <PCD_EP_ISR_Handler+0x554>
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	78db      	ldrb	r3, [r3, #3]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005686:	2b02      	cmp	r3, #2
 8005688:	d146      	bne.n	8005718 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800568a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800568c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d141      	bne.n	8005718 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569c:	b29b      	uxth	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4413      	add	r3, r2
 80056a8:	3302      	adds	r3, #2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056bc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	8bfb      	ldrh	r3, [r7, #30]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d906      	bls.n	80056d6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	8bfb      	ldrh	r3, [r7, #30]
 80056ce:	1ad2      	subs	r2, r2, r3
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	619a      	str	r2, [r3, #24]
 80056d4:	e002      	b.n	80056dc <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	2200      	movs	r2, #0
 80056da:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f006 fe23 	bl	800c336 <HAL_PCD_DataInStageCallback>
 80056f0:	e018      	b.n	8005724 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	695a      	ldr	r2, [r3, #20]
 80056f6:	8bfb      	ldrh	r3, [r7, #30]
 80056f8:	441a      	add	r2, r3
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	8bfb      	ldrh	r3, [r7, #30]
 8005704:	441a      	add	r2, r3
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005710:	4618      	mov	r0, r3
 8005712:	f003 f84b 	bl	80087ac <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005716:	e005      	b.n	8005724 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005718:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800571a:	461a      	mov	r2, r3
 800571c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f91b 	bl	800595a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800572c:	b29b      	uxth	r3, r3
 800572e:	b21b      	sxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	f6ff ad0a 	blt.w	800514a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3738      	adds	r7, #56	; 0x38
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d07e      	beq.n	8005856 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005760:	b29b      	uxth	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4413      	add	r3, r2
 800576c:	3302      	adds	r3, #2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005780:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	8b7b      	ldrh	r3, [r7, #26]
 8005788:	429a      	cmp	r2, r3
 800578a:	d306      	bcc.n	800579a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	8b7b      	ldrh	r3, [r7, #26]
 8005792:	1ad2      	subs	r2, r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	619a      	str	r2, [r3, #24]
 8005798:	e002      	b.n	80057a0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2200      	movs	r2, #0
 800579e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d123      	bne.n	80057f0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	833b      	strh	r3, [r7, #24]
 80057c4:	8b3b      	ldrh	r3, [r7, #24]
 80057c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057ca:	833b      	strh	r3, [r7, #24]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	8b3b      	ldrh	r3, [r7, #24]
 80057dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01f      	beq.n	800583a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005814:	82fb      	strh	r3, [r7, #22]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	441a      	add	r2, r3
 8005824:	8afb      	ldrh	r3, [r7, #22]
 8005826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800582a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800582e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005832:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005836:	b29b      	uxth	r3, r3
 8005838:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800583a:	8b7b      	ldrh	r3, [r7, #26]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8087 	beq.w	8005950 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6959      	ldr	r1, [r3, #20]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	891a      	ldrh	r2, [r3, #8]
 800584e:	8b7b      	ldrh	r3, [r7, #26]
 8005850:	f004 ff67 	bl	800a722 <USB_ReadPMA>
 8005854:	e07c      	b.n	8005950 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585e:	b29b      	uxth	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	3306      	adds	r3, #6
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800587e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	8b7b      	ldrh	r3, [r7, #26]
 8005886:	429a      	cmp	r2, r3
 8005888:	d306      	bcc.n	8005898 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	8b7b      	ldrh	r3, [r7, #26]
 8005890:	1ad2      	subs	r2, r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	619a      	str	r2, [r3, #24]
 8005896:	e002      	b.n	800589e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d123      	bne.n	80058ee <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c0:	83fb      	strh	r3, [r7, #30]
 80058c2:	8bfb      	ldrh	r3, [r7, #30]
 80058c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058c8:	83fb      	strh	r3, [r7, #30]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	441a      	add	r2, r3
 80058d8:	8bfb      	ldrh	r3, [r7, #30]
 80058da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11f      	bne.n	8005938 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	83bb      	strh	r3, [r7, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	441a      	add	r2, r3
 8005922:	8bbb      	ldrh	r3, [r7, #28]
 8005924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005930:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005934:	b29b      	uxth	r3, r3
 8005936:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005938:	8b7b      	ldrh	r3, [r7, #26]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6959      	ldr	r1, [r3, #20]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	895a      	ldrh	r2, [r3, #10]
 800594a:	8b7b      	ldrh	r3, [r7, #26]
 800594c:	f004 fee9 	bl	800a722 <USB_ReadPMA>
    }
  }

  return count;
 8005950:	8b7b      	ldrh	r3, [r7, #26]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b0a2      	sub	sp, #136	; 0x88
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	4613      	mov	r3, r2
 8005966:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 81c7 	beq.w	8005d02 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597c:	b29b      	uxth	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	4413      	add	r3, r2
 8005988:	3302      	adds	r3, #2
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800599c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d907      	bls.n	80059bc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	699a      	ldr	r2, [r3, #24]
 80059b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059b4:	1ad2      	subs	r2, r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	619a      	str	r2, [r3, #24]
 80059ba:	e002      	b.n	80059c2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f040 80b9 	bne.w	8005b3e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d126      	bne.n	8005a22 <HAL_PCD_EP_DB_Transmit+0xc8>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	4413      	add	r3, r2
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	011a      	lsls	r2, r3, #4
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	4413      	add	r3, r2
 80059f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	e01a      	b.n	8005a58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d116      	bne.n	8005a58 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	4413      	add	r3, r2
 8005a40:	633b      	str	r3, [r7, #48]	; 0x30
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	011a      	lsls	r2, r3, #4
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a54:	2200      	movs	r2, #0
 8005a56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	623b      	str	r3, [r7, #32]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d126      	bne.n	8005ab4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	011a      	lsls	r2, r3, #4
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	4413      	add	r3, r2
 8005a88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	e017      	b.n	8005ae4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d113      	bne.n	8005ae4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	4413      	add	r3, r2
 8005acc:	623b      	str	r3, [r7, #32]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	011a      	lsls	r2, r3, #4
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f006 fc23 	bl	800c336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 82d4 	beq.w	80060a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	827b      	strh	r3, [r7, #18]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	441a      	add	r2, r3
 8005b26:	8a7b      	ldrh	r3, [r7, #18]
 8005b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	8013      	strh	r3, [r2, #0]
 8005b3c:	e2b2      	b.n	80060a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d021      	beq.n	8005b8c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	f040 8286 	bne.w	80060a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ba0:	441a      	add	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	69da      	ldr	r2, [r3, #28]
 8005baa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bae:	441a      	add	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6a1a      	ldr	r2, [r3, #32]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d309      	bcc.n	8005bd4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bcc:	1ad2      	subs	r2, r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	621a      	str	r2, [r3, #32]
 8005bd2:	e015      	b.n	8005c00 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d107      	bne.n	8005bec <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005bdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005be0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005bea:	e009      	b.n	8005c00 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d155      	bne.n	8005cb4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	4413      	add	r3, r2
 8005c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	011a      	lsls	r2, r3, #4
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	4413      	add	r3, r2
 8005c2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d112      	bne.n	8005c5c <HAL_PCD_EP_DB_Transmit+0x302>
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	801a      	strh	r2, [r3, #0]
 8005c5a:	e047      	b.n	8005cec <HAL_PCD_EP_DB_Transmit+0x392>
 8005c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c60:	d811      	bhi.n	8005c86 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c64:	085b      	lsrs	r3, r3, #1
 8005c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c74:	3301      	adds	r3, #1
 8005c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e032      	b.n	8005cec <HAL_PCD_EP_DB_Transmit+0x392>
 8005c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <HAL_PCD_EP_DB_Transmit+0x342>
 8005c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e01b      	b.n	8005cec <HAL_PCD_EP_DB_Transmit+0x392>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d117      	bne.n	8005cec <HAL_PCD_EP_DB_Transmit+0x392>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd0:	4413      	add	r3, r2
 8005cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	011a      	lsls	r2, r3, #4
 8005cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cdc:	4413      	add	r3, r2
 8005cde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	6959      	ldr	r1, [r3, #20]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	891a      	ldrh	r2, [r3, #8]
 8005cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f004 fccc 	bl	800a698 <USB_WritePMA>
 8005d00:	e1d0      	b.n	80060a4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4413      	add	r3, r2
 8005d16:	3306      	adds	r3, #6
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d307      	bcc.n	8005d4a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	619a      	str	r2, [r3, #24]
 8005d48:	e002      	b.n	8005d50 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f040 80c4 	bne.w	8005ee2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d126      	bne.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x456>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	4413      	add	r3, r2
 8005d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	011a      	lsls	r2, r3, #4
 8005d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d82:	4413      	add	r3, r2
 8005d84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e01a      	b.n	8005de6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d116      	bne.n	8005de6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	677b      	str	r3, [r7, #116]	; 0x74
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dcc:	4413      	add	r3, r2
 8005dce:	677b      	str	r3, [r7, #116]	; 0x74
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	011a      	lsls	r2, r3, #4
 8005dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd8:	4413      	add	r3, r2
 8005dda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dde:	673b      	str	r3, [r7, #112]	; 0x70
 8005de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005de2:	2200      	movs	r2, #0
 8005de4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d12f      	bne.n	8005e54 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	011a      	lsls	r2, r3, #4
 8005e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	e017      	b.n	8005e84 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d113      	bne.n	8005e84 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e6a:	4413      	add	r3, r2
 8005e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	011a      	lsls	r2, r3, #4
 8005e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e76:	4413      	add	r3, r2
 8005e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e80:	2200      	movs	r2, #0
 8005e82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f006 fa53 	bl	800c336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 8104 	bne.w	80060a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	8013      	strh	r3, [r2, #0]
 8005ee0:	e0e0      	b.n	80060a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d121      	bne.n	8005f30 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	441a      	add	r2, r3
 8005f18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	f040 80b4 	bne.w	80060a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	695a      	ldr	r2, [r3, #20]
 8005f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f44:	441a      	add	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	69da      	ldr	r2, [r3, #28]
 8005f4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f52:	441a      	add	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6a1a      	ldr	r2, [r3, #32]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d309      	bcc.n	8005f78 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f70:	1ad2      	subs	r2, r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	621a      	str	r2, [r3, #32]
 8005f76:	e015      	b.n	8005fa4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d107      	bne.n	8005f90 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005f80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f8e:	e009      	b.n	8005fa4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d155      	bne.n	800605e <HAL_PCD_EP_DB_Transmit+0x704>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc6:	4413      	add	r3, r2
 8005fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	011a      	lsls	r2, r3, #4
 8005fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d112      	bne.n	8006006 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e044      	b.n	8006090 <HAL_PCD_EP_DB_Transmit+0x736>
 8006006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006008:	2b3e      	cmp	r3, #62	; 0x3e
 800600a:	d811      	bhi.n	8006030 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800600c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	657b      	str	r3, [r7, #84]	; 0x54
 8006012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601e:	3301      	adds	r3, #1
 8006020:	657b      	str	r3, [r7, #84]	; 0x54
 8006022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006024:	b29b      	uxth	r3, r3
 8006026:	029b      	lsls	r3, r3, #10
 8006028:	b29a      	uxth	r2, r3
 800602a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	e02f      	b.n	8006090 <HAL_PCD_EP_DB_Transmit+0x736>
 8006030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	657b      	str	r3, [r7, #84]	; 0x54
 8006036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2b00      	cmp	r3, #0
 800603e:	d102      	bne.n	8006046 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006042:	3b01      	subs	r3, #1
 8006044:	657b      	str	r3, [r7, #84]	; 0x54
 8006046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006048:	b29b      	uxth	r3, r3
 800604a:	029b      	lsls	r3, r3, #10
 800604c:	b29b      	uxth	r3, r3
 800604e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006056:	b29a      	uxth	r2, r3
 8006058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	e018      	b.n	8006090 <HAL_PCD_EP_DB_Transmit+0x736>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d114      	bne.n	8006090 <HAL_PCD_EP_DB_Transmit+0x736>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606e:	b29b      	uxth	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006074:	4413      	add	r3, r2
 8006076:	667b      	str	r3, [r7, #100]	; 0x64
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	011a      	lsls	r2, r3, #4
 800607e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006080:	4413      	add	r3, r2
 8006082:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006086:	663b      	str	r3, [r7, #96]	; 0x60
 8006088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800608a:	b29a      	uxth	r2, r3
 800608c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	6959      	ldr	r1, [r3, #20]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	895a      	ldrh	r2, [r3, #10]
 800609c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f004 fafa 	bl	800a698 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060be:	823b      	strh	r3, [r7, #16]
 80060c0:	8a3b      	ldrh	r3, [r7, #16]
 80060c2:	f083 0310 	eor.w	r3, r3, #16
 80060c6:	823b      	strh	r3, [r7, #16]
 80060c8:	8a3b      	ldrh	r3, [r7, #16]
 80060ca:	f083 0320 	eor.w	r3, r3, #32
 80060ce:	823b      	strh	r3, [r7, #16]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	8a3b      	ldrh	r3, [r7, #16]
 80060e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3788      	adds	r7, #136	; 0x88
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80060fe:	b480      	push	{r7}
 8006100:	b087      	sub	sp, #28
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	817b      	strh	r3, [r7, #10]
 800610c:	4613      	mov	r3, r2
 800610e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006110:	897b      	ldrh	r3, [r7, #10]
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800611c:	897b      	ldrh	r3, [r7, #10]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	e009      	b.n	8006148 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006134:	897a      	ldrh	r2, [r7, #10]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006148:	893b      	ldrh	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d107      	bne.n	800615e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2200      	movs	r2, #0
 8006152:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	b29a      	uxth	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	80da      	strh	r2, [r3, #6]
 800615c:	e00b      	b.n	8006176 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2201      	movs	r2, #1
 8006162:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	b29a      	uxth	r2, r3
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	0c1b      	lsrs	r3, r3, #16
 8006170:	b29a      	uxth	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr
	...

08006184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e272      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8087 	beq.w	80062b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061a4:	4b92      	ldr	r3, [pc, #584]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f003 030c 	and.w	r3, r3, #12
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d00c      	beq.n	80061ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061b0:	4b8f      	ldr	r3, [pc, #572]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f003 030c 	and.w	r3, r3, #12
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d112      	bne.n	80061e2 <HAL_RCC_OscConfig+0x5e>
 80061bc:	4b8c      	ldr	r3, [pc, #560]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c8:	d10b      	bne.n	80061e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ca:	4b89      	ldr	r3, [pc, #548]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d06c      	beq.n	80062b0 <HAL_RCC_OscConfig+0x12c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d168      	bne.n	80062b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e24c      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ea:	d106      	bne.n	80061fa <HAL_RCC_OscConfig+0x76>
 80061ec:	4b80      	ldr	r3, [pc, #512]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a7f      	ldr	r2, [pc, #508]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80061f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	e02e      	b.n	8006258 <HAL_RCC_OscConfig+0xd4>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10c      	bne.n	800621c <HAL_RCC_OscConfig+0x98>
 8006202:	4b7b      	ldr	r3, [pc, #492]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a7a      	ldr	r2, [pc, #488]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4b78      	ldr	r3, [pc, #480]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a77      	ldr	r2, [pc, #476]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e01d      	b.n	8006258 <HAL_RCC_OscConfig+0xd4>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006224:	d10c      	bne.n	8006240 <HAL_RCC_OscConfig+0xbc>
 8006226:	4b72      	ldr	r3, [pc, #456]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a71      	ldr	r2, [pc, #452]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 800622c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4b6f      	ldr	r3, [pc, #444]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a6e      	ldr	r2, [pc, #440]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e00b      	b.n	8006258 <HAL_RCC_OscConfig+0xd4>
 8006240:	4b6b      	ldr	r3, [pc, #428]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a6a      	ldr	r2, [pc, #424]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	4b68      	ldr	r3, [pc, #416]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a67      	ldr	r2, [pc, #412]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d013      	beq.n	8006288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fd f8ea 	bl	8003438 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006268:	f7fd f8e6 	bl	8003438 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	; 0x64
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e200      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627a:	4b5d      	ldr	r3, [pc, #372]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f0      	beq.n	8006268 <HAL_RCC_OscConfig+0xe4>
 8006286:	e014      	b.n	80062b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006288:	f7fd f8d6 	bl	8003438 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006290:	f7fd f8d2 	bl	8003438 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b64      	cmp	r3, #100	; 0x64
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e1ec      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a2:	4b53      	ldr	r3, [pc, #332]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0x10c>
 80062ae:	e000      	b.n	80062b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d063      	beq.n	8006386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062be:	4b4c      	ldr	r3, [pc, #304]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00b      	beq.n	80062e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062ca:	4b49      	ldr	r3, [pc, #292]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f003 030c 	and.w	r3, r3, #12
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d11c      	bne.n	8006310 <HAL_RCC_OscConfig+0x18c>
 80062d6:	4b46      	ldr	r3, [pc, #280]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d116      	bne.n	8006310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e2:	4b43      	ldr	r3, [pc, #268]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_RCC_OscConfig+0x176>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d001      	beq.n	80062fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e1c0      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fa:	4b3d      	ldr	r3, [pc, #244]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4939      	ldr	r1, [pc, #228]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 800630a:	4313      	orrs	r3, r2
 800630c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800630e:	e03a      	b.n	8006386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d020      	beq.n	800635a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006318:	4b36      	ldr	r3, [pc, #216]	; (80063f4 <HAL_RCC_OscConfig+0x270>)
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631e:	f7fd f88b 	bl	8003438 <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006324:	e008      	b.n	8006338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006326:	f7fd f887 	bl	8003438 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e1a1      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006338:	4b2d      	ldr	r3, [pc, #180]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0f0      	beq.n	8006326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006344:	4b2a      	ldr	r3, [pc, #168]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4927      	ldr	r1, [pc, #156]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]
 8006358:	e015      	b.n	8006386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800635a:	4b26      	ldr	r3, [pc, #152]	; (80063f4 <HAL_RCC_OscConfig+0x270>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006360:	f7fd f86a 	bl	8003438 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006368:	f7fd f866 	bl	8003438 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e180      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637a:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d03a      	beq.n	8006408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d019      	beq.n	80063ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800639a:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <HAL_RCC_OscConfig+0x274>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a0:	f7fd f84a 	bl	8003438 <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063a8:	f7fd f846 	bl	8003438 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e160      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <HAL_RCC_OscConfig+0x26c>)
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0f0      	beq.n	80063a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063c6:	2001      	movs	r0, #1
 80063c8:	f000 fac4 	bl	8006954 <RCC_Delay>
 80063cc:	e01c      	b.n	8006408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ce:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <HAL_RCC_OscConfig+0x274>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d4:	f7fd f830 	bl	8003438 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063da:	e00f      	b.n	80063fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063dc:	f7fd f82c 	bl	8003438 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d908      	bls.n	80063fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e146      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
 80063ee:	bf00      	nop
 80063f0:	40021000 	.word	0x40021000
 80063f4:	42420000 	.word	0x42420000
 80063f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063fc:	4b92      	ldr	r3, [pc, #584]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e9      	bne.n	80063dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 80a6 	beq.w	8006562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006416:	2300      	movs	r3, #0
 8006418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800641a:	4b8b      	ldr	r3, [pc, #556]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10d      	bne.n	8006442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006426:	4b88      	ldr	r3, [pc, #544]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	4a87      	ldr	r2, [pc, #540]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 800642c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006430:	61d3      	str	r3, [r2, #28]
 8006432:	4b85      	ldr	r3, [pc, #532]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006442:	4b82      	ldr	r3, [pc, #520]	; (800664c <HAL_RCC_OscConfig+0x4c8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d118      	bne.n	8006480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800644e:	4b7f      	ldr	r3, [pc, #508]	; (800664c <HAL_RCC_OscConfig+0x4c8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a7e      	ldr	r2, [pc, #504]	; (800664c <HAL_RCC_OscConfig+0x4c8>)
 8006454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800645a:	f7fc ffed 	bl	8003438 <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006462:	f7fc ffe9 	bl	8003438 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b64      	cmp	r3, #100	; 0x64
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e103      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006474:	4b75      	ldr	r3, [pc, #468]	; (800664c <HAL_RCC_OscConfig+0x4c8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d106      	bne.n	8006496 <HAL_RCC_OscConfig+0x312>
 8006488:	4b6f      	ldr	r3, [pc, #444]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	4a6e      	ldr	r2, [pc, #440]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	6213      	str	r3, [r2, #32]
 8006494:	e02d      	b.n	80064f2 <HAL_RCC_OscConfig+0x36e>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10c      	bne.n	80064b8 <HAL_RCC_OscConfig+0x334>
 800649e:	4b6a      	ldr	r3, [pc, #424]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	4a69      	ldr	r2, [pc, #420]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064a4:	f023 0301 	bic.w	r3, r3, #1
 80064a8:	6213      	str	r3, [r2, #32]
 80064aa:	4b67      	ldr	r3, [pc, #412]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	4a66      	ldr	r2, [pc, #408]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064b0:	f023 0304 	bic.w	r3, r3, #4
 80064b4:	6213      	str	r3, [r2, #32]
 80064b6:	e01c      	b.n	80064f2 <HAL_RCC_OscConfig+0x36e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b05      	cmp	r3, #5
 80064be:	d10c      	bne.n	80064da <HAL_RCC_OscConfig+0x356>
 80064c0:	4b61      	ldr	r3, [pc, #388]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	4a60      	ldr	r2, [pc, #384]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064c6:	f043 0304 	orr.w	r3, r3, #4
 80064ca:	6213      	str	r3, [r2, #32]
 80064cc:	4b5e      	ldr	r3, [pc, #376]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	4a5d      	ldr	r2, [pc, #372]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	6213      	str	r3, [r2, #32]
 80064d8:	e00b      	b.n	80064f2 <HAL_RCC_OscConfig+0x36e>
 80064da:	4b5b      	ldr	r3, [pc, #364]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	4a5a      	ldr	r2, [pc, #360]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064e0:	f023 0301 	bic.w	r3, r3, #1
 80064e4:	6213      	str	r3, [r2, #32]
 80064e6:	4b58      	ldr	r3, [pc, #352]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	4a57      	ldr	r2, [pc, #348]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80064ec:	f023 0304 	bic.w	r3, r3, #4
 80064f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d015      	beq.n	8006526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064fa:	f7fc ff9d 	bl	8003438 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006500:	e00a      	b.n	8006518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006502:	f7fc ff99 	bl	8003438 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006510:	4293      	cmp	r3, r2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e0b1      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006518:	4b4b      	ldr	r3, [pc, #300]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0ee      	beq.n	8006502 <HAL_RCC_OscConfig+0x37e>
 8006524:	e014      	b.n	8006550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006526:	f7fc ff87 	bl	8003438 <HAL_GetTick>
 800652a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800652c:	e00a      	b.n	8006544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800652e:	f7fc ff83 	bl	8003438 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	f241 3288 	movw	r2, #5000	; 0x1388
 800653c:	4293      	cmp	r3, r2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e09b      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006544:	4b40      	ldr	r3, [pc, #256]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1ee      	bne.n	800652e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d105      	bne.n	8006562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006556:	4b3c      	ldr	r3, [pc, #240]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	4a3b      	ldr	r2, [pc, #236]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 800655c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8087 	beq.w	800667a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800656c:	4b36      	ldr	r3, [pc, #216]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f003 030c 	and.w	r3, r3, #12
 8006574:	2b08      	cmp	r3, #8
 8006576:	d061      	beq.n	800663c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d146      	bne.n	800660e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006580:	4b33      	ldr	r3, [pc, #204]	; (8006650 <HAL_RCC_OscConfig+0x4cc>)
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006586:	f7fc ff57 	bl	8003438 <HAL_GetTick>
 800658a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800658c:	e008      	b.n	80065a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800658e:	f7fc ff53 	bl	8003438 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e06d      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a0:	4b29      	ldr	r3, [pc, #164]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f0      	bne.n	800658e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b4:	d108      	bne.n	80065c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065b6:	4b24      	ldr	r3, [pc, #144]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	4921      	ldr	r1, [pc, #132]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065c8:	4b1f      	ldr	r3, [pc, #124]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a19      	ldr	r1, [r3, #32]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	430b      	orrs	r3, r1
 80065da:	491b      	ldr	r1, [pc, #108]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e0:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <HAL_RCC_OscConfig+0x4cc>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e6:	f7fc ff27 	bl	8003438 <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065ec:	e008      	b.n	8006600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ee:	f7fc ff23 	bl	8003438 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e03d      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006600:	4b11      	ldr	r3, [pc, #68]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0f0      	beq.n	80065ee <HAL_RCC_OscConfig+0x46a>
 800660c:	e035      	b.n	800667a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800660e:	4b10      	ldr	r3, [pc, #64]	; (8006650 <HAL_RCC_OscConfig+0x4cc>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006614:	f7fc ff10 	bl	8003438 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fc ff0c 	bl	8003438 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e026      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <HAL_RCC_OscConfig+0x4c4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x498>
 800663a:	e01e      	b.n	800667a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d107      	bne.n	8006654 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e019      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
 8006648:	40021000 	.word	0x40021000
 800664c:	40007000 	.word	0x40007000
 8006650:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <HAL_RCC_OscConfig+0x500>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	429a      	cmp	r2, r3
 8006666:	d106      	bne.n	8006676 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006672:	429a      	cmp	r2, r3
 8006674:	d001      	beq.n	800667a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40021000 	.word	0x40021000

08006688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0d0      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800669c:	4b6a      	ldr	r3, [pc, #424]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d910      	bls.n	80066cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066aa:	4b67      	ldr	r3, [pc, #412]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f023 0207 	bic.w	r2, r3, #7
 80066b2:	4965      	ldr	r1, [pc, #404]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ba:	4b63      	ldr	r3, [pc, #396]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d001      	beq.n	80066cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0b8      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d020      	beq.n	800671a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066e4:	4b59      	ldr	r3, [pc, #356]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4a58      	ldr	r2, [pc, #352]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80066ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066fc:	4b53      	ldr	r3, [pc, #332]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4a52      	ldr	r2, [pc, #328]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006702:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006708:	4b50      	ldr	r3, [pc, #320]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	494d      	ldr	r1, [pc, #308]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006716:	4313      	orrs	r3, r2
 8006718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d040      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d107      	bne.n	800673e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672e:	4b47      	ldr	r3, [pc, #284]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d115      	bne.n	8006766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e07f      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d107      	bne.n	8006756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006746:	4b41      	ldr	r3, [pc, #260]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e073      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006756:	4b3d      	ldr	r3, [pc, #244]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e06b      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006766:	4b39      	ldr	r3, [pc, #228]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f023 0203 	bic.w	r2, r3, #3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	4936      	ldr	r1, [pc, #216]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006774:	4313      	orrs	r3, r2
 8006776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006778:	f7fc fe5e 	bl	8003438 <HAL_GetTick>
 800677c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677e:	e00a      	b.n	8006796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006780:	f7fc fe5a 	bl	8003438 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	f241 3288 	movw	r2, #5000	; 0x1388
 800678e:	4293      	cmp	r3, r2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e053      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006796:	4b2d      	ldr	r3, [pc, #180]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f003 020c 	and.w	r2, r3, #12
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d1eb      	bne.n	8006780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067a8:	4b27      	ldr	r3, [pc, #156]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d210      	bcs.n	80067d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067b6:	4b24      	ldr	r3, [pc, #144]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f023 0207 	bic.w	r2, r3, #7
 80067be:	4922      	ldr	r1, [pc, #136]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c6:	4b20      	ldr	r3, [pc, #128]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d001      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e032      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067e4:	4b19      	ldr	r3, [pc, #100]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	4916      	ldr	r1, [pc, #88]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	490e      	ldr	r1, [pc, #56]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006812:	4313      	orrs	r3, r2
 8006814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006816:	f000 f821 	bl	800685c <HAL_RCC_GetSysClockFreq>
 800681a:	4602      	mov	r2, r0
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	490a      	ldr	r1, [pc, #40]	; (8006850 <HAL_RCC_ClockConfig+0x1c8>)
 8006828:	5ccb      	ldrb	r3, [r1, r3]
 800682a:	fa22 f303 	lsr.w	r3, r2, r3
 800682e:	4a09      	ldr	r2, [pc, #36]	; (8006854 <HAL_RCC_ClockConfig+0x1cc>)
 8006830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <HAL_RCC_ClockConfig+0x1d0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f7fc fdbc 	bl	80033b4 <HAL_InitTick>

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40022000 	.word	0x40022000
 800684c:	40021000 	.word	0x40021000
 8006850:	0800c8d4 	.word	0x0800c8d4
 8006854:	20000004 	.word	0x20000004
 8006858:	20000008 	.word	0x20000008

0800685c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800685c:	b490      	push	{r4, r7}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006862:	4b29      	ldr	r3, [pc, #164]	; (8006908 <HAL_RCC_GetSysClockFreq+0xac>)
 8006864:	1d3c      	adds	r4, r7, #4
 8006866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800686c:	f240 2301 	movw	r3, #513	; 0x201
 8006870:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	2300      	movs	r3, #0
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	2300      	movs	r3, #0
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006886:	4b21      	ldr	r3, [pc, #132]	; (800690c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b04      	cmp	r3, #4
 8006894:	d002      	beq.n	800689c <HAL_RCC_GetSysClockFreq+0x40>
 8006896:	2b08      	cmp	r3, #8
 8006898:	d003      	beq.n	80068a2 <HAL_RCC_GetSysClockFreq+0x46>
 800689a:	e02b      	b.n	80068f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800689c:	4b1c      	ldr	r3, [pc, #112]	; (8006910 <HAL_RCC_GetSysClockFreq+0xb4>)
 800689e:	623b      	str	r3, [r7, #32]
      break;
 80068a0:	e02b      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	0c9b      	lsrs	r3, r3, #18
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	3328      	adds	r3, #40	; 0x28
 80068ac:	443b      	add	r3, r7
 80068ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80068b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d012      	beq.n	80068e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <HAL_RCC_GetSysClockFreq+0xb0>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	0c5b      	lsrs	r3, r3, #17
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	3328      	adds	r3, #40	; 0x28
 80068ca:	443b      	add	r3, r7
 80068cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	4a0e      	ldr	r2, [pc, #56]	; (8006910 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068d6:	fb03 f202 	mul.w	r2, r3, r2
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
 80068e2:	e004      	b.n	80068ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4a0b      	ldr	r2, [pc, #44]	; (8006914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068e8:	fb02 f303 	mul.w	r3, r2, r3
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	623b      	str	r3, [r7, #32]
      break;
 80068f2:	e002      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068f4:	4b06      	ldr	r3, [pc, #24]	; (8006910 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068f6:	623b      	str	r3, [r7, #32]
      break;
 80068f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068fa:	6a3b      	ldr	r3, [r7, #32]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3728      	adds	r7, #40	; 0x28
 8006900:	46bd      	mov	sp, r7
 8006902:	bc90      	pop	{r4, r7}
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	0800c870 	.word	0x0800c870
 800690c:	40021000 	.word	0x40021000
 8006910:	007a1200 	.word	0x007a1200
 8006914:	003d0900 	.word	0x003d0900

08006918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800691c:	4b02      	ldr	r3, [pc, #8]	; (8006928 <HAL_RCC_GetHCLKFreq+0x10>)
 800691e:	681b      	ldr	r3, [r3, #0]
}
 8006920:	4618      	mov	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr
 8006928:	20000004 	.word	0x20000004

0800692c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006930:	f7ff fff2 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8006934:	4602      	mov	r2, r0
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	0adb      	lsrs	r3, r3, #11
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	4903      	ldr	r1, [pc, #12]	; (8006950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006942:	5ccb      	ldrb	r3, [r1, r3]
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006948:	4618      	mov	r0, r3
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40021000 	.word	0x40021000
 8006950:	0800c8e4 	.word	0x0800c8e4

08006954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <RCC_Delay+0x34>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <RCC_Delay+0x38>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	0a5b      	lsrs	r3, r3, #9
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	fb02 f303 	mul.w	r3, r2, r3
 800696e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006970:	bf00      	nop
  }
  while (Delay --);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1e5a      	subs	r2, r3, #1
 8006976:	60fa      	str	r2, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f9      	bne.n	8006970 <RCC_Delay+0x1c>
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr
 8006988:	20000004 	.word	0x20000004
 800698c:	10624dd3 	.word	0x10624dd3

08006990 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d07d      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80069ac:	2300      	movs	r3, #0
 80069ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069b0:	4b4f      	ldr	r3, [pc, #316]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10d      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069bc:	4b4c      	ldr	r3, [pc, #304]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	4a4b      	ldr	r2, [pc, #300]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c6:	61d3      	str	r3, [r2, #28]
 80069c8:	4b49      	ldr	r3, [pc, #292]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d8:	4b46      	ldr	r3, [pc, #280]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d118      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069e4:	4b43      	ldr	r3, [pc, #268]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a42      	ldr	r2, [pc, #264]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069f0:	f7fc fd22 	bl	8003438 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f6:	e008      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069f8:	f7fc fd1e 	bl	8003438 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b64      	cmp	r3, #100	; 0x64
 8006a04:	d901      	bls.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e06d      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a0a:	4b3a      	ldr	r3, [pc, #232]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a16:	4b36      	ldr	r3, [pc, #216]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d02e      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d027      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a34:	4b2e      	ldr	r3, [pc, #184]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a3e:	4b2e      	ldr	r3, [pc, #184]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a40:	2201      	movs	r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a44:	4b2c      	ldr	r3, [pc, #176]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a4a:	4a29      	ldr	r2, [pc, #164]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d014      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5a:	f7fc fced 	bl	8003438 <HAL_GetTick>
 8006a5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a60:	e00a      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a62:	f7fc fce9 	bl	8003438 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e036      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a78:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0ee      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a84:	4b1a      	ldr	r3, [pc, #104]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	4917      	ldr	r1, [pc, #92]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d105      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a9c:	4b14      	ldr	r3, [pc, #80]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	4a13      	ldr	r2, [pc, #76]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	490b      	ldr	r1, [pc, #44]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d008      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ad2:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	4904      	ldr	r1, [pc, #16]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	40021000 	.word	0x40021000
 8006af4:	40007000 	.word	0x40007000
 8006af8:	42420440 	.word	0x42420440

08006afc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006afc:	b590      	push	{r4, r7, lr}
 8006afe:	b08d      	sub	sp, #52	; 0x34
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b04:	4b58      	ldr	r3, [pc, #352]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006b06:	f107 040c 	add.w	r4, r7, #12
 8006b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b10:	f240 2301 	movw	r3, #513	; 0x201
 8006b14:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b1e:	2300      	movs	r3, #0
 8006b20:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	61fb      	str	r3, [r7, #28]
 8006b26:	2300      	movs	r3, #0
 8006b28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d00a      	beq.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b10      	cmp	r3, #16
 8006b34:	f200 808e 	bhi.w	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d049      	beq.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d079      	beq.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006b44:	e086      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006b46:	4b49      	ldr	r3, [pc, #292]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006b4c:	4b47      	ldr	r3, [pc, #284]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d07f      	beq.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	0c9b      	lsrs	r3, r3, #18
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	3330      	adds	r3, #48	; 0x30
 8006b62:	443b      	add	r3, r7
 8006b64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b68:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d017      	beq.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b74:	4b3d      	ldr	r3, [pc, #244]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	0c5b      	lsrs	r3, r3, #17
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	3330      	adds	r3, #48	; 0x30
 8006b80:	443b      	add	r3, r7
 8006b82:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00d      	beq.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006b92:	4a37      	ldr	r2, [pc, #220]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba2:	e004      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	4a33      	ldr	r2, [pc, #204]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006ba8:	fb02 f303 	mul.w	r3, r2, r3
 8006bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006bae:	4b2f      	ldr	r3, [pc, #188]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bba:	d102      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006bc0:	e04a      	b.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	4a2c      	ldr	r2, [pc, #176]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bcc:	085b      	lsrs	r3, r3, #1
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006bd0:	e042      	b.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006bd2:	4b26      	ldr	r3, [pc, #152]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be2:	d108      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bf4:	e01f      	b.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c00:	d109      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006c02:	4b1a      	ldr	r3, [pc, #104]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006c0e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c14:	e00f      	b.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c20:	d11c      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d016      	beq.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006c2e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c34:	e012      	b.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006c36:	e011      	b.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006c38:	f7ff fe78 	bl	800692c <HAL_RCC_GetPCLK2Freq>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	0b9b      	lsrs	r3, r3, #14
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	3301      	adds	r3, #1
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c52:	e004      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c54:	bf00      	nop
 8006c56:	e002      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c58:	bf00      	nop
 8006c5a:	e000      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c5c:	bf00      	nop
    }
  }
  return (frequency);
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3734      	adds	r7, #52	; 0x34
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd90      	pop	{r4, r7, pc}
 8006c68:	0800c880 	.word	0x0800c880
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	007a1200 	.word	0x007a1200
 8006c74:	003d0900 	.word	0x003d0900
 8006c78:	aaaaaaab 	.word	0xaaaaaaab

08006c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e041      	b.n	8006d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fc fa68 	bl	8003178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f000 fca0 	bl	8007600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d001      	beq.n	8006d34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e032      	b.n	8006d9a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <HAL_TIM_Base_Start+0x88>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00e      	beq.n	8006d64 <HAL_TIM_Base_Start+0x48>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4e:	d009      	beq.n	8006d64 <HAL_TIM_Base_Start+0x48>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a14      	ldr	r2, [pc, #80]	; (8006da8 <HAL_TIM_Base_Start+0x8c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d004      	beq.n	8006d64 <HAL_TIM_Base_Start+0x48>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a13      	ldr	r2, [pc, #76]	; (8006dac <HAL_TIM_Base_Start+0x90>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d111      	bne.n	8006d88 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b06      	cmp	r3, #6
 8006d74:	d010      	beq.n	8006d98 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0201 	orr.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d86:	e007      	b.n	8006d98 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800

08006db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d001      	beq.n	8006dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e03a      	b.n	8006e3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a18      	ldr	r2, [pc, #96]	; (8006e48 <HAL_TIM_Base_Start_IT+0x98>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00e      	beq.n	8006e08 <HAL_TIM_Base_Start_IT+0x58>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df2:	d009      	beq.n	8006e08 <HAL_TIM_Base_Start_IT+0x58>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a14      	ldr	r2, [pc, #80]	; (8006e4c <HAL_TIM_Base_Start_IT+0x9c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d004      	beq.n	8006e08 <HAL_TIM_Base_Start_IT+0x58>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a13      	ldr	r2, [pc, #76]	; (8006e50 <HAL_TIM_Base_Start_IT+0xa0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d111      	bne.n	8006e2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b06      	cmp	r3, #6
 8006e18:	d010      	beq.n	8006e3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0201 	orr.w	r2, r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2a:	e007      	b.n	8006e3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800

08006e54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0201 	bic.w	r2, r2, #1
 8006e6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6a1a      	ldr	r2, [r3, #32]
 8006e72:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10f      	bne.n	8006e9c <HAL_TIM_Base_Stop_IT+0x48>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6a1a      	ldr	r2, [r3, #32]
 8006e82:	f240 4344 	movw	r3, #1092	; 0x444
 8006e86:	4013      	ands	r3, r2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d107      	bne.n	8006e9c <HAL_TIM_Base_Stop_IT+0x48>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0201 	bic.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bc80      	pop	{r7}
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e041      	b.n	8006f46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f839 	bl	8006f4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f000 fb86 	bl	8007600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d109      	bne.n	8006f84 <HAL_TIM_PWM_Start+0x24>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	bf14      	ite	ne
 8006f7c:	2301      	movne	r3, #1
 8006f7e:	2300      	moveq	r3, #0
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	e022      	b.n	8006fca <HAL_TIM_PWM_Start+0x6a>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	d109      	bne.n	8006f9e <HAL_TIM_PWM_Start+0x3e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	bf14      	ite	ne
 8006f96:	2301      	movne	r3, #1
 8006f98:	2300      	moveq	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	e015      	b.n	8006fca <HAL_TIM_PWM_Start+0x6a>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d109      	bne.n	8006fb8 <HAL_TIM_PWM_Start+0x58>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	bf14      	ite	ne
 8006fb0:	2301      	movne	r3, #1
 8006fb2:	2300      	moveq	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	e008      	b.n	8006fca <HAL_TIM_PWM_Start+0x6a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	bf14      	ite	ne
 8006fc4:	2301      	movne	r3, #1
 8006fc6:	2300      	moveq	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e05e      	b.n	8007090 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d104      	bne.n	8006fe2 <HAL_TIM_PWM_Start+0x82>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe0:	e013      	b.n	800700a <HAL_TIM_PWM_Start+0xaa>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d104      	bne.n	8006ff2 <HAL_TIM_PWM_Start+0x92>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ff0:	e00b      	b.n	800700a <HAL_TIM_PWM_Start+0xaa>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_PWM_Start+0xa2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007000:	e003      	b.n	800700a <HAL_TIM_PWM_Start+0xaa>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2202      	movs	r2, #2
 8007006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2201      	movs	r2, #1
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fd74 	bl	8007b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1e      	ldr	r2, [pc, #120]	; (8007098 <HAL_TIM_PWM_Start+0x138>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d107      	bne.n	8007032 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007030:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a18      	ldr	r2, [pc, #96]	; (8007098 <HAL_TIM_PWM_Start+0x138>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_TIM_PWM_Start+0xfa>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007044:	d009      	beq.n	800705a <HAL_TIM_PWM_Start+0xfa>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a14      	ldr	r2, [pc, #80]	; (800709c <HAL_TIM_PWM_Start+0x13c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_TIM_PWM_Start+0xfa>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a12      	ldr	r2, [pc, #72]	; (80070a0 <HAL_TIM_PWM_Start+0x140>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d111      	bne.n	800707e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b06      	cmp	r3, #6
 800706a:	d010      	beq.n	800708e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707c:	e007      	b.n	800708e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0201 	orr.w	r2, r2, #1
 800708c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40012c00 	.word	0x40012c00
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800

080070a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d122      	bne.n	8007100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d11b      	bne.n	8007100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0202 	mvn.w	r2, #2
 80070d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa6f 	bl	80075ca <HAL_TIM_IC_CaptureCallback>
 80070ec:	e005      	b.n	80070fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa62 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa71 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b04      	cmp	r3, #4
 800710c:	d122      	bne.n	8007154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b04      	cmp	r3, #4
 800711a:	d11b      	bne.n	8007154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0204 	mvn.w	r2, #4
 8007124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa45 	bl	80075ca <HAL_TIM_IC_CaptureCallback>
 8007140:	e005      	b.n	800714e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa38 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fa47 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b08      	cmp	r3, #8
 8007160:	d122      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0308 	and.w	r3, r3, #8
 800716c:	2b08      	cmp	r3, #8
 800716e:	d11b      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0208 	mvn.w	r2, #8
 8007178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2204      	movs	r2, #4
 800717e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fa1b 	bl	80075ca <HAL_TIM_IC_CaptureCallback>
 8007194:	e005      	b.n	80071a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa0e 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fa1d 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b10      	cmp	r3, #16
 80071b4:	d122      	bne.n	80071fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d11b      	bne.n	80071fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0210 	mvn.w	r2, #16
 80071cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2208      	movs	r2, #8
 80071d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9f1 	bl	80075ca <HAL_TIM_IC_CaptureCallback>
 80071e8:	e005      	b.n	80071f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f9e4 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f9f3 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b01      	cmp	r3, #1
 8007208:	d10e      	bne.n	8007228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b01      	cmp	r3, #1
 8007216:	d107      	bne.n	8007228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f06f 0201 	mvn.w	r2, #1
 8007220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fa f8ea 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007232:	2b80      	cmp	r3, #128	; 0x80
 8007234:	d10e      	bne.n	8007254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007240:	2b80      	cmp	r3, #128	; 0x80
 8007242:	d107      	bne.n	8007254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800724c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fce1 	bl	8007c16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d10e      	bne.n	8007280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b40      	cmp	r3, #64	; 0x40
 800726e:	d107      	bne.n	8007280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9b7 	bl	80075ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b20      	cmp	r3, #32
 800728c:	d10e      	bne.n	80072ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b20      	cmp	r3, #32
 800729a:	d107      	bne.n	80072ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0220 	mvn.w	r2, #32
 80072a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fcac 	bl	8007c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e0ac      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x174>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b0c      	cmp	r3, #12
 80072da:	f200 809f 	bhi.w	800741c <HAL_TIM_PWM_ConfigChannel+0x168>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007319 	.word	0x08007319
 80072e8:	0800741d 	.word	0x0800741d
 80072ec:	0800741d 	.word	0x0800741d
 80072f0:	0800741d 	.word	0x0800741d
 80072f4:	08007359 	.word	0x08007359
 80072f8:	0800741d 	.word	0x0800741d
 80072fc:	0800741d 	.word	0x0800741d
 8007300:	0800741d 	.word	0x0800741d
 8007304:	0800739b 	.word	0x0800739b
 8007308:	0800741d 	.word	0x0800741d
 800730c:	0800741d 	.word	0x0800741d
 8007310:	0800741d 	.word	0x0800741d
 8007314:	080073db 	.word	0x080073db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 f9d0 	bl	80076c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699a      	ldr	r2, [r3, #24]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0208 	orr.w	r2, r2, #8
 8007332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 0204 	bic.w	r2, r2, #4
 8007342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6999      	ldr	r1, [r3, #24]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	691a      	ldr	r2, [r3, #16]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	619a      	str	r2, [r3, #24]
      break;
 8007356:	e062      	b.n	800741e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fa16 	bl	8007790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699a      	ldr	r2, [r3, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6999      	ldr	r1, [r3, #24]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	021a      	lsls	r2, r3, #8
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	619a      	str	r2, [r3, #24]
      break;
 8007398:	e041      	b.n	800741e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 fa5f 	bl	8007864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0208 	orr.w	r2, r2, #8
 80073b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69da      	ldr	r2, [r3, #28]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0204 	bic.w	r2, r2, #4
 80073c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69d9      	ldr	r1, [r3, #28]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	61da      	str	r2, [r3, #28]
      break;
 80073d8:	e021      	b.n	800741e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 faa9 	bl	8007938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69d9      	ldr	r1, [r3, #28]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	021a      	lsls	r2, r3, #8
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	61da      	str	r2, [r3, #28]
      break;
 800741a:	e000      	b.n	800741e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800741c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_TIM_ConfigClockSource+0x18>
 8007444:	2302      	movs	r3, #2
 8007446:	e0b3      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x180>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800746e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007480:	d03e      	beq.n	8007500 <HAL_TIM_ConfigClockSource+0xd0>
 8007482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007486:	f200 8087 	bhi.w	8007598 <HAL_TIM_ConfigClockSource+0x168>
 800748a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748e:	f000 8085 	beq.w	800759c <HAL_TIM_ConfigClockSource+0x16c>
 8007492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007496:	d87f      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x168>
 8007498:	2b70      	cmp	r3, #112	; 0x70
 800749a:	d01a      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0xa2>
 800749c:	2b70      	cmp	r3, #112	; 0x70
 800749e:	d87b      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x168>
 80074a0:	2b60      	cmp	r3, #96	; 0x60
 80074a2:	d050      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x116>
 80074a4:	2b60      	cmp	r3, #96	; 0x60
 80074a6:	d877      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x168>
 80074a8:	2b50      	cmp	r3, #80	; 0x50
 80074aa:	d03c      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0xf6>
 80074ac:	2b50      	cmp	r3, #80	; 0x50
 80074ae:	d873      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x168>
 80074b0:	2b40      	cmp	r3, #64	; 0x40
 80074b2:	d058      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x136>
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	d86f      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x168>
 80074b8:	2b30      	cmp	r3, #48	; 0x30
 80074ba:	d064      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x156>
 80074bc:	2b30      	cmp	r3, #48	; 0x30
 80074be:	d86b      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x168>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d060      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x156>
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d867      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x168>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d05c      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x156>
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d05a      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074d0:	e062      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6899      	ldr	r1, [r3, #8]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f000 faee 	bl	8007ac2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	609a      	str	r2, [r3, #8]
      break;
 80074fe:	e04e      	b.n	800759e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	6899      	ldr	r1, [r3, #8]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f000 fad7 	bl	8007ac2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007522:	609a      	str	r2, [r3, #8]
      break;
 8007524:	e03b      	b.n	800759e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6859      	ldr	r1, [r3, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	461a      	mov	r2, r3
 8007534:	f000 fa4e 	bl	80079d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2150      	movs	r1, #80	; 0x50
 800753e:	4618      	mov	r0, r3
 8007540:	f000 faa5 	bl	8007a8e <TIM_ITRx_SetConfig>
      break;
 8007544:	e02b      	b.n	800759e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	6859      	ldr	r1, [r3, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	461a      	mov	r2, r3
 8007554:	f000 fa6c 	bl	8007a30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2160      	movs	r1, #96	; 0x60
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fa95 	bl	8007a8e <TIM_ITRx_SetConfig>
      break;
 8007564:	e01b      	b.n	800759e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6859      	ldr	r1, [r3, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	461a      	mov	r2, r3
 8007574:	f000 fa2e 	bl	80079d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2140      	movs	r1, #64	; 0x40
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fa85 	bl	8007a8e <TIM_ITRx_SetConfig>
      break;
 8007584:	e00b      	b.n	800759e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f000 fa7c 	bl	8007a8e <TIM_ITRx_SetConfig>
        break;
 8007596:	e002      	b.n	800759e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800759c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr

080075dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr

080075ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bc80      	pop	{r7}
 80075fe:	4770      	bx	lr

08007600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a29      	ldr	r2, [pc, #164]	; (80076b8 <TIM_Base_SetConfig+0xb8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00b      	beq.n	8007630 <TIM_Base_SetConfig+0x30>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761e:	d007      	beq.n	8007630 <TIM_Base_SetConfig+0x30>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a26      	ldr	r2, [pc, #152]	; (80076bc <TIM_Base_SetConfig+0xbc>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d003      	beq.n	8007630 <TIM_Base_SetConfig+0x30>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a25      	ldr	r2, [pc, #148]	; (80076c0 <TIM_Base_SetConfig+0xc0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d108      	bne.n	8007642 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <TIM_Base_SetConfig+0xb8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00b      	beq.n	8007662 <TIM_Base_SetConfig+0x62>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007650:	d007      	beq.n	8007662 <TIM_Base_SetConfig+0x62>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a19      	ldr	r2, [pc, #100]	; (80076bc <TIM_Base_SetConfig+0xbc>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d003      	beq.n	8007662 <TIM_Base_SetConfig+0x62>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <TIM_Base_SetConfig+0xc0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d108      	bne.n	8007674 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a07      	ldr	r2, [pc, #28]	; (80076b8 <TIM_Base_SetConfig+0xb8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d103      	bne.n	80076a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	615a      	str	r2, [r3, #20]
}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bc80      	pop	{r7}
 80076b6:	4770      	bx	lr
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800

080076c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f023 0201 	bic.w	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0303 	bic.w	r3, r3, #3
 80076fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f023 0302 	bic.w	r3, r3, #2
 800770c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4313      	orrs	r3, r2
 8007716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a1c      	ldr	r2, [pc, #112]	; (800778c <TIM_OC1_SetConfig+0xc8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d10c      	bne.n	800773a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f023 0308 	bic.w	r3, r3, #8
 8007726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f023 0304 	bic.w	r3, r3, #4
 8007738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a13      	ldr	r2, [pc, #76]	; (800778c <TIM_OC1_SetConfig+0xc8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d111      	bne.n	8007766 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	621a      	str	r2, [r3, #32]
}
 8007780:	bf00      	nop
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	bc80      	pop	{r7}
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40012c00 	.word	0x40012c00

08007790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f023 0210 	bic.w	r2, r3, #16
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f023 0320 	bic.w	r3, r3, #32
 80077da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a1d      	ldr	r2, [pc, #116]	; (8007860 <TIM_OC2_SetConfig+0xd0>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10d      	bne.n	800780c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800780a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a14      	ldr	r2, [pc, #80]	; (8007860 <TIM_OC2_SetConfig+0xd0>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d113      	bne.n	800783c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800781a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	4313      	orrs	r3, r2
 800782e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	4313      	orrs	r3, r2
 800783a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	621a      	str	r2, [r3, #32]
}
 8007856:	bf00      	nop
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr
 8007860:	40012c00 	.word	0x40012c00

08007864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0303 	bic.w	r3, r3, #3
 800789a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	021b      	lsls	r3, r3, #8
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <TIM_OC3_SetConfig+0xd0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d10d      	bne.n	80078de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	021b      	lsls	r3, r3, #8
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a14      	ldr	r2, [pc, #80]	; (8007934 <TIM_OC3_SetConfig+0xd0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d113      	bne.n	800790e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	621a      	str	r2, [r3, #32]
}
 8007928:	bf00      	nop
 800792a:	371c      	adds	r7, #28
 800792c:	46bd      	mov	sp, r7
 800792e:	bc80      	pop	{r7}
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40012c00 	.word	0x40012c00

08007938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	031b      	lsls	r3, r3, #12
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a0f      	ldr	r2, [pc, #60]	; (80079d0 <TIM_OC4_SetConfig+0x98>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d109      	bne.n	80079ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800799e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	019b      	lsls	r3, r3, #6
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	621a      	str	r2, [r3, #32]
}
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bc80      	pop	{r7}
 80079ce:	4770      	bx	lr
 80079d0:	40012c00 	.word	0x40012c00

080079d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	f023 0201 	bic.w	r2, r3, #1
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f023 030a 	bic.w	r3, r3, #10
 8007a10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	621a      	str	r2, [r3, #32]
}
 8007a26:	bf00      	nop
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	f023 0210 	bic.w	r2, r3, #16
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	031b      	lsls	r3, r3, #12
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	621a      	str	r2, [r3, #32]
}
 8007a84:	bf00      	nop
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bc80      	pop	{r7}
 8007a8c:	4770      	bx	lr

08007a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	f043 0307 	orr.w	r3, r3, #7
 8007ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	609a      	str	r2, [r3, #8]
}
 8007ab8:	bf00      	nop
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr

08007ac2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b087      	sub	sp, #28
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
 8007ace:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007adc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	021a      	lsls	r2, r3, #8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	609a      	str	r2, [r3, #8]
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr

08007b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 031f 	and.w	r3, r3, #31
 8007b12:	2201      	movs	r2, #1
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6a1a      	ldr	r2, [r3, #32]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	43db      	mvns	r3, r3
 8007b22:	401a      	ands	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a1a      	ldr	r2, [r3, #32]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 031f 	and.w	r3, r3, #31
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	fa01 f303 	lsl.w	r3, r1, r3
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	621a      	str	r2, [r3, #32]
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bc80      	pop	{r7}
 8007b46:	4770      	bx	lr

08007b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d101      	bne.n	8007b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e046      	b.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a16      	ldr	r2, [pc, #88]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bac:	d009      	beq.n	8007bc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a12      	ldr	r2, [pc, #72]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a10      	ldr	r2, [pc, #64]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d10c      	bne.n	8007bdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bc80      	pop	{r7}
 8007bf6:	4770      	bx	lr
 8007bf8:	40012c00 	.word	0x40012c00
 8007bfc:	40000400 	.word	0x40000400
 8007c00:	40000800 	.word	0x40000800

08007c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr

08007c16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c28:	b084      	sub	sp, #16
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	f107 0014 	add.w	r0, r7, #20
 8007c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	b004      	add	sp, #16
 8007c46:	4770      	bx	lr

08007c48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c58:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bc80      	pop	{r7}
 8007c72:	4770      	bx	lr

08007c74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c7c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	43db      	mvns	r3, r3
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	4013      	ands	r3, r2
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bc80      	pop	{r7}
 8007ca6:	4770      	bx	lr

08007ca8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr

08007cc0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	f107 0014 	add.w	r0, r7, #20
 8007cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	b004      	add	sp, #16
 8007cfe:	4770      	bx	lr

08007d00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b09b      	sub	sp, #108	; 0x6c
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d81f      	bhi.n	8007d72 <USB_ActivateEndpoint+0x72>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <USB_ActivateEndpoint+0x38>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d49 	.word	0x08007d49
 8007d3c:	08007d65 	.word	0x08007d65
 8007d40:	08007d7b 	.word	0x08007d7b
 8007d44:	08007d57 	.word	0x08007d57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007d48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d50:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d54:	e012      	b.n	8007d7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d5a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007d5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d62:	e00b      	b.n	8007d7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d70:	e004      	b.n	8007d7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007d78:	e000      	b.n	8007d7c <USB_ActivateEndpoint+0x7c>
      break;
 8007d7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	441a      	add	r2, r3
 8007d86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	441a      	add	r2, r3
 8007dcc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	7b1b      	ldrb	r3, [r3, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f040 8149 	bne.w	8008080 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	785b      	ldrb	r3, [r3, #1]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 8084 	beq.w	8007f00 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	4413      	add	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	011a      	lsls	r2, r3, #4
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e1a:	613b      	str	r3, [r7, #16]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	88db      	ldrh	r3, [r3, #6]
 8007e20:	085b      	lsrs	r3, r3, #1
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	81fb      	strh	r3, [r7, #14]
 8007e3a:	89fb      	ldrh	r3, [r7, #14]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01b      	beq.n	8007e7c <USB_ActivateEndpoint+0x17c>
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5a:	81bb      	strh	r3, [r7, #12]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	441a      	add	r2, r3
 8007e66:	89bb      	ldrh	r3, [r7, #12]
 8007e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	78db      	ldrb	r3, [r3, #3]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d020      	beq.n	8007ec6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9a:	813b      	strh	r3, [r7, #8]
 8007e9c:	893b      	ldrh	r3, [r7, #8]
 8007e9e:	f083 0320 	eor.w	r3, r3, #32
 8007ea2:	813b      	strh	r3, [r7, #8]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	441a      	add	r2, r3
 8007eae:	893b      	ldrh	r3, [r7, #8]
 8007eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	8013      	strh	r3, [r2, #0]
 8007ec4:	e27f      	b.n	80083c6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007edc:	817b      	strh	r3, [r7, #10]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	441a      	add	r2, r3
 8007ee8:	897b      	ldrh	r3, [r7, #10]
 8007eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	8013      	strh	r3, [r2, #0]
 8007efe:	e262      	b.n	80083c6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f10:	4413      	add	r3, r2
 8007f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	011a      	lsls	r2, r3, #4
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	88db      	ldrh	r3, [r3, #6]
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	461a      	mov	r2, r3
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	4413      	add	r3, r2
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	011a      	lsls	r2, r3, #4
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	4413      	add	r3, r2
 8007f52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f56:	623b      	str	r3, [r7, #32]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d112      	bne.n	8007f86 <USB_ActivateEndpoint+0x286>
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	801a      	strh	r2, [r3, #0]
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	801a      	strh	r2, [r3, #0]
 8007f84:	e02f      	b.n	8007fe6 <USB_ActivateEndpoint+0x2e6>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8007f8c:	d813      	bhi.n	8007fb6 <USB_ActivateEndpoint+0x2b6>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	085b      	lsrs	r3, r3, #1
 8007f94:	663b      	str	r3, [r7, #96]	; 0x60
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <USB_ActivateEndpoint+0x2a8>
 8007fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	663b      	str	r3, [r7, #96]	; 0x60
 8007fa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	029b      	lsls	r3, r3, #10
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	e017      	b.n	8007fe6 <USB_ActivateEndpoint+0x2e6>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	095b      	lsrs	r3, r3, #5
 8007fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 031f 	and.w	r3, r3, #31
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <USB_ActivateEndpoint+0x2d0>
 8007fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	663b      	str	r3, [r7, #96]	; 0x60
 8007fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	029b      	lsls	r3, r3, #10
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	83fb      	strh	r3, [r7, #30]
 8007ff4:	8bfb      	ldrh	r3, [r7, #30]
 8007ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01b      	beq.n	8008036 <USB_ActivateEndpoint+0x336>
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008014:	83bb      	strh	r3, [r7, #28]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	441a      	add	r2, r3
 8008020:	8bbb      	ldrh	r3, [r7, #28]
 8008022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800802e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008032:	b29b      	uxth	r3, r3
 8008034:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804c:	837b      	strh	r3, [r7, #26]
 800804e:	8b7b      	ldrh	r3, [r7, #26]
 8008050:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008054:	837b      	strh	r3, [r7, #26]
 8008056:	8b7b      	ldrh	r3, [r7, #26]
 8008058:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800805c:	837b      	strh	r3, [r7, #26]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	441a      	add	r2, r3
 8008068:	8b7b      	ldrh	r3, [r7, #26]
 800806a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800806e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807a:	b29b      	uxth	r3, r3
 800807c:	8013      	strh	r3, [r2, #0]
 800807e:	e1a2      	b.n	80083c6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	b29b      	uxth	r3, r3
 800808e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008096:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	441a      	add	r2, r3
 80080a4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80080a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80080b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	65bb      	str	r3, [r7, #88]	; 0x58
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080cc:	4413      	add	r3, r2
 80080ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	011a      	lsls	r2, r3, #4
 80080d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080de:	657b      	str	r3, [r7, #84]	; 0x54
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	891b      	ldrh	r3, [r3, #8]
 80080e4:	085b      	lsrs	r3, r3, #1
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	653b      	str	r3, [r7, #80]	; 0x50
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008100:	4413      	add	r3, r2
 8008102:	653b      	str	r3, [r7, #80]	; 0x50
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	011a      	lsls	r2, r3, #4
 800810a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800810c:	4413      	add	r3, r2
 800810e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	895b      	ldrh	r3, [r3, #10]
 8008118:	085b      	lsrs	r3, r3, #1
 800811a:	b29b      	uxth	r3, r3
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	b29a      	uxth	r2, r3
 8008120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008122:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f040 8091 	bne.w	8008250 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800813c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800813e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d01b      	beq.n	800817e <USB_ActivateEndpoint+0x47e>
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	441a      	add	r2, r3
 8008168:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800816a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817a:	b29b      	uxth	r3, r3
 800817c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	873b      	strh	r3, [r7, #56]	; 0x38
 800818c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800818e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01b      	beq.n	80081ce <USB_ActivateEndpoint+0x4ce>
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	441a      	add	r2, r3
 80081b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	441a      	add	r2, r3
 8008200:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800820a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800820e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008212:	b29b      	uxth	r3, r3
 8008214:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800822c:	867b      	strh	r3, [r7, #50]	; 0x32
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	441a      	add	r2, r3
 8008238:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800823a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800823e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800824a:	b29b      	uxth	r3, r3
 800824c:	8013      	strh	r3, [r2, #0]
 800824e:	e0ba      	b.n	80083c6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008260:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01d      	beq.n	80082a8 <USB_ActivateEndpoint+0x5a8>
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	b29b      	uxth	r3, r3
 800827a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008282:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	441a      	add	r2, r3
 8008290:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800829c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80082b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80082bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01d      	beq.n	8008300 <USB_ActivateEndpoint+0x600>
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	441a      	add	r2, r3
 80082e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80082ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	78db      	ldrb	r3, [r3, #3]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d024      	beq.n	8008352 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008322:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008326:	f083 0320 	eor.w	r3, r3, #32
 800832a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	441a      	add	r2, r3
 8008338:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800833c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800834c:	b29b      	uxth	r3, r3
 800834e:	8013      	strh	r3, [r2, #0]
 8008350:	e01d      	b.n	800838e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008368:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	441a      	add	r2, r3
 8008376:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800837a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838a:	b29b      	uxth	r3, r3
 800838c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	441a      	add	r2, r3
 80083b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80083b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80083c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	376c      	adds	r7, #108	; 0x6c
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr

080083d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b08d      	sub	sp, #52	; 0x34
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	7b1b      	ldrb	r3, [r3, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 808e 	bne.w	8008504 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	785b      	ldrb	r3, [r3, #1]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d044      	beq.n	800847a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	81bb      	strh	r3, [r7, #12]
 80083fe:	89bb      	ldrh	r3, [r7, #12]
 8008400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01b      	beq.n	8008440 <USB_DeactivateEndpoint+0x6c>
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	b29b      	uxth	r3, r3
 8008416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800841a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841e:	817b      	strh	r3, [r7, #10]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	441a      	add	r2, r3
 800842a:	897b      	ldrh	r3, [r7, #10]
 800842c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008438:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800843c:	b29b      	uxth	r3, r3
 800843e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29b      	uxth	r3, r3
 800844e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008456:	813b      	strh	r3, [r7, #8]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	441a      	add	r2, r3
 8008462:	893b      	ldrh	r3, [r7, #8]
 8008464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800846c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008474:	b29b      	uxth	r3, r3
 8008476:	8013      	strh	r3, [r2, #0]
 8008478:	e192      	b.n	80087a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	827b      	strh	r3, [r7, #18]
 8008488:	8a7b      	ldrh	r3, [r7, #18]
 800848a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d01b      	beq.n	80084ca <USB_DeactivateEndpoint+0xf6>
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a8:	823b      	strh	r3, [r7, #16]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	441a      	add	r2, r3
 80084b4:	8a3b      	ldrh	r3, [r7, #16]
 80084b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e0:	81fb      	strh	r3, [r7, #14]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	441a      	add	r2, r3
 80084ec:	89fb      	ldrh	r3, [r7, #14]
 80084ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fe:	b29b      	uxth	r3, r3
 8008500:	8013      	strh	r3, [r2, #0]
 8008502:	e14d      	b.n	80087a0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	785b      	ldrb	r3, [r3, #1]
 8008508:	2b00      	cmp	r3, #0
 800850a:	f040 80a5 	bne.w	8008658 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	843b      	strh	r3, [r7, #32]
 800851c:	8c3b      	ldrh	r3, [r7, #32]
 800851e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01b      	beq.n	800855e <USB_DeactivateEndpoint+0x18a>
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	b29b      	uxth	r3, r3
 8008534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853c:	83fb      	strh	r3, [r7, #30]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	441a      	add	r2, r3
 8008548:	8bfb      	ldrh	r3, [r7, #30]
 800854a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855a:	b29b      	uxth	r3, r3
 800855c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	83bb      	strh	r3, [r7, #28]
 800856c:	8bbb      	ldrh	r3, [r7, #28]
 800856e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008572:	2b00      	cmp	r3, #0
 8008574:	d01b      	beq.n	80085ae <USB_DeactivateEndpoint+0x1da>
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858c:	837b      	strh	r3, [r7, #26]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	441a      	add	r2, r3
 8008598:	8b7b      	ldrh	r3, [r7, #26]
 800859a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800859e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c4:	833b      	strh	r3, [r7, #24]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	441a      	add	r2, r3
 80085d0:	8b3b      	ldrh	r3, [r7, #24]
 80085d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fc:	82fb      	strh	r3, [r7, #22]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	441a      	add	r2, r3
 8008608:	8afb      	ldrh	r3, [r7, #22]
 800860a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800860e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861a:	b29b      	uxth	r3, r3
 800861c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008634:	82bb      	strh	r3, [r7, #20]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	441a      	add	r2, r3
 8008640:	8abb      	ldrh	r3, [r7, #20]
 8008642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800864a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008652:	b29b      	uxth	r3, r3
 8008654:	8013      	strh	r3, [r2, #0]
 8008656:	e0a3      	b.n	80087a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008666:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01b      	beq.n	80086a8 <USB_DeactivateEndpoint+0x2d4>
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	b29b      	uxth	r3, r3
 800867e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008686:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	441a      	add	r2, r3
 8008692:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800869c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80086b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80086b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01b      	beq.n	80086f8 <USB_DeactivateEndpoint+0x324>
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	441a      	add	r2, r3
 80086e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	b29b      	uxth	r3, r3
 8008706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800870a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	441a      	add	r2, r3
 800871a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800871c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872c:	b29b      	uxth	r3, r3
 800872e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	b29b      	uxth	r3, r3
 800873e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008746:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	441a      	add	r2, r3
 8008752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800875c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008764:	b29b      	uxth	r3, r3
 8008766:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800877a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	441a      	add	r2, r3
 800878a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800878c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879c:	b29b      	uxth	r3, r3
 800879e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3734      	adds	r7, #52	; 0x34
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b0cc      	sub	sp, #304	; 0x130
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ba:	6018      	str	r0, [r3, #0]
 80087bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	f041 817d 	bne.w	8009ad2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80087d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d908      	bls.n	8008806 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80087f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008804:	e007      	b.n	8008816 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800881a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	7b1b      	ldrb	r3, [r3, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d152      	bne.n	80088cc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6959      	ldr	r1, [r3, #20]
 8008832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	88da      	ldrh	r2, [r3, #6]
 800883e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008842:	b29b      	uxth	r3, r3
 8008844:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008848:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800884c:	6800      	ldr	r0, [r0, #0]
 800884e:	f001 ff23 	bl	800a698 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008856:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800885a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800885e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008862:	6812      	ldr	r2, [r2, #0]
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008874:	b29b      	uxth	r3, r3
 8008876:	4619      	mov	r1, r3
 8008878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008880:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008884:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	440a      	add	r2, r1
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	011a      	lsls	r2, r3, #4
 800889c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4413      	add	r3, r2
 80088a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80088ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	801a      	strh	r2, [r3, #0]
 80088c8:	f001 b8b5 	b.w	8009a36 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80088cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	78db      	ldrb	r3, [r3, #3]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	f040 84c6 	bne.w	800926a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80088de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6a1a      	ldr	r2, [r3, #32]
 80088ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	f240 8443 	bls.w	8009182 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80088fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008900:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008922:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	441a      	add	r2, r3
 8008940:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800894c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008954:	b29b      	uxth	r3, r3
 8008956:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800895c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6a1a      	ldr	r2, [r3, #32]
 8008964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008968:	1ad2      	subs	r2, r2, r3
 800896a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800896e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800897a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 823e 	beq.w	8008e1a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800899e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80089a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089aa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089ae:	6812      	ldr	r2, [r2, #0]
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	785b      	ldrb	r3, [r3, #1]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f040 809a 	bne.w	8008af8 <USB_EPStartXfer+0x34c>
 80089c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089d0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089d4:	6812      	ldr	r2, [r2, #0]
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	4619      	mov	r1, r3
 80089ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089f6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80089fa:	6812      	ldr	r2, [r2, #0]
 80089fc:	440a      	add	r2, r1
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	011a      	lsls	r2, r3, #4
 8008a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d122      	bne.n	8008a76 <USB_EPStartXfer+0x2ca>
 8008a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	801a      	strh	r2, [r3, #0]
 8008a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	801a      	strh	r2, [r3, #0]
 8008a74:	e079      	b.n	8008b6a <USB_EPStartXfer+0x3be>
 8008a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8008a7c:	d81b      	bhi.n	8008ab6 <USB_EPStartXfer+0x30a>
 8008a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a82:	085b      	lsrs	r3, r3, #1
 8008a84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <USB_EPStartXfer+0x2f2>
 8008a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a98:	3301      	adds	r3, #1
 8008a9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	029b      	lsls	r3, r3, #10
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	801a      	strh	r2, [r3, #0]
 8008ab4:	e059      	b.n	8008b6a <USB_EPStartXfer+0x3be>
 8008ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aba:	095b      	lsrs	r3, r3, #5
 8008abc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac4:	f003 031f 	and.w	r3, r3, #31
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d104      	bne.n	8008ad6 <USB_EPStartXfer+0x32a>
 8008acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	029b      	lsls	r3, r3, #10
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	801a      	strh	r2, [r3, #0]
 8008af6:	e038      	b.n	8008b6a <USB_EPStartXfer+0x3be>
 8008af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	785b      	ldrb	r3, [r3, #1]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d130      	bne.n	8008b6a <USB_EPStartXfer+0x3be>
 8008b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	4619      	mov	r1, r3
 8008b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008b22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b26:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008b2a:	6812      	ldr	r2, [r2, #0]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	011a      	lsls	r2, r3, #4
 8008b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b42:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	895b      	ldrh	r3, [r3, #10]
 8008b76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6959      	ldr	r1, [r3, #20]
 8008b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008b94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008b98:	6800      	ldr	r0, [r0, #0]
 8008b9a:	f001 fd7d 	bl	800a698 <USB_WritePMA>
            ep->xfer_buff += len;
 8008b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695a      	ldr	r2, [r3, #20]
 8008baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bae:	441a      	add	r2, r3
 8008bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6a1a      	ldr	r2, [r3, #32]
 8008bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d90f      	bls.n	8008bf8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6a1a      	ldr	r2, [r3, #32]
 8008be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008be8:	1ad2      	subs	r2, r2, r3
 8008bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	621a      	str	r2, [r3, #32]
 8008bf6:	e00e      	b.n	8008c16 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2200      	movs	r2, #0
 8008c14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	785b      	ldrb	r3, [r3, #1]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f040 809a 	bne.w	8008d5c <USB_EPStartXfer+0x5b0>
 8008c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c34:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008c38:	6812      	ldr	r2, [r2, #0]
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c52:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c5a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	440a      	add	r2, r1
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	011a      	lsls	r2, r3, #4
 8008c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c76:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d122      	bne.n	8008cda <USB_EPStartXfer+0x52e>
 8008c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	801a      	strh	r2, [r3, #0]
 8008cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	801a      	strh	r2, [r3, #0]
 8008cd8:	e083      	b.n	8008de2 <USB_EPStartXfer+0x636>
 8008cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cde:	2b3e      	cmp	r3, #62	; 0x3e
 8008ce0:	d81b      	bhi.n	8008d1a <USB_EPStartXfer+0x56e>
 8008ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce6:	085b      	lsrs	r3, r3, #1
 8008ce8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <USB_EPStartXfer+0x556>
 8008cf8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	029b      	lsls	r3, r3, #10
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	801a      	strh	r2, [r3, #0]
 8008d18:	e063      	b.n	8008de2 <USB_EPStartXfer+0x636>
 8008d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1e:	095b      	lsrs	r3, r3, #5
 8008d20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d28:	f003 031f 	and.w	r3, r3, #31
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d104      	bne.n	8008d3a <USB_EPStartXfer+0x58e>
 8008d30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d34:	3b01      	subs	r3, #1
 8008d36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	029b      	lsls	r3, r3, #10
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	801a      	strh	r2, [r3, #0]
 8008d5a:	e042      	b.n	8008de2 <USB_EPStartXfer+0x636>
 8008d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	785b      	ldrb	r3, [r3, #1]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d13a      	bne.n	8008de2 <USB_EPStartXfer+0x636>
 8008d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d78:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d7c:	6812      	ldr	r2, [r2, #0]
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	4619      	mov	r1, r3
 8008d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d9e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008da2:	6812      	ldr	r2, [r2, #0]
 8008da4:	440a      	add	r2, r1
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	011a      	lsls	r2, r3, #4
 8008db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	891b      	ldrh	r3, [r3, #8]
 8008dee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6959      	ldr	r1, [r3, #20]
 8008dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e08:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008e0c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008e10:	6800      	ldr	r0, [r0, #0]
 8008e12:	f001 fc41 	bl	800a698 <USB_WritePMA>
 8008e16:	f000 be0e 	b.w	8009a36 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d16d      	bne.n	8008f06 <USB_EPStartXfer+0x75a>
 8008e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4a:	4413      	add	r3, r2
 8008e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	011a      	lsls	r2, r3, #4
 8008e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e5e:	4413      	add	r3, r2
 8008e60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e64:	647b      	str	r3, [r7, #68]	; 0x44
 8008e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d112      	bne.n	8008e94 <USB_EPStartXfer+0x6e8>
 8008e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e7c:	801a      	strh	r2, [r3, #0]
 8008e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e90:	801a      	strh	r2, [r3, #0]
 8008e92:	e063      	b.n	8008f5c <USB_EPStartXfer+0x7b0>
 8008e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e98:	2b3e      	cmp	r3, #62	; 0x3e
 8008e9a:	d817      	bhi.n	8008ecc <USB_EPStartXfer+0x720>
 8008e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea0:	085b      	lsrs	r3, r3, #1
 8008ea2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d004      	beq.n	8008ebc <USB_EPStartXfer+0x710>
 8008eb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ebc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	029b      	lsls	r3, r3, #10
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec8:	801a      	strh	r2, [r3, #0]
 8008eca:	e047      	b.n	8008f5c <USB_EPStartXfer+0x7b0>
 8008ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ed0:	095b      	lsrs	r3, r3, #5
 8008ed2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eda:	f003 031f 	and.w	r3, r3, #31
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d104      	bne.n	8008eec <USB_EPStartXfer+0x740>
 8008ee2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008eec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	029b      	lsls	r3, r3, #10
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f02:	801a      	strh	r2, [r3, #0]
 8008f04:	e02a      	b.n	8008f5c <USB_EPStartXfer+0x7b0>
 8008f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	785b      	ldrb	r3, [r3, #1]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d122      	bne.n	8008f5c <USB_EPStartXfer+0x7b0>
 8008f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	653b      	str	r3, [r7, #80]	; 0x50
 8008f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f36:	4413      	add	r3, r2
 8008f38:	653b      	str	r3, [r7, #80]	; 0x50
 8008f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	011a      	lsls	r2, r3, #4
 8008f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	891b      	ldrh	r3, [r3, #8]
 8008f68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6959      	ldr	r1, [r3, #20]
 8008f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f82:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008f86:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008f8a:	6800      	ldr	r0, [r0, #0]
 8008f8c:	f001 fb84 	bl	800a698 <USB_WritePMA>
            ep->xfer_buff += len;
 8008f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	695a      	ldr	r2, [r3, #20]
 8008f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa0:	441a      	add	r2, r3
 8008fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6a1a      	ldr	r2, [r3, #32]
 8008fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d90f      	bls.n	8008fea <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8008fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6a1a      	ldr	r2, [r3, #32]
 8008fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fda:	1ad2      	subs	r2, r2, r3
 8008fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	621a      	str	r2, [r3, #32]
 8008fe8:	e00e      	b.n	8009008 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8008fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2200      	movs	r2, #0
 8009006:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800900c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	643b      	str	r3, [r7, #64]	; 0x40
 8009014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	785b      	ldrb	r3, [r3, #1]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d16d      	bne.n	8009100 <USB_EPStartXfer+0x954>
 8009024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009028:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009034:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800903e:	b29b      	uxth	r3, r3
 8009040:	461a      	mov	r2, r3
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	4413      	add	r3, r2
 8009046:	63bb      	str	r3, [r7, #56]	; 0x38
 8009048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800904c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	011a      	lsls	r2, r3, #4
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	4413      	add	r3, r2
 800905a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800905e:	637b      	str	r3, [r7, #52]	; 0x34
 8009060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d112      	bne.n	800908e <USB_EPStartXfer+0x8e2>
 8009068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906a:	881b      	ldrh	r3, [r3, #0]
 800906c:	b29b      	uxth	r3, r3
 800906e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009072:	b29a      	uxth	r2, r3
 8009074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009076:	801a      	strh	r2, [r3, #0]
 8009078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009086:	b29a      	uxth	r2, r3
 8009088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908a:	801a      	strh	r2, [r3, #0]
 800908c:	e05d      	b.n	800914a <USB_EPStartXfer+0x99e>
 800908e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009092:	2b3e      	cmp	r3, #62	; 0x3e
 8009094:	d817      	bhi.n	80090c6 <USB_EPStartXfer+0x91a>
 8009096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d004      	beq.n	80090b6 <USB_EPStartXfer+0x90a>
 80090ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090b0:	3301      	adds	r3, #1
 80090b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	029b      	lsls	r3, r3, #10
 80090be:	b29a      	uxth	r2, r3
 80090c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c2:	801a      	strh	r2, [r3, #0]
 80090c4:	e041      	b.n	800914a <USB_EPStartXfer+0x99e>
 80090c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d4:	f003 031f 	and.w	r3, r3, #31
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d104      	bne.n	80090e6 <USB_EPStartXfer+0x93a>
 80090dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090e0:	3b01      	subs	r3, #1
 80090e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	029b      	lsls	r3, r3, #10
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fc:	801a      	strh	r2, [r3, #0]
 80090fe:	e024      	b.n	800914a <USB_EPStartXfer+0x99e>
 8009100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	785b      	ldrb	r3, [r3, #1]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d11c      	bne.n	800914a <USB_EPStartXfer+0x99e>
 8009110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800911e:	b29b      	uxth	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009124:	4413      	add	r3, r2
 8009126:	643b      	str	r3, [r7, #64]	; 0x40
 8009128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800912c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	011a      	lsls	r2, r3, #4
 8009136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009138:	4413      	add	r3, r2
 800913a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009144:	b29a      	uxth	r2, r3
 8009146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009148:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800914a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	895b      	ldrh	r3, [r3, #10]
 8009156:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800915a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800915e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6959      	ldr	r1, [r3, #20]
 8009166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800916a:	b29b      	uxth	r3, r3
 800916c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009170:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009174:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009178:	6800      	ldr	r0, [r0, #0]
 800917a:	f001 fa8d 	bl	800a698 <USB_WritePMA>
 800917e:	f000 bc5a 	b.w	8009a36 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009196:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80091b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80091bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	441a      	add	r2, r3
 80091d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80091da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009208:	b29b      	uxth	r3, r3
 800920a:	461a      	mov	r2, r3
 800920c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800920e:	4413      	add	r3, r2
 8009210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	011a      	lsls	r2, r3, #4
 8009220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009222:	4413      	add	r3, r2
 8009224:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009228:	65bb      	str	r3, [r7, #88]	; 0x58
 800922a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800922e:	b29a      	uxth	r2, r3
 8009230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009232:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	891b      	ldrh	r3, [r3, #8]
 8009240:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6959      	ldr	r1, [r3, #20]
 8009250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009254:	b29b      	uxth	r3, r3
 8009256:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800925a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800925e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009262:	6800      	ldr	r0, [r0, #0]
 8009264:	f001 fa18 	bl	800a698 <USB_WritePMA>
 8009268:	e3e5      	b.n	8009a36 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800926a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800926e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	b29b      	uxth	r3, r3
 8009288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800928c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009290:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009298:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	441a      	add	r2, r3
 80092ae:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80092b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80092be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80092c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6a1a      	ldr	r2, [r3, #32]
 80092d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d6:	1ad2      	subs	r2, r2, r3
 80092d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80092e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	b29b      	uxth	r3, r3
 8009302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 81bc 	beq.w	8009684 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800930c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800931a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d16d      	bne.n	8009406 <USB_EPStartXfer+0xc5a>
 800932a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800932e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	67bb      	str	r3, [r7, #120]	; 0x78
 8009336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800933a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009344:	b29b      	uxth	r3, r3
 8009346:	461a      	mov	r2, r3
 8009348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800934a:	4413      	add	r3, r2
 800934c:	67bb      	str	r3, [r7, #120]	; 0x78
 800934e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	011a      	lsls	r2, r3, #4
 800935c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800935e:	4413      	add	r3, r2
 8009360:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009364:	677b      	str	r3, [r7, #116]	; 0x74
 8009366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d112      	bne.n	8009394 <USB_EPStartXfer+0xbe8>
 800936e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009370:	881b      	ldrh	r3, [r3, #0]
 8009372:	b29b      	uxth	r3, r3
 8009374:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009378:	b29a      	uxth	r2, r3
 800937a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800937c:	801a      	strh	r2, [r3, #0]
 800937e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	b29b      	uxth	r3, r3
 8009384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800938c:	b29a      	uxth	r2, r3
 800938e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009390:	801a      	strh	r2, [r3, #0]
 8009392:	e060      	b.n	8009456 <USB_EPStartXfer+0xcaa>
 8009394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009398:	2b3e      	cmp	r3, #62	; 0x3e
 800939a:	d817      	bhi.n	80093cc <USB_EPStartXfer+0xc20>
 800939c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a0:	085b      	lsrs	r3, r3, #1
 80093a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d004      	beq.n	80093bc <USB_EPStartXfer+0xc10>
 80093b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093b6:	3301      	adds	r3, #1
 80093b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	029b      	lsls	r3, r3, #10
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093c8:	801a      	strh	r2, [r3, #0]
 80093ca:	e044      	b.n	8009456 <USB_EPStartXfer+0xcaa>
 80093cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d0:	095b      	lsrs	r3, r3, #5
 80093d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093da:	f003 031f 	and.w	r3, r3, #31
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d104      	bne.n	80093ec <USB_EPStartXfer+0xc40>
 80093e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093e6:	3b01      	subs	r3, #1
 80093e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	029b      	lsls	r3, r3, #10
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fe:	b29a      	uxth	r2, r3
 8009400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009402:	801a      	strh	r2, [r3, #0]
 8009404:	e027      	b.n	8009456 <USB_EPStartXfer+0xcaa>
 8009406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	785b      	ldrb	r3, [r3, #1]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d11f      	bne.n	8009456 <USB_EPStartXfer+0xcaa>
 8009416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800941a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009424:	b29b      	uxth	r3, r3
 8009426:	461a      	mov	r2, r3
 8009428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800942c:	4413      	add	r3, r2
 800942e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	011a      	lsls	r2, r3, #4
 8009440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009444:	4413      	add	r3, r2
 8009446:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800944a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800944c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009450:	b29a      	uxth	r2, r3
 8009452:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009454:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800945a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	895b      	ldrh	r3, [r3, #10]
 8009462:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6959      	ldr	r1, [r3, #20]
 8009472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009476:	b29b      	uxth	r3, r3
 8009478:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800947c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009480:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009484:	6800      	ldr	r0, [r0, #0]
 8009486:	f001 f907 	bl	800a698 <USB_WritePMA>
          ep->xfer_buff += len;
 800948a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	695a      	ldr	r2, [r3, #20]
 8009496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800949a:	441a      	add	r2, r3
 800949c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80094a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6a1a      	ldr	r2, [r3, #32]
 80094b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d90f      	bls.n	80094e4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80094c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6a1a      	ldr	r2, [r3, #32]
 80094d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d4:	1ad2      	subs	r2, r2, r3
 80094d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	621a      	str	r2, [r3, #32]
 80094e2:	e00e      	b.n	8009502 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80094e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80094f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2200      	movs	r2, #0
 8009500:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 8295 	beq.w	8009a36 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800950c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	785b      	ldrb	r3, [r3, #1]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d16d      	bne.n	80095f8 <USB_EPStartXfer+0xe4c>
 800951c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009520:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	66bb      	str	r3, [r7, #104]	; 0x68
 8009528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800952c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009536:	b29b      	uxth	r3, r3
 8009538:	461a      	mov	r2, r3
 800953a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800953c:	4413      	add	r3, r2
 800953e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009544:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	011a      	lsls	r2, r3, #4
 800954e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009550:	4413      	add	r3, r2
 8009552:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009556:	667b      	str	r3, [r7, #100]	; 0x64
 8009558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d112      	bne.n	8009586 <USB_EPStartXfer+0xdda>
 8009560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	b29b      	uxth	r3, r3
 8009566:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800956a:	b29a      	uxth	r2, r3
 800956c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800957a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800957e:	b29a      	uxth	r2, r3
 8009580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	e063      	b.n	800964e <USB_EPStartXfer+0xea2>
 8009586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800958a:	2b3e      	cmp	r3, #62	; 0x3e
 800958c:	d817      	bhi.n	80095be <USB_EPStartXfer+0xe12>
 800958e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009592:	085b      	lsrs	r3, r3, #1
 8009594:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <USB_EPStartXfer+0xe02>
 80095a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a8:	3301      	adds	r3, #1
 80095aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	029b      	lsls	r3, r3, #10
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ba:	801a      	strh	r2, [r3, #0]
 80095bc:	e047      	b.n	800964e <USB_EPStartXfer+0xea2>
 80095be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c2:	095b      	lsrs	r3, r3, #5
 80095c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d104      	bne.n	80095de <USB_EPStartXfer+0xe32>
 80095d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d8:	3b01      	subs	r3, #1
 80095da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	029b      	lsls	r3, r3, #10
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095f4:	801a      	strh	r2, [r3, #0]
 80095f6:	e02a      	b.n	800964e <USB_EPStartXfer+0xea2>
 80095f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	785b      	ldrb	r3, [r3, #1]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d122      	bne.n	800964e <USB_EPStartXfer+0xea2>
 8009608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800960c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	673b      	str	r3, [r7, #112]	; 0x70
 8009614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009622:	b29b      	uxth	r3, r3
 8009624:	461a      	mov	r2, r3
 8009626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009628:	4413      	add	r3, r2
 800962a:	673b      	str	r3, [r7, #112]	; 0x70
 800962c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	011a      	lsls	r2, r3, #4
 800963a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800963c:	4413      	add	r3, r2
 800963e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009642:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009648:	b29a      	uxth	r2, r3
 800964a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800964c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800964e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	891b      	ldrh	r3, [r3, #8]
 800965a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800965e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6959      	ldr	r1, [r3, #20]
 800966a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800966e:	b29b      	uxth	r3, r3
 8009670:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009674:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009678:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800967c:	6800      	ldr	r0, [r0, #0]
 800967e:	f001 f80b 	bl	800a698 <USB_WritePMA>
 8009682:	e1d8      	b.n	8009a36 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	785b      	ldrb	r3, [r3, #1]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d178      	bne.n	8009786 <USB_EPStartXfer+0xfda>
 8009694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	461a      	mov	r2, r3
 80096b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096b8:	4413      	add	r3, r2
 80096ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	011a      	lsls	r2, r3, #4
 80096cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096d0:	4413      	add	r3, r2
 80096d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d116      	bne.n	8009710 <USB_EPStartXfer+0xf64>
 80096e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096f4:	801a      	strh	r2, [r3, #0]
 80096f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009706:	b29a      	uxth	r2, r3
 8009708:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800970c:	801a      	strh	r2, [r3, #0]
 800970e:	e06b      	b.n	80097e8 <USB_EPStartXfer+0x103c>
 8009710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009714:	2b3e      	cmp	r3, #62	; 0x3e
 8009716:	d818      	bhi.n	800974a <USB_EPStartXfer+0xf9e>
 8009718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800971c:	085b      	lsrs	r3, r3, #1
 800971e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b00      	cmp	r3, #0
 800972c:	d004      	beq.n	8009738 <USB_EPStartXfer+0xf8c>
 800972e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009732:	3301      	adds	r3, #1
 8009734:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009738:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800973c:	b29b      	uxth	r3, r3
 800973e:	029b      	lsls	r3, r3, #10
 8009740:	b29a      	uxth	r2, r3
 8009742:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009746:	801a      	strh	r2, [r3, #0]
 8009748:	e04e      	b.n	80097e8 <USB_EPStartXfer+0x103c>
 800974a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800974e:	095b      	lsrs	r3, r3, #5
 8009750:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009758:	f003 031f 	and.w	r3, r3, #31
 800975c:	2b00      	cmp	r3, #0
 800975e:	d104      	bne.n	800976a <USB_EPStartXfer+0xfbe>
 8009760:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009764:	3b01      	subs	r3, #1
 8009766:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800976a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800976e:	b29b      	uxth	r3, r3
 8009770:	029b      	lsls	r3, r3, #10
 8009772:	b29b      	uxth	r3, r3
 8009774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800977c:	b29a      	uxth	r2, r3
 800977e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009782:	801a      	strh	r2, [r3, #0]
 8009784:	e030      	b.n	80097e8 <USB_EPStartXfer+0x103c>
 8009786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800978a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d128      	bne.n	80097e8 <USB_EPStartXfer+0x103c>
 8009796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800979a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	461a      	mov	r2, r3
 80097b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097ba:	4413      	add	r3, r2
 80097bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	011a      	lsls	r2, r3, #4
 80097ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097d2:	4413      	add	r3, r2
 80097d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80097e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	891b      	ldrh	r3, [r3, #8]
 80097f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6959      	ldr	r1, [r3, #20]
 8009804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009808:	b29b      	uxth	r3, r3
 800980a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800980e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009812:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009816:	6800      	ldr	r0, [r0, #0]
 8009818:	f000 ff3e 	bl	800a698 <USB_WritePMA>
          ep->xfer_buff += len;
 800981c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	695a      	ldr	r2, [r3, #20]
 8009828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800982c:	441a      	add	r2, r3
 800982e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800983a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800983e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6a1a      	ldr	r2, [r3, #32]
 8009846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800984a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	429a      	cmp	r2, r3
 8009854:	d90f      	bls.n	8009876 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800985a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6a1a      	ldr	r2, [r3, #32]
 8009862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009866:	1ad2      	subs	r2, r2, r3
 8009868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800986c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	621a      	str	r2, [r3, #32]
 8009874:	e00e      	b.n	8009894 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800987a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800988a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2200      	movs	r2, #0
 8009892:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 80cc 	beq.w	8009a36 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800989e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	785b      	ldrb	r3, [r3, #1]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d178      	bne.n	80099ae <USB_EPStartXfer+0x1202>
 80098bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098d8:	b29b      	uxth	r3, r3
 80098da:	461a      	mov	r2, r3
 80098dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098e0:	4413      	add	r3, r2
 80098e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	011a      	lsls	r2, r3, #4
 80098f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098f8:	4413      	add	r3, r2
 80098fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d116      	bne.n	8009938 <USB_EPStartXfer+0x118c>
 800990a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	b29b      	uxth	r3, r3
 8009912:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009916:	b29a      	uxth	r2, r3
 8009918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800991c:	801a      	strh	r2, [r3, #0]
 800991e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	b29b      	uxth	r3, r3
 8009926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800992a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800992e:	b29a      	uxth	r2, r3
 8009930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009934:	801a      	strh	r2, [r3, #0]
 8009936:	e064      	b.n	8009a02 <USB_EPStartXfer+0x1256>
 8009938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800993c:	2b3e      	cmp	r3, #62	; 0x3e
 800993e:	d818      	bhi.n	8009972 <USB_EPStartXfer+0x11c6>
 8009940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009944:	085b      	lsrs	r3, r3, #1
 8009946:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800994a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d004      	beq.n	8009960 <USB_EPStartXfer+0x11b4>
 8009956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800995a:	3301      	adds	r3, #1
 800995c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009964:	b29b      	uxth	r3, r3
 8009966:	029b      	lsls	r3, r3, #10
 8009968:	b29a      	uxth	r2, r3
 800996a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800996e:	801a      	strh	r2, [r3, #0]
 8009970:	e047      	b.n	8009a02 <USB_EPStartXfer+0x1256>
 8009972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009976:	095b      	lsrs	r3, r3, #5
 8009978:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800997c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009980:	f003 031f 	and.w	r3, r3, #31
 8009984:	2b00      	cmp	r3, #0
 8009986:	d104      	bne.n	8009992 <USB_EPStartXfer+0x11e6>
 8009988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800998c:	3b01      	subs	r3, #1
 800998e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009996:	b29b      	uxth	r3, r3
 8009998:	029b      	lsls	r3, r3, #10
 800999a:	b29b      	uxth	r3, r3
 800999c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	e029      	b.n	8009a02 <USB_EPStartXfer+0x1256>
 80099ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	785b      	ldrb	r3, [r3, #1]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d121      	bne.n	8009a02 <USB_EPStartXfer+0x1256>
 80099be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	461a      	mov	r2, r3
 80099d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099d4:	4413      	add	r3, r2
 80099d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	011a      	lsls	r2, r3, #4
 80099e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099ec:	4413      	add	r3, r2
 80099ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	895b      	ldrh	r3, [r3, #10]
 8009a0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6959      	ldr	r1, [r3, #20]
 8009a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009a2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009a30:	6800      	ldr	r0, [r0, #0]
 8009a32:	f000 fe31 	bl	800a698 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a58:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a64:	8013      	strh	r3, [r2, #0]
 8009a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a6a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009a6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a72:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a76:	8812      	ldrh	r2, [r2, #0]
 8009a78:	f082 0210 	eor.w	r2, r2, #16
 8009a7c:	801a      	strh	r2, [r3, #0]
 8009a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a82:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009a86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a8a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a8e:	8812      	ldrh	r2, [r2, #0]
 8009a90:	f082 0220 	eor.w	r2, r2, #32
 8009a94:	801a      	strh	r2, [r3, #0]
 8009a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	441a      	add	r2, r3
 8009ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ab4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	8013      	strh	r3, [r2, #0]
 8009ace:	f000 bc9f 	b.w	800a410 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	7b1b      	ldrb	r3, [r3, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f040 80ae 	bne.w	8009c40 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	699a      	ldr	r2, [r3, #24]
 8009af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d917      	bls.n	8009b30 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699a      	ldr	r2, [r3, #24]
 8009b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b20:	1ad2      	subs	r2, r2, r3
 8009b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	619a      	str	r2, [r3, #24]
 8009b2e:	e00e      	b.n	8009b4e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b72:	4413      	add	r3, r2
 8009b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	011a      	lsls	r2, r3, #4
 8009b86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d116      	bne.n	8009bca <USB_EPStartXfer+0x141e>
 8009b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bae:	801a      	strh	r2, [r3, #0]
 8009bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bc6:	801a      	strh	r2, [r3, #0]
 8009bc8:	e3e8      	b.n	800a39c <USB_EPStartXfer+0x1bf0>
 8009bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bce:	2b3e      	cmp	r3, #62	; 0x3e
 8009bd0:	d818      	bhi.n	8009c04 <USB_EPStartXfer+0x1458>
 8009bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bd6:	085b      	lsrs	r3, r3, #1
 8009bd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d004      	beq.n	8009bf2 <USB_EPStartXfer+0x1446>
 8009be8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bec:	3301      	adds	r3, #1
 8009bee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	029b      	lsls	r3, r3, #10
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c00:	801a      	strh	r2, [r3, #0]
 8009c02:	e3cb      	b.n	800a39c <USB_EPStartXfer+0x1bf0>
 8009c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c08:	095b      	lsrs	r3, r3, #5
 8009c0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c12:	f003 031f 	and.w	r3, r3, #31
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d104      	bne.n	8009c24 <USB_EPStartXfer+0x1478>
 8009c1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	029b      	lsls	r3, r3, #10
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c3c:	801a      	strh	r2, [r3, #0]
 8009c3e:	e3ad      	b.n	800a39c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	78db      	ldrb	r3, [r3, #3]
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	f040 8200 	bne.w	800a052 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	785b      	ldrb	r3, [r3, #1]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f040 8091 	bne.w	8009d86 <USB_EPStartXfer+0x15da>
 8009c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	461a      	mov	r2, r3
 8009c84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c88:	4413      	add	r3, r2
 8009c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	011a      	lsls	r2, r3, #4
 8009c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d116      	bne.n	8009ce8 <USB_EPStartXfer+0x153c>
 8009cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ccc:	801a      	strh	r2, [r3, #0]
 8009cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ce4:	801a      	strh	r2, [r3, #0]
 8009ce6:	e083      	b.n	8009df0 <USB_EPStartXfer+0x1644>
 8009ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	2b3e      	cmp	r3, #62	; 0x3e
 8009cf6:	d820      	bhi.n	8009d3a <USB_EPStartXfer+0x158e>
 8009cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	085b      	lsrs	r3, r3, #1
 8009d06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <USB_EPStartXfer+0x157c>
 8009d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d22:	3301      	adds	r3, #1
 8009d24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	029b      	lsls	r3, r3, #10
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d36:	801a      	strh	r2, [r3, #0]
 8009d38:	e05a      	b.n	8009df0 <USB_EPStartXfer+0x1644>
 8009d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	095b      	lsrs	r3, r3, #5
 8009d48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	f003 031f 	and.w	r3, r3, #31
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d104      	bne.n	8009d6a <USB_EPStartXfer+0x15be>
 8009d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d64:	3b01      	subs	r3, #1
 8009d66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	029b      	lsls	r3, r3, #10
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d82:	801a      	strh	r2, [r3, #0]
 8009d84:	e034      	b.n	8009df0 <USB_EPStartXfer+0x1644>
 8009d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	785b      	ldrb	r3, [r3, #1]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d12c      	bne.n	8009df0 <USB_EPStartXfer+0x1644>
 8009d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	461a      	mov	r2, r3
 8009db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dba:	4413      	add	r3, r2
 8009dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	011a      	lsls	r2, r3, #4
 8009dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009dee:	801a      	strh	r2, [r3, #0]
 8009df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	785b      	ldrb	r3, [r3, #1]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f040 8091 	bne.w	8009f32 <USB_EPStartXfer+0x1786>
 8009e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e34:	4413      	add	r3, r2
 8009e36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	011a      	lsls	r2, r3, #4
 8009e48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d116      	bne.n	8009e94 <USB_EPStartXfer+0x16e8>
 8009e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e78:	801a      	strh	r2, [r3, #0]
 8009e7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e90:	801a      	strh	r2, [r3, #0]
 8009e92:	e07c      	b.n	8009f8e <USB_EPStartXfer+0x17e2>
 8009e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8009ea2:	d820      	bhi.n	8009ee6 <USB_EPStartXfer+0x173a>
 8009ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	085b      	lsrs	r3, r3, #1
 8009eb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d004      	beq.n	8009ed4 <USB_EPStartXfer+0x1728>
 8009eca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ece:	3301      	adds	r3, #1
 8009ed0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	029b      	lsls	r3, r3, #10
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ee2:	801a      	strh	r2, [r3, #0]
 8009ee4:	e053      	b.n	8009f8e <USB_EPStartXfer+0x17e2>
 8009ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	095b      	lsrs	r3, r3, #5
 8009ef4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	f003 031f 	and.w	r3, r3, #31
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d104      	bne.n	8009f16 <USB_EPStartXfer+0x176a>
 8009f0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f10:	3b01      	subs	r3, #1
 8009f12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	029b      	lsls	r3, r3, #10
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f2e:	801a      	strh	r2, [r3, #0]
 8009f30:	e02d      	b.n	8009f8e <USB_EPStartXfer+0x17e2>
 8009f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d125      	bne.n	8009f8e <USB_EPStartXfer+0x17e2>
 8009f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	461a      	mov	r2, r3
 8009f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f58:	4413      	add	r3, r2
 8009f5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	011a      	lsls	r2, r3, #4
 8009f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f70:	4413      	add	r3, r2
 8009f72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f8c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 81fe 	beq.w	800a39c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fc0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <USB_EPStartXfer+0x182c>
 8009fcc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10d      	bne.n	8009ff4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fd8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f040 81db 	bne.w	800a39c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fe6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f040 81d4 	bne.w	800a39c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ff8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a01e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a02c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	441a      	add	r2, r3
 800a038:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a03c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a048:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	8013      	strh	r3, [r2, #0]
 800a050:	e1a4      	b.n	800a39c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	78db      	ldrb	r3, [r3, #3]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	f040 819a 	bne.w	800a398 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	699a      	ldr	r2, [r3, #24]
 800a070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d917      	bls.n	800a0b0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	699a      	ldr	r2, [r3, #24]
 800a09c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0a0:	1ad2      	subs	r2, r2, r3
 800a0a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	619a      	str	r2, [r3, #24]
 800a0ae:	e00e      	b.n	800a0ce <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a0b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a0c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a0ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	785b      	ldrb	r3, [r3, #1]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d178      	bne.n	800a1d0 <USB_EPStartXfer+0x1a24>
 800a0de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a102:	4413      	add	r3, r2
 800a104:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a10c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	011a      	lsls	r2, r3, #4
 800a116:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a11a:	4413      	add	r3, r2
 800a11c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a120:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d116      	bne.n	800a15a <USB_EPStartXfer+0x19ae>
 800a12c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	b29b      	uxth	r3, r3
 800a134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a138:	b29a      	uxth	r2, r3
 800a13a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a13e:	801a      	strh	r2, [r3, #0]
 800a140:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	b29b      	uxth	r3, r3
 800a148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a14c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a150:	b29a      	uxth	r2, r3
 800a152:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a156:	801a      	strh	r2, [r3, #0]
 800a158:	e06b      	b.n	800a232 <USB_EPStartXfer+0x1a86>
 800a15a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a15e:	2b3e      	cmp	r3, #62	; 0x3e
 800a160:	d818      	bhi.n	800a194 <USB_EPStartXfer+0x19e8>
 800a162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a166:	085b      	lsrs	r3, r3, #1
 800a168:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a16c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a170:	f003 0301 	and.w	r3, r3, #1
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <USB_EPStartXfer+0x19d6>
 800a178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a17c:	3301      	adds	r3, #1
 800a17e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a186:	b29b      	uxth	r3, r3
 800a188:	029b      	lsls	r3, r3, #10
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a190:	801a      	strh	r2, [r3, #0]
 800a192:	e04e      	b.n	800a232 <USB_EPStartXfer+0x1a86>
 800a194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a198:	095b      	lsrs	r3, r3, #5
 800a19a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a19e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a2:	f003 031f 	and.w	r3, r3, #31
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d104      	bne.n	800a1b4 <USB_EPStartXfer+0x1a08>
 800a1aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a1b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	029b      	lsls	r3, r3, #10
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1cc:	801a      	strh	r2, [r3, #0]
 800a1ce:	e030      	b.n	800a232 <USB_EPStartXfer+0x1a86>
 800a1d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	785b      	ldrb	r3, [r3, #1]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d128      	bne.n	800a232 <USB_EPStartXfer+0x1a86>
 800a1e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	461a      	mov	r2, r3
 800a200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a204:	4413      	add	r3, r2
 800a206:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a20a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a20e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	011a      	lsls	r2, r3, #4
 800a218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a21c:	4413      	add	r3, r2
 800a21e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a222:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a230:	801a      	strh	r2, [r3, #0]
 800a232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a236:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	785b      	ldrb	r3, [r3, #1]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d178      	bne.n	800a342 <USB_EPStartXfer+0x1b96>
 800a250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a25e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	461a      	mov	r2, r3
 800a270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a274:	4413      	add	r3, r2
 800a276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a27a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a27e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	011a      	lsls	r2, r3, #4
 800a288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a28c:	4413      	add	r3, r2
 800a28e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d116      	bne.n	800a2cc <USB_EPStartXfer+0x1b20>
 800a29e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2a2:	881b      	ldrh	r3, [r3, #0]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2b0:	801a      	strh	r2, [r3, #0]
 800a2b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2b6:	881b      	ldrh	r3, [r3, #0]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2c8:	801a      	strh	r2, [r3, #0]
 800a2ca:	e067      	b.n	800a39c <USB_EPStartXfer+0x1bf0>
 800a2cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2d0:	2b3e      	cmp	r3, #62	; 0x3e
 800a2d2:	d818      	bhi.n	800a306 <USB_EPStartXfer+0x1b5a>
 800a2d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2d8:	085b      	lsrs	r3, r3, #1
 800a2da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <USB_EPStartXfer+0x1b48>
 800a2ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	029b      	lsls	r3, r3, #10
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a302:	801a      	strh	r2, [r3, #0]
 800a304:	e04a      	b.n	800a39c <USB_EPStartXfer+0x1bf0>
 800a306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a30a:	095b      	lsrs	r3, r3, #5
 800a30c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a314:	f003 031f 	and.w	r3, r3, #31
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d104      	bne.n	800a326 <USB_EPStartXfer+0x1b7a>
 800a31c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a320:	3b01      	subs	r3, #1
 800a322:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	029b      	lsls	r3, r3, #10
 800a32e:	b29b      	uxth	r3, r3
 800a330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a338:	b29a      	uxth	r2, r3
 800a33a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a33e:	801a      	strh	r2, [r3, #0]
 800a340:	e02c      	b.n	800a39c <USB_EPStartXfer+0x1bf0>
 800a342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	785b      	ldrb	r3, [r3, #1]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d124      	bne.n	800a39c <USB_EPStartXfer+0x1bf0>
 800a352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a360:	b29b      	uxth	r3, r3
 800a362:	461a      	mov	r2, r3
 800a364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a368:	4413      	add	r3, r2
 800a36a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a36e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	011a      	lsls	r2, r3, #4
 800a37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a380:	4413      	add	r3, r2
 800a382:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a386:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a38a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a38e:	b29a      	uxth	r2, r3
 800a390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a394:	801a      	strh	r2, [r3, #0]
 800a396:	e001      	b.n	800a39c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e03a      	b.n	800a412 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a39c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	881b      	ldrh	r3, [r3, #0]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3d2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	441a      	add	r2, r3
 800a3f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d020      	beq.n	800a470 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4413      	add	r3, r2
 800a438:	881b      	ldrh	r3, [r3, #0]
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a444:	81bb      	strh	r3, [r7, #12]
 800a446:	89bb      	ldrh	r3, [r7, #12]
 800a448:	f083 0310 	eor.w	r3, r3, #16
 800a44c:	81bb      	strh	r3, [r7, #12]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	441a      	add	r2, r3
 800a458:	89bb      	ldrh	r3, [r7, #12]
 800a45a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a45e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	8013      	strh	r3, [r2, #0]
 800a46e:	e01f      	b.n	800a4b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a486:	81fb      	strh	r3, [r7, #14]
 800a488:	89fb      	ldrh	r3, [r7, #14]
 800a48a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a48e:	81fb      	strh	r3, [r7, #14]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	441a      	add	r2, r3
 800a49a:	89fb      	ldrh	r3, [r7, #14]
 800a49c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bc80      	pop	{r7}
 800a4ba:	4770      	bx	lr

0800a4bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	7b1b      	ldrb	r3, [r3, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f040 809d 	bne.w	800a60a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	785b      	ldrb	r3, [r3, #1]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d04c      	beq.n	800a572 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	823b      	strh	r3, [r7, #16]
 800a4e6:	8a3b      	ldrh	r3, [r7, #16]
 800a4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01b      	beq.n	800a528 <USB_EPClearStall+0x6c>
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	881b      	ldrh	r3, [r3, #0]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a506:	81fb      	strh	r3, [r7, #14]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	441a      	add	r2, r3
 800a512:	89fb      	ldrh	r3, [r7, #14]
 800a514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a51c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a520:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a524:	b29b      	uxth	r3, r3
 800a526:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	78db      	ldrb	r3, [r3, #3]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d06c      	beq.n	800a60a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a546:	81bb      	strh	r3, [r7, #12]
 800a548:	89bb      	ldrh	r3, [r7, #12]
 800a54a:	f083 0320 	eor.w	r3, r3, #32
 800a54e:	81bb      	strh	r3, [r7, #12]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	441a      	add	r2, r3
 800a55a:	89bb      	ldrh	r3, [r7, #12]
 800a55c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	8013      	strh	r3, [r2, #0]
 800a570:	e04b      	b.n	800a60a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	82fb      	strh	r3, [r7, #22]
 800a580:	8afb      	ldrh	r3, [r7, #22]
 800a582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d01b      	beq.n	800a5c2 <USB_EPClearStall+0x106>
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	b29b      	uxth	r3, r3
 800a598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a59c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5a0:	82bb      	strh	r3, [r7, #20]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	441a      	add	r2, r3
 800a5ac:	8abb      	ldrh	r3, [r7, #20]
 800a5ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d8:	827b      	strh	r3, [r7, #18]
 800a5da:	8a7b      	ldrh	r3, [r7, #18]
 800a5dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5e0:	827b      	strh	r3, [r7, #18]
 800a5e2:	8a7b      	ldrh	r3, [r7, #18]
 800a5e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5e8:	827b      	strh	r3, [r7, #18]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	441a      	add	r2, r3
 800a5f4:	8a7b      	ldrh	r3, [r7, #18]
 800a5f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a606:	b29b      	uxth	r3, r3
 800a608:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	371c      	adds	r7, #28
 800a610:	46bd      	mov	sp, r7
 800a612:	bc80      	pop	{r7}
 800a614:	4770      	bx	lr

0800a616 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a616:	b480      	push	{r7}
 800a618:	b083      	sub	sp, #12
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	460b      	mov	r3, r1
 800a620:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a622:	78fb      	ldrb	r3, [r7, #3]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d103      	bne.n	800a630 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2280      	movs	r2, #128	; 0x80
 800a62c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	bc80      	pop	{r7}
 800a63a:	4770      	bx	lr

0800a63c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bc80      	pop	{r7}
 800a64e:	4770      	bx	lr

0800a650 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	bc80      	pop	{r7}
 800a662:	4770      	bx	lr

0800a664 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a672:	b29b      	uxth	r3, r3
 800a674:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a676:	68fb      	ldr	r3, [r7, #12]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bc80      	pop	{r7}
 800a680:	4770      	bx	lr

0800a682 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	bc80      	pop	{r7}
 800a696:	4770      	bx	lr

0800a698 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a698:	b480      	push	{r7}
 800a69a:	b08d      	sub	sp, #52	; 0x34
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	80fb      	strh	r3, [r7, #6]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a6ae:	88bb      	ldrh	r3, [r7, #4]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	085b      	lsrs	r3, r3, #1
 800a6b4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a6be:	88fb      	ldrh	r3, [r7, #6]
 800a6c0:	005a      	lsls	r2, r3, #1
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6ca:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6d0:	e01e      	b.n	800a710 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	3301      	adds	r3, #1
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	021b      	lsls	r3, r3, #8
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	3302      	adds	r3, #2
 800a6fc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	3302      	adds	r3, #2
 800a702:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	3301      	adds	r3, #1
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	3b01      	subs	r3, #1
 800a70e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1dd      	bne.n	800a6d2 <USB_WritePMA+0x3a>
  }
}
 800a716:	bf00      	nop
 800a718:	bf00      	nop
 800a71a:	3734      	adds	r7, #52	; 0x34
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bc80      	pop	{r7}
 800a720:	4770      	bx	lr

0800a722 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a722:	b480      	push	{r7}
 800a724:	b08b      	sub	sp, #44	; 0x2c
 800a726:	af00      	add	r7, sp, #0
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	4611      	mov	r1, r2
 800a72e:	461a      	mov	r2, r3
 800a730:	460b      	mov	r3, r1
 800a732:	80fb      	strh	r3, [r7, #6]
 800a734:	4613      	mov	r3, r2
 800a736:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a738:	88bb      	ldrh	r3, [r7, #4]
 800a73a:	085b      	lsrs	r3, r3, #1
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a748:	88fb      	ldrh	r3, [r7, #6]
 800a74a:	005a      	lsls	r2, r3, #1
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a754:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
 800a75a:	e01b      	b.n	800a794 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	b29b      	uxth	r3, r3
 800a762:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	3302      	adds	r3, #2
 800a768:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	3301      	adds	r3, #1
 800a776:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	0a1b      	lsrs	r3, r3, #8
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	3301      	adds	r3, #1
 800a786:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	3302      	adds	r3, #2
 800a78c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a790:	3b01      	subs	r3, #1
 800a792:	627b      	str	r3, [r7, #36]	; 0x24
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e0      	bne.n	800a75c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a79a:	88bb      	ldrh	r3, [r7, #4]
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	701a      	strb	r2, [r3, #0]
  }
}
 800a7b6:	bf00      	nop
 800a7b8:	372c      	adds	r7, #44	; 0x2c
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bc80      	pop	{r7}
 800a7be:	4770      	bx	lr

0800a7c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	7c1b      	ldrb	r3, [r3, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d115      	bne.n	800a804 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7dc:	2202      	movs	r2, #2
 800a7de:	2181      	movs	r1, #129	; 0x81
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 fe8c 	bl	800c4fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7f0:	2202      	movs	r2, #2
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f001 fe82 	bl	800c4fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a802:	e012      	b.n	800a82a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a804:	2340      	movs	r3, #64	; 0x40
 800a806:	2202      	movs	r2, #2
 800a808:	2181      	movs	r1, #129	; 0x81
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 fe77 	bl	800c4fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a816:	2340      	movs	r3, #64	; 0x40
 800a818:	2202      	movs	r2, #2
 800a81a:	2101      	movs	r1, #1
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 fe6e 	bl	800c4fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a82a:	2308      	movs	r3, #8
 800a82c:	2203      	movs	r2, #3
 800a82e:	2182      	movs	r1, #130	; 0x82
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 fe64 	bl	800c4fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a83c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a840:	f001 ff84 	bl	800c74c <USBD_static_malloc>
 800a844:	4602      	mov	r2, r0
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a852:	2b00      	cmp	r3, #0
 800a854:	d102      	bne.n	800a85c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a856:	2301      	movs	r3, #1
 800a858:	73fb      	strb	r3, [r7, #15]
 800a85a:	e026      	b.n	800a8aa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a862:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	2200      	movs	r2, #0
 800a872:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2200      	movs	r2, #0
 800a87a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	7c1b      	ldrb	r3, [r3, #16]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d109      	bne.n	800a89a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a88c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a890:	2101      	movs	r1, #1
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f001 ff24 	bl	800c6e0 <USBD_LL_PrepareReceive>
 800a898:	e007      	b.n	800a8aa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8a0:	2340      	movs	r3, #64	; 0x40
 800a8a2:	2101      	movs	r1, #1
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f001 ff1b 	bl	800c6e0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	460b      	mov	r3, r1
 800a8be:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a8c4:	2181      	movs	r1, #129	; 0x81
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f001 fe3f 	bl	800c54a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f001 fe38 	bl	800c54a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a8e2:	2182      	movs	r1, #130	; 0x82
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f001 fe30 	bl	800c54a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00e      	beq.n	800a918 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90a:	4618      	mov	r0, r3
 800a90c:	f001 ff2a 	bl	800c764 <USBD_static_free>
    pdev->pClassData = NULL;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a918:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b086      	sub	sp, #24
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a932:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d039      	beq.n	800a9c0 <USBD_CDC_Setup+0x9e>
 800a94c:	2b20      	cmp	r3, #32
 800a94e:	d17f      	bne.n	800aa50 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	88db      	ldrh	r3, [r3, #6]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d029      	beq.n	800a9ac <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	b25b      	sxtb	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	da11      	bge.n	800a986 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a96e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	88d2      	ldrh	r2, [r2, #6]
 800a974:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a976:	6939      	ldr	r1, [r7, #16]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	88db      	ldrh	r3, [r3, #6]
 800a97c:	461a      	mov	r2, r3
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f001 fa09 	bl	800bd96 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a984:	e06b      	b.n	800aa5e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	785a      	ldrb	r2, [r3, #1]
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	88db      	ldrh	r3, [r3, #6]
 800a994:	b2da      	uxtb	r2, r3
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a99c:	6939      	ldr	r1, [r7, #16]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	88db      	ldrh	r3, [r3, #6]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f001 fa24 	bl	800bdf2 <USBD_CtlPrepareRx>
      break;
 800a9aa:	e058      	b.n	800aa5e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	7850      	ldrb	r0, [r2, #1]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	4798      	blx	r3
      break;
 800a9be:	e04e      	b.n	800aa5e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b0b      	cmp	r3, #11
 800a9c6:	d02e      	beq.n	800aa26 <USBD_CDC_Setup+0x104>
 800a9c8:	2b0b      	cmp	r3, #11
 800a9ca:	dc38      	bgt.n	800aa3e <USBD_CDC_Setup+0x11c>
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <USBD_CDC_Setup+0xb4>
 800a9d0:	2b0a      	cmp	r3, #10
 800a9d2:	d014      	beq.n	800a9fe <USBD_CDC_Setup+0xdc>
 800a9d4:	e033      	b.n	800aa3e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d107      	bne.n	800a9f0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a9e0:	f107 030c 	add.w	r3, r7, #12
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f001 f9d4 	bl	800bd96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9ee:	e02e      	b.n	800aa4e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f001 f965 	bl	800bcc2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	75fb      	strb	r3, [r7, #23]
          break;
 800a9fc:	e027      	b.n	800aa4e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d107      	bne.n	800aa18 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa08:	f107 030f 	add.w	r3, r7, #15
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 f9c0 	bl	800bd96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa16:	e01a      	b.n	800aa4e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f001 f951 	bl	800bcc2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa20:	2302      	movs	r3, #2
 800aa22:	75fb      	strb	r3, [r7, #23]
          break;
 800aa24:	e013      	b.n	800aa4e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa2c:	2b03      	cmp	r3, #3
 800aa2e:	d00d      	beq.n	800aa4c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f001 f945 	bl	800bcc2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa38:	2302      	movs	r3, #2
 800aa3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa3c:	e006      	b.n	800aa4c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 f93e 	bl	800bcc2 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa46:	2302      	movs	r3, #2
 800aa48:	75fb      	strb	r3, [r7, #23]
          break;
 800aa4a:	e000      	b.n	800aa4e <USBD_CDC_Setup+0x12c>
          break;
 800aa4c:	bf00      	nop
      }
      break;
 800aa4e:	e006      	b.n	800aa5e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 f935 	bl	800bcc2 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa58:	2302      	movs	r3, #2
 800aa5a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa5c:	bf00      	nop
  }

  return ret;
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa82:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d03a      	beq.n	800ab04 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa8e:	78fa      	ldrb	r2, [r7, #3]
 800aa90:	6879      	ldr	r1, [r7, #4]
 800aa92:	4613      	mov	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	440b      	add	r3, r1
 800aa9c:	331c      	adds	r3, #28
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d029      	beq.n	800aaf8 <USBD_CDC_DataIn+0x90>
 800aaa4:	78fa      	ldrb	r2, [r7, #3]
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	440b      	add	r3, r1
 800aab2:	331c      	adds	r3, #28
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	78f9      	ldrb	r1, [r7, #3]
 800aab8:	68b8      	ldr	r0, [r7, #8]
 800aaba:	460b      	mov	r3, r1
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	440b      	add	r3, r1
 800aac0:	00db      	lsls	r3, r3, #3
 800aac2:	4403      	add	r3, r0
 800aac4:	3338      	adds	r3, #56	; 0x38
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	fbb2 f1f3 	udiv	r1, r2, r3
 800aacc:	fb01 f303 	mul.w	r3, r1, r3
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d110      	bne.n	800aaf8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aad6:	78fa      	ldrb	r2, [r7, #3]
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	4613      	mov	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	440b      	add	r3, r1
 800aae4:	331c      	adds	r3, #28
 800aae6:	2200      	movs	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aaea:	78f9      	ldrb	r1, [r7, #3]
 800aaec:	2300      	movs	r3, #0
 800aaee:	2200      	movs	r2, #0
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f001 fdd2 	bl	800c69a <USBD_LL_Transmit>
 800aaf6:	e003      	b.n	800ab00 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	e000      	b.n	800ab06 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ab04:	2302      	movs	r3, #2
  }
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	460b      	mov	r3, r1
 800ab18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab20:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab22:	78fb      	ldrb	r3, [r7, #3]
 800ab24:	4619      	mov	r1, r3
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f001 fdfd 	bl	800c726 <USBD_LL_GetRxDataSize>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00d      	beq.n	800ab5a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ab52:	4611      	mov	r1, r2
 800ab54:	4798      	blx	r3

    return USBD_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	e000      	b.n	800ab5c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ab5a:	2302      	movs	r3, #2
  }
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab72:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d015      	beq.n	800abaa <USBD_CDC_EP0_RxReady+0x46>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab84:	2bff      	cmp	r3, #255	; 0xff
 800ab86:	d010      	beq.n	800abaa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ab96:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab9e:	b292      	uxth	r2, r2
 800aba0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	22ff      	movs	r2, #255	; 0xff
 800aba6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2243      	movs	r2, #67	; 0x43
 800abc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800abc2:	4b03      	ldr	r3, [pc, #12]	; (800abd0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	bc80      	pop	{r7}
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	20000098 	.word	0x20000098

0800abd4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2243      	movs	r2, #67	; 0x43
 800abe0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800abe2:	4b03      	ldr	r3, [pc, #12]	; (800abf0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	bc80      	pop	{r7}
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	20000054 	.word	0x20000054

0800abf4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2243      	movs	r2, #67	; 0x43
 800ac00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ac02:	4b03      	ldr	r3, [pc, #12]	; (800ac10 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bc80      	pop	{r7}
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	200000dc 	.word	0x200000dc

0800ac14 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	220a      	movs	r2, #10
 800ac20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ac22:	4b03      	ldr	r3, [pc, #12]	; (800ac30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bc80      	pop	{r7}
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	20000010 	.word	0x20000010

0800ac34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ac3e:	2302      	movs	r3, #2
 800ac40:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d005      	beq.n	800ac54 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	683a      	ldr	r2, [r7, #0]
 800ac4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bc80      	pop	{r7}
 800ac5e:	4770      	bx	lr

0800ac60 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b087      	sub	sp, #28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac74:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac7e:	88fa      	ldrh	r2, [r7, #6]
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	371c      	adds	r7, #28
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bc80      	pop	{r7}
 800ac90:	4770      	bx	lr

0800ac92 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bc80      	pop	{r7}
 800acb6:	4770      	bx	lr

0800acb8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d01c      	beq.n	800ad0c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d115      	bne.n	800ad08 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2201      	movs	r2, #1
 800ace0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	2181      	movs	r1, #129	; 0x81
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f001 fccb 	bl	800c69a <USBD_LL_Transmit>

      return USBD_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	e002      	b.n	800ad0e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e000      	b.n	800ad0e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ad0c:	2302      	movs	r3, #2
  }
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad24:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d017      	beq.n	800ad60 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	7c1b      	ldrb	r3, [r3, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d109      	bne.n	800ad4c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad42:	2101      	movs	r1, #1
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f001 fccb 	bl	800c6e0 <USBD_LL_PrepareReceive>
 800ad4a:	e007      	b.n	800ad5c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad52:	2340      	movs	r3, #64	; 0x40
 800ad54:	2101      	movs	r1, #1
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f001 fcc2 	bl	800c6e0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	e000      	b.n	800ad62 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ad60:	2302      	movs	r3, #2
  }
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	60b9      	str	r1, [r7, #8]
 800ad74:	4613      	mov	r3, r2
 800ad76:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	e01a      	b.n	800adb8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	79fa      	ldrb	r2, [r7, #7]
 800adae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f001 fb2f 	bl	800c414 <USBD_LL_Init>

  return USBD_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d006      	beq.n	800ade2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	73fb      	strb	r3, [r7, #15]
 800ade0:	e001      	b.n	800ade6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ade2:	2302      	movs	r3, #2
 800ade4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	bc80      	pop	{r7}
 800adf0:	4770      	bx	lr

0800adf2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b082      	sub	sp, #8
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 fb64 	bl	800c4c8 <USBD_LL_Start>

  return USBD_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bc80      	pop	{r7}
 800ae1c:	4770      	bx	lr

0800ae1e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	460b      	mov	r3, r1
 800ae28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae2a:	2302      	movs	r3, #2
 800ae2c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00c      	beq.n	800ae52 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	78fa      	ldrb	r2, [r7, #3]
 800ae42:	4611      	mov	r1, r2
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	4798      	blx	r3
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	78fa      	ldrb	r2, [r7, #3]
 800ae72:	4611      	mov	r1, r2
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	4798      	blx	r3

  return USBD_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b082      	sub	sp, #8
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 fed8 	bl	800bc4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aea8:	461a      	mov	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aeb6:	f003 031f 	and.w	r3, r3, #31
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d016      	beq.n	800aeec <USBD_LL_SetupStage+0x6a>
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	d81c      	bhi.n	800aefc <USBD_LL_SetupStage+0x7a>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d002      	beq.n	800aecc <USBD_LL_SetupStage+0x4a>
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d008      	beq.n	800aedc <USBD_LL_SetupStage+0x5a>
 800aeca:	e017      	b.n	800aefc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f9cb 	bl	800b270 <USBD_StdDevReq>
      break;
 800aeda:	e01a      	b.n	800af12 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fa2d 	bl	800b344 <USBD_StdItfReq>
      break;
 800aeea:	e012      	b.n	800af12 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fa6d 	bl	800b3d4 <USBD_StdEPReq>
      break;
 800aefa:	e00a      	b.n	800af12 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800af02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af06:	b2db      	uxtb	r3, r3
 800af08:	4619      	mov	r1, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f001 fb3c 	bl	800c588 <USBD_LL_StallEP>
      break;
 800af10:	bf00      	nop
  }

  return USBD_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	460b      	mov	r3, r1
 800af26:	607a      	str	r2, [r7, #4]
 800af28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af2a:	7afb      	ldrb	r3, [r7, #11]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d14b      	bne.n	800afc8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800af36:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d134      	bne.n	800afac <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	68da      	ldr	r2, [r3, #12]
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d919      	bls.n	800af82 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	68da      	ldr	r2, [r3, #12]
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	68da      	ldr	r2, [r3, #12]
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af64:	429a      	cmp	r2, r3
 800af66:	d203      	bcs.n	800af70 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	e002      	b.n	800af76 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af74:	b29b      	uxth	r3, r3
 800af76:	461a      	mov	r2, r3
 800af78:	6879      	ldr	r1, [r7, #4]
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f000 ff57 	bl	800be2e <USBD_CtlContinueRx>
 800af80:	e038      	b.n	800aff4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00a      	beq.n	800afa4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af94:	2b03      	cmp	r3, #3
 800af96:	d105      	bne.n	800afa4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 ff54 	bl	800be52 <USBD_CtlSendStatus>
 800afaa:	e023      	b.n	800aff4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afb2:	2b05      	cmp	r3, #5
 800afb4:	d11e      	bne.n	800aff4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800afbe:	2100      	movs	r1, #0
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f001 fae1 	bl	800c588 <USBD_LL_StallEP>
 800afc6:	e015      	b.n	800aff4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00d      	beq.n	800aff0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d108      	bne.n	800aff0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	7afa      	ldrb	r2, [r7, #11]
 800afe8:	4611      	mov	r1, r2
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	4798      	blx	r3
 800afee:	e001      	b.n	800aff4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aff0:	2302      	movs	r3, #2
 800aff2:	e000      	b.n	800aff6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b086      	sub	sp, #24
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	460b      	mov	r3, r1
 800b008:	607a      	str	r2, [r7, #4]
 800b00a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b00c:	7afb      	ldrb	r3, [r7, #11]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d17f      	bne.n	800b112 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	3314      	adds	r3, #20
 800b016:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b01e:	2b02      	cmp	r3, #2
 800b020:	d15c      	bne.n	800b0dc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d915      	bls.n	800b05a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	68da      	ldr	r2, [r3, #12]
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	1ad2      	subs	r2, r2, r3
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	b29b      	uxth	r3, r3
 800b042:	461a      	mov	r2, r3
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f000 fec1 	bl	800bdce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b04c:	2300      	movs	r3, #0
 800b04e:	2200      	movs	r2, #0
 800b050:	2100      	movs	r1, #0
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f001 fb44 	bl	800c6e0 <USBD_LL_PrepareReceive>
 800b058:	e04e      	b.n	800b0f8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	6912      	ldr	r2, [r2, #16]
 800b062:	fbb3 f1f2 	udiv	r1, r3, r2
 800b066:	fb01 f202 	mul.w	r2, r1, r2
 800b06a:	1a9b      	subs	r3, r3, r2
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d11c      	bne.n	800b0aa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b078:	429a      	cmp	r2, r3
 800b07a:	d316      	bcc.n	800b0aa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	689a      	ldr	r2, [r3, #8]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b086:	429a      	cmp	r2, r3
 800b088:	d20f      	bcs.n	800b0aa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b08a:	2200      	movs	r2, #0
 800b08c:	2100      	movs	r1, #0
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f000 fe9d 	bl	800bdce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b09c:	2300      	movs	r3, #0
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f001 fb1c 	bl	800c6e0 <USBD_LL_PrepareReceive>
 800b0a8:	e026      	b.n	800b0f8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00a      	beq.n	800b0cc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d105      	bne.n	800b0cc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b0cc:	2180      	movs	r1, #128	; 0x80
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f001 fa5a 	bl	800c588 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 fecf 	bl	800be78 <USBD_CtlReceiveStatus>
 800b0da:	e00d      	b.n	800b0f8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	d004      	beq.n	800b0f0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d103      	bne.n	800b0f8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b0f0:	2180      	movs	r1, #128	; 0x80
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f001 fa48 	bl	800c588 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d11d      	bne.n	800b13e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7ff fe81 	bl	800ae0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b110:	e015      	b.n	800b13e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00d      	beq.n	800b13a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b124:	2b03      	cmp	r3, #3
 800b126:	d108      	bne.n	800b13a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	7afa      	ldrb	r2, [r7, #11]
 800b132:	4611      	mov	r1, r2
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	4798      	blx	r3
 800b138:	e001      	b.n	800b13e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b13a:	2302      	movs	r3, #2
 800b13c:	e000      	b.n	800b140 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3718      	adds	r7, #24
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b150:	2340      	movs	r3, #64	; 0x40
 800b152:	2200      	movs	r2, #0
 800b154:	2100      	movs	r1, #0
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f001 f9d1 	bl	800c4fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2240      	movs	r2, #64	; 0x40
 800b168:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b16c:	2340      	movs	r3, #64	; 0x40
 800b16e:	2200      	movs	r2, #0
 800b170:	2180      	movs	r1, #128	; 0x80
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f001 f9c3 	bl	800c4fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2240      	movs	r2, #64	; 0x40
 800b182:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d009      	beq.n	800b1c0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	6852      	ldr	r2, [r2, #4]
 800b1b8:	b2d2      	uxtb	r2, r2
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	4798      	blx	r3
  }

  return USBD_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b083      	sub	sp, #12
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	78fa      	ldrb	r2, [r7, #3]
 800b1da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bc80      	pop	{r7}
 800b1e6:	4770      	bx	lr

0800b1e8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2204      	movs	r2, #4
 800b200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bc80      	pop	{r7}
 800b20e:	4770      	bx	lr

0800b210 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21e:	2b04      	cmp	r3, #4
 800b220:	d105      	bne.n	800b22e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	bc80      	pop	{r7}
 800b238:	4770      	bx	lr

0800b23a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b082      	sub	sp, #8
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d10b      	bne.n	800b264 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b252:	69db      	ldr	r3, [r3, #28]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d005      	beq.n	800b264 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25e:	69db      	ldr	r3, [r3, #28]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b286:	2b40      	cmp	r3, #64	; 0x40
 800b288:	d005      	beq.n	800b296 <USBD_StdDevReq+0x26>
 800b28a:	2b40      	cmp	r3, #64	; 0x40
 800b28c:	d84f      	bhi.n	800b32e <USBD_StdDevReq+0xbe>
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d009      	beq.n	800b2a6 <USBD_StdDevReq+0x36>
 800b292:	2b20      	cmp	r3, #32
 800b294:	d14b      	bne.n	800b32e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	4798      	blx	r3
      break;
 800b2a4:	e048      	b.n	800b338 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	785b      	ldrb	r3, [r3, #1]
 800b2aa:	2b09      	cmp	r3, #9
 800b2ac:	d839      	bhi.n	800b322 <USBD_StdDevReq+0xb2>
 800b2ae:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <USBD_StdDevReq+0x44>)
 800b2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b4:	0800b305 	.word	0x0800b305
 800b2b8:	0800b319 	.word	0x0800b319
 800b2bc:	0800b323 	.word	0x0800b323
 800b2c0:	0800b30f 	.word	0x0800b30f
 800b2c4:	0800b323 	.word	0x0800b323
 800b2c8:	0800b2e7 	.word	0x0800b2e7
 800b2cc:	0800b2dd 	.word	0x0800b2dd
 800b2d0:	0800b323 	.word	0x0800b323
 800b2d4:	0800b2fb 	.word	0x0800b2fb
 800b2d8:	0800b2f1 	.word	0x0800b2f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f9dc 	bl	800b69c <USBD_GetDescriptor>
          break;
 800b2e4:	e022      	b.n	800b32c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2e6:	6839      	ldr	r1, [r7, #0]
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fb3f 	bl	800b96c <USBD_SetAddress>
          break;
 800b2ee:	e01d      	b.n	800b32c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fb7e 	bl	800b9f4 <USBD_SetConfig>
          break;
 800b2f8:	e018      	b.n	800b32c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fc07 	bl	800bb10 <USBD_GetConfig>
          break;
 800b302:	e013      	b.n	800b32c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fc37 	bl	800bb7a <USBD_GetStatus>
          break;
 800b30c:	e00e      	b.n	800b32c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fc65 	bl	800bbe0 <USBD_SetFeature>
          break;
 800b316:	e009      	b.n	800b32c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fc74 	bl	800bc08 <USBD_ClrFeature>
          break;
 800b320:	e004      	b.n	800b32c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 fccc 	bl	800bcc2 <USBD_CtlError>
          break;
 800b32a:	bf00      	nop
      }
      break;
 800b32c:	e004      	b.n	800b338 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fcc6 	bl	800bcc2 <USBD_CtlError>
      break;
 800b336:	bf00      	nop
  }

  return ret;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop

0800b344 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b35a:	2b40      	cmp	r3, #64	; 0x40
 800b35c:	d005      	beq.n	800b36a <USBD_StdItfReq+0x26>
 800b35e:	2b40      	cmp	r3, #64	; 0x40
 800b360:	d82e      	bhi.n	800b3c0 <USBD_StdItfReq+0x7c>
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <USBD_StdItfReq+0x26>
 800b366:	2b20      	cmp	r3, #32
 800b368:	d12a      	bne.n	800b3c0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b370:	3b01      	subs	r3, #1
 800b372:	2b02      	cmp	r3, #2
 800b374:	d81d      	bhi.n	800b3b2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	889b      	ldrh	r3, [r3, #4]
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d813      	bhi.n	800b3a8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	4798      	blx	r3
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	88db      	ldrh	r3, [r3, #6]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d110      	bne.n	800b3bc <USBD_StdItfReq+0x78>
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10d      	bne.n	800b3bc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fd56 	bl	800be52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3a6:	e009      	b.n	800b3bc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fc89 	bl	800bcc2 <USBD_CtlError>
          break;
 800b3b0:	e004      	b.n	800b3bc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 fc84 	bl	800bcc2 <USBD_CtlError>
          break;
 800b3ba:	e000      	b.n	800b3be <USBD_StdItfReq+0x7a>
          break;
 800b3bc:	bf00      	nop
      }
      break;
 800b3be:	e004      	b.n	800b3ca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b3c0:	6839      	ldr	r1, [r7, #0]
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fc7d 	bl	800bcc2 <USBD_CtlError>
      break;
 800b3c8:	bf00      	nop
  }

  return USBD_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	889b      	ldrh	r3, [r3, #4]
 800b3e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3f0:	2b40      	cmp	r3, #64	; 0x40
 800b3f2:	d007      	beq.n	800b404 <USBD_StdEPReq+0x30>
 800b3f4:	2b40      	cmp	r3, #64	; 0x40
 800b3f6:	f200 8146 	bhi.w	800b686 <USBD_StdEPReq+0x2b2>
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00a      	beq.n	800b414 <USBD_StdEPReq+0x40>
 800b3fe:	2b20      	cmp	r3, #32
 800b400:	f040 8141 	bne.w	800b686 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	4798      	blx	r3
      break;
 800b412:	e13d      	b.n	800b690 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b41c:	2b20      	cmp	r3, #32
 800b41e:	d10a      	bne.n	800b436 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	4798      	blx	r3
 800b42e:	4603      	mov	r3, r0
 800b430:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	e12d      	b.n	800b692 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d007      	beq.n	800b44e <USBD_StdEPReq+0x7a>
 800b43e:	2b03      	cmp	r3, #3
 800b440:	f300 811b 	bgt.w	800b67a <USBD_StdEPReq+0x2a6>
 800b444:	2b00      	cmp	r3, #0
 800b446:	d072      	beq.n	800b52e <USBD_StdEPReq+0x15a>
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d03a      	beq.n	800b4c2 <USBD_StdEPReq+0xee>
 800b44c:	e115      	b.n	800b67a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b454:	2b02      	cmp	r3, #2
 800b456:	d002      	beq.n	800b45e <USBD_StdEPReq+0x8a>
 800b458:	2b03      	cmp	r3, #3
 800b45a:	d015      	beq.n	800b488 <USBD_StdEPReq+0xb4>
 800b45c:	e02b      	b.n	800b4b6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00c      	beq.n	800b47e <USBD_StdEPReq+0xaa>
 800b464:	7bbb      	ldrb	r3, [r7, #14]
 800b466:	2b80      	cmp	r3, #128	; 0x80
 800b468:	d009      	beq.n	800b47e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b46a:	7bbb      	ldrb	r3, [r7, #14]
 800b46c:	4619      	mov	r1, r3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f001 f88a 	bl	800c588 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b474:	2180      	movs	r1, #128	; 0x80
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f001 f886 	bl	800c588 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b47c:	e020      	b.n	800b4c0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fc1e 	bl	800bcc2 <USBD_CtlError>
              break;
 800b486:	e01b      	b.n	800b4c0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	885b      	ldrh	r3, [r3, #2]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10e      	bne.n	800b4ae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b490:	7bbb      	ldrb	r3, [r7, #14]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00b      	beq.n	800b4ae <USBD_StdEPReq+0xda>
 800b496:	7bbb      	ldrb	r3, [r7, #14]
 800b498:	2b80      	cmp	r3, #128	; 0x80
 800b49a:	d008      	beq.n	800b4ae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	88db      	ldrh	r3, [r3, #6]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d104      	bne.n	800b4ae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 f86d 	bl	800c588 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fccf 	bl	800be52 <USBD_CtlSendStatus>

              break;
 800b4b4:	e004      	b.n	800b4c0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fc02 	bl	800bcc2 <USBD_CtlError>
              break;
 800b4be:	bf00      	nop
          }
          break;
 800b4c0:	e0e0      	b.n	800b684 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d002      	beq.n	800b4d2 <USBD_StdEPReq+0xfe>
 800b4cc:	2b03      	cmp	r3, #3
 800b4ce:	d015      	beq.n	800b4fc <USBD_StdEPReq+0x128>
 800b4d0:	e026      	b.n	800b520 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4d2:	7bbb      	ldrb	r3, [r7, #14]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00c      	beq.n	800b4f2 <USBD_StdEPReq+0x11e>
 800b4d8:	7bbb      	ldrb	r3, [r7, #14]
 800b4da:	2b80      	cmp	r3, #128	; 0x80
 800b4dc:	d009      	beq.n	800b4f2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b4de:	7bbb      	ldrb	r3, [r7, #14]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 f850 	bl	800c588 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b4e8:	2180      	movs	r1, #128	; 0x80
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f001 f84c 	bl	800c588 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4f0:	e01c      	b.n	800b52c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fbe4 	bl	800bcc2 <USBD_CtlError>
              break;
 800b4fa:	e017      	b.n	800b52c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	885b      	ldrh	r3, [r3, #2]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d112      	bne.n	800b52a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b504:	7bbb      	ldrb	r3, [r7, #14]
 800b506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d004      	beq.n	800b518 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f001 f857 	bl	800c5c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fc9a 	bl	800be52 <USBD_CtlSendStatus>
              }
              break;
 800b51e:	e004      	b.n	800b52a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fbcd 	bl	800bcc2 <USBD_CtlError>
              break;
 800b528:	e000      	b.n	800b52c <USBD_StdEPReq+0x158>
              break;
 800b52a:	bf00      	nop
          }
          break;
 800b52c:	e0aa      	b.n	800b684 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b534:	2b02      	cmp	r3, #2
 800b536:	d002      	beq.n	800b53e <USBD_StdEPReq+0x16a>
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d032      	beq.n	800b5a2 <USBD_StdEPReq+0x1ce>
 800b53c:	e097      	b.n	800b66e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d007      	beq.n	800b554 <USBD_StdEPReq+0x180>
 800b544:	7bbb      	ldrb	r3, [r7, #14]
 800b546:	2b80      	cmp	r3, #128	; 0x80
 800b548:	d004      	beq.n	800b554 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 fbb8 	bl	800bcc2 <USBD_CtlError>
                break;
 800b552:	e091      	b.n	800b678 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	da0b      	bge.n	800b574 <USBD_StdEPReq+0x1a0>
 800b55c:	7bbb      	ldrb	r3, [r7, #14]
 800b55e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b562:	4613      	mov	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	3310      	adds	r3, #16
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	4413      	add	r3, r2
 800b570:	3304      	adds	r3, #4
 800b572:	e00b      	b.n	800b58c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b57a:	4613      	mov	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	4413      	add	r3, r2
 800b58a:	3304      	adds	r3, #4
 800b58c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2200      	movs	r2, #0
 800b592:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2202      	movs	r2, #2
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fbfb 	bl	800bd96 <USBD_CtlSendData>
              break;
 800b5a0:	e06a      	b.n	800b678 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	da11      	bge.n	800b5ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5aa:	7bbb      	ldrb	r3, [r7, #14]
 800b5ac:	f003 020f 	and.w	r2, r3, #15
 800b5b0:	6879      	ldr	r1, [r7, #4]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	440b      	add	r3, r1
 800b5bc:	3318      	adds	r3, #24
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d117      	bne.n	800b5f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fb7b 	bl	800bcc2 <USBD_CtlError>
                  break;
 800b5cc:	e054      	b.n	800b678 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	f003 020f 	and.w	r2, r3, #15
 800b5d4:	6879      	ldr	r1, [r7, #4]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	440b      	add	r3, r1
 800b5e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d104      	bne.n	800b5f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fb68 	bl	800bcc2 <USBD_CtlError>
                  break;
 800b5f2:	e041      	b.n	800b678 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	da0b      	bge.n	800b614 <USBD_StdEPReq+0x240>
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b602:	4613      	mov	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	3310      	adds	r3, #16
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	4413      	add	r3, r2
 800b610:	3304      	adds	r3, #4
 800b612:	e00b      	b.n	800b62c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	4413      	add	r3, r2
 800b62a:	3304      	adds	r3, #4
 800b62c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <USBD_StdEPReq+0x266>
 800b634:	7bbb      	ldrb	r3, [r7, #14]
 800b636:	2b80      	cmp	r3, #128	; 0x80
 800b638:	d103      	bne.n	800b642 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2200      	movs	r2, #0
 800b63e:	601a      	str	r2, [r3, #0]
 800b640:	e00e      	b.n	800b660 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	4619      	mov	r1, r3
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 ffdc 	bl	800c604 <USBD_LL_IsStallEP>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2201      	movs	r2, #1
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	e002      	b.n	800b660 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2200      	movs	r2, #0
 800b65e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2202      	movs	r2, #2
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fb95 	bl	800bd96 <USBD_CtlSendData>
              break;
 800b66c:	e004      	b.n	800b678 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 fb26 	bl	800bcc2 <USBD_CtlError>
              break;
 800b676:	bf00      	nop
          }
          break;
 800b678:	e004      	b.n	800b684 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fb20 	bl	800bcc2 <USBD_CtlError>
          break;
 800b682:	bf00      	nop
      }
      break;
 800b684:	e004      	b.n	800b690 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fb1a 	bl	800bcc2 <USBD_CtlError>
      break;
 800b68e:	bf00      	nop
  }

  return ret;
 800b690:	7bfb      	ldrb	r3, [r7, #15]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	885b      	ldrh	r3, [r3, #2]
 800b6b6:	0a1b      	lsrs	r3, r3, #8
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	2b06      	cmp	r3, #6
 800b6be:	f200 8128 	bhi.w	800b912 <USBD_GetDescriptor+0x276>
 800b6c2:	a201      	add	r2, pc, #4	; (adr r2, 800b6c8 <USBD_GetDescriptor+0x2c>)
 800b6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c8:	0800b6e5 	.word	0x0800b6e5
 800b6cc:	0800b6fd 	.word	0x0800b6fd
 800b6d0:	0800b73d 	.word	0x0800b73d
 800b6d4:	0800b913 	.word	0x0800b913
 800b6d8:	0800b913 	.word	0x0800b913
 800b6dc:	0800b8b3 	.word	0x0800b8b3
 800b6e0:	0800b8df 	.word	0x0800b8df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	7c12      	ldrb	r2, [r2, #16]
 800b6f0:	f107 0108 	add.w	r1, r7, #8
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	4798      	blx	r3
 800b6f8:	60f8      	str	r0, [r7, #12]
      break;
 800b6fa:	e112      	b.n	800b922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	7c1b      	ldrb	r3, [r3, #16]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10d      	bne.n	800b720 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70c:	f107 0208 	add.w	r2, r7, #8
 800b710:	4610      	mov	r0, r2
 800b712:	4798      	blx	r3
 800b714:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3301      	adds	r3, #1
 800b71a:	2202      	movs	r2, #2
 800b71c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b71e:	e100      	b.n	800b922 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b728:	f107 0208 	add.w	r2, r7, #8
 800b72c:	4610      	mov	r0, r2
 800b72e:	4798      	blx	r3
 800b730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3301      	adds	r3, #1
 800b736:	2202      	movs	r2, #2
 800b738:	701a      	strb	r2, [r3, #0]
      break;
 800b73a:	e0f2      	b.n	800b922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	885b      	ldrh	r3, [r3, #2]
 800b740:	b2db      	uxtb	r3, r3
 800b742:	2b05      	cmp	r3, #5
 800b744:	f200 80ac 	bhi.w	800b8a0 <USBD_GetDescriptor+0x204>
 800b748:	a201      	add	r2, pc, #4	; (adr r2, 800b750 <USBD_GetDescriptor+0xb4>)
 800b74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74e:	bf00      	nop
 800b750:	0800b769 	.word	0x0800b769
 800b754:	0800b79d 	.word	0x0800b79d
 800b758:	0800b7d1 	.word	0x0800b7d1
 800b75c:	0800b805 	.word	0x0800b805
 800b760:	0800b839 	.word	0x0800b839
 800b764:	0800b86d 	.word	0x0800b86d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00b      	beq.n	800b78c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	7c12      	ldrb	r2, [r2, #16]
 800b780:	f107 0108 	add.w	r1, r7, #8
 800b784:	4610      	mov	r0, r2
 800b786:	4798      	blx	r3
 800b788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b78a:	e091      	b.n	800b8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fa97 	bl	800bcc2 <USBD_CtlError>
            err++;
 800b794:	7afb      	ldrb	r3, [r7, #11]
 800b796:	3301      	adds	r3, #1
 800b798:	72fb      	strb	r3, [r7, #11]
          break;
 800b79a:	e089      	b.n	800b8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00b      	beq.n	800b7c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	7c12      	ldrb	r2, [r2, #16]
 800b7b4:	f107 0108 	add.w	r1, r7, #8
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	4798      	blx	r3
 800b7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7be:	e077      	b.n	800b8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7c0:	6839      	ldr	r1, [r7, #0]
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 fa7d 	bl	800bcc2 <USBD_CtlError>
            err++;
 800b7c8:	7afb      	ldrb	r3, [r7, #11]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ce:	e06f      	b.n	800b8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00b      	beq.n	800b7f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	7c12      	ldrb	r2, [r2, #16]
 800b7e8:	f107 0108 	add.w	r1, r7, #8
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	4798      	blx	r3
 800b7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7f2:	e05d      	b.n	800b8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fa63 	bl	800bcc2 <USBD_CtlError>
            err++;
 800b7fc:	7afb      	ldrb	r3, [r7, #11]
 800b7fe:	3301      	adds	r3, #1
 800b800:	72fb      	strb	r3, [r7, #11]
          break;
 800b802:	e055      	b.n	800b8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00b      	beq.n	800b828 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	7c12      	ldrb	r2, [r2, #16]
 800b81c:	f107 0108 	add.w	r1, r7, #8
 800b820:	4610      	mov	r0, r2
 800b822:	4798      	blx	r3
 800b824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b826:	e043      	b.n	800b8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fa49 	bl	800bcc2 <USBD_CtlError>
            err++;
 800b830:	7afb      	ldrb	r3, [r7, #11]
 800b832:	3301      	adds	r3, #1
 800b834:	72fb      	strb	r3, [r7, #11]
          break;
 800b836:	e03b      	b.n	800b8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b83e:	695b      	ldr	r3, [r3, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00b      	beq.n	800b85c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b84a:	695b      	ldr	r3, [r3, #20]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	7c12      	ldrb	r2, [r2, #16]
 800b850:	f107 0108 	add.w	r1, r7, #8
 800b854:	4610      	mov	r0, r2
 800b856:	4798      	blx	r3
 800b858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b85a:	e029      	b.n	800b8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 fa2f 	bl	800bcc2 <USBD_CtlError>
            err++;
 800b864:	7afb      	ldrb	r3, [r7, #11]
 800b866:	3301      	adds	r3, #1
 800b868:	72fb      	strb	r3, [r7, #11]
          break;
 800b86a:	e021      	b.n	800b8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00b      	beq.n	800b890 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	7c12      	ldrb	r2, [r2, #16]
 800b884:	f107 0108 	add.w	r1, r7, #8
 800b888:	4610      	mov	r0, r2
 800b88a:	4798      	blx	r3
 800b88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b88e:	e00f      	b.n	800b8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fa15 	bl	800bcc2 <USBD_CtlError>
            err++;
 800b898:	7afb      	ldrb	r3, [r7, #11]
 800b89a:	3301      	adds	r3, #1
 800b89c:	72fb      	strb	r3, [r7, #11]
          break;
 800b89e:	e007      	b.n	800b8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fa0d 	bl	800bcc2 <USBD_CtlError>
          err++;
 800b8a8:	7afb      	ldrb	r3, [r7, #11]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b8ae:	e038      	b.n	800b922 <USBD_GetDescriptor+0x286>
 800b8b0:	e037      	b.n	800b922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	7c1b      	ldrb	r3, [r3, #16]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d109      	bne.n	800b8ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c2:	f107 0208 	add.w	r2, r7, #8
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	4798      	blx	r3
 800b8ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8cc:	e029      	b.n	800b922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f9f6 	bl	800bcc2 <USBD_CtlError>
        err++;
 800b8d6:	7afb      	ldrb	r3, [r7, #11]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	72fb      	strb	r3, [r7, #11]
      break;
 800b8dc:	e021      	b.n	800b922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	7c1b      	ldrb	r3, [r3, #16]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d10d      	bne.n	800b902 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ee:	f107 0208 	add.w	r2, r7, #8
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	4798      	blx	r3
 800b8f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	2207      	movs	r2, #7
 800b8fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b900:	e00f      	b.n	800b922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f9dc 	bl	800bcc2 <USBD_CtlError>
        err++;
 800b90a:	7afb      	ldrb	r3, [r7, #11]
 800b90c:	3301      	adds	r3, #1
 800b90e:	72fb      	strb	r3, [r7, #11]
      break;
 800b910:	e007      	b.n	800b922 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f9d4 	bl	800bcc2 <USBD_CtlError>
      err++;
 800b91a:	7afb      	ldrb	r3, [r7, #11]
 800b91c:	3301      	adds	r3, #1
 800b91e:	72fb      	strb	r3, [r7, #11]
      break;
 800b920:	bf00      	nop
  }

  if (err != 0U)
 800b922:	7afb      	ldrb	r3, [r7, #11]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d11c      	bne.n	800b962 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b928:	893b      	ldrh	r3, [r7, #8]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d011      	beq.n	800b952 <USBD_GetDescriptor+0x2b6>
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	88db      	ldrh	r3, [r3, #6]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00d      	beq.n	800b952 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	88da      	ldrh	r2, [r3, #6]
 800b93a:	893b      	ldrh	r3, [r7, #8]
 800b93c:	4293      	cmp	r3, r2
 800b93e:	bf28      	it	cs
 800b940:	4613      	movcs	r3, r2
 800b942:	b29b      	uxth	r3, r3
 800b944:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b946:	893b      	ldrh	r3, [r7, #8]
 800b948:	461a      	mov	r2, r3
 800b94a:	68f9      	ldr	r1, [r7, #12]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fa22 	bl	800bd96 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	88db      	ldrh	r3, [r3, #6]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d104      	bne.n	800b964 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fa79 	bl	800be52 <USBD_CtlSendStatus>
 800b960:	e000      	b.n	800b964 <USBD_GetDescriptor+0x2c8>
    return;
 800b962:	bf00      	nop
    }
  }
}
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop

0800b96c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	889b      	ldrh	r3, [r3, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d130      	bne.n	800b9e0 <USBD_SetAddress+0x74>
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	88db      	ldrh	r3, [r3, #6]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d12c      	bne.n	800b9e0 <USBD_SetAddress+0x74>
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	885b      	ldrh	r3, [r3, #2]
 800b98a:	2b7f      	cmp	r3, #127	; 0x7f
 800b98c:	d828      	bhi.n	800b9e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	885b      	ldrh	r3, [r3, #2]
 800b992:	b2db      	uxtb	r3, r3
 800b994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b998:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a0:	2b03      	cmp	r3, #3
 800b9a2:	d104      	bne.n	800b9ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f98b 	bl	800bcc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ac:	e01d      	b.n	800b9ea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	7bfa      	ldrb	r2, [r7, #15]
 800b9b2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fe4e 	bl	800c65c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fa46 	bl	800be52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d004      	beq.n	800b9d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d4:	e009      	b.n	800b9ea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9de:	e004      	b.n	800b9ea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f96d 	bl	800bcc2 <USBD_CtlError>
  }
}
 800b9e8:	bf00      	nop
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	885b      	ldrh	r3, [r3, #2]
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	4b41      	ldr	r3, [pc, #260]	; (800bb0c <USBD_SetConfig+0x118>)
 800ba06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba08:	4b40      	ldr	r3, [pc, #256]	; (800bb0c <USBD_SetConfig+0x118>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d904      	bls.n	800ba1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f955 	bl	800bcc2 <USBD_CtlError>
 800ba18:	e075      	b.n	800bb06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	d002      	beq.n	800ba2a <USBD_SetConfig+0x36>
 800ba24:	2b03      	cmp	r3, #3
 800ba26:	d023      	beq.n	800ba70 <USBD_SetConfig+0x7c>
 800ba28:	e062      	b.n	800baf0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ba2a:	4b38      	ldr	r3, [pc, #224]	; (800bb0c <USBD_SetConfig+0x118>)
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d01a      	beq.n	800ba68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ba32:	4b36      	ldr	r3, [pc, #216]	; (800bb0c <USBD_SetConfig+0x118>)
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	461a      	mov	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2203      	movs	r2, #3
 800ba40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba44:	4b31      	ldr	r3, [pc, #196]	; (800bb0c <USBD_SetConfig+0x118>)
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7ff f9e7 	bl	800ae1e <USBD_SetClassConfig>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d104      	bne.n	800ba60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ba56:	6839      	ldr	r1, [r7, #0]
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f932 	bl	800bcc2 <USBD_CtlError>
            return;
 800ba5e:	e052      	b.n	800bb06 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f9f6 	bl	800be52 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba66:	e04e      	b.n	800bb06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f9f2 	bl	800be52 <USBD_CtlSendStatus>
        break;
 800ba6e:	e04a      	b.n	800bb06 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ba70:	4b26      	ldr	r3, [pc, #152]	; (800bb0c <USBD_SetConfig+0x118>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d112      	bne.n	800ba9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ba80:	4b22      	ldr	r3, [pc, #136]	; (800bb0c <USBD_SetConfig+0x118>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	461a      	mov	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ba8a:	4b20      	ldr	r3, [pc, #128]	; (800bb0c <USBD_SetConfig+0x118>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff f9e3 	bl	800ae5c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f9db 	bl	800be52 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba9c:	e033      	b.n	800bb06 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ba9e:	4b1b      	ldr	r3, [pc, #108]	; (800bb0c <USBD_SetConfig+0x118>)
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	461a      	mov	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d01d      	beq.n	800bae8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	4619      	mov	r1, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff f9d1 	bl	800ae5c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800baba:	4b14      	ldr	r3, [pc, #80]	; (800bb0c <USBD_SetConfig+0x118>)
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bac4:	4b11      	ldr	r3, [pc, #68]	; (800bb0c <USBD_SetConfig+0x118>)
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7ff f9a7 	bl	800ae1e <USBD_SetClassConfig>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d104      	bne.n	800bae0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bad6:	6839      	ldr	r1, [r7, #0]
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f8f2 	bl	800bcc2 <USBD_CtlError>
            return;
 800bade:	e012      	b.n	800bb06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f9b6 	bl	800be52 <USBD_CtlSendStatus>
        break;
 800bae6:	e00e      	b.n	800bb06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 f9b2 	bl	800be52 <USBD_CtlSendStatus>
        break;
 800baee:	e00a      	b.n	800bb06 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f8e5 	bl	800bcc2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800baf8:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <USBD_SetConfig+0x118>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	4619      	mov	r1, r3
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff f9ac 	bl	800ae5c <USBD_ClrClassConfig>
        break;
 800bb04:	bf00      	nop
    }
  }
}
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	200004d0 	.word	0x200004d0

0800bb10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	88db      	ldrh	r3, [r3, #6]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d004      	beq.n	800bb2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 f8cc 	bl	800bcc2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb2a:	e022      	b.n	800bb72 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	dc02      	bgt.n	800bb3c <USBD_GetConfig+0x2c>
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	dc03      	bgt.n	800bb42 <USBD_GetConfig+0x32>
 800bb3a:	e015      	b.n	800bb68 <USBD_GetConfig+0x58>
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d00b      	beq.n	800bb58 <USBD_GetConfig+0x48>
 800bb40:	e012      	b.n	800bb68 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3308      	adds	r3, #8
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	4619      	mov	r1, r3
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f920 	bl	800bd96 <USBD_CtlSendData>
        break;
 800bb56:	e00c      	b.n	800bb72 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f918 	bl	800bd96 <USBD_CtlSendData>
        break;
 800bb66:	e004      	b.n	800bb72 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f8a9 	bl	800bcc2 <USBD_CtlError>
        break;
 800bb70:	bf00      	nop
}
 800bb72:	bf00      	nop
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b082      	sub	sp, #8
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	d81e      	bhi.n	800bbce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	88db      	ldrh	r3, [r3, #6]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d004      	beq.n	800bba2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bb98:	6839      	ldr	r1, [r7, #0]
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f891 	bl	800bcc2 <USBD_CtlError>
        break;
 800bba0:	e01a      	b.n	800bbd8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2201      	movs	r2, #1
 800bba6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d005      	beq.n	800bbbe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	f043 0202 	orr.w	r2, r3, #2
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	330c      	adds	r3, #12
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f8e5 	bl	800bd96 <USBD_CtlSendData>
      break;
 800bbcc:	e004      	b.n	800bbd8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f876 	bl	800bcc2 <USBD_CtlError>
      break;
 800bbd6:	bf00      	nop
  }
}
 800bbd8:	bf00      	nop
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	885b      	ldrh	r3, [r3, #2]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d106      	bne.n	800bc00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f929 	bl	800be52 <USBD_CtlSendStatus>
  }
}
 800bc00:	bf00      	nop
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	d80b      	bhi.n	800bc36 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	885b      	ldrh	r3, [r3, #2]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d10c      	bne.n	800bc40 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f90f 	bl	800be52 <USBD_CtlSendStatus>
      }
      break;
 800bc34:	e004      	b.n	800bc40 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f842 	bl	800bcc2 <USBD_CtlError>
      break;
 800bc3e:	e000      	b.n	800bc42 <USBD_ClrFeature+0x3a>
      break;
 800bc40:	bf00      	nop
  }
}
 800bc42:	bf00      	nop
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b083      	sub	sp, #12
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	781a      	ldrb	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	785a      	ldrb	r2, [r3, #1]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	3302      	adds	r3, #2
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	3303      	adds	r3, #3
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	021b      	lsls	r3, r3, #8
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	4413      	add	r3, r2
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	3304      	adds	r3, #4
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	3305      	adds	r3, #5
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	021b      	lsls	r3, r3, #8
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	4413      	add	r3, r2
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	3306      	adds	r3, #6
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	3307      	adds	r3, #7
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	021b      	lsls	r3, r3, #8
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	4413      	add	r3, r2
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	80da      	strh	r2, [r3, #6]

}
 800bcb8:	bf00      	nop
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bc80      	pop	{r7}
 800bcc0:	4770      	bx	lr

0800bcc2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b082      	sub	sp, #8
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
 800bcca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bccc:	2180      	movs	r1, #128	; 0x80
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fc5a 	bl	800c588 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 fc56 	bl	800c588 <USBD_LL_StallEP>
}
 800bcdc:	bf00      	nop
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d032      	beq.n	800bd60 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f000 f834 	bl	800bd68 <USBD_GetLen>
 800bd00:	4603      	mov	r3, r0
 800bd02:	3301      	adds	r3, #1
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	005b      	lsls	r3, r3, #1
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bd0e:	7dfb      	ldrb	r3, [r7, #23]
 800bd10:	1c5a      	adds	r2, r3, #1
 800bd12:	75fa      	strb	r2, [r7, #23]
 800bd14:	461a      	mov	r2, r3
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	4413      	add	r3, r2
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	7812      	ldrb	r2, [r2, #0]
 800bd1e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd20:	7dfb      	ldrb	r3, [r7, #23]
 800bd22:	1c5a      	adds	r2, r3, #1
 800bd24:	75fa      	strb	r2, [r7, #23]
 800bd26:	461a      	mov	r2, r3
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	2203      	movs	r2, #3
 800bd2e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bd30:	e012      	b.n	800bd58 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	60fa      	str	r2, [r7, #12]
 800bd38:	7dfa      	ldrb	r2, [r7, #23]
 800bd3a:	1c51      	adds	r1, r2, #1
 800bd3c:	75f9      	strb	r1, [r7, #23]
 800bd3e:	4611      	mov	r1, r2
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	440a      	add	r2, r1
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bd48:	7dfb      	ldrb	r3, [r7, #23]
 800bd4a:	1c5a      	adds	r2, r3, #1
 800bd4c:	75fa      	strb	r2, [r7, #23]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	4413      	add	r3, r2
 800bd54:	2200      	movs	r2, #0
 800bd56:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1e8      	bne.n	800bd32 <USBD_GetString+0x4e>
    }
  }
}
 800bd60:	bf00      	nop
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bd74:	e005      	b.n	800bd82 <USBD_GetLen+0x1a>
  {
    len++;
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1f5      	bne.n	800bd76 <USBD_GetLen+0xe>
  }

  return len;
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bc80      	pop	{r7}
 800bd94:	4770      	bx	lr

0800bd96 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	60f8      	str	r0, [r7, #12]
 800bd9e:	60b9      	str	r1, [r7, #8]
 800bda0:	4613      	mov	r3, r2
 800bda2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2202      	movs	r2, #2
 800bda8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bdac:	88fa      	ldrh	r2, [r7, #6]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bdb2:	88fa      	ldrh	r2, [r7, #6]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdb8:	88fb      	ldrh	r3, [r7, #6]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 fc6b 	bl	800c69a <USBD_LL_Transmit>

  return USBD_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b084      	sub	sp, #16
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bddc:	88fb      	ldrh	r3, [r7, #6]
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	2100      	movs	r1, #0
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f000 fc59 	bl	800c69a <USBD_LL_Transmit>

  return USBD_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b084      	sub	sp, #16
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	60b9      	str	r1, [r7, #8]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2203      	movs	r2, #3
 800be04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be08:	88fa      	ldrh	r2, [r7, #6]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800be10:	88fa      	ldrh	r2, [r7, #6]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be18:	88fb      	ldrh	r3, [r7, #6]
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	2100      	movs	r1, #0
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f000 fc5e 	bl	800c6e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	60f8      	str	r0, [r7, #12]
 800be36:	60b9      	str	r1, [r7, #8]
 800be38:	4613      	mov	r3, r2
 800be3a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be3c:	88fb      	ldrh	r3, [r7, #6]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	2100      	movs	r1, #0
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f000 fc4c 	bl	800c6e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b082      	sub	sp, #8
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2204      	movs	r2, #4
 800be5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be62:	2300      	movs	r3, #0
 800be64:	2200      	movs	r2, #0
 800be66:	2100      	movs	r1, #0
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fc16 	bl	800c69a <USBD_LL_Transmit>

  return USBD_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2205      	movs	r2, #5
 800be84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be88:	2300      	movs	r3, #0
 800be8a:	2200      	movs	r2, #0
 800be8c:	2100      	movs	r1, #0
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fc26 	bl	800c6e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3708      	adds	r7, #8
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
	...

0800bea0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bea4:	2200      	movs	r2, #0
 800bea6:	4912      	ldr	r1, [pc, #72]	; (800bef0 <MX_USB_DEVICE_Init+0x50>)
 800bea8:	4812      	ldr	r0, [pc, #72]	; (800bef4 <MX_USB_DEVICE_Init+0x54>)
 800beaa:	f7fe ff5e 	bl	800ad6a <USBD_Init>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d001      	beq.n	800beb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800beb4:	f7f7 f8c6 	bl	8003044 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800beb8:	490f      	ldr	r1, [pc, #60]	; (800bef8 <MX_USB_DEVICE_Init+0x58>)
 800beba:	480e      	ldr	r0, [pc, #56]	; (800bef4 <MX_USB_DEVICE_Init+0x54>)
 800bebc:	f7fe ff80 	bl	800adc0 <USBD_RegisterClass>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bec6:	f7f7 f8bd 	bl	8003044 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800beca:	490c      	ldr	r1, [pc, #48]	; (800befc <MX_USB_DEVICE_Init+0x5c>)
 800becc:	4809      	ldr	r0, [pc, #36]	; (800bef4 <MX_USB_DEVICE_Init+0x54>)
 800bece:	f7fe feb1 	bl	800ac34 <USBD_CDC_RegisterInterface>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d001      	beq.n	800bedc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bed8:	f7f7 f8b4 	bl	8003044 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bedc:	4805      	ldr	r0, [pc, #20]	; (800bef4 <MX_USB_DEVICE_Init+0x54>)
 800bede:	f7fe ff88 	bl	800adf2 <USBD_Start>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d001      	beq.n	800beec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bee8:	f7f7 f8ac 	bl	8003044 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800beec:	bf00      	nop
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	20000130 	.word	0x20000130
 800bef4:	200004d4 	.word	0x200004d4
 800bef8:	2000001c 	.word	0x2000001c
 800befc:	20000120 	.word	0x20000120

0800bf00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf04:	2200      	movs	r2, #0
 800bf06:	4905      	ldr	r1, [pc, #20]	; (800bf1c <CDC_Init_FS+0x1c>)
 800bf08:	4805      	ldr	r0, [pc, #20]	; (800bf20 <CDC_Init_FS+0x20>)
 800bf0a:	f7fe fea9 	bl	800ac60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf0e:	4905      	ldr	r1, [pc, #20]	; (800bf24 <CDC_Init_FS+0x24>)
 800bf10:	4803      	ldr	r0, [pc, #12]	; (800bf20 <CDC_Init_FS+0x20>)
 800bf12:	f7fe febe 	bl	800ac92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	20000b98 	.word	0x20000b98
 800bf20:	200004d4 	.word	0x200004d4
 800bf24:	20000798 	.word	0x20000798

0800bf28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bc80      	pop	{r7}
 800bf34:	4770      	bx	lr
	...

0800bf38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	4603      	mov	r3, r0
 800bf40:	6039      	str	r1, [r7, #0]
 800bf42:	71fb      	strb	r3, [r7, #7]
 800bf44:	4613      	mov	r3, r2
 800bf46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf48:	79fb      	ldrb	r3, [r7, #7]
 800bf4a:	2b23      	cmp	r3, #35	; 0x23
 800bf4c:	d84a      	bhi.n	800bfe4 <CDC_Control_FS+0xac>
 800bf4e:	a201      	add	r2, pc, #4	; (adr r2, 800bf54 <CDC_Control_FS+0x1c>)
 800bf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf54:	0800bfe5 	.word	0x0800bfe5
 800bf58:	0800bfe5 	.word	0x0800bfe5
 800bf5c:	0800bfe5 	.word	0x0800bfe5
 800bf60:	0800bfe5 	.word	0x0800bfe5
 800bf64:	0800bfe5 	.word	0x0800bfe5
 800bf68:	0800bfe5 	.word	0x0800bfe5
 800bf6c:	0800bfe5 	.word	0x0800bfe5
 800bf70:	0800bfe5 	.word	0x0800bfe5
 800bf74:	0800bfe5 	.word	0x0800bfe5
 800bf78:	0800bfe5 	.word	0x0800bfe5
 800bf7c:	0800bfe5 	.word	0x0800bfe5
 800bf80:	0800bfe5 	.word	0x0800bfe5
 800bf84:	0800bfe5 	.word	0x0800bfe5
 800bf88:	0800bfe5 	.word	0x0800bfe5
 800bf8c:	0800bfe5 	.word	0x0800bfe5
 800bf90:	0800bfe5 	.word	0x0800bfe5
 800bf94:	0800bfe5 	.word	0x0800bfe5
 800bf98:	0800bfe5 	.word	0x0800bfe5
 800bf9c:	0800bfe5 	.word	0x0800bfe5
 800bfa0:	0800bfe5 	.word	0x0800bfe5
 800bfa4:	0800bfe5 	.word	0x0800bfe5
 800bfa8:	0800bfe5 	.word	0x0800bfe5
 800bfac:	0800bfe5 	.word	0x0800bfe5
 800bfb0:	0800bfe5 	.word	0x0800bfe5
 800bfb4:	0800bfe5 	.word	0x0800bfe5
 800bfb8:	0800bfe5 	.word	0x0800bfe5
 800bfbc:	0800bfe5 	.word	0x0800bfe5
 800bfc0:	0800bfe5 	.word	0x0800bfe5
 800bfc4:	0800bfe5 	.word	0x0800bfe5
 800bfc8:	0800bfe5 	.word	0x0800bfe5
 800bfcc:	0800bfe5 	.word	0x0800bfe5
 800bfd0:	0800bfe5 	.word	0x0800bfe5
 800bfd4:	0800bfe5 	.word	0x0800bfe5
 800bfd8:	0800bfe5 	.word	0x0800bfe5
 800bfdc:	0800bfe5 	.word	0x0800bfe5
 800bfe0:	0800bfe5 	.word	0x0800bfe5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bfe4:	bf00      	nop
  }

  return (USBD_OK);
 800bfe6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bc80      	pop	{r7}
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop

0800bff4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bffe:	6879      	ldr	r1, [r7, #4]
 800c000:	4808      	ldr	r0, [pc, #32]	; (800c024 <CDC_Receive_FS+0x30>)
 800c002:	f7fe fe46 	bl	800ac92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c006:	4807      	ldr	r0, [pc, #28]	; (800c024 <CDC_Receive_FS+0x30>)
 800c008:	f7fe fe85 	bl	800ad16 <USBD_CDC_ReceivePacket>
USB_Packet_Received(&Buf[0], Len[0]);
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4619      	mov	r1, r3
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7f6 fb1a 	bl	800264c <USB_Packet_Received>
  return (USBD_OK);
 800c018:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	200004d4 	.word	0x200004d4

0800c028 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c038:	4b0d      	ldr	r3, [pc, #52]	; (800c070 <CDC_Transmit_FS+0x48>)
 800c03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c03e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c04a:	2301      	movs	r3, #1
 800c04c:	e00b      	b.n	800c066 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c04e:	887b      	ldrh	r3, [r7, #2]
 800c050:	461a      	mov	r2, r3
 800c052:	6879      	ldr	r1, [r7, #4]
 800c054:	4806      	ldr	r0, [pc, #24]	; (800c070 <CDC_Transmit_FS+0x48>)
 800c056:	f7fe fe03 	bl	800ac60 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c05a:	4805      	ldr	r0, [pc, #20]	; (800c070 <CDC_Transmit_FS+0x48>)
 800c05c:	f7fe fe2c 	bl	800acb8 <USBD_CDC_TransmitPacket>
 800c060:	4603      	mov	r3, r0
 800c062:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c064:	7bfb      	ldrb	r3, [r7, #15]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	200004d4 	.word	0x200004d4

0800c074 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	6039      	str	r1, [r7, #0]
 800c07e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	2212      	movs	r2, #18
 800c084:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c086:	4b03      	ldr	r3, [pc, #12]	; (800c094 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c088:	4618      	mov	r0, r3
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bc80      	pop	{r7}
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	2000014c 	.word	0x2000014c

0800c098 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	4603      	mov	r3, r0
 800c0a0:	6039      	str	r1, [r7, #0]
 800c0a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2204      	movs	r2, #4
 800c0a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0aa:	4b03      	ldr	r3, [pc, #12]	; (800c0b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bc80      	pop	{r7}
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	20000160 	.word	0x20000160

0800c0bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	6039      	str	r1, [r7, #0]
 800c0c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0c8:	79fb      	ldrb	r3, [r7, #7]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d105      	bne.n	800c0da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	4907      	ldr	r1, [pc, #28]	; (800c0f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0d2:	4808      	ldr	r0, [pc, #32]	; (800c0f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0d4:	f7ff fe06 	bl	800bce4 <USBD_GetString>
 800c0d8:	e004      	b.n	800c0e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	4904      	ldr	r1, [pc, #16]	; (800c0f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0de:	4805      	ldr	r0, [pc, #20]	; (800c0f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0e0:	f7ff fe00 	bl	800bce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0e4:	4b02      	ldr	r3, [pc, #8]	; (800c0f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20000f98 	.word	0x20000f98
 800c0f4:	0800c890 	.word	0x0800c890

0800c0f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	4603      	mov	r3, r0
 800c100:	6039      	str	r1, [r7, #0]
 800c102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	4904      	ldr	r1, [pc, #16]	; (800c118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c108:	4804      	ldr	r0, [pc, #16]	; (800c11c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c10a:	f7ff fdeb 	bl	800bce4 <USBD_GetString>
  return USBD_StrDesc;
 800c10e:	4b02      	ldr	r3, [pc, #8]	; (800c118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c110:	4618      	mov	r0, r3
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20000f98 	.word	0x20000f98
 800c11c:	0800c8a4 	.word	0x0800c8a4

0800c120 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	4603      	mov	r3, r0
 800c128:	6039      	str	r1, [r7, #0]
 800c12a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	221a      	movs	r2, #26
 800c130:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c132:	f000 f843 	bl	800c1bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c136:	4b02      	ldr	r3, [pc, #8]	; (800c140 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	20000164 	.word	0x20000164

0800c144 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	6039      	str	r1, [r7, #0]
 800c14e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c150:	79fb      	ldrb	r3, [r7, #7]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d105      	bne.n	800c162 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	4907      	ldr	r1, [pc, #28]	; (800c178 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c15a:	4808      	ldr	r0, [pc, #32]	; (800c17c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c15c:	f7ff fdc2 	bl	800bce4 <USBD_GetString>
 800c160:	e004      	b.n	800c16c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	4904      	ldr	r1, [pc, #16]	; (800c178 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c166:	4805      	ldr	r0, [pc, #20]	; (800c17c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c168:	f7ff fdbc 	bl	800bce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c16c:	4b02      	ldr	r3, [pc, #8]	; (800c178 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	20000f98 	.word	0x20000f98
 800c17c:	0800c8b8 	.word	0x0800c8b8

0800c180 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	6039      	str	r1, [r7, #0]
 800c18a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c18c:	79fb      	ldrb	r3, [r7, #7]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d105      	bne.n	800c19e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	4907      	ldr	r1, [pc, #28]	; (800c1b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c196:	4808      	ldr	r0, [pc, #32]	; (800c1b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c198:	f7ff fda4 	bl	800bce4 <USBD_GetString>
 800c19c:	e004      	b.n	800c1a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	4904      	ldr	r1, [pc, #16]	; (800c1b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1a2:	4805      	ldr	r0, [pc, #20]	; (800c1b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1a4:	f7ff fd9e 	bl	800bce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1a8:	4b02      	ldr	r3, [pc, #8]	; (800c1b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20000f98 	.word	0x20000f98
 800c1b8:	0800c8c4 	.word	0x0800c8c4

0800c1bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1c2:	4b0f      	ldr	r3, [pc, #60]	; (800c200 <Get_SerialNum+0x44>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1c8:	4b0e      	ldr	r3, [pc, #56]	; (800c204 <Get_SerialNum+0x48>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1ce:	4b0e      	ldr	r3, [pc, #56]	; (800c208 <Get_SerialNum+0x4c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4413      	add	r3, r2
 800c1da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d009      	beq.n	800c1f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c1e2:	2208      	movs	r2, #8
 800c1e4:	4909      	ldr	r1, [pc, #36]	; (800c20c <Get_SerialNum+0x50>)
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 f814 	bl	800c214 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c1ec:	2204      	movs	r2, #4
 800c1ee:	4908      	ldr	r1, [pc, #32]	; (800c210 <Get_SerialNum+0x54>)
 800c1f0:	68b8      	ldr	r0, [r7, #8]
 800c1f2:	f000 f80f 	bl	800c214 <IntToUnicode>
  }
}
 800c1f6:	bf00      	nop
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	1ffff7e8 	.word	0x1ffff7e8
 800c204:	1ffff7ec 	.word	0x1ffff7ec
 800c208:	1ffff7f0 	.word	0x1ffff7f0
 800c20c:	20000166 	.word	0x20000166
 800c210:	20000176 	.word	0x20000176

0800c214 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c214:	b480      	push	{r7}
 800c216:	b087      	sub	sp, #28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	4613      	mov	r3, r2
 800c220:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c222:	2300      	movs	r3, #0
 800c224:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c226:	2300      	movs	r3, #0
 800c228:	75fb      	strb	r3, [r7, #23]
 800c22a:	e027      	b.n	800c27c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	0f1b      	lsrs	r3, r3, #28
 800c230:	2b09      	cmp	r3, #9
 800c232:	d80b      	bhi.n	800c24c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	0f1b      	lsrs	r3, r3, #28
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	7dfb      	ldrb	r3, [r7, #23]
 800c23c:	005b      	lsls	r3, r3, #1
 800c23e:	4619      	mov	r1, r3
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	440b      	add	r3, r1
 800c244:	3230      	adds	r2, #48	; 0x30
 800c246:	b2d2      	uxtb	r2, r2
 800c248:	701a      	strb	r2, [r3, #0]
 800c24a:	e00a      	b.n	800c262 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	0f1b      	lsrs	r3, r3, #28
 800c250:	b2da      	uxtb	r2, r3
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	005b      	lsls	r3, r3, #1
 800c256:	4619      	mov	r1, r3
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	440b      	add	r3, r1
 800c25c:	3237      	adds	r2, #55	; 0x37
 800c25e:	b2d2      	uxtb	r2, r2
 800c260:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	011b      	lsls	r3, r3, #4
 800c266:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c268:	7dfb      	ldrb	r3, [r7, #23]
 800c26a:	005b      	lsls	r3, r3, #1
 800c26c:	3301      	adds	r3, #1
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	4413      	add	r3, r2
 800c272:	2200      	movs	r2, #0
 800c274:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c276:	7dfb      	ldrb	r3, [r7, #23]
 800c278:	3301      	adds	r3, #1
 800c27a:	75fb      	strb	r3, [r7, #23]
 800c27c:	7dfa      	ldrb	r2, [r7, #23]
 800c27e:	79fb      	ldrb	r3, [r7, #7]
 800c280:	429a      	cmp	r2, r3
 800c282:	d3d3      	bcc.n	800c22c <IntToUnicode+0x18>
  }
}
 800c284:	bf00      	nop
 800c286:	bf00      	nop
 800c288:	371c      	adds	r7, #28
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bc80      	pop	{r7}
 800c28e:	4770      	bx	lr

0800c290 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a0d      	ldr	r2, [pc, #52]	; (800c2d4 <HAL_PCD_MspInit+0x44>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d113      	bne.n	800c2ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c2a2:	4b0d      	ldr	r3, [pc, #52]	; (800c2d8 <HAL_PCD_MspInit+0x48>)
 800c2a4:	69db      	ldr	r3, [r3, #28]
 800c2a6:	4a0c      	ldr	r2, [pc, #48]	; (800c2d8 <HAL_PCD_MspInit+0x48>)
 800c2a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c2ac:	61d3      	str	r3, [r2, #28]
 800c2ae:	4b0a      	ldr	r3, [pc, #40]	; (800c2d8 <HAL_PCD_MspInit+0x48>)
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	2103      	movs	r1, #3
 800c2be:	2014      	movs	r0, #20
 800c2c0:	f7f7 fe4b 	bl	8003f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c2c4:	2014      	movs	r0, #20
 800c2c6:	f7f7 fe64 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c2ca:	bf00      	nop
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	40005c00 	.word	0x40005c00
 800c2d8:	40021000 	.word	0x40021000

0800c2dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	f7fe fdc5 	bl	800ae82 <USBD_LL_SetupStage>
}
 800c2f8:	bf00      	nop
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c312:	78fa      	ldrb	r2, [r7, #3]
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	4613      	mov	r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	00db      	lsls	r3, r3, #3
 800c31e:	440b      	add	r3, r1
 800c320:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	78fb      	ldrb	r3, [r7, #3]
 800c328:	4619      	mov	r1, r3
 800c32a:	f7fe fdf7 	bl	800af1c <USBD_LL_DataOutStage>
}
 800c32e:	bf00      	nop
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b082      	sub	sp, #8
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	460b      	mov	r3, r1
 800c340:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c348:	78fa      	ldrb	r2, [r7, #3]
 800c34a:	6879      	ldr	r1, [r7, #4]
 800c34c:	4613      	mov	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	440b      	add	r3, r1
 800c356:	333c      	adds	r3, #60	; 0x3c
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	78fb      	ldrb	r3, [r7, #3]
 800c35c:	4619      	mov	r1, r3
 800c35e:	f7fe fe4e 	bl	800affe <USBD_LL_DataInStage>
}
 800c362:	bf00      	nop
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b082      	sub	sp, #8
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fe ff5e 	bl	800b23a <USBD_LL_SOF>
}
 800c37e:	bf00      	nop
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b084      	sub	sp, #16
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c38e:	2301      	movs	r3, #1
 800c390:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	2b02      	cmp	r3, #2
 800c398:	d001      	beq.n	800c39e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c39a:	f7f6 fe53 	bl	8003044 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3a4:	7bfa      	ldrb	r2, [r7, #15]
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fe ff0e 	bl	800b1ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe fec7 	bl	800b148 <USBD_LL_Reset>
}
 800c3ba:	bf00      	nop
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
	...

0800c3c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fe ff08 	bl	800b1e8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d005      	beq.n	800c3ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3e0:	4b04      	ldr	r3, [pc, #16]	; (800c3f4 <HAL_PCD_SuspendCallback+0x30>)
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	4a03      	ldr	r2, [pc, #12]	; (800c3f4 <HAL_PCD_SuspendCallback+0x30>)
 800c3e6:	f043 0306 	orr.w	r3, r3, #6
 800c3ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c3ec:	bf00      	nop
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	e000ed00 	.word	0xe000ed00

0800c3f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c406:	4618      	mov	r0, r3
 800c408:	f7fe ff02 	bl	800b210 <USBD_LL_Resume>
}
 800c40c:	bf00      	nop
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c41c:	4a28      	ldr	r2, [pc, #160]	; (800c4c0 <USBD_LL_Init+0xac>)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a26      	ldr	r2, [pc, #152]	; (800c4c0 <USBD_LL_Init+0xac>)
 800c428:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c42c:	4b24      	ldr	r3, [pc, #144]	; (800c4c0 <USBD_LL_Init+0xac>)
 800c42e:	4a25      	ldr	r2, [pc, #148]	; (800c4c4 <USBD_LL_Init+0xb0>)
 800c430:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c432:	4b23      	ldr	r3, [pc, #140]	; (800c4c0 <USBD_LL_Init+0xac>)
 800c434:	2208      	movs	r2, #8
 800c436:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c438:	4b21      	ldr	r3, [pc, #132]	; (800c4c0 <USBD_LL_Init+0xac>)
 800c43a:	2202      	movs	r2, #2
 800c43c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c43e:	4b20      	ldr	r3, [pc, #128]	; (800c4c0 <USBD_LL_Init+0xac>)
 800c440:	2200      	movs	r2, #0
 800c442:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c444:	4b1e      	ldr	r3, [pc, #120]	; (800c4c0 <USBD_LL_Init+0xac>)
 800c446:	2200      	movs	r2, #0
 800c448:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c44a:	4b1d      	ldr	r3, [pc, #116]	; (800c4c0 <USBD_LL_Init+0xac>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c450:	481b      	ldr	r0, [pc, #108]	; (800c4c0 <USBD_LL_Init+0xac>)
 800c452:	f7f8 f9d3 	bl	80047fc <HAL_PCD_Init>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c45c:	f7f6 fdf2 	bl	8003044 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c466:	2318      	movs	r3, #24
 800c468:	2200      	movs	r2, #0
 800c46a:	2100      	movs	r1, #0
 800c46c:	f7f9 fe47 	bl	80060fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c476:	2358      	movs	r3, #88	; 0x58
 800c478:	2200      	movs	r2, #0
 800c47a:	2180      	movs	r1, #128	; 0x80
 800c47c:	f7f9 fe3f 	bl	80060fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c486:	23c0      	movs	r3, #192	; 0xc0
 800c488:	2200      	movs	r2, #0
 800c48a:	2181      	movs	r1, #129	; 0x81
 800c48c:	f7f9 fe37 	bl	80060fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c496:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c49a:	2200      	movs	r2, #0
 800c49c:	2101      	movs	r1, #1
 800c49e:	f7f9 fe2e 	bl	80060fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2182      	movs	r1, #130	; 0x82
 800c4b0:	f7f9 fe25 	bl	80060fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	20001198 	.word	0x20001198
 800c4c4:	40005c00 	.word	0x40005c00

0800c4c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7f8 fa97 	bl	8004a12 <HAL_PCD_Start>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f94e 	bl	800c78c <USBD_Get_USB_Status>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	4608      	mov	r0, r1
 800c508:	4611      	mov	r1, r2
 800c50a:	461a      	mov	r2, r3
 800c50c:	4603      	mov	r3, r0
 800c50e:	70fb      	strb	r3, [r7, #3]
 800c510:	460b      	mov	r3, r1
 800c512:	70bb      	strb	r3, [r7, #2]
 800c514:	4613      	mov	r3, r2
 800c516:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c518:	2300      	movs	r3, #0
 800c51a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c51c:	2300      	movs	r3, #0
 800c51e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c526:	78bb      	ldrb	r3, [r7, #2]
 800c528:	883a      	ldrh	r2, [r7, #0]
 800c52a:	78f9      	ldrb	r1, [r7, #3]
 800c52c:	f7f8 fc0f 	bl	8004d4e <HAL_PCD_EP_Open>
 800c530:	4603      	mov	r3, r0
 800c532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c534:	7bfb      	ldrb	r3, [r7, #15]
 800c536:	4618      	mov	r0, r3
 800c538:	f000 f928 	bl	800c78c <USBD_Get_USB_Status>
 800c53c:	4603      	mov	r3, r0
 800c53e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c540:	7bbb      	ldrb	r3, [r7, #14]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	460b      	mov	r3, r1
 800c554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c55a:	2300      	movs	r3, #0
 800c55c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c564:	78fa      	ldrb	r2, [r7, #3]
 800c566:	4611      	mov	r1, r2
 800c568:	4618      	mov	r0, r3
 800c56a:	f7f8 fc56 	bl	8004e1a <HAL_PCD_EP_Close>
 800c56e:	4603      	mov	r3, r0
 800c570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c572:	7bfb      	ldrb	r3, [r7, #15]
 800c574:	4618      	mov	r0, r3
 800c576:	f000 f909 	bl	800c78c <USBD_Get_USB_Status>
 800c57a:	4603      	mov	r3, r0
 800c57c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c57e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	460b      	mov	r3, r1
 800c592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c598:	2300      	movs	r3, #0
 800c59a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5a2:	78fa      	ldrb	r2, [r7, #3]
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7f8 fd16 	bl	8004fd8 <HAL_PCD_EP_SetStall>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f000 f8ea 	bl	800c78c <USBD_Get_USB_Status>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5e0:	78fa      	ldrb	r2, [r7, #3]
 800c5e2:	4611      	mov	r1, r2
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7f8 fd57 	bl	8005098 <HAL_PCD_EP_ClrStall>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5ee:	7bfb      	ldrb	r3, [r7, #15]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 f8cb 	bl	800c78c <USBD_Get_USB_Status>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c616:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	da0c      	bge.n	800c63a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c620:	78fb      	ldrb	r3, [r7, #3]
 800c622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c626:	68f9      	ldr	r1, [r7, #12]
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	4613      	mov	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	00db      	lsls	r3, r3, #3
 800c632:	440b      	add	r3, r1
 800c634:	3302      	adds	r3, #2
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	e00b      	b.n	800c652 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c63a:	78fb      	ldrb	r3, [r7, #3]
 800c63c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c640:	68f9      	ldr	r1, [r7, #12]
 800c642:	4613      	mov	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4413      	add	r3, r2
 800c648:	00db      	lsls	r3, r3, #3
 800c64a:	440b      	add	r3, r1
 800c64c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c650:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c652:	4618      	mov	r0, r3
 800c654:	3714      	adds	r7, #20
 800c656:	46bd      	mov	sp, r7
 800c658:	bc80      	pop	{r7}
 800c65a:	4770      	bx	lr

0800c65c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	460b      	mov	r3, r1
 800c666:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c668:	2300      	movs	r3, #0
 800c66a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c66c:	2300      	movs	r3, #0
 800c66e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c676:	78fa      	ldrb	r2, [r7, #3]
 800c678:	4611      	mov	r1, r2
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7f8 fb42 	bl	8004d04 <HAL_PCD_SetAddress>
 800c680:	4603      	mov	r3, r0
 800c682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	4618      	mov	r0, r3
 800c688:	f000 f880 	bl	800c78c <USBD_Get_USB_Status>
 800c68c:	4603      	mov	r3, r0
 800c68e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c690:	7bbb      	ldrb	r3, [r7, #14]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b086      	sub	sp, #24
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	60f8      	str	r0, [r7, #12]
 800c6a2:	607a      	str	r2, [r7, #4]
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	72fb      	strb	r3, [r7, #11]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c6bc:	893b      	ldrh	r3, [r7, #8]
 800c6be:	7af9      	ldrb	r1, [r7, #11]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	f7f8 fc46 	bl	8004f52 <HAL_PCD_EP_Transmit>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6ca:	7dfb      	ldrb	r3, [r7, #23]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 f85d 	bl	800c78c <USBD_Get_USB_Status>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3718      	adds	r7, #24
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	607a      	str	r2, [r7, #4]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	72fb      	strb	r3, [r7, #11]
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c702:	893b      	ldrh	r3, [r7, #8]
 800c704:	7af9      	ldrb	r1, [r7, #11]
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	f7f8 fbcf 	bl	8004eaa <HAL_PCD_EP_Receive>
 800c70c:	4603      	mov	r3, r0
 800c70e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c710:	7dfb      	ldrb	r3, [r7, #23]
 800c712:	4618      	mov	r0, r3
 800c714:	f000 f83a 	bl	800c78c <USBD_Get_USB_Status>
 800c718:	4603      	mov	r3, r0
 800c71a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c71c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	460b      	mov	r3, r1
 800c730:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c738:	78fa      	ldrb	r2, [r7, #3]
 800c73a:	4611      	mov	r1, r2
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7f8 fbf1 	bl	8004f24 <HAL_PCD_EP_GetRxCount>
 800c742:	4603      	mov	r3, r0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c754:	4b02      	ldr	r3, [pc, #8]	; (800c760 <USBD_static_malloc+0x14>)
}
 800c756:	4618      	mov	r0, r3
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bc80      	pop	{r7}
 800c75e:	4770      	bx	lr
 800c760:	20001484 	.word	0x20001484

0800c764 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]

}
 800c76c:	bf00      	nop
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	bc80      	pop	{r7}
 800c774:	4770      	bx	lr

0800c776 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c776:	b480      	push	{r7}
 800c778:	b083      	sub	sp, #12
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	460b      	mov	r3, r1
 800c780:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c782:	bf00      	nop
 800c784:	370c      	adds	r7, #12
 800c786:	46bd      	mov	sp, r7
 800c788:	bc80      	pop	{r7}
 800c78a:	4770      	bx	lr

0800c78c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	4603      	mov	r3, r0
 800c794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c796:	2300      	movs	r3, #0
 800c798:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c79a:	79fb      	ldrb	r3, [r7, #7]
 800c79c:	2b03      	cmp	r3, #3
 800c79e:	d817      	bhi.n	800c7d0 <USBD_Get_USB_Status+0x44>
 800c7a0:	a201      	add	r2, pc, #4	; (adr r2, 800c7a8 <USBD_Get_USB_Status+0x1c>)
 800c7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a6:	bf00      	nop
 800c7a8:	0800c7b9 	.word	0x0800c7b9
 800c7ac:	0800c7bf 	.word	0x0800c7bf
 800c7b0:	0800c7c5 	.word	0x0800c7c5
 800c7b4:	0800c7cb 	.word	0x0800c7cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c7bc:	e00b      	b.n	800c7d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7be:	2302      	movs	r3, #2
 800c7c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c7c2:	e008      	b.n	800c7d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7c8:	e005      	b.n	800c7d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ce:	e002      	b.n	800c7d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7d4:	bf00      	nop
  }
  return usb_status;
 800c7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bc80      	pop	{r7}
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop

0800c7e4 <__libc_init_array>:
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	2600      	movs	r6, #0
 800c7e8:	4d0c      	ldr	r5, [pc, #48]	; (800c81c <__libc_init_array+0x38>)
 800c7ea:	4c0d      	ldr	r4, [pc, #52]	; (800c820 <__libc_init_array+0x3c>)
 800c7ec:	1b64      	subs	r4, r4, r5
 800c7ee:	10a4      	asrs	r4, r4, #2
 800c7f0:	42a6      	cmp	r6, r4
 800c7f2:	d109      	bne.n	800c808 <__libc_init_array+0x24>
 800c7f4:	f000 f830 	bl	800c858 <_init>
 800c7f8:	2600      	movs	r6, #0
 800c7fa:	4d0a      	ldr	r5, [pc, #40]	; (800c824 <__libc_init_array+0x40>)
 800c7fc:	4c0a      	ldr	r4, [pc, #40]	; (800c828 <__libc_init_array+0x44>)
 800c7fe:	1b64      	subs	r4, r4, r5
 800c800:	10a4      	asrs	r4, r4, #2
 800c802:	42a6      	cmp	r6, r4
 800c804:	d105      	bne.n	800c812 <__libc_init_array+0x2e>
 800c806:	bd70      	pop	{r4, r5, r6, pc}
 800c808:	f855 3b04 	ldr.w	r3, [r5], #4
 800c80c:	4798      	blx	r3
 800c80e:	3601      	adds	r6, #1
 800c810:	e7ee      	b.n	800c7f0 <__libc_init_array+0xc>
 800c812:	f855 3b04 	ldr.w	r3, [r5], #4
 800c816:	4798      	blx	r3
 800c818:	3601      	adds	r6, #1
 800c81a:	e7f2      	b.n	800c802 <__libc_init_array+0x1e>
 800c81c:	0800c8ec 	.word	0x0800c8ec
 800c820:	0800c8ec 	.word	0x0800c8ec
 800c824:	0800c8ec 	.word	0x0800c8ec
 800c828:	0800c8f0 	.word	0x0800c8f0

0800c82c <memcpy>:
 800c82c:	440a      	add	r2, r1
 800c82e:	4291      	cmp	r1, r2
 800c830:	f100 33ff 	add.w	r3, r0, #4294967295
 800c834:	d100      	bne.n	800c838 <memcpy+0xc>
 800c836:	4770      	bx	lr
 800c838:	b510      	push	{r4, lr}
 800c83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c83e:	4291      	cmp	r1, r2
 800c840:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c844:	d1f9      	bne.n	800c83a <memcpy+0xe>
 800c846:	bd10      	pop	{r4, pc}

0800c848 <memset>:
 800c848:	4603      	mov	r3, r0
 800c84a:	4402      	add	r2, r0
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d100      	bne.n	800c852 <memset+0xa>
 800c850:	4770      	bx	lr
 800c852:	f803 1b01 	strb.w	r1, [r3], #1
 800c856:	e7f9      	b.n	800c84c <memset+0x4>

0800c858 <_init>:
 800c858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85a:	bf00      	nop
 800c85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c85e:	bc08      	pop	{r3}
 800c860:	469e      	mov	lr, r3
 800c862:	4770      	bx	lr

0800c864 <_fini>:
 800c864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c866:	bf00      	nop
 800c868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c86a:	bc08      	pop	{r3}
 800c86c:	469e      	mov	lr, r3
 800c86e:	4770      	bx	lr
