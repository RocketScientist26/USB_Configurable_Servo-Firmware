
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800c0f4  0800c0f4  0001c0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c170  0800c170  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c170  0800c170  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c170  0800c170  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c170  0800c170  0001c170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c174  0800c174  0001c174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800c178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014cc  200001a8  0800c31c  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  0800c31c  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b58  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049fb  00000000  00000000  00038d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003d720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  0003ec98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0ee  00000000  00000000  0003ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d270  00000000  00000000  0005d0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936f8  00000000  00000000  0007a31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010da16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000559c  00000000  00000000  0010da68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c0dc 	.word	0x0800c0dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	0800c0dc 	.word	0x0800c0dc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <Potentiometer_Ready>:
extern uint8_t usb_rq;
extern uint8_t usb_rq_sett_revert_flash;
extern uint8_t usb_rq_stat_motor;
extern uint8_t usb_rq_stat_phold;

void Potentiometer_Ready(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	pid_input = potentiometer_position;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <Potentiometer_Ready+0x80>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <Potentiometer_Ready+0x84>)
 800074a:	6013      	str	r3, [r2, #0]
	if(!pid_running){
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <Potentiometer_Ready+0x88>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d133      	bne.n	80007bc <Potentiometer_Ready+0x7c>
		if(motor_running){
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <Potentiometer_Ready+0x8c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d02f      	beq.n	80007bc <Potentiometer_Ready+0x7c>
			if((potentiometer_position <= potentiometer_min) && (Motor_Get() < 0)){
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <Potentiometer_Ready+0x90>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fdad 	bl	80002c0 <__aeabi_i2f>
 8000766:	4602      	mov	r2, r0
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <Potentiometer_Ready+0x80>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4610      	mov	r0, r2
 8000770:	f7ff ffac 	bl	80006cc <__aeabi_fcmpge>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d008      	beq.n	800078c <Potentiometer_Ready+0x4c>
 800077a:	f000 fb1f 	bl	8000dbc <Motor_Get>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	da03      	bge.n	800078c <Potentiometer_Ready+0x4c>
				Motor_Set(0);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fab1 	bl	8000cec <Motor_Set>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 800078a:	e017      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <Potentiometer_Ready+0x94>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd95 	bl	80002c0 <__aeabi_i2f>
 8000796:	4602      	mov	r2, r0
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <Potentiometer_Ready+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f7ff ff8a 	bl	80006b8 <__aeabi_fcmple>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <Potentiometer_Ready+0x6c>
}
 80007aa:	e007      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 80007ac:	f000 fb06 	bl	8000dbc <Motor_Get>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	dd02      	ble.n	80007bc <Potentiometer_Ready+0x7c>
				Motor_Set(0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fa98 	bl	8000cec <Motor_Set>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001f8 	.word	0x200001f8
 80007c4:	200001dc 	.word	0x200001dc
 80007c8:	200001d8 	.word	0x200001d8
 80007cc:	200001c8 	.word	0x200001c8
 80007d0:	200001ec 	.word	0x200001ec
 80007d4:	200001ee 	.word	0x200001ee

080007d8 <PID_Ready>:
void PID_Ready(float output){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff87 	bl	80006f4 <__aeabi_f2iz>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fa7e 	bl	8000cec <Motor_Set>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <App_Init>:

void App_Init(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	Settings_Read();
 80007fc:	f000 fde0 	bl	80013c0 <Settings_Read>
	USB_Init();
 8000800:	f001 fb56 	bl	8001eb0 <USB_Init>
	Signal_Init();
 8000804:	f001 fafe 	bl	8001e04 <Signal_Init>
	Potentiometer_Init();
 8000808:	f000 fdc2 	bl	8001390 <Potentiometer_Init>
	Motor_Init();
 800080c:	f000 fb14 	bl	8000e38 <Motor_Init>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <App_Loop>:
void App_Loop(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	switch(usb_rq){
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <App_Loop+0xf8>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d002      	beq.n	8000826 <App_Loop+0x12>
 8000820:	2b02      	cmp	r3, #2
 8000822:	d019      	beq.n	8000858 <App_Loop+0x44>
 8000824:	e06e      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_CONF:
			if(usb_rq_sett_revert_flash == USB_SETTINGS_REVERT){
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <App_Loop+0xfc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d105      	bne.n	800083a <App_Loop+0x26>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <App_Loop+0xfc>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
				//Read from flash
				Settings_Read();
 8000834:	f000 fdc4 	bl	80013c0 <Settings_Read>
 8000838:	e008      	b.n	800084c <App_Loop+0x38>
			}else if(usb_rq_sett_revert_flash == USB_SETTINGS_FLASH){
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <App_Loop+0xfc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d104      	bne.n	800084c <App_Loop+0x38>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <App_Loop+0xfc>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
				//Write to flash
				Settings_Write();
 8000848:	f001 f8a0 	bl	800198c <Settings_Write>
			}
			USB_Send_Config();
 800084c:	f001 fbc2 	bl	8001fd4 <USB_Send_Config>
			usb_rq = USB_RQ_NONE;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <App_Loop+0xf8>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e055      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_STAT:
			if(usb_rq_stat_motor != 0){
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <App_Loop+0x100>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d033      	beq.n	80008c8 <App_Loop+0xb4>
				//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout
				if(usb_rq_stat_motor == 1){//Backward
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <App_Loop+0x100>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d112      	bne.n	800088e <App_Loop+0x7a>
					if(potentiometer_position > potentiometer_min){
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <App_Loop+0x104>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fd27 	bl	80002c0 <__aeabi_i2f>
 8000872:	4602      	mov	r2, r0
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <App_Loop+0x108>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f7ff ff12 	bl	80006a4 <__aeabi_fcmplt>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01a      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(-1000);
 8000886:	4826      	ldr	r0, [pc, #152]	; (8000920 <App_Loop+0x10c>)
 8000888:	f000 fa30 	bl	8000cec <Motor_Set>
 800088c:	e016      	b.n	80008bc <App_Loop+0xa8>
					}
				}else if(usb_rq_stat_motor == 2){//Forward
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <App_Loop+0x100>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d112      	bne.n	80008bc <App_Loop+0xa8>
					if(potentiometer_position < potentiometer_max){
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <App_Loop+0x110>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd10 	bl	80002c0 <__aeabi_i2f>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <App_Loop+0x108>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff ff19 	bl	80006e0 <__aeabi_fcmpgt>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d003      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f000 fa18 	bl	8000cec <Motor_Set>
					}
				}
				motor_systick = 0;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <App_Loop+0x114>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
				usb_rq_stat_motor = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <App_Loop+0x100>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
			}
			if(usb_rq_stat_phold == 1){
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <App_Loop+0x118>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d109      	bne.n	80008e4 <App_Loop+0xd0>
				usb_rq_stat_phold = 0;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <App_Loop+0x118>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
				if(!pid_running){//Run pid with signal timeout
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <App_Loop+0x11c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10c      	bne.n	80008f8 <App_Loop+0xe4>
					PID_Start();
 80008de:	f000 fce9 	bl	80012b4 <PID_Start>
 80008e2:	e009      	b.n	80008f8 <App_Loop+0xe4>
				}
			}else if(signal_ignore && pid_running){
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <App_Loop+0x120>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d005      	beq.n	80008f8 <App_Loop+0xe4>
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <App_Loop+0x11c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <App_Loop+0xe4>
				PID_Stop();
 80008f4:	f000 fd00 	bl	80012f8 <PID_Stop>
			}
			USB_Send_Status();
 80008f8:	f001 fd3a 	bl	8002370 <USB_Send_Status>
			usb_rq = USB_RQ_NONE;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <App_Loop+0xf8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
		break;
 8000902:	bf00      	nop
	}
	LED_Update();
 8000904:	f000 f992 	bl	8000c2c <LED_Update>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000250 	.word	0x20000250
 8000910:	20000251 	.word	0x20000251
 8000914:	20000252 	.word	0x20000252
 8000918:	200001ec 	.word	0x200001ec
 800091c:	200001f8 	.word	0x200001f8
 8000920:	fffffc18 	.word	0xfffffc18
 8000924:	200001ee 	.word	0x200001ee
 8000928:	200001c9 	.word	0x200001c9
 800092c:	20000253 	.word	0x20000253
 8000930:	200001d8 	.word	0x200001d8
 8000934:	2000023c 	.word	0x2000023c

08000938 <Flash_Read>:
#include "main.h"
#include "flash.h"

void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000948:	e00b      	b.n	8000962 <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	4413      	add	r3, r2
 8000958:	780a      	ldrb	r2, [r1, #0]
 800095a:	701a      	strb	r2, [r3, #0]
		i++;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	d1ef      	bne.n	800094a <Flash_Read+0x12>
	}
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	371c      	adds	r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <Flash_Write>:
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 8000976:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8000994:	f003 f818 	bl	80039c8 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8000998:	f107 0210 	add.w	r2, r7, #16
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 f8f8 	bl	8003b98 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80009c0:	e027      	b.n	8000a12 <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80009c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	18d0      	adds	r0, r2, r3
				((uint32_t)data[i+3]<<24)|
 80009c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009ca:	3303      	adds	r3, #3
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	061a      	lsls	r2, r3, #24
				((uint32_t)data[i+2]<<16)|
 80009d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009d6:	3302      	adds	r3, #2
 80009d8:	68f9      	ldr	r1, [r7, #12]
 80009da:	440b      	add	r3, r1
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	041b      	lsls	r3, r3, #16
				((uint32_t)data[i+3]<<24)|
 80009e0:	431a      	orrs	r2, r3
				((uint32_t)data[i+1]<<8)|
 80009e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009e4:	3301      	adds	r3, #1
 80009e6:	68f9      	ldr	r1, [r7, #12]
 80009e8:	440b      	add	r3, r1
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	021b      	lsls	r3, r3, #8
				((uint32_t)data[i+2]<<16)|
 80009ee:	4313      	orrs	r3, r2
				(uint32_t)data[i]
 80009f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009f2:	68f9      	ldr	r1, [r7, #12]
 80009f4:	440a      	add	r2, r1
 80009f6:	7812      	ldrb	r2, [r2, #0]
				((uint32_t)data[i+1]<<8)|
 80009f8:	4313      	orrs	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80009fa:	2200      	movs	r2, #0
 80009fc:	4698      	mov	r8, r3
 80009fe:	4691      	mov	r9, r2
 8000a00:	4642      	mov	r2, r8
 8000a02:	464b      	mov	r3, r9
 8000a04:	4601      	mov	r1, r0
 8000a06:	2002      	movs	r0, #2
 8000a08:	f002 ff6e 	bl	80038e8 <HAL_FLASH_Program>
		);
		i+=4;
 8000a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a0e:	3304      	adds	r3, #4
 8000a10:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 8000a12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d1d2      	bne.n	80009c2 <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 8000a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d03f      	beq.n	8000aa2 <Flash_Write+0x12c>
		uint32_t wdata = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 8000a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d114      	bne.n	8000a56 <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i+2]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i]<<8);
 8000a2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a2e:	3302      	adds	r3, #2
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	061a      	lsls	r2, r3, #24
 8000a38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	440b      	add	r3, r1
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	041b      	lsls	r3, r3, #16
 8000a44:	431a      	orrs	r2, r3
 8000a46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a48:	68f9      	ldr	r1, [r7, #12]
 8000a4a:	440b      	add	r3, r1
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	4313      	orrs	r3, r2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a54:	e019      	b.n	8000a8a <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 8000a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d10d      	bne.n	8000a78 <Flash_Write+0x102>
			wdata = ((uint32_t)data[i+1]<<24)|((uint32_t)data[i]<<16);
 8000a5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a5e:	3301      	adds	r3, #1
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	061a      	lsls	r2, r3, #24
 8000a68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	041b      	lsls	r3, r3, #16
 8000a72:	4313      	orrs	r3, r2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a76:	e008      	b.n	8000a8a <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 8000a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d105      	bne.n	8000a8a <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 8000a7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	061b      	lsls	r3, r3, #24
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 8000a8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	18d1      	adds	r1, r2, r3
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	2200      	movs	r2, #0
 8000a94:	461c      	mov	r4, r3
 8000a96:	4615      	mov	r5, r2
 8000a98:	4622      	mov	r2, r4
 8000a9a:	462b      	mov	r3, r5
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f002 ff23 	bl	80038e8 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8000aa2:	f002 ffb7 	bl	8003a14 <HAL_FLASH_Lock>
}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	; 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000ab0 <General_Copy_32_Bit>:
#include "main.h"
#include "general.h"

void General_Copy_32_Bit(uint32_t address_to, uint32_t address_from){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000abe:	e00b      	b.n	8000ad8 <General_Copy_32_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000ac0:	7bfa      	ldrb	r2, [r7, #15]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	7bfa      	ldrb	r2, [r7, #15]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	780a      	ldrb	r2, [r1, #0]
 8000ad0:	701a      	strb	r2, [r3, #0]
		i++;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d1f0      	bne.n	8000ac0 <General_Copy_32_Bit+0x10>
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <General_Copy_16_Bit>:
void General_Copy_16_Bit(uint32_t address_to, uint32_t address_from){
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000af8:	e00b      	b.n	8000b12 <General_Copy_16_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	780a      	ldrb	r2, [r1, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
		i++;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d1f0      	bne.n	8000afa <General_Copy_16_Bit+0x10>
	}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <HAL_ADC_ConvCpltCallback>:
#include "motor.h"
#include "signal.h"
#include "usb.h"
#include "led.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_ADC_ConvCpltCallback+0x20>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 8000b36:	f000 fbef 	bl	8001318 <Potentiometer_ADC_Interrupt>
    }
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012400 	.word	0x40012400

08000b48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d102      	bne.n	8000b60 <HAL_TIM_PeriodElapsedCallback+0x18>
		PID_Timer_Interrupt();
 8000b5a:	f000 f995 	bl	8000e88 <PID_Timer_Interrupt>
	}
	else if(htim->Instance == TIM4){
		Signal_Timer_Interrupt();
	}
}
 8000b5e:	e006      	b.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x26>
	else if(htim->Instance == TIM4){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x26>
		Signal_Timer_Interrupt();
 8000b6a:	f001 f835 	bl	8001bd8 <Signal_Timer_Interrupt>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40000400 	.word	0x40000400
 8000b7c:	40000800 	.word	0x40000800

08000b80 <Interrupts_SysTick>:

void Interrupts_SysTick(){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	Motor_SysTick_Interrupt();
 8000b84:	f000 f890 	bl	8000ca8 <Motor_SysTick_Interrupt>
	Signal_SysTick_Interrupt();
 8000b88:	f000 ffe2 	bl	8001b50 <Signal_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 8000b8c:	f000 f818 	bl	8000bc0 <LED_SysTick_Interrupt>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_EXTI_Callback+0x18>
 8000ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_EXTI_Callback+0x1e>
		break;
		case USB_DET_Pin:
			USB_Det_Interrupt();
		break;
	}
}
 8000baa:	e005      	b.n	8000bb8 <HAL_GPIO_EXTI_Callback+0x24>
			Signal_Interrupt();
 8000bac:	f001 f820 	bl	8001bf0 <Signal_Interrupt>
		break;
 8000bb0:	e002      	b.n	8000bb8 <HAL_GPIO_EXTI_Callback+0x24>
			USB_Det_Interrupt();
 8000bb2:	f001 f963 	bl	8001e7c <USB_Det_Interrupt>
		break;
 8000bb6:	bf00      	nop
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <LED_SysTick_Interrupt>:

uint8_t led_mode = 0;
uint8_t led_position_changed = 0;
uint8_t led_systick = 0;

void LED_SysTick_Interrupt(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	if(led_mode == LED_MODE_POSITION_CHANGE){
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <LED_SysTick_Interrupt+0x30>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d10f      	bne.n	8000bec <LED_SysTick_Interrupt+0x2c>
		led_systick++;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <LED_SysTick_Interrupt+0x34>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <LED_SysTick_Interrupt+0x34>)
 8000bd6:	701a      	strb	r2, [r3, #0]
		if(led_systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <LED_SysTick_Interrupt+0x34>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b13      	cmp	r3, #19
 8000bde:	d905      	bls.n	8000bec <LED_SysTick_Interrupt+0x2c>
			LED_Set(OFF);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f000 f809 	bl	8000bf8 <LED_Set>
			led_systick = 0;
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <LED_SysTick_Interrupt+0x34>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200001c4 	.word	0x200001c4
 8000bf4:	200001c6 	.word	0x200001c6

08000bf8 <LED_Set>:

void LED_Set(uint8_t state){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	if(state == ON){
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d105      	bne.n	8000c14 <LED_Set+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <LED_Set+0x30>)
 8000c0e:	f003 fa06 	bl	800401e <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 8000c12:	e004      	b.n	8000c1e <LED_Set+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <LED_Set+0x30>)
 8000c1a:	f003 fa00 	bl	800401e <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010800 	.word	0x40010800

08000c2c <LED_Update>:
void LED_Update(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	switch(led_mode){
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <LED_Update+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d82a      	bhi.n	8000c8e <LED_Update+0x62>
 8000c38:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <LED_Update+0x14>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000c51 	.word	0x08000c51
 8000c44:	08000c59 	.word	0x08000c59
 8000c48:	08000c61 	.word	0x08000c61
 8000c4c:	08000c79 	.word	0x08000c79
		case LED_MODE_OFF:
			LED_Set(OFF);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff ffd1 	bl	8000bf8 <LED_Set>
		break;
 8000c56:	e01a      	b.n	8000c8e <LED_Update+0x62>
		case LED_MODE_POWER:
			LED_Set(ON);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff ffcd 	bl	8000bf8 <LED_Set>
		break;
 8000c5e:	e016      	b.n	8000c8e <LED_Update+0x62>
		case LED_MODE_SIGNAL:
			if(pid_running){
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <LED_Update+0x70>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <LED_Update+0x44>
				LED_Set(ON);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff ffc5 	bl	8000bf8 <LED_Set>
			}else{
				LED_Set(OFF);
			}
		break;
 8000c6e:	e00e      	b.n	8000c8e <LED_Update+0x62>
				LED_Set(OFF);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff ffc1 	bl	8000bf8 <LED_Set>
		break;
 8000c76:	e00a      	b.n	8000c8e <LED_Update+0x62>
		case LED_MODE_POSITION_CHANGE:
			if(led_position_changed){
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <LED_Update+0x74>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <LED_Update+0x60>
				led_systick = 0;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <LED_Update+0x78>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
				LED_Set(ON);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ffb6 	bl	8000bf8 <LED_Set>
			}
		break;
 8000c8c:	bf00      	nop
	}
	led_position_changed = 0;
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <LED_Update+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200001c4 	.word	0x200001c4
 8000c9c:	200001d8 	.word	0x200001d8
 8000ca0:	200001c5 	.word	0x200001c5
 8000ca4:	200001c6 	.word	0x200001c6

08000ca8 <Motor_SysTick_Interrupt>:
uint8_t motor_invert = MOTOR_NORMAL;
uint16_t motor_max_power = 1000;
uint8_t motor_running = 0;
uint8_t motor_systick = 0;

void Motor_SysTick_Interrupt(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	if(!pid_running){
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <Motor_SysTick_Interrupt+0x38>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d113      	bne.n	8000cdc <Motor_SysTick_Interrupt+0x34>
		if(motor_running){
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <Motor_SysTick_Interrupt+0x3c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d00f      	beq.n	8000cdc <Motor_SysTick_Interrupt+0x34>
			motor_systick++;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <Motor_SysTick_Interrupt+0x40>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <Motor_SysTick_Interrupt+0x40>)
 8000cc6:	701a      	strb	r2, [r3, #0]
			if(motor_systick == MOTOR_USB_TEST_TIMEOUT_MS){
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <Motor_SysTick_Interrupt+0x40>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b32      	cmp	r3, #50	; 0x32
 8000cce:	d105      	bne.n	8000cdc <Motor_SysTick_Interrupt+0x34>
				Motor_Set(0);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 f80b 	bl	8000cec <Motor_Set>
				motor_systick = 0;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <Motor_SysTick_Interrupt+0x40>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200001d8 	.word	0x200001d8
 8000ce4:	200001c8 	.word	0x200001c8
 8000ce8:	200001c9 	.word	0x200001c9

08000cec <Motor_Set>:

void Motor_Set(int16_t strength){//-1000 0 1000 Strength
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
	if(motor_invert == MOTOR_INVERT){
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <Motor_Set+0xc0>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d103      	bne.n	8000d06 <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	425b      	negs	r3, r3
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	80fb      	strh	r3, [r7, #6]
	}

	if(strength == 0){
 8000d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d110      	bne.n	8000d30 <Motor_Set+0x44>
		TIM2 -> CCR1 = 1000;
 8000d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d16:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 0;
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <Motor_Set+0xc4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		motor_systick = 0;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <Motor_Set+0xc8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
		TIM2 -> CCR2 = 1000;
		motor_running = 1;
	}
}
 8000d2e:	e038      	b.n	8000da2 <Motor_Set+0xb6>
	}else if(strength < 0){
 8000d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da18      	bge.n	8000d6a <Motor_Set+0x7e>
		TIM2 -> CCR1 = 1000;
 8000d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000 + (strength / (1000 / motor_max_power));
 8000d42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <Motor_Set+0xcc>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d50:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d54:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d58:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000d5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <Motor_Set+0xc4>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
}
 8000d68:	e01b      	b.n	8000da2 <Motor_Set+0xb6>
	}else if(strength > 0){
 8000d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dd17      	ble.n	8000da2 <Motor_Set+0xb6>
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
 8000d72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <Motor_Set+0xcc>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d80:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d88:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9a:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <Motor_Set+0xc4>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	200001c7 	.word	0x200001c7
 8000db0:	200001c8 	.word	0x200001c8
 8000db4:	200001c9 	.word	0x200001c9
 8000db8:	20000000 	.word	0x20000000

08000dbc <Motor_Get>:
int16_t Motor_Get(){
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
	if(TIM2 -> CCR1 != 1000){
 8000dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dca:	d013      	beq.n	8000df4 <Motor_Get+0x38>
		return (1000 - (int16_t)(TIM2 -> CCR1)) * (1000 / motor_max_power);
 8000dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <Motor_Get+0x78>)
 8000ddc:	8812      	ldrh	r2, [r2, #0]
 8000dde:	4611      	mov	r1, r2
 8000de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000de4:	fb92 f2f1 	sdiv	r2, r2, r1
 8000de8:	b292      	uxth	r2, r2
 8000dea:	fb02 f303 	mul.w	r3, r2, r3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	e01a      	b.n	8000e2a <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 8000df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dfe:	d013      	beq.n	8000e28 <Motor_Get+0x6c>
		return ((int16_t)(TIM2 -> CCR2) - 1000) * (1000 / motor_max_power);
 8000e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <Motor_Get+0x78>)
 8000e10:	8812      	ldrh	r2, [r2, #0]
 8000e12:	4611      	mov	r1, r2
 8000e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e18:	fb92 f2f1 	sdiv	r2, r2, r1
 8000e1c:	b292      	uxth	r2, r2
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	e000      	b.n	8000e2a <Motor_Get+0x6e>
	}
	return 0;
 8000e28:	2300      	movs	r3, #0
} 
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000000 	.word	0x20000000

08000e38 <Motor_Init>:
void Motor_Init(){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4804      	ldr	r0, [pc, #16]	; (8000e50 <Motor_Init+0x18>)
 8000e40:	f005 fcd0 	bl	80067e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e44:	2104      	movs	r1, #4
 8000e46:	4802      	ldr	r0, [pc, #8]	; (8000e50 <Motor_Init+0x18>)
 8000e48:	f005 fccc 	bl	80067e4 <HAL_TIM_PWM_Start>
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200003d0 	.word	0x200003d0

08000e54 <PID_Timer_Stop>:
float pid_setpoint = 2047;
//Runtime variables
float pid_last_input = 0;
float pid_output_sum = 0;

void PID_Timer_Stop(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <PID_Timer_Stop+0x10>)
 8000e5a:	f005 fc3d 	bl	80066d8 <HAL_TIM_Base_Stop_IT>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000418 	.word	0x20000418

08000e68 <PID_Timer_Restart>:
void PID_Timer_Restart(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <PID_Timer_Restart+0x1c>)
 8000e6e:	f005 fc33 	bl	80066d8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <PID_Timer_Restart+0x1c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 8000e7a:	4802      	ldr	r0, [pc, #8]	; (8000e84 <PID_Timer_Restart+0x1c>)
 8000e7c:	f005 fbda 	bl	8006634 <HAL_TIM_Base_Start_IT>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000418 	.word	0x20000418

08000e88 <PID_Timer_Interrupt>:
void PID_Timer_Interrupt(){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	PID_Compute();
 8000e8c:	f000 f838 	bl	8000f00 <PID_Compute>
	PID_Ready(pid_output);
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <PID_Timer_Interrupt+0x1c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc9f 	bl	80007d8 <PID_Ready>
	PID_Timer_Restart();
 8000e9a:	f7ff ffe5 	bl	8000e68 <PID_Timer_Restart>
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200001e0 	.word	0x200001e0

08000ea8 <PID_Get_Sampling_Time>:

uint16_t PID_Get_Sampling_Time(){
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <PID_Get_Sampling_Time+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <PID_Get_Sampling_Time+0x20>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	095b      	lsrs	r3, r3, #5
 8000eba:	b29b      	uxth	r3, r3
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	20000418 	.word	0x20000418
 8000ec8:	51eb851f 	.word	0x51eb851f

08000ecc <PID_Set_Sampling_Time>:
void PID_Set_Sampling_Time(uint16_t ms){
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	2264      	movs	r2, #100	; 0x64
 8000eda:	fb03 f202 	mul.w	r2, r3, r2
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <PID_Set_Sampling_Time+0x30>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	2264      	movs	r2, #100	; 0x64
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <PID_Set_Sampling_Time+0x30>)
 8000ef0:	60da      	str	r2, [r3, #12]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	20000418 	.word	0x20000418

08000f00 <PID_Compute>:
void PID_Compute(){
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
	float input = pid_input;
 8000f06:	4b94      	ldr	r3, [pc, #592]	; (8001158 <PID_Compute+0x258>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60bb      	str	r3, [r7, #8]
	float error = pid_setpoint - input;
 8000f0c:	4b93      	ldr	r3, [pc, #588]	; (800115c <PID_Compute+0x25c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff f91e 	bl	8000154 <__aeabi_fsub>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	607b      	str	r3, [r7, #4]
	float input_d = (input - pid_last_input);
 8000f1c:	4b90      	ldr	r3, [pc, #576]	; (8001160 <PID_Compute+0x260>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	68b8      	ldr	r0, [r7, #8]
 8000f24:	f7ff f916 	bl	8000154 <__aeabi_fsub>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	603b      	str	r3, [r7, #0]
	float output = 0;
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]

	if(error >= pid_split_1){
 8000f32:	4b8c      	ldr	r3, [pc, #560]	; (8001164 <PID_Compute+0x264>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff f9c2 	bl	80002c0 <__aeabi_i2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fbc3 	bl	80006cc <__aeabi_fcmpge>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d074      	beq.n	8001036 <PID_Compute+0x136>
		pid_output_sum += pid_ki_1 * error;
 8000f4c:	4b86      	ldr	r3, [pc, #536]	; (8001168 <PID_Compute+0x268>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa08 	bl	8000368 <__aeabi_fmul>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b83      	ldr	r3, [pc, #524]	; (800116c <PID_Compute+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f7ff f8f8 	bl	8000158 <__addsf3>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b7f      	ldr	r3, [pc, #508]	; (800116c <PID_Compute+0x26c>)
 8000f6e:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8000f70:	4b7f      	ldr	r3, [pc, #508]	; (8001170 <PID_Compute+0x270>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d110      	bne.n	8000f9a <PID_Compute+0x9a>
			pid_output_sum -= pid_kp_1 * input_d;
 8000f78:	4b7c      	ldr	r3, [pc, #496]	; (800116c <PID_Compute+0x26c>)
 8000f7a:	681c      	ldr	r4, [r3, #0]
 8000f7c:	4b7d      	ldr	r3, [pc, #500]	; (8001174 <PID_Compute+0x274>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f9f0 	bl	8000368 <__aeabi_fmul>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff f8e1 	bl	8000154 <__aeabi_fsub>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b75      	ldr	r3, [pc, #468]	; (800116c <PID_Compute+0x26c>)
 8000f98:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 8000f9a:	4b74      	ldr	r3, [pc, #464]	; (800116c <PID_Compute+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4976      	ldr	r1, [pc, #472]	; (8001178 <PID_Compute+0x278>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fb9d 	bl	80006e0 <__aeabi_fcmpgt>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <PID_Compute+0xb4>
			pid_output_sum = 1000.0f;
 8000fac:	4b6f      	ldr	r3, [pc, #444]	; (800116c <PID_Compute+0x26c>)
 8000fae:	4a72      	ldr	r2, [pc, #456]	; (8001178 <PID_Compute+0x278>)
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e00b      	b.n	8000fcc <PID_Compute+0xcc>
		}else if(pid_output_sum < -1000.0f){
 8000fb4:	4b6d      	ldr	r3, [pc, #436]	; (800116c <PID_Compute+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4970      	ldr	r1, [pc, #448]	; (800117c <PID_Compute+0x27c>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fb72 	bl	80006a4 <__aeabi_fcmplt>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <PID_Compute+0xcc>
			pid_output_sum = -1000.0f;
 8000fc6:	4b69      	ldr	r3, [pc, #420]	; (800116c <PID_Compute+0x26c>)
 8000fc8:	4a6c      	ldr	r2, [pc, #432]	; (800117c <PID_Compute+0x27c>)
 8000fca:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8000fcc:	4b68      	ldr	r3, [pc, #416]	; (8001170 <PID_Compute+0x270>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d107      	bne.n	8000fe4 <PID_Compute+0xe4>
			output = pid_kp_1 * error;
 8000fd4:	4b67      	ldr	r3, [pc, #412]	; (8001174 <PID_Compute+0x274>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff f9c4 	bl	8000368 <__aeabi_fmul>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_1 * input_d;
 8000fe4:	4b61      	ldr	r3, [pc, #388]	; (800116c <PID_Compute+0x26c>)
 8000fe6:	681c      	ldr	r4, [r3, #0]
 8000fe8:	4b65      	ldr	r3, [pc, #404]	; (8001180 <PID_Compute+0x280>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6839      	ldr	r1, [r7, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff f9ba 	bl	8000368 <__aeabi_fmul>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff f8ab 	bl	8000154 <__aeabi_fsub>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4619      	mov	r1, r3
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff f8a8 	bl	8000158 <__addsf3>
 8001008:	4603      	mov	r3, r0
 800100a:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800100c:	495a      	ldr	r1, [pc, #360]	; (8001178 <PID_Compute+0x278>)
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff fb66 	bl	80006e0 <__aeabi_fcmpgt>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <PID_Compute+0x120>
			output = 1000.0f;
 800101a:	4b57      	ldr	r3, [pc, #348]	; (8001178 <PID_Compute+0x278>)
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e12c      	b.n	800127a <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001020:	4956      	ldr	r1, [pc, #344]	; (800117c <PID_Compute+0x27c>)
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff fb3e 	bl	80006a4 <__aeabi_fcmplt>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8125 	beq.w	800127a <PID_Compute+0x37a>
			output = -1000.0f;
 8001030:	4b52      	ldr	r3, [pc, #328]	; (800117c <PID_Compute+0x27c>)
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e121      	b.n	800127a <PID_Compute+0x37a>
		}
	}else if((error < pid_split_1) && (error >= pid_split_2)){
 8001036:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <PID_Compute+0x264>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f940 	bl	80002c0 <__aeabi_i2f>
 8001040:	4603      	mov	r3, r0
 8001042:	4619      	mov	r1, r3
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fb2d 	bl	80006a4 <__aeabi_fcmplt>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80a1 	beq.w	8001194 <PID_Compute+0x294>
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <PID_Compute+0x284>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f932 	bl	80002c0 <__aeabi_i2f>
 800105c:	4603      	mov	r3, r0
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fb33 	bl	80006cc <__aeabi_fcmpge>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 8093 	beq.w	8001194 <PID_Compute+0x294>
		pid_output_sum += pid_ki_2 * error;
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <PID_Compute+0x288>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f977 	bl	8000368 <__aeabi_fmul>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <PID_Compute+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f7ff f867 	bl	8000158 <__addsf3>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <PID_Compute+0x26c>)
 8001090:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <PID_Compute+0x270>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d110      	bne.n	80010bc <PID_Compute+0x1bc>
			pid_output_sum -= pid_kp_2 * input_d;
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <PID_Compute+0x26c>)
 800109c:	681c      	ldr	r4, [r3, #0]
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <PID_Compute+0x28c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f95f 	bl	8000368 <__aeabi_fmul>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4619      	mov	r1, r3
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff f850 	bl	8000154 <__aeabi_fsub>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <PID_Compute+0x26c>)
 80010ba:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <PID_Compute+0x26c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	492d      	ldr	r1, [pc, #180]	; (8001178 <PID_Compute+0x278>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fb0c 	bl	80006e0 <__aeabi_fcmpgt>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <PID_Compute+0x1d6>
			pid_output_sum = 1000.0f;
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <PID_Compute+0x26c>)
 80010d0:	4a29      	ldr	r2, [pc, #164]	; (8001178 <PID_Compute+0x278>)
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e00b      	b.n	80010ee <PID_Compute+0x1ee>
		}else if(pid_output_sum < -1000.0f){
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <PID_Compute+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4928      	ldr	r1, [pc, #160]	; (800117c <PID_Compute+0x27c>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fae1 	bl	80006a4 <__aeabi_fcmplt>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <PID_Compute+0x1ee>
			pid_output_sum = -1000.0f;
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <PID_Compute+0x26c>)
 80010ea:	4a24      	ldr	r2, [pc, #144]	; (800117c <PID_Compute+0x27c>)
 80010ec:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <PID_Compute+0x270>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d107      	bne.n	8001106 <PID_Compute+0x206>
			output = pid_kp_2 * error;
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <PID_Compute+0x28c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff f933 	bl	8000368 <__aeabi_fmul>
 8001102:	4603      	mov	r3, r0
 8001104:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_2 * input_d;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <PID_Compute+0x26c>)
 8001108:	681c      	ldr	r4, [r3, #0]
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <PID_Compute+0x290>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f929 	bl	8000368 <__aeabi_fmul>
 8001116:	4603      	mov	r3, r0
 8001118:	4619      	mov	r1, r3
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff f81a 	bl	8000154 <__aeabi_fsub>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff f817 	bl	8000158 <__addsf3>
 800112a:	4603      	mov	r3, r0
 800112c:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800112e:	4912      	ldr	r1, [pc, #72]	; (8001178 <PID_Compute+0x278>)
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff fad5 	bl	80006e0 <__aeabi_fcmpgt>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <PID_Compute+0x242>
			output = 1000.0f;
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <PID_Compute+0x278>)
 800113e:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001140:	e09b      	b.n	800127a <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <PID_Compute+0x27c>)
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff faad 	bl	80006a4 <__aeabi_fcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d100      	bne.n	8001152 <PID_Compute+0x252>
		if(output > 1000.0f){
 8001150:	e093      	b.n	800127a <PID_Compute+0x37a>
			output = -1000.0f;
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <PID_Compute+0x27c>)
 8001154:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001156:	e090      	b.n	800127a <PID_Compute+0x37a>
 8001158:	200001dc 	.word	0x200001dc
 800115c:	20000024 	.word	0x20000024
 8001160:	200001e4 	.word	0x200001e4
 8001164:	2000001c 	.word	0x2000001c
 8001168:	200001cc 	.word	0x200001cc
 800116c:	200001e8 	.word	0x200001e8
 8001170:	20000020 	.word	0x20000020
 8001174:	20000004 	.word	0x20000004
 8001178:	447a0000 	.word	0x447a0000
 800117c:	c47a0000 	.word	0xc47a0000
 8001180:	20000008 	.word	0x20000008
 8001184:	2000001e 	.word	0x2000001e
 8001188:	200001d0 	.word	0x200001d0
 800118c:	2000000c 	.word	0x2000000c
 8001190:	20000010 	.word	0x20000010
		}
	}else{
		pid_output_sum += pid_ki_3 * error;
 8001194:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <PID_Compute+0x390>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f8e4 	bl	8000368 <__aeabi_fmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <PID_Compute+0x394>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f7fe ffd4 	bl	8000158 <__addsf3>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <PID_Compute+0x394>)
 80011b6:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 80011b8:	4b37      	ldr	r3, [pc, #220]	; (8001298 <PID_Compute+0x398>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d110      	bne.n	80011e2 <PID_Compute+0x2e2>
			pid_output_sum -= pid_kp_3 * input_d;
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <PID_Compute+0x394>)
 80011c2:	681c      	ldr	r4, [r3, #0]
 80011c4:	4b35      	ldr	r3, [pc, #212]	; (800129c <PID_Compute+0x39c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f8cc 	bl	8000368 <__aeabi_fmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	4620      	mov	r0, r4
 80011d6:	f7fe ffbd 	bl	8000154 <__aeabi_fsub>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <PID_Compute+0x394>)
 80011e0:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80011e2:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <PID_Compute+0x394>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	492e      	ldr	r1, [pc, #184]	; (80012a0 <PID_Compute+0x3a0>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fa79 	bl	80006e0 <__aeabi_fcmpgt>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <PID_Compute+0x2fc>
			pid_output_sum = 1000.0f;
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <PID_Compute+0x394>)
 80011f6:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <PID_Compute+0x3a0>)
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e00b      	b.n	8001214 <PID_Compute+0x314>
		}else if(pid_output_sum < -1000.0f){
 80011fc:	4b25      	ldr	r3, [pc, #148]	; (8001294 <PID_Compute+0x394>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4928      	ldr	r1, [pc, #160]	; (80012a4 <PID_Compute+0x3a4>)
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fa4e 	bl	80006a4 <__aeabi_fcmplt>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <PID_Compute+0x314>
			pid_output_sum = -1000.0f;
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <PID_Compute+0x394>)
 8001210:	4a24      	ldr	r2, [pc, #144]	; (80012a4 <PID_Compute+0x3a4>)
 8001212:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <PID_Compute+0x398>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <PID_Compute+0x32c>
			output = pid_kp_3 * error;
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <PID_Compute+0x39c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff f8a0 	bl	8000368 <__aeabi_fmul>
 8001228:	4603      	mov	r3, r0
 800122a:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_3 * input_d;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <PID_Compute+0x394>)
 800122e:	681c      	ldr	r4, [r3, #0]
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <PID_Compute+0x3a8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6839      	ldr	r1, [r7, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f896 	bl	8000368 <__aeabi_fmul>
 800123c:	4603      	mov	r3, r0
 800123e:	4619      	mov	r1, r3
 8001240:	4620      	mov	r0, r4
 8001242:	f7fe ff87 	bl	8000154 <__aeabi_fsub>
 8001246:	4603      	mov	r3, r0
 8001248:	4619      	mov	r1, r3
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f7fe ff84 	bl	8000158 <__addsf3>
 8001250:	4603      	mov	r3, r0
 8001252:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001254:	4912      	ldr	r1, [pc, #72]	; (80012a0 <PID_Compute+0x3a0>)
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fa42 	bl	80006e0 <__aeabi_fcmpgt>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <PID_Compute+0x368>
			output = 1000.0f;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <PID_Compute+0x3a0>)
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e008      	b.n	800127a <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001268:	490e      	ldr	r1, [pc, #56]	; (80012a4 <PID_Compute+0x3a4>)
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff fa1a 	bl	80006a4 <__aeabi_fcmplt>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <PID_Compute+0x37a>
			output = -1000.0f;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <PID_Compute+0x3a4>)
 8001278:	60fb      	str	r3, [r7, #12]
		}
	}

	pid_output = output;
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <PID_Compute+0x3ac>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6013      	str	r3, [r2, #0]
	pid_last_input = input;
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <PID_Compute+0x3b0>)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	6013      	str	r3, [r2, #0]
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop
 8001290:	200001d4 	.word	0x200001d4
 8001294:	200001e8 	.word	0x200001e8
 8001298:	20000020 	.word	0x20000020
 800129c:	20000014 	.word	0x20000014
 80012a0:	447a0000 	.word	0x447a0000
 80012a4:	c47a0000 	.word	0xc47a0000
 80012a8:	20000018 	.word	0x20000018
 80012ac:	200001e0 	.word	0x200001e0
 80012b0:	200001e4 	.word	0x200001e4

080012b4 <PID_Start>:
void PID_Start(){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	pid_last_input = pid_input;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <PID_Start+0x30>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <PID_Start+0x34>)
 80012be:	6013      	str	r3, [r2, #0]
	pid_output_sum = 0;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <PID_Start+0x38>)
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    PID_Set_Sampling_Time(pid_sampling_time);
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <PID_Start+0x3c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fdfc 	bl	8000ecc <PID_Set_Sampling_Time>
	PID_Timer_Restart();
 80012d4:	f7ff fdc8 	bl	8000e68 <PID_Timer_Restart>
	pid_running = 1;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <PID_Start+0x40>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001dc 	.word	0x200001dc
 80012e8:	200001e4 	.word	0x200001e4
 80012ec:	200001e8 	.word	0x200001e8
 80012f0:	20000002 	.word	0x20000002
 80012f4:	200001d8 	.word	0x200001d8

080012f8 <PID_Stop>:
void PID_Stop(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	PID_Timer_Stop();
 80012fc:	f7ff fdaa 	bl	8000e54 <PID_Timer_Stop>
	PID_Ready(0);
 8001300:	f04f 0000 	mov.w	r0, #0
 8001304:	f7ff fa68 	bl	80007d8 <PID_Ready>
	pid_running = 0;
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <PID_Stop+0x1c>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001d8 	.word	0x200001d8

08001318 <Potentiometer_ADC_Interrupt>:
uint32_t potentiometer_adctmp = 0;
uint16_t potentiometer_adccnt = 0;
uint8_t potentiometer_init_cplt = 0;
float potentiometer_position = 0;

void Potentiometer_ADC_Interrupt(){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	potentiometer_adctmp += HAL_ADC_GetValue(&hadc1);
 800131c:	4816      	ldr	r0, [pc, #88]	; (8001378 <Potentiometer_ADC_Interrupt+0x60>)
 800131e:	f001 fe65 	bl	8002fec <HAL_ADC_GetValue>
 8001322:	4602      	mov	r2, r0
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <Potentiometer_ADC_Interrupt+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4413      	add	r3, r2
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <Potentiometer_ADC_Interrupt+0x64>)
 800132c:	6013      	str	r3, [r2, #0]
	potentiometer_adccnt++;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <Potentiometer_ADC_Interrupt+0x68>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <Potentiometer_ADC_Interrupt+0x68>)
 8001338:	801a      	strh	r2, [r3, #0]
	if(potentiometer_adccnt == POTENTIOMETER_SAMPLE_CNT){
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <Potentiometer_ADC_Interrupt+0x68>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d115      	bne.n	800136e <Potentiometer_ADC_Interrupt+0x56>
		potentiometer_position = (float)potentiometer_adctmp/POTENTIOMETER_SAMPLE_CNT;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <Potentiometer_ADC_Interrupt+0x64>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ffb6 	bl	80002b8 <__aeabi_ui2f>
 800134c:	4603      	mov	r3, r0
 800134e:	490d      	ldr	r1, [pc, #52]	; (8001384 <Potentiometer_ADC_Interrupt+0x6c>)
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8bd 	bl	80004d0 <__aeabi_fdiv>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <Potentiometer_ADC_Interrupt+0x70>)
 800135c:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 800135e:	f7ff f9ef 	bl	8000740 <Potentiometer_Ready>
		potentiometer_adccnt = 0;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <Potentiometer_ADC_Interrupt+0x68>)
 8001364:	2200      	movs	r2, #0
 8001366:	801a      	strh	r2, [r3, #0]
		potentiometer_adctmp = 0;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <Potentiometer_ADC_Interrupt+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
	}
	potentiometer_init_cplt = 1;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <Potentiometer_ADC_Interrupt+0x74>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000398 	.word	0x20000398
 800137c:	200001f0 	.word	0x200001f0
 8001380:	200001f4 	.word	0x200001f4
 8001384:	42c80000 	.word	0x42c80000
 8001388:	200001f8 	.word	0x200001f8
 800138c:	200001f6 	.word	0x200001f6

08001390 <Potentiometer_Init>:

void Potentiometer_Init(){
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001394:	bf00      	nop
 8001396:	4808      	ldr	r0, [pc, #32]	; (80013b8 <Potentiometer_Init+0x28>)
 8001398:	f002 f894 	bl	80034c4 <HAL_ADCEx_Calibration_Start>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f9      	bne.n	8001396 <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <Potentiometer_Init+0x28>)
 80013a4:	f001 fd6c 	bl	8002e80 <HAL_ADC_Start_IT>
	while(!potentiometer_init_cplt);
 80013a8:	bf00      	nop
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <Potentiometer_Init+0x2c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0fb      	beq.n	80013aa <Potentiometer_Init+0x1a>
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000398 	.word	0x20000398
 80013bc:	200001f6 	.word	0x200001f6

080013c0 <Settings_Read>:
extern uint16_t pid_split_2;
extern uint8_t pid_sampling_time;

uint8_t settings[SETTINGS_TOTAL_LENGTH];

void Settings_Read(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	//Read
	Flash_Read(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 80013c6:	2240      	movs	r2, #64	; 0x40
 80013c8:	49a2      	ldr	r1, [pc, #648]	; (8001654 <Settings_Read+0x294>)
 80013ca:	48a3      	ldr	r0, [pc, #652]	; (8001658 <Settings_Read+0x298>)
 80013cc:	f7ff fab4 	bl	8000938 <Flash_Read>
	//Get CRC
	uint32_t crc = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&crc, (uint32_t)&settings[SETTINGS_TOTAL_LENGTH - 4]);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4aa1      	ldr	r2, [pc, #644]	; (800165c <Settings_Read+0x29c>)
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fb68 	bl	8000ab0 <General_Copy_32_Bit>
	//If CRC is correct
	if(HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1) == crc){
 80013e0:	220f      	movs	r2, #15
 80013e2:	499d      	ldr	r1, [pc, #628]	; (8001658 <Settings_Read+0x298>)
 80013e4:	489e      	ldr	r0, [pc, #632]	; (8001660 <Settings_Read+0x2a0>)
 80013e6:	f002 fa4c 	bl	8003882 <HAL_CRC_Calculate>
 80013ea:	4602      	mov	r2, r0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	f040 824b 	bne.w	800188a <Settings_Read+0x4ca>
		//Parse
		General_Copy_16_Bit((uint32_t)&potentiometer_min, (uint32_t)&settings[0]);
 80013f4:	4b9b      	ldr	r3, [pc, #620]	; (8001664 <Settings_Read+0x2a4>)
 80013f6:	4a98      	ldr	r2, [pc, #608]	; (8001658 <Settings_Read+0x298>)
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fb75 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&potentiometer_max, (uint32_t)&settings[2]);
 8001400:	4b99      	ldr	r3, [pc, #612]	; (8001668 <Settings_Read+0x2a8>)
 8001402:	4a9a      	ldr	r2, [pc, #616]	; (800166c <Settings_Read+0x2ac>)
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fb6f 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&motor_max_power, (uint32_t)&settings[4]);
 800140c:	4b98      	ldr	r3, [pc, #608]	; (8001670 <Settings_Read+0x2b0>)
 800140e:	4a99      	ldr	r2, [pc, #612]	; (8001674 <Settings_Read+0x2b4>)
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb69 	bl	8000aea <General_Copy_16_Bit>
		motor_invert = settings[6];
 8001418:	4b8f      	ldr	r3, [pc, #572]	; (8001658 <Settings_Read+0x298>)
 800141a:	799a      	ldrb	r2, [r3, #6]
 800141c:	4b96      	ldr	r3, [pc, #600]	; (8001678 <Settings_Read+0x2b8>)
 800141e:	701a      	strb	r2, [r3, #0]
		signal_ignore = settings[7];
 8001420:	4b8d      	ldr	r3, [pc, #564]	; (8001658 <Settings_Read+0x298>)
 8001422:	79da      	ldrb	r2, [r3, #7]
 8001424:	4b95      	ldr	r3, [pc, #596]	; (800167c <Settings_Read+0x2bc>)
 8001426:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&settings[8]);
 8001428:	4b95      	ldr	r3, [pc, #596]	; (8001680 <Settings_Read+0x2c0>)
 800142a:	4a96      	ldr	r2, [pc, #600]	; (8001684 <Settings_Read+0x2c4>)
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fb3e 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&settings[12]);
 8001434:	4b94      	ldr	r3, [pc, #592]	; (8001688 <Settings_Read+0x2c8>)
 8001436:	4a95      	ldr	r2, [pc, #596]	; (800168c <Settings_Read+0x2cc>)
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fb38 	bl	8000ab0 <General_Copy_32_Bit>
		led_mode = settings[16];
 8001440:	4b85      	ldr	r3, [pc, #532]	; (8001658 <Settings_Read+0x298>)
 8001442:	7c1a      	ldrb	r2, [r3, #16]
 8001444:	4b92      	ldr	r3, [pc, #584]	; (8001690 <Settings_Read+0x2d0>)
 8001446:	701a      	strb	r2, [r3, #0]
		pid_on = settings[17];
 8001448:	4b83      	ldr	r3, [pc, #524]	; (8001658 <Settings_Read+0x298>)
 800144a:	7c5a      	ldrb	r2, [r3, #17]
 800144c:	4b91      	ldr	r3, [pc, #580]	; (8001694 <Settings_Read+0x2d4>)
 800144e:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&settings[18]);
 8001450:	4b91      	ldr	r3, [pc, #580]	; (8001698 <Settings_Read+0x2d8>)
 8001452:	4a92      	ldr	r2, [pc, #584]	; (800169c <Settings_Read+0x2dc>)
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fb2a 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&settings[22]);
 800145c:	4b90      	ldr	r3, [pc, #576]	; (80016a0 <Settings_Read+0x2e0>)
 800145e:	4a91      	ldr	r2, [pc, #580]	; (80016a4 <Settings_Read+0x2e4>)
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fb24 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&settings[26]);
 8001468:	4b8f      	ldr	r3, [pc, #572]	; (80016a8 <Settings_Read+0x2e8>)
 800146a:	4a90      	ldr	r2, [pc, #576]	; (80016ac <Settings_Read+0x2ec>)
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fb1e 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&settings[30]);
 8001474:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <Settings_Read+0x2f0>)
 8001476:	4a8f      	ldr	r2, [pc, #572]	; (80016b4 <Settings_Read+0x2f4>)
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fb18 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&settings[34]);
 8001480:	4b8d      	ldr	r3, [pc, #564]	; (80016b8 <Settings_Read+0x2f8>)
 8001482:	4a8e      	ldr	r2, [pc, #568]	; (80016bc <Settings_Read+0x2fc>)
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fb12 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&settings[38]);
 800148c:	4b8c      	ldr	r3, [pc, #560]	; (80016c0 <Settings_Read+0x300>)
 800148e:	4a8d      	ldr	r2, [pc, #564]	; (80016c4 <Settings_Read+0x304>)
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fb0c 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&settings[42]);
 8001498:	4b8b      	ldr	r3, [pc, #556]	; (80016c8 <Settings_Read+0x308>)
 800149a:	4a8c      	ldr	r2, [pc, #560]	; (80016cc <Settings_Read+0x30c>)
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fb06 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&settings[46]);
 80014a4:	4b8a      	ldr	r3, [pc, #552]	; (80016d0 <Settings_Read+0x310>)
 80014a6:	4a8b      	ldr	r2, [pc, #556]	; (80016d4 <Settings_Read+0x314>)
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fb00 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&settings[50]);
 80014b0:	4b89      	ldr	r3, [pc, #548]	; (80016d8 <Settings_Read+0x318>)
 80014b2:	4a8a      	ldr	r2, [pc, #552]	; (80016dc <Settings_Read+0x31c>)
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fafa 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&settings[54]);
 80014bc:	4b88      	ldr	r3, [pc, #544]	; (80016e0 <Settings_Read+0x320>)
 80014be:	4a89      	ldr	r2, [pc, #548]	; (80016e4 <Settings_Read+0x324>)
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fb11 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&settings[56]);
 80014c8:	4b87      	ldr	r3, [pc, #540]	; (80016e8 <Settings_Read+0x328>)
 80014ca:	4a88      	ldr	r2, [pc, #544]	; (80016ec <Settings_Read+0x32c>)
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fb0b 	bl	8000aea <General_Copy_16_Bit>
		pid_sampling_time = settings[58];
 80014d4:	4b60      	ldr	r3, [pc, #384]	; (8001658 <Settings_Read+0x298>)
 80014d6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <Settings_Read+0x330>)
 80014dc:	701a      	strb	r2, [r3, #0]

		//Verify
		if((potentiometer_min < SETTINGS_DEF_POTENTIOMETER_MIN_MIN)||(potentiometer_min > SETTINGS_DEF_POTENTIOMETER_MIN_MAX)){
 80014de:	4b61      	ldr	r3, [pc, #388]	; (8001664 <Settings_Read+0x2a4>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 80014e6:	d302      	bcc.n	80014ee <Settings_Read+0x12e>
			potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 80014e8:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <Settings_Read+0x2a4>)
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	801a      	strh	r2, [r3, #0]
		}
		if((potentiometer_max < SETTINGS_DEF_POTENTIOMETER_MAX_MIN)||(potentiometer_max > SETTINGS_DEF_POTENTIOMETER_MAX_MAX)){
 80014ee:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <Settings_Read+0x2a8>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	2b7f      	cmp	r3, #127	; 0x7f
 80014f4:	d904      	bls.n	8001500 <Settings_Read+0x140>
 80014f6:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <Settings_Read+0x2a8>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014fe:	d303      	bcc.n	8001508 <Settings_Read+0x148>
			potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <Settings_Read+0x2a8>)
 8001502:	f640 727f 	movw	r2, #3967	; 0xf7f
 8001506:	801a      	strh	r2, [r3, #0]
		}
		if((motor_max_power < SETTINGS_DEF_MOTOR_MAX_POWER_MIN)||(motor_max_power > SETTINGS_DEF_MOTOR_MAX_POWER_MAX)){
 8001508:	4b59      	ldr	r3, [pc, #356]	; (8001670 <Settings_Read+0x2b0>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001510:	d903      	bls.n	800151a <Settings_Read+0x15a>
			motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001512:	4b57      	ldr	r3, [pc, #348]	; (8001670 <Settings_Read+0x2b0>)
 8001514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001518:	801a      	strh	r2, [r3, #0]
		}
		if((motor_invert != MOTOR_NORMAL) && (motor_invert != MOTOR_INVERT)){
 800151a:	4b57      	ldr	r3, [pc, #348]	; (8001678 <Settings_Read+0x2b8>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d006      	beq.n	8001530 <Settings_Read+0x170>
 8001522:	4b55      	ldr	r3, [pc, #340]	; (8001678 <Settings_Read+0x2b8>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d002      	beq.n	8001530 <Settings_Read+0x170>
			motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 800152a:	4b53      	ldr	r3, [pc, #332]	; (8001678 <Settings_Read+0x2b8>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
		}
		if((signal_ignore != GENERAL_TRUE) && (signal_ignore != GENERAL_FALSE)){
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <Settings_Read+0x2bc>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d006      	beq.n	8001546 <Settings_Read+0x186>
 8001538:	4b50      	ldr	r3, [pc, #320]	; (800167c <Settings_Read+0x2bc>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <Settings_Read+0x186>
			signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 8001540:	4b4e      	ldr	r3, [pc, #312]	; (800167c <Settings_Read+0x2bc>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
		}
		if((signal_length < SETTINGS_DEF_SIGNAL_LENGTH_MIN)||(signal_length > SETTINGS_DEF_SIGNAL_LENGTH_MAX)){
 8001546:	4b4e      	ldr	r3, [pc, #312]	; (8001680 <Settings_Read+0x2c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f8a8 	bl	80006a4 <__aeabi_fcmplt>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d108      	bne.n	800156c <Settings_Read+0x1ac>
 800155a:	4b49      	ldr	r3, [pc, #292]	; (8001680 <Settings_Read+0x2c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4965      	ldr	r1, [pc, #404]	; (80016f4 <Settings_Read+0x334>)
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff f8bd 	bl	80006e0 <__aeabi_fcmpgt>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <Settings_Read+0x1b4>
			signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 800156c:	4b44      	ldr	r3, [pc, #272]	; (8001680 <Settings_Read+0x2c0>)
 800156e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001572:	601a      	str	r2, [r3, #0]
		}
		if((signal_timeout < SETTINGS_DEF_SIGNAL_TIMEOUT_MIN)||(signal_timeout > SETTINGS_DEF_SIGNAL_TIMEOUT_MAX)){
 8001574:	4b44      	ldr	r3, [pc, #272]	; (8001688 <Settings_Read+0x2c8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	495f      	ldr	r1, [pc, #380]	; (80016f8 <Settings_Read+0x338>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f892 	bl	80006a4 <__aeabi_fcmplt>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d108      	bne.n	8001598 <Settings_Read+0x1d8>
 8001586:	4b40      	ldr	r3, [pc, #256]	; (8001688 <Settings_Read+0x2c8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	495c      	ldr	r1, [pc, #368]	; (80016fc <Settings_Read+0x33c>)
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f8a7 	bl	80006e0 <__aeabi_fcmpgt>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <Settings_Read+0x1de>
			signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8001598:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <Settings_Read+0x2c8>)
 800159a:	4a59      	ldr	r2, [pc, #356]	; (8001700 <Settings_Read+0x340>)
 800159c:	601a      	str	r2, [r3, #0]
		}
		if((led_mode != LED_MODE_OFF) && (led_mode != LED_MODE_POWER) && (led_mode != LED_MODE_SIGNAL) && (led_mode != LED_MODE_POSITION_CHANGE)){
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <Settings_Read+0x2d0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00e      	beq.n	80015c4 <Settings_Read+0x204>
 80015a6:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <Settings_Read+0x2d0>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d00a      	beq.n	80015c4 <Settings_Read+0x204>
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <Settings_Read+0x2d0>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d006      	beq.n	80015c4 <Settings_Read+0x204>
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <Settings_Read+0x2d0>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d002      	beq.n	80015c4 <Settings_Read+0x204>
			led_mode = SETTINGS_DEF_LED_MODE_DEF;
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <Settings_Read+0x2d0>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
		}
		if((pid_on != PID_ON_M) && (pid_on != PID_ON_E)){
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <Settings_Read+0x2d4>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <Settings_Read+0x21a>
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <Settings_Read+0x2d4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d002      	beq.n	80015da <Settings_Read+0x21a>
			pid_on = SETTINGS_DEF_PID_ON_DEF;
 80015d4:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <Settings_Read+0x2d4>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		}
		if((pid_kp_1 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_1 > SETTINGS_DEF_PID_KP_MAX)){
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <Settings_Read+0x2d8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f85e 	bl	80006a4 <__aeabi_fcmplt>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d108      	bne.n	8001600 <Settings_Read+0x240>
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <Settings_Read+0x2d8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4944      	ldr	r1, [pc, #272]	; (8001704 <Settings_Read+0x344>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff f873 	bl	80006e0 <__aeabi_fcmpgt>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <Settings_Read+0x248>
			pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <Settings_Read+0x2d8>)
 8001602:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001606:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_1 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_1 > SETTINGS_DEF_PID_KI_MAX)){
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <Settings_Read+0x2e0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f847 	bl	80006a4 <__aeabi_fcmplt>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d108      	bne.n	800162e <Settings_Read+0x26e>
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <Settings_Read+0x2e0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4938      	ldr	r1, [pc, #224]	; (8001704 <Settings_Read+0x344>)
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f85c 	bl	80006e0 <__aeabi_fcmpgt>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <Settings_Read+0x276>
			pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <Settings_Read+0x2e0>)
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_1 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_1 > SETTINGS_DEF_PID_KD_MAX)){
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <Settings_Read+0x2e8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f04f 0100 	mov.w	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f830 	bl	80006a4 <__aeabi_fcmplt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d163      	bne.n	8001712 <Settings_Read+0x352>
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <Settings_Read+0x2e8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	492d      	ldr	r1, [pc, #180]	; (8001704 <Settings_Read+0x344>)
 8001650:	4618      	mov	r0, r3
 8001652:	e059      	b.n	8001708 <Settings_Read+0x348>
 8001654:	0800fc00 	.word	0x0800fc00
 8001658:	200001fc 	.word	0x200001fc
 800165c:	20000238 	.word	0x20000238
 8001660:	200003c8 	.word	0x200003c8
 8001664:	200001ec 	.word	0x200001ec
 8001668:	200001ee 	.word	0x200001ee
 800166c:	200001fe 	.word	0x200001fe
 8001670:	20000000 	.word	0x20000000
 8001674:	20000200 	.word	0x20000200
 8001678:	200001c7 	.word	0x200001c7
 800167c:	2000023c 	.word	0x2000023c
 8001680:	20000240 	.word	0x20000240
 8001684:	20000204 	.word	0x20000204
 8001688:	20000244 	.word	0x20000244
 800168c:	20000208 	.word	0x20000208
 8001690:	200001c4 	.word	0x200001c4
 8001694:	20000020 	.word	0x20000020
 8001698:	20000004 	.word	0x20000004
 800169c:	2000020e 	.word	0x2000020e
 80016a0:	200001cc 	.word	0x200001cc
 80016a4:	20000212 	.word	0x20000212
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000216 	.word	0x20000216
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	2000021a 	.word	0x2000021a
 80016b8:	200001d0 	.word	0x200001d0
 80016bc:	2000021e 	.word	0x2000021e
 80016c0:	20000010 	.word	0x20000010
 80016c4:	20000222 	.word	0x20000222
 80016c8:	20000014 	.word	0x20000014
 80016cc:	20000226 	.word	0x20000226
 80016d0:	200001d4 	.word	0x200001d4
 80016d4:	2000022a 	.word	0x2000022a
 80016d8:	20000018 	.word	0x20000018
 80016dc:	2000022e 	.word	0x2000022e
 80016e0:	2000001c 	.word	0x2000001c
 80016e4:	20000232 	.word	0x20000232
 80016e8:	2000001e 	.word	0x2000001e
 80016ec:	20000234 	.word	0x20000234
 80016f0:	20000002 	.word	0x20000002
 80016f4:	40a00000 	.word	0x40a00000
 80016f8:	40c00000 	.word	0x40c00000
 80016fc:	43480000 	.word	0x43480000
 8001700:	41c80000 	.word	0x41c80000
 8001704:	42c80000 	.word	0x42c80000
 8001708:	f7fe ffea 	bl	80006e0 <__aeabi_fcmpgt>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <Settings_Read+0x358>
			pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 8001712:	4b85      	ldr	r3, [pc, #532]	; (8001928 <Settings_Read+0x568>)
 8001714:	4a85      	ldr	r2, [pc, #532]	; (800192c <Settings_Read+0x56c>)
 8001716:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_2 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_2 > SETTINGS_DEF_PID_KP_MAX)){
 8001718:	4b85      	ldr	r3, [pc, #532]	; (8001930 <Settings_Read+0x570>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f04f 0100 	mov.w	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ffbf 	bl	80006a4 <__aeabi_fcmplt>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d108      	bne.n	800173e <Settings_Read+0x37e>
 800172c:	4b80      	ldr	r3, [pc, #512]	; (8001930 <Settings_Read+0x570>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4980      	ldr	r1, [pc, #512]	; (8001934 <Settings_Read+0x574>)
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ffd4 	bl	80006e0 <__aeabi_fcmpgt>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <Settings_Read+0x386>
			pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 800173e:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <Settings_Read+0x570>)
 8001740:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001744:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_2 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_2 > SETTINGS_DEF_PID_KI_MAX)){
 8001746:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <Settings_Read+0x578>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f04f 0100 	mov.w	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe ffa8 	bl	80006a4 <__aeabi_fcmplt>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d108      	bne.n	800176c <Settings_Read+0x3ac>
 800175a:	4b77      	ldr	r3, [pc, #476]	; (8001938 <Settings_Read+0x578>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4975      	ldr	r1, [pc, #468]	; (8001934 <Settings_Read+0x574>)
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe ffbd 	bl	80006e0 <__aeabi_fcmpgt>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <Settings_Read+0x3b4>
			pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 800176c:	4b72      	ldr	r3, [pc, #456]	; (8001938 <Settings_Read+0x578>)
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_2 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_2 > SETTINGS_DEF_PID_KD_MAX)){
 8001774:	4b71      	ldr	r3, [pc, #452]	; (800193c <Settings_Read+0x57c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f04f 0100 	mov.w	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe ff91 	bl	80006a4 <__aeabi_fcmplt>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d108      	bne.n	800179a <Settings_Read+0x3da>
 8001788:	4b6c      	ldr	r3, [pc, #432]	; (800193c <Settings_Read+0x57c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4969      	ldr	r1, [pc, #420]	; (8001934 <Settings_Read+0x574>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe ffa6 	bl	80006e0 <__aeabi_fcmpgt>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <Settings_Read+0x3e0>
			pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 800179a:	4b68      	ldr	r3, [pc, #416]	; (800193c <Settings_Read+0x57c>)
 800179c:	4a63      	ldr	r2, [pc, #396]	; (800192c <Settings_Read+0x56c>)
 800179e:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_3 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_3 > SETTINGS_DEF_PID_KP_MAX)){
 80017a0:	4b67      	ldr	r3, [pc, #412]	; (8001940 <Settings_Read+0x580>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe ff7b 	bl	80006a4 <__aeabi_fcmplt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <Settings_Read+0x406>
 80017b4:	4b62      	ldr	r3, [pc, #392]	; (8001940 <Settings_Read+0x580>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	495e      	ldr	r1, [pc, #376]	; (8001934 <Settings_Read+0x574>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe ff90 	bl	80006e0 <__aeabi_fcmpgt>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <Settings_Read+0x40e>
			pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80017c6:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <Settings_Read+0x580>)
 80017c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017cc:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_3 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_3 > SETTINGS_DEF_PID_KI_MAX)){
 80017ce:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <Settings_Read+0x584>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe ff64 	bl	80006a4 <__aeabi_fcmplt>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d108      	bne.n	80017f4 <Settings_Read+0x434>
 80017e2:	4b58      	ldr	r3, [pc, #352]	; (8001944 <Settings_Read+0x584>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4953      	ldr	r1, [pc, #332]	; (8001934 <Settings_Read+0x574>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe ff79 	bl	80006e0 <__aeabi_fcmpgt>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <Settings_Read+0x43c>
			pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <Settings_Read+0x584>)
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_3 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_3 > SETTINGS_DEF_PID_KD_MAX)){
 80017fc:	4b52      	ldr	r3, [pc, #328]	; (8001948 <Settings_Read+0x588>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f04f 0100 	mov.w	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe ff4d 	bl	80006a4 <__aeabi_fcmplt>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d108      	bne.n	8001822 <Settings_Read+0x462>
 8001810:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <Settings_Read+0x588>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4947      	ldr	r1, [pc, #284]	; (8001934 <Settings_Read+0x574>)
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe ff62 	bl	80006e0 <__aeabi_fcmpgt>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <Settings_Read+0x468>
			pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 8001822:	4b49      	ldr	r3, [pc, #292]	; (8001948 <Settings_Read+0x588>)
 8001824:	4a41      	ldr	r2, [pc, #260]	; (800192c <Settings_Read+0x56c>)
 8001826:	601a      	str	r2, [r3, #0]
		}
		if((pid_split_1 < SETTINGS_DEF_PID_SPLIT_1_MIN)||(pid_split_1 > SETTINGS_DEF_PID_SPLIT_1_MAX)){
 8001828:	4b48      	ldr	r3, [pc, #288]	; (800194c <Settings_Read+0x58c>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001830:	d303      	bcc.n	800183a <Settings_Read+0x47a>
			pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <Settings_Read+0x58c>)
 8001834:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001838:	801a      	strh	r2, [r3, #0]
		}
		if((pid_split_2 < SETTINGS_DEF_PID_SPLIT_2_MIN)||(pid_split_2 > SETTINGS_DEF_PID_SPLIT_2_MAX)){
 800183a:	4b45      	ldr	r3, [pc, #276]	; (8001950 <Settings_Read+0x590>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001842:	d303      	bcc.n	800184c <Settings_Read+0x48c>
			pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 8001844:	4b42      	ldr	r3, [pc, #264]	; (8001950 <Settings_Read+0x590>)
 8001846:	f640 32fc 	movw	r2, #3068	; 0xbfc
 800184a:	801a      	strh	r2, [r3, #0]
		}
		if((pid_sampling_time < SETTINGS_DEF_PID_SAMPLING_TIME_MIN)||(pid_sampling_time > SETTINGS_DEF_PID_SAMPLING_TIME_MAX)){
 800184c:	4b41      	ldr	r3, [pc, #260]	; (8001954 <Settings_Read+0x594>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fd35 	bl	80002c0 <__aeabi_i2f>
 8001856:	4603      	mov	r3, r0
 8001858:	493f      	ldr	r1, [pc, #252]	; (8001958 <Settings_Read+0x598>)
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe ff22 	bl	80006a4 <__aeabi_fcmplt>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10d      	bne.n	8001882 <Settings_Read+0x4c2>
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <Settings_Read+0x594>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fd28 	bl	80002c0 <__aeabi_i2f>
 8001870:	4603      	mov	r3, r0
 8001872:	4930      	ldr	r1, [pc, #192]	; (8001934 <Settings_Read+0x574>)
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe ff33 	bl	80006e0 <__aeabi_fcmpgt>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d100      	bne.n	8001882 <Settings_Read+0x4c2>
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
	}
}
 8001880:	e04d      	b.n	800191e <Settings_Read+0x55e>
			pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <Settings_Read+0x594>)
 8001884:	2205      	movs	r2, #5
 8001886:	701a      	strb	r2, [r3, #0]
}
 8001888:	e049      	b.n	800191e <Settings_Read+0x55e>
		potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <Settings_Read+0x59c>)
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	801a      	strh	r2, [r3, #0]
		potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001890:	4b33      	ldr	r3, [pc, #204]	; (8001960 <Settings_Read+0x5a0>)
 8001892:	f640 727f 	movw	r2, #3967	; 0xf7f
 8001896:	801a      	strh	r2, [r3, #0]
		motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <Settings_Read+0x5a4>)
 800189a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800189e:	801a      	strh	r2, [r3, #0]
		motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <Settings_Read+0x5a8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
		signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <Settings_Read+0x5ac>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
		signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <Settings_Read+0x5b0>)
 80018ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b2:	601a      	str	r2, [r3, #0]
		signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <Settings_Read+0x5b4>)
 80018b6:	4a30      	ldr	r2, [pc, #192]	; (8001978 <Settings_Read+0x5b8>)
 80018b8:	601a      	str	r2, [r3, #0]
		led_mode = SETTINGS_DEF_LED_MODE_DEF;
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <Settings_Read+0x5bc>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
		pid_on = SETTINGS_DEF_PID_ON_DEF;
 80018c0:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <Settings_Read+0x5c0>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
		pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <Settings_Read+0x5c4>)
 80018c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018cc:	601a      	str	r2, [r3, #0]
		pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <Settings_Read+0x5c8>)
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
		pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <Settings_Read+0x568>)
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <Settings_Read+0x56c>)
 80018da:	601a      	str	r2, [r3, #0]
		pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <Settings_Read+0x570>)
 80018de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018e2:	601a      	str	r2, [r3, #0]
		pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <Settings_Read+0x578>)
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
		pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <Settings_Read+0x57c>)
 80018ee:	4a0f      	ldr	r2, [pc, #60]	; (800192c <Settings_Read+0x56c>)
 80018f0:	601a      	str	r2, [r3, #0]
		pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <Settings_Read+0x580>)
 80018f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018f8:	601a      	str	r2, [r3, #0]
		pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <Settings_Read+0x584>)
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <Settings_Read+0x588>)
 8001904:	4a09      	ldr	r2, [pc, #36]	; (800192c <Settings_Read+0x56c>)
 8001906:	601a      	str	r2, [r3, #0]
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <Settings_Read+0x58c>)
 800190a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800190e:	801a      	strh	r2, [r3, #0]
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <Settings_Read+0x590>)
 8001912:	f640 32fc 	movw	r2, #3068	; 0xbfc
 8001916:	801a      	strh	r2, [r3, #0]
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <Settings_Read+0x594>)
 800191a:	2205      	movs	r2, #5
 800191c:	701a      	strb	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008
 800192c:	40400000 	.word	0x40400000
 8001930:	2000000c 	.word	0x2000000c
 8001934:	42c80000 	.word	0x42c80000
 8001938:	200001d0 	.word	0x200001d0
 800193c:	20000010 	.word	0x20000010
 8001940:	20000014 	.word	0x20000014
 8001944:	200001d4 	.word	0x200001d4
 8001948:	20000018 	.word	0x20000018
 800194c:	2000001c 	.word	0x2000001c
 8001950:	2000001e 	.word	0x2000001e
 8001954:	20000002 	.word	0x20000002
 8001958:	40a00000 	.word	0x40a00000
 800195c:	200001ec 	.word	0x200001ec
 8001960:	200001ee 	.word	0x200001ee
 8001964:	20000000 	.word	0x20000000
 8001968:	200001c7 	.word	0x200001c7
 800196c:	2000023c 	.word	0x2000023c
 8001970:	20000240 	.word	0x20000240
 8001974:	20000244 	.word	0x20000244
 8001978:	41c80000 	.word	0x41c80000
 800197c:	200001c4 	.word	0x200001c4
 8001980:	20000020 	.word	0x20000020
 8001984:	20000004 	.word	0x20000004
 8001988:	200001cc 	.word	0x200001cc

0800198c <Settings_Write>:
void Settings_Write(){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	General_Copy_16_Bit((uint32_t)&settings[0], (uint32_t)&potentiometer_min);
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <Settings_Write+0x124>)
 8001994:	4a47      	ldr	r2, [pc, #284]	; (8001ab4 <Settings_Write+0x128>)
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f8a6 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[2], (uint32_t)&potentiometer_max);
 800199e:	4b46      	ldr	r3, [pc, #280]	; (8001ab8 <Settings_Write+0x12c>)
 80019a0:	4a46      	ldr	r2, [pc, #280]	; (8001abc <Settings_Write+0x130>)
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f8a0 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[4], (uint32_t)&motor_max_power);
 80019aa:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <Settings_Write+0x134>)
 80019ac:	4a45      	ldr	r2, [pc, #276]	; (8001ac4 <Settings_Write+0x138>)
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f89a 	bl	8000aea <General_Copy_16_Bit>
	settings[6] = motor_invert;
 80019b6:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <Settings_Write+0x13c>)
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <Settings_Write+0x124>)
 80019bc:	719a      	strb	r2, [r3, #6]
	settings[7] = signal_ignore;
 80019be:	4b43      	ldr	r3, [pc, #268]	; (8001acc <Settings_Write+0x140>)
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <Settings_Write+0x124>)
 80019c4:	71da      	strb	r2, [r3, #7]
	General_Copy_32_Bit((uint32_t)&settings[8], (uint32_t)&signal_length);
 80019c6:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <Settings_Write+0x144>)
 80019c8:	4a42      	ldr	r2, [pc, #264]	; (8001ad4 <Settings_Write+0x148>)
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff f86f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[12], (uint32_t)&signal_timeout);
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <Settings_Write+0x14c>)
 80019d4:	4a41      	ldr	r2, [pc, #260]	; (8001adc <Settings_Write+0x150>)
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff f869 	bl	8000ab0 <General_Copy_32_Bit>
	settings[16] = led_mode;
 80019de:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <Settings_Write+0x154>)
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <Settings_Write+0x124>)
 80019e4:	741a      	strb	r2, [r3, #16]
	settings[17] = pid_on;
 80019e6:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <Settings_Write+0x158>)
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <Settings_Write+0x124>)
 80019ec:	745a      	strb	r2, [r3, #17]
	General_Copy_32_Bit((uint32_t)&settings[18], (uint32_t)&pid_kp_1);
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <Settings_Write+0x15c>)
 80019f0:	4a3e      	ldr	r2, [pc, #248]	; (8001aec <Settings_Write+0x160>)
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f85b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[22], (uint32_t)&pid_ki_1);
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <Settings_Write+0x164>)
 80019fc:	4a3d      	ldr	r2, [pc, #244]	; (8001af4 <Settings_Write+0x168>)
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f855 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[26], (uint32_t)&pid_kd_1);
 8001a06:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <Settings_Write+0x16c>)
 8001a08:	4a3c      	ldr	r2, [pc, #240]	; (8001afc <Settings_Write+0x170>)
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f84f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[30], (uint32_t)&pid_kp_2);
 8001a12:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <Settings_Write+0x174>)
 8001a14:	4a3b      	ldr	r2, [pc, #236]	; (8001b04 <Settings_Write+0x178>)
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f849 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[34], (uint32_t)&pid_ki_2);
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <Settings_Write+0x17c>)
 8001a20:	4a3a      	ldr	r2, [pc, #232]	; (8001b0c <Settings_Write+0x180>)
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f843 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[38], (uint32_t)&pid_kd_2);
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <Settings_Write+0x184>)
 8001a2c:	4a39      	ldr	r2, [pc, #228]	; (8001b14 <Settings_Write+0x188>)
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f83d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[42], (uint32_t)&pid_kp_3);
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <Settings_Write+0x18c>)
 8001a38:	4a38      	ldr	r2, [pc, #224]	; (8001b1c <Settings_Write+0x190>)
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff f837 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[46], (uint32_t)&pid_ki_3);
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <Settings_Write+0x194>)
 8001a44:	4a37      	ldr	r2, [pc, #220]	; (8001b24 <Settings_Write+0x198>)
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f831 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[50], (uint32_t)&pid_kd_3);
 8001a4e:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <Settings_Write+0x19c>)
 8001a50:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <Settings_Write+0x1a0>)
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f82b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&settings[54], (uint32_t)&pid_split_1);
 8001a5a:	4b35      	ldr	r3, [pc, #212]	; (8001b30 <Settings_Write+0x1a4>)
 8001a5c:	4a35      	ldr	r2, [pc, #212]	; (8001b34 <Settings_Write+0x1a8>)
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f842 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[56], (uint32_t)&pid_split_2);
 8001a66:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <Settings_Write+0x1ac>)
 8001a68:	4a34      	ldr	r2, [pc, #208]	; (8001b3c <Settings_Write+0x1b0>)
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff f83c 	bl	8000aea <General_Copy_16_Bit>
	settings[58] = pid_sampling_time;
 8001a72:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <Settings_Write+0x1b4>)
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <Settings_Write+0x124>)
 8001a78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	settings[59] = SETTINGS_CRC_PADDING;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <Settings_Write+0x124>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1);
 8001a84:	220f      	movs	r2, #15
 8001a86:	490a      	ldr	r1, [pc, #40]	; (8001ab0 <Settings_Write+0x124>)
 8001a88:	482e      	ldr	r0, [pc, #184]	; (8001b44 <Settings_Write+0x1b8>)
 8001a8a:	f001 fefa 	bl	8003882 <HAL_CRC_Calculate>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&settings[60], (uint32_t)&crc);
 8001a92:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <Settings_Write+0x1bc>)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f7ff f809 	bl	8000ab0 <General_Copy_32_Bit>
	Flash_Write(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 8001a9e:	2240      	movs	r2, #64	; 0x40
 8001aa0:	492a      	ldr	r1, [pc, #168]	; (8001b4c <Settings_Write+0x1c0>)
 8001aa2:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <Settings_Write+0x124>)
 8001aa4:	f7fe ff67 	bl	8000976 <Flash_Write>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200001fc 	.word	0x200001fc
 8001ab4:	200001ec 	.word	0x200001ec
 8001ab8:	200001fe 	.word	0x200001fe
 8001abc:	200001ee 	.word	0x200001ee
 8001ac0:	20000200 	.word	0x20000200
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	200001c7 	.word	0x200001c7
 8001acc:	2000023c 	.word	0x2000023c
 8001ad0:	20000204 	.word	0x20000204
 8001ad4:	20000240 	.word	0x20000240
 8001ad8:	20000208 	.word	0x20000208
 8001adc:	20000244 	.word	0x20000244
 8001ae0:	200001c4 	.word	0x200001c4
 8001ae4:	20000020 	.word	0x20000020
 8001ae8:	2000020e 	.word	0x2000020e
 8001aec:	20000004 	.word	0x20000004
 8001af0:	20000212 	.word	0x20000212
 8001af4:	200001cc 	.word	0x200001cc
 8001af8:	20000216 	.word	0x20000216
 8001afc:	20000008 	.word	0x20000008
 8001b00:	2000021a 	.word	0x2000021a
 8001b04:	2000000c 	.word	0x2000000c
 8001b08:	2000021e 	.word	0x2000021e
 8001b0c:	200001d0 	.word	0x200001d0
 8001b10:	20000222 	.word	0x20000222
 8001b14:	20000010 	.word	0x20000010
 8001b18:	20000226 	.word	0x20000226
 8001b1c:	20000014 	.word	0x20000014
 8001b20:	2000022a 	.word	0x2000022a
 8001b24:	200001d4 	.word	0x200001d4
 8001b28:	2000022e 	.word	0x2000022e
 8001b2c:	20000018 	.word	0x20000018
 8001b30:	20000232 	.word	0x20000232
 8001b34:	2000001c 	.word	0x2000001c
 8001b38:	20000234 	.word	0x20000234
 8001b3c:	2000001e 	.word	0x2000001e
 8001b40:	20000002 	.word	0x20000002
 8001b44:	200003c8 	.word	0x200003c8
 8001b48:	20000238 	.word	0x20000238
 8001b4c:	0800fc00 	.word	0x0800fc00

08001b50 <Signal_SysTick_Interrupt>:
float signal_timeout;

uint8_t signal_present = 0;
uint32_t signal_timeout_passed_ms = 0;

void Signal_SysTick_Interrupt(){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	if(signal_present){
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <Signal_SysTick_Interrupt+0x6c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d02d      	beq.n	8001bb8 <Signal_SysTick_Interrupt+0x68>
		if((float)signal_timeout_passed_ms >= signal_timeout){
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <Signal_SysTick_Interrupt+0x70>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fba9 	bl	80002b8 <__aeabi_ui2f>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <Signal_SysTick_Interrupt+0x74>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f7fe fdac 	bl	80006cc <__aeabi_fcmpge>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d019      	beq.n	8001bae <Signal_SysTick_Interrupt+0x5e>
			signal_present = 0;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <Signal_SysTick_Interrupt+0x6c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <Signal_SysTick_Interrupt+0x78>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <Signal_SysTick_Interrupt+0x48>
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <Signal_SysTick_Interrupt+0x78>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <Signal_SysTick_Interrupt+0x68>
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <Signal_SysTick_Interrupt+0x7c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10f      	bne.n	8001bb8 <Signal_SysTick_Interrupt+0x68>
				if(pid_running){
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <Signal_SysTick_Interrupt+0x80>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <Signal_SysTick_Interrupt+0x54>
					PID_Stop();
 8001ba0:	f7ff fbaa 	bl	80012f8 <PID_Stop>
				}
				pid_setpoint = 0;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <Signal_SysTick_Interrupt+0x84>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
			}
		}else{
			signal_timeout_passed_ms++;
		}
	}
}
 8001bac:	e004      	b.n	8001bb8 <Signal_SysTick_Interrupt+0x68>
			signal_timeout_passed_ms++;
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <Signal_SysTick_Interrupt+0x70>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a02      	ldr	r2, [pc, #8]	; (8001bc0 <Signal_SysTick_Interrupt+0x70>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000248 	.word	0x20000248
 8001bc0:	2000024c 	.word	0x2000024c
 8001bc4:	20000244 	.word	0x20000244
 8001bc8:	2000023c 	.word	0x2000023c
 8001bcc:	20000254 	.word	0x20000254
 8001bd0:	200001d8 	.word	0x200001d8
 8001bd4:	20000024 	.word	0x20000024

08001bd8 <Signal_Timer_Interrupt>:
void Signal_Timer_Interrupt(){
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
	signal_present = 0;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <Signal_Timer_Interrupt+0x14>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000248 	.word	0x20000248

08001bf0 <Signal_Interrupt>:
void Signal_Interrupt(){
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
	uint32_t cnt = Signal_Read_Timer();
 8001bf6:	f000 f8bd 	bl	8001d74 <Signal_Read_Timer>
 8001bfa:	60f8      	str	r0, [r7, #12]
	if(Signal_Read() == SIGNAL_HIGH){
 8001bfc:	f000 f8d2 	bl	8001da4 <Signal_Read>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d108      	bne.n	8001c18 <Signal_Interrupt+0x28>
		Signal_Timer_Reset();
 8001c06:	f000 f8c1 	bl	8001d8c <Signal_Timer_Reset>
		signal_present = 1;
 8001c0a:	4b4f      	ldr	r3, [pc, #316]	; (8001d48 <Signal_Interrupt+0x158>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
		signal_timeout_passed_ms = 0;
 8001c10:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <Signal_Interrupt+0x15c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
					PID_Stop();
				}
			}
		}
	}
}
 8001c16:	e092      	b.n	8001d3e <Signal_Interrupt+0x14e>
	}else if(signal_present){
 8001c18:	4b4b      	ldr	r3, [pc, #300]	; (8001d48 <Signal_Interrupt+0x158>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 808e 	beq.w	8001d3e <Signal_Interrupt+0x14e>
		float received_length_ms  = (float)((uint32_t)cnt + (uint32_t)1) / 12000.0f;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fb46 	bl	80002b8 <__aeabi_ui2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4948      	ldr	r1, [pc, #288]	; (8001d50 <Signal_Interrupt+0x160>)
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc4d 	bl	80004d0 <__aeabi_fdiv>
 8001c36:	4603      	mov	r3, r0
 8001c38:	60bb      	str	r3, [r7, #8]
		if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <Signal_Interrupt+0x164>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	68b8      	ldr	r0, [r7, #8]
 8001c42:	f7fe fd39 	bl	80006b8 <__aeabi_fcmple>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d061      	beq.n	8001d10 <Signal_Interrupt+0x120>
 8001c4c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c50:	68b8      	ldr	r0, [r7, #8]
 8001c52:	f7fe fd3b 	bl	80006cc <__aeabi_fcmpge>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d059      	beq.n	8001d10 <Signal_Interrupt+0x120>
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <Signal_Interrupt+0x168>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <Signal_Interrupt+0x84>
 8001c64:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <Signal_Interrupt+0x168>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d067      	beq.n	8001d3c <Signal_Interrupt+0x14c>
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <Signal_Interrupt+0x16c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d163      	bne.n	8001d3c <Signal_Interrupt+0x14c>
				float new_pid_setpoint = (((float)potentiometer_max - (float)potentiometer_min) * ((received_length_ms - 1.0f) / (signal_length - 1.0f))) + (float)potentiometer_min;
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <Signal_Interrupt+0x170>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fb1d 	bl	80002b8 <__aeabi_ui2f>
 8001c7e:	4604      	mov	r4, r0
 8001c80:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <Signal_Interrupt+0x174>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fb17 	bl	80002b8 <__aeabi_ui2f>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7fe fa60 	bl	8000154 <__aeabi_fsub>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461c      	mov	r4, r3
 8001c98:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c9c:	68b8      	ldr	r0, [r7, #8]
 8001c9e:	f7fe fa59 	bl	8000154 <__aeabi_fsub>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461d      	mov	r5, r3
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <Signal_Interrupt+0x164>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fa50 	bl	8000154 <__aeabi_fsub>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4628      	mov	r0, r5
 8001cba:	f7fe fc09 	bl	80004d0 <__aeabi_fdiv>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7fe fb50 	bl	8000368 <__aeabi_fmul>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461c      	mov	r4, r3
 8001ccc:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <Signal_Interrupt+0x174>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe faf1 	bl	80002b8 <__aeabi_ui2f>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7fe fa3c 	bl	8000158 <__addsf3>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	607b      	str	r3, [r7, #4]
				if(pid_setpoint != new_pid_setpoint){
 8001ce4:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <Signal_Interrupt+0x178>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fcd0 	bl	8000690 <__aeabi_fcmpeq>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <Signal_Interrupt+0x10c>
					led_position_changed = 1;
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <Signal_Interrupt+0x17c>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
				pid_setpoint = new_pid_setpoint;
 8001cfc:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <Signal_Interrupt+0x178>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
				if(!pid_running){
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <Signal_Interrupt+0x180>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <Signal_Interrupt+0x14c>
					PID_Start();
 8001d0a:	f7ff fad3 	bl	80012b4 <PID_Start>
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001d0e:	e015      	b.n	8001d3c <Signal_Interrupt+0x14c>
			signal_present = 0;
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <Signal_Interrupt+0x158>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <Signal_Interrupt+0x168>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <Signal_Interrupt+0x13e>
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <Signal_Interrupt+0x168>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <Signal_Interrupt+0x14e>
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <Signal_Interrupt+0x16c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <Signal_Interrupt+0x14e>
				if(pid_running){
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <Signal_Interrupt+0x180>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <Signal_Interrupt+0x14e>
					PID_Stop();
 8001d36:	f7ff fadf 	bl	80012f8 <PID_Stop>
}
 8001d3a:	e000      	b.n	8001d3e <Signal_Interrupt+0x14e>
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001d3c:	bf00      	nop
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bdb0      	pop	{r4, r5, r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000248 	.word	0x20000248
 8001d4c:	2000024c 	.word	0x2000024c
 8001d50:	463b8000 	.word	0x463b8000
 8001d54:	20000240 	.word	0x20000240
 8001d58:	2000023c 	.word	0x2000023c
 8001d5c:	20000254 	.word	0x20000254
 8001d60:	200001ee 	.word	0x200001ee
 8001d64:	200001ec 	.word	0x200001ec
 8001d68:	20000024 	.word	0x20000024
 8001d6c:	200001c5 	.word	0x200001c5
 8001d70:	200001d8 	.word	0x200001d8

08001d74 <Signal_Read_Timer>:

uint32_t Signal_Read_Timer(){
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <Signal_Read_Timer+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000460 	.word	0x20000460

08001d8c <Signal_Timer_Reset>:
void Signal_Timer_Reset(){
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <Signal_Timer_Reset+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000460 	.word	0x20000460

08001da4 <Signal_Read>:
uint8_t Signal_Read(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001db2:	e01d      	b.n	8001df0 <Signal_Read+0x4c>
		i = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 8001db8:	2102      	movs	r1, #2
 8001dba:	4811      	ldr	r0, [pc, #68]	; (8001e00 <Signal_Read+0x5c>)
 8001dbc:	f002 f918 	bl	8003ff0 <HAL_GPIO_ReadPin>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	71fb      	strb	r3, [r7, #7]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001dc4:	e011      	b.n	8001dea <Signal_Read+0x46>
			i++;
 8001dc6:	797b      	ldrb	r3, [r7, #5]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 8001dcc:	2102      	movs	r1, #2
 8001dce:	480c      	ldr	r0, [pc, #48]	; (8001e00 <Signal_Read+0x5c>)
 8001dd0:	f002 f90e 	bl	8003ff0 <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d000      	beq.n	8001de0 <Signal_Read+0x3c>
				break;
 8001dde:	e007      	b.n	8001df0 <Signal_Read+0x4c>
			}
			if(i == SIGNAL_DEBOUNCE_SAMPLES){
 8001de0:	797b      	ldrb	r3, [r7, #5]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d101      	bne.n	8001dea <Signal_Read+0x46>
				d = 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	71bb      	strb	r3, [r7, #6]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d1ea      	bne.n	8001dc6 <Signal_Read+0x22>
	while(d != 1){
 8001df0:	79bb      	ldrb	r3, [r7, #6]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d1de      	bne.n	8001db4 <Signal_Read+0x10>
			}
		}
	}
	return level;
 8001df6:	79fb      	ldrb	r3, [r7, #7]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40010c00 	.word	0x40010c00

08001e04 <Signal_Init>:

void Signal_Init(){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <Signal_Init+0x10>)
 8001e0a:	f004 fbc9 	bl	80065a0 <HAL_TIM_Base_Start>
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000460 	.word	0x20000460

08001e18 <USB_Det_Read>:

uint8_t usb_present = 0;
uint8_t usb_tx_buffer[64];
uint8_t usb_long_buffer[256];

uint8_t USB_Det_Read(){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001e26:	e01f      	b.n	8001e68 <USB_Det_Read+0x50>
		i = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8001e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e30:	4811      	ldr	r0, [pc, #68]	; (8001e78 <USB_Det_Read+0x60>)
 8001e32:	f002 f8dd 	bl	8003ff0 <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001e3a:	e012      	b.n	8001e62 <USB_Det_Read+0x4a>
			i++;
 8001e3c:	797b      	ldrb	r3, [r7, #5]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 8001e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e46:	480c      	ldr	r0, [pc, #48]	; (8001e78 <USB_Det_Read+0x60>)
 8001e48:	f002 f8d2 	bl	8003ff0 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d000      	beq.n	8001e58 <USB_Det_Read+0x40>
				break;
 8001e56:	e007      	b.n	8001e68 <USB_Det_Read+0x50>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 8001e58:	797b      	ldrb	r3, [r7, #5]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d101      	bne.n	8001e62 <USB_Det_Read+0x4a>
				d = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001e62:	797b      	ldrb	r3, [r7, #5]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d1e9      	bne.n	8001e3c <USB_Det_Read+0x24>
	while(d != 1){
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d1dc      	bne.n	8001e28 <USB_Det_Read+0x10>
			}
		}
	}
	return level;
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40010c00 	.word	0x40010c00

08001e7c <USB_Det_Interrupt>:
void USB_Det_Interrupt(){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e80:	f7ff ffca 	bl	8001e18 <USB_Det_Read>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d103      	bne.n	8001e92 <USB_Det_Interrupt+0x16>
		usb_present = 1;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <USB_Det_Interrupt+0x2c>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	e002      	b.n	8001e98 <USB_Det_Interrupt+0x1c>
	}else{
		usb_present = 0;
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <USB_Det_Interrupt+0x2c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
	}
	if(pid_running){
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <USB_Det_Interrupt+0x30>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <USB_Det_Interrupt+0x28>
		PID_Stop();
 8001ea0:	f7ff fa2a 	bl	80012f8 <PID_Stop>
	}
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000254 	.word	0x20000254
 8001eac:	200001d8 	.word	0x200001d8

08001eb0 <USB_Init>:
void USB_Init(){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001eb4:	f7ff ffb0 	bl	8001e18 <USB_Det_Read>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d103      	bne.n	8001ec6 <USB_Init+0x16>
		usb_present = 1;
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <USB_Init+0x20>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
	}else{
		usb_present = 0;
	}
}
 8001ec4:	e002      	b.n	8001ecc <USB_Init+0x1c>
		usb_present = 0;
 8001ec6:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <USB_Init+0x20>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000254 	.word	0x20000254

08001ed4 <USB_Packet_Received>:
void USB_Packet_Received(uint8_t *data, uint32_t length){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	if((data[1] == USB_CMD_CONFIG) && (uint32_t)data[0] == length){
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d11c      	bne.n	8001f22 <USB_Packet_Received+0x4e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d116      	bne.n	8001f22 <USB_Packet_Received+0x4e>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	461a      	mov	r2, r3
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4829      	ldr	r0, [pc, #164]	; (8001fa4 <USB_Packet_Received+0xd0>)
 8001f00:	f001 fcbf 	bl	8003882 <HAL_CRC_Calculate>
 8001f04:	4601      	mov	r1, r0
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	3b04      	subs	r3, #4
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4299      	cmp	r1, r3
 8001f12:	d143      	bne.n	8001f9c <USB_Packet_Received+0xc8>
			USB_Parse_Config(data);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f84d 	bl	8001fb4 <USB_Parse_Config>
			usb_rq = USB_RQ_CONF;
 8001f1a:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <USB_Packet_Received+0xd4>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001f20:	e03c      	b.n	8001f9c <USB_Packet_Received+0xc8>
		}
	}else if((data[1] == USB_CMD_STATUS) && (length == 64)){
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3301      	adds	r3, #1
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d108      	bne.n	8001f3e <USB_Packet_Received+0x6a>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b40      	cmp	r3, #64	; 0x40
 8001f30:	d105      	bne.n	8001f3e <USB_Packet_Received+0x6a>
		memcpy(usb_long_buffer, data, 64);
 8001f32:	2240      	movs	r2, #64	; 0x40
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	481d      	ldr	r0, [pc, #116]	; (8001fac <USB_Packet_Received+0xd8>)
 8001f38:	f00a f8ba 	bl	800c0b0 <memcpy>
 8001f3c:	e02e      	b.n	8001f9c <USB_Packet_Received+0xc8>
	}
	else if((usb_long_buffer[1] == USB_CMD_STATUS) && (usb_long_buffer[0] == (length + 64))){
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <USB_Packet_Received+0xd8>)
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d126      	bne.n	8001f94 <USB_Packet_Received+0xc0>
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <USB_Packet_Received+0xd8>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	3340      	adds	r3, #64	; 0x40
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d11f      	bne.n	8001f94 <USB_Packet_Received+0xc0>
		memcpy(&usb_long_buffer[64], data, length);
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4815      	ldr	r0, [pc, #84]	; (8001fb0 <USB_Packet_Received+0xdc>)
 8001f5a:	f00a f8a9 	bl	800c0b0 <memcpy>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)usb_long_buffer, ((length + 64) / 4) - 1) == *(uint32_t *)&usb_long_buffer[length + 64- 4]){
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	3340      	adds	r3, #64	; 0x40
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3b01      	subs	r3, #1
 8001f66:	461a      	mov	r2, r3
 8001f68:	4910      	ldr	r1, [pc, #64]	; (8001fac <USB_Packet_Received+0xd8>)
 8001f6a:	480e      	ldr	r0, [pc, #56]	; (8001fa4 <USB_Packet_Received+0xd0>)
 8001f6c:	f001 fc89 	bl	8003882 <HAL_CRC_Calculate>
 8001f70:	4602      	mov	r2, r0
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	333c      	adds	r3, #60	; 0x3c
 8001f76:	490d      	ldr	r1, [pc, #52]	; (8001fac <USB_Packet_Received+0xd8>)
 8001f78:	440b      	add	r3, r1
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d105      	bne.n	8001f8c <USB_Packet_Received+0xb8>
			USB_Parse_Status(usb_long_buffer);
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <USB_Packet_Received+0xd8>)
 8001f82:	f000 f8ff 	bl	8002184 <USB_Parse_Status>
			usb_rq = USB_RQ_STAT;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <USB_Packet_Received+0xd4>)
 8001f88:	2202      	movs	r2, #2
 8001f8a:	701a      	strb	r2, [r3, #0]
		}
		usb_long_buffer[1] = 0xff;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <USB_Packet_Received+0xd8>)
 8001f8e:	22ff      	movs	r2, #255	; 0xff
 8001f90:	705a      	strb	r2, [r3, #1]
 8001f92:	e003      	b.n	8001f9c <USB_Packet_Received+0xc8>
	}else{
		usb_long_buffer[1] = 0xff;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <USB_Packet_Received+0xd8>)
 8001f96:	22ff      	movs	r2, #255	; 0xff
 8001f98:	705a      	strb	r2, [r3, #1]
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200003c8 	.word	0x200003c8
 8001fa8:	20000250 	.word	0x20000250
 8001fac:	20000298 	.word	0x20000298
 8001fb0:	200002d8 	.word	0x200002d8

08001fb4 <USB_Parse_Config>:
void USB_Parse_Config(uint8_t *data){
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	usb_rq_sett_revert_flash = data[2];
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	789a      	ldrb	r2, [r3, #2]
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <USB_Parse_Config+0x1c>)
 8001fc2:	701a      	strb	r2, [r3, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000251 	.word	0x20000251

08001fd4 <USB_Send_Config>:
void USB_Send_Config(){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_CONFIG_LENGTH;
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <USB_Send_Config+0x128>)
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_CONFIG;
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <USB_Send_Config+0x128>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	705a      	strb	r2, [r3, #1]
	*(uint16_t *)&usb_tx_buffer[2] = potentiometer_min;
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <USB_Send_Config+0x12c>)
 8001fe8:	4a46      	ldr	r2, [pc, #280]	; (8002104 <USB_Send_Config+0x130>)
 8001fea:	8812      	ldrh	r2, [r2, #0]
 8001fec:	801a      	strh	r2, [r3, #0]
	*(uint16_t *)&usb_tx_buffer[4] = potentiometer_max;
 8001fee:	4b46      	ldr	r3, [pc, #280]	; (8002108 <USB_Send_Config+0x134>)
 8001ff0:	4a46      	ldr	r2, [pc, #280]	; (800210c <USB_Send_Config+0x138>)
 8001ff2:	8812      	ldrh	r2, [r2, #0]
 8001ff4:	801a      	strh	r2, [r3, #0]
	usb_tx_buffer[6] = (uint8_t)((uint16_t)motor_max_power / 10);
 8001ff6:	4b46      	ldr	r3, [pc, #280]	; (8002110 <USB_Send_Config+0x13c>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	4a46      	ldr	r2, [pc, #280]	; (8002114 <USB_Send_Config+0x140>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	08db      	lsrs	r3, r3, #3
 8002002:	b29b      	uxth	r3, r3
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <USB_Send_Config+0x128>)
 8002008:	719a      	strb	r2, [r3, #6]
	usb_tx_buffer[7] = motor_invert;
 800200a:	4b43      	ldr	r3, [pc, #268]	; (8002118 <USB_Send_Config+0x144>)
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <USB_Send_Config+0x128>)
 8002010:	71da      	strb	r2, [r3, #7]
	usb_tx_buffer[8] = signal_ignore;
 8002012:	4b42      	ldr	r3, [pc, #264]	; (800211c <USB_Send_Config+0x148>)
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <USB_Send_Config+0x128>)
 8002018:	721a      	strb	r2, [r3, #8]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[9], (uint32_t)&signal_length);
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <USB_Send_Config+0x14c>)
 800201c:	4a41      	ldr	r2, [pc, #260]	; (8002124 <USB_Send_Config+0x150>)
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fd45 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[13], (uint32_t)&signal_timeout);
 8002026:	4b40      	ldr	r3, [pc, #256]	; (8002128 <USB_Send_Config+0x154>)
 8002028:	4a40      	ldr	r2, [pc, #256]	; (800212c <USB_Send_Config+0x158>)
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fd3f 	bl	8000ab0 <General_Copy_32_Bit>
	usb_tx_buffer[17] = led_mode;
 8002032:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <USB_Send_Config+0x15c>)
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <USB_Send_Config+0x128>)
 8002038:	745a      	strb	r2, [r3, #17]
	usb_tx_buffer[18] = pid_on;
 800203a:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <USB_Send_Config+0x160>)
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <USB_Send_Config+0x128>)
 8002040:	749a      	strb	r2, [r3, #18]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[19], (uint32_t)&pid_kp_1);
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <USB_Send_Config+0x164>)
 8002044:	4a3d      	ldr	r2, [pc, #244]	; (800213c <USB_Send_Config+0x168>)
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fd31 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[23], (uint32_t)&pid_ki_1);
 800204e:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <USB_Send_Config+0x16c>)
 8002050:	4a3c      	ldr	r2, [pc, #240]	; (8002144 <USB_Send_Config+0x170>)
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fd2b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[27], (uint32_t)&pid_kd_1);
 800205a:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <USB_Send_Config+0x174>)
 800205c:	4a3b      	ldr	r2, [pc, #236]	; (800214c <USB_Send_Config+0x178>)
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fd25 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[31], (uint32_t)&pid_kp_1);
 8002066:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <USB_Send_Config+0x17c>)
 8002068:	4a34      	ldr	r2, [pc, #208]	; (800213c <USB_Send_Config+0x168>)
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fd1f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[35], (uint32_t)&pid_ki_1);
 8002072:	4b38      	ldr	r3, [pc, #224]	; (8002154 <USB_Send_Config+0x180>)
 8002074:	4a33      	ldr	r2, [pc, #204]	; (8002144 <USB_Send_Config+0x170>)
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fd19 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[39], (uint32_t)&pid_kd_1);
 800207e:	4b36      	ldr	r3, [pc, #216]	; (8002158 <USB_Send_Config+0x184>)
 8002080:	4a32      	ldr	r2, [pc, #200]	; (800214c <USB_Send_Config+0x178>)
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fd13 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[43], (uint32_t)&pid_kp_1);
 800208a:	4b34      	ldr	r3, [pc, #208]	; (800215c <USB_Send_Config+0x188>)
 800208c:	4a2b      	ldr	r2, [pc, #172]	; (800213c <USB_Send_Config+0x168>)
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fd0d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[47], (uint32_t)&pid_ki_1);
 8002096:	4b32      	ldr	r3, [pc, #200]	; (8002160 <USB_Send_Config+0x18c>)
 8002098:	4a2a      	ldr	r2, [pc, #168]	; (8002144 <USB_Send_Config+0x170>)
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fd07 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[51], (uint32_t)&pid_kd_1);
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <USB_Send_Config+0x190>)
 80020a4:	4a29      	ldr	r2, [pc, #164]	; (800214c <USB_Send_Config+0x178>)
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fd01 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[55], (uint32_t)&pid_split_1);
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <USB_Send_Config+0x194>)
 80020b0:	4a2e      	ldr	r2, [pc, #184]	; (800216c <USB_Send_Config+0x198>)
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fd18 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[57], (uint32_t)&pid_split_2);
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <USB_Send_Config+0x19c>)
 80020bc:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <USB_Send_Config+0x1a0>)
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fd12 	bl	8000aea <General_Copy_16_Bit>
	usb_tx_buffer[59] = pid_sampling_time;
 80020c6:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <USB_Send_Config+0x1a4>)
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <USB_Send_Config+0x128>)
 80020cc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_CONFIG_LENGTH / 4) - 1);
 80020d0:	220f      	movs	r2, #15
 80020d2:	490a      	ldr	r1, [pc, #40]	; (80020fc <USB_Send_Config+0x128>)
 80020d4:	4829      	ldr	r0, [pc, #164]	; (800217c <USB_Send_Config+0x1a8>)
 80020d6:	f001 fbd4 	bl	8003882 <HAL_CRC_Calculate>
 80020da:	4603      	mov	r3, r0
 80020dc:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[60], (uint32_t)&crc);
 80020de:	4a28      	ldr	r2, [pc, #160]	; (8002180 <USB_Send_Config+0x1ac>)
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	4619      	mov	r1, r3
 80020e4:	4610      	mov	r0, r2
 80020e6:	f7fe fce3 	bl	8000ab0 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_CONFIG_LENGTH);
 80020ea:	2140      	movs	r1, #64	; 0x40
 80020ec:	4803      	ldr	r0, [pc, #12]	; (80020fc <USB_Send_Config+0x128>)
 80020ee:	f009 fbdd 	bl	800b8ac <CDC_Transmit_FS>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000258 	.word	0x20000258
 8002100:	2000025a 	.word	0x2000025a
 8002104:	200001ec 	.word	0x200001ec
 8002108:	2000025c 	.word	0x2000025c
 800210c:	200001ee 	.word	0x200001ee
 8002110:	20000000 	.word	0x20000000
 8002114:	cccccccd 	.word	0xcccccccd
 8002118:	200001c7 	.word	0x200001c7
 800211c:	2000023c 	.word	0x2000023c
 8002120:	20000261 	.word	0x20000261
 8002124:	20000240 	.word	0x20000240
 8002128:	20000265 	.word	0x20000265
 800212c:	20000244 	.word	0x20000244
 8002130:	200001c4 	.word	0x200001c4
 8002134:	20000020 	.word	0x20000020
 8002138:	2000026b 	.word	0x2000026b
 800213c:	20000004 	.word	0x20000004
 8002140:	2000026f 	.word	0x2000026f
 8002144:	200001cc 	.word	0x200001cc
 8002148:	20000273 	.word	0x20000273
 800214c:	20000008 	.word	0x20000008
 8002150:	20000277 	.word	0x20000277
 8002154:	2000027b 	.word	0x2000027b
 8002158:	2000027f 	.word	0x2000027f
 800215c:	20000283 	.word	0x20000283
 8002160:	20000287 	.word	0x20000287
 8002164:	2000028b 	.word	0x2000028b
 8002168:	2000028f 	.word	0x2000028f
 800216c:	2000001c 	.word	0x2000001c
 8002170:	20000291 	.word	0x20000291
 8002174:	2000001e 	.word	0x2000001e
 8002178:	20000002 	.word	0x20000002
 800217c:	200003c8 	.word	0x200003c8
 8002180:	20000294 	.word	0x20000294

08002184 <USB_Parse_Status>:
void USB_Parse_Status(uint8_t *data){
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	potentiometer_min = *(uint16_t *)&data[2];
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	885a      	ldrh	r2, [r3, #2]
 8002190:	4b5e      	ldr	r3, [pc, #376]	; (800230c <USB_Parse_Status+0x188>)
 8002192:	801a      	strh	r2, [r3, #0]
	potentiometer_max = *(uint16_t *)&data[4];
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	889a      	ldrh	r2, [r3, #4]
 8002198:	4b5d      	ldr	r3, [pc, #372]	; (8002310 <USB_Parse_Status+0x18c>)
 800219a:	801a      	strh	r2, [r3, #0]
	motor_max_power = (uint16_t)data[6] * 10;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3306      	adds	r3, #6
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	0092      	lsls	r2, r2, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	4b59      	ldr	r3, [pc, #356]	; (8002314 <USB_Parse_Status+0x190>)
 80021b0:	801a      	strh	r2, [r3, #0]
	motor_invert = data[7];
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	79da      	ldrb	r2, [r3, #7]
 80021b6:	4b58      	ldr	r3, [pc, #352]	; (8002318 <USB_Parse_Status+0x194>)
 80021b8:	701a      	strb	r2, [r3, #0]
	signal_ignore = data[8];
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7a1a      	ldrb	r2, [r3, #8]
 80021be:	4b57      	ldr	r3, [pc, #348]	; (800231c <USB_Parse_Status+0x198>)
 80021c0:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&data[9]);
 80021c2:	4a57      	ldr	r2, [pc, #348]	; (8002320 <USB_Parse_Status+0x19c>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3309      	adds	r3, #9
 80021c8:	4619      	mov	r1, r3
 80021ca:	4610      	mov	r0, r2
 80021cc:	f7fe fc70 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&data[13]);
 80021d0:	4a54      	ldr	r2, [pc, #336]	; (8002324 <USB_Parse_Status+0x1a0>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	330d      	adds	r3, #13
 80021d6:	4619      	mov	r1, r3
 80021d8:	4610      	mov	r0, r2
 80021da:	f7fe fc69 	bl	8000ab0 <General_Copy_32_Bit>
	led_mode = data[17];
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7c5a      	ldrb	r2, [r3, #17]
 80021e2:	4b51      	ldr	r3, [pc, #324]	; (8002328 <USB_Parse_Status+0x1a4>)
 80021e4:	701a      	strb	r2, [r3, #0]
	pid_on = data[18];
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7c9a      	ldrb	r2, [r3, #18]
 80021ea:	4b50      	ldr	r3, [pc, #320]	; (800232c <USB_Parse_Status+0x1a8>)
 80021ec:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&data[19]);
 80021ee:	4a50      	ldr	r2, [pc, #320]	; (8002330 <USB_Parse_Status+0x1ac>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3313      	adds	r3, #19
 80021f4:	4619      	mov	r1, r3
 80021f6:	4610      	mov	r0, r2
 80021f8:	f7fe fc5a 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&data[23]);
 80021fc:	4a4d      	ldr	r2, [pc, #308]	; (8002334 <USB_Parse_Status+0x1b0>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3317      	adds	r3, #23
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f7fe fc53 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&data[27]);
 800220a:	4a4b      	ldr	r2, [pc, #300]	; (8002338 <USB_Parse_Status+0x1b4>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	331b      	adds	r3, #27
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f7fe fc4c 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&data[31]);
 8002218:	4a48      	ldr	r2, [pc, #288]	; (800233c <USB_Parse_Status+0x1b8>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	331f      	adds	r3, #31
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f7fe fc45 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&data[35]);
 8002226:	4a46      	ldr	r2, [pc, #280]	; (8002340 <USB_Parse_Status+0x1bc>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3323      	adds	r3, #35	; 0x23
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f7fe fc3e 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&data[39]);
 8002234:	4a43      	ldr	r2, [pc, #268]	; (8002344 <USB_Parse_Status+0x1c0>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3327      	adds	r3, #39	; 0x27
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f7fe fc37 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&data[43]);
 8002242:	4a41      	ldr	r2, [pc, #260]	; (8002348 <USB_Parse_Status+0x1c4>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	332b      	adds	r3, #43	; 0x2b
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7fe fc30 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&data[47]);
 8002250:	4a3e      	ldr	r2, [pc, #248]	; (800234c <USB_Parse_Status+0x1c8>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	332f      	adds	r3, #47	; 0x2f
 8002256:	4619      	mov	r1, r3
 8002258:	4610      	mov	r0, r2
 800225a:	f7fe fc29 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&data[51]);
 800225e:	4a3c      	ldr	r2, [pc, #240]	; (8002350 <USB_Parse_Status+0x1cc>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3333      	adds	r3, #51	; 0x33
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f7fe fc22 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&data[55]);
 800226c:	4a39      	ldr	r2, [pc, #228]	; (8002354 <USB_Parse_Status+0x1d0>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3337      	adds	r3, #55	; 0x37
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7fe fc38 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&data[57]);
 800227a:	4a37      	ldr	r2, [pc, #220]	; (8002358 <USB_Parse_Status+0x1d4>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3339      	adds	r3, #57	; 0x39
 8002280:	4619      	mov	r1, r3
 8002282:	4610      	mov	r0, r2
 8002284:	f7fe fc31 	bl	8000aea <General_Copy_16_Bit>
	pid_sampling_time = data[59];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <USB_Parse_Status+0x1d8>)
 8002290:	701a      	strb	r2, [r3, #0]
	if(PID_Get_Sampling_Time() != pid_sampling_time){
 8002292:	f7fe fe09 	bl	8000ea8 <PID_Get_Sampling_Time>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b30      	ldr	r3, [pc, #192]	; (800235c <USB_Parse_Status+0x1d8>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d005      	beq.n	80022b0 <USB_Parse_Status+0x12c>
		PID_Set_Sampling_Time(pid_sampling_time);
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <USB_Parse_Status+0x1d8>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fe0e 	bl	8000ecc <PID_Set_Sampling_Time>
	}
	float new_pid_setpoint = 0;
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
	General_Copy_32_Bit((uint32_t)&new_pid_setpoint, (uint32_t)&data[60]);
 80022b6:	f107 020c 	add.w	r2, r7, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	333c      	adds	r3, #60	; 0x3c
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f7fe fbf5 	bl	8000ab0 <General_Copy_32_Bit>
	if(signal_ignore){
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <USB_Parse_Status+0x198>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00f      	beq.n	80022ee <USB_Parse_Status+0x16a>
		if(pid_setpoint != new_pid_setpoint){
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <USB_Parse_Status+0x1dc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f9da 	bl	8000690 <__aeabi_fcmpeq>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <USB_Parse_Status+0x164>
			led_position_changed = 1;
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <USB_Parse_Status+0x1e0>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
		}
		pid_setpoint = new_pid_setpoint;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <USB_Parse_Status+0x1dc>)
 80022ec:	6013      	str	r3, [r2, #0]
	}
	usb_rq_stat_phold = data[64];
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <USB_Parse_Status+0x1e4>)
 80022f6:	701a      	strb	r2, [r3, #0]
	usb_rq_stat_motor = data[65];
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <USB_Parse_Status+0x1e8>)
 8002300:	701a      	strb	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200001ec 	.word	0x200001ec
 8002310:	200001ee 	.word	0x200001ee
 8002314:	20000000 	.word	0x20000000
 8002318:	200001c7 	.word	0x200001c7
 800231c:	2000023c 	.word	0x2000023c
 8002320:	20000240 	.word	0x20000240
 8002324:	20000244 	.word	0x20000244
 8002328:	200001c4 	.word	0x200001c4
 800232c:	20000020 	.word	0x20000020
 8002330:	20000004 	.word	0x20000004
 8002334:	200001cc 	.word	0x200001cc
 8002338:	20000008 	.word	0x20000008
 800233c:	2000000c 	.word	0x2000000c
 8002340:	200001d0 	.word	0x200001d0
 8002344:	20000010 	.word	0x20000010
 8002348:	20000014 	.word	0x20000014
 800234c:	200001d4 	.word	0x200001d4
 8002350:	20000018 	.word	0x20000018
 8002354:	2000001c 	.word	0x2000001c
 8002358:	2000001e 	.word	0x2000001e
 800235c:	20000002 	.word	0x20000002
 8002360:	20000024 	.word	0x20000024
 8002364:	200001c5 	.word	0x200001c5
 8002368:	20000253 	.word	0x20000253
 800236c:	20000252 	.word	0x20000252

08002370 <USB_Send_Status>:
void USB_Send_Status(){
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_STATUS_LENGTH;
 8002376:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <USB_Send_Status+0x84>)
 8002378:	2214      	movs	r2, #20
 800237a:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_STATUS;
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <USB_Send_Status+0x84>)
 800237e:	2201      	movs	r2, #1
 8002380:	705a      	strb	r2, [r3, #1]
	usb_tx_buffer[2] = pid_running;
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <USB_Send_Status+0x88>)
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <USB_Send_Status+0x84>)
 8002388:	709a      	strb	r2, [r3, #2]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[3], (uint32_t)&pid_setpoint);
 800238a:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <USB_Send_Status+0x8c>)
 800238c:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <USB_Send_Status+0x90>)
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fb8d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[7], (uint32_t)&potentiometer_position);
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <USB_Send_Status+0x94>)
 8002398:	4a1b      	ldr	r2, [pc, #108]	; (8002408 <USB_Send_Status+0x98>)
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fb87 	bl	8000ab0 <General_Copy_32_Bit>
	int16_t motor_val = Motor_Get();
 80023a2:	f7fe fd0b 	bl	8000dbc <Motor_Get>
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[11], (uint32_t)&motor_val);
 80023aa:	4a18      	ldr	r2, [pc, #96]	; (800240c <USB_Send_Status+0x9c>)
 80023ac:	1dbb      	adds	r3, r7, #6
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f7fe fb9a 	bl	8000aea <General_Copy_16_Bit>
	usb_tx_buffer[13] = USB_CRC_PADDING;
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <USB_Send_Status+0x84>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	735a      	strb	r2, [r3, #13]
	usb_tx_buffer[14] = USB_CRC_PADDING;
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <USB_Send_Status+0x84>)
 80023be:	2200      	movs	r2, #0
 80023c0:	739a      	strb	r2, [r3, #14]
	usb_tx_buffer[15] = USB_CRC_PADDING;
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <USB_Send_Status+0x84>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	73da      	strb	r2, [r3, #15]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_STATUS_LENGTH / 4) - 1);
 80023c8:	2204      	movs	r2, #4
 80023ca:	490a      	ldr	r1, [pc, #40]	; (80023f4 <USB_Send_Status+0x84>)
 80023cc:	4810      	ldr	r0, [pc, #64]	; (8002410 <USB_Send_Status+0xa0>)
 80023ce:	f001 fa58 	bl	8003882 <HAL_CRC_Calculate>
 80023d2:	4603      	mov	r3, r0
 80023d4:	603b      	str	r3, [r7, #0]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[16], (uint32_t)&crc);
 80023d6:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <USB_Send_Status+0xa4>)
 80023d8:	463b      	mov	r3, r7
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f7fe fb67 	bl	8000ab0 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_STATUS_LENGTH);
 80023e2:	2114      	movs	r1, #20
 80023e4:	4803      	ldr	r0, [pc, #12]	; (80023f4 <USB_Send_Status+0x84>)
 80023e6:	f009 fa61 	bl	800b8ac <CDC_Transmit_FS>
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000258 	.word	0x20000258
 80023f8:	200001d8 	.word	0x200001d8
 80023fc:	2000025b 	.word	0x2000025b
 8002400:	20000024 	.word	0x20000024
 8002404:	2000025f 	.word	0x2000025f
 8002408:	200001f8 	.word	0x200001f8
 800240c:	20000263 	.word	0x20000263
 8002410:	200003c8 	.word	0x200003c8
 8002414:	20000268 	.word	0x20000268

08002418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241c:	f000 fbf6 	bl	8002c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002420:	f000 f813 	bl	800244a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002424:	f000 f9de 	bl	80027e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002428:	f000 f86c 	bl	8002504 <MX_ADC1_Init>
  MX_CRC_Init();
 800242c:	f000 f8a8 	bl	8002580 <MX_CRC_Init>
  MX_TIM2_Init();
 8002430:	f000 f8ba 	bl	80025a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002434:	f000 f93a 	bl	80026ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8002438:	f000 f986 	bl	8002748 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 800243c:	f009 f972 	bl	800b724 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
App_Init();
 8002440:	f7fe f9da 	bl	80007f8 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
App_Loop();
 8002444:	f7fe f9e6 	bl	8000814 <App_Loop>
 8002448:	e7fc      	b.n	8002444 <main+0x2c>

0800244a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b094      	sub	sp, #80	; 0x50
 800244e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002454:	2228      	movs	r2, #40	; 0x28
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f009 fe37 	bl	800c0cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800247a:	2301      	movs	r3, #1
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800247e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002488:	2301      	movs	r3, #1
 800248a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800248c:	2302      	movs	r3, #2
 800248e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002494:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002496:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800249a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800249c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fab1 	bl	8005a08 <HAL_RCC_OscConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80024ac:	f000 fa04 	bl	80028b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b0:	230f      	movs	r3, #15
 80024b2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	2102      	movs	r1, #2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fd1d 	bl	8005f0c <HAL_RCC_ClockConfig>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <SystemClock_Config+0x92>
  {
    Error_Handler();
 80024d8:	f000 f9ee 	bl	80028b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80024dc:	2312      	movs	r3, #18
 80024de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80024e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 fe91 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80024f8:	f000 f9de 	bl	80028b8 <Error_Handler>
  }
}
 80024fc:	bf00      	nop
 80024fe:	3750      	adds	r7, #80	; 0x50
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <MX_ADC1_Init+0x74>)
 8002516:	4a19      	ldr	r2, [pc, #100]	; (800257c <MX_ADC1_Init+0x78>)
 8002518:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <MX_ADC1_Init+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <MX_ADC1_Init+0x74>)
 8002522:	2201      	movs	r2, #1
 8002524:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_ADC1_Init+0x74>)
 8002528:	2200      	movs	r2, #0
 800252a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <MX_ADC1_Init+0x74>)
 800252e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002532:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <MX_ADC1_Init+0x74>)
 8002536:	2200      	movs	r2, #0
 8002538:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_ADC1_Init+0x74>)
 800253c:	2201      	movs	r2, #1
 800253e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002540:	480d      	ldr	r0, [pc, #52]	; (8002578 <MX_ADC1_Init+0x74>)
 8002542:	f000 fbc5 	bl	8002cd0 <HAL_ADC_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800254c:	f000 f9b4 	bl	80028b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002550:	2304      	movs	r3, #4
 8002552:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002554:	2301      	movs	r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002558:	2307      	movs	r3, #7
 800255a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	4619      	mov	r1, r3
 8002560:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_ADC1_Init+0x74>)
 8002562:	f000 fe1b 	bl	800319c <HAL_ADC_ConfigChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800256c:	f000 f9a4 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000398 	.word	0x20000398
 800257c:	40012400 	.word	0x40012400

08002580 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <MX_CRC_Init+0x20>)
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <MX_CRC_Init+0x24>)
 8002588:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_CRC_Init+0x20>)
 800258c:	f001 f95d 	bl	800384a <HAL_CRC_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002596:	f000 f98f 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200003c8 	.word	0x200003c8
 80025a4:	40023000 	.word	0x40023000

080025a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	f107 0320 	add.w	r3, r7, #32
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
 80025d4:	615a      	str	r2, [r3, #20]
 80025d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <MX_TIM2_Init+0x100>)
 80025da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80025e0:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <MX_TIM2_Init+0x100>)
 80025e2:	2207      	movs	r2, #7
 80025e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <MX_TIM2_Init+0x100>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80025ec:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <MX_TIM2_Init+0x100>)
 80025ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f4:	4b2c      	ldr	r3, [pc, #176]	; (80026a8 <MX_TIM2_Init+0x100>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fa:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <MX_TIM2_Init+0x100>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002600:	4829      	ldr	r0, [pc, #164]	; (80026a8 <MX_TIM2_Init+0x100>)
 8002602:	f003 ff7d 	bl	8006500 <HAL_TIM_Base_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800260c:	f000 f954 	bl	80028b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261a:	4619      	mov	r1, r3
 800261c:	4822      	ldr	r0, [pc, #136]	; (80026a8 <MX_TIM2_Init+0x100>)
 800261e:	f004 fb49 	bl	8006cb4 <HAL_TIM_ConfigClockSource>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002628:	f000 f946 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800262c:	481e      	ldr	r0, [pc, #120]	; (80026a8 <MX_TIM2_Init+0x100>)
 800262e:	f004 f881 	bl	8006734 <HAL_TIM_PWM_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002638:	f000 f93e 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263c:	2300      	movs	r3, #0
 800263e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002644:	f107 0320 	add.w	r3, r7, #32
 8002648:	4619      	mov	r1, r3
 800264a:	4817      	ldr	r0, [pc, #92]	; (80026a8 <MX_TIM2_Init+0x100>)
 800264c:	f004 febe 	bl	80073cc <HAL_TIMEx_MasterConfigSynchronization>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002656:	f000 f92f 	bl	80028b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800265a:	2360      	movs	r3, #96	; 0x60
 800265c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800265e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002662:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002664:	2302      	movs	r3, #2
 8002666:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	4619      	mov	r1, r3
 8002672:	480d      	ldr	r0, [pc, #52]	; (80026a8 <MX_TIM2_Init+0x100>)
 8002674:	f004 fa60 	bl	8006b38 <HAL_TIM_PWM_ConfigChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800267e:	f000 f91b 	bl	80028b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	2204      	movs	r2, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4807      	ldr	r0, [pc, #28]	; (80026a8 <MX_TIM2_Init+0x100>)
 800268a:	f004 fa55 	bl	8006b38 <HAL_TIM_PWM_ConfigChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002694:	f000 f910 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002698:	4803      	ldr	r0, [pc, #12]	; (80026a8 <MX_TIM2_Init+0x100>)
 800269a:	f000 f9fb 	bl	8002a94 <HAL_TIM_MspPostInit>

}
 800269e:	bf00      	nop
 80026a0:	3738      	adds	r7, #56	; 0x38
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200003d0 	.word	0x200003d0

080026ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c0:	463b      	mov	r3, r7
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <MX_TIM3_Init+0x94>)
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <MX_TIM3_Init+0x98>)
 80026cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <MX_TIM3_Init+0x94>)
 80026d0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80026d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <MX_TIM3_Init+0x94>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <MX_TIM3_Init+0x94>)
 80026de:	22c7      	movs	r2, #199	; 0xc7
 80026e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <MX_TIM3_Init+0x94>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026e8:	4b15      	ldr	r3, [pc, #84]	; (8002740 <MX_TIM3_Init+0x94>)
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026ee:	4814      	ldr	r0, [pc, #80]	; (8002740 <MX_TIM3_Init+0x94>)
 80026f0:	f003 ff06 	bl	8006500 <HAL_TIM_Base_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80026fa:	f000 f8dd 	bl	80028b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002702:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002704:	f107 0308 	add.w	r3, r7, #8
 8002708:	4619      	mov	r1, r3
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <MX_TIM3_Init+0x94>)
 800270c:	f004 fad2 	bl	8006cb4 <HAL_TIM_ConfigClockSource>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002716:	f000 f8cf 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002722:	463b      	mov	r3, r7
 8002724:	4619      	mov	r1, r3
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <MX_TIM3_Init+0x94>)
 8002728:	f004 fe50 	bl	80073cc <HAL_TIMEx_MasterConfigSynchronization>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002732:	f000 f8c1 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000418 	.word	0x20000418
 8002744:	40000400 	.word	0x40000400

08002748 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800274e:	f107 0308 	add.w	r3, r7, #8
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275c:	463b      	mov	r3, r7
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <MX_TIM4_Init+0x94>)
 8002766:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <MX_TIM4_Init+0x98>)
 8002768:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5;
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <MX_TIM4_Init+0x94>)
 800276c:	2205      	movs	r2, #5
 800276e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002770:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <MX_TIM4_Init+0x94>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <MX_TIM4_Init+0x94>)
 8002778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800277c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <MX_TIM4_Init+0x94>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <MX_TIM4_Init+0x94>)
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800278a:	4814      	ldr	r0, [pc, #80]	; (80027dc <MX_TIM4_Init+0x94>)
 800278c:	f003 feb8 	bl	8006500 <HAL_TIM_Base_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002796:	f000 f88f 	bl	80028b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800279a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027a0:	f107 0308 	add.w	r3, r7, #8
 80027a4:	4619      	mov	r1, r3
 80027a6:	480d      	ldr	r0, [pc, #52]	; (80027dc <MX_TIM4_Init+0x94>)
 80027a8:	f004 fa84 	bl	8006cb4 <HAL_TIM_ConfigClockSource>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80027b2:	f000 f881 	bl	80028b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027be:	463b      	mov	r3, r7
 80027c0:	4619      	mov	r1, r3
 80027c2:	4806      	ldr	r0, [pc, #24]	; (80027dc <MX_TIM4_Init+0x94>)
 80027c4:	f004 fe02 	bl	80073cc <HAL_TIMEx_MasterConfigSynchronization>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80027ce:	f000 f873 	bl	80028b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000460 	.word	0x20000460
 80027e0:	40000800 	.word	0x40000800

080027e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f8:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <MX_GPIO_Init+0xc4>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4a2a      	ldr	r2, [pc, #168]	; (80028a8 <MX_GPIO_Init+0xc4>)
 80027fe:	f043 0320 	orr.w	r3, r3, #32
 8002802:	6193      	str	r3, [r2, #24]
 8002804:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <MX_GPIO_Init+0xc4>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <MX_GPIO_Init+0xc4>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <MX_GPIO_Init+0xc4>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6193      	str	r3, [r2, #24]
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <MX_GPIO_Init+0xc4>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002828:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <MX_GPIO_Init+0xc4>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <MX_GPIO_Init+0xc4>)
 800282e:	f043 0308 	orr.w	r3, r3, #8
 8002832:	6193      	str	r3, [r2, #24]
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <MX_GPIO_Init+0xc4>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002840:	2200      	movs	r2, #0
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	4819      	ldr	r0, [pc, #100]	; (80028ac <MX_GPIO_Init+0xc8>)
 8002846:	f001 fbea 	bl	800401e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284e:	2301      	movs	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002852:	2302      	movs	r3, #2
 8002854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	4619      	mov	r1, r3
 8002860:	4812      	ldr	r0, [pc, #72]	; (80028ac <MX_GPIO_Init+0xc8>)
 8002862:	f001 fa41 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_Pin USB_DET_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin|USB_DET_Pin;
 8002866:	f240 2302 	movw	r3, #514	; 0x202
 800286a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <MX_GPIO_Init+0xcc>)
 800286e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002870:	2302      	movs	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4619      	mov	r1, r3
 800287a:	480e      	ldr	r0, [pc, #56]	; (80028b4 <MX_GPIO_Init+0xd0>)
 800287c:	f001 fa34 	bl	8003ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2007      	movs	r0, #7
 8002886:	f000 ffaa 	bl	80037de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800288a:	2007      	movs	r0, #7
 800288c:	f000 ffc3 	bl	8003816 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	2105      	movs	r1, #5
 8002894:	2017      	movs	r0, #23
 8002896:	f000 ffa2 	bl	80037de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800289a:	2017      	movs	r0, #23
 800289c:	f000 ffbb 	bl	8003816 <HAL_NVIC_EnableIRQ>

}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40010800 	.word	0x40010800
 80028b0:	10310000 	.word	0x10310000
 80028b4:	40010c00 	.word	0x40010c00

080028b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028bc:	b672      	cpsid	i
}
 80028be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <Error_Handler+0x8>
	...

080028c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <HAL_MspInit+0x5c>)
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	4a14      	ldr	r2, [pc, #80]	; (8002920 <HAL_MspInit+0x5c>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6193      	str	r3, [r2, #24]
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_MspInit+0x5c>)
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <HAL_MspInit+0x5c>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <HAL_MspInit+0x5c>)
 80028e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ec:	61d3      	str	r3, [r2, #28]
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <HAL_MspInit+0x5c>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	607b      	str	r3, [r7, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_MspInit+0x60>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <HAL_MspInit+0x60>)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	40021000 	.word	0x40021000
 8002924:	40010000 	.word	0x40010000

08002928 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0310 	add.w	r3, r7, #16
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <HAL_ADC_MspInit+0x7c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d129      	bne.n	800299c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_ADC_MspInit+0x80>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <HAL_ADC_MspInit+0x80>)
 800294e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002952:	6193      	str	r3, [r2, #24]
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_ADC_MspInit+0x80>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_ADC_MspInit+0x80>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_ADC_MspInit+0x80>)
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6193      	str	r3, [r2, #24]
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_ADC_MspInit+0x80>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8002978:	2310      	movs	r3, #16
 800297a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800297c:	2303      	movs	r3, #3
 800297e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	4619      	mov	r1, r3
 8002986:	4809      	ldr	r0, [pc, #36]	; (80029ac <HAL_ADC_MspInit+0x84>)
 8002988:	f001 f9ae 	bl	8003ce8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2102      	movs	r1, #2
 8002990:	2012      	movs	r0, #18
 8002992:	f000 ff24 	bl	80037de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002996:	2012      	movs	r0, #18
 8002998:	f000 ff3d 	bl	8003816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800299c:	bf00      	nop
 800299e:	3720      	adds	r7, #32
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40012400 	.word	0x40012400
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40010800 	.word	0x40010800

080029b0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <HAL_CRC_MspInit+0x34>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10b      	bne.n	80029da <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_CRC_MspInit+0x38>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <HAL_CRC_MspInit+0x38>)
 80029c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029cc:	6153      	str	r3, [r2, #20]
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_CRC_MspInit+0x38>)
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	40023000 	.word	0x40023000
 80029e8:	40021000 	.word	0x40021000

080029ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d10c      	bne.n	8002a18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_TIM_Base_MspInit+0x9c>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <HAL_TIM_Base_MspInit+0x9c>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	61d3      	str	r3, [r2, #28]
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <HAL_TIM_Base_MspInit+0x9c>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a16:	e032      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <HAL_TIM_Base_MspInit+0xa0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d114      	bne.n	8002a4c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a22:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_TIM_Base_MspInit+0x9c>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_TIM_Base_MspInit+0x9c>)
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	61d3      	str	r3, [r2, #28]
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <HAL_TIM_Base_MspInit+0x9c>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	201d      	movs	r0, #29
 8002a40:	f000 fecd 	bl	80037de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a44:	201d      	movs	r0, #29
 8002a46:	f000 fee6 	bl	8003816 <HAL_NVIC_EnableIRQ>
}
 8002a4a:	e018      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_TIM_Base_MspInit+0xa4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d113      	bne.n	8002a7e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <HAL_TIM_Base_MspInit+0x9c>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <HAL_TIM_Base_MspInit+0x9c>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_TIM_Base_MspInit+0x9c>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	201e      	movs	r0, #30
 8002a74:	f000 feb3 	bl	80037de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a78:	201e      	movs	r0, #30
 8002a7a:	f000 fecc 	bl	8003816 <HAL_NVIC_EnableIRQ>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800

08002a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab2:	d117      	bne.n	8002ae4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_TIM_MspPostInit+0x58>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <HAL_TIM_MspPostInit+0x58>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	6193      	str	r3, [r2, #24]
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_TIM_MspPostInit+0x58>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8002acc:	2303      	movs	r3, #3
 8002ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	4619      	mov	r1, r3
 8002ade:	4804      	ldr	r0, [pc, #16]	; (8002af0 <HAL_TIM_MspPostInit+0x5c>)
 8002ae0:	f001 f902 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ae4:	bf00      	nop
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010800 	.word	0x40010800

08002af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <NMI_Handler+0x4>

08002afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afe:	e7fe      	b.n	8002afe <HardFault_Handler+0x4>

08002b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <MemManage_Handler+0x4>

08002b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b0a:	e7fe      	b.n	8002b0a <BusFault_Handler+0x4>

08002b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <UsageFault_Handler+0x4>

08002b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b3a:	f000 f8ad 	bl	8002c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 8002b3e:	f7fe f81f 	bl	8000b80 <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 8002b4a:	2002      	movs	r0, #2
 8002b4c:	f001 fa80 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <ADC1_2_IRQHandler+0x10>)
 8002b5a:	f000 fa53 	bl	8003004 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000398 	.word	0x20000398

08002b68 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b6e:	f001 fbb8 	bl	80042e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20001168 	.word	0x20001168

08002b7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DET_Pin);
 8002b80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b84:	f001 fa64 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <TIM3_IRQHandler+0x10>)
 8002b92:	f003 fec9 	bl	8006928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000418 	.word	0x20000418

08002ba0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <TIM4_IRQHandler+0x10>)
 8002ba6:	f003 febf 	bl	8006928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000460 	.word	0x20000460

08002bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bc0:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bc2:	490d      	ldr	r1, [pc, #52]	; (8002bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	; (8002bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc8:	e002      	b.n	8002bd0 <LoopCopyDataInit>

08002bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bce:	3304      	adds	r3, #4

08002bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd4:	d3f9      	bcc.n	8002bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	; (8002c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bdc:	e001      	b.n	8002be2 <LoopFillZerobss>

08002bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be0:	3204      	adds	r2, #4

08002be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be4:	d3fb      	bcc.n	8002bde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002be6:	f7ff ffe5 	bl	8002bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bea:	f009 fa3d 	bl	800c068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bee:	f7ff fc13 	bl	8002418 <main>
  bx lr
 8002bf2:	4770      	bx	lr
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8002bfc:	0800c178 	.word	0x0800c178
  ldr r2, =_sbss
 8002c00:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8002c04:	20001674 	.word	0x20001674

08002c08 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <CAN1_RX1_IRQHandler>
	...

08002c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_Init+0x28>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_Init+0x28>)
 8002c16:	f043 0310 	orr.w	r3, r3, #16
 8002c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	f000 fdd3 	bl	80037c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c22:	2004      	movs	r0, #4
 8002c24:	f000 f808 	bl	8002c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c28:	f7ff fe4c 	bl	80028c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40022000 	.word	0x40022000

08002c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_InitTick+0x54>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_InitTick+0x58>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fdeb 	bl	8003832 <HAL_SYSTICK_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00e      	b.n	8002c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b0f      	cmp	r3, #15
 8002c6a:	d80a      	bhi.n	8002c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f000 fdb3 	bl	80037de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c78:	4a06      	ldr	r2, [pc, #24]	; (8002c94 <HAL_InitTick+0x5c>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000028 	.word	0x20000028
 8002c90:	20000030 	.word	0x20000030
 8002c94:	2000002c 	.word	0x2000002c

08002c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_IncTick+0x1c>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_IncTick+0x20>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a03      	ldr	r2, [pc, #12]	; (8002cb8 <HAL_IncTick+0x20>)
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	20000030 	.word	0x20000030
 8002cb8:	200004a8 	.word	0x200004a8

08002cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <HAL_GetTick+0x10>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	200004a8 	.word	0x200004a8

08002cd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0be      	b.n	8002e70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fe0a 	bl	8002928 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fb93 	bl	8003440 <ADC_ConversionStop_Disable>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 8099 	bne.w	8002e5e <HAL_ADC_Init+0x18e>
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 8095 	bne.w	8002e5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d3c:	f023 0302 	bic.w	r3, r3, #2
 8002d40:	f043 0202 	orr.w	r2, r3, #2
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7b1b      	ldrb	r3, [r3, #12]
 8002d56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d68:	d003      	beq.n	8002d72 <HAL_ADC_Init+0xa2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d102      	bne.n	8002d78 <HAL_ADC_Init+0xa8>
 8002d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d76:	e000      	b.n	8002d7a <HAL_ADC_Init+0xaa>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7d1b      	ldrb	r3, [r3, #20]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d119      	bne.n	8002dbc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7b1b      	ldrb	r3, [r3, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	035a      	lsls	r2, r3, #13
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	e00b      	b.n	8002dbc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <HAL_ADC_Init+0x1a8>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dec:	d003      	beq.n	8002df6 <HAL_ADC_Init+0x126>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d104      	bne.n	8002e00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	051b      	lsls	r3, r3, #20
 8002dfe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_ADC_Init+0x1ac>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d10b      	bne.n	8002e3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	f023 0303 	bic.w	r3, r3, #3
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e3a:	e018      	b.n	8002e6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	f023 0312 	bic.w	r3, r3, #18
 8002e44:	f043 0210 	orr.w	r2, r3, #16
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e5c:	e007      	b.n	8002e6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	f043 0210 	orr.w	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	ffe1f7fd 	.word	0xffe1f7fd
 8002e7c:	ff1f0efe 	.word	0xff1f0efe

08002e80 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_Start_IT+0x1a>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e0a0      	b.n	8002fdc <HAL_ADC_Start_IT+0x15c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa72 	bl	800338c <ADC_Enable>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 808f 	bne.w	8002fd2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a45      	ldr	r2, [pc, #276]	; (8002fe4 <HAL_ADC_Start_IT+0x164>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d105      	bne.n	8002ede <HAL_ADC_Start_IT+0x5e>
 8002ed2:	4b45      	ldr	r3, [pc, #276]	; (8002fe8 <HAL_ADC_Start_IT+0x168>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d115      	bne.n	8002f0a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d026      	beq.n	8002f46 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f08:	e01d      	b.n	8002f46 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a33      	ldr	r2, [pc, #204]	; (8002fe8 <HAL_ADC_Start_IT+0x168>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d004      	beq.n	8002f2a <HAL_ADC_Start_IT+0xaa>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a2f      	ldr	r2, [pc, #188]	; (8002fe4 <HAL_ADC_Start_IT+0x164>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10d      	bne.n	8002f46 <HAL_ADC_Start_IT+0xc6>
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <HAL_ADC_Start_IT+0x168>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f023 0206 	bic.w	r2, r3, #6
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f5e:	e002      	b.n	8002f66 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f06f 0202 	mvn.w	r2, #2
 8002f76:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f96:	d113      	bne.n	8002fc0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f9c:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <HAL_ADC_Start_IT+0x164>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d105      	bne.n	8002fae <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <HAL_ADC_Start_IT+0x168>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d108      	bne.n	8002fc0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	e00c      	b.n	8002fda <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	e003      	b.n	8002fda <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40012800 	.word	0x40012800
 8002fe8:	40012400 	.word	0x40012400

08002fec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b20      	cmp	r3, #32
 8003018:	d140      	bne.n	800309c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b02      	cmp	r3, #2
 8003026:	d139      	bne.n	800309c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800304a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800304e:	d11d      	bne.n	800308c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003054:	2b00      	cmp	r3, #0
 8003056:	d119      	bne.n	800308c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0220 	bic.w	r2, r2, #32
 8003066:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fd fd49 	bl	8000b24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f06f 0212 	mvn.w	r2, #18
 800309a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b80      	cmp	r3, #128	; 0x80
 80030a8:	d14f      	bne.n	800314a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d148      	bne.n	800314a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d105      	bne.n	80030d0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80030da:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80030de:	d012      	beq.n	8003106 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d125      	bne.n	800313a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030f8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030fc:	d11d      	bne.n	800313a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d119      	bne.n	800313a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003114:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fa6e 	bl	800361c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 020c 	mvn.w	r2, #12
 8003148:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	d114      	bne.n	8003182 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b01      	cmp	r3, #1
 8003164:	d10d      	bne.n	8003182 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f809 	bl	800318a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0201 	mvn.w	r2, #1
 8003180:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x20>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e0dc      	b.n	8003376 <HAL_ADC_ConfigChannel+0x1da>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b06      	cmp	r3, #6
 80031ca:	d81c      	bhi.n	8003206 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	3b05      	subs	r3, #5
 80031de:	221f      	movs	r2, #31
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	4019      	ands	r1, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b05      	subs	r3, #5
 80031f8:	fa00 f203 	lsl.w	r2, r0, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	635a      	str	r2, [r3, #52]	; 0x34
 8003204:	e03c      	b.n	8003280 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d81c      	bhi.n	8003248 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	3b23      	subs	r3, #35	; 0x23
 8003220:	221f      	movs	r2, #31
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	4019      	ands	r1, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b23      	subs	r3, #35	; 0x23
 800323a:	fa00 f203 	lsl.w	r2, r0, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
 8003246:	e01b      	b.n	8003280 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	3b41      	subs	r3, #65	; 0x41
 800325a:	221f      	movs	r2, #31
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	4019      	ands	r1, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	3b41      	subs	r3, #65	; 0x41
 8003274:	fa00 f203 	lsl.w	r2, r0, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b09      	cmp	r3, #9
 8003286:	d91c      	bls.n	80032c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68d9      	ldr	r1, [r3, #12]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	3b1e      	subs	r3, #30
 800329a:	2207      	movs	r2, #7
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	4019      	ands	r1, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6898      	ldr	r0, [r3, #8]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	3b1e      	subs	r3, #30
 80032b4:	fa00 f203 	lsl.w	r2, r0, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	e019      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6919      	ldr	r1, [r3, #16]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	2207      	movs	r2, #7
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	4019      	ands	r1, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6898      	ldr	r0, [r3, #8]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	fa00 f203 	lsl.w	r2, r0, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d003      	beq.n	8003306 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003302:	2b11      	cmp	r3, #17
 8003304:	d132      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <HAL_ADC_ConfigChannel+0x1e4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d125      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d126      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800332c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b10      	cmp	r3, #16
 8003334:	d11a      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_ADC_ConfigChannel+0x1e8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <HAL_ADC_ConfigChannel+0x1ec>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	0c9a      	lsrs	r2, r3, #18
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800334c:	e002      	b.n	8003354 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	3b01      	subs	r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f9      	bne.n	800334e <HAL_ADC_ConfigChannel+0x1b2>
 800335a:	e007      	b.n	800336c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	40012400 	.word	0x40012400
 8003384:	20000028 	.word	0x20000028
 8003388:	431bde83 	.word	0x431bde83

0800338c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d040      	beq.n	800342c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033ba:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <ADC_Enable+0xac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1f      	ldr	r2, [pc, #124]	; (800343c <ADC_Enable+0xb0>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	0c9b      	lsrs	r3, r3, #18
 80033c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033c8:	e002      	b.n	80033d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f9      	bne.n	80033ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033d6:	f7ff fc71 	bl	8002cbc <HAL_GetTick>
 80033da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033dc:	e01f      	b.n	800341e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033de:	f7ff fc6d 	bl	8002cbc <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d918      	bls.n	800341e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d011      	beq.n	800341e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	f043 0210 	orr.w	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e007      	b.n	800342e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d1d8      	bne.n	80033de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000028 	.word	0x20000028
 800343c:	431bde83 	.word	0x431bde83

08003440 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d12e      	bne.n	80034b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800346a:	f7ff fc27 	bl	8002cbc <HAL_GetTick>
 800346e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003470:	e01b      	b.n	80034aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003472:	f7ff fc23 	bl	8002cbc <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d914      	bls.n	80034aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10d      	bne.n	80034aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e007      	b.n	80034ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d0dc      	beq.n	8003472 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80034de:	2302      	movs	r3, #2
 80034e0:	e095      	b.n	800360e <HAL_ADCEx_Calibration_Start+0x14a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ffa8 	bl	8003440 <ADC_ConversionStop_Disable>
 80034f0:	4603      	mov	r3, r0
 80034f2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 8084 	bne.w	8003604 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003504:	f023 0302 	bic.w	r3, r3, #2
 8003508:	f043 0202 	orr.w	r2, r3, #2
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_ADCEx_Calibration_Start+0x154>)
 8003512:	681c      	ldr	r4, [r3, #0]
 8003514:	2002      	movs	r0, #2
 8003516:	f002 ff33 	bl	8006380 <HAL_RCCEx_GetPeriphCLKFreq>
 800351a:	4603      	mov	r3, r0
 800351c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003520:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003522:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003524:	e002      	b.n	800352c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3b01      	subs	r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f9      	bne.n	8003526 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff2a 	bl	800338c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0208 	orr.w	r2, r2, #8
 8003546:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003548:	f7ff fbb8 	bl	8002cbc <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800354e:	e01b      	b.n	8003588 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003550:	f7ff fbb4 	bl	8002cbc <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b0a      	cmp	r3, #10
 800355c:	d914      	bls.n	8003588 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00d      	beq.n	8003588 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	f023 0312 	bic.w	r3, r3, #18
 8003574:	f043 0210 	orr.w	r2, r3, #16
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e042      	b.n	800360e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1dc      	bne.n	8003550 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0204 	orr.w	r2, r2, #4
 80035a4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80035a6:	f7ff fb89 	bl	8002cbc <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80035ac:	e01b      	b.n	80035e6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80035ae:	f7ff fb85 	bl	8002cbc <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b0a      	cmp	r3, #10
 80035ba:	d914      	bls.n	80035e6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	f023 0312 	bic.w	r3, r3, #18
 80035d2:	f043 0210 	orr.w	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e013      	b.n	800360e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1dc      	bne.n	80035ae <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	f023 0303 	bic.w	r3, r3, #3
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800360c:	7dfb      	ldrb	r3, [r7, #23]
}
 800360e:	4618      	mov	r0, r3
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}
 8003616:	bf00      	nop
 8003618:	20000028 	.word	0x20000028

0800361c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
	...

08003630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800365c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003662:	4a04      	ldr	r2, [pc, #16]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60d3      	str	r3, [r2, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4906      	ldr	r1, [pc, #24]	; (80036c8 <__NVIC_EnableIRQ+0x34>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	e000e100 	.word	0xe000e100

080036cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	6039      	str	r1, [r7, #0]
 80036d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	db0a      	blt.n	80036f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	490c      	ldr	r1, [pc, #48]	; (8003718 <__NVIC_SetPriority+0x4c>)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	0112      	lsls	r2, r2, #4
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	440b      	add	r3, r1
 80036f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f4:	e00a      	b.n	800370c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	4908      	ldr	r1, [pc, #32]	; (800371c <__NVIC_SetPriority+0x50>)
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	3b04      	subs	r3, #4
 8003704:	0112      	lsls	r2, r2, #4
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	440b      	add	r3, r1
 800370a:	761a      	strb	r2, [r3, #24]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000e100 	.word	0xe000e100
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003720:	b480      	push	{r7}
 8003722:	b089      	sub	sp, #36	; 0x24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f1c3 0307 	rsb	r3, r3, #7
 800373a:	2b04      	cmp	r3, #4
 800373c:	bf28      	it	cs
 800373e:	2304      	movcs	r3, #4
 8003740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3304      	adds	r3, #4
 8003746:	2b06      	cmp	r3, #6
 8003748:	d902      	bls.n	8003750 <NVIC_EncodePriority+0x30>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3b03      	subs	r3, #3
 800374e:	e000      	b.n	8003752 <NVIC_EncodePriority+0x32>
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003754:	f04f 32ff 	mov.w	r2, #4294967295
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43da      	mvns	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	401a      	ands	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003768:	f04f 31ff 	mov.w	r1, #4294967295
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43d9      	mvns	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	4313      	orrs	r3, r2
         );
}
 800377a:	4618      	mov	r0, r3
 800377c:	3724      	adds	r7, #36	; 0x24
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3b01      	subs	r3, #1
 8003790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003794:	d301      	bcc.n	800379a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003796:	2301      	movs	r3, #1
 8003798:	e00f      	b.n	80037ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <SysTick_Config+0x40>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037a2:	210f      	movs	r1, #15
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f7ff ff90 	bl	80036cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <SysTick_Config+0x40>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037b2:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <SysTick_Config+0x40>)
 80037b4:	2207      	movs	r2, #7
 80037b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	e000e010 	.word	0xe000e010

080037c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff2d 	bl	8003630 <__NVIC_SetPriorityGrouping>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037f0:	f7ff ff42 	bl	8003678 <__NVIC_GetPriorityGrouping>
 80037f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f7ff ff90 	bl	8003720 <NVIC_EncodePriority>
 8003800:	4602      	mov	r2, r0
 8003802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff5f 	bl	80036cc <__NVIC_SetPriority>
}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	4603      	mov	r3, r0
 800381e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff35 	bl	8003694 <__NVIC_EnableIRQ>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ffa2 	bl	8003784 <SysTick_Config>
 8003840:	4603      	mov	r3, r0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e00e      	b.n	800387a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	795b      	ldrb	r3, [r3, #5]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff f89f 	bl	80029b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003882:	b480      	push	{r7}
 8003884:	b087      	sub	sp, #28
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2202      	movs	r2, #2
 8003896:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e00a      	b.n	80038c4 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	441a      	add	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	3301      	adds	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d3f0      	bcc.n	80038ae <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80038da:	693b      	ldr	r3, [r7, #16]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003902:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <HAL_FLASH_Program+0xd8>)
 8003904:	7e1b      	ldrb	r3, [r3, #24]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_FLASH_Program+0x26>
 800390a:	2302      	movs	r3, #2
 800390c:	e054      	b.n	80039b8 <HAL_FLASH_Program+0xd0>
 800390e:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <HAL_FLASH_Program+0xd8>)
 8003910:	2201      	movs	r2, #1
 8003912:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003914:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003918:	f000 f8a8 	bl	8003a6c <FLASH_WaitForLastOperation>
 800391c:	4603      	mov	r3, r0
 800391e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d144      	bne.n	80039b0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800392c:	2301      	movs	r3, #1
 800392e:	757b      	strb	r3, [r7, #21]
 8003930:	e007      	b.n	8003942 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d102      	bne.n	800393e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003938:	2302      	movs	r3, #2
 800393a:	757b      	strb	r3, [r7, #21]
 800393c:	e001      	b.n	8003942 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800393e:	2304      	movs	r3, #4
 8003940:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003942:	2300      	movs	r3, #0
 8003944:	75bb      	strb	r3, [r7, #22]
 8003946:	e02d      	b.n	80039a4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003948:	7dbb      	ldrb	r3, [r7, #22]
 800394a:	005a      	lsls	r2, r3, #1
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	eb02 0c03 	add.w	ip, r2, r3
 8003952:	7dbb      	ldrb	r3, [r7, #22]
 8003954:	0119      	lsls	r1, r3, #4
 8003956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800395a:	f1c1 0620 	rsb	r6, r1, #32
 800395e:	f1a1 0020 	sub.w	r0, r1, #32
 8003962:	fa22 f401 	lsr.w	r4, r2, r1
 8003966:	fa03 f606 	lsl.w	r6, r3, r6
 800396a:	4334      	orrs	r4, r6
 800396c:	fa23 f000 	lsr.w	r0, r3, r0
 8003970:	4304      	orrs	r4, r0
 8003972:	fa23 f501 	lsr.w	r5, r3, r1
 8003976:	b2a3      	uxth	r3, r4
 8003978:	4619      	mov	r1, r3
 800397a:	4660      	mov	r0, ip
 800397c:	f000 f85a 	bl	8003a34 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003980:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003984:	f000 f872 	bl	8003a6c <FLASH_WaitForLastOperation>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <HAL_FLASH_Program+0xdc>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	4a0c      	ldr	r2, [pc, #48]	; (80039c4 <HAL_FLASH_Program+0xdc>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d107      	bne.n	80039ae <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800399e:	7dbb      	ldrb	r3, [r7, #22]
 80039a0:	3301      	adds	r3, #1
 80039a2:	75bb      	strb	r3, [r7, #22]
 80039a4:	7dba      	ldrb	r2, [r7, #22]
 80039a6:	7d7b      	ldrb	r3, [r7, #21]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3cd      	bcc.n	8003948 <HAL_FLASH_Program+0x60>
 80039ac:	e000      	b.n	80039b0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80039ae:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_FLASH_Program+0xd8>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	761a      	strb	r2, [r3, #24]

  return status;
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c0:	200004b0 	.word	0x200004b0
 80039c4:	40022000 	.word	0x40022000

080039c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_FLASH_Unlock+0x40>)
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_FLASH_Unlock+0x40>)
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <HAL_FLASH_Unlock+0x44>)
 80039e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_FLASH_Unlock+0x40>)
 80039e6:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <HAL_FLASH_Unlock+0x48>)
 80039e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <HAL_FLASH_Unlock+0x40>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80039fa:	79fb      	ldrb	r3, [r7, #7]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40022000 	.word	0x40022000
 8003a0c:	45670123 	.word	0x45670123
 8003a10:	cdef89ab 	.word	0xcdef89ab

08003a14 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_FLASH_Lock+0x1c>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <HAL_FLASH_Lock+0x1c>)
 8003a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a22:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40022000 	.word	0x40022000

08003a34 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a40:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <FLASH_Program_HalfWord+0x30>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003a46:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <FLASH_Program_HalfWord+0x34>)
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <FLASH_Program_HalfWord+0x34>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	887a      	ldrh	r2, [r7, #2]
 8003a56:	801a      	strh	r2, [r3, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	200004b0 	.word	0x200004b0
 8003a68:	40022000 	.word	0x40022000

08003a6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a74:	f7ff f922 	bl	8002cbc <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a7a:	e010      	b.n	8003a9e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d00c      	beq.n	8003a9e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <FLASH_WaitForLastOperation+0x2e>
 8003a8a:	f7ff f917 	bl	8002cbc <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d201      	bcs.n	8003a9e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e025      	b.n	8003aea <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e8      	bne.n	8003a7c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003ab8:	2220      	movs	r2, #32
 8003aba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ad4:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003ae0:	f000 f80a 	bl	8003af8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40022000 	.word	0x40022000

08003af8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003b02:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f043 0302 	orr.w	r3, r3, #2
 8003b16:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b18:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f043 0310 	orr.w	r3, r3, #16
 8003b20:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003b2e:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b38:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b58:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	4a0c      	ldr	r2, [pc, #48]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f240 1201 	movw	r2, #257	; 0x101
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d106      	bne.n	8003b7e <FLASH_SetErrorCode+0x86>
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4a06      	ldr	r2, [pc, #24]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	61d3      	str	r3, [r2, #28]
}  
 8003b7c:	e002      	b.n	8003b84 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b7e:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	60d3      	str	r3, [r2, #12]
}  
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40022000 	.word	0x40022000
 8003b94:	200004b0 	.word	0x200004b0

08003b98 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003baa:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_FLASHEx_Erase+0xd0>)
 8003bac:	7e1b      	ldrb	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_FLASHEx_Erase+0x1e>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e053      	b.n	8003c5e <HAL_FLASHEx_Erase+0xc6>
 8003bb6:	4b2c      	ldr	r3, [pc, #176]	; (8003c68 <HAL_FLASHEx_Erase+0xd0>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d116      	bne.n	8003bf2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003bc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bc8:	f7ff ff50 	bl	8003a6c <FLASH_WaitForLastOperation>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d141      	bne.n	8003c56 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f000 f84c 	bl	8003c70 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bdc:	f7ff ff46 	bl	8003a6c <FLASH_WaitForLastOperation>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003be4:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_FLASHEx_Erase+0xd4>)
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <HAL_FLASHEx_Erase+0xd4>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6113      	str	r3, [r2, #16]
 8003bf0:	e031      	b.n	8003c56 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003bf2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bf6:	f7ff ff39 	bl	8003a6c <FLASH_WaitForLastOperation>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d12a      	bne.n	8003c56 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f04f 32ff 	mov.w	r2, #4294967295
 8003c06:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	e019      	b.n	8003c44 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003c10:	68b8      	ldr	r0, [r7, #8]
 8003c12:	f000 f849 	bl	8003ca8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c1a:	f7ff ff27 	bl	8003a6c <FLASH_WaitForLastOperation>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_FLASHEx_Erase+0xd4>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <HAL_FLASHEx_Erase+0xd4>)
 8003c28:	f023 0302 	bic.w	r3, r3, #2
 8003c2c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	601a      	str	r2, [r3, #0]
            break;
 8003c3a:	e00c      	b.n	8003c56 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c42:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	029a      	lsls	r2, r3, #10
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3dc      	bcc.n	8003c10 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c56:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_FLASHEx_Erase+0xd0>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	761a      	strb	r2, [r3, #24]

  return status;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	200004b0 	.word	0x200004b0
 8003c6c:	40022000 	.word	0x40022000

08003c70 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <FLASH_MassErase+0x30>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <FLASH_MassErase+0x34>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <FLASH_MassErase+0x34>)
 8003c84:	f043 0304 	orr.w	r3, r3, #4
 8003c88:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <FLASH_MassErase+0x34>)
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <FLASH_MassErase+0x34>)
 8003c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c94:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	200004b0 	.word	0x200004b0
 8003ca4:	40022000 	.word	0x40022000

08003ca8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <FLASH_PageErase+0x38>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <FLASH_PageErase+0x3c>)
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <FLASH_PageErase+0x3c>)
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003cc2:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <FLASH_PageErase+0x3c>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <FLASH_PageErase+0x3c>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <FLASH_PageErase+0x3c>)
 8003cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	200004b0 	.word	0x200004b0
 8003ce4:	40022000 	.word	0x40022000

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b08b      	sub	sp, #44	; 0x2c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfa:	e169      	b.n	8003fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	f040 8158 	bne.w	8003fca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a9a      	ldr	r2, [pc, #616]	; (8003f88 <HAL_GPIO_Init+0x2a0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d05e      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d24:	4a98      	ldr	r2, [pc, #608]	; (8003f88 <HAL_GPIO_Init+0x2a0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d875      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d2a:	4a98      	ldr	r2, [pc, #608]	; (8003f8c <HAL_GPIO_Init+0x2a4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d058      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d30:	4a96      	ldr	r2, [pc, #600]	; (8003f8c <HAL_GPIO_Init+0x2a4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d86f      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d36:	4a96      	ldr	r2, [pc, #600]	; (8003f90 <HAL_GPIO_Init+0x2a8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d052      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d3c:	4a94      	ldr	r2, [pc, #592]	; (8003f90 <HAL_GPIO_Init+0x2a8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d869      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d42:	4a94      	ldr	r2, [pc, #592]	; (8003f94 <HAL_GPIO_Init+0x2ac>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04c      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d48:	4a92      	ldr	r2, [pc, #584]	; (8003f94 <HAL_GPIO_Init+0x2ac>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d863      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d4e:	4a92      	ldr	r2, [pc, #584]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d046      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d54:	4a90      	ldr	r2, [pc, #576]	; (8003f98 <HAL_GPIO_Init+0x2b0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d85d      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d5a:	2b12      	cmp	r3, #18
 8003d5c:	d82a      	bhi.n	8003db4 <HAL_GPIO_Init+0xcc>
 8003d5e:	2b12      	cmp	r3, #18
 8003d60:	d859      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <HAL_GPIO_Init+0x80>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003de3 	.word	0x08003de3
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003dcf 	.word	0x08003dcf
 8003d74:	08003e11 	.word	0x08003e11
 8003d78:	08003e17 	.word	0x08003e17
 8003d7c:	08003e17 	.word	0x08003e17
 8003d80:	08003e17 	.word	0x08003e17
 8003d84:	08003e17 	.word	0x08003e17
 8003d88:	08003e17 	.word	0x08003e17
 8003d8c:	08003e17 	.word	0x08003e17
 8003d90:	08003e17 	.word	0x08003e17
 8003d94:	08003e17 	.word	0x08003e17
 8003d98:	08003e17 	.word	0x08003e17
 8003d9c:	08003e17 	.word	0x08003e17
 8003da0:	08003e17 	.word	0x08003e17
 8003da4:	08003e17 	.word	0x08003e17
 8003da8:	08003e17 	.word	0x08003e17
 8003dac:	08003dc5 	.word	0x08003dc5
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	4a79      	ldr	r2, [pc, #484]	; (8003f9c <HAL_GPIO_Init+0x2b4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003dba:	e02c      	b.n	8003e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	623b      	str	r3, [r7, #32]
          break;
 8003dc2:	e029      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	623b      	str	r3, [r7, #32]
          break;
 8003dcc:	e024      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	623b      	str	r3, [r7, #32]
          break;
 8003dd6:	e01f      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	623b      	str	r3, [r7, #32]
          break;
 8003de0:	e01a      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d102      	bne.n	8003df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003dea:	2304      	movs	r3, #4
 8003dec:	623b      	str	r3, [r7, #32]
          break;
 8003dee:	e013      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003df8:	2308      	movs	r3, #8
 8003dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	611a      	str	r2, [r3, #16]
          break;
 8003e02:	e009      	b.n	8003e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e04:	2308      	movs	r3, #8
 8003e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	615a      	str	r2, [r3, #20]
          break;
 8003e0e:	e003      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e10:	2300      	movs	r3, #0
 8003e12:	623b      	str	r3, [r7, #32]
          break;
 8003e14:	e000      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          break;
 8003e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2bff      	cmp	r3, #255	; 0xff
 8003e1c:	d801      	bhi.n	8003e22 <HAL_GPIO_Init+0x13a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	e001      	b.n	8003e26 <HAL_GPIO_Init+0x13e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2bff      	cmp	r3, #255	; 0xff
 8003e2c:	d802      	bhi.n	8003e34 <HAL_GPIO_Init+0x14c>
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	e002      	b.n	8003e3a <HAL_GPIO_Init+0x152>
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	3b08      	subs	r3, #8
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	210f      	movs	r1, #15
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	6a39      	ldr	r1, [r7, #32]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	431a      	orrs	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80b1 	beq.w	8003fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e68:	4b4d      	ldr	r3, [pc, #308]	; (8003fa0 <HAL_GPIO_Init+0x2b8>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	4a4c      	ldr	r2, [pc, #304]	; (8003fa0 <HAL_GPIO_Init+0x2b8>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6193      	str	r3, [r2, #24]
 8003e74:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_GPIO_Init+0x2b8>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e80:	4a48      	ldr	r2, [pc, #288]	; (8003fa4 <HAL_GPIO_Init+0x2bc>)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	3302      	adds	r3, #2
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	220f      	movs	r2, #15
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a40      	ldr	r2, [pc, #256]	; (8003fa8 <HAL_GPIO_Init+0x2c0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <HAL_GPIO_Init+0x1ec>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3f      	ldr	r2, [pc, #252]	; (8003fac <HAL_GPIO_Init+0x2c4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_GPIO_Init+0x1e8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3e      	ldr	r2, [pc, #248]	; (8003fb0 <HAL_GPIO_Init+0x2c8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <HAL_GPIO_Init+0x1e4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3d      	ldr	r2, [pc, #244]	; (8003fb4 <HAL_GPIO_Init+0x2cc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d101      	bne.n	8003ec8 <HAL_GPIO_Init+0x1e0>
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e006      	b.n	8003ed6 <HAL_GPIO_Init+0x1ee>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	e004      	b.n	8003ed6 <HAL_GPIO_Init+0x1ee>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e002      	b.n	8003ed6 <HAL_GPIO_Init+0x1ee>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <HAL_GPIO_Init+0x1ee>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	f002 0203 	and.w	r2, r2, #3
 8003edc:	0092      	lsls	r2, r2, #2
 8003ede:	4093      	lsls	r3, r2
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ee6:	492f      	ldr	r1, [pc, #188]	; (8003fa4 <HAL_GPIO_Init+0x2bc>)
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	3302      	adds	r3, #2
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d006      	beq.n	8003f0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f00:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	492c      	ldr	r1, [pc, #176]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]
 8003f0c:	e006      	b.n	8003f1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	4928      	ldr	r1, [pc, #160]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d006      	beq.n	8003f36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f28:	4b23      	ldr	r3, [pc, #140]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4922      	ldr	r1, [pc, #136]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
 8003f34:	e006      	b.n	8003f44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f36:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	491e      	ldr	r1, [pc, #120]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	4918      	ldr	r1, [pc, #96]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
 8003f5c:	e006      	b.n	8003f6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f5e:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	4914      	ldr	r1, [pc, #80]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d021      	beq.n	8003fbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60cb      	str	r3, [r1, #12]
 8003f84:	e021      	b.n	8003fca <HAL_GPIO_Init+0x2e2>
 8003f86:	bf00      	nop
 8003f88:	10320000 	.word	0x10320000
 8003f8c:	10310000 	.word	0x10310000
 8003f90:	10220000 	.word	0x10220000
 8003f94:	10210000 	.word	0x10210000
 8003f98:	10120000 	.word	0x10120000
 8003f9c:	10110000 	.word	0x10110000
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40010800 	.word	0x40010800
 8003fac:	40010c00 	.word	0x40010c00
 8003fb0:	40011000 	.word	0x40011000
 8003fb4:	40011400 	.word	0x40011400
 8003fb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_GPIO_Init+0x304>)
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	4909      	ldr	r1, [pc, #36]	; (8003fec <HAL_GPIO_Init+0x304>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	3301      	adds	r3, #1
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f47f ae8e 	bne.w	8003cfc <HAL_GPIO_Init+0x14>
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	372c      	adds	r7, #44	; 0x2c
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	40010400 	.word	0x40010400

08003ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	887b      	ldrh	r3, [r7, #2]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e001      	b.n	8004012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	807b      	strh	r3, [r7, #2]
 800402a:	4613      	mov	r3, r2
 800402c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800402e:	787b      	ldrb	r3, [r7, #1]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004034:	887a      	ldrh	r2, [r7, #2]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800403a:	e003      	b.n	8004044 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800403c:	887b      	ldrh	r3, [r7, #2]
 800403e:	041a      	lsls	r2, r3, #16
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	611a      	str	r2, [r3, #16]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr
	...

08004050 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d006      	beq.n	8004074 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004066:	4a05      	ldr	r2, [pc, #20]	; (800407c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc fd90 	bl	8000b94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40010400 	.word	0x40010400

08004080 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004082:	b08b      	sub	sp, #44	; 0x2c
 8004084:	af06      	add	r7, sp, #24
 8004086:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0fd      	b.n	800428e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f007 fd34 	bl	800bb14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2203      	movs	r2, #3
 80040b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f003 fa1d 	bl	80074f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	687e      	ldr	r6, [r7, #4]
 80040c6:	466d      	mov	r5, sp
 80040c8:	f106 0410 	add.w	r4, r6, #16
 80040cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	602b      	str	r3, [r5, #0]
 80040d4:	1d33      	adds	r3, r6, #4
 80040d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040d8:	6838      	ldr	r0, [r7, #0]
 80040da:	f003 f9e7 	bl	80074ac <USB_CoreInit>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0ce      	b.n	800428e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f003 fa18 	bl	800752c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	73fb      	strb	r3, [r7, #15]
 8004100:	e04c      	b.n	800419c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	440b      	add	r3, r1
 8004112:	3301      	adds	r3, #1
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	440b      	add	r3, r1
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	b298      	uxth	r0, r3
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	440b      	add	r3, r1
 800413e:	3336      	adds	r3, #54	; 0x36
 8004140:	4602      	mov	r2, r0
 8004142:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	440b      	add	r3, r1
 8004154:	3303      	adds	r3, #3
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800415a:	7bfa      	ldrb	r2, [r7, #15]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	440b      	add	r3, r1
 8004168:	3338      	adds	r3, #56	; 0x38
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	440b      	add	r3, r1
 800417c:	333c      	adds	r3, #60	; 0x3c
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	440b      	add	r3, r1
 8004190:	3340      	adds	r3, #64	; 0x40
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	3301      	adds	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
 800419c:	7bfa      	ldrb	r2, [r7, #15]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d3ad      	bcc.n	8004102 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
 80041aa:	e044      	b.n	8004236 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041ac:	7bfa      	ldrb	r2, [r7, #15]
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	440b      	add	r3, r1
 80041ba:	f203 1369 	addw	r3, r3, #361	; 0x169
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	440b      	add	r3, r1
 80041d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041d8:	7bfa      	ldrb	r2, [r7, #15]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	440b      	add	r3, r1
 80041e6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	440b      	add	r3, r1
 80041fc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004204:	7bfa      	ldrb	r2, [r7, #15]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	440b      	add	r3, r1
 8004228:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	3301      	adds	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d3b5      	bcc.n	80041ac <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	687e      	ldr	r6, [r7, #4]
 8004248:	466d      	mov	r5, sp
 800424a:	f106 0410 	add.w	r4, r6, #16
 800424e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	602b      	str	r3, [r5, #0]
 8004256:	1d33      	adds	r3, r6, #4
 8004258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800425a:	6838      	ldr	r0, [r7, #0]
 800425c:	f003 f972 	bl	8007544 <USB_DevInit>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e00d      	b.n	800428e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f005 fe24 	bl	8009ed4 <USB_DevDisconnect>

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004296 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_PCD_Start+0x16>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e016      	b.n	80042da <HAL_PCD_Start+0x44>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f003 f907 	bl	80074cc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80042be:	2101      	movs	r1, #1
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f007 fe9a 	bl	800bffa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f005 fdf8 	bl	8009ec0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b088      	sub	sp, #32
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f005 fdfa 	bl	8009ee8 <USB_ReadInterrupts>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fe:	d102      	bne.n	8004306 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fb5f 	bl	80049c4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f005 fdec 	bl	8009ee8 <USB_ReadInterrupts>
 8004310:	4603      	mov	r3, r0
 8004312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431a:	d112      	bne.n	8004342 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004324:	b29a      	uxth	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432e:	b292      	uxth	r2, r2
 8004330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f007 fc68 	bl	800bc0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800433a:	2100      	movs	r1, #0
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f923 	bl	8004588 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f005 fdce 	bl	8009ee8 <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004356:	d10b      	bne.n	8004370 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004360:	b29a      	uxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800436a:	b292      	uxth	r2, r2
 800436c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f005 fdb7 	bl	8009ee8 <USB_ReadInterrupts>
 800437a:	4603      	mov	r3, r0
 800437c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004384:	d10b      	bne.n	800439e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004398:	b292      	uxth	r2, r2
 800439a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f005 fda0 	bl	8009ee8 <USB_ReadInterrupts>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	d126      	bne.n	8004402 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043bc:	b29a      	uxth	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0204 	bic.w	r2, r2, #4
 80043c6:	b292      	uxth	r2, r2
 80043c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0208 	bic.w	r2, r2, #8
 80043de:	b292      	uxth	r2, r2
 80043e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f007 fc49 	bl	800bc7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043fc:	b292      	uxth	r2, r2
 80043fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f005 fd6e 	bl	8009ee8 <USB_ReadInterrupts>
 800440c:	4603      	mov	r3, r0
 800440e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004416:	f040 8082 	bne.w	800451e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e010      	b.n	8004442 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	7ffb      	ldrb	r3, [r7, #31]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	441a      	add	r2, r3
 800442c:	7ffb      	ldrb	r3, [r7, #31]
 800442e:	8812      	ldrh	r2, [r2, #0]
 8004430:	b292      	uxth	r2, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	3320      	adds	r3, #32
 8004436:	443b      	add	r3, r7
 8004438:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800443c:	7ffb      	ldrb	r3, [r7, #31]
 800443e:	3301      	adds	r3, #1
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	7ffb      	ldrb	r3, [r7, #31]
 8004444:	2b07      	cmp	r3, #7
 8004446:	d9eb      	bls.n	8004420 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	b292      	uxth	r2, r2
 800445c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004468:	b29a      	uxth	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	b292      	uxth	r2, r2
 8004474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004478:	bf00      	nop
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004482:	b29b      	uxth	r3, r3
 8004484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f6      	beq.n	800447a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004494:	b29a      	uxth	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449e:	b292      	uxth	r2, r2
 80044a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80044a4:	2300      	movs	r3, #0
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e00f      	b.n	80044ca <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	4611      	mov	r1, r2
 80044b2:	7ffa      	ldrb	r2, [r7, #31]
 80044b4:	0092      	lsls	r2, r2, #2
 80044b6:	440a      	add	r2, r1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	3320      	adds	r3, #32
 80044bc:	443b      	add	r3, r7
 80044be:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80044c2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80044c4:	7ffb      	ldrb	r3, [r7, #31]
 80044c6:	3301      	adds	r3, #1
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	7ffb      	ldrb	r3, [r7, #31]
 80044cc:	2b07      	cmp	r3, #7
 80044ce:	d9ec      	bls.n	80044aa <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0208 	orr.w	r2, r2, #8
 80044e2:	b292      	uxth	r2, r2
 80044e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fa:	b292      	uxth	r2, r2
 80044fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004508:	b29a      	uxth	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0204 	orr.w	r2, r2, #4
 8004512:	b292      	uxth	r2, r2
 8004514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f007 fb95 	bl	800bc48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f005 fce0 	bl	8009ee8 <USB_ReadInterrupts>
 8004528:	4603      	mov	r3, r0
 800452a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004532:	d10e      	bne.n	8004552 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800453c:	b29a      	uxth	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004546:	b292      	uxth	r2, r2
 8004548:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f007 fb4e 	bl	800bbee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f005 fcc6 	bl	8009ee8 <USB_ReadInterrupts>
 800455c:	4603      	mov	r3, r0
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004566:	d10b      	bne.n	8004580 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800457a:	b292      	uxth	r2, r2
 800457c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004580:	bf00      	nop
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_PCD_SetAddress+0x1a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e013      	b.n	80045ca <HAL_PCD_SetAddress+0x42>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f005 fc6d 	bl	8009e9a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	4608      	mov	r0, r1
 80045dc:	4611      	mov	r1, r2
 80045de:	461a      	mov	r2, r3
 80045e0:	4603      	mov	r3, r0
 80045e2:	70fb      	strb	r3, [r7, #3]
 80045e4:	460b      	mov	r3, r1
 80045e6:	803b      	strh	r3, [r7, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	da0e      	bge.n	8004616 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	705a      	strb	r2, [r3, #1]
 8004614:	e00e      	b.n	8004634 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	f003 0207 	and.w	r2, r3, #7
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	b2da      	uxtb	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004640:	883a      	ldrh	r2, [r7, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	78ba      	ldrb	r2, [r7, #2]
 800464a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	785b      	ldrb	r3, [r3, #1]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800465e:	78bb      	ldrb	r3, [r7, #2]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d102      	bne.n	800466a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_PCD_EP_Open+0xa6>
 8004674:	2302      	movs	r3, #2
 8004676:	e00e      	b.n	8004696 <HAL_PCD_EP_Open+0xc4>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68f9      	ldr	r1, [r7, #12]
 8004686:	4618      	mov	r0, r3
 8004688:	f002 ff7c 	bl	8007584 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004694:	7afb      	ldrb	r3, [r7, #11]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	da0e      	bge.n	80046d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	4413      	add	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	705a      	strb	r2, [r3, #1]
 80046ce:	e00e      	b.n	80046ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	f003 0207 	and.w	r2, r3, #7
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	4413      	add	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_PCD_EP_Close+0x6a>
 8004704:	2302      	movs	r3, #2
 8004706:	e00e      	b.n	8004726 <HAL_PCD_EP_Close+0x88>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	4618      	mov	r0, r3
 8004718:	f003 fa9e 	bl	8007c58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b086      	sub	sp, #24
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	460b      	mov	r3, r1
 800473c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800473e:	7afb      	ldrb	r3, [r7, #11]
 8004740:	f003 0207 	and.w	r2, r3, #7
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2200      	movs	r2, #0
 8004766:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2200      	movs	r2, #0
 800476c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800476e:	7afb      	ldrb	r3, [r7, #11]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	b2da      	uxtb	r2, r3
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800477a:	7afb      	ldrb	r3, [r7, #11]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6979      	ldr	r1, [r7, #20]
 800478a:	4618      	mov	r0, r3
 800478c:	f003 fc50 	bl	8008030 <USB_EPStartXfer>
 8004790:	e005      	b.n	800479e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6979      	ldr	r1, [r7, #20]
 8004798:	4618      	mov	r0, r3
 800479a:	f003 fc49 	bl	8008030 <USB_EPStartXfer>
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	f003 0207 	and.w	r2, r3, #7
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80047ca:	681b      	ldr	r3, [r3, #0]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	460b      	mov	r3, r1
 80047e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2201      	movs	r2, #1
 8004820:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	b2da      	uxtb	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800482e:	7afb      	ldrb	r3, [r7, #11]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	4618      	mov	r0, r3
 8004840:	f003 fbf6 	bl	8008030 <USB_EPStartXfer>
 8004844:	e005      	b.n	8004852 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6979      	ldr	r1, [r7, #20]
 800484c:	4618      	mov	r0, r3
 800484e:	f003 fbef 	bl	8008030 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	f003 0207 	and.w	r2, r3, #7
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d901      	bls.n	800487a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e04c      	b.n	8004914 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800487a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800487e:	2b00      	cmp	r3, #0
 8004880:	da0e      	bge.n	80048a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	705a      	strb	r2, [r3, #1]
 800489e:	e00c      	b.n	80048ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_PCD_EP_SetStall+0x7e>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e01c      	b.n	8004914 <HAL_PCD_EP_SetStall+0xb8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f005 f9d9 	bl	8009ca0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d108      	bne.n	800490a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f005 fafe 	bl	8009f06 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	f003 020f 	and.w	r2, r3, #15
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	429a      	cmp	r2, r3
 8004934:	d901      	bls.n	800493a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e040      	b.n	80049bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800493a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800493e:	2b00      	cmp	r3, #0
 8004940:	da0e      	bge.n	8004960 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	705a      	strb	r2, [r3, #1]
 800495e:	e00e      	b.n	800497e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	f003 0207 	and.w	r2, r3, #7
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	b2da      	uxtb	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_PCD_EP_ClrStall+0x82>
 800499a:	2302      	movs	r3, #2
 800499c:	e00e      	b.n	80049bc <HAL_PCD_EP_ClrStall+0xa0>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68f9      	ldr	r1, [r7, #12]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f005 f9c7 	bl	8009d40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08e      	sub	sp, #56	; 0x38
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049cc:	e2ec      	b.n	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80049e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f040 8161 	bne.w	8004cb0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80049ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d152      	bne.n	8004a9e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a08:	81fb      	strh	r3, [r7, #14]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	89fb      	ldrh	r3, [r7, #14]
 8004a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3328      	adds	r3, #40	; 0x28
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	3302      	adds	r3, #2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	441a      	add	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f007 f8ab 	bl	800bbba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 829b 	beq.w	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f040 8296 	bne.w	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	b292      	uxth	r2, r2
 8004a90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a9c:	e284      	b.n	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004aae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d034      	beq.n	8004b22 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4413      	add	r3, r2
 8004acc:	3306      	adds	r3, #6
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f005 fa55 	bl	8009fa6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b08:	4013      	ands	r3, r2
 8004b0a:	823b      	strh	r3, [r7, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	8a3a      	ldrh	r2, [r7, #16]
 8004b12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b16:	b292      	uxth	r2, r2
 8004b18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f007 f820 	bl	800bb60 <HAL_PCD_SetupStageCallback>
 8004b20:	e242      	b.n	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f280 823e 	bge.w	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b38:	4013      	ands	r3, r2
 8004b3a:	83bb      	strh	r3, [r7, #28]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	8bba      	ldrh	r2, [r7, #28]
 8004b42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b46:	b292      	uxth	r2, r2
 8004b48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3306      	adds	r3, #6
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d019      	beq.n	8004bb2 <PCD_EP_ISR_Handler+0x1ee>
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d015      	beq.n	8004bb2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	6959      	ldr	r1, [r3, #20]
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f005 fa05 	bl	8009fa6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	441a      	add	r2, r3
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004baa:	2100      	movs	r1, #0
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f006 ffe9 	bl	800bb84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 81f2 	bne.w	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	4413      	add	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d112      	bne.n	8004c12 <PCD_EP_ISR_Handler+0x24e>
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	801a      	strh	r2, [r3, #0]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	e02f      	b.n	8004c72 <PCD_EP_ISR_Handler+0x2ae>
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b3e      	cmp	r3, #62	; 0x3e
 8004c18:	d813      	bhi.n	8004c42 <PCD_EP_ISR_Handler+0x27e>
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <PCD_EP_ISR_Handler+0x270>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	3301      	adds	r3, #1
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	029b      	lsls	r3, r3, #10
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	e017      	b.n	8004c72 <PCD_EP_ISR_Handler+0x2ae>
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <PCD_EP_ISR_Handler+0x298>
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	029b      	lsls	r3, r3, #10
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	827b      	strh	r3, [r7, #18]
 8004c84:	8a7b      	ldrh	r3, [r7, #18]
 8004c86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c8a:	827b      	strh	r3, [r7, #18]
 8004c8c:	8a7b      	ldrh	r3, [r7, #18]
 8004c8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c92:	827b      	strh	r3, [r7, #18]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	8a7b      	ldrh	r3, [r7, #18]
 8004c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	8013      	strh	r3, [r2, #0]
 8004cae:	e17b      	b.n	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004cc2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f280 80ea 	bge.w	8004ea0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cfa:	b292      	uxth	r2, r2
 8004cfc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004cfe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4413      	add	r3, r2
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	7b1b      	ldrb	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d122      	bne.n	8004d62 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4413      	add	r3, r2
 8004d30:	3306      	adds	r3, #6
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d44:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8087 	beq.w	8004e5c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	6959      	ldr	r1, [r3, #20]
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	88da      	ldrh	r2, [r3, #6]
 8004d5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d5c:	f005 f923 	bl	8009fa6 <USB_ReadPMA>
 8004d60:	e07c      	b.n	8004e5c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	78db      	ldrb	r3, [r3, #3]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d108      	bne.n	8004d7c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004d6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f927 	bl	8004fc4 <HAL_PCD_EP_DB_Receive>
 8004d76:	4603      	mov	r3, r0
 8004d78:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d7a:	e06f      	b.n	8004e5c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d021      	beq.n	8004e1a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4413      	add	r3, r2
 8004dea:	3302      	adds	r3, #2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dfe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004e00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02a      	beq.n	8004e5c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	6959      	ldr	r1, [r3, #20]
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	891a      	ldrh	r2, [r3, #8]
 8004e12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e14:	f005 f8c7 	bl	8009fa6 <USB_ReadPMA>
 8004e18:	e020      	b.n	8004e5c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3306      	adds	r3, #6
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e42:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004e44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	6959      	ldr	r1, [r3, #20]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	895a      	ldrh	r2, [r3, #10]
 8004e56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e58:	f005 f8a5 	bl	8009fa6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e62:	441a      	add	r2, r3
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e6e:	441a      	add	r2, r3
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <PCD_EP_ISR_Handler+0x4c2>
 8004e7c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d206      	bcs.n	8004e94 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f006 fe79 	bl	800bb84 <HAL_PCD_DataOutStageCallback>
 8004e92:	e005      	b.n	8004ea0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f003 f8c8 	bl	8008030 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ea0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d07e      	beq.n	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004eaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4413      	add	r3, r2
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed8:	843b      	strh	r3, [r7, #32]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	441a      	add	r2, r3
 8004ee8:	8c3b      	ldrh	r3, [r7, #32]
 8004eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	78db      	ldrb	r3, [r3, #3]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d00c      	beq.n	8004f18 <PCD_EP_ISR_Handler+0x554>
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	78db      	ldrb	r3, [r3, #3]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d146      	bne.n	8004f9c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d141      	bne.n	8004f9c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f40:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	8bfb      	ldrh	r3, [r7, #30]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d906      	bls.n	8004f5a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	8bfb      	ldrh	r3, [r7, #30]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	619a      	str	r2, [r3, #24]
 8004f58:	e002      	b.n	8004f60 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d106      	bne.n	8004f76 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f006 fe23 	bl	800bbba <HAL_PCD_DataInStageCallback>
 8004f74:	e018      	b.n	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	8bfb      	ldrh	r3, [r7, #30]
 8004f7c:	441a      	add	r2, r3
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	69da      	ldr	r2, [r3, #28]
 8004f86:	8bfb      	ldrh	r3, [r7, #30]
 8004f88:	441a      	add	r2, r3
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f003 f84b 	bl	8008030 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004f9a:	e005      	b.n	8004fa8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f91b 	bl	80051de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	b21b      	sxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f6ff ad0a 	blt.w	80049ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3738      	adds	r7, #56	; 0x38
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d07e      	beq.n	80050da <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005004:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	8b7b      	ldrh	r3, [r7, #26]
 800500c:	429a      	cmp	r2, r3
 800500e:	d306      	bcc.n	800501e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	8b7b      	ldrh	r3, [r7, #26]
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	619a      	str	r2, [r3, #24]
 800501c:	e002      	b.n	8005024 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2200      	movs	r2, #0
 8005022:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d123      	bne.n	8005074 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	833b      	strh	r3, [r7, #24]
 8005048:	8b3b      	ldrh	r3, [r7, #24]
 800504a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800504e:	833b      	strh	r3, [r7, #24]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	8b3b      	ldrh	r3, [r7, #24]
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01f      	beq.n	80050be <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005098:	82fb      	strh	r3, [r7, #22]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	441a      	add	r2, r3
 80050a8:	8afb      	ldrh	r3, [r7, #22]
 80050aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050be:	8b7b      	ldrh	r3, [r7, #26]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8087 	beq.w	80051d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6959      	ldr	r1, [r3, #20]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	891a      	ldrh	r2, [r3, #8]
 80050d2:	8b7b      	ldrh	r3, [r7, #26]
 80050d4:	f004 ff67 	bl	8009fa6 <USB_ReadPMA>
 80050d8:	e07c      	b.n	80051d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	3306      	adds	r3, #6
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005102:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	8b7b      	ldrh	r3, [r7, #26]
 800510a:	429a      	cmp	r2, r3
 800510c:	d306      	bcc.n	800511c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	8b7b      	ldrh	r3, [r7, #26]
 8005114:	1ad2      	subs	r2, r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	619a      	str	r2, [r3, #24]
 800511a:	e002      	b.n	8005122 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2200      	movs	r2, #0
 8005120:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d123      	bne.n	8005172 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	83fb      	strh	r3, [r7, #30]
 8005146:	8bfb      	ldrh	r3, [r7, #30]
 8005148:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800514c:	83fb      	strh	r3, [r7, #30]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	441a      	add	r2, r3
 800515c:	8bfb      	ldrh	r3, [r7, #30]
 800515e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516e:	b29b      	uxth	r3, r3
 8005170:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d11f      	bne.n	80051bc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	83bb      	strh	r3, [r7, #28]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	441a      	add	r2, r3
 80051a6:	8bbb      	ldrh	r3, [r7, #28]
 80051a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80051bc:	8b7b      	ldrh	r3, [r7, #26]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6959      	ldr	r1, [r3, #20]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	895a      	ldrh	r2, [r3, #10]
 80051ce:	8b7b      	ldrh	r3, [r7, #26]
 80051d0:	f004 fee9 	bl	8009fa6 <USB_ReadPMA>
    }
  }

  return count;
 80051d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b0a2      	sub	sp, #136	; 0x88
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	4613      	mov	r3, r2
 80051ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 81c7 	beq.w	8005586 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005200:	b29b      	uxth	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4413      	add	r3, r2
 800520c:	3302      	adds	r3, #2
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005220:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800522c:	429a      	cmp	r2, r3
 800522e:	d907      	bls.n	8005240 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	699a      	ldr	r2, [r3, #24]
 8005234:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005238:	1ad2      	subs	r2, r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	619a      	str	r2, [r3, #24]
 800523e:	e002      	b.n	8005246 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2200      	movs	r2, #0
 8005244:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	f040 80b9 	bne.w	80053c2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d126      	bne.n	80052a6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005266:	b29b      	uxth	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	4413      	add	r3, r2
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	011a      	lsls	r2, r3, #4
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	4413      	add	r3, r2
 800527a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800528a:	b29a      	uxth	r2, r3
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e01a      	b.n	80052dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d116      	bne.n	80052dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	633b      	str	r3, [r7, #48]	; 0x30
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	4413      	add	r3, r2
 80052c4:	633b      	str	r3, [r7, #48]	; 0x30
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	011a      	lsls	r2, r3, #4
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	4413      	add	r3, r2
 80052d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	2200      	movs	r2, #0
 80052da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	623b      	str	r3, [r7, #32]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d126      	bne.n	8005338 <HAL_PCD_EP_DB_Transmit+0x15a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	4413      	add	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	011a      	lsls	r2, r3, #4
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	4413      	add	r3, r2
 800530c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800531c:	b29a      	uxth	r2, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	801a      	strh	r2, [r3, #0]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005330:	b29a      	uxth	r2, r3
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	e017      	b.n	8005368 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d113      	bne.n	8005368 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005348:	b29b      	uxth	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	4413      	add	r3, r2
 8005350:	623b      	str	r3, [r7, #32]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	011a      	lsls	r2, r3, #4
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	4413      	add	r3, r2
 800535c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	2200      	movs	r2, #0
 8005366:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	4619      	mov	r1, r3
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f006 fc23 	bl	800bbba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 82d4 	beq.w	8005928 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	827b      	strh	r3, [r7, #18]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	441a      	add	r2, r3
 80053aa:	8a7b      	ldrh	r3, [r7, #18]
 80053ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053bc:	b29b      	uxth	r3, r3
 80053be:	8013      	strh	r3, [r2, #0]
 80053c0:	e2b2      	b.n	8005928 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d021      	beq.n	8005410 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540c:	b29b      	uxth	r3, r3
 800540e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005416:	2b01      	cmp	r3, #1
 8005418:	f040 8286 	bne.w	8005928 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005424:	441a      	add	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005432:	441a      	add	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	429a      	cmp	r2, r3
 8005442:	d309      	bcc.n	8005458 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005450:	1ad2      	subs	r2, r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	621a      	str	r2, [r3, #32]
 8005456:	e015      	b.n	8005484 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d107      	bne.n	8005470 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005460:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005464:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800546e:	e009      	b.n	8005484 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d155      	bne.n	8005538 <HAL_PCD_EP_DB_Transmit+0x35a>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	63bb      	str	r3, [r7, #56]	; 0x38
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549a:	b29b      	uxth	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	4413      	add	r3, r2
 80054a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	011a      	lsls	r2, r3, #4
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
 80054b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d112      	bne.n	80054e0 <HAL_PCD_EP_DB_Transmit+0x302>
 80054ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	801a      	strh	r2, [r3, #0]
 80054ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d8:	b29a      	uxth	r2, r3
 80054da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	e047      	b.n	8005570 <HAL_PCD_EP_DB_Transmit+0x392>
 80054e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e2:	2b3e      	cmp	r3, #62	; 0x3e
 80054e4:	d811      	bhi.n	800550a <HAL_PCD_EP_DB_Transmit+0x32c>
 80054e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_PCD_EP_DB_Transmit+0x31e>
 80054f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f8:	3301      	adds	r3, #1
 80054fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80054fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054fe:	b29b      	uxth	r3, r3
 8005500:	029b      	lsls	r3, r3, #10
 8005502:	b29a      	uxth	r2, r3
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	e032      	b.n	8005570 <HAL_PCD_EP_DB_Transmit+0x392>
 800550a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <HAL_PCD_EP_DB_Transmit+0x342>
 800551a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800551c:	3b01      	subs	r3, #1
 800551e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005522:	b29b      	uxth	r3, r3
 8005524:	029b      	lsls	r3, r3, #10
 8005526:	b29b      	uxth	r3, r3
 8005528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005530:	b29a      	uxth	r2, r3
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	801a      	strh	r2, [r3, #0]
 8005536:	e01b      	b.n	8005570 <HAL_PCD_EP_DB_Transmit+0x392>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d117      	bne.n	8005570 <HAL_PCD_EP_DB_Transmit+0x392>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	643b      	str	r3, [r7, #64]	; 0x40
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554e:	b29b      	uxth	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005554:	4413      	add	r3, r2
 8005556:	643b      	str	r3, [r7, #64]	; 0x40
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	011a      	lsls	r2, r3, #4
 800555e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005560:	4413      	add	r3, r2
 8005562:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556a:	b29a      	uxth	r2, r3
 800556c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6959      	ldr	r1, [r3, #20]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	891a      	ldrh	r2, [r3, #8]
 800557c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800557e:	b29b      	uxth	r3, r3
 8005580:	f004 fccc 	bl	8009f1c <USB_WritePMA>
 8005584:	e1d0      	b.n	8005928 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558e:	b29b      	uxth	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	4413      	add	r3, r2
 800559a:	3306      	adds	r3, #6
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d307      	bcc.n	80055ce <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055c6:	1ad2      	subs	r2, r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	619a      	str	r2, [r3, #24]
 80055cc:	e002      	b.n	80055d4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2200      	movs	r2, #0
 80055d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f040 80c4 	bne.w	8005766 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	785b      	ldrb	r3, [r3, #1]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d126      	bne.n	8005634 <HAL_PCD_EP_DB_Transmit+0x456>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fa:	4413      	add	r3, r2
 80055fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	011a      	lsls	r2, r3, #4
 8005604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005606:	4413      	add	r3, r2
 8005608:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800560c:	66bb      	str	r3, [r7, #104]	; 0x68
 800560e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005618:	b29a      	uxth	r2, r3
 800561a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562c:	b29a      	uxth	r2, r3
 800562e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	e01a      	b.n	800566a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d116      	bne.n	800566a <HAL_PCD_EP_DB_Transmit+0x48c>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	677b      	str	r3, [r7, #116]	; 0x74
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564a:	b29b      	uxth	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005650:	4413      	add	r3, r2
 8005652:	677b      	str	r3, [r7, #116]	; 0x74
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	011a      	lsls	r2, r3, #4
 800565a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800565c:	4413      	add	r3, r2
 800565e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005662:	673b      	str	r3, [r7, #112]	; 0x70
 8005664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005666:	2200      	movs	r2, #0
 8005668:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d12f      	bne.n	80056d8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005688:	b29b      	uxth	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005690:	4413      	add	r3, r2
 8005692:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	011a      	lsls	r2, r3, #4
 800569c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056a0:	4413      	add	r3, r2
 80056a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	e017      	b.n	8005708 <HAL_PCD_EP_DB_Transmit+0x52a>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d113      	bne.n	8005708 <HAL_PCD_EP_DB_Transmit+0x52a>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ee:	4413      	add	r3, r2
 80056f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	011a      	lsls	r2, r3, #4
 80056f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056fa:	4413      	add	r3, r2
 80056fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005700:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005704:	2200      	movs	r2, #0
 8005706:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	4619      	mov	r1, r3
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f006 fa53 	bl	800bbba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800571a:	2b00      	cmp	r3, #0
 800571c:	f040 8104 	bne.w	8005928 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	441a      	add	r2, r3
 800574c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005760:	b29b      	uxth	r3, r3
 8005762:	8013      	strh	r3, [r2, #0]
 8005764:	e0e0      	b.n	8005928 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d121      	bne.n	80057b4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	441a      	add	r2, r3
 800579c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80057a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	f040 80b4 	bne.w	8005928 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057c8:	441a      	add	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057d6:	441a      	add	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	6a1a      	ldr	r2, [r3, #32]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d309      	bcc.n	80057fc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f4:	1ad2      	subs	r2, r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	621a      	str	r2, [r3, #32]
 80057fa:	e015      	b.n	8005828 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d107      	bne.n	8005814 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005804:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005808:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005812:	e009      	b.n	8005828 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2200      	movs	r2, #0
 800581e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	667b      	str	r3, [r7, #100]	; 0x64
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d155      	bne.n	80058e2 <HAL_PCD_EP_DB_Transmit+0x704>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005844:	b29b      	uxth	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584a:	4413      	add	r3, r2
 800584c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	011a      	lsls	r2, r3, #4
 8005854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005856:	4413      	add	r3, r2
 8005858:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800585c:	65bb      	str	r3, [r7, #88]	; 0x58
 800585e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005860:	2b00      	cmp	r3, #0
 8005862:	d112      	bne.n	800588a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800586e:	b29a      	uxth	r2, r3
 8005870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005882:	b29a      	uxth	r2, r3
 8005884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e044      	b.n	8005914 <HAL_PCD_EP_DB_Transmit+0x736>
 800588a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588c:	2b3e      	cmp	r3, #62	; 0x3e
 800588e:	d811      	bhi.n	80058b4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	657b      	str	r3, [r7, #84]	; 0x54
 8005896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80058a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a2:	3301      	adds	r3, #1
 80058a4:	657b      	str	r3, [r7, #84]	; 0x54
 80058a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	029b      	lsls	r3, r3, #10
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058b0:	801a      	strh	r2, [r3, #0]
 80058b2:	e02f      	b.n	8005914 <HAL_PCD_EP_DB_Transmit+0x736>
 80058b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	657b      	str	r3, [r7, #84]	; 0x54
 80058ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <HAL_PCD_EP_DB_Transmit+0x6ec>
 80058c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c6:	3b01      	subs	r3, #1
 80058c8:	657b      	str	r3, [r7, #84]	; 0x54
 80058ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	029b      	lsls	r3, r3, #10
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058da:	b29a      	uxth	r2, r3
 80058dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058de:	801a      	strh	r2, [r3, #0]
 80058e0:	e018      	b.n	8005914 <HAL_PCD_EP_DB_Transmit+0x736>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d114      	bne.n	8005914 <HAL_PCD_EP_DB_Transmit+0x736>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f8:	4413      	add	r3, r2
 80058fa:	667b      	str	r3, [r7, #100]	; 0x64
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	011a      	lsls	r2, r3, #4
 8005902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005904:	4413      	add	r3, r2
 8005906:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800590a:	663b      	str	r3, [r7, #96]	; 0x60
 800590c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590e:	b29a      	uxth	r2, r3
 8005910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005912:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6959      	ldr	r1, [r3, #20]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	895a      	ldrh	r2, [r3, #10]
 8005920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005922:	b29b      	uxth	r3, r3
 8005924:	f004 fafa 	bl	8009f1c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005942:	823b      	strh	r3, [r7, #16]
 8005944:	8a3b      	ldrh	r3, [r7, #16]
 8005946:	f083 0310 	eor.w	r3, r3, #16
 800594a:	823b      	strh	r3, [r7, #16]
 800594c:	8a3b      	ldrh	r3, [r7, #16]
 800594e:	f083 0320 	eor.w	r3, r3, #32
 8005952:	823b      	strh	r3, [r7, #16]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	8a3b      	ldrh	r3, [r7, #16]
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3788      	adds	r7, #136	; 0x88
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005982:	b480      	push	{r7}
 8005984:	b087      	sub	sp, #28
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	817b      	strh	r3, [r7, #10]
 8005990:	4613      	mov	r3, r2
 8005992:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005994:	897b      	ldrh	r3, [r7, #10]
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059a0:	897b      	ldrh	r3, [r7, #10]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e009      	b.n	80059cc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059b8:	897a      	ldrh	r2, [r7, #10]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80059cc:	893b      	ldrh	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d107      	bne.n	80059e2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2200      	movs	r2, #0
 80059d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	b29a      	uxth	r2, r3
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	80da      	strh	r2, [r3, #6]
 80059e0:	e00b      	b.n	80059fa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2201      	movs	r2, #1
 80059e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr
	...

08005a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e272      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 8087 	beq.w	8005b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a28:	4b92      	ldr	r3, [pc, #584]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 030c 	and.w	r3, r3, #12
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d00c      	beq.n	8005a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a34:	4b8f      	ldr	r3, [pc, #572]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 030c 	and.w	r3, r3, #12
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d112      	bne.n	8005a66 <HAL_RCC_OscConfig+0x5e>
 8005a40:	4b8c      	ldr	r3, [pc, #560]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4c:	d10b      	bne.n	8005a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a4e:	4b89      	ldr	r3, [pc, #548]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d06c      	beq.n	8005b34 <HAL_RCC_OscConfig+0x12c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d168      	bne.n	8005b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e24c      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCC_OscConfig+0x76>
 8005a70:	4b80      	ldr	r3, [pc, #512]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a7f      	ldr	r2, [pc, #508]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	e02e      	b.n	8005adc <HAL_RCC_OscConfig+0xd4>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10c      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x98>
 8005a86:	4b7b      	ldr	r3, [pc, #492]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a7a      	ldr	r2, [pc, #488]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	4b78      	ldr	r3, [pc, #480]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a77      	ldr	r2, [pc, #476]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e01d      	b.n	8005adc <HAL_RCC_OscConfig+0xd4>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_RCC_OscConfig+0xbc>
 8005aaa:	4b72      	ldr	r3, [pc, #456]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a71      	ldr	r2, [pc, #452]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b6f      	ldr	r3, [pc, #444]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a6e      	ldr	r2, [pc, #440]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e00b      	b.n	8005adc <HAL_RCC_OscConfig+0xd4>
 8005ac4:	4b6b      	ldr	r3, [pc, #428]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a6a      	ldr	r2, [pc, #424]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	4b68      	ldr	r3, [pc, #416]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a67      	ldr	r2, [pc, #412]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d013      	beq.n	8005b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fd f8ea 	bl	8002cbc <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fd f8e6 	bl	8002cbc <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	; 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e200      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afe:	4b5d      	ldr	r3, [pc, #372]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0xe4>
 8005b0a:	e014      	b.n	8005b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fd f8d6 	bl	8002cbc <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fd f8d2 	bl	8002cbc <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	; 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e1ec      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b26:	4b53      	ldr	r3, [pc, #332]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x10c>
 8005b32:	e000      	b.n	8005b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d063      	beq.n	8005c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b42:	4b4c      	ldr	r3, [pc, #304]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f003 030c 	and.w	r3, r3, #12
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b4e:	4b49      	ldr	r3, [pc, #292]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d11c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x18c>
 8005b5a:	4b46      	ldr	r3, [pc, #280]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d116      	bne.n	8005b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b66:	4b43      	ldr	r3, [pc, #268]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_RCC_OscConfig+0x176>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d001      	beq.n	8005b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e1c0      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7e:	4b3d      	ldr	r3, [pc, #244]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4939      	ldr	r1, [pc, #228]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b92:	e03a      	b.n	8005c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d020      	beq.n	8005bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b9c:	4b36      	ldr	r3, [pc, #216]	; (8005c78 <HAL_RCC_OscConfig+0x270>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba2:	f7fd f88b 	bl	8002cbc <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005baa:	f7fd f887 	bl	8002cbc <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e1a1      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc8:	4b2a      	ldr	r3, [pc, #168]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4927      	ldr	r1, [pc, #156]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
 8005bdc:	e015      	b.n	8005c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bde:	4b26      	ldr	r3, [pc, #152]	; (8005c78 <HAL_RCC_OscConfig+0x270>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be4:	f7fd f86a 	bl	8002cbc <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bec:	f7fd f866 	bl	8002cbc <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e180      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d03a      	beq.n	8005c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d019      	beq.n	8005c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1e:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <HAL_RCC_OscConfig+0x274>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c24:	f7fd f84a 	bl	8002cbc <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c2c:	f7fd f846 	bl	8002cbc <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e160      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <HAL_RCC_OscConfig+0x26c>)
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	f000 fac4 	bl	80061d8 <RCC_Delay>
 8005c50:	e01c      	b.n	8005c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c52:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <HAL_RCC_OscConfig+0x274>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c58:	f7fd f830 	bl	8002cbc <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c5e:	e00f      	b.n	8005c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c60:	f7fd f82c 	bl	8002cbc <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d908      	bls.n	8005c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e146      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
 8005c72:	bf00      	nop
 8005c74:	40021000 	.word	0x40021000
 8005c78:	42420000 	.word	0x42420000
 8005c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c80:	4b92      	ldr	r3, [pc, #584]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e9      	bne.n	8005c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80a6 	beq.w	8005de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c9e:	4b8b      	ldr	r3, [pc, #556]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10d      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005caa:	4b88      	ldr	r3, [pc, #544]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	4a87      	ldr	r2, [pc, #540]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	61d3      	str	r3, [r2, #28]
 8005cb6:	4b85      	ldr	r3, [pc, #532]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	60bb      	str	r3, [r7, #8]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc6:	4b82      	ldr	r3, [pc, #520]	; (8005ed0 <HAL_RCC_OscConfig+0x4c8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d118      	bne.n	8005d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cd2:	4b7f      	ldr	r3, [pc, #508]	; (8005ed0 <HAL_RCC_OscConfig+0x4c8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a7e      	ldr	r2, [pc, #504]	; (8005ed0 <HAL_RCC_OscConfig+0x4c8>)
 8005cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cde:	f7fc ffed 	bl	8002cbc <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce6:	f7fc ffe9 	bl	8002cbc <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b64      	cmp	r3, #100	; 0x64
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e103      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf8:	4b75      	ldr	r3, [pc, #468]	; (8005ed0 <HAL_RCC_OscConfig+0x4c8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d106      	bne.n	8005d1a <HAL_RCC_OscConfig+0x312>
 8005d0c:	4b6f      	ldr	r3, [pc, #444]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	4a6e      	ldr	r2, [pc, #440]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	6213      	str	r3, [r2, #32]
 8005d18:	e02d      	b.n	8005d76 <HAL_RCC_OscConfig+0x36e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10c      	bne.n	8005d3c <HAL_RCC_OscConfig+0x334>
 8005d22:	4b6a      	ldr	r3, [pc, #424]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	4a69      	ldr	r2, [pc, #420]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	6213      	str	r3, [r2, #32]
 8005d2e:	4b67      	ldr	r3, [pc, #412]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	4a66      	ldr	r2, [pc, #408]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d34:	f023 0304 	bic.w	r3, r3, #4
 8005d38:	6213      	str	r3, [r2, #32]
 8005d3a:	e01c      	b.n	8005d76 <HAL_RCC_OscConfig+0x36e>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	d10c      	bne.n	8005d5e <HAL_RCC_OscConfig+0x356>
 8005d44:	4b61      	ldr	r3, [pc, #388]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	4a60      	ldr	r2, [pc, #384]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d4a:	f043 0304 	orr.w	r3, r3, #4
 8005d4e:	6213      	str	r3, [r2, #32]
 8005d50:	4b5e      	ldr	r3, [pc, #376]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	4a5d      	ldr	r2, [pc, #372]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	6213      	str	r3, [r2, #32]
 8005d5c:	e00b      	b.n	8005d76 <HAL_RCC_OscConfig+0x36e>
 8005d5e:	4b5b      	ldr	r3, [pc, #364]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	4a5a      	ldr	r2, [pc, #360]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d64:	f023 0301 	bic.w	r3, r3, #1
 8005d68:	6213      	str	r3, [r2, #32]
 8005d6a:	4b58      	ldr	r3, [pc, #352]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	4a57      	ldr	r2, [pc, #348]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d70:	f023 0304 	bic.w	r3, r3, #4
 8005d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d015      	beq.n	8005daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7e:	f7fc ff9d 	bl	8002cbc <HAL_GetTick>
 8005d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d84:	e00a      	b.n	8005d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d86:	f7fc ff99 	bl	8002cbc <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e0b1      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d9c:	4b4b      	ldr	r3, [pc, #300]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0ee      	beq.n	8005d86 <HAL_RCC_OscConfig+0x37e>
 8005da8:	e014      	b.n	8005dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005daa:	f7fc ff87 	bl	8002cbc <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db0:	e00a      	b.n	8005dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db2:	f7fc ff83 	bl	8002cbc <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e09b      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc8:	4b40      	ldr	r3, [pc, #256]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1ee      	bne.n	8005db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d105      	bne.n	8005de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dda:	4b3c      	ldr	r3, [pc, #240]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	4a3b      	ldr	r2, [pc, #236]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8087 	beq.w	8005efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005df0:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f003 030c 	and.w	r3, r3, #12
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d061      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d146      	bne.n	8005e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e04:	4b33      	ldr	r3, [pc, #204]	; (8005ed4 <HAL_RCC_OscConfig+0x4cc>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0a:	f7fc ff57 	bl	8002cbc <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e12:	f7fc ff53 	bl	8002cbc <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e06d      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e24:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1f0      	bne.n	8005e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e38:	d108      	bne.n	8005e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	4921      	ldr	r1, [pc, #132]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a19      	ldr	r1, [r3, #32]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	491b      	ldr	r1, [pc, #108]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e64:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <HAL_RCC_OscConfig+0x4cc>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6a:	f7fc ff27 	bl	8002cbc <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e72:	f7fc ff23 	bl	8002cbc <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e03d      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e84:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f0      	beq.n	8005e72 <HAL_RCC_OscConfig+0x46a>
 8005e90:	e035      	b.n	8005efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <HAL_RCC_OscConfig+0x4cc>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e98:	f7fc ff10 	bl	8002cbc <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea0:	f7fc ff0c 	bl	8002cbc <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e026      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <HAL_RCC_OscConfig+0x4c4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x498>
 8005ebe:	e01e      	b.n	8005efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d107      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e019      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	40007000 	.word	0x40007000
 8005ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <HAL_RCC_OscConfig+0x500>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d106      	bne.n	8005efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d001      	beq.n	8005efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40021000 	.word	0x40021000

08005f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e0d0      	b.n	80060c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f20:	4b6a      	ldr	r3, [pc, #424]	; (80060cc <HAL_RCC_ClockConfig+0x1c0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d910      	bls.n	8005f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2e:	4b67      	ldr	r3, [pc, #412]	; (80060cc <HAL_RCC_ClockConfig+0x1c0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f023 0207 	bic.w	r2, r3, #7
 8005f36:	4965      	ldr	r1, [pc, #404]	; (80060cc <HAL_RCC_ClockConfig+0x1c0>)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3e:	4b63      	ldr	r3, [pc, #396]	; (80060cc <HAL_RCC_ClockConfig+0x1c0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0b8      	b.n	80060c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d020      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f68:	4b59      	ldr	r3, [pc, #356]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4a58      	ldr	r2, [pc, #352]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f80:	4b53      	ldr	r3, [pc, #332]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4a52      	ldr	r2, [pc, #328]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f8c:	4b50      	ldr	r3, [pc, #320]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	494d      	ldr	r1, [pc, #308]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d040      	beq.n	800602c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d107      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb2:	4b47      	ldr	r3, [pc, #284]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d115      	bne.n	8005fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e07f      	b.n	80060c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d107      	bne.n	8005fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fca:	4b41      	ldr	r3, [pc, #260]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e073      	b.n	80060c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fda:	4b3d      	ldr	r3, [pc, #244]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e06b      	b.n	80060c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fea:	4b39      	ldr	r3, [pc, #228]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f023 0203 	bic.w	r2, r3, #3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	4936      	ldr	r1, [pc, #216]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ffc:	f7fc fe5e 	bl	8002cbc <HAL_GetTick>
 8006000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006002:	e00a      	b.n	800601a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006004:	f7fc fe5a 	bl	8002cbc <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006012:	4293      	cmp	r3, r2
 8006014:	d901      	bls.n	800601a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e053      	b.n	80060c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601a:	4b2d      	ldr	r3, [pc, #180]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f003 020c 	and.w	r2, r3, #12
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	429a      	cmp	r2, r3
 800602a:	d1eb      	bne.n	8006004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800602c:	4b27      	ldr	r3, [pc, #156]	; (80060cc <HAL_RCC_ClockConfig+0x1c0>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d210      	bcs.n	800605c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800603a:	4b24      	ldr	r3, [pc, #144]	; (80060cc <HAL_RCC_ClockConfig+0x1c0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f023 0207 	bic.w	r2, r3, #7
 8006042:	4922      	ldr	r1, [pc, #136]	; (80060cc <HAL_RCC_ClockConfig+0x1c0>)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	4313      	orrs	r3, r2
 8006048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800604a:	4b20      	ldr	r3, [pc, #128]	; (80060cc <HAL_RCC_ClockConfig+0x1c0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d001      	beq.n	800605c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e032      	b.n	80060c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006068:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4916      	ldr	r1, [pc, #88]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006076:	4313      	orrs	r3, r2
 8006078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006086:	4b12      	ldr	r3, [pc, #72]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	490e      	ldr	r1, [pc, #56]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006096:	4313      	orrs	r3, r2
 8006098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800609a:	f000 f821 	bl	80060e0 <HAL_RCC_GetSysClockFreq>
 800609e:	4602      	mov	r2, r0
 80060a0:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	490a      	ldr	r1, [pc, #40]	; (80060d4 <HAL_RCC_ClockConfig+0x1c8>)
 80060ac:	5ccb      	ldrb	r3, [r1, r3]
 80060ae:	fa22 f303 	lsr.w	r3, r2, r3
 80060b2:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <HAL_RCC_ClockConfig+0x1cc>)
 80060b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060b6:	4b09      	ldr	r3, [pc, #36]	; (80060dc <HAL_RCC_ClockConfig+0x1d0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fc fdbc 	bl	8002c38 <HAL_InitTick>

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40022000 	.word	0x40022000
 80060d0:	40021000 	.word	0x40021000
 80060d4:	0800c158 	.word	0x0800c158
 80060d8:	20000028 	.word	0x20000028
 80060dc:	2000002c 	.word	0x2000002c

080060e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e0:	b490      	push	{r4, r7}
 80060e2:	b08a      	sub	sp, #40	; 0x28
 80060e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80060e6:	4b29      	ldr	r3, [pc, #164]	; (800618c <HAL_RCC_GetSysClockFreq+0xac>)
 80060e8:	1d3c      	adds	r4, r7, #4
 80060ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80060f0:	f240 2301 	movw	r3, #513	; 0x201
 80060f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	2300      	movs	r3, #0
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800610a:	4b21      	ldr	r3, [pc, #132]	; (8006190 <HAL_RCC_GetSysClockFreq+0xb0>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b04      	cmp	r3, #4
 8006118:	d002      	beq.n	8006120 <HAL_RCC_GetSysClockFreq+0x40>
 800611a:	2b08      	cmp	r3, #8
 800611c:	d003      	beq.n	8006126 <HAL_RCC_GetSysClockFreq+0x46>
 800611e:	e02b      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006120:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006122:	623b      	str	r3, [r7, #32]
      break;
 8006124:	e02b      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	0c9b      	lsrs	r3, r3, #18
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	3328      	adds	r3, #40	; 0x28
 8006130:	443b      	add	r3, r7
 8006132:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006136:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d012      	beq.n	8006168 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006142:	4b13      	ldr	r3, [pc, #76]	; (8006190 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	0c5b      	lsrs	r3, r3, #17
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	3328      	adds	r3, #40	; 0x28
 800614e:	443b      	add	r3, r7
 8006150:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006154:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	4a0e      	ldr	r2, [pc, #56]	; (8006194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800615a:	fb03 f202 	mul.w	r2, r3, r2
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
 8006166:	e004      	b.n	8006172 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	4a0b      	ldr	r2, [pc, #44]	; (8006198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800616c:	fb02 f303 	mul.w	r3, r2, r3
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	623b      	str	r3, [r7, #32]
      break;
 8006176:	e002      	b.n	800617e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800617a:	623b      	str	r3, [r7, #32]
      break;
 800617c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800617e:	6a3b      	ldr	r3, [r7, #32]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3728      	adds	r7, #40	; 0x28
 8006184:	46bd      	mov	sp, r7
 8006186:	bc90      	pop	{r4, r7}
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	0800c0f4 	.word	0x0800c0f4
 8006190:	40021000 	.word	0x40021000
 8006194:	007a1200 	.word	0x007a1200
 8006198:	003d0900 	.word	0x003d0900

0800619c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061a0:	4b02      	ldr	r3, [pc, #8]	; (80061ac <HAL_RCC_GetHCLKFreq+0x10>)
 80061a2:	681b      	ldr	r3, [r3, #0]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr
 80061ac:	20000028 	.word	0x20000028

080061b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061b4:	f7ff fff2 	bl	800619c <HAL_RCC_GetHCLKFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	0adb      	lsrs	r3, r3, #11
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	4903      	ldr	r1, [pc, #12]	; (80061d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c6:	5ccb      	ldrb	r3, [r1, r3]
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40021000 	.word	0x40021000
 80061d4:	0800c168 	.word	0x0800c168

080061d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061e0:	4b0a      	ldr	r3, [pc, #40]	; (800620c <RCC_Delay+0x34>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a0a      	ldr	r2, [pc, #40]	; (8006210 <RCC_Delay+0x38>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	0a5b      	lsrs	r3, r3, #9
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061f4:	bf00      	nop
  }
  while (Delay --);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1e5a      	subs	r2, r3, #1
 80061fa:	60fa      	str	r2, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1f9      	bne.n	80061f4 <RCC_Delay+0x1c>
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr
 800620c:	20000028 	.word	0x20000028
 8006210:	10624dd3 	.word	0x10624dd3

08006214 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d07d      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006230:	2300      	movs	r3, #0
 8006232:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006234:	4b4f      	ldr	r3, [pc, #316]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10d      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006240:	4b4c      	ldr	r3, [pc, #304]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	4a4b      	ldr	r2, [pc, #300]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800624a:	61d3      	str	r3, [r2, #28]
 800624c:	4b49      	ldr	r3, [pc, #292]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006258:	2301      	movs	r3, #1
 800625a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625c:	4b46      	ldr	r3, [pc, #280]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006264:	2b00      	cmp	r3, #0
 8006266:	d118      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006268:	4b43      	ldr	r3, [pc, #268]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a42      	ldr	r2, [pc, #264]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800626e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006272:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006274:	f7fc fd22 	bl	8002cbc <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627a:	e008      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800627c:	f7fc fd1e 	bl	8002cbc <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b64      	cmp	r3, #100	; 0x64
 8006288:	d901      	bls.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e06d      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800628e:	4b3a      	ldr	r3, [pc, #232]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800629a:	4b36      	ldr	r3, [pc, #216]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d02e      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d027      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b8:	4b2e      	ldr	r3, [pc, #184]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062c2:	4b2e      	ldr	r3, [pc, #184]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062c4:	2201      	movs	r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062c8:	4b2c      	ldr	r3, [pc, #176]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062ce:	4a29      	ldr	r2, [pc, #164]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d014      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062de:	f7fc fced 	bl	8002cbc <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e4:	e00a      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e6:	f7fc fce9 	bl	8002cbc <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d901      	bls.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e036      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062fc:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0ee      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006308:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4917      	ldr	r1, [pc, #92]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006316:	4313      	orrs	r3, r2
 8006318:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d105      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006320:	4b14      	ldr	r3, [pc, #80]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	4a13      	ldr	r2, [pc, #76]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800632a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006338:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	490b      	ldr	r1, [pc, #44]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006346:	4313      	orrs	r3, r2
 8006348:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	d008      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006356:	4b07      	ldr	r3, [pc, #28]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	4904      	ldr	r1, [pc, #16]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006364:	4313      	orrs	r3, r2
 8006366:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	40021000 	.word	0x40021000
 8006378:	40007000 	.word	0x40007000
 800637c:	42420440 	.word	0x42420440

08006380 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006380:	b590      	push	{r4, r7, lr}
 8006382:	b08d      	sub	sp, #52	; 0x34
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006388:	4b58      	ldr	r3, [pc, #352]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800638a:	f107 040c 	add.w	r4, r7, #12
 800638e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006394:	f240 2301 	movw	r3, #513	; 0x201
 8006398:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
 800639e:	2300      	movs	r3, #0
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a2:	2300      	movs	r3, #0
 80063a4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]
 80063aa:	2300      	movs	r3, #0
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b10      	cmp	r3, #16
 80063b2:	d00a      	beq.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	f200 808e 	bhi.w	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d049      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d079      	beq.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80063c8:	e086      	b.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80063ca:	4b49      	ldr	r3, [pc, #292]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80063d0:	4b47      	ldr	r3, [pc, #284]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d07f      	beq.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	0c9b      	lsrs	r3, r3, #18
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	3330      	adds	r3, #48	; 0x30
 80063e6:	443b      	add	r3, r7
 80063e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80063ec:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d017      	beq.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80063f8:	4b3d      	ldr	r3, [pc, #244]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	0c5b      	lsrs	r3, r3, #17
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	3330      	adds	r3, #48	; 0x30
 8006404:	443b      	add	r3, r7
 8006406:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00d      	beq.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006416:	4a37      	ldr	r2, [pc, #220]	; (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	fbb2 f2f3 	udiv	r2, r2, r3
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	fb02 f303 	mul.w	r3, r2, r3
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006426:	e004      	b.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	4a33      	ldr	r2, [pc, #204]	; (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800642c:	fb02 f303 	mul.w	r3, r2, r3
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006432:	4b2f      	ldr	r3, [pc, #188]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800643a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800643e:	d102      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006444:	e04a      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	4a2c      	ldr	r2, [pc, #176]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800644c:	fba2 2303 	umull	r2, r3, r2, r3
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006454:	e042      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006456:	4b26      	ldr	r3, [pc, #152]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006466:	d108      	bne.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28
 8006478:	e01f      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d109      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006486:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006492:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
 8006498:	e00f      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a4:	d11c      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d016      	beq.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80064b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064b8:	e012      	b.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80064ba:	e011      	b.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80064bc:	f7ff fe78 	bl	80061b0 <HAL_RCC_GetPCLK2Freq>
 80064c0:	4602      	mov	r2, r0
 80064c2:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	0b9b      	lsrs	r3, r3, #14
 80064c8:	f003 0303 	and.w	r3, r3, #3
 80064cc:	3301      	adds	r3, #1
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064d6:	e004      	b.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80064d8:	bf00      	nop
 80064da:	e002      	b.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80064dc:	bf00      	nop
 80064de:	e000      	b.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80064e0:	bf00      	nop
    }
  }
  return (frequency);
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3734      	adds	r7, #52	; 0x34
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd90      	pop	{r4, r7, pc}
 80064ec:	0800c104 	.word	0x0800c104
 80064f0:	40021000 	.word	0x40021000
 80064f4:	007a1200 	.word	0x007a1200
 80064f8:	003d0900 	.word	0x003d0900
 80064fc:	aaaaaaab 	.word	0xaaaaaaab

08006500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e041      	b.n	8006596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fc fa60 	bl	80029ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f000 fca0 	bl	8006e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d001      	beq.n	80065b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e032      	b.n	800661e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a18      	ldr	r2, [pc, #96]	; (8006628 <HAL_TIM_Base_Start+0x88>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00e      	beq.n	80065e8 <HAL_TIM_Base_Start+0x48>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d009      	beq.n	80065e8 <HAL_TIM_Base_Start+0x48>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a14      	ldr	r2, [pc, #80]	; (800662c <HAL_TIM_Base_Start+0x8c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <HAL_TIM_Base_Start+0x48>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a13      	ldr	r2, [pc, #76]	; (8006630 <HAL_TIM_Base_Start+0x90>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d111      	bne.n	800660c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b06      	cmp	r3, #6
 80065f8:	d010      	beq.n	800661c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660a:	e007      	b.n	800661c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr
 8006628:	40012c00 	.word	0x40012c00
 800662c:	40000400 	.word	0x40000400
 8006630:	40000800 	.word	0x40000800

08006634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	d001      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e03a      	b.n	80066c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a18      	ldr	r2, [pc, #96]	; (80066cc <HAL_TIM_Base_Start_IT+0x98>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00e      	beq.n	800668c <HAL_TIM_Base_Start_IT+0x58>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006676:	d009      	beq.n	800668c <HAL_TIM_Base_Start_IT+0x58>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a14      	ldr	r2, [pc, #80]	; (80066d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_TIM_Base_Start_IT+0x58>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a13      	ldr	r2, [pc, #76]	; (80066d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d111      	bne.n	80066b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b06      	cmp	r3, #6
 800669c:	d010      	beq.n	80066c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0201 	orr.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ae:	e007      	b.n	80066c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0201 	orr.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr
 80066cc:	40012c00 	.word	0x40012c00
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800

080066d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6a1a      	ldr	r2, [r3, #32]
 80066f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10f      	bne.n	8006720 <HAL_TIM_Base_Stop_IT+0x48>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6a1a      	ldr	r2, [r3, #32]
 8006706:	f240 4344 	movw	r3, #1092	; 0x444
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d107      	bne.n	8006720 <HAL_TIM_Base_Stop_IT+0x48>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr

08006734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e041      	b.n	80067ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f839 	bl	80067d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3304      	adds	r3, #4
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f000 fb86 	bl	8006e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc80      	pop	{r7}
 80067e2:	4770      	bx	lr

080067e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <HAL_TIM_PWM_Start+0x24>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e022      	b.n	800684e <HAL_TIM_PWM_Start+0x6a>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b04      	cmp	r3, #4
 800680c:	d109      	bne.n	8006822 <HAL_TIM_PWM_Start+0x3e>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b01      	cmp	r3, #1
 8006818:	bf14      	ite	ne
 800681a:	2301      	movne	r3, #1
 800681c:	2300      	moveq	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	e015      	b.n	800684e <HAL_TIM_PWM_Start+0x6a>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b08      	cmp	r3, #8
 8006826:	d109      	bne.n	800683c <HAL_TIM_PWM_Start+0x58>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	bf14      	ite	ne
 8006834:	2301      	movne	r3, #1
 8006836:	2300      	moveq	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	e008      	b.n	800684e <HAL_TIM_PWM_Start+0x6a>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	bf14      	ite	ne
 8006848:	2301      	movne	r3, #1
 800684a:	2300      	moveq	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e05e      	b.n	8006914 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <HAL_TIM_PWM_Start+0x82>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006864:	e013      	b.n	800688e <HAL_TIM_PWM_Start+0xaa>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b04      	cmp	r3, #4
 800686a:	d104      	bne.n	8006876 <HAL_TIM_PWM_Start+0x92>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006874:	e00b      	b.n	800688e <HAL_TIM_PWM_Start+0xaa>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b08      	cmp	r3, #8
 800687a:	d104      	bne.n	8006886 <HAL_TIM_PWM_Start+0xa2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006884:	e003      	b.n	800688e <HAL_TIM_PWM_Start+0xaa>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2201      	movs	r2, #1
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fd74 	bl	8007384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1e      	ldr	r2, [pc, #120]	; (800691c <HAL_TIM_PWM_Start+0x138>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d107      	bne.n	80068b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_TIM_PWM_Start+0x138>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00e      	beq.n	80068de <HAL_TIM_PWM_Start+0xfa>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d009      	beq.n	80068de <HAL_TIM_PWM_Start+0xfa>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a14      	ldr	r2, [pc, #80]	; (8006920 <HAL_TIM_PWM_Start+0x13c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_TIM_PWM_Start+0xfa>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a12      	ldr	r2, [pc, #72]	; (8006924 <HAL_TIM_PWM_Start+0x140>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d111      	bne.n	8006902 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b06      	cmp	r3, #6
 80068ee:	d010      	beq.n	8006912 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006900:	e007      	b.n	8006912 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f042 0201 	orr.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40012c00 	.word	0x40012c00
 8006920:	40000400 	.word	0x40000400
 8006924:	40000800 	.word	0x40000800

08006928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b02      	cmp	r3, #2
 800693c:	d122      	bne.n	8006984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b02      	cmp	r3, #2
 800694a:	d11b      	bne.n	8006984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0202 	mvn.w	r2, #2
 8006954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa6f 	bl	8006e4e <HAL_TIM_IC_CaptureCallback>
 8006970:	e005      	b.n	800697e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa62 	bl	8006e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa71 	bl	8006e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b04      	cmp	r3, #4
 8006990:	d122      	bne.n	80069d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b04      	cmp	r3, #4
 800699e:	d11b      	bne.n	80069d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0204 	mvn.w	r2, #4
 80069a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa45 	bl	8006e4e <HAL_TIM_IC_CaptureCallback>
 80069c4:	e005      	b.n	80069d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa38 	bl	8006e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fa47 	bl	8006e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d122      	bne.n	8006a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d11b      	bne.n	8006a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0208 	mvn.w	r2, #8
 80069fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2204      	movs	r2, #4
 8006a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa1b 	bl	8006e4e <HAL_TIM_IC_CaptureCallback>
 8006a18:	e005      	b.n	8006a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa0e 	bl	8006e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fa1d 	bl	8006e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 0310 	and.w	r3, r3, #16
 8006a36:	2b10      	cmp	r3, #16
 8006a38:	d122      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f003 0310 	and.w	r3, r3, #16
 8006a44:	2b10      	cmp	r3, #16
 8006a46:	d11b      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0210 	mvn.w	r2, #16
 8006a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2208      	movs	r2, #8
 8006a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f9f1 	bl	8006e4e <HAL_TIM_IC_CaptureCallback>
 8006a6c:	e005      	b.n	8006a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f9e4 	bl	8006e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f9f3 	bl	8006e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d10e      	bne.n	8006aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d107      	bne.n	8006aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0201 	mvn.w	r2, #1
 8006aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fa f84e 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab6:	2b80      	cmp	r3, #128	; 0x80
 8006ab8:	d10e      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac4:	2b80      	cmp	r3, #128	; 0x80
 8006ac6:	d107      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fce1 	bl	800749a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d10e      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b40      	cmp	r3, #64	; 0x40
 8006af2:	d107      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f9b7 	bl	8006e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d10e      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d107      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0220 	mvn.w	r2, #32
 8006b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fcac 	bl	8007488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e0ac      	b.n	8006cac <HAL_TIM_PWM_ConfigChannel+0x174>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b0c      	cmp	r3, #12
 8006b5e:	f200 809f 	bhi.w	8006ca0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006b62:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006b9d 	.word	0x08006b9d
 8006b6c:	08006ca1 	.word	0x08006ca1
 8006b70:	08006ca1 	.word	0x08006ca1
 8006b74:	08006ca1 	.word	0x08006ca1
 8006b78:	08006bdd 	.word	0x08006bdd
 8006b7c:	08006ca1 	.word	0x08006ca1
 8006b80:	08006ca1 	.word	0x08006ca1
 8006b84:	08006ca1 	.word	0x08006ca1
 8006b88:	08006c1f 	.word	0x08006c1f
 8006b8c:	08006ca1 	.word	0x08006ca1
 8006b90:	08006ca1 	.word	0x08006ca1
 8006b94:	08006ca1 	.word	0x08006ca1
 8006b98:	08006c5f 	.word	0x08006c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68b9      	ldr	r1, [r7, #8]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 f9d0 	bl	8006f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0208 	orr.w	r2, r2, #8
 8006bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0204 	bic.w	r2, r2, #4
 8006bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6999      	ldr	r1, [r3, #24]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	619a      	str	r2, [r3, #24]
      break;
 8006bda:	e062      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fa16 	bl	8007014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699a      	ldr	r2, [r3, #24]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699a      	ldr	r2, [r3, #24]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6999      	ldr	r1, [r3, #24]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	021a      	lsls	r2, r3, #8
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	619a      	str	r2, [r3, #24]
      break;
 8006c1c:	e041      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68b9      	ldr	r1, [r7, #8]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fa5f 	bl	80070e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0208 	orr.w	r2, r2, #8
 8006c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69da      	ldr	r2, [r3, #28]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0204 	bic.w	r2, r2, #4
 8006c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69d9      	ldr	r1, [r3, #28]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	61da      	str	r2, [r3, #28]
      break;
 8006c5c:	e021      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 faa9 	bl	80071bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69da      	ldr	r2, [r3, #28]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69d9      	ldr	r1, [r3, #28]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	021a      	lsls	r2, r3, #8
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	61da      	str	r2, [r3, #28]
      break;
 8006c9e:	e000      	b.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006ca0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIM_ConfigClockSource+0x18>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e0b3      	b.n	8006e34 <HAL_TIM_ConfigClockSource+0x180>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d04:	d03e      	beq.n	8006d84 <HAL_TIM_ConfigClockSource+0xd0>
 8006d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0a:	f200 8087 	bhi.w	8006e1c <HAL_TIM_ConfigClockSource+0x168>
 8006d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d12:	f000 8085 	beq.w	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1a:	d87f      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x168>
 8006d1c:	2b70      	cmp	r3, #112	; 0x70
 8006d1e:	d01a      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0xa2>
 8006d20:	2b70      	cmp	r3, #112	; 0x70
 8006d22:	d87b      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x168>
 8006d24:	2b60      	cmp	r3, #96	; 0x60
 8006d26:	d050      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x116>
 8006d28:	2b60      	cmp	r3, #96	; 0x60
 8006d2a:	d877      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x168>
 8006d2c:	2b50      	cmp	r3, #80	; 0x50
 8006d2e:	d03c      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0xf6>
 8006d30:	2b50      	cmp	r3, #80	; 0x50
 8006d32:	d873      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x168>
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d058      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x136>
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d86f      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x168>
 8006d3c:	2b30      	cmp	r3, #48	; 0x30
 8006d3e:	d064      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x156>
 8006d40:	2b30      	cmp	r3, #48	; 0x30
 8006d42:	d86b      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x168>
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d060      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x156>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d867      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x168>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d05c      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x156>
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d05a      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d54:	e062      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6899      	ldr	r1, [r3, #8]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f000 faee 	bl	8007346 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	609a      	str	r2, [r3, #8]
      break;
 8006d82:	e04e      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	6899      	ldr	r1, [r3, #8]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f000 fad7 	bl	8007346 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006da6:	609a      	str	r2, [r3, #8]
      break;
 8006da8:	e03b      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6859      	ldr	r1, [r3, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	461a      	mov	r2, r3
 8006db8:	f000 fa4e 	bl	8007258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2150      	movs	r1, #80	; 0x50
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 faa5 	bl	8007312 <TIM_ITRx_SetConfig>
      break;
 8006dc8:	e02b      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6859      	ldr	r1, [r3, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f000 fa6c 	bl	80072b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2160      	movs	r1, #96	; 0x60
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fa95 	bl	8007312 <TIM_ITRx_SetConfig>
      break;
 8006de8:	e01b      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	6859      	ldr	r1, [r3, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	461a      	mov	r2, r3
 8006df8:	f000 fa2e 	bl	8007258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2140      	movs	r1, #64	; 0x40
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fa85 	bl	8007312 <TIM_ITRx_SetConfig>
      break;
 8006e08:	e00b      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f000 fa7c 	bl	8007312 <TIM_ITRx_SetConfig>
        break;
 8006e1a:	e002      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e1c:	bf00      	nop
 8006e1e:	e000      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bc80      	pop	{r7}
 8006e82:	4770      	bx	lr

08006e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a29      	ldr	r2, [pc, #164]	; (8006f3c <TIM_Base_SetConfig+0xb8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00b      	beq.n	8006eb4 <TIM_Base_SetConfig+0x30>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea2:	d007      	beq.n	8006eb4 <TIM_Base_SetConfig+0x30>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a26      	ldr	r2, [pc, #152]	; (8006f40 <TIM_Base_SetConfig+0xbc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_Base_SetConfig+0x30>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a25      	ldr	r2, [pc, #148]	; (8006f44 <TIM_Base_SetConfig+0xc0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d108      	bne.n	8006ec6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a1c      	ldr	r2, [pc, #112]	; (8006f3c <TIM_Base_SetConfig+0xb8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d00b      	beq.n	8006ee6 <TIM_Base_SetConfig+0x62>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed4:	d007      	beq.n	8006ee6 <TIM_Base_SetConfig+0x62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a19      	ldr	r2, [pc, #100]	; (8006f40 <TIM_Base_SetConfig+0xbc>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d003      	beq.n	8006ee6 <TIM_Base_SetConfig+0x62>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <TIM_Base_SetConfig+0xc0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d108      	bne.n	8006ef8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a07      	ldr	r2, [pc, #28]	; (8006f3c <TIM_Base_SetConfig+0xb8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d103      	bne.n	8006f2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	615a      	str	r2, [r3, #20]
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40000400 	.word	0x40000400
 8006f44:	40000800 	.word	0x40000800

08006f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f023 0201 	bic.w	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0303 	bic.w	r3, r3, #3
 8006f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f023 0302 	bic.w	r3, r3, #2
 8006f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a1c      	ldr	r2, [pc, #112]	; (8007010 <TIM_OC1_SetConfig+0xc8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d10c      	bne.n	8006fbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f023 0308 	bic.w	r3, r3, #8
 8006faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f023 0304 	bic.w	r3, r3, #4
 8006fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a13      	ldr	r2, [pc, #76]	; (8007010 <TIM_OC1_SetConfig+0xc8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d111      	bne.n	8006fea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	621a      	str	r2, [r3, #32]
}
 8007004:	bf00      	nop
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40012c00 	.word	0x40012c00

08007014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	f023 0210 	bic.w	r2, r3, #16
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	021b      	lsls	r3, r3, #8
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f023 0320 	bic.w	r3, r3, #32
 800705e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a1d      	ldr	r2, [pc, #116]	; (80070e4 <TIM_OC2_SetConfig+0xd0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d10d      	bne.n	8007090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800707a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800708e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a14      	ldr	r2, [pc, #80]	; (80070e4 <TIM_OC2_SetConfig+0xd0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d113      	bne.n	80070c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800709e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr
 80070e4:	40012c00 	.word	0x40012c00

080070e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	021b      	lsls	r3, r3, #8
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	4313      	orrs	r3, r2
 800713c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a1d      	ldr	r2, [pc, #116]	; (80071b8 <TIM_OC3_SetConfig+0xd0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d10d      	bne.n	8007162 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800714c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a14      	ldr	r2, [pc, #80]	; (80071b8 <TIM_OC3_SetConfig+0xd0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d113      	bne.n	8007192 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	621a      	str	r2, [r3, #32]
}
 80071ac:	bf00      	nop
 80071ae:	371c      	adds	r7, #28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	40012c00 	.word	0x40012c00

080071bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	031b      	lsls	r3, r3, #12
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a0f      	ldr	r2, [pc, #60]	; (8007254 <TIM_OC4_SetConfig+0x98>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d109      	bne.n	8007230 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	019b      	lsls	r3, r3, #6
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr
 8007254:	40012c00 	.word	0x40012c00

08007258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	f023 0201 	bic.w	r2, r3, #1
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 030a 	bic.w	r3, r3, #10
 8007294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	621a      	str	r2, [r3, #32]
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr

080072b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f023 0210 	bic.w	r2, r3, #16
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	031b      	lsls	r3, r3, #12
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	621a      	str	r2, [r3, #32]
}
 8007308:	bf00      	nop
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	bc80      	pop	{r7}
 8007310:	4770      	bx	lr

08007312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	f043 0307 	orr.w	r3, r3, #7
 8007334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	609a      	str	r2, [r3, #8]
}
 800733c:	bf00      	nop
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr

08007346 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007346:	b480      	push	{r7}
 8007348:	b087      	sub	sp, #28
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007360:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	021a      	lsls	r2, r3, #8
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	431a      	orrs	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4313      	orrs	r3, r2
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	609a      	str	r2, [r3, #8]
}
 800737a:	bf00      	nop
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	bc80      	pop	{r7}
 8007382:	4770      	bx	lr

08007384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	2201      	movs	r2, #1
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1a      	ldr	r2, [r3, #32]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	43db      	mvns	r3, r3
 80073a6:	401a      	ands	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a1a      	ldr	r2, [r3, #32]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	fa01 f303 	lsl.w	r3, r1, r3
 80073bc:	431a      	orrs	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e046      	b.n	8007472 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a16      	ldr	r2, [pc, #88]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00e      	beq.n	8007446 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007430:	d009      	beq.n	8007446 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a12      	ldr	r2, [pc, #72]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d004      	beq.n	8007446 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a10      	ldr	r2, [pc, #64]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d10c      	bne.n	8007460 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800744c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	4313      	orrs	r3, r2
 8007456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40000400 	.word	0x40000400
 8007484:	40000800 	.word	0x40000800

08007488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	bc80      	pop	{r7}
 8007498:	4770      	bx	lr

0800749a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bc80      	pop	{r7}
 80074aa:	4770      	bx	lr

080074ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074ac:	b084      	sub	sp, #16
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	f107 0014 	add.w	r0, r7, #20
 80074ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	b004      	add	sp, #16
 80074ca:	4770      	bx	lr

080074cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bc80      	pop	{r7}
 80074f6:	4770      	bx	lr

080074f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007500:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007504:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800750c:	b29a      	uxth	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	b29b      	uxth	r3, r3
 8007512:	43db      	mvns	r3, r3
 8007514:	b29b      	uxth	r3, r3
 8007516:	4013      	ands	r3, r2
 8007518:	b29a      	uxth	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	bc80      	pop	{r7}
 800752a:	4770      	bx	lr

0800752c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007544:	b084      	sub	sp, #16
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	f107 0014 	add.w	r0, r7, #20
 8007552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	b004      	add	sp, #16
 8007582:	4770      	bx	lr

08007584 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007584:	b480      	push	{r7}
 8007586:	b09b      	sub	sp, #108	; 0x6c
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80075a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	78db      	ldrb	r3, [r3, #3]
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d81f      	bhi.n	80075f6 <USB_ActivateEndpoint+0x72>
 80075b6:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <USB_ActivateEndpoint+0x38>)
 80075b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075bc:	080075cd 	.word	0x080075cd
 80075c0:	080075e9 	.word	0x080075e9
 80075c4:	080075ff 	.word	0x080075ff
 80075c8:	080075db 	.word	0x080075db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075d8:	e012      	b.n	8007600 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80075e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075e6:	e00b      	b.n	8007600 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075f4:	e004      	b.n	8007600 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80075fc:	e000      	b.n	8007600 <USB_ActivateEndpoint+0x7c>
      break;
 80075fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	441a      	add	r2, r3
 800760a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800760e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761e:	b29b      	uxth	r3, r3
 8007620:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007638:	b29a      	uxth	r2, r3
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	4313      	orrs	r3, r2
 8007642:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	441a      	add	r2, r3
 8007650:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800765c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007664:	b29b      	uxth	r3, r3
 8007666:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	7b1b      	ldrb	r3, [r3, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 8149 	bne.w	8007904 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 8084 	beq.w	8007784 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007686:	b29b      	uxth	r3, r3
 8007688:	461a      	mov	r2, r3
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	4413      	add	r3, r2
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	011a      	lsls	r2, r3, #4
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	88db      	ldrh	r3, [r3, #6]
 80076a4:	085b      	lsrs	r3, r3, #1
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	81fb      	strh	r3, [r7, #14]
 80076be:	89fb      	ldrh	r3, [r7, #14]
 80076c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d01b      	beq.n	8007700 <USB_ActivateEndpoint+0x17c>
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076de:	81bb      	strh	r3, [r7, #12]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	441a      	add	r2, r3
 80076ea:	89bb      	ldrh	r3, [r7, #12]
 80076ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	78db      	ldrb	r3, [r3, #3]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d020      	beq.n	800774a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800771a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771e:	813b      	strh	r3, [r7, #8]
 8007720:	893b      	ldrh	r3, [r7, #8]
 8007722:	f083 0320 	eor.w	r3, r3, #32
 8007726:	813b      	strh	r3, [r7, #8]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	441a      	add	r2, r3
 8007732:	893b      	ldrh	r3, [r7, #8]
 8007734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800773c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007744:	b29b      	uxth	r3, r3
 8007746:	8013      	strh	r3, [r2, #0]
 8007748:	e27f      	b.n	8007c4a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	b29b      	uxth	r3, r3
 8007758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800775c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007760:	817b      	strh	r3, [r7, #10]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	441a      	add	r2, r3
 800776c:	897b      	ldrh	r3, [r7, #10]
 800776e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800777a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777e:	b29b      	uxth	r3, r3
 8007780:	8013      	strh	r3, [r2, #0]
 8007782:	e262      	b.n	8007c4a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800778e:	b29b      	uxth	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	4413      	add	r3, r2
 8007796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	011a      	lsls	r2, r3, #4
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80077a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	88db      	ldrh	r3, [r3, #6]
 80077ac:	085b      	lsrs	r3, r3, #1
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	4413      	add	r3, r2
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	011a      	lsls	r2, r3, #4
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	4413      	add	r3, r2
 80077d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077da:	623b      	str	r3, [r7, #32]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d112      	bne.n	800780a <USB_ActivateEndpoint+0x286>
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	801a      	strh	r2, [r3, #0]
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007802:	b29a      	uxth	r2, r3
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	e02f      	b.n	800786a <USB_ActivateEndpoint+0x2e6>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b3e      	cmp	r3, #62	; 0x3e
 8007810:	d813      	bhi.n	800783a <USB_ActivateEndpoint+0x2b6>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	085b      	lsrs	r3, r3, #1
 8007818:	663b      	str	r3, [r7, #96]	; 0x60
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <USB_ActivateEndpoint+0x2a8>
 8007826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007828:	3301      	adds	r3, #1
 800782a:	663b      	str	r3, [r7, #96]	; 0x60
 800782c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800782e:	b29b      	uxth	r3, r3
 8007830:	029b      	lsls	r3, r3, #10
 8007832:	b29a      	uxth	r2, r3
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	801a      	strh	r2, [r3, #0]
 8007838:	e017      	b.n	800786a <USB_ActivateEndpoint+0x2e6>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	663b      	str	r3, [r7, #96]	; 0x60
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 031f 	and.w	r3, r3, #31
 800784a:	2b00      	cmp	r3, #0
 800784c:	d102      	bne.n	8007854 <USB_ActivateEndpoint+0x2d0>
 800784e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007850:	3b01      	subs	r3, #1
 8007852:	663b      	str	r3, [r7, #96]	; 0x60
 8007854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007856:	b29b      	uxth	r3, r3
 8007858:	029b      	lsls	r3, r3, #10
 800785a:	b29b      	uxth	r3, r3
 800785c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007864:	b29a      	uxth	r2, r3
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	83fb      	strh	r3, [r7, #30]
 8007878:	8bfb      	ldrh	r3, [r7, #30]
 800787a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d01b      	beq.n	80078ba <USB_ActivateEndpoint+0x336>
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007898:	83bb      	strh	r3, [r7, #28]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	441a      	add	r2, r3
 80078a4:	8bbb      	ldrh	r3, [r7, #28]
 80078a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d0:	837b      	strh	r3, [r7, #26]
 80078d2:	8b7b      	ldrh	r3, [r7, #26]
 80078d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078d8:	837b      	strh	r3, [r7, #26]
 80078da:	8b7b      	ldrh	r3, [r7, #26]
 80078dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078e0:	837b      	strh	r3, [r7, #26]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	441a      	add	r2, r3
 80078ec:	8b7b      	ldrh	r3, [r7, #26]
 80078ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fe:	b29b      	uxth	r3, r3
 8007900:	8013      	strh	r3, [r2, #0]
 8007902:	e1a2      	b.n	8007c4a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	441a      	add	r2, r3
 8007928:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800792c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007934:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793c:	b29b      	uxth	r3, r3
 800793e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	65bb      	str	r3, [r7, #88]	; 0x58
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007950:	4413      	add	r3, r2
 8007952:	65bb      	str	r3, [r7, #88]	; 0x58
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	011a      	lsls	r2, r3, #4
 800795a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800795c:	4413      	add	r3, r2
 800795e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007962:	657b      	str	r3, [r7, #84]	; 0x54
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	891b      	ldrh	r3, [r3, #8]
 8007968:	085b      	lsrs	r3, r3, #1
 800796a:	b29b      	uxth	r3, r3
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	b29a      	uxth	r2, r3
 8007970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007972:	801a      	strh	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	653b      	str	r3, [r7, #80]	; 0x50
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800797e:	b29b      	uxth	r3, r3
 8007980:	461a      	mov	r2, r3
 8007982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007984:	4413      	add	r3, r2
 8007986:	653b      	str	r3, [r7, #80]	; 0x50
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	011a      	lsls	r2, r3, #4
 800798e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007990:	4413      	add	r3, r2
 8007992:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	895b      	ldrh	r3, [r3, #10]
 800799c:	085b      	lsrs	r3, r3, #1
 800799e:	b29b      	uxth	r3, r3
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	785b      	ldrb	r3, [r3, #1]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f040 8091 	bne.w	8007ad4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80079c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01b      	beq.n	8007a02 <USB_ActivateEndpoint+0x47e>
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	441a      	add	r2, r3
 80079ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80079ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d01b      	beq.n	8007a52 <USB_ActivateEndpoint+0x4ce>
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a30:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	441a      	add	r2, r3
 8007a3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	441a      	add	r2, r3
 8007a84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab0:	867b      	strh	r3, [r7, #50]	; 0x32
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	441a      	add	r2, r3
 8007abc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	8013      	strh	r3, [r2, #0]
 8007ad2:	e0ba      	b.n	8007c4a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ae4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01d      	beq.n	8007b2c <USB_ActivateEndpoint+0x5a8>
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	441a      	add	r2, r3
 8007b14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007b3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01d      	beq.n	8007b84 <USB_ActivateEndpoint+0x600>
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	441a      	add	r2, r3
 8007b6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	78db      	ldrb	r3, [r3, #3]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d024      	beq.n	8007bd6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007baa:	f083 0320 	eor.w	r3, r3, #32
 8007bae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	441a      	add	r2, r3
 8007bbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	8013      	strh	r3, [r2, #0]
 8007bd4:	e01d      	b.n	8007c12 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	441a      	add	r2, r3
 8007bfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c28:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	441a      	add	r2, r3
 8007c34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007c4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	376c      	adds	r7, #108	; 0x6c
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr

08007c58 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b08d      	sub	sp, #52	; 0x34
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	7b1b      	ldrb	r3, [r3, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f040 808e 	bne.w	8007d88 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	785b      	ldrb	r3, [r3, #1]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d044      	beq.n	8007cfe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	81bb      	strh	r3, [r7, #12]
 8007c82:	89bb      	ldrh	r3, [r7, #12]
 8007c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01b      	beq.n	8007cc4 <USB_DeactivateEndpoint+0x6c>
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca2:	817b      	strh	r3, [r7, #10]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	441a      	add	r2, r3
 8007cae:	897b      	ldrh	r3, [r7, #10]
 8007cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cda:	813b      	strh	r3, [r7, #8]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	441a      	add	r2, r3
 8007ce6:	893b      	ldrh	r3, [r7, #8]
 8007ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	8013      	strh	r3, [r2, #0]
 8007cfc:	e192      	b.n	8008024 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	827b      	strh	r3, [r7, #18]
 8007d0c:	8a7b      	ldrh	r3, [r7, #18]
 8007d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d01b      	beq.n	8007d4e <USB_DeactivateEndpoint+0xf6>
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2c:	823b      	strh	r3, [r7, #16]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	441a      	add	r2, r3
 8007d38:	8a3b      	ldrh	r3, [r7, #16]
 8007d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d64:	81fb      	strh	r3, [r7, #14]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	441a      	add	r2, r3
 8007d70:	89fb      	ldrh	r3, [r7, #14]
 8007d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	8013      	strh	r3, [r2, #0]
 8007d86:	e14d      	b.n	8008024 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f040 80a5 	bne.w	8007edc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	843b      	strh	r3, [r7, #32]
 8007da0:	8c3b      	ldrh	r3, [r7, #32]
 8007da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d01b      	beq.n	8007de2 <USB_DeactivateEndpoint+0x18a>
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc0:	83fb      	strh	r3, [r7, #30]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	441a      	add	r2, r3
 8007dcc:	8bfb      	ldrh	r3, [r7, #30]
 8007dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	83bb      	strh	r3, [r7, #28]
 8007df0:	8bbb      	ldrh	r3, [r7, #28]
 8007df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d01b      	beq.n	8007e32 <USB_DeactivateEndpoint+0x1da>
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e10:	837b      	strh	r3, [r7, #26]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	441a      	add	r2, r3
 8007e1c:	8b7b      	ldrh	r3, [r7, #26]
 8007e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e48:	833b      	strh	r3, [r7, #24]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	441a      	add	r2, r3
 8007e54:	8b3b      	ldrh	r3, [r7, #24]
 8007e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e80:	82fb      	strh	r3, [r7, #22]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	441a      	add	r2, r3
 8007e8c:	8afb      	ldrh	r3, [r7, #22]
 8007e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb8:	82bb      	strh	r3, [r7, #20]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	441a      	add	r2, r3
 8007ec4:	8abb      	ldrh	r3, [r7, #20]
 8007ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	8013      	strh	r3, [r2, #0]
 8007eda:	e0a3      	b.n	8008024 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007eea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d01b      	beq.n	8007f2c <USB_DeactivateEndpoint+0x2d4>
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	441a      	add	r2, r3
 8007f16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01b      	beq.n	8007f7c <USB_DeactivateEndpoint+0x324>
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	441a      	add	r2, r3
 8007f66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	441a      	add	r2, r3
 8007f9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	441a      	add	r2, r3
 8007fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008002:	847b      	strh	r3, [r7, #34]	; 0x22
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	441a      	add	r2, r3
 800800e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800801c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008020:	b29b      	uxth	r3, r3
 8008022:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3734      	adds	r7, #52	; 0x34
 800802a:	46bd      	mov	sp, r7
 800802c:	bc80      	pop	{r7}
 800802e:	4770      	bx	lr

08008030 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b0cc      	sub	sp, #304	; 0x130
 8008034:	af00      	add	r7, sp, #0
 8008036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800803e:	6018      	str	r0, [r3, #0]
 8008040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008048:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800804a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	2b01      	cmp	r3, #1
 8008058:	f041 817d 	bne.w	8009356 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800805c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	699a      	ldr	r2, [r3, #24]
 8008068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	429a      	cmp	r2, r3
 8008076:	d908      	bls.n	800808a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008088:	e007      	b.n	800809a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800808a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800809a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	7b1b      	ldrb	r3, [r3, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d152      	bne.n	8008150 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80080aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6959      	ldr	r1, [r3, #20]
 80080b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	88da      	ldrh	r2, [r3, #6]
 80080c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80080cc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80080d0:	6800      	ldr	r0, [r0, #0]
 80080d2:	f001 ff23 	bl	8009f1c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80080d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80080de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080e2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	4619      	mov	r1, r3
 80080fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008100:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008104:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008108:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	440a      	add	r2, r1
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	011a      	lsls	r2, r3, #4
 8008120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008124:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4413      	add	r3, r2
 800812c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008134:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800813e:	b29a      	uxth	r2, r3
 8008140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008144:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	f001 b8b5 	b.w	80092ba <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	78db      	ldrb	r3, [r3, #3]
 800815c:	2b02      	cmp	r3, #2
 800815e:	f040 84c6 	bne.w	8008aee <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6a1a      	ldr	r2, [r3, #32]
 800816e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	429a      	cmp	r2, r3
 800817c:	f240 8443 	bls.w	8008a06 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008184:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	b29b      	uxth	r3, r3
 800819e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80081aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	441a      	add	r2, r3
 80081c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d8:	b29b      	uxth	r3, r3
 80081da:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80081dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6a1a      	ldr	r2, [r3, #32]
 80081e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ec:	1ad2      	subs	r2, r2, r3
 80081ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	b29b      	uxth	r3, r3
 8008218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 823e 	beq.w	800869e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008226:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800822a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800822e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	2b00      	cmp	r3, #0
 8008244:	f040 809a 	bne.w	800837c <USB_EPStartXfer+0x34c>
 8008248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008250:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008254:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008260:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800826a:	b29b      	uxth	r3, r3
 800826c:	4619      	mov	r1, r3
 800826e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008276:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800827a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	440a      	add	r2, r1
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	011a      	lsls	r2, r3, #4
 8008292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4413      	add	r3, r2
 800829e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80082a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d122      	bne.n	80082fa <USB_EPStartXfer+0x2ca>
 80082b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	801a      	strh	r2, [r3, #0]
 80082d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	e079      	b.n	80083ee <USB_EPStartXfer+0x3be>
 80082fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008300:	d81b      	bhi.n	800833a <USB_EPStartXfer+0x30a>
 8008302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008306:	085b      	lsrs	r3, r3, #1
 8008308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800830c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d004      	beq.n	8008322 <USB_EPStartXfer+0x2f2>
 8008318:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800831c:	3301      	adds	r3, #1
 800831e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008322:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008326:	b29b      	uxth	r3, r3
 8008328:	029b      	lsls	r3, r3, #10
 800832a:	b29a      	uxth	r2, r3
 800832c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008330:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	801a      	strh	r2, [r3, #0]
 8008338:	e059      	b.n	80083ee <USB_EPStartXfer+0x3be>
 800833a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800833e:	095b      	lsrs	r3, r3, #5
 8008340:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008348:	f003 031f 	and.w	r3, r3, #31
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <USB_EPStartXfer+0x32a>
 8008350:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008354:	3b01      	subs	r3, #1
 8008356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800835a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800835e:	b29b      	uxth	r3, r3
 8008360:	029b      	lsls	r3, r3, #10
 8008362:	b29b      	uxth	r3, r3
 8008364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836c:	b29a      	uxth	r2, r3
 800836e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008372:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	e038      	b.n	80083ee <USB_EPStartXfer+0x3be>
 800837c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	785b      	ldrb	r3, [r3, #1]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d130      	bne.n	80083ee <USB_EPStartXfer+0x3be>
 800838c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008390:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800839a:	b29b      	uxth	r3, r3
 800839c:	4619      	mov	r1, r3
 800839e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80083a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083aa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80083ae:	6812      	ldr	r2, [r2, #0]
 80083b0:	440a      	add	r2, r1
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	011a      	lsls	r2, r3, #4
 80083c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4413      	add	r3, r2
 80083ce:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80083d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80083ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	895b      	ldrh	r3, [r3, #10]
 80083fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6959      	ldr	r1, [r3, #20]
 800840a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800840e:	b29b      	uxth	r3, r3
 8008410:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008414:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008418:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800841c:	6800      	ldr	r0, [r0, #0]
 800841e:	f001 fd7d 	bl	8009f1c <USB_WritePMA>
            ep->xfer_buff += len;
 8008422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695a      	ldr	r2, [r3, #20]
 800842e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008432:	441a      	add	r2, r3
 8008434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6a1a      	ldr	r2, [r3, #32]
 800844c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	429a      	cmp	r2, r3
 800845a:	d90f      	bls.n	800847c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800845c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846c:	1ad2      	subs	r2, r2, r3
 800846e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	621a      	str	r2, [r3, #32]
 800847a:	e00e      	b.n	800849a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800847c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800848c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2200      	movs	r2, #0
 8008498:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800849a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f040 809a 	bne.w	80085e0 <USB_EPStartXfer+0x5b0>
 80084ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80084b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80084bc:	6812      	ldr	r2, [r2, #0]
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	4619      	mov	r1, r3
 80084d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80084da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084de:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80084e2:	6812      	ldr	r2, [r2, #0]
 80084e4:	440a      	add	r2, r1
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	011a      	lsls	r2, r3, #4
 80084f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4413      	add	r3, r2
 8008502:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d122      	bne.n	800855e <USB_EPStartXfer+0x52e>
 8008518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800851c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800852a:	b29a      	uxth	r2, r3
 800852c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008530:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800853c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800854a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800854e:	b29a      	uxth	r2, r3
 8008550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008554:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e083      	b.n	8008666 <USB_EPStartXfer+0x636>
 800855e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008562:	2b3e      	cmp	r3, #62	; 0x3e
 8008564:	d81b      	bhi.n	800859e <USB_EPStartXfer+0x56e>
 8008566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856a:	085b      	lsrs	r3, r3, #1
 800856c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <USB_EPStartXfer+0x556>
 800857c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008580:	3301      	adds	r3, #1
 8008582:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008586:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800858a:	b29b      	uxth	r3, r3
 800858c:	029b      	lsls	r3, r3, #10
 800858e:	b29a      	uxth	r2, r3
 8008590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008594:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	801a      	strh	r2, [r3, #0]
 800859c:	e063      	b.n	8008666 <USB_EPStartXfer+0x636>
 800859e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80085a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ac:	f003 031f 	and.w	r3, r3, #31
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <USB_EPStartXfer+0x58e>
 80085b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80085b8:	3b01      	subs	r3, #1
 80085ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80085be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	029b      	lsls	r3, r3, #10
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	801a      	strh	r2, [r3, #0]
 80085de:	e042      	b.n	8008666 <USB_EPStartXfer+0x636>
 80085e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d13a      	bne.n	8008666 <USB_EPStartXfer+0x636>
 80085f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80085f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085fc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008600:	6812      	ldr	r2, [r2, #0]
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008612:	b29b      	uxth	r3, r3
 8008614:	4619      	mov	r1, r3
 8008616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800861e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008622:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008626:	6812      	ldr	r2, [r2, #0]
 8008628:	440a      	add	r2, r1
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	011a      	lsls	r2, r3, #4
 800863a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4413      	add	r3, r2
 8008646:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800864a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008658:	b29a      	uxth	r2, r3
 800865a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	891b      	ldrh	r3, [r3, #8]
 8008672:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6959      	ldr	r1, [r3, #20]
 8008682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008686:	b29b      	uxth	r3, r3
 8008688:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800868c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008690:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008694:	6800      	ldr	r0, [r0, #0]
 8008696:	f001 fc41 	bl	8009f1c <USB_WritePMA>
 800869a:	f000 be0e 	b.w	80092ba <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800869e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d16d      	bne.n	800878a <USB_EPStartXfer+0x75a>
 80086ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	461a      	mov	r2, r3
 80086cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ce:	4413      	add	r3, r2
 80086d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80086d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	011a      	lsls	r2, r3, #4
 80086e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e2:	4413      	add	r3, r2
 80086e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086e8:	647b      	str	r3, [r7, #68]	; 0x44
 80086ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d112      	bne.n	8008718 <USB_EPStartXfer+0x6e8>
 80086f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008700:	801a      	strh	r2, [r3, #0]
 8008702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800870c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008710:	b29a      	uxth	r2, r3
 8008712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008714:	801a      	strh	r2, [r3, #0]
 8008716:	e063      	b.n	80087e0 <USB_EPStartXfer+0x7b0>
 8008718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800871c:	2b3e      	cmp	r3, #62	; 0x3e
 800871e:	d817      	bhi.n	8008750 <USB_EPStartXfer+0x720>
 8008720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800872a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d004      	beq.n	8008740 <USB_EPStartXfer+0x710>
 8008736:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800873a:	3301      	adds	r3, #1
 800873c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008740:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008744:	b29b      	uxth	r3, r3
 8008746:	029b      	lsls	r3, r3, #10
 8008748:	b29a      	uxth	r2, r3
 800874a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800874c:	801a      	strh	r2, [r3, #0]
 800874e:	e047      	b.n	80087e0 <USB_EPStartXfer+0x7b0>
 8008750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008754:	095b      	lsrs	r3, r3, #5
 8008756:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800875a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800875e:	f003 031f 	and.w	r3, r3, #31
 8008762:	2b00      	cmp	r3, #0
 8008764:	d104      	bne.n	8008770 <USB_EPStartXfer+0x740>
 8008766:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800876a:	3b01      	subs	r3, #1
 800876c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008770:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008774:	b29b      	uxth	r3, r3
 8008776:	029b      	lsls	r3, r3, #10
 8008778:	b29b      	uxth	r3, r3
 800877a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800877e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008782:	b29a      	uxth	r2, r3
 8008784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	e02a      	b.n	80087e0 <USB_EPStartXfer+0x7b0>
 800878a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d122      	bne.n	80087e0 <USB_EPStartXfer+0x7b0>
 800879a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	653b      	str	r3, [r7, #80]	; 0x50
 80087a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ba:	4413      	add	r3, r2
 80087bc:	653b      	str	r3, [r7, #80]	; 0x50
 80087be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	011a      	lsls	r2, r3, #4
 80087cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ce:	4413      	add	r3, r2
 80087d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087da:	b29a      	uxth	r2, r3
 80087dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80087e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	891b      	ldrh	r3, [r3, #8]
 80087ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6959      	ldr	r1, [r3, #20]
 80087fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008800:	b29b      	uxth	r3, r3
 8008802:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008806:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800880a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800880e:	6800      	ldr	r0, [r0, #0]
 8008810:	f001 fb84 	bl	8009f1c <USB_WritePMA>
            ep->xfer_buff += len;
 8008814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695a      	ldr	r2, [r3, #20]
 8008820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008824:	441a      	add	r2, r3
 8008826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6a1a      	ldr	r2, [r3, #32]
 800883e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	429a      	cmp	r2, r3
 800884c:	d90f      	bls.n	800886e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800884e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6a1a      	ldr	r2, [r3, #32]
 800885a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	621a      	str	r2, [r3, #32]
 800886c:	e00e      	b.n	800888c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800886e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800887e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2200      	movs	r2, #0
 800888a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800888c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	643b      	str	r3, [r7, #64]	; 0x40
 8008898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d16d      	bne.n	8008984 <USB_EPStartXfer+0x954>
 80088a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80088b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	4413      	add	r3, r2
 80088ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80088cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	011a      	lsls	r2, r3, #4
 80088da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088dc:	4413      	add	r3, r2
 80088de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
 80088e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d112      	bne.n	8008912 <USB_EPStartXfer+0x8e2>
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fa:	801a      	strh	r2, [r3, #0]
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	b29b      	uxth	r3, r3
 8008902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800890a:	b29a      	uxth	r2, r3
 800890c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890e:	801a      	strh	r2, [r3, #0]
 8008910:	e05d      	b.n	80089ce <USB_EPStartXfer+0x99e>
 8008912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008916:	2b3e      	cmp	r3, #62	; 0x3e
 8008918:	d817      	bhi.n	800894a <USB_EPStartXfer+0x91a>
 800891a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d004      	beq.n	800893a <USB_EPStartXfer+0x90a>
 8008930:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008934:	3301      	adds	r3, #1
 8008936:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800893a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800893e:	b29b      	uxth	r3, r3
 8008940:	029b      	lsls	r3, r3, #10
 8008942:	b29a      	uxth	r2, r3
 8008944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008946:	801a      	strh	r2, [r3, #0]
 8008948:	e041      	b.n	80089ce <USB_EPStartXfer+0x99e>
 800894a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894e:	095b      	lsrs	r3, r3, #5
 8008950:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008958:	f003 031f 	and.w	r3, r3, #31
 800895c:	2b00      	cmp	r3, #0
 800895e:	d104      	bne.n	800896a <USB_EPStartXfer+0x93a>
 8008960:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008964:	3b01      	subs	r3, #1
 8008966:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800896a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800896e:	b29b      	uxth	r3, r3
 8008970:	029b      	lsls	r3, r3, #10
 8008972:	b29b      	uxth	r3, r3
 8008974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800897c:	b29a      	uxth	r2, r3
 800897e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	e024      	b.n	80089ce <USB_EPStartXfer+0x99e>
 8008984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d11c      	bne.n	80089ce <USB_EPStartXfer+0x99e>
 8008994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008998:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a8:	4413      	add	r3, r2
 80089aa:	643b      	str	r3, [r7, #64]	; 0x40
 80089ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	011a      	lsls	r2, r3, #4
 80089ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089bc:	4413      	add	r3, r2
 80089be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	895b      	ldrh	r3, [r3, #10]
 80089da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6959      	ldr	r1, [r3, #20]
 80089ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80089f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80089fc:	6800      	ldr	r0, [r0, #0]
 80089fe:	f001 fa8d 	bl	8009f1c <USB_WritePMA>
 8008a02:	f000 bc5a 	b.w	80092ba <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a3c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	441a      	add	r2, r3
 8008a5a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a92:	4413      	add	r3, r2
 8008a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	011a      	lsls	r2, r3, #4
 8008aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8008aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	891b      	ldrh	r3, [r3, #8]
 8008ac4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6959      	ldr	r1, [r3, #20]
 8008ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ade:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008ae2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008ae6:	6800      	ldr	r0, [r0, #0]
 8008ae8:	f001 fa18 	bl	8009f1c <USB_WritePMA>
 8008aec:	e3e5      	b.n	80092ba <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b14:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	441a      	add	r2, r3
 8008b32:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b3e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6a1a      	ldr	r2, [r3, #32]
 8008b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b5a:	1ad2      	subs	r2, r2, r3
 8008b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 81bc 	beq.w	8008f08 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	785b      	ldrb	r3, [r3, #1]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d16d      	bne.n	8008c8a <USB_EPStartXfer+0xc5a>
 8008bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	461a      	mov	r2, r3
 8008bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bce:	4413      	add	r3, r2
 8008bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	011a      	lsls	r2, r3, #4
 8008be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008be2:	4413      	add	r3, r2
 8008be4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008be8:	677b      	str	r3, [r7, #116]	; 0x74
 8008bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d112      	bne.n	8008c18 <USB_EPStartXfer+0xbe8>
 8008bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c14:	801a      	strh	r2, [r3, #0]
 8008c16:	e060      	b.n	8008cda <USB_EPStartXfer+0xcaa>
 8008c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c1c:	2b3e      	cmp	r3, #62	; 0x3e
 8008c1e:	d817      	bhi.n	8008c50 <USB_EPStartXfer+0xc20>
 8008c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c24:	085b      	lsrs	r3, r3, #1
 8008c26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <USB_EPStartXfer+0xc10>
 8008c36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	029b      	lsls	r3, r3, #10
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c4c:	801a      	strh	r2, [r3, #0]
 8008c4e:	e044      	b.n	8008cda <USB_EPStartXfer+0xcaa>
 8008c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c54:	095b      	lsrs	r3, r3, #5
 8008c56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c5e:	f003 031f 	and.w	r3, r3, #31
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d104      	bne.n	8008c70 <USB_EPStartXfer+0xc40>
 8008c66:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c70:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	029b      	lsls	r3, r3, #10
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c86:	801a      	strh	r2, [r3, #0]
 8008c88:	e027      	b.n	8008cda <USB_EPStartXfer+0xcaa>
 8008c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d11f      	bne.n	8008cda <USB_EPStartXfer+0xcaa>
 8008c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	461a      	mov	r2, r3
 8008cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	011a      	lsls	r2, r3, #4
 8008cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cc8:	4413      	add	r3, r2
 8008cca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	895b      	ldrh	r3, [r3, #10]
 8008ce6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6959      	ldr	r1, [r3, #20]
 8008cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008d00:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008d04:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008d08:	6800      	ldr	r0, [r0, #0]
 8008d0a:	f001 f907 	bl	8009f1c <USB_WritePMA>
          ep->xfer_buff += len;
 8008d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695a      	ldr	r2, [r3, #20]
 8008d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1e:	441a      	add	r2, r3
 8008d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6a1a      	ldr	r2, [r3, #32]
 8008d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d90f      	bls.n	8008d68 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6a1a      	ldr	r2, [r3, #32]
 8008d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d58:	1ad2      	subs	r2, r2, r3
 8008d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	621a      	str	r2, [r3, #32]
 8008d66:	e00e      	b.n	8008d86 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2200      	movs	r2, #0
 8008d84:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 8295 	beq.w	80092ba <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	785b      	ldrb	r3, [r3, #1]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d16d      	bne.n	8008e7c <USB_EPStartXfer+0xe4c>
 8008da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dc0:	4413      	add	r3, r2
 8008dc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	011a      	lsls	r2, r3, #4
 8008dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dda:	667b      	str	r3, [r7, #100]	; 0x64
 8008ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d112      	bne.n	8008e0a <USB_EPStartXfer+0xdda>
 8008de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e06:	801a      	strh	r2, [r3, #0]
 8008e08:	e063      	b.n	8008ed2 <USB_EPStartXfer+0xea2>
 8008e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8008e10:	d817      	bhi.n	8008e42 <USB_EPStartXfer+0xe12>
 8008e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e16:	085b      	lsrs	r3, r3, #1
 8008e18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <USB_EPStartXfer+0xe02>
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	029b      	lsls	r3, r3, #10
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e3e:	801a      	strh	r2, [r3, #0]
 8008e40:	e047      	b.n	8008ed2 <USB_EPStartXfer+0xea2>
 8008e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e46:	095b      	lsrs	r3, r3, #5
 8008e48:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e50:	f003 031f 	and.w	r3, r3, #31
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d104      	bne.n	8008e62 <USB_EPStartXfer+0xe32>
 8008e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	029b      	lsls	r3, r3, #10
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e78:	801a      	strh	r2, [r3, #0]
 8008e7a:	e02a      	b.n	8008ed2 <USB_EPStartXfer+0xea2>
 8008e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	785b      	ldrb	r3, [r3, #1]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d122      	bne.n	8008ed2 <USB_EPStartXfer+0xea2>
 8008e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	673b      	str	r3, [r7, #112]	; 0x70
 8008e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008eac:	4413      	add	r3, r2
 8008eae:	673b      	str	r3, [r7, #112]	; 0x70
 8008eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	011a      	lsls	r2, r3, #4
 8008ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	891b      	ldrh	r3, [r3, #8]
 8008ede:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6959      	ldr	r1, [r3, #20]
 8008eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ef8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008efc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008f00:	6800      	ldr	r0, [r0, #0]
 8008f02:	f001 f80b 	bl	8009f1c <USB_WritePMA>
 8008f06:	e1d8      	b.n	80092ba <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	785b      	ldrb	r3, [r3, #1]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d178      	bne.n	800900a <USB_EPStartXfer+0xfda>
 8008f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	461a      	mov	r2, r3
 8008f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	011a      	lsls	r2, r3, #4
 8008f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f54:	4413      	add	r3, r2
 8008f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d116      	bne.n	8008f94 <USB_EPStartXfer+0xf64>
 8008f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f78:	801a      	strh	r2, [r3, #0]
 8008f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f90:	801a      	strh	r2, [r3, #0]
 8008f92:	e06b      	b.n	800906c <USB_EPStartXfer+0x103c>
 8008f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f98:	2b3e      	cmp	r3, #62	; 0x3e
 8008f9a:	d818      	bhi.n	8008fce <USB_EPStartXfer+0xf9e>
 8008f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa0:	085b      	lsrs	r3, r3, #1
 8008fa2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d004      	beq.n	8008fbc <USB_EPStartXfer+0xf8c>
 8008fb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	029b      	lsls	r3, r3, #10
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fca:	801a      	strh	r2, [r3, #0]
 8008fcc:	e04e      	b.n	800906c <USB_EPStartXfer+0x103c>
 8008fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd2:	095b      	lsrs	r3, r3, #5
 8008fd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fdc:	f003 031f 	and.w	r3, r3, #31
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <USB_EPStartXfer+0xfbe>
 8008fe4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	029b      	lsls	r3, r3, #10
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009000:	b29a      	uxth	r2, r3
 8009002:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009006:	801a      	strh	r2, [r3, #0]
 8009008:	e030      	b.n	800906c <USB_EPStartXfer+0x103c>
 800900a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800900e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	785b      	ldrb	r3, [r3, #1]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d128      	bne.n	800906c <USB_EPStartXfer+0x103c>
 800901a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800901e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800902c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009036:	b29b      	uxth	r3, r3
 8009038:	461a      	mov	r2, r3
 800903a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800903e:	4413      	add	r3, r2
 8009040:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	011a      	lsls	r2, r3, #4
 8009052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009056:	4413      	add	r3, r2
 8009058:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800905c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009064:	b29a      	uxth	r2, r3
 8009066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800906a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800906c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	891b      	ldrh	r3, [r3, #8]
 8009078:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800907c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6959      	ldr	r1, [r3, #20]
 8009088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908c:	b29b      	uxth	r3, r3
 800908e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009092:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009096:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800909a:	6800      	ldr	r0, [r0, #0]
 800909c:	f000 ff3e 	bl	8009f1c <USB_WritePMA>
          ep->xfer_buff += len;
 80090a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	695a      	ldr	r2, [r3, #20]
 80090ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b0:	441a      	add	r2, r3
 80090b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80090be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6a1a      	ldr	r2, [r3, #32]
 80090ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d90f      	bls.n	80090fa <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80090da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6a1a      	ldr	r2, [r3, #32]
 80090e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ea:	1ad2      	subs	r2, r2, r3
 80090ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	621a      	str	r2, [r3, #32]
 80090f8:	e00e      	b.n	8009118 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80090fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800910a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800910e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2200      	movs	r2, #0
 8009116:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 80cc 	beq.w	80092ba <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009126:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	785b      	ldrb	r3, [r3, #1]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d178      	bne.n	8009232 <USB_EPStartXfer+0x1202>
 8009140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009144:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800914e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800915c:	b29b      	uxth	r3, r3
 800915e:	461a      	mov	r2, r3
 8009160:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009164:	4413      	add	r3, r2
 8009166:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800916a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800916e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	011a      	lsls	r2, r3, #4
 8009178:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800917c:	4413      	add	r3, r2
 800917e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800918a:	2b00      	cmp	r3, #0
 800918c:	d116      	bne.n	80091bc <USB_EPStartXfer+0x118c>
 800918e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800919a:	b29a      	uxth	r2, r3
 800919c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091a0:	801a      	strh	r2, [r3, #0]
 80091a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091b8:	801a      	strh	r2, [r3, #0]
 80091ba:	e064      	b.n	8009286 <USB_EPStartXfer+0x1256>
 80091bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091c0:	2b3e      	cmp	r3, #62	; 0x3e
 80091c2:	d818      	bhi.n	80091f6 <USB_EPStartXfer+0x11c6>
 80091c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091c8:	085b      	lsrs	r3, r3, #1
 80091ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d004      	beq.n	80091e4 <USB_EPStartXfer+0x11b4>
 80091da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091de:	3301      	adds	r3, #1
 80091e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	029b      	lsls	r3, r3, #10
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091f2:	801a      	strh	r2, [r3, #0]
 80091f4:	e047      	b.n	8009286 <USB_EPStartXfer+0x1256>
 80091f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091fa:	095b      	lsrs	r3, r3, #5
 80091fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009204:	f003 031f 	and.w	r3, r3, #31
 8009208:	2b00      	cmp	r3, #0
 800920a:	d104      	bne.n	8009216 <USB_EPStartXfer+0x11e6>
 800920c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009210:	3b01      	subs	r3, #1
 8009212:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800921a:	b29b      	uxth	r3, r3
 800921c:	029b      	lsls	r3, r3, #10
 800921e:	b29b      	uxth	r3, r3
 8009220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009228:	b29a      	uxth	r2, r3
 800922a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	e029      	b.n	8009286 <USB_EPStartXfer+0x1256>
 8009232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	785b      	ldrb	r3, [r3, #1]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d121      	bne.n	8009286 <USB_EPStartXfer+0x1256>
 8009242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009246:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009250:	b29b      	uxth	r3, r3
 8009252:	461a      	mov	r2, r3
 8009254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009258:	4413      	add	r3, r2
 800925a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800925e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	011a      	lsls	r2, r3, #4
 800926c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009270:	4413      	add	r3, r2
 8009272:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800927a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800927e:	b29a      	uxth	r2, r3
 8009280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009284:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	895b      	ldrh	r3, [r3, #10]
 8009292:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800929a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6959      	ldr	r1, [r3, #20]
 80092a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80092ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80092b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80092b4:	6800      	ldr	r0, [r0, #0]
 80092b6:	f000 fe31 	bl	8009f1c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80092ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092dc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80092e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e8:	8013      	strh	r3, [r2, #0]
 80092ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ee:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80092f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092f6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80092fa:	8812      	ldrh	r2, [r2, #0]
 80092fc:	f082 0210 	eor.w	r2, r2, #16
 8009300:	801a      	strh	r2, [r3, #0]
 8009302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009306:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800930a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800930e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009312:	8812      	ldrh	r2, [r2, #0]
 8009314:	f082 0220 	eor.w	r2, r2, #32
 8009318:	801a      	strh	r2, [r3, #0]
 800931a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	441a      	add	r2, r3
 8009334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009338:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800934a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800934e:	b29b      	uxth	r3, r3
 8009350:	8013      	strh	r3, [r2, #0]
 8009352:	f000 bc9f 	b.w	8009c94 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800935a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	7b1b      	ldrb	r3, [r3, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f040 80ae 	bne.w	80094c4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800936c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	699a      	ldr	r2, [r3, #24]
 8009374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	429a      	cmp	r2, r3
 8009382:	d917      	bls.n	80093b4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	699a      	ldr	r2, [r3, #24]
 80093a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a4:	1ad2      	subs	r2, r2, r3
 80093a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	619a      	str	r2, [r3, #24]
 80093b2:	e00e      	b.n	80093d2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80093b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80093c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2200      	movs	r2, #0
 80093d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80093d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	461a      	mov	r2, r3
 80093f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093f6:	4413      	add	r3, r2
 80093f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	011a      	lsls	r2, r3, #4
 800940a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800940e:	4413      	add	r3, r2
 8009410:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800941c:	2b00      	cmp	r3, #0
 800941e:	d116      	bne.n	800944e <USB_EPStartXfer+0x141e>
 8009420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800942c:	b29a      	uxth	r2, r3
 800942e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009432:	801a      	strh	r2, [r3, #0]
 8009434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	b29b      	uxth	r3, r3
 800943c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009444:	b29a      	uxth	r2, r3
 8009446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800944a:	801a      	strh	r2, [r3, #0]
 800944c:	e3e8      	b.n	8009c20 <USB_EPStartXfer+0x1bf0>
 800944e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009452:	2b3e      	cmp	r3, #62	; 0x3e
 8009454:	d818      	bhi.n	8009488 <USB_EPStartXfer+0x1458>
 8009456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800945a:	085b      	lsrs	r3, r3, #1
 800945c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009464:	f003 0301 	and.w	r3, r3, #1
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <USB_EPStartXfer+0x1446>
 800946c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009470:	3301      	adds	r3, #1
 8009472:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009476:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800947a:	b29b      	uxth	r3, r3
 800947c:	029b      	lsls	r3, r3, #10
 800947e:	b29a      	uxth	r2, r3
 8009480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009484:	801a      	strh	r2, [r3, #0]
 8009486:	e3cb      	b.n	8009c20 <USB_EPStartXfer+0x1bf0>
 8009488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009496:	f003 031f 	and.w	r3, r3, #31
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <USB_EPStartXfer+0x1478>
 800949e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094a2:	3b01      	subs	r3, #1
 80094a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80094a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	029b      	lsls	r3, r3, #10
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094c0:	801a      	strh	r2, [r3, #0]
 80094c2:	e3ad      	b.n	8009c20 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80094c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	78db      	ldrb	r3, [r3, #3]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	f040 8200 	bne.w	80098d6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80094d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	785b      	ldrb	r3, [r3, #1]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f040 8091 	bne.w	800960a <USB_EPStartXfer+0x15da>
 80094e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009504:	b29b      	uxth	r3, r3
 8009506:	461a      	mov	r2, r3
 8009508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800950c:	4413      	add	r3, r2
 800950e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	011a      	lsls	r2, r3, #4
 8009520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009524:	4413      	add	r3, r2
 8009526:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800952a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800952e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d116      	bne.n	800956c <USB_EPStartXfer+0x153c>
 800953e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	b29b      	uxth	r3, r3
 8009546:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800954a:	b29a      	uxth	r2, r3
 800954c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009550:	801a      	strh	r2, [r3, #0]
 8009552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
 800955a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800955e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009562:	b29a      	uxth	r2, r3
 8009564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009568:	801a      	strh	r2, [r3, #0]
 800956a:	e083      	b.n	8009674 <USB_EPStartXfer+0x1644>
 800956c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009570:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	2b3e      	cmp	r3, #62	; 0x3e
 800957a:	d820      	bhi.n	80095be <USB_EPStartXfer+0x158e>
 800957c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	085b      	lsrs	r3, r3, #1
 800958a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800958e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d004      	beq.n	80095ac <USB_EPStartXfer+0x157c>
 80095a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a6:	3301      	adds	r3, #1
 80095a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	029b      	lsls	r3, r3, #10
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095ba:	801a      	strh	r2, [r3, #0]
 80095bc:	e05a      	b.n	8009674 <USB_EPStartXfer+0x1644>
 80095be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	095b      	lsrs	r3, r3, #5
 80095cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	f003 031f 	and.w	r3, r3, #31
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d104      	bne.n	80095ee <USB_EPStartXfer+0x15be>
 80095e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e8:	3b01      	subs	r3, #1
 80095ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	029b      	lsls	r3, r3, #10
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009600:	b29a      	uxth	r2, r3
 8009602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009606:	801a      	strh	r2, [r3, #0]
 8009608:	e034      	b.n	8009674 <USB_EPStartXfer+0x1644>
 800960a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800960e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d12c      	bne.n	8009674 <USB_EPStartXfer+0x1644>
 800961a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800962c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009636:	b29b      	uxth	r3, r3
 8009638:	461a      	mov	r2, r3
 800963a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800963e:	4413      	add	r3, r2
 8009640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	011a      	lsls	r2, r3, #4
 8009652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009656:	4413      	add	r3, r2
 8009658:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800965c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	b29a      	uxth	r2, r3
 800966e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009672:	801a      	strh	r2, [r3, #0]
 8009674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009678:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	785b      	ldrb	r3, [r3, #1]
 800968e:	2b00      	cmp	r3, #0
 8009690:	f040 8091 	bne.w	80097b6 <USB_EPStartXfer+0x1786>
 8009694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	461a      	mov	r2, r3
 80096b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096b8:	4413      	add	r3, r2
 80096ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	011a      	lsls	r2, r3, #4
 80096cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096d0:	4413      	add	r3, r2
 80096d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d116      	bne.n	8009718 <USB_EPStartXfer+0x16e8>
 80096ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096fc:	801a      	strh	r2, [r3, #0]
 80096fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	b29b      	uxth	r3, r3
 8009706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800970a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800970e:	b29a      	uxth	r2, r3
 8009710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009714:	801a      	strh	r2, [r3, #0]
 8009716:	e07c      	b.n	8009812 <USB_EPStartXfer+0x17e2>
 8009718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800971c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	2b3e      	cmp	r3, #62	; 0x3e
 8009726:	d820      	bhi.n	800976a <USB_EPStartXfer+0x173a>
 8009728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800972c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	085b      	lsrs	r3, r3, #1
 8009736:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800973a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800973e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	d004      	beq.n	8009758 <USB_EPStartXfer+0x1728>
 800974e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009752:	3301      	adds	r3, #1
 8009754:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009758:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800975c:	b29b      	uxth	r3, r3
 800975e:	029b      	lsls	r3, r3, #10
 8009760:	b29a      	uxth	r2, r3
 8009762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009766:	801a      	strh	r2, [r3, #0]
 8009768:	e053      	b.n	8009812 <USB_EPStartXfer+0x17e2>
 800976a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800976e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	095b      	lsrs	r3, r3, #5
 8009778:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800977c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	f003 031f 	and.w	r3, r3, #31
 800978c:	2b00      	cmp	r3, #0
 800978e:	d104      	bne.n	800979a <USB_EPStartXfer+0x176a>
 8009790:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009794:	3b01      	subs	r3, #1
 8009796:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800979a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800979e:	b29b      	uxth	r3, r3
 80097a0:	029b      	lsls	r3, r3, #10
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097b2:	801a      	strh	r2, [r3, #0]
 80097b4:	e02d      	b.n	8009812 <USB_EPStartXfer+0x17e2>
 80097b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	785b      	ldrb	r3, [r3, #1]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d125      	bne.n	8009812 <USB_EPStartXfer+0x17e2>
 80097c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	461a      	mov	r2, r3
 80097d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097dc:	4413      	add	r3, r2
 80097de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	011a      	lsls	r2, r3, #4
 80097f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097f4:	4413      	add	r3, r2
 80097f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	b29a      	uxth	r2, r3
 800980c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009810:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	69db      	ldr	r3, [r3, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 81fe 	beq.w	8009c20 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009844:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <USB_EPStartXfer+0x182c>
 8009850:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10d      	bne.n	8009878 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800985c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009864:	2b00      	cmp	r3, #0
 8009866:	f040 81db 	bne.w	8009c20 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800986a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800986e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009872:	2b00      	cmp	r3, #0
 8009874:	f040 81d4 	bne.w	8009c20 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800987c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	b29b      	uxth	r3, r3
 8009896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800989a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80098a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	441a      	add	r2, r3
 80098bc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80098c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	8013      	strh	r3, [r2, #0]
 80098d4:	e1a4      	b.n	8009c20 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80098d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	78db      	ldrb	r3, [r3, #3]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	f040 819a 	bne.w	8009c1c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80098e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	429a      	cmp	r2, r3
 8009902:	d917      	bls.n	8009934 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8009904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699a      	ldr	r2, [r3, #24]
 8009920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009924:	1ad2      	subs	r2, r2, r3
 8009926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800992a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	619a      	str	r2, [r3, #24]
 8009932:	e00e      	b.n	8009952 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8009934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2200      	movs	r2, #0
 8009950:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	785b      	ldrb	r3, [r3, #1]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d178      	bne.n	8009a54 <USB_EPStartXfer+0x1a24>
 8009962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009966:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009974:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800997e:	b29b      	uxth	r3, r3
 8009980:	461a      	mov	r2, r3
 8009982:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009986:	4413      	add	r3, r2
 8009988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800998c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	011a      	lsls	r2, r3, #4
 800999a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800999e:	4413      	add	r3, r2
 80099a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80099a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d116      	bne.n	80099de <USB_EPStartXfer+0x19ae>
 80099b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099bc:	b29a      	uxth	r2, r3
 80099be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099c2:	801a      	strh	r2, [r3, #0]
 80099c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099c8:	881b      	ldrh	r3, [r3, #0]
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099da:	801a      	strh	r2, [r3, #0]
 80099dc:	e06b      	b.n	8009ab6 <USB_EPStartXfer+0x1a86>
 80099de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e2:	2b3e      	cmp	r3, #62	; 0x3e
 80099e4:	d818      	bhi.n	8009a18 <USB_EPStartXfer+0x19e8>
 80099e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ea:	085b      	lsrs	r3, r3, #1
 80099ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d004      	beq.n	8009a06 <USB_EPStartXfer+0x19d6>
 80099fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a00:	3301      	adds	r3, #1
 8009a02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	029b      	lsls	r3, r3, #10
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a14:	801a      	strh	r2, [r3, #0]
 8009a16:	e04e      	b.n	8009ab6 <USB_EPStartXfer+0x1a86>
 8009a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a1c:	095b      	lsrs	r3, r3, #5
 8009a1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a26:	f003 031f 	and.w	r3, r3, #31
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d104      	bne.n	8009a38 <USB_EPStartXfer+0x1a08>
 8009a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a32:	3b01      	subs	r3, #1
 8009a34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	029b      	lsls	r3, r3, #10
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a50:	801a      	strh	r2, [r3, #0]
 8009a52:	e030      	b.n	8009ab6 <USB_EPStartXfer+0x1a86>
 8009a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	785b      	ldrb	r3, [r3, #1]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d128      	bne.n	8009ab6 <USB_EPStartXfer+0x1a86>
 8009a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	461a      	mov	r2, r3
 8009a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a88:	4413      	add	r3, r2
 8009a8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	011a      	lsls	r2, r3, #4
 8009a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009aa6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ab4:	801a      	strh	r2, [r3, #0]
 8009ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	785b      	ldrb	r3, [r3, #1]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d178      	bne.n	8009bc6 <USB_EPStartXfer+0x1b96>
 8009ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009af8:	4413      	add	r3, r2
 8009afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	011a      	lsls	r2, r3, #4
 8009b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b10:	4413      	add	r3, r2
 8009b12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d116      	bne.n	8009b50 <USB_EPStartXfer+0x1b20>
 8009b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b34:	801a      	strh	r2, [r3, #0]
 8009b36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b4c:	801a      	strh	r2, [r3, #0]
 8009b4e:	e067      	b.n	8009c20 <USB_EPStartXfer+0x1bf0>
 8009b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b54:	2b3e      	cmp	r3, #62	; 0x3e
 8009b56:	d818      	bhi.n	8009b8a <USB_EPStartXfer+0x1b5a>
 8009b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b5c:	085b      	lsrs	r3, r3, #1
 8009b5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d004      	beq.n	8009b78 <USB_EPStartXfer+0x1b48>
 8009b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b72:	3301      	adds	r3, #1
 8009b74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	029b      	lsls	r3, r3, #10
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b86:	801a      	strh	r2, [r3, #0]
 8009b88:	e04a      	b.n	8009c20 <USB_EPStartXfer+0x1bf0>
 8009b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b8e:	095b      	lsrs	r3, r3, #5
 8009b90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b98:	f003 031f 	and.w	r3, r3, #31
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d104      	bne.n	8009baa <USB_EPStartXfer+0x1b7a>
 8009ba0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	029b      	lsls	r3, r3, #10
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bc2:	801a      	strh	r2, [r3, #0]
 8009bc4:	e02c      	b.n	8009c20 <USB_EPStartXfer+0x1bf0>
 8009bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	785b      	ldrb	r3, [r3, #1]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d124      	bne.n	8009c20 <USB_EPStartXfer+0x1bf0>
 8009bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	461a      	mov	r2, r3
 8009be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bec:	4413      	add	r3, r2
 8009bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	011a      	lsls	r2, r3, #4
 8009c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c04:	4413      	add	r3, r2
 8009c06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c18:	801a      	strh	r2, [r3, #0]
 8009c1a:	e001      	b.n	8009c20 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e03a      	b.n	8009c96 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c46:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009c4a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c52:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009c56:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c5e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	441a      	add	r2, r3
 8009c7c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	785b      	ldrb	r3, [r3, #1]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d020      	beq.n	8009cf4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cc8:	81bb      	strh	r3, [r7, #12]
 8009cca:	89bb      	ldrh	r3, [r7, #12]
 8009ccc:	f083 0310 	eor.w	r3, r3, #16
 8009cd0:	81bb      	strh	r3, [r7, #12]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	441a      	add	r2, r3
 8009cdc:	89bb      	ldrh	r3, [r7, #12]
 8009cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	8013      	strh	r3, [r2, #0]
 8009cf2:	e01f      	b.n	8009d34 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0a:	81fb      	strh	r3, [r7, #14]
 8009d0c:	89fb      	ldrh	r3, [r7, #14]
 8009d0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d12:	81fb      	strh	r3, [r7, #14]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	441a      	add	r2, r3
 8009d1e:	89fb      	ldrh	r3, [r7, #14]
 8009d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bc80      	pop	{r7}
 8009d3e:	4770      	bx	lr

08009d40 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b087      	sub	sp, #28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	7b1b      	ldrb	r3, [r3, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f040 809d 	bne.w	8009e8e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	785b      	ldrb	r3, [r3, #1]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d04c      	beq.n	8009df6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	823b      	strh	r3, [r7, #16]
 8009d6a:	8a3b      	ldrh	r3, [r7, #16]
 8009d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d01b      	beq.n	8009dac <USB_EPClearStall+0x6c>
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8a:	81fb      	strh	r3, [r7, #14]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	441a      	add	r2, r3
 8009d96:	89fb      	ldrh	r3, [r7, #14]
 8009d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009da4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	78db      	ldrb	r3, [r3, #3]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d06c      	beq.n	8009e8e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dca:	81bb      	strh	r3, [r7, #12]
 8009dcc:	89bb      	ldrh	r3, [r7, #12]
 8009dce:	f083 0320 	eor.w	r3, r3, #32
 8009dd2:	81bb      	strh	r3, [r7, #12]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	441a      	add	r2, r3
 8009dde:	89bb      	ldrh	r3, [r7, #12]
 8009de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	8013      	strh	r3, [r2, #0]
 8009df4:	e04b      	b.n	8009e8e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	82fb      	strh	r3, [r7, #22]
 8009e04:	8afb      	ldrh	r3, [r7, #22]
 8009e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d01b      	beq.n	8009e46 <USB_EPClearStall+0x106>
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e24:	82bb      	strh	r3, [r7, #20]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	441a      	add	r2, r3
 8009e30:	8abb      	ldrh	r3, [r7, #20]
 8009e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5c:	827b      	strh	r3, [r7, #18]
 8009e5e:	8a7b      	ldrh	r3, [r7, #18]
 8009e60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e64:	827b      	strh	r3, [r7, #18]
 8009e66:	8a7b      	ldrh	r3, [r7, #18]
 8009e68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e6c:	827b      	strh	r3, [r7, #18]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	441a      	add	r2, r3
 8009e78:	8a7b      	ldrh	r3, [r7, #18]
 8009e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	371c      	adds	r7, #28
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bc80      	pop	{r7}
 8009e98:	4770      	bx	lr

08009e9a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d103      	bne.n	8009eb4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2280      	movs	r2, #128	; 0x80
 8009eb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bc80      	pop	{r7}
 8009ebe:	4770      	bx	lr

08009ec0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bc80      	pop	{r7}
 8009ed2:	4770      	bx	lr

08009ed4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bc80      	pop	{r7}
 8009ee6:	4770      	bx	lr

08009ee8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009efa:	68fb      	ldr	r3, [r7, #12]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bc80      	pop	{r7}
 8009f04:	4770      	bx	lr

08009f06 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bc80      	pop	{r7}
 8009f1a:	4770      	bx	lr

08009f1c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b08d      	sub	sp, #52	; 0x34
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	4611      	mov	r1, r2
 8009f28:	461a      	mov	r2, r3
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	80fb      	strh	r3, [r7, #6]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009f32:	88bb      	ldrh	r3, [r7, #4]
 8009f34:	3301      	adds	r3, #1
 8009f36:	085b      	lsrs	r3, r3, #1
 8009f38:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009f42:	88fb      	ldrh	r3, [r7, #6]
 8009f44:	005a      	lsls	r2, r3, #1
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f4e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f54:	e01e      	b.n	8009f94 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	3301      	adds	r3, #1
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	021b      	lsls	r3, r3, #8
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	3302      	adds	r3, #2
 8009f80:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	3302      	adds	r3, #2
 8009f86:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	3b01      	subs	r3, #1
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1dd      	bne.n	8009f56 <USB_WritePMA+0x3a>
  }
}
 8009f9a:	bf00      	nop
 8009f9c:	bf00      	nop
 8009f9e:	3734      	adds	r7, #52	; 0x34
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bc80      	pop	{r7}
 8009fa4:	4770      	bx	lr

08009fa6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b08b      	sub	sp, #44	; 0x2c
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	60b9      	str	r1, [r7, #8]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	80fb      	strh	r3, [r7, #6]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009fbc:	88bb      	ldrh	r3, [r7, #4]
 8009fbe:	085b      	lsrs	r3, r3, #1
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009fcc:	88fb      	ldrh	r3, [r7, #6]
 8009fce:	005a      	lsls	r2, r3, #1
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fd8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8009fde:	e01b      	b.n	800a018 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	881b      	ldrh	r3, [r3, #0]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	3302      	adds	r3, #2
 8009fec:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	0a1b      	lsrs	r3, r3, #8
 800a000:	b2da      	uxtb	r2, r3
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	3301      	adds	r3, #1
 800a00a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	3302      	adds	r3, #2
 800a010:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	3b01      	subs	r3, #1
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1e0      	bne.n	8009fe0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a01e:	88bb      	ldrh	r3, [r7, #4]
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	b29b      	uxth	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d007      	beq.n	800a03a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	b2da      	uxtb	r2, r3
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	701a      	strb	r2, [r3, #0]
  }
}
 800a03a:	bf00      	nop
 800a03c:	372c      	adds	r7, #44	; 0x2c
 800a03e:	46bd      	mov	sp, r7
 800a040:	bc80      	pop	{r7}
 800a042:	4770      	bx	lr

0800a044 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	460b      	mov	r3, r1
 800a04e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	7c1b      	ldrb	r3, [r3, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d115      	bne.n	800a088 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a05c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a060:	2202      	movs	r2, #2
 800a062:	2181      	movs	r1, #129	; 0x81
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f001 fe8c 	bl	800bd82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a070:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a074:	2202      	movs	r2, #2
 800a076:	2101      	movs	r1, #1
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f001 fe82 	bl	800bd82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a086:	e012      	b.n	800a0ae <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a088:	2340      	movs	r3, #64	; 0x40
 800a08a:	2202      	movs	r2, #2
 800a08c:	2181      	movs	r1, #129	; 0x81
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f001 fe77 	bl	800bd82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a09a:	2340      	movs	r3, #64	; 0x40
 800a09c:	2202      	movs	r2, #2
 800a09e:	2101      	movs	r1, #1
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f001 fe6e 	bl	800bd82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a0ae:	2308      	movs	r3, #8
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	2182      	movs	r1, #130	; 0x82
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 fe64 	bl	800bd82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a0c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a0c4:	f001 ff84 	bl	800bfd0 <USBD_static_malloc>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d102      	bne.n	800a0e0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	73fb      	strb	r3, [r7, #15]
 800a0de:	e026      	b.n	800a12e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	7c1b      	ldrb	r3, [r3, #16]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d109      	bne.n	800a11e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a110:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a114:	2101      	movs	r1, #1
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f001 ff24 	bl	800bf64 <USBD_LL_PrepareReceive>
 800a11c:	e007      	b.n	800a12e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a124:	2340      	movs	r3, #64	; 0x40
 800a126:	2101      	movs	r1, #1
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 ff1b 	bl	800bf64 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a148:	2181      	movs	r1, #129	; 0x81
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f001 fe3f 	bl	800bdce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a156:	2101      	movs	r1, #1
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f001 fe38 	bl	800bdce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a166:	2182      	movs	r1, #130	; 0x82
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 fe30 	bl	800bdce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00e      	beq.n	800a19c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 ff2a 	bl	800bfe8 <USBD_static_free>
    pdev->pClassData = NULL;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b086      	sub	sp, #24
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d039      	beq.n	800a244 <USBD_CDC_Setup+0x9e>
 800a1d0:	2b20      	cmp	r3, #32
 800a1d2:	d17f      	bne.n	800a2d4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	88db      	ldrh	r3, [r3, #6]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d029      	beq.n	800a230 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	b25b      	sxtb	r3, r3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	da11      	bge.n	800a20a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a1f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	88d2      	ldrh	r2, [r2, #6]
 800a1f8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a1fa:	6939      	ldr	r1, [r7, #16]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	88db      	ldrh	r3, [r3, #6]
 800a200:	461a      	mov	r2, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f001 fa09 	bl	800b61a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a208:	e06b      	b.n	800a2e2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	785a      	ldrb	r2, [r3, #1]
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	88db      	ldrh	r3, [r3, #6]
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a220:	6939      	ldr	r1, [r7, #16]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	88db      	ldrh	r3, [r3, #6]
 800a226:	461a      	mov	r2, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 fa24 	bl	800b676 <USBD_CtlPrepareRx>
      break;
 800a22e:	e058      	b.n	800a2e2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	7850      	ldrb	r0, [r2, #1]
 800a23c:	2200      	movs	r2, #0
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	4798      	blx	r3
      break;
 800a242:	e04e      	b.n	800a2e2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	2b0b      	cmp	r3, #11
 800a24a:	d02e      	beq.n	800a2aa <USBD_CDC_Setup+0x104>
 800a24c:	2b0b      	cmp	r3, #11
 800a24e:	dc38      	bgt.n	800a2c2 <USBD_CDC_Setup+0x11c>
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <USBD_CDC_Setup+0xb4>
 800a254:	2b0a      	cmp	r3, #10
 800a256:	d014      	beq.n	800a282 <USBD_CDC_Setup+0xdc>
 800a258:	e033      	b.n	800a2c2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a260:	2b03      	cmp	r3, #3
 800a262:	d107      	bne.n	800a274 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a264:	f107 030c 	add.w	r3, r7, #12
 800a268:	2202      	movs	r2, #2
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 f9d4 	bl	800b61a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a272:	e02e      	b.n	800a2d2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f001 f965 	bl	800b546 <USBD_CtlError>
            ret = USBD_FAIL;
 800a27c:	2302      	movs	r3, #2
 800a27e:	75fb      	strb	r3, [r7, #23]
          break;
 800a280:	e027      	b.n	800a2d2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d107      	bne.n	800a29c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a28c:	f107 030f 	add.w	r3, r7, #15
 800a290:	2201      	movs	r2, #1
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f001 f9c0 	bl	800b61a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a29a:	e01a      	b.n	800a2d2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f001 f951 	bl	800b546 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	75fb      	strb	r3, [r7, #23]
          break;
 800a2a8:	e013      	b.n	800a2d2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d00d      	beq.n	800a2d0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 f945 	bl	800b546 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2bc:	2302      	movs	r3, #2
 800a2be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a2c0:	e006      	b.n	800a2d0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f001 f93e 	bl	800b546 <USBD_CtlError>
          ret = USBD_FAIL;
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ce:	e000      	b.n	800a2d2 <USBD_CDC_Setup+0x12c>
          break;
 800a2d0:	bf00      	nop
      }
      break;
 800a2d2:	e006      	b.n	800a2e2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f001 f935 	bl	800b546 <USBD_CtlError>
      ret = USBD_FAIL;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	75fb      	strb	r3, [r7, #23]
      break;
 800a2e0:	bf00      	nop
  }

  return ret;
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a306:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d03a      	beq.n	800a388 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a312:	78fa      	ldrb	r2, [r7, #3]
 800a314:	6879      	ldr	r1, [r7, #4]
 800a316:	4613      	mov	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	440b      	add	r3, r1
 800a320:	331c      	adds	r3, #28
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d029      	beq.n	800a37c <USBD_CDC_DataIn+0x90>
 800a328:	78fa      	ldrb	r2, [r7, #3]
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	4613      	mov	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	331c      	adds	r3, #28
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	78f9      	ldrb	r1, [r7, #3]
 800a33c:	68b8      	ldr	r0, [r7, #8]
 800a33e:	460b      	mov	r3, r1
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	440b      	add	r3, r1
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	4403      	add	r3, r0
 800a348:	3338      	adds	r3, #56	; 0x38
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a350:	fb01 f303 	mul.w	r3, r1, r3
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d110      	bne.n	800a37c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a35a:	78fa      	ldrb	r2, [r7, #3]
 800a35c:	6879      	ldr	r1, [r7, #4]
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	440b      	add	r3, r1
 800a368:	331c      	adds	r3, #28
 800a36a:	2200      	movs	r2, #0
 800a36c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a36e:	78f9      	ldrb	r1, [r7, #3]
 800a370:	2300      	movs	r3, #0
 800a372:	2200      	movs	r2, #0
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f001 fdd2 	bl	800bf1e <USBD_LL_Transmit>
 800a37a:	e003      	b.n	800a384 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	e000      	b.n	800a38a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a388:	2302      	movs	r3, #2
  }
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	460b      	mov	r3, r1
 800a39c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a3a6:	78fb      	ldrb	r3, [r7, #3]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 fdfd 	bl	800bfaa <USBD_LL_GetRxDataSize>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00d      	beq.n	800a3de <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	4798      	blx	r3

    return USBD_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e000      	b.n	800a3e0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a3de:	2302      	movs	r3, #2
  }
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3f6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d015      	beq.n	800a42e <USBD_CDC_EP0_RxReady+0x46>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a408:	2bff      	cmp	r3, #255	; 0xff
 800a40a:	d010      	beq.n	800a42e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a41a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a422:	b292      	uxth	r2, r2
 800a424:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	22ff      	movs	r2, #255	; 0xff
 800a42a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2243      	movs	r2, #67	; 0x43
 800a444:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a446:	4b03      	ldr	r3, [pc, #12]	; (800a454 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bc80      	pop	{r7}
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	200000bc 	.word	0x200000bc

0800a458 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2243      	movs	r2, #67	; 0x43
 800a464:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a466:	4b03      	ldr	r3, [pc, #12]	; (800a474 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20000078 	.word	0x20000078

0800a478 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2243      	movs	r2, #67	; 0x43
 800a484:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a486:	4b03      	ldr	r3, [pc, #12]	; (800a494 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20000100 	.word	0x20000100

0800a498 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	220a      	movs	r2, #10
 800a4a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a4a6:	4b03      	ldr	r3, [pc, #12]	; (800a4b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bc80      	pop	{r7}
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	20000034 	.word	0x20000034

0800a4b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d005      	beq.n	800a4d8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bc80      	pop	{r7}
 800a4e2:	4770      	bx	lr

0800a4e4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a502:	88fa      	ldrh	r2, [r7, #6]
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	371c      	adds	r7, #28
 800a510:	46bd      	mov	sp, r7
 800a512:	bc80      	pop	{r7}
 800a514:	4770      	bx	lr

0800a516 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a516:	b480      	push	{r7}
 800a518:	b085      	sub	sp, #20
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a526:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	bc80      	pop	{r7}
 800a53a:	4770      	bx	lr

0800a53c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a552:	2b00      	cmp	r3, #0
 800a554:	d01c      	beq.n	800a590 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d115      	bne.n	800a58c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2201      	movs	r2, #1
 800a564:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a57e:	b29b      	uxth	r3, r3
 800a580:	2181      	movs	r1, #129	; 0x81
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f001 fccb 	bl	800bf1e <USBD_LL_Transmit>

      return USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	e002      	b.n	800a592 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e000      	b.n	800a592 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a590:	2302      	movs	r3, #2
  }
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d017      	beq.n	800a5e4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	7c1b      	ldrb	r3, [r3, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d109      	bne.n	800a5d0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 fccb 	bl	800bf64 <USBD_LL_PrepareReceive>
 800a5ce:	e007      	b.n	800a5e0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5d6:	2340      	movs	r3, #64	; 0x40
 800a5d8:	2101      	movs	r1, #1
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f001 fcc2 	bl	800bf64 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e000      	b.n	800a5e6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a5e4:	2302      	movs	r3, #2
  }
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b084      	sub	sp, #16
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a602:	2302      	movs	r3, #2
 800a604:	e01a      	b.n	800a63c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d003      	beq.n	800a618 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	79fa      	ldrb	r2, [r7, #7]
 800a632:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f001 fb2f 	bl	800bc98 <USBD_LL_Init>

  return USBD_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d006      	beq.n	800a666 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
 800a664:	e001      	b.n	800a66a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a666:	2302      	movs	r3, #2
 800a668:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	bc80      	pop	{r7}
 800a674:	4770      	bx	lr

0800a676 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b082      	sub	sp, #8
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f001 fb64 	bl	800bd4c <USBD_LL_Start>

  return USBD_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a68e:	b480      	push	{r7}
 800a690:	b083      	sub	sp, #12
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bc80      	pop	{r7}
 800a6a0:	4770      	bx	lr

0800a6a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b084      	sub	sp, #16
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00c      	beq.n	800a6d6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	78fa      	ldrb	r2, [r7, #3]
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	4798      	blx	r3
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d101      	bne.n	800a6d6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	78fa      	ldrb	r2, [r7, #3]
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	4798      	blx	r3

  return USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b082      	sub	sp, #8
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 fed8 	bl	800b4ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a72c:	461a      	mov	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a73a:	f003 031f 	and.w	r3, r3, #31
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d016      	beq.n	800a770 <USBD_LL_SetupStage+0x6a>
 800a742:	2b02      	cmp	r3, #2
 800a744:	d81c      	bhi.n	800a780 <USBD_LL_SetupStage+0x7a>
 800a746:	2b00      	cmp	r3, #0
 800a748:	d002      	beq.n	800a750 <USBD_LL_SetupStage+0x4a>
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d008      	beq.n	800a760 <USBD_LL_SetupStage+0x5a>
 800a74e:	e017      	b.n	800a780 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f9cb 	bl	800aaf4 <USBD_StdDevReq>
      break;
 800a75e:	e01a      	b.n	800a796 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fa2d 	bl	800abc8 <USBD_StdItfReq>
      break;
 800a76e:	e012      	b.n	800a796 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fa6d 	bl	800ac58 <USBD_StdEPReq>
      break;
 800a77e:	e00a      	b.n	800a796 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a786:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	4619      	mov	r1, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f001 fb3c 	bl	800be0c <USBD_LL_StallEP>
      break;
 800a794:	bf00      	nop
  }

  return USBD_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	607a      	str	r2, [r7, #4]
 800a7ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a7ae:	7afb      	ldrb	r3, [r7, #11]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d14b      	bne.n	800a84c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a7ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d134      	bne.n	800a830 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	68da      	ldr	r2, [r3, #12]
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d919      	bls.n	800a806 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	1ad2      	subs	r2, r2, r3
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	68da      	ldr	r2, [r3, #12]
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d203      	bcs.n	800a7f4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	e002      	b.n	800a7fa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f000 ff57 	bl	800b6b2 <USBD_CtlContinueRx>
 800a804:	e038      	b.n	800a878 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d105      	bne.n	800a828 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 ff54 	bl	800b6d6 <USBD_CtlSendStatus>
 800a82e:	e023      	b.n	800a878 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a836:	2b05      	cmp	r3, #5
 800a838:	d11e      	bne.n	800a878 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a842:	2100      	movs	r1, #0
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f001 fae1 	bl	800be0c <USBD_LL_StallEP>
 800a84a:	e015      	b.n	800a878 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00d      	beq.n	800a874 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a85e:	2b03      	cmp	r3, #3
 800a860:	d108      	bne.n	800a874 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	7afa      	ldrb	r2, [r7, #11]
 800a86c:	4611      	mov	r1, r2
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	4798      	blx	r3
 800a872:	e001      	b.n	800a878 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a874:	2302      	movs	r3, #2
 800a876:	e000      	b.n	800a87a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b086      	sub	sp, #24
 800a886:	af00      	add	r7, sp, #0
 800a888:	60f8      	str	r0, [r7, #12]
 800a88a:	460b      	mov	r3, r1
 800a88c:	607a      	str	r2, [r7, #4]
 800a88e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a890:	7afb      	ldrb	r3, [r7, #11]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d17f      	bne.n	800a996 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3314      	adds	r3, #20
 800a89a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d15c      	bne.n	800a960 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	68da      	ldr	r2, [r3, #12]
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d915      	bls.n	800a8de <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	68da      	ldr	r2, [r3, #12]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	1ad2      	subs	r2, r2, r3
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	6879      	ldr	r1, [r7, #4]
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 fec1 	bl	800b652 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f001 fb44 	bl	800bf64 <USBD_LL_PrepareReceive>
 800a8dc:	e04e      	b.n	800a97c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	6912      	ldr	r2, [r2, #16]
 800a8e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8ea:	fb01 f202 	mul.w	r2, r1, r2
 800a8ee:	1a9b      	subs	r3, r3, r2
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d11c      	bne.n	800a92e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d316      	bcc.n	800a92e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	689a      	ldr	r2, [r3, #8]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d20f      	bcs.n	800a92e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a90e:	2200      	movs	r2, #0
 800a910:	2100      	movs	r1, #0
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f000 fe9d 	bl	800b652 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a920:	2300      	movs	r3, #0
 800a922:	2200      	movs	r2, #0
 800a924:	2100      	movs	r1, #0
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f001 fb1c 	bl	800bf64 <USBD_LL_PrepareReceive>
 800a92c:	e026      	b.n	800a97c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a940:	2b03      	cmp	r3, #3
 800a942:	d105      	bne.n	800a950 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a950:	2180      	movs	r1, #128	; 0x80
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f001 fa5a 	bl	800be0c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 fecf 	bl	800b6fc <USBD_CtlReceiveStatus>
 800a95e:	e00d      	b.n	800a97c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a966:	2b04      	cmp	r3, #4
 800a968:	d004      	beq.n	800a974 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a970:	2b00      	cmp	r3, #0
 800a972:	d103      	bne.n	800a97c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a974:	2180      	movs	r1, #128	; 0x80
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f001 fa48 	bl	800be0c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a982:	2b01      	cmp	r3, #1
 800a984:	d11d      	bne.n	800a9c2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fe81 	bl	800a68e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a994:	e015      	b.n	800a9c2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00d      	beq.n	800a9be <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d108      	bne.n	800a9be <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	7afa      	ldrb	r2, [r7, #11]
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	4798      	blx	r3
 800a9bc:	e001      	b.n	800a9c2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a9be:	2302      	movs	r3, #2
 800a9c0:	e000      	b.n	800a9c4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9d4:	2340      	movs	r3, #64	; 0x40
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2100      	movs	r1, #0
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f001 f9d1 	bl	800bd82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2240      	movs	r2, #64	; 0x40
 800a9ec:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9f0:	2340      	movs	r3, #64	; 0x40
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2180      	movs	r1, #128	; 0x80
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f001 f9c3 	bl	800bd82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2240      	movs	r2, #64	; 0x40
 800aa06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d009      	beq.n	800aa44 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	6852      	ldr	r2, [r2, #4]
 800aa3c:	b2d2      	uxtb	r2, r2
 800aa3e:	4611      	mov	r1, r2
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	4798      	blx	r3
  }

  return USBD_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b083      	sub	sp, #12
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	460b      	mov	r3, r1
 800aa58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	78fa      	ldrb	r2, [r7, #3]
 800aa5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bc80      	pop	{r7}
 800aa6a:	4770      	bx	lr

0800aa6c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2204      	movs	r2, #4
 800aa84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bc80      	pop	{r7}
 800aa92:	4770      	bx	lr

0800aa94 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	d105      	bne.n	800aab2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bc80      	pop	{r7}
 800aabc:	4770      	bx	lr

0800aabe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d10b      	bne.n	800aae8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aad6:	69db      	ldr	r3, [r3, #28]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d005      	beq.n	800aae8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
	...

0800aaf4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab0a:	2b40      	cmp	r3, #64	; 0x40
 800ab0c:	d005      	beq.n	800ab1a <USBD_StdDevReq+0x26>
 800ab0e:	2b40      	cmp	r3, #64	; 0x40
 800ab10:	d84f      	bhi.n	800abb2 <USBD_StdDevReq+0xbe>
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d009      	beq.n	800ab2a <USBD_StdDevReq+0x36>
 800ab16:	2b20      	cmp	r3, #32
 800ab18:	d14b      	bne.n	800abb2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	4798      	blx	r3
      break;
 800ab28:	e048      	b.n	800abbc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	785b      	ldrb	r3, [r3, #1]
 800ab2e:	2b09      	cmp	r3, #9
 800ab30:	d839      	bhi.n	800aba6 <USBD_StdDevReq+0xb2>
 800ab32:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <USBD_StdDevReq+0x44>)
 800ab34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab38:	0800ab89 	.word	0x0800ab89
 800ab3c:	0800ab9d 	.word	0x0800ab9d
 800ab40:	0800aba7 	.word	0x0800aba7
 800ab44:	0800ab93 	.word	0x0800ab93
 800ab48:	0800aba7 	.word	0x0800aba7
 800ab4c:	0800ab6b 	.word	0x0800ab6b
 800ab50:	0800ab61 	.word	0x0800ab61
 800ab54:	0800aba7 	.word	0x0800aba7
 800ab58:	0800ab7f 	.word	0x0800ab7f
 800ab5c:	0800ab75 	.word	0x0800ab75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f9dc 	bl	800af20 <USBD_GetDescriptor>
          break;
 800ab68:	e022      	b.n	800abb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fb3f 	bl	800b1f0 <USBD_SetAddress>
          break;
 800ab72:	e01d      	b.n	800abb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fb7e 	bl	800b278 <USBD_SetConfig>
          break;
 800ab7c:	e018      	b.n	800abb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fc07 	bl	800b394 <USBD_GetConfig>
          break;
 800ab86:	e013      	b.n	800abb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fc37 	bl	800b3fe <USBD_GetStatus>
          break;
 800ab90:	e00e      	b.n	800abb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab92:	6839      	ldr	r1, [r7, #0]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fc65 	bl	800b464 <USBD_SetFeature>
          break;
 800ab9a:	e009      	b.n	800abb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fc74 	bl	800b48c <USBD_ClrFeature>
          break;
 800aba4:	e004      	b.n	800abb0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fccc 	bl	800b546 <USBD_CtlError>
          break;
 800abae:	bf00      	nop
      }
      break;
 800abb0:	e004      	b.n	800abbc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fcc6 	bl	800b546 <USBD_CtlError>
      break;
 800abba:	bf00      	nop
  }

  return ret;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop

0800abc8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abde:	2b40      	cmp	r3, #64	; 0x40
 800abe0:	d005      	beq.n	800abee <USBD_StdItfReq+0x26>
 800abe2:	2b40      	cmp	r3, #64	; 0x40
 800abe4:	d82e      	bhi.n	800ac44 <USBD_StdItfReq+0x7c>
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <USBD_StdItfReq+0x26>
 800abea:	2b20      	cmp	r3, #32
 800abec:	d12a      	bne.n	800ac44 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf4:	3b01      	subs	r3, #1
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d81d      	bhi.n	800ac36 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	889b      	ldrh	r3, [r3, #4]
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d813      	bhi.n	800ac2c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	4798      	blx	r3
 800ac12:	4603      	mov	r3, r0
 800ac14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	88db      	ldrh	r3, [r3, #6]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d110      	bne.n	800ac40 <USBD_StdItfReq+0x78>
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10d      	bne.n	800ac40 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fd56 	bl	800b6d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac2a:	e009      	b.n	800ac40 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fc89 	bl	800b546 <USBD_CtlError>
          break;
 800ac34:	e004      	b.n	800ac40 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fc84 	bl	800b546 <USBD_CtlError>
          break;
 800ac3e:	e000      	b.n	800ac42 <USBD_StdItfReq+0x7a>
          break;
 800ac40:	bf00      	nop
      }
      break;
 800ac42:	e004      	b.n	800ac4e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fc7d 	bl	800b546 <USBD_CtlError>
      break;
 800ac4c:	bf00      	nop
  }

  return USBD_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	889b      	ldrh	r3, [r3, #4]
 800ac6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac74:	2b40      	cmp	r3, #64	; 0x40
 800ac76:	d007      	beq.n	800ac88 <USBD_StdEPReq+0x30>
 800ac78:	2b40      	cmp	r3, #64	; 0x40
 800ac7a:	f200 8146 	bhi.w	800af0a <USBD_StdEPReq+0x2b2>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00a      	beq.n	800ac98 <USBD_StdEPReq+0x40>
 800ac82:	2b20      	cmp	r3, #32
 800ac84:	f040 8141 	bne.w	800af0a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
      break;
 800ac96:	e13d      	b.n	800af14 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aca0:	2b20      	cmp	r3, #32
 800aca2:	d10a      	bne.n	800acba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	4798      	blx	r3
 800acb2:	4603      	mov	r3, r0
 800acb4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
 800acb8:	e12d      	b.n	800af16 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	785b      	ldrb	r3, [r3, #1]
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	d007      	beq.n	800acd2 <USBD_StdEPReq+0x7a>
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	f300 811b 	bgt.w	800aefe <USBD_StdEPReq+0x2a6>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d072      	beq.n	800adb2 <USBD_StdEPReq+0x15a>
 800accc:	2b01      	cmp	r3, #1
 800acce:	d03a      	beq.n	800ad46 <USBD_StdEPReq+0xee>
 800acd0:	e115      	b.n	800aefe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d002      	beq.n	800ace2 <USBD_StdEPReq+0x8a>
 800acdc:	2b03      	cmp	r3, #3
 800acde:	d015      	beq.n	800ad0c <USBD_StdEPReq+0xb4>
 800ace0:	e02b      	b.n	800ad3a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ace2:	7bbb      	ldrb	r3, [r7, #14]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00c      	beq.n	800ad02 <USBD_StdEPReq+0xaa>
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
 800acea:	2b80      	cmp	r3, #128	; 0x80
 800acec:	d009      	beq.n	800ad02 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800acee:	7bbb      	ldrb	r3, [r7, #14]
 800acf0:	4619      	mov	r1, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f001 f88a 	bl	800be0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800acf8:	2180      	movs	r1, #128	; 0x80
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f001 f886 	bl	800be0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad00:	e020      	b.n	800ad44 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fc1e 	bl	800b546 <USBD_CtlError>
              break;
 800ad0a:	e01b      	b.n	800ad44 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	885b      	ldrh	r3, [r3, #2]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10e      	bne.n	800ad32 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00b      	beq.n	800ad32 <USBD_StdEPReq+0xda>
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	2b80      	cmp	r3, #128	; 0x80
 800ad1e:	d008      	beq.n	800ad32 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	88db      	ldrh	r3, [r3, #6]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d104      	bne.n	800ad32 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f001 f86d 	bl	800be0c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fccf 	bl	800b6d6 <USBD_CtlSendStatus>

              break;
 800ad38:	e004      	b.n	800ad44 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fc02 	bl	800b546 <USBD_CtlError>
              break;
 800ad42:	bf00      	nop
          }
          break;
 800ad44:	e0e0      	b.n	800af08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d002      	beq.n	800ad56 <USBD_StdEPReq+0xfe>
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d015      	beq.n	800ad80 <USBD_StdEPReq+0x128>
 800ad54:	e026      	b.n	800ada4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00c      	beq.n	800ad76 <USBD_StdEPReq+0x11e>
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
 800ad5e:	2b80      	cmp	r3, #128	; 0x80
 800ad60:	d009      	beq.n	800ad76 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ad62:	7bbb      	ldrb	r3, [r7, #14]
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 f850 	bl	800be0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ad6c:	2180      	movs	r1, #128	; 0x80
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f001 f84c 	bl	800be0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad74:	e01c      	b.n	800adb0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fbe4 	bl	800b546 <USBD_CtlError>
              break;
 800ad7e:	e017      	b.n	800adb0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	885b      	ldrh	r3, [r3, #2]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d112      	bne.n	800adae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d004      	beq.n	800ad9c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad92:	7bbb      	ldrb	r3, [r7, #14]
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f001 f857 	bl	800be4a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fc9a 	bl	800b6d6 <USBD_CtlSendStatus>
              }
              break;
 800ada2:	e004      	b.n	800adae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fbcd 	bl	800b546 <USBD_CtlError>
              break;
 800adac:	e000      	b.n	800adb0 <USBD_StdEPReq+0x158>
              break;
 800adae:	bf00      	nop
          }
          break;
 800adb0:	e0aa      	b.n	800af08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d002      	beq.n	800adc2 <USBD_StdEPReq+0x16a>
 800adbc:	2b03      	cmp	r3, #3
 800adbe:	d032      	beq.n	800ae26 <USBD_StdEPReq+0x1ce>
 800adc0:	e097      	b.n	800aef2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d007      	beq.n	800add8 <USBD_StdEPReq+0x180>
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	2b80      	cmp	r3, #128	; 0x80
 800adcc:	d004      	beq.n	800add8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fbb8 	bl	800b546 <USBD_CtlError>
                break;
 800add6:	e091      	b.n	800aefc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800add8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800addc:	2b00      	cmp	r3, #0
 800adde:	da0b      	bge.n	800adf8 <USBD_StdEPReq+0x1a0>
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
 800ade2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ade6:	4613      	mov	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	3310      	adds	r3, #16
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	4413      	add	r3, r2
 800adf4:	3304      	adds	r3, #4
 800adf6:	e00b      	b.n	800ae10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adf8:	7bbb      	ldrb	r3, [r7, #14]
 800adfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adfe:	4613      	mov	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	3304      	adds	r3, #4
 800ae10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2200      	movs	r2, #0
 800ae16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fbfb 	bl	800b61a <USBD_CtlSendData>
              break;
 800ae24:	e06a      	b.n	800aefc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	da11      	bge.n	800ae52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	f003 020f 	and.w	r2, r3, #15
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	4613      	mov	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	440b      	add	r3, r1
 800ae40:	3318      	adds	r3, #24
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d117      	bne.n	800ae78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fb7b 	bl	800b546 <USBD_CtlError>
                  break;
 800ae50:	e054      	b.n	800aefc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae52:	7bbb      	ldrb	r3, [r7, #14]
 800ae54:	f003 020f 	and.w	r2, r3, #15
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	440b      	add	r3, r1
 800ae64:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d104      	bne.n	800ae78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fb68 	bl	800b546 <USBD_CtlError>
                  break;
 800ae76:	e041      	b.n	800aefc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	da0b      	bge.n	800ae98 <USBD_StdEPReq+0x240>
 800ae80:	7bbb      	ldrb	r3, [r7, #14]
 800ae82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae86:	4613      	mov	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	3310      	adds	r3, #16
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	4413      	add	r3, r2
 800ae94:	3304      	adds	r3, #4
 800ae96:	e00b      	b.n	800aeb0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
 800ae9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae9e:	4613      	mov	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	4413      	add	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	4413      	add	r3, r2
 800aeae:	3304      	adds	r3, #4
 800aeb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <USBD_StdEPReq+0x266>
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	2b80      	cmp	r3, #128	; 0x80
 800aebc:	d103      	bne.n	800aec6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2200      	movs	r2, #0
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	e00e      	b.n	800aee4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 ffdc 	bl	800be88 <USBD_LL_IsStallEP>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d003      	beq.n	800aede <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	2201      	movs	r2, #1
 800aeda:	601a      	str	r2, [r3, #0]
 800aedc:	e002      	b.n	800aee4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2202      	movs	r2, #2
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fb95 	bl	800b61a <USBD_CtlSendData>
              break;
 800aef0:	e004      	b.n	800aefc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fb26 	bl	800b546 <USBD_CtlError>
              break;
 800aefa:	bf00      	nop
          }
          break;
 800aefc:	e004      	b.n	800af08 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fb20 	bl	800b546 <USBD_CtlError>
          break;
 800af06:	bf00      	nop
      }
      break;
 800af08:	e004      	b.n	800af14 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fb1a 	bl	800b546 <USBD_CtlError>
      break;
 800af12:	bf00      	nop
  }

  return ret;
 800af14:	7bfb      	ldrb	r3, [r7, #15]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af2a:	2300      	movs	r3, #0
 800af2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af32:	2300      	movs	r3, #0
 800af34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	885b      	ldrh	r3, [r3, #2]
 800af3a:	0a1b      	lsrs	r3, r3, #8
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	3b01      	subs	r3, #1
 800af40:	2b06      	cmp	r3, #6
 800af42:	f200 8128 	bhi.w	800b196 <USBD_GetDescriptor+0x276>
 800af46:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <USBD_GetDescriptor+0x2c>)
 800af48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4c:	0800af69 	.word	0x0800af69
 800af50:	0800af81 	.word	0x0800af81
 800af54:	0800afc1 	.word	0x0800afc1
 800af58:	0800b197 	.word	0x0800b197
 800af5c:	0800b197 	.word	0x0800b197
 800af60:	0800b137 	.word	0x0800b137
 800af64:	0800b163 	.word	0x0800b163
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	7c12      	ldrb	r2, [r2, #16]
 800af74:	f107 0108 	add.w	r1, r7, #8
 800af78:	4610      	mov	r0, r2
 800af7a:	4798      	blx	r3
 800af7c:	60f8      	str	r0, [r7, #12]
      break;
 800af7e:	e112      	b.n	800b1a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	7c1b      	ldrb	r3, [r3, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10d      	bne.n	800afa4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af90:	f107 0208 	add.w	r2, r7, #8
 800af94:	4610      	mov	r0, r2
 800af96:	4798      	blx	r3
 800af98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3301      	adds	r3, #1
 800af9e:	2202      	movs	r2, #2
 800afa0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800afa2:	e100      	b.n	800b1a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afac:	f107 0208 	add.w	r2, r7, #8
 800afb0:	4610      	mov	r0, r2
 800afb2:	4798      	blx	r3
 800afb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3301      	adds	r3, #1
 800afba:	2202      	movs	r2, #2
 800afbc:	701a      	strb	r2, [r3, #0]
      break;
 800afbe:	e0f2      	b.n	800b1a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	885b      	ldrh	r3, [r3, #2]
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b05      	cmp	r3, #5
 800afc8:	f200 80ac 	bhi.w	800b124 <USBD_GetDescriptor+0x204>
 800afcc:	a201      	add	r2, pc, #4	; (adr r2, 800afd4 <USBD_GetDescriptor+0xb4>)
 800afce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd2:	bf00      	nop
 800afd4:	0800afed 	.word	0x0800afed
 800afd8:	0800b021 	.word	0x0800b021
 800afdc:	0800b055 	.word	0x0800b055
 800afe0:	0800b089 	.word	0x0800b089
 800afe4:	0800b0bd 	.word	0x0800b0bd
 800afe8:	0800b0f1 	.word	0x0800b0f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00b      	beq.n	800b010 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	7c12      	ldrb	r2, [r2, #16]
 800b004:	f107 0108 	add.w	r1, r7, #8
 800b008:	4610      	mov	r0, r2
 800b00a:	4798      	blx	r3
 800b00c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b00e:	e091      	b.n	800b134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fa97 	bl	800b546 <USBD_CtlError>
            err++;
 800b018:	7afb      	ldrb	r3, [r7, #11]
 800b01a:	3301      	adds	r3, #1
 800b01c:	72fb      	strb	r3, [r7, #11]
          break;
 800b01e:	e089      	b.n	800b134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00b      	beq.n	800b044 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	7c12      	ldrb	r2, [r2, #16]
 800b038:	f107 0108 	add.w	r1, r7, #8
 800b03c:	4610      	mov	r0, r2
 800b03e:	4798      	blx	r3
 800b040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b042:	e077      	b.n	800b134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fa7d 	bl	800b546 <USBD_CtlError>
            err++;
 800b04c:	7afb      	ldrb	r3, [r7, #11]
 800b04e:	3301      	adds	r3, #1
 800b050:	72fb      	strb	r3, [r7, #11]
          break;
 800b052:	e06f      	b.n	800b134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00b      	beq.n	800b078 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	7c12      	ldrb	r2, [r2, #16]
 800b06c:	f107 0108 	add.w	r1, r7, #8
 800b070:	4610      	mov	r0, r2
 800b072:	4798      	blx	r3
 800b074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b076:	e05d      	b.n	800b134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fa63 	bl	800b546 <USBD_CtlError>
            err++;
 800b080:	7afb      	ldrb	r3, [r7, #11]
 800b082:	3301      	adds	r3, #1
 800b084:	72fb      	strb	r3, [r7, #11]
          break;
 800b086:	e055      	b.n	800b134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00b      	beq.n	800b0ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	7c12      	ldrb	r2, [r2, #16]
 800b0a0:	f107 0108 	add.w	r1, r7, #8
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	4798      	blx	r3
 800b0a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0aa:	e043      	b.n	800b134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0ac:	6839      	ldr	r1, [r7, #0]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fa49 	bl	800b546 <USBD_CtlError>
            err++;
 800b0b4:	7afb      	ldrb	r3, [r7, #11]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0ba:	e03b      	b.n	800b134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0c2:	695b      	ldr	r3, [r3, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00b      	beq.n	800b0e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	7c12      	ldrb	r2, [r2, #16]
 800b0d4:	f107 0108 	add.w	r1, r7, #8
 800b0d8:	4610      	mov	r0, r2
 800b0da:	4798      	blx	r3
 800b0dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0de:	e029      	b.n	800b134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0e0:	6839      	ldr	r1, [r7, #0]
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 fa2f 	bl	800b546 <USBD_CtlError>
            err++;
 800b0e8:	7afb      	ldrb	r3, [r7, #11]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b0ee:	e021      	b.n	800b134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00b      	beq.n	800b114 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	7c12      	ldrb	r2, [r2, #16]
 800b108:	f107 0108 	add.w	r1, r7, #8
 800b10c:	4610      	mov	r0, r2
 800b10e:	4798      	blx	r3
 800b110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b112:	e00f      	b.n	800b134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fa15 	bl	800b546 <USBD_CtlError>
            err++;
 800b11c:	7afb      	ldrb	r3, [r7, #11]
 800b11e:	3301      	adds	r3, #1
 800b120:	72fb      	strb	r3, [r7, #11]
          break;
 800b122:	e007      	b.n	800b134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fa0d 	bl	800b546 <USBD_CtlError>
          err++;
 800b12c:	7afb      	ldrb	r3, [r7, #11]
 800b12e:	3301      	adds	r3, #1
 800b130:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b132:	e038      	b.n	800b1a6 <USBD_GetDescriptor+0x286>
 800b134:	e037      	b.n	800b1a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	7c1b      	ldrb	r3, [r3, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d109      	bne.n	800b152 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b146:	f107 0208 	add.w	r2, r7, #8
 800b14a:	4610      	mov	r0, r2
 800b14c:	4798      	blx	r3
 800b14e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b150:	e029      	b.n	800b1a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f9f6 	bl	800b546 <USBD_CtlError>
        err++;
 800b15a:	7afb      	ldrb	r3, [r7, #11]
 800b15c:	3301      	adds	r3, #1
 800b15e:	72fb      	strb	r3, [r7, #11]
      break;
 800b160:	e021      	b.n	800b1a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	7c1b      	ldrb	r3, [r3, #16]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10d      	bne.n	800b186 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b172:	f107 0208 	add.w	r2, r7, #8
 800b176:	4610      	mov	r0, r2
 800b178:	4798      	blx	r3
 800b17a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3301      	adds	r3, #1
 800b180:	2207      	movs	r2, #7
 800b182:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b184:	e00f      	b.n	800b1a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f9dc 	bl	800b546 <USBD_CtlError>
        err++;
 800b18e:	7afb      	ldrb	r3, [r7, #11]
 800b190:	3301      	adds	r3, #1
 800b192:	72fb      	strb	r3, [r7, #11]
      break;
 800b194:	e007      	b.n	800b1a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f9d4 	bl	800b546 <USBD_CtlError>
      err++;
 800b19e:	7afb      	ldrb	r3, [r7, #11]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	72fb      	strb	r3, [r7, #11]
      break;
 800b1a4:	bf00      	nop
  }

  if (err != 0U)
 800b1a6:	7afb      	ldrb	r3, [r7, #11]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d11c      	bne.n	800b1e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b1ac:	893b      	ldrh	r3, [r7, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d011      	beq.n	800b1d6 <USBD_GetDescriptor+0x2b6>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	88db      	ldrh	r3, [r3, #6]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00d      	beq.n	800b1d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	88da      	ldrh	r2, [r3, #6]
 800b1be:	893b      	ldrh	r3, [r7, #8]
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	bf28      	it	cs
 800b1c4:	4613      	movcs	r3, r2
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b1ca:	893b      	ldrh	r3, [r7, #8]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	68f9      	ldr	r1, [r7, #12]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fa22 	bl	800b61a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	88db      	ldrh	r3, [r3, #6]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d104      	bne.n	800b1e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fa79 	bl	800b6d6 <USBD_CtlSendStatus>
 800b1e4:	e000      	b.n	800b1e8 <USBD_GetDescriptor+0x2c8>
    return;
 800b1e6:	bf00      	nop
    }
  }
}
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop

0800b1f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	889b      	ldrh	r3, [r3, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d130      	bne.n	800b264 <USBD_SetAddress+0x74>
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	88db      	ldrh	r3, [r3, #6]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d12c      	bne.n	800b264 <USBD_SetAddress+0x74>
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	885b      	ldrh	r3, [r3, #2]
 800b20e:	2b7f      	cmp	r3, #127	; 0x7f
 800b210:	d828      	bhi.n	800b264 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	885b      	ldrh	r3, [r3, #2]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b21c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b224:	2b03      	cmp	r3, #3
 800b226:	d104      	bne.n	800b232 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f98b 	bl	800b546 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b230:	e01d      	b.n	800b26e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	7bfa      	ldrb	r2, [r7, #15]
 800b236:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fe4e 	bl	800bee0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fa46 	bl	800b6d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d004      	beq.n	800b25a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2202      	movs	r2, #2
 800b254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b258:	e009      	b.n	800b26e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b262:	e004      	b.n	800b26e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b264:	6839      	ldr	r1, [r7, #0]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f96d 	bl	800b546 <USBD_CtlError>
  }
}
 800b26c:	bf00      	nop
 800b26e:	bf00      	nop
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	885b      	ldrh	r3, [r3, #2]
 800b286:	b2da      	uxtb	r2, r3
 800b288:	4b41      	ldr	r3, [pc, #260]	; (800b390 <USBD_SetConfig+0x118>)
 800b28a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b28c:	4b40      	ldr	r3, [pc, #256]	; (800b390 <USBD_SetConfig+0x118>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2b01      	cmp	r3, #1
 800b292:	d904      	bls.n	800b29e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f955 	bl	800b546 <USBD_CtlError>
 800b29c:	e075      	b.n	800b38a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d002      	beq.n	800b2ae <USBD_SetConfig+0x36>
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d023      	beq.n	800b2f4 <USBD_SetConfig+0x7c>
 800b2ac:	e062      	b.n	800b374 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b2ae:	4b38      	ldr	r3, [pc, #224]	; (800b390 <USBD_SetConfig+0x118>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01a      	beq.n	800b2ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b2b6:	4b36      	ldr	r3, [pc, #216]	; (800b390 <USBD_SetConfig+0x118>)
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2203      	movs	r2, #3
 800b2c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b2c8:	4b31      	ldr	r3, [pc, #196]	; (800b390 <USBD_SetConfig+0x118>)
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7ff f9e7 	bl	800a6a2 <USBD_SetClassConfig>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d104      	bne.n	800b2e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f932 	bl	800b546 <USBD_CtlError>
            return;
 800b2e2:	e052      	b.n	800b38a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f9f6 	bl	800b6d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b2ea:	e04e      	b.n	800b38a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f9f2 	bl	800b6d6 <USBD_CtlSendStatus>
        break;
 800b2f2:	e04a      	b.n	800b38a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b2f4:	4b26      	ldr	r3, [pc, #152]	; (800b390 <USBD_SetConfig+0x118>)
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d112      	bne.n	800b322 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2202      	movs	r2, #2
 800b300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b304:	4b22      	ldr	r3, [pc, #136]	; (800b390 <USBD_SetConfig+0x118>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	461a      	mov	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b30e:	4b20      	ldr	r3, [pc, #128]	; (800b390 <USBD_SetConfig+0x118>)
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7ff f9e3 	bl	800a6e0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f9db 	bl	800b6d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b320:	e033      	b.n	800b38a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b322:	4b1b      	ldr	r3, [pc, #108]	; (800b390 <USBD_SetConfig+0x118>)
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d01d      	beq.n	800b36c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	b2db      	uxtb	r3, r3
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff f9d1 	bl	800a6e0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b33e:	4b14      	ldr	r3, [pc, #80]	; (800b390 <USBD_SetConfig+0x118>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	461a      	mov	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b348:	4b11      	ldr	r3, [pc, #68]	; (800b390 <USBD_SetConfig+0x118>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff f9a7 	bl	800a6a2 <USBD_SetClassConfig>
 800b354:	4603      	mov	r3, r0
 800b356:	2b02      	cmp	r3, #2
 800b358:	d104      	bne.n	800b364 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f8f2 	bl	800b546 <USBD_CtlError>
            return;
 800b362:	e012      	b.n	800b38a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f9b6 	bl	800b6d6 <USBD_CtlSendStatus>
        break;
 800b36a:	e00e      	b.n	800b38a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f9b2 	bl	800b6d6 <USBD_CtlSendStatus>
        break;
 800b372:	e00a      	b.n	800b38a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f8e5 	bl	800b546 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b37c:	4b04      	ldr	r3, [pc, #16]	; (800b390 <USBD_SetConfig+0x118>)
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	4619      	mov	r1, r3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7ff f9ac 	bl	800a6e0 <USBD_ClrClassConfig>
        break;
 800b388:	bf00      	nop
    }
  }
}
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	200004d0 	.word	0x200004d0

0800b394 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	88db      	ldrh	r3, [r3, #6]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d004      	beq.n	800b3b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3a6:	6839      	ldr	r1, [r7, #0]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f8cc 	bl	800b546 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b3ae:	e022      	b.n	800b3f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	dc02      	bgt.n	800b3c0 <USBD_GetConfig+0x2c>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	dc03      	bgt.n	800b3c6 <USBD_GetConfig+0x32>
 800b3be:	e015      	b.n	800b3ec <USBD_GetConfig+0x58>
 800b3c0:	2b03      	cmp	r3, #3
 800b3c2:	d00b      	beq.n	800b3dc <USBD_GetConfig+0x48>
 800b3c4:	e012      	b.n	800b3ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f920 	bl	800b61a <USBD_CtlSendData>
        break;
 800b3da:	e00c      	b.n	800b3f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3304      	adds	r3, #4
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 f918 	bl	800b61a <USBD_CtlSendData>
        break;
 800b3ea:	e004      	b.n	800b3f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f8a9 	bl	800b546 <USBD_CtlError>
        break;
 800b3f4:	bf00      	nop
}
 800b3f6:	bf00      	nop
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b082      	sub	sp, #8
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b40e:	3b01      	subs	r3, #1
 800b410:	2b02      	cmp	r3, #2
 800b412:	d81e      	bhi.n	800b452 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	88db      	ldrh	r3, [r3, #6]
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d004      	beq.n	800b426 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f891 	bl	800b546 <USBD_CtlError>
        break;
 800b424:	e01a      	b.n	800b45c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b432:	2b00      	cmp	r3, #0
 800b434:	d005      	beq.n	800b442 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	f043 0202 	orr.w	r2, r3, #2
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	330c      	adds	r3, #12
 800b446:	2202      	movs	r2, #2
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f8e5 	bl	800b61a <USBD_CtlSendData>
      break;
 800b450:	e004      	b.n	800b45c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f876 	bl	800b546 <USBD_CtlError>
      break;
 800b45a:	bf00      	nop
  }
}
 800b45c:	bf00      	nop
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	885b      	ldrh	r3, [r3, #2]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d106      	bne.n	800b484 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f929 	bl	800b6d6 <USBD_CtlSendStatus>
  }
}
 800b484:	bf00      	nop
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b49c:	3b01      	subs	r3, #1
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d80b      	bhi.n	800b4ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	885b      	ldrh	r3, [r3, #2]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d10c      	bne.n	800b4c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f90f 	bl	800b6d6 <USBD_CtlSendStatus>
      }
      break;
 800b4b8:	e004      	b.n	800b4c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b4ba:	6839      	ldr	r1, [r7, #0]
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f842 	bl	800b546 <USBD_CtlError>
      break;
 800b4c2:	e000      	b.n	800b4c6 <USBD_ClrFeature+0x3a>
      break;
 800b4c4:	bf00      	nop
  }
}
 800b4c6:	bf00      	nop
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	781a      	ldrb	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	785a      	ldrb	r2, [r3, #1]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	3302      	adds	r3, #2
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	3303      	adds	r3, #3
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	021b      	lsls	r3, r3, #8
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	4413      	add	r3, r2
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	3304      	adds	r3, #4
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	3305      	adds	r3, #5
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	b29b      	uxth	r3, r3
 800b514:	021b      	lsls	r3, r3, #8
 800b516:	b29b      	uxth	r3, r3
 800b518:	4413      	add	r3, r2
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	3306      	adds	r3, #6
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	b29a      	uxth	r2, r3
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	3307      	adds	r3, #7
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	021b      	lsls	r3, r3, #8
 800b532:	b29b      	uxth	r3, r3
 800b534:	4413      	add	r3, r2
 800b536:	b29a      	uxth	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	80da      	strh	r2, [r3, #6]

}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	bc80      	pop	{r7}
 800b544:	4770      	bx	lr

0800b546 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b082      	sub	sp, #8
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b550:	2180      	movs	r1, #128	; 0x80
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 fc5a 	bl	800be0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b558:	2100      	movs	r1, #0
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fc56 	bl	800be0c <USBD_LL_StallEP>
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b574:	2300      	movs	r3, #0
 800b576:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d032      	beq.n	800b5e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f000 f834 	bl	800b5ec <USBD_GetLen>
 800b584:	4603      	mov	r3, r0
 800b586:	3301      	adds	r3, #1
 800b588:	b29b      	uxth	r3, r3
 800b58a:	005b      	lsls	r3, r3, #1
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	75fa      	strb	r2, [r7, #23]
 800b598:	461a      	mov	r2, r3
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	4413      	add	r3, r2
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	7812      	ldrb	r2, [r2, #0]
 800b5a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	1c5a      	adds	r2, r3, #1
 800b5a8:	75fa      	strb	r2, [r7, #23]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	2203      	movs	r2, #3
 800b5b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b5b4:	e012      	b.n	800b5dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	1c5a      	adds	r2, r3, #1
 800b5ba:	60fa      	str	r2, [r7, #12]
 800b5bc:	7dfa      	ldrb	r2, [r7, #23]
 800b5be:	1c51      	adds	r1, r2, #1
 800b5c0:	75f9      	strb	r1, [r7, #23]
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	440a      	add	r2, r1
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b5cc:	7dfb      	ldrb	r3, [r7, #23]
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	75fa      	strb	r2, [r7, #23]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	2200      	movs	r2, #0
 800b5da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1e8      	bne.n	800b5b6 <USBD_GetString+0x4e>
    }
  }
}
 800b5e4:	bf00      	nop
 800b5e6:	3718      	adds	r7, #24
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b5f8:	e005      	b.n	800b606 <USBD_GetLen+0x1a>
  {
    len++;
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3301      	adds	r3, #1
 800b604:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1f5      	bne.n	800b5fa <USBD_GetLen+0xe>
  }

  return len;
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	bc80      	pop	{r7}
 800b618:	4770      	bx	lr

0800b61a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	60f8      	str	r0, [r7, #12]
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	4613      	mov	r3, r2
 800b626:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2202      	movs	r2, #2
 800b62c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b630:	88fa      	ldrh	r2, [r7, #6]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b636:	88fa      	ldrh	r2, [r7, #6]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b63c:	88fb      	ldrh	r3, [r7, #6]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	2100      	movs	r1, #0
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 fc6b 	bl	800bf1e <USBD_LL_Transmit>

  return USBD_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b084      	sub	sp, #16
 800b656:	af00      	add	r7, sp, #0
 800b658:	60f8      	str	r0, [r7, #12]
 800b65a:	60b9      	str	r1, [r7, #8]
 800b65c:	4613      	mov	r3, r2
 800b65e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b660:	88fb      	ldrh	r3, [r7, #6]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	2100      	movs	r1, #0
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 fc59 	bl	800bf1e <USBD_LL_Transmit>

  return USBD_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	4613      	mov	r3, r2
 800b682:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2203      	movs	r2, #3
 800b688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b68c:	88fa      	ldrh	r2, [r7, #6]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b694:	88fa      	ldrh	r2, [r7, #6]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b69c:	88fb      	ldrh	r3, [r7, #6]
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f000 fc5e 	bl	800bf64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	60f8      	str	r0, [r7, #12]
 800b6ba:	60b9      	str	r1, [r7, #8]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6c0:	88fb      	ldrh	r3, [r7, #6]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f000 fc4c 	bl	800bf64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2204      	movs	r2, #4
 800b6e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fc16 	bl	800bf1e <USBD_LL_Transmit>

  return USBD_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2205      	movs	r2, #5
 800b708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b70c:	2300      	movs	r3, #0
 800b70e:	2200      	movs	r2, #0
 800b710:	2100      	movs	r1, #0
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fc26 	bl	800bf64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
	...

0800b724 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b728:	2200      	movs	r2, #0
 800b72a:	4912      	ldr	r1, [pc, #72]	; (800b774 <MX_USB_DEVICE_Init+0x50>)
 800b72c:	4812      	ldr	r0, [pc, #72]	; (800b778 <MX_USB_DEVICE_Init+0x54>)
 800b72e:	f7fe ff5e 	bl	800a5ee <USBD_Init>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d001      	beq.n	800b73c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b738:	f7f7 f8be 	bl	80028b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b73c:	490f      	ldr	r1, [pc, #60]	; (800b77c <MX_USB_DEVICE_Init+0x58>)
 800b73e:	480e      	ldr	r0, [pc, #56]	; (800b778 <MX_USB_DEVICE_Init+0x54>)
 800b740:	f7fe ff80 	bl	800a644 <USBD_RegisterClass>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b74a:	f7f7 f8b5 	bl	80028b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b74e:	490c      	ldr	r1, [pc, #48]	; (800b780 <MX_USB_DEVICE_Init+0x5c>)
 800b750:	4809      	ldr	r0, [pc, #36]	; (800b778 <MX_USB_DEVICE_Init+0x54>)
 800b752:	f7fe feb1 	bl	800a4b8 <USBD_CDC_RegisterInterface>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b75c:	f7f7 f8ac 	bl	80028b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b760:	4805      	ldr	r0, [pc, #20]	; (800b778 <MX_USB_DEVICE_Init+0x54>)
 800b762:	f7fe ff88 	bl	800a676 <USBD_Start>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b76c:	f7f7 f8a4 	bl	80028b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b770:	bf00      	nop
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20000154 	.word	0x20000154
 800b778:	200004d4 	.word	0x200004d4
 800b77c:	20000040 	.word	0x20000040
 800b780:	20000144 	.word	0x20000144

0800b784 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b788:	2200      	movs	r2, #0
 800b78a:	4905      	ldr	r1, [pc, #20]	; (800b7a0 <CDC_Init_FS+0x1c>)
 800b78c:	4805      	ldr	r0, [pc, #20]	; (800b7a4 <CDC_Init_FS+0x20>)
 800b78e:	f7fe fea9 	bl	800a4e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b792:	4905      	ldr	r1, [pc, #20]	; (800b7a8 <CDC_Init_FS+0x24>)
 800b794:	4803      	ldr	r0, [pc, #12]	; (800b7a4 <CDC_Init_FS+0x20>)
 800b796:	f7fe febe 	bl	800a516 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b79a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20000b80 	.word	0x20000b80
 800b7a4:	200004d4 	.word	0x200004d4
 800b7a8:	20000798 	.word	0x20000798

0800b7ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b7b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bc80      	pop	{r7}
 800b7b8:	4770      	bx	lr
	...

0800b7bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	6039      	str	r1, [r7, #0]
 800b7c6:	71fb      	strb	r3, [r7, #7]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b7cc:	79fb      	ldrb	r3, [r7, #7]
 800b7ce:	2b23      	cmp	r3, #35	; 0x23
 800b7d0:	d84a      	bhi.n	800b868 <CDC_Control_FS+0xac>
 800b7d2:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <CDC_Control_FS+0x1c>)
 800b7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d8:	0800b869 	.word	0x0800b869
 800b7dc:	0800b869 	.word	0x0800b869
 800b7e0:	0800b869 	.word	0x0800b869
 800b7e4:	0800b869 	.word	0x0800b869
 800b7e8:	0800b869 	.word	0x0800b869
 800b7ec:	0800b869 	.word	0x0800b869
 800b7f0:	0800b869 	.word	0x0800b869
 800b7f4:	0800b869 	.word	0x0800b869
 800b7f8:	0800b869 	.word	0x0800b869
 800b7fc:	0800b869 	.word	0x0800b869
 800b800:	0800b869 	.word	0x0800b869
 800b804:	0800b869 	.word	0x0800b869
 800b808:	0800b869 	.word	0x0800b869
 800b80c:	0800b869 	.word	0x0800b869
 800b810:	0800b869 	.word	0x0800b869
 800b814:	0800b869 	.word	0x0800b869
 800b818:	0800b869 	.word	0x0800b869
 800b81c:	0800b869 	.word	0x0800b869
 800b820:	0800b869 	.word	0x0800b869
 800b824:	0800b869 	.word	0x0800b869
 800b828:	0800b869 	.word	0x0800b869
 800b82c:	0800b869 	.word	0x0800b869
 800b830:	0800b869 	.word	0x0800b869
 800b834:	0800b869 	.word	0x0800b869
 800b838:	0800b869 	.word	0x0800b869
 800b83c:	0800b869 	.word	0x0800b869
 800b840:	0800b869 	.word	0x0800b869
 800b844:	0800b869 	.word	0x0800b869
 800b848:	0800b869 	.word	0x0800b869
 800b84c:	0800b869 	.word	0x0800b869
 800b850:	0800b869 	.word	0x0800b869
 800b854:	0800b869 	.word	0x0800b869
 800b858:	0800b869 	.word	0x0800b869
 800b85c:	0800b869 	.word	0x0800b869
 800b860:	0800b869 	.word	0x0800b869
 800b864:	0800b869 	.word	0x0800b869
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b868:	bf00      	nop
  }

  return (USBD_OK);
 800b86a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	bc80      	pop	{r7}
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop

0800b878 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	4808      	ldr	r0, [pc, #32]	; (800b8a8 <CDC_Receive_FS+0x30>)
 800b886:	f7fe fe46 	bl	800a516 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b88a:	4807      	ldr	r0, [pc, #28]	; (800b8a8 <CDC_Receive_FS+0x30>)
 800b88c:	f7fe fe85 	bl	800a59a <USBD_CDC_ReceivePacket>
USB_Packet_Received(&Buf[0], Len[0]);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7f6 fb1c 	bl	8001ed4 <USB_Packet_Received>
  return (USBD_OK);
 800b89c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	200004d4 	.word	0x200004d4

0800b8ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b8bc:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <CDC_Transmit_FS+0x48>)
 800b8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e00b      	b.n	800b8ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b8d2:	887b      	ldrh	r3, [r7, #2]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	6879      	ldr	r1, [r7, #4]
 800b8d8:	4806      	ldr	r0, [pc, #24]	; (800b8f4 <CDC_Transmit_FS+0x48>)
 800b8da:	f7fe fe03 	bl	800a4e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b8de:	4805      	ldr	r0, [pc, #20]	; (800b8f4 <CDC_Transmit_FS+0x48>)
 800b8e0:	f7fe fe2c 	bl	800a53c <USBD_CDC_TransmitPacket>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	200004d4 	.word	0x200004d4

0800b8f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	6039      	str	r1, [r7, #0]
 800b902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2212      	movs	r2, #18
 800b908:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b90a:	4b03      	ldr	r3, [pc, #12]	; (800b918 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	bc80      	pop	{r7}
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	20000170 	.word	0x20000170

0800b91c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	4603      	mov	r3, r0
 800b924:	6039      	str	r1, [r7, #0]
 800b926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2204      	movs	r2, #4
 800b92c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b92e:	4b03      	ldr	r3, [pc, #12]	; (800b93c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b930:	4618      	mov	r0, r3
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	bc80      	pop	{r7}
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	20000184 	.word	0x20000184

0800b940 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	4603      	mov	r3, r0
 800b948:	6039      	str	r1, [r7, #0]
 800b94a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b94c:	79fb      	ldrb	r3, [r7, #7]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d105      	bne.n	800b95e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	4907      	ldr	r1, [pc, #28]	; (800b974 <USBD_FS_ProductStrDescriptor+0x34>)
 800b956:	4808      	ldr	r0, [pc, #32]	; (800b978 <USBD_FS_ProductStrDescriptor+0x38>)
 800b958:	f7ff fe06 	bl	800b568 <USBD_GetString>
 800b95c:	e004      	b.n	800b968 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	4904      	ldr	r1, [pc, #16]	; (800b974 <USBD_FS_ProductStrDescriptor+0x34>)
 800b962:	4805      	ldr	r0, [pc, #20]	; (800b978 <USBD_FS_ProductStrDescriptor+0x38>)
 800b964:	f7ff fe00 	bl	800b568 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b968:	4b02      	ldr	r3, [pc, #8]	; (800b974 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	20000f68 	.word	0x20000f68
 800b978:	0800c114 	.word	0x0800c114

0800b97c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	4603      	mov	r3, r0
 800b984:	6039      	str	r1, [r7, #0]
 800b986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	4904      	ldr	r1, [pc, #16]	; (800b99c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b98c:	4804      	ldr	r0, [pc, #16]	; (800b9a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b98e:	f7ff fdeb 	bl	800b568 <USBD_GetString>
  return USBD_StrDesc;
 800b992:	4b02      	ldr	r3, [pc, #8]	; (800b99c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b994:	4618      	mov	r0, r3
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	20000f68 	.word	0x20000f68
 800b9a0:	0800c128 	.word	0x0800c128

0800b9a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	6039      	str	r1, [r7, #0]
 800b9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	221a      	movs	r2, #26
 800b9b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b9b6:	f000 f843 	bl	800ba40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b9ba:	4b02      	ldr	r3, [pc, #8]	; (800b9c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	20000188 	.word	0x20000188

0800b9c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	6039      	str	r1, [r7, #0]
 800b9d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d105      	bne.n	800b9e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	4907      	ldr	r1, [pc, #28]	; (800b9fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9de:	4808      	ldr	r0, [pc, #32]	; (800ba00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9e0:	f7ff fdc2 	bl	800b568 <USBD_GetString>
 800b9e4:	e004      	b.n	800b9f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	4904      	ldr	r1, [pc, #16]	; (800b9fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9ea:	4805      	ldr	r0, [pc, #20]	; (800ba00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9ec:	f7ff fdbc 	bl	800b568 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9f0:	4b02      	ldr	r3, [pc, #8]	; (800b9fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20000f68 	.word	0x20000f68
 800ba00:	0800c13c 	.word	0x0800c13c

0800ba04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	6039      	str	r1, [r7, #0]
 800ba0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba10:	79fb      	ldrb	r3, [r7, #7]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d105      	bne.n	800ba22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	4907      	ldr	r1, [pc, #28]	; (800ba38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba1a:	4808      	ldr	r0, [pc, #32]	; (800ba3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba1c:	f7ff fda4 	bl	800b568 <USBD_GetString>
 800ba20:	e004      	b.n	800ba2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	4904      	ldr	r1, [pc, #16]	; (800ba38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba26:	4805      	ldr	r0, [pc, #20]	; (800ba3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba28:	f7ff fd9e 	bl	800b568 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba2c:	4b02      	ldr	r3, [pc, #8]	; (800ba38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20000f68 	.word	0x20000f68
 800ba3c:	0800c148 	.word	0x0800c148

0800ba40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba46:	4b0f      	ldr	r3, [pc, #60]	; (800ba84 <Get_SerialNum+0x44>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba4c:	4b0e      	ldr	r3, [pc, #56]	; (800ba88 <Get_SerialNum+0x48>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba52:	4b0e      	ldr	r3, [pc, #56]	; (800ba8c <Get_SerialNum+0x4c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d009      	beq.n	800ba7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba66:	2208      	movs	r2, #8
 800ba68:	4909      	ldr	r1, [pc, #36]	; (800ba90 <Get_SerialNum+0x50>)
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f000 f814 	bl	800ba98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba70:	2204      	movs	r2, #4
 800ba72:	4908      	ldr	r1, [pc, #32]	; (800ba94 <Get_SerialNum+0x54>)
 800ba74:	68b8      	ldr	r0, [r7, #8]
 800ba76:	f000 f80f 	bl	800ba98 <IntToUnicode>
  }
}
 800ba7a:	bf00      	nop
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	1ffff7e8 	.word	0x1ffff7e8
 800ba88:	1ffff7ec 	.word	0x1ffff7ec
 800ba8c:	1ffff7f0 	.word	0x1ffff7f0
 800ba90:	2000018a 	.word	0x2000018a
 800ba94:	2000019a 	.word	0x2000019a

0800ba98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b087      	sub	sp, #28
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	4613      	mov	r3, r2
 800baa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800baaa:	2300      	movs	r3, #0
 800baac:	75fb      	strb	r3, [r7, #23]
 800baae:	e027      	b.n	800bb00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	0f1b      	lsrs	r3, r3, #28
 800bab4:	2b09      	cmp	r3, #9
 800bab6:	d80b      	bhi.n	800bad0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	0f1b      	lsrs	r3, r3, #28
 800babc:	b2da      	uxtb	r2, r3
 800babe:	7dfb      	ldrb	r3, [r7, #23]
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	4619      	mov	r1, r3
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	440b      	add	r3, r1
 800bac8:	3230      	adds	r2, #48	; 0x30
 800baca:	b2d2      	uxtb	r2, r2
 800bacc:	701a      	strb	r2, [r3, #0]
 800bace:	e00a      	b.n	800bae6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	0f1b      	lsrs	r3, r3, #28
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	7dfb      	ldrb	r3, [r7, #23]
 800bad8:	005b      	lsls	r3, r3, #1
 800bada:	4619      	mov	r1, r3
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	440b      	add	r3, r1
 800bae0:	3237      	adds	r2, #55	; 0x37
 800bae2:	b2d2      	uxtb	r2, r2
 800bae4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	011b      	lsls	r3, r3, #4
 800baea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800baec:	7dfb      	ldrb	r3, [r7, #23]
 800baee:	005b      	lsls	r3, r3, #1
 800baf0:	3301      	adds	r3, #1
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	4413      	add	r3, r2
 800baf6:	2200      	movs	r2, #0
 800baf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bafa:	7dfb      	ldrb	r3, [r7, #23]
 800bafc:	3301      	adds	r3, #1
 800bafe:	75fb      	strb	r3, [r7, #23]
 800bb00:	7dfa      	ldrb	r2, [r7, #23]
 800bb02:	79fb      	ldrb	r3, [r7, #7]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d3d3      	bcc.n	800bab0 <IntToUnicode+0x18>
  }
}
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
 800bb0c:	371c      	adds	r7, #28
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bc80      	pop	{r7}
 800bb12:	4770      	bx	lr

0800bb14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a0d      	ldr	r2, [pc, #52]	; (800bb58 <HAL_PCD_MspInit+0x44>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d113      	bne.n	800bb4e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bb26:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <HAL_PCD_MspInit+0x48>)
 800bb28:	69db      	ldr	r3, [r3, #28]
 800bb2a:	4a0c      	ldr	r2, [pc, #48]	; (800bb5c <HAL_PCD_MspInit+0x48>)
 800bb2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb30:	61d3      	str	r3, [r2, #28]
 800bb32:	4b0a      	ldr	r3, [pc, #40]	; (800bb5c <HAL_PCD_MspInit+0x48>)
 800bb34:	69db      	ldr	r3, [r3, #28]
 800bb36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb3a:	60fb      	str	r3, [r7, #12]
 800bb3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 800bb3e:	2200      	movs	r2, #0
 800bb40:	2103      	movs	r1, #3
 800bb42:	2014      	movs	r0, #20
 800bb44:	f7f7 fe4b 	bl	80037de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bb48:	2014      	movs	r0, #20
 800bb4a:	f7f7 fe64 	bl	8003816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bb4e:	bf00      	nop
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	40005c00 	.word	0x40005c00
 800bb5c:	40021000 	.word	0x40021000

0800bb60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bb74:	4619      	mov	r1, r3
 800bb76:	4610      	mov	r0, r2
 800bb78:	f7fe fdc5 	bl	800a706 <USBD_LL_SetupStage>
}
 800bb7c:	bf00      	nop
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb96:	78fa      	ldrb	r2, [r7, #3]
 800bb98:	6879      	ldr	r1, [r7, #4]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4413      	add	r3, r2
 800bba0:	00db      	lsls	r3, r3, #3
 800bba2:	440b      	add	r3, r1
 800bba4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	78fb      	ldrb	r3, [r7, #3]
 800bbac:	4619      	mov	r1, r3
 800bbae:	f7fe fdf7 	bl	800a7a0 <USBD_LL_DataOutStage>
}
 800bbb2:	bf00      	nop
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b082      	sub	sp, #8
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bbcc:	78fa      	ldrb	r2, [r7, #3]
 800bbce:	6879      	ldr	r1, [r7, #4]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	4413      	add	r3, r2
 800bbd6:	00db      	lsls	r3, r3, #3
 800bbd8:	440b      	add	r3, r1
 800bbda:	333c      	adds	r3, #60	; 0x3c
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	78fb      	ldrb	r3, [r7, #3]
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	f7fe fe4e 	bl	800a882 <USBD_LL_DataInStage>
}
 800bbe6:	bf00      	nop
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fe ff5e 	bl	800aabe <USBD_LL_SOF>
}
 800bc02:	bf00      	nop
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc12:	2301      	movs	r3, #1
 800bc14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	d001      	beq.n	800bc22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bc1e:	f7f6 fe4b 	bl	80028b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc28:	7bfa      	ldrb	r2, [r7, #15]
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7fe ff0e 	bl	800aa4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7fe fec7 	bl	800a9cc <USBD_LL_Reset>
}
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
	...

0800bc48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe ff08 	bl	800aa6c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d005      	beq.n	800bc70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc64:	4b04      	ldr	r3, [pc, #16]	; (800bc78 <HAL_PCD_SuspendCallback+0x30>)
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	4a03      	ldr	r2, [pc, #12]	; (800bc78 <HAL_PCD_SuspendCallback+0x30>)
 800bc6a:	f043 0306 	orr.w	r3, r3, #6
 800bc6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	e000ed00 	.word	0xe000ed00

0800bc7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fe ff02 	bl	800aa94 <USBD_LL_Resume>
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bca0:	4a28      	ldr	r2, [pc, #160]	; (800bd44 <USBD_LL_Init+0xac>)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a26      	ldr	r2, [pc, #152]	; (800bd44 <USBD_LL_Init+0xac>)
 800bcac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bcb0:	4b24      	ldr	r3, [pc, #144]	; (800bd44 <USBD_LL_Init+0xac>)
 800bcb2:	4a25      	ldr	r2, [pc, #148]	; (800bd48 <USBD_LL_Init+0xb0>)
 800bcb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bcb6:	4b23      	ldr	r3, [pc, #140]	; (800bd44 <USBD_LL_Init+0xac>)
 800bcb8:	2208      	movs	r2, #8
 800bcba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bcbc:	4b21      	ldr	r3, [pc, #132]	; (800bd44 <USBD_LL_Init+0xac>)
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bcc2:	4b20      	ldr	r3, [pc, #128]	; (800bd44 <USBD_LL_Init+0xac>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bcc8:	4b1e      	ldr	r3, [pc, #120]	; (800bd44 <USBD_LL_Init+0xac>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bcce:	4b1d      	ldr	r3, [pc, #116]	; (800bd44 <USBD_LL_Init+0xac>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bcd4:	481b      	ldr	r0, [pc, #108]	; (800bd44 <USBD_LL_Init+0xac>)
 800bcd6:	f7f8 f9d3 	bl	8004080 <HAL_PCD_Init>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bce0:	f7f6 fdea 	bl	80028b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcea:	2318      	movs	r3, #24
 800bcec:	2200      	movs	r2, #0
 800bcee:	2100      	movs	r1, #0
 800bcf0:	f7f9 fe47 	bl	8005982 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcfa:	2358      	movs	r3, #88	; 0x58
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	2180      	movs	r1, #128	; 0x80
 800bd00:	f7f9 fe3f 	bl	8005982 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd0a:	23c0      	movs	r3, #192	; 0xc0
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	2181      	movs	r1, #129	; 0x81
 800bd10:	f7f9 fe37 	bl	8005982 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd1a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bd1e:	2200      	movs	r2, #0
 800bd20:	2101      	movs	r1, #1
 800bd22:	f7f9 fe2e 	bl	8005982 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd30:	2200      	movs	r2, #0
 800bd32:	2182      	movs	r1, #130	; 0x82
 800bd34:	f7f9 fe25 	bl	8005982 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	20001168 	.word	0x20001168
 800bd48:	40005c00 	.word	0x40005c00

0800bd4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7f8 fa97 	bl	8004296 <HAL_PCD_Start>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd6c:	7bfb      	ldrb	r3, [r7, #15]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 f94e 	bl	800c010 <USBD_Get_USB_Status>
 800bd74:	4603      	mov	r3, r0
 800bd76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b084      	sub	sp, #16
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	4608      	mov	r0, r1
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	461a      	mov	r2, r3
 800bd90:	4603      	mov	r3, r0
 800bd92:	70fb      	strb	r3, [r7, #3]
 800bd94:	460b      	mov	r3, r1
 800bd96:	70bb      	strb	r3, [r7, #2]
 800bd98:	4613      	mov	r3, r2
 800bd9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bdaa:	78bb      	ldrb	r3, [r7, #2]
 800bdac:	883a      	ldrh	r2, [r7, #0]
 800bdae:	78f9      	ldrb	r1, [r7, #3]
 800bdb0:	f7f8 fc0f 	bl	80045d2 <HAL_PCD_EP_Open>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdb8:	7bfb      	ldrb	r3, [r7, #15]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 f928 	bl	800c010 <USBD_Get_USB_Status>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b084      	sub	sp, #16
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bde8:	78fa      	ldrb	r2, [r7, #3]
 800bdea:	4611      	mov	r1, r2
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7f8 fc56 	bl	800469e <HAL_PCD_EP_Close>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdf6:	7bfb      	ldrb	r3, [r7, #15]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 f909 	bl	800c010 <USBD_Get_USB_Status>
 800bdfe:	4603      	mov	r3, r0
 800be00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be02:	7bbb      	ldrb	r3, [r7, #14]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be26:	78fa      	ldrb	r2, [r7, #3]
 800be28:	4611      	mov	r1, r2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f8 fd16 	bl	800485c <HAL_PCD_EP_SetStall>
 800be30:	4603      	mov	r3, r0
 800be32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be34:	7bfb      	ldrb	r3, [r7, #15]
 800be36:	4618      	mov	r0, r3
 800be38:	f000 f8ea 	bl	800c010 <USBD_Get_USB_Status>
 800be3c:	4603      	mov	r3, r0
 800be3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be40:	7bbb      	ldrb	r3, [r7, #14]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	460b      	mov	r3, r1
 800be54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be64:	78fa      	ldrb	r2, [r7, #3]
 800be66:	4611      	mov	r1, r2
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f8 fd57 	bl	800491c <HAL_PCD_EP_ClrStall>
 800be6e:	4603      	mov	r3, r0
 800be70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be72:	7bfb      	ldrb	r3, [r7, #15]
 800be74:	4618      	mov	r0, r3
 800be76:	f000 f8cb 	bl	800c010 <USBD_Get_USB_Status>
 800be7a:	4603      	mov	r3, r0
 800be7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	da0c      	bge.n	800bebe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bea4:	78fb      	ldrb	r3, [r7, #3]
 800bea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beaa:	68f9      	ldr	r1, [r7, #12]
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	4613      	mov	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4413      	add	r3, r2
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	440b      	add	r3, r1
 800beb8:	3302      	adds	r3, #2
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	e00b      	b.n	800bed6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bebe:	78fb      	ldrb	r3, [r7, #3]
 800bec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bec4:	68f9      	ldr	r1, [r7, #12]
 800bec6:	4613      	mov	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	00db      	lsls	r3, r3, #3
 800bece:	440b      	add	r3, r1
 800bed0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bed4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	bc80      	pop	{r7}
 800bede:	4770      	bx	lr

0800bee0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800befa:	78fa      	ldrb	r2, [r7, #3]
 800befc:	4611      	mov	r1, r2
 800befe:	4618      	mov	r0, r3
 800bf00:	f7f8 fb42 	bl	8004588 <HAL_PCD_SetAddress>
 800bf04:	4603      	mov	r3, r0
 800bf06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf08:	7bfb      	ldrb	r3, [r7, #15]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 f880 	bl	800c010 <USBD_Get_USB_Status>
 800bf10:	4603      	mov	r3, r0
 800bf12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf14:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b086      	sub	sp, #24
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	60f8      	str	r0, [r7, #12]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	72fb      	strb	r3, [r7, #11]
 800bf2e:	4613      	mov	r3, r2
 800bf30:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf36:	2300      	movs	r3, #0
 800bf38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf40:	893b      	ldrh	r3, [r7, #8]
 800bf42:	7af9      	ldrb	r1, [r7, #11]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	f7f8 fc46 	bl	80047d6 <HAL_PCD_EP_Transmit>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f000 f85d 	bl	800c010 <USBD_Get_USB_Status>
 800bf56:	4603      	mov	r3, r0
 800bf58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf5a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3718      	adds	r7, #24
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	607a      	str	r2, [r7, #4]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	460b      	mov	r3, r1
 800bf72:	72fb      	strb	r3, [r7, #11]
 800bf74:	4613      	mov	r3, r2
 800bf76:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf86:	893b      	ldrh	r3, [r7, #8]
 800bf88:	7af9      	ldrb	r1, [r7, #11]
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	f7f8 fbcf 	bl	800472e <HAL_PCD_EP_Receive>
 800bf90:	4603      	mov	r3, r0
 800bf92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 f83a 	bl	800c010 <USBD_Get_USB_Status>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bfa0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3718      	adds	r7, #24
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b082      	sub	sp, #8
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfbc:	78fa      	ldrb	r2, [r7, #3]
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7f8 fbf1 	bl	80047a8 <HAL_PCD_EP_GetRxCount>
 800bfc6:	4603      	mov	r3, r0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfd8:	4b02      	ldr	r3, [pc, #8]	; (800bfe4 <USBD_static_malloc+0x14>)
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	370c      	adds	r7, #12
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bc80      	pop	{r7}
 800bfe2:	4770      	bx	lr
 800bfe4:	20001454 	.word	0x20001454

0800bfe8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]

}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bc80      	pop	{r7}
 800bff8:	4770      	bx	lr

0800bffa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bffa:	b480      	push	{r7}
 800bffc:	b083      	sub	sp, #12
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	460b      	mov	r3, r1
 800c004:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c006:	bf00      	nop
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bc80      	pop	{r7}
 800c00e:	4770      	bx	lr

0800c010 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c01e:	79fb      	ldrb	r3, [r7, #7]
 800c020:	2b03      	cmp	r3, #3
 800c022:	d817      	bhi.n	800c054 <USBD_Get_USB_Status+0x44>
 800c024:	a201      	add	r2, pc, #4	; (adr r2, 800c02c <USBD_Get_USB_Status+0x1c>)
 800c026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02a:	bf00      	nop
 800c02c:	0800c03d 	.word	0x0800c03d
 800c030:	0800c043 	.word	0x0800c043
 800c034:	0800c049 	.word	0x0800c049
 800c038:	0800c04f 	.word	0x0800c04f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73fb      	strb	r3, [r7, #15]
    break;
 800c040:	e00b      	b.n	800c05a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c042:	2302      	movs	r3, #2
 800c044:	73fb      	strb	r3, [r7, #15]
    break;
 800c046:	e008      	b.n	800c05a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c048:	2301      	movs	r3, #1
 800c04a:	73fb      	strb	r3, [r7, #15]
    break;
 800c04c:	e005      	b.n	800c05a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c04e:	2302      	movs	r3, #2
 800c050:	73fb      	strb	r3, [r7, #15]
    break;
 800c052:	e002      	b.n	800c05a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c054:	2302      	movs	r3, #2
 800c056:	73fb      	strb	r3, [r7, #15]
    break;
 800c058:	bf00      	nop
  }
  return usb_status;
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	bc80      	pop	{r7}
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop

0800c068 <__libc_init_array>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	2600      	movs	r6, #0
 800c06c:	4d0c      	ldr	r5, [pc, #48]	; (800c0a0 <__libc_init_array+0x38>)
 800c06e:	4c0d      	ldr	r4, [pc, #52]	; (800c0a4 <__libc_init_array+0x3c>)
 800c070:	1b64      	subs	r4, r4, r5
 800c072:	10a4      	asrs	r4, r4, #2
 800c074:	42a6      	cmp	r6, r4
 800c076:	d109      	bne.n	800c08c <__libc_init_array+0x24>
 800c078:	f000 f830 	bl	800c0dc <_init>
 800c07c:	2600      	movs	r6, #0
 800c07e:	4d0a      	ldr	r5, [pc, #40]	; (800c0a8 <__libc_init_array+0x40>)
 800c080:	4c0a      	ldr	r4, [pc, #40]	; (800c0ac <__libc_init_array+0x44>)
 800c082:	1b64      	subs	r4, r4, r5
 800c084:	10a4      	asrs	r4, r4, #2
 800c086:	42a6      	cmp	r6, r4
 800c088:	d105      	bne.n	800c096 <__libc_init_array+0x2e>
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c090:	4798      	blx	r3
 800c092:	3601      	adds	r6, #1
 800c094:	e7ee      	b.n	800c074 <__libc_init_array+0xc>
 800c096:	f855 3b04 	ldr.w	r3, [r5], #4
 800c09a:	4798      	blx	r3
 800c09c:	3601      	adds	r6, #1
 800c09e:	e7f2      	b.n	800c086 <__libc_init_array+0x1e>
 800c0a0:	0800c170 	.word	0x0800c170
 800c0a4:	0800c170 	.word	0x0800c170
 800c0a8:	0800c170 	.word	0x0800c170
 800c0ac:	0800c174 	.word	0x0800c174

0800c0b0 <memcpy>:
 800c0b0:	440a      	add	r2, r1
 800c0b2:	4291      	cmp	r1, r2
 800c0b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0b8:	d100      	bne.n	800c0bc <memcpy+0xc>
 800c0ba:	4770      	bx	lr
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0c2:	4291      	cmp	r1, r2
 800c0c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0c8:	d1f9      	bne.n	800c0be <memcpy+0xe>
 800c0ca:	bd10      	pop	{r4, pc}

0800c0cc <memset>:
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	4402      	add	r2, r0
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d100      	bne.n	800c0d6 <memset+0xa>
 800c0d4:	4770      	bx	lr
 800c0d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c0da:	e7f9      	b.n	800c0d0 <memset+0x4>

0800c0dc <_init>:
 800c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0de:	bf00      	nop
 800c0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0e2:	bc08      	pop	{r3}
 800c0e4:	469e      	mov	lr, r3
 800c0e6:	4770      	bx	lr

0800c0e8 <_fini>:
 800c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ea:	bf00      	nop
 800c0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ee:	bc08      	pop	{r3}
 800c0f0:	469e      	mov	lr, r3
 800c0f2:	4770      	bx	lr
