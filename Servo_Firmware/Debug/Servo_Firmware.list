
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800c098  0800c098  0001c098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c114  0800c114  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c114  0800c114  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c114  0800c114  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c114  0800c114  0001c114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c118  0800c118  0001c118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800c11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c4  200001a8  0800c2c0  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800c2c0  0002166c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b07  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049fb  00000000  00000000  00038cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0ee  00000000  00000000  0003ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d233  00000000  00000000  0005d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936ba  00000000  00000000  0007a271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d92b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005560  00000000  00000000  0010d97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c080 	.word	0x0800c080

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	0800c080 	.word	0x0800c080

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <Potentiometer_Ready>:
extern uint8_t usb_rq;
extern uint8_t usb_rq_sett_revert_flash;
extern uint8_t usb_rq_stat_motor;
extern uint8_t usb_rq_stat_phold;

void Potentiometer_Ready(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	pid_input = potentiometer_position;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <Potentiometer_Ready+0x80>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <Potentiometer_Ready+0x84>)
 800074a:	6013      	str	r3, [r2, #0]
	if(!pid_running){
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <Potentiometer_Ready+0x88>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d133      	bne.n	80007bc <Potentiometer_Ready+0x7c>
		if(motor_running){
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <Potentiometer_Ready+0x8c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d02f      	beq.n	80007bc <Potentiometer_Ready+0x7c>
			if((potentiometer_position <= potentiometer_min) && (Motor_Get() < 0)){
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <Potentiometer_Ready+0x90>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fdad 	bl	80002c0 <__aeabi_i2f>
 8000766:	4602      	mov	r2, r0
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <Potentiometer_Ready+0x80>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4610      	mov	r0, r2
 8000770:	f7ff ffac 	bl	80006cc <__aeabi_fcmpge>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d008      	beq.n	800078c <Potentiometer_Ready+0x4c>
 800077a:	f000 fb15 	bl	8000da8 <Motor_Get>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	da03      	bge.n	800078c <Potentiometer_Ready+0x4c>
				Motor_Set(0);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 faa7 	bl	8000cd8 <Motor_Set>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 800078a:	e017      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <Potentiometer_Ready+0x94>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd95 	bl	80002c0 <__aeabi_i2f>
 8000796:	4602      	mov	r2, r0
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <Potentiometer_Ready+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f7ff ff8a 	bl	80006b8 <__aeabi_fcmple>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <Potentiometer_Ready+0x6c>
}
 80007aa:	e007      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 80007ac:	f000 fafc 	bl	8000da8 <Motor_Get>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	dd02      	ble.n	80007bc <Potentiometer_Ready+0x7c>
				Motor_Set(0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fa8e 	bl	8000cd8 <Motor_Set>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001f8 	.word	0x200001f8
 80007c4:	200001dc 	.word	0x200001dc
 80007c8:	200001d8 	.word	0x200001d8
 80007cc:	200001c8 	.word	0x200001c8
 80007d0:	200001ec 	.word	0x200001ec
 80007d4:	200001ee 	.word	0x200001ee

080007d8 <PID_Ready>:
void PID_Ready(float output){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff87 	bl	80006f4 <__aeabi_f2iz>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fa74 	bl	8000cd8 <Motor_Set>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <App_Init>:

void App_Init(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	Settings_Read();
 80007fc:	f000 fdd6 	bl	80013ac <Settings_Read>
	USB_Init();
 8000800:	f001 fb3a 	bl	8001e78 <USB_Init>
	Signal_Init();
 8000804:	f001 fae2 	bl	8001dcc <Signal_Init>
	Potentiometer_Init();
 8000808:	f000 fdb8 	bl	800137c <Potentiometer_Init>
	Motor_Init();
 800080c:	f000 fb0a 	bl	8000e24 <Motor_Init>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <App_Loop>:
void App_Loop(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	switch(usb_rq){
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <App_Loop+0xf8>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d002      	beq.n	8000826 <App_Loop+0x12>
 8000820:	2b02      	cmp	r3, #2
 8000822:	d019      	beq.n	8000858 <App_Loop+0x44>
 8000824:	e06e      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_CONF:
			if(usb_rq_sett_revert_flash == USB_SETTINGS_REVERT){
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <App_Loop+0xfc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d105      	bne.n	800083a <App_Loop+0x26>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <App_Loop+0xfc>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
				//Read from flash
				Settings_Read();
 8000834:	f000 fdba 	bl	80013ac <Settings_Read>
 8000838:	e008      	b.n	800084c <App_Loop+0x38>
			}else if(usb_rq_sett_revert_flash == USB_SETTINGS_FLASH){
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <App_Loop+0xfc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d104      	bne.n	800084c <App_Loop+0x38>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <App_Loop+0xfc>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
				//Write to flash
				Settings_Write();
 8000848:	f001 f894 	bl	8001974 <Settings_Write>
			}
			USB_Send_Config();
 800084c:	f001 fba6 	bl	8001f9c <USB_Send_Config>
			usb_rq = USB_RQ_NONE;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <App_Loop+0xf8>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e055      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_STAT:
			if(usb_rq_stat_motor != 0){
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <App_Loop+0x100>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d033      	beq.n	80008c8 <App_Loop+0xb4>
				//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout
				if(usb_rq_stat_motor == 1){//Backward
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <App_Loop+0x100>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d112      	bne.n	800088e <App_Loop+0x7a>
					if(potentiometer_position > potentiometer_min){
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <App_Loop+0x104>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fd27 	bl	80002c0 <__aeabi_i2f>
 8000872:	4602      	mov	r2, r0
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <App_Loop+0x108>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f7ff ff12 	bl	80006a4 <__aeabi_fcmplt>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01a      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(-1000);
 8000886:	4826      	ldr	r0, [pc, #152]	; (8000920 <App_Loop+0x10c>)
 8000888:	f000 fa26 	bl	8000cd8 <Motor_Set>
 800088c:	e016      	b.n	80008bc <App_Loop+0xa8>
					}
				}else if(usb_rq_stat_motor == 2){//Forward
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <App_Loop+0x100>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d112      	bne.n	80008bc <App_Loop+0xa8>
					if(potentiometer_position < potentiometer_max){
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <App_Loop+0x110>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd10 	bl	80002c0 <__aeabi_i2f>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <App_Loop+0x108>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff ff19 	bl	80006e0 <__aeabi_fcmpgt>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d003      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f000 fa0e 	bl	8000cd8 <Motor_Set>
					}
				}
				motor_systick = 0;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <App_Loop+0x114>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
				usb_rq_stat_motor = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <App_Loop+0x100>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
			}
			if(usb_rq_stat_phold == 1){
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <App_Loop+0x118>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d109      	bne.n	80008e4 <App_Loop+0xd0>
				usb_rq_stat_phold = 0;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <App_Loop+0x118>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
				if(!pid_running){//Run pid with signal timeout
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <App_Loop+0x11c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10c      	bne.n	80008f8 <App_Loop+0xe4>
					PID_Start();
 80008de:	f000 fcdf 	bl	80012a0 <PID_Start>
 80008e2:	e009      	b.n	80008f8 <App_Loop+0xe4>
				}
			}else if(signal_ignore && pid_running){
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <App_Loop+0x120>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d005      	beq.n	80008f8 <App_Loop+0xe4>
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <App_Loop+0x11c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <App_Loop+0xe4>
				PID_Stop();
 80008f4:	f000 fcf6 	bl	80012e4 <PID_Stop>
			}
			USB_Send_Status();
 80008f8:	f001 fd1e 	bl	8002338 <USB_Send_Status>
			usb_rq = USB_RQ_NONE;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <App_Loop+0xf8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
		break;
 8000902:	bf00      	nop
	}
	LED_Update();
 8000904:	f000 f988 	bl	8000c18 <LED_Update>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000249 	.word	0x20000249
 8000910:	2000024a 	.word	0x2000024a
 8000914:	2000024b 	.word	0x2000024b
 8000918:	200001ec 	.word	0x200001ec
 800091c:	200001f8 	.word	0x200001f8
 8000920:	fffffc18 	.word	0xfffffc18
 8000924:	200001ee 	.word	0x200001ee
 8000928:	200001c9 	.word	0x200001c9
 800092c:	2000024c 	.word	0x2000024c
 8000930:	200001d8 	.word	0x200001d8
 8000934:	2000023c 	.word	0x2000023c

08000938 <Flash_Read>:
#include "main.h"
#include "flash.h"

void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000948:	e00b      	b.n	8000962 <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	4413      	add	r3, r2
 8000958:	780a      	ldrb	r2, [r1, #0]
 800095a:	701a      	strb	r2, [r3, #0]
		i++;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	d1ef      	bne.n	800094a <Flash_Read+0x12>
	}
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	371c      	adds	r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <Flash_Write>:
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 8000976:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8000994:	f002 ffea 	bl	800396c <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8000998:	f107 0210 	add.w	r2, r7, #16
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 f8ca 	bl	8003b3c <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80009c0:	e027      	b.n	8000a12 <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80009c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	18d0      	adds	r0, r2, r3
				((uint32_t)data[i+3]<<24)|
 80009c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009ca:	3303      	adds	r3, #3
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	061a      	lsls	r2, r3, #24
				((uint32_t)data[i+2]<<16)|
 80009d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009d6:	3302      	adds	r3, #2
 80009d8:	68f9      	ldr	r1, [r7, #12]
 80009da:	440b      	add	r3, r1
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	041b      	lsls	r3, r3, #16
				((uint32_t)data[i+3]<<24)|
 80009e0:	431a      	orrs	r2, r3
				((uint32_t)data[i+1]<<8)|
 80009e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009e4:	3301      	adds	r3, #1
 80009e6:	68f9      	ldr	r1, [r7, #12]
 80009e8:	440b      	add	r3, r1
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	021b      	lsls	r3, r3, #8
				((uint32_t)data[i+2]<<16)|
 80009ee:	4313      	orrs	r3, r2
				(uint32_t)data[i]
 80009f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009f2:	68f9      	ldr	r1, [r7, #12]
 80009f4:	440a      	add	r2, r1
 80009f6:	7812      	ldrb	r2, [r2, #0]
				((uint32_t)data[i+1]<<8)|
 80009f8:	4313      	orrs	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80009fa:	2200      	movs	r2, #0
 80009fc:	4698      	mov	r8, r3
 80009fe:	4691      	mov	r9, r2
 8000a00:	4642      	mov	r2, r8
 8000a02:	464b      	mov	r3, r9
 8000a04:	4601      	mov	r1, r0
 8000a06:	2002      	movs	r0, #2
 8000a08:	f002 ff40 	bl	800388c <HAL_FLASH_Program>
		);
		i+=4;
 8000a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a0e:	3304      	adds	r3, #4
 8000a10:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 8000a12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d1d2      	bne.n	80009c2 <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 8000a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d03f      	beq.n	8000aa2 <Flash_Write+0x12c>
		uint32_t wdata = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 8000a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d114      	bne.n	8000a56 <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i+2]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i]<<8);
 8000a2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a2e:	3302      	adds	r3, #2
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	061a      	lsls	r2, r3, #24
 8000a38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	440b      	add	r3, r1
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	041b      	lsls	r3, r3, #16
 8000a44:	431a      	orrs	r2, r3
 8000a46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a48:	68f9      	ldr	r1, [r7, #12]
 8000a4a:	440b      	add	r3, r1
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	4313      	orrs	r3, r2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a54:	e019      	b.n	8000a8a <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 8000a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d10d      	bne.n	8000a78 <Flash_Write+0x102>
			wdata = ((uint32_t)data[i+1]<<24)|((uint32_t)data[i]<<16);
 8000a5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a5e:	3301      	adds	r3, #1
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	061a      	lsls	r2, r3, #24
 8000a68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	041b      	lsls	r3, r3, #16
 8000a72:	4313      	orrs	r3, r2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a76:	e008      	b.n	8000a8a <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 8000a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d105      	bne.n	8000a8a <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 8000a7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	061b      	lsls	r3, r3, #24
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 8000a8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	18d1      	adds	r1, r2, r3
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	2200      	movs	r2, #0
 8000a94:	461c      	mov	r4, r3
 8000a96:	4615      	mov	r5, r2
 8000a98:	4622      	mov	r2, r4
 8000a9a:	462b      	mov	r3, r5
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f002 fef5 	bl	800388c <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8000aa2:	f002 ff89 	bl	80039b8 <HAL_FLASH_Lock>
}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	; 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000ab0 <General_Copy_32_Bit>:
#include "main.h"
#include "general.h"

void General_Copy_32_Bit(uint32_t address_to, uint32_t address_from){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000abe:	e00b      	b.n	8000ad8 <General_Copy_32_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000ac0:	7bfa      	ldrb	r2, [r7, #15]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	7bfa      	ldrb	r2, [r7, #15]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	780a      	ldrb	r2, [r1, #0]
 8000ad0:	701a      	strb	r2, [r3, #0]
		i++;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d1f0      	bne.n	8000ac0 <General_Copy_32_Bit+0x10>
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <General_Copy_16_Bit>:
void General_Copy_16_Bit(uint32_t address_to, uint32_t address_from){
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000af8:	e00b      	b.n	8000b12 <General_Copy_16_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	780a      	ldrb	r2, [r1, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
		i++;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d1f0      	bne.n	8000afa <General_Copy_16_Bit+0x10>
	}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <HAL_ADC_ConvCpltCallback>:
#include "motor.h"
#include "signal.h"
#include "usb.h"
#include "led.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_ADC_ConvCpltCallback+0x20>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 8000b36:	f000 fbe5 	bl	8001304 <Potentiometer_ADC_Interrupt>
    }
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012400 	.word	0x40012400

08000b48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
		PID_Timer_Interrupt();
 8000b5a:	f000 f98b 	bl	8000e74 <PID_Timer_Interrupt>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40000400 	.word	0x40000400

08000b6c <Interrupts_SysTick>:

void Interrupts_SysTick(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	Motor_SysTick_Interrupt();
 8000b70:	f000 f890 	bl	8000c94 <Motor_SysTick_Interrupt>
	Signal_SysTick_Interrupt();
 8000b74:	f000 ffe0 	bl	8001b38 <Signal_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 8000b78:	f000 f818 	bl	8000bac <LED_SysTick_Interrupt>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_EXTI_Callback+0x18>
 8000b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_EXTI_Callback+0x1e>
		break;
		case USB_DET_Pin:
			USB_Det_Interrupt();
		break;
	}
}
 8000b96:	e005      	b.n	8000ba4 <HAL_GPIO_EXTI_Callback+0x24>
			Signal_Interrupt();
 8000b98:	f001 f814 	bl	8001bc4 <Signal_Interrupt>
		break;
 8000b9c:	e002      	b.n	8000ba4 <HAL_GPIO_EXTI_Callback+0x24>
			USB_Det_Interrupt();
 8000b9e:	f001 f951 	bl	8001e44 <USB_Det_Interrupt>
		break;
 8000ba2:	bf00      	nop
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LED_SysTick_Interrupt>:

uint8_t led_mode = 0;
uint8_t led_position_changed = 0;
uint8_t led_systick = 0;

void LED_SysTick_Interrupt(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	if(led_mode == LED_MODE_POSITION_CHANGE){
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <LED_SysTick_Interrupt+0x30>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d10f      	bne.n	8000bd8 <LED_SysTick_Interrupt+0x2c>
		led_systick++;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bc2:	701a      	strb	r2, [r3, #0]
		if(led_systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b13      	cmp	r3, #19
 8000bca:	d905      	bls.n	8000bd8 <LED_SysTick_Interrupt+0x2c>
			LED_Set(OFF);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 f809 	bl	8000be4 <LED_Set>
			led_systick = 0;
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001c4 	.word	0x200001c4
 8000be0:	200001c6 	.word	0x200001c6

08000be4 <LED_Set>:

void LED_Set(uint8_t state){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	if(state == ON){
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d105      	bne.n	8000c00 <LED_Set+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <LED_Set+0x30>)
 8000bfa:	f003 f9e2 	bl	8003fc2 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 8000bfe:	e004      	b.n	8000c0a <LED_Set+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <LED_Set+0x30>)
 8000c06:	f003 f9dc 	bl	8003fc2 <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010800 	.word	0x40010800

08000c18 <LED_Update>:
void LED_Update(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	switch(led_mode){
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <LED_Update+0x6c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d82a      	bhi.n	8000c7a <LED_Update+0x62>
 8000c24:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <LED_Update+0x14>)
 8000c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000c3d 	.word	0x08000c3d
 8000c30:	08000c45 	.word	0x08000c45
 8000c34:	08000c4d 	.word	0x08000c4d
 8000c38:	08000c65 	.word	0x08000c65
		case LED_MODE_OFF:
			LED_Set(OFF);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ffd1 	bl	8000be4 <LED_Set>
		break;
 8000c42:	e01a      	b.n	8000c7a <LED_Update+0x62>
		case LED_MODE_POWER:
			LED_Set(ON);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ffcd 	bl	8000be4 <LED_Set>
		break;
 8000c4a:	e016      	b.n	8000c7a <LED_Update+0x62>
		case LED_MODE_SIGNAL:
			if(pid_running){
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <LED_Update+0x70>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <LED_Update+0x44>
				LED_Set(ON);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff ffc5 	bl	8000be4 <LED_Set>
			}else{
				LED_Set(OFF);
			}
		break;
 8000c5a:	e00e      	b.n	8000c7a <LED_Update+0x62>
				LED_Set(OFF);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ffc1 	bl	8000be4 <LED_Set>
		break;
 8000c62:	e00a      	b.n	8000c7a <LED_Update+0x62>
		case LED_MODE_POSITION_CHANGE:
			if(led_position_changed){
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <LED_Update+0x74>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <LED_Update+0x60>
				led_systick = 0;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <LED_Update+0x78>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
				LED_Set(ON);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff ffb6 	bl	8000be4 <LED_Set>
			}
		break;
 8000c78:	bf00      	nop
	}
	led_position_changed = 0;
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <LED_Update+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200001c4 	.word	0x200001c4
 8000c88:	200001d8 	.word	0x200001d8
 8000c8c:	200001c5 	.word	0x200001c5
 8000c90:	200001c6 	.word	0x200001c6

08000c94 <Motor_SysTick_Interrupt>:
uint8_t motor_invert = MOTOR_NORMAL;
uint16_t motor_max_power = 1000;
uint8_t motor_running = 0;
uint8_t motor_systick = 0;

void Motor_SysTick_Interrupt(){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	if(!pid_running){
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <Motor_SysTick_Interrupt+0x38>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d113      	bne.n	8000cc8 <Motor_SysTick_Interrupt+0x34>
		if(motor_running){
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <Motor_SysTick_Interrupt+0x3c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00f      	beq.n	8000cc8 <Motor_SysTick_Interrupt+0x34>
			motor_systick++;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000cb2:	701a      	strb	r2, [r3, #0]
			if(motor_systick == MOTOR_USB_TEST_TIMEOUT_MS){
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b32      	cmp	r3, #50	; 0x32
 8000cba:	d105      	bne.n	8000cc8 <Motor_SysTick_Interrupt+0x34>
				Motor_Set(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f80b 	bl	8000cd8 <Motor_Set>
				motor_systick = 0;
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200001d8 	.word	0x200001d8
 8000cd0:	200001c8 	.word	0x200001c8
 8000cd4:	200001c9 	.word	0x200001c9

08000cd8 <Motor_Set>:

void Motor_Set(int16_t strength){//-1000 0 1000 Strength
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	if(motor_invert == MOTOR_INVERT){
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <Motor_Set+0xc0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d103      	bne.n	8000cf2 <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	425b      	negs	r3, r3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	80fb      	strh	r3, [r7, #6]
	}

	if(strength == 0){
 8000cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d110      	bne.n	8000d1c <Motor_Set+0x44>
		TIM2 -> CCR1 = 1000;
 8000cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d0c:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 0;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <Motor_Set+0xc4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
		motor_systick = 0;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <Motor_Set+0xc8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
		TIM2 -> CCR2 = 1000;
		motor_running = 1;
	}
}
 8000d1a:	e038      	b.n	8000d8e <Motor_Set+0xb6>
	}else if(strength < 0){
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da18      	bge.n	8000d56 <Motor_Set+0x7e>
		TIM2 -> CCR1 = 1000;
 8000d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000 + (strength / (1000 / motor_max_power));
 8000d2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <Motor_Set+0xcc>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3c:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d44:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <Motor_Set+0xc4>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	e01b      	b.n	8000d8e <Motor_Set+0xb6>
	}else if(strength > 0){
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	dd17      	ble.n	8000d8e <Motor_Set+0xb6>
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
 8000d5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <Motor_Set+0xcc>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	4619      	mov	r1, r3
 8000d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6c:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d86:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <Motor_Set+0xc4>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	200001c7 	.word	0x200001c7
 8000d9c:	200001c8 	.word	0x200001c8
 8000da0:	200001c9 	.word	0x200001c9
 8000da4:	20000000 	.word	0x20000000

08000da8 <Motor_Get>:
int16_t Motor_Get(){
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	if(TIM2 -> CCR1 != 1000){
 8000dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000db6:	d013      	beq.n	8000de0 <Motor_Get+0x38>
		return (1000 - (int16_t)(TIM2 -> CCR1)) * (1000 / motor_max_power);
 8000db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <Motor_Get+0x78>)
 8000dc8:	8812      	ldrh	r2, [r2, #0]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd0:	fb92 f2f1 	sdiv	r2, r2, r1
 8000dd4:	b292      	uxth	r2, r2
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	e01a      	b.n	8000e16 <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dea:	d013      	beq.n	8000e14 <Motor_Get+0x6c>
		return ((int16_t)(TIM2 -> CCR2) - 1000) * (1000 / motor_max_power);
 8000dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <Motor_Get+0x78>)
 8000dfc:	8812      	ldrh	r2, [r2, #0]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e04:	fb92 f2f1 	sdiv	r2, r2, r1
 8000e08:	b292      	uxth	r2, r2
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	e000      	b.n	8000e16 <Motor_Get+0x6e>
	}
	return 0;
 8000e14:	2300      	movs	r3, #0
} 
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000000 	.word	0x20000000

08000e24 <Motor_Init>:
void Motor_Init(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <Motor_Init+0x18>)
 8000e2c:	f005 fcac 	bl	8006788 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e30:	2104      	movs	r1, #4
 8000e32:	4802      	ldr	r0, [pc, #8]	; (8000e3c <Motor_Init+0x18>)
 8000e34:	f005 fca8 	bl	8006788 <HAL_TIM_PWM_Start>
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200003c8 	.word	0x200003c8

08000e40 <PID_Timer_Stop>:
float pid_setpoint = 2047;
//Runtime variables
float pid_last_input = 0;
float pid_output_sum = 0;

void PID_Timer_Stop(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <PID_Timer_Stop+0x10>)
 8000e46:	f005 fc19 	bl	800667c <HAL_TIM_Base_Stop_IT>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000410 	.word	0x20000410

08000e54 <PID_Timer_Restart>:
void PID_Timer_Restart(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <PID_Timer_Restart+0x1c>)
 8000e5a:	f005 fc0f 	bl	800667c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <PID_Timer_Restart+0x1c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <PID_Timer_Restart+0x1c>)
 8000e68:	f005 fbb6 	bl	80065d8 <HAL_TIM_Base_Start_IT>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000410 	.word	0x20000410

08000e74 <PID_Timer_Interrupt>:
void PID_Timer_Interrupt(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	PID_Compute();
 8000e78:	f000 f838 	bl	8000eec <PID_Compute>
	PID_Ready(pid_output);
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <PID_Timer_Interrupt+0x1c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fca9 	bl	80007d8 <PID_Ready>
	PID_Timer_Restart();
 8000e86:	f7ff ffe5 	bl	8000e54 <PID_Timer_Restart>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001e0 	.word	0x200001e0

08000e94 <PID_Get_Sampling_Time>:

uint16_t PID_Get_Sampling_Time(){
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <PID_Get_Sampling_Time+0x1c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <PID_Get_Sampling_Time+0x20>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	095b      	lsrs	r3, r3, #5
 8000ea6:	b29b      	uxth	r3, r3
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	20000410 	.word	0x20000410
 8000eb4:	51eb851f 	.word	0x51eb851f

08000eb8 <PID_Set_Sampling_Time>:
void PID_Set_Sampling_Time(uint16_t ms){
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	2264      	movs	r2, #100	; 0x64
 8000ec6:	fb03 f202 	mul.w	r2, r3, r2
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <PID_Set_Sampling_Time+0x30>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	2264      	movs	r2, #100	; 0x64
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <PID_Set_Sampling_Time+0x30>)
 8000edc:	60da      	str	r2, [r3, #12]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	20000410 	.word	0x20000410

08000eec <PID_Compute>:
void PID_Compute(){
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
	float input = pid_input;
 8000ef2:	4b94      	ldr	r3, [pc, #592]	; (8001144 <PID_Compute+0x258>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	60bb      	str	r3, [r7, #8]
	float error = pid_setpoint - input;
 8000ef8:	4b93      	ldr	r3, [pc, #588]	; (8001148 <PID_Compute+0x25c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff f928 	bl	8000154 <__aeabi_fsub>
 8000f04:	4603      	mov	r3, r0
 8000f06:	607b      	str	r3, [r7, #4]
	float input_d = (input - pid_last_input);
 8000f08:	4b90      	ldr	r3, [pc, #576]	; (800114c <PID_Compute+0x260>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	68b8      	ldr	r0, [r7, #8]
 8000f10:	f7ff f920 	bl	8000154 <__aeabi_fsub>
 8000f14:	4603      	mov	r3, r0
 8000f16:	603b      	str	r3, [r7, #0]
	float output = 0;
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]

	if(error >= pid_split_1){
 8000f1e:	4b8c      	ldr	r3, [pc, #560]	; (8001150 <PID_Compute+0x264>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff f9cc 	bl	80002c0 <__aeabi_i2f>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff fbcd 	bl	80006cc <__aeabi_fcmpge>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d074      	beq.n	8001022 <PID_Compute+0x136>
		pid_output_sum += pid_ki_1 * error;
 8000f38:	4b86      	ldr	r3, [pc, #536]	; (8001154 <PID_Compute+0x268>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fa12 	bl	8000368 <__aeabi_fmul>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b83      	ldr	r3, [pc, #524]	; (8001158 <PID_Compute+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f7ff f902 	bl	8000158 <__addsf3>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b7f      	ldr	r3, [pc, #508]	; (8001158 <PID_Compute+0x26c>)
 8000f5a:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8000f5c:	4b7f      	ldr	r3, [pc, #508]	; (800115c <PID_Compute+0x270>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d110      	bne.n	8000f86 <PID_Compute+0x9a>
			pid_output_sum -= pid_kp_1 * input_d;
 8000f64:	4b7c      	ldr	r3, [pc, #496]	; (8001158 <PID_Compute+0x26c>)
 8000f66:	681c      	ldr	r4, [r3, #0]
 8000f68:	4b7d      	ldr	r3, [pc, #500]	; (8001160 <PID_Compute+0x274>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6839      	ldr	r1, [r7, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff f9fa 	bl	8000368 <__aeabi_fmul>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4619      	mov	r1, r3
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f7ff f8eb 	bl	8000154 <__aeabi_fsub>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b75      	ldr	r3, [pc, #468]	; (8001158 <PID_Compute+0x26c>)
 8000f84:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 8000f86:	4b74      	ldr	r3, [pc, #464]	; (8001158 <PID_Compute+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4976      	ldr	r1, [pc, #472]	; (8001164 <PID_Compute+0x278>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fba7 	bl	80006e0 <__aeabi_fcmpgt>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <PID_Compute+0xb4>
			pid_output_sum = 1000.0f;
 8000f98:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <PID_Compute+0x26c>)
 8000f9a:	4a72      	ldr	r2, [pc, #456]	; (8001164 <PID_Compute+0x278>)
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e00b      	b.n	8000fb8 <PID_Compute+0xcc>
		}else if(pid_output_sum < -1000.0f){
 8000fa0:	4b6d      	ldr	r3, [pc, #436]	; (8001158 <PID_Compute+0x26c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4970      	ldr	r1, [pc, #448]	; (8001168 <PID_Compute+0x27c>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fb7c 	bl	80006a4 <__aeabi_fcmplt>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <PID_Compute+0xcc>
			pid_output_sum = -1000.0f;
 8000fb2:	4b69      	ldr	r3, [pc, #420]	; (8001158 <PID_Compute+0x26c>)
 8000fb4:	4a6c      	ldr	r2, [pc, #432]	; (8001168 <PID_Compute+0x27c>)
 8000fb6:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8000fb8:	4b68      	ldr	r3, [pc, #416]	; (800115c <PID_Compute+0x270>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <PID_Compute+0xe4>
			output = pid_kp_1 * error;
 8000fc0:	4b67      	ldr	r3, [pc, #412]	; (8001160 <PID_Compute+0x274>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff f9ce 	bl	8000368 <__aeabi_fmul>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_1 * input_d;
 8000fd0:	4b61      	ldr	r3, [pc, #388]	; (8001158 <PID_Compute+0x26c>)
 8000fd2:	681c      	ldr	r4, [r3, #0]
 8000fd4:	4b65      	ldr	r3, [pc, #404]	; (800116c <PID_Compute+0x280>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f9c4 	bl	8000368 <__aeabi_fmul>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff f8b5 	bl	8000154 <__aeabi_fsub>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4619      	mov	r1, r3
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f7ff f8b2 	bl	8000158 <__addsf3>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8000ff8:	495a      	ldr	r1, [pc, #360]	; (8001164 <PID_Compute+0x278>)
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff fb70 	bl	80006e0 <__aeabi_fcmpgt>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <PID_Compute+0x120>
			output = 1000.0f;
 8001006:	4b57      	ldr	r3, [pc, #348]	; (8001164 <PID_Compute+0x278>)
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e12c      	b.n	8001266 <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 800100c:	4956      	ldr	r1, [pc, #344]	; (8001168 <PID_Compute+0x27c>)
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff fb48 	bl	80006a4 <__aeabi_fcmplt>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 8125 	beq.w	8001266 <PID_Compute+0x37a>
			output = -1000.0f;
 800101c:	4b52      	ldr	r3, [pc, #328]	; (8001168 <PID_Compute+0x27c>)
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e121      	b.n	8001266 <PID_Compute+0x37a>
		}
	}else if((error < pid_split_1) && (error >= pid_split_2)){
 8001022:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <PID_Compute+0x264>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f94a 	bl	80002c0 <__aeabi_i2f>
 800102c:	4603      	mov	r3, r0
 800102e:	4619      	mov	r1, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fb37 	bl	80006a4 <__aeabi_fcmplt>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80a1 	beq.w	8001180 <PID_Compute+0x294>
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <PID_Compute+0x284>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f93c 	bl	80002c0 <__aeabi_i2f>
 8001048:	4603      	mov	r3, r0
 800104a:	4619      	mov	r1, r3
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fb3d 	bl	80006cc <__aeabi_fcmpge>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 8093 	beq.w	8001180 <PID_Compute+0x294>
		pid_output_sum += pid_ki_2 * error;
 800105a:	4b46      	ldr	r3, [pc, #280]	; (8001174 <PID_Compute+0x288>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f981 	bl	8000368 <__aeabi_fmul>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <PID_Compute+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f7ff f871 	bl	8000158 <__addsf3>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b37      	ldr	r3, [pc, #220]	; (8001158 <PID_Compute+0x26c>)
 800107c:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <PID_Compute+0x270>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d110      	bne.n	80010a8 <PID_Compute+0x1bc>
			pid_output_sum -= pid_kp_2 * input_d;
 8001086:	4b34      	ldr	r3, [pc, #208]	; (8001158 <PID_Compute+0x26c>)
 8001088:	681c      	ldr	r4, [r3, #0]
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <PID_Compute+0x28c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f969 	bl	8000368 <__aeabi_fmul>
 8001096:	4603      	mov	r3, r0
 8001098:	4619      	mov	r1, r3
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff f85a 	bl	8000154 <__aeabi_fsub>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <PID_Compute+0x26c>)
 80010a6:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <PID_Compute+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	492d      	ldr	r1, [pc, #180]	; (8001164 <PID_Compute+0x278>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fb16 	bl	80006e0 <__aeabi_fcmpgt>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <PID_Compute+0x1d6>
			pid_output_sum = 1000.0f;
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <PID_Compute+0x26c>)
 80010bc:	4a29      	ldr	r2, [pc, #164]	; (8001164 <PID_Compute+0x278>)
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e00b      	b.n	80010da <PID_Compute+0x1ee>
		}else if(pid_output_sum < -1000.0f){
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <PID_Compute+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4928      	ldr	r1, [pc, #160]	; (8001168 <PID_Compute+0x27c>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff faeb 	bl	80006a4 <__aeabi_fcmplt>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <PID_Compute+0x1ee>
			pid_output_sum = -1000.0f;
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <PID_Compute+0x26c>)
 80010d6:	4a24      	ldr	r2, [pc, #144]	; (8001168 <PID_Compute+0x27c>)
 80010d8:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <PID_Compute+0x270>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <PID_Compute+0x206>
			output = pid_kp_2 * error;
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <PID_Compute+0x28c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff f93d 	bl	8000368 <__aeabi_fmul>
 80010ee:	4603      	mov	r3, r0
 80010f0:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_2 * input_d;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <PID_Compute+0x26c>)
 80010f4:	681c      	ldr	r4, [r3, #0]
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <PID_Compute+0x290>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f933 	bl	8000368 <__aeabi_fmul>
 8001102:	4603      	mov	r3, r0
 8001104:	4619      	mov	r1, r3
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff f824 	bl	8000154 <__aeabi_fsub>
 800110c:	4603      	mov	r3, r0
 800110e:	4619      	mov	r1, r3
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff f821 	bl	8000158 <__addsf3>
 8001116:	4603      	mov	r3, r0
 8001118:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800111a:	4912      	ldr	r1, [pc, #72]	; (8001164 <PID_Compute+0x278>)
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff fadf 	bl	80006e0 <__aeabi_fcmpgt>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <PID_Compute+0x242>
			output = 1000.0f;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <PID_Compute+0x278>)
 800112a:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800112c:	e09b      	b.n	8001266 <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 800112e:	490e      	ldr	r1, [pc, #56]	; (8001168 <PID_Compute+0x27c>)
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff fab7 	bl	80006a4 <__aeabi_fcmplt>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d100      	bne.n	800113e <PID_Compute+0x252>
		if(output > 1000.0f){
 800113c:	e093      	b.n	8001266 <PID_Compute+0x37a>
			output = -1000.0f;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <PID_Compute+0x27c>)
 8001140:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001142:	e090      	b.n	8001266 <PID_Compute+0x37a>
 8001144:	200001dc 	.word	0x200001dc
 8001148:	20000024 	.word	0x20000024
 800114c:	200001e4 	.word	0x200001e4
 8001150:	2000001c 	.word	0x2000001c
 8001154:	200001cc 	.word	0x200001cc
 8001158:	200001e8 	.word	0x200001e8
 800115c:	20000020 	.word	0x20000020
 8001160:	20000004 	.word	0x20000004
 8001164:	447a0000 	.word	0x447a0000
 8001168:	c47a0000 	.word	0xc47a0000
 800116c:	20000008 	.word	0x20000008
 8001170:	2000001e 	.word	0x2000001e
 8001174:	200001d0 	.word	0x200001d0
 8001178:	2000000c 	.word	0x2000000c
 800117c:	20000010 	.word	0x20000010
		}
	}else{
		pid_output_sum += pid_ki_3 * error;
 8001180:	4b3e      	ldr	r3, [pc, #248]	; (800127c <PID_Compute+0x390>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f8ee 	bl	8000368 <__aeabi_fmul>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <PID_Compute+0x394>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	4610      	mov	r0, r2
 8001198:	f7fe ffde 	bl	8000158 <__addsf3>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b37      	ldr	r3, [pc, #220]	; (8001280 <PID_Compute+0x394>)
 80011a2:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 80011a4:	4b37      	ldr	r3, [pc, #220]	; (8001284 <PID_Compute+0x398>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d110      	bne.n	80011ce <PID_Compute+0x2e2>
			pid_output_sum -= pid_kp_3 * input_d;
 80011ac:	4b34      	ldr	r3, [pc, #208]	; (8001280 <PID_Compute+0x394>)
 80011ae:	681c      	ldr	r4, [r3, #0]
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <PID_Compute+0x39c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6839      	ldr	r1, [r7, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f8d6 	bl	8000368 <__aeabi_fmul>
 80011bc:	4603      	mov	r3, r0
 80011be:	4619      	mov	r1, r3
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7fe ffc7 	bl	8000154 <__aeabi_fsub>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <PID_Compute+0x394>)
 80011cc:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <PID_Compute+0x394>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	492e      	ldr	r1, [pc, #184]	; (800128c <PID_Compute+0x3a0>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fa83 	bl	80006e0 <__aeabi_fcmpgt>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <PID_Compute+0x2fc>
			pid_output_sum = 1000.0f;
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <PID_Compute+0x394>)
 80011e2:	4a2a      	ldr	r2, [pc, #168]	; (800128c <PID_Compute+0x3a0>)
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e00b      	b.n	8001200 <PID_Compute+0x314>
		}else if(pid_output_sum < -1000.0f){
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <PID_Compute+0x394>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4928      	ldr	r1, [pc, #160]	; (8001290 <PID_Compute+0x3a4>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fa58 	bl	80006a4 <__aeabi_fcmplt>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <PID_Compute+0x314>
			pid_output_sum = -1000.0f;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <PID_Compute+0x394>)
 80011fc:	4a24      	ldr	r2, [pc, #144]	; (8001290 <PID_Compute+0x3a4>)
 80011fe:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <PID_Compute+0x398>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d107      	bne.n	8001218 <PID_Compute+0x32c>
			output = pid_kp_3 * error;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <PID_Compute+0x39c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff f8aa 	bl	8000368 <__aeabi_fmul>
 8001214:	4603      	mov	r3, r0
 8001216:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_3 * input_d;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <PID_Compute+0x394>)
 800121a:	681c      	ldr	r4, [r3, #0]
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <PID_Compute+0x3a8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6839      	ldr	r1, [r7, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f8a0 	bl	8000368 <__aeabi_fmul>
 8001228:	4603      	mov	r3, r0
 800122a:	4619      	mov	r1, r3
 800122c:	4620      	mov	r0, r4
 800122e:	f7fe ff91 	bl	8000154 <__aeabi_fsub>
 8001232:	4603      	mov	r3, r0
 8001234:	4619      	mov	r1, r3
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7fe ff8e 	bl	8000158 <__addsf3>
 800123c:	4603      	mov	r3, r0
 800123e:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001240:	4912      	ldr	r1, [pc, #72]	; (800128c <PID_Compute+0x3a0>)
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f7ff fa4c 	bl	80006e0 <__aeabi_fcmpgt>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <PID_Compute+0x368>
			output = 1000.0f;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <PID_Compute+0x3a0>)
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e008      	b.n	8001266 <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001254:	490e      	ldr	r1, [pc, #56]	; (8001290 <PID_Compute+0x3a4>)
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fa24 	bl	80006a4 <__aeabi_fcmplt>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <PID_Compute+0x37a>
			output = -1000.0f;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <PID_Compute+0x3a4>)
 8001264:	60fb      	str	r3, [r7, #12]
		}
	}

	pid_output = output;
 8001266:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <PID_Compute+0x3ac>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6013      	str	r3, [r2, #0]
	pid_last_input = input;
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <PID_Compute+0x3b0>)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	6013      	str	r3, [r2, #0]
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	200001d4 	.word	0x200001d4
 8001280:	200001e8 	.word	0x200001e8
 8001284:	20000020 	.word	0x20000020
 8001288:	20000014 	.word	0x20000014
 800128c:	447a0000 	.word	0x447a0000
 8001290:	c47a0000 	.word	0xc47a0000
 8001294:	20000018 	.word	0x20000018
 8001298:	200001e0 	.word	0x200001e0
 800129c:	200001e4 	.word	0x200001e4

080012a0 <PID_Start>:
void PID_Start(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	pid_last_input = pid_input;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <PID_Start+0x30>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <PID_Start+0x34>)
 80012aa:	6013      	str	r3, [r2, #0]
	pid_output_sum = 0;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <PID_Start+0x38>)
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
    PID_Set_Sampling_Time(pid_sampling_time);
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <PID_Start+0x3c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fdfc 	bl	8000eb8 <PID_Set_Sampling_Time>
	PID_Timer_Restart();
 80012c0:	f7ff fdc8 	bl	8000e54 <PID_Timer_Restart>
	pid_running = 1;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <PID_Start+0x40>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001dc 	.word	0x200001dc
 80012d4:	200001e4 	.word	0x200001e4
 80012d8:	200001e8 	.word	0x200001e8
 80012dc:	20000002 	.word	0x20000002
 80012e0:	200001d8 	.word	0x200001d8

080012e4 <PID_Stop>:
void PID_Stop(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	PID_Timer_Stop();
 80012e8:	f7ff fdaa 	bl	8000e40 <PID_Timer_Stop>
	PID_Ready(0);
 80012ec:	f04f 0000 	mov.w	r0, #0
 80012f0:	f7ff fa72 	bl	80007d8 <PID_Ready>
	pid_running = 0;
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <PID_Stop+0x1c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001d8 	.word	0x200001d8

08001304 <Potentiometer_ADC_Interrupt>:
uint32_t potentiometer_adctmp = 0;
uint16_t potentiometer_adccnt = 0;
uint8_t potentiometer_init_cplt = 0;
float potentiometer_position = 0;

void Potentiometer_ADC_Interrupt(){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	potentiometer_adctmp += HAL_ADC_GetValue(&hadc1);
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <Potentiometer_ADC_Interrupt+0x60>)
 800130a:	f001 fe41 	bl	8002f90 <HAL_ADC_GetValue>
 800130e:	4602      	mov	r2, r0
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <Potentiometer_ADC_Interrupt+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4413      	add	r3, r2
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <Potentiometer_ADC_Interrupt+0x64>)
 8001318:	6013      	str	r3, [r2, #0]
	potentiometer_adccnt++;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <Potentiometer_ADC_Interrupt+0x68>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <Potentiometer_ADC_Interrupt+0x68>)
 8001324:	801a      	strh	r2, [r3, #0]
	if(potentiometer_adccnt == POTENTIOMETER_SAMPLE_CNT){
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <Potentiometer_ADC_Interrupt+0x68>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d115      	bne.n	800135a <Potentiometer_ADC_Interrupt+0x56>
		potentiometer_position = (float)potentiometer_adctmp/POTENTIOMETER_SAMPLE_CNT;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <Potentiometer_ADC_Interrupt+0x64>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffc0 	bl	80002b8 <__aeabi_ui2f>
 8001338:	4603      	mov	r3, r0
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <Potentiometer_ADC_Interrupt+0x6c>)
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8c7 	bl	80004d0 <__aeabi_fdiv>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <Potentiometer_ADC_Interrupt+0x70>)
 8001348:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 800134a:	f7ff f9f9 	bl	8000740 <Potentiometer_Ready>
		potentiometer_adccnt = 0;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <Potentiometer_ADC_Interrupt+0x68>)
 8001350:	2200      	movs	r2, #0
 8001352:	801a      	strh	r2, [r3, #0]
		potentiometer_adctmp = 0;
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <Potentiometer_ADC_Interrupt+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
	}
	potentiometer_init_cplt = 1;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <Potentiometer_ADC_Interrupt+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000390 	.word	0x20000390
 8001368:	200001f0 	.word	0x200001f0
 800136c:	200001f4 	.word	0x200001f4
 8001370:	42c80000 	.word	0x42c80000
 8001374:	200001f8 	.word	0x200001f8
 8001378:	200001f6 	.word	0x200001f6

0800137c <Potentiometer_Init>:

void Potentiometer_Init(){
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001380:	bf00      	nop
 8001382:	4808      	ldr	r0, [pc, #32]	; (80013a4 <Potentiometer_Init+0x28>)
 8001384:	f002 f870 	bl	8003468 <HAL_ADCEx_Calibration_Start>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f9      	bne.n	8001382 <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <Potentiometer_Init+0x28>)
 8001390:	f001 fd48 	bl	8002e24 <HAL_ADC_Start_IT>
	while(!potentiometer_init_cplt);
 8001394:	bf00      	nop
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <Potentiometer_Init+0x2c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0fb      	beq.n	8001396 <Potentiometer_Init+0x1a>
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000390 	.word	0x20000390
 80013a8:	200001f6 	.word	0x200001f6

080013ac <Settings_Read>:
extern uint16_t pid_split_2;
extern uint8_t pid_sampling_time;

uint8_t settings[SETTINGS_TOTAL_LENGTH];

void Settings_Read(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	//Read
	Flash_Read(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	49a3      	ldr	r1, [pc, #652]	; (8001644 <Settings_Read+0x298>)
 80013b6:	48a4      	ldr	r0, [pc, #656]	; (8001648 <Settings_Read+0x29c>)
 80013b8:	f7ff fabe 	bl	8000938 <Flash_Read>
	//Get CRC
	uint32_t crc = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&crc, (uint32_t)&settings[SETTINGS_TOTAL_LENGTH - 4]);
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4aa2      	ldr	r2, [pc, #648]	; (800164c <Settings_Read+0x2a0>)
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb72 	bl	8000ab0 <General_Copy_32_Bit>
	//If CRC is correct
	if(HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1) == crc){
 80013cc:	220f      	movs	r2, #15
 80013ce:	499e      	ldr	r1, [pc, #632]	; (8001648 <Settings_Read+0x29c>)
 80013d0:	489f      	ldr	r0, [pc, #636]	; (8001650 <Settings_Read+0x2a4>)
 80013d2:	f002 fa28 	bl	8003826 <HAL_CRC_Calculate>
 80013d6:	4602      	mov	r2, r0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	f040 8249 	bne.w	8001872 <Settings_Read+0x4c6>
		//Parse
		General_Copy_16_Bit((uint32_t)&potentiometer_min, (uint32_t)&settings[0]);
 80013e0:	4b9c      	ldr	r3, [pc, #624]	; (8001654 <Settings_Read+0x2a8>)
 80013e2:	4a99      	ldr	r2, [pc, #612]	; (8001648 <Settings_Read+0x29c>)
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fb7f 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&potentiometer_max, (uint32_t)&settings[2]);
 80013ec:	4b9a      	ldr	r3, [pc, #616]	; (8001658 <Settings_Read+0x2ac>)
 80013ee:	4a9b      	ldr	r2, [pc, #620]	; (800165c <Settings_Read+0x2b0>)
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fb79 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&motor_max_power, (uint32_t)&settings[4]);
 80013f8:	4b99      	ldr	r3, [pc, #612]	; (8001660 <Settings_Read+0x2b4>)
 80013fa:	4a9a      	ldr	r2, [pc, #616]	; (8001664 <Settings_Read+0x2b8>)
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fb73 	bl	8000aea <General_Copy_16_Bit>
		motor_invert = settings[6];
 8001404:	4b90      	ldr	r3, [pc, #576]	; (8001648 <Settings_Read+0x29c>)
 8001406:	799a      	ldrb	r2, [r3, #6]
 8001408:	4b97      	ldr	r3, [pc, #604]	; (8001668 <Settings_Read+0x2bc>)
 800140a:	701a      	strb	r2, [r3, #0]
		signal_ignore = settings[7];
 800140c:	4b8e      	ldr	r3, [pc, #568]	; (8001648 <Settings_Read+0x29c>)
 800140e:	79da      	ldrb	r2, [r3, #7]
 8001410:	4b96      	ldr	r3, [pc, #600]	; (800166c <Settings_Read+0x2c0>)
 8001412:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&settings[8]);
 8001414:	4b96      	ldr	r3, [pc, #600]	; (8001670 <Settings_Read+0x2c4>)
 8001416:	4a97      	ldr	r2, [pc, #604]	; (8001674 <Settings_Read+0x2c8>)
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fb48 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&settings[12]);
 8001420:	4b95      	ldr	r3, [pc, #596]	; (8001678 <Settings_Read+0x2cc>)
 8001422:	4a96      	ldr	r2, [pc, #600]	; (800167c <Settings_Read+0x2d0>)
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fb42 	bl	8000ab0 <General_Copy_32_Bit>
		led_mode = settings[16];
 800142c:	4b86      	ldr	r3, [pc, #536]	; (8001648 <Settings_Read+0x29c>)
 800142e:	7c1a      	ldrb	r2, [r3, #16]
 8001430:	4b93      	ldr	r3, [pc, #588]	; (8001680 <Settings_Read+0x2d4>)
 8001432:	701a      	strb	r2, [r3, #0]
		pid_on = settings[17];
 8001434:	4b84      	ldr	r3, [pc, #528]	; (8001648 <Settings_Read+0x29c>)
 8001436:	7c5a      	ldrb	r2, [r3, #17]
 8001438:	4b92      	ldr	r3, [pc, #584]	; (8001684 <Settings_Read+0x2d8>)
 800143a:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&settings[18]);
 800143c:	4b92      	ldr	r3, [pc, #584]	; (8001688 <Settings_Read+0x2dc>)
 800143e:	4a93      	ldr	r2, [pc, #588]	; (800168c <Settings_Read+0x2e0>)
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fb34 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&settings[22]);
 8001448:	4b91      	ldr	r3, [pc, #580]	; (8001690 <Settings_Read+0x2e4>)
 800144a:	4a92      	ldr	r2, [pc, #584]	; (8001694 <Settings_Read+0x2e8>)
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fb2e 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&settings[26]);
 8001454:	4b90      	ldr	r3, [pc, #576]	; (8001698 <Settings_Read+0x2ec>)
 8001456:	4a91      	ldr	r2, [pc, #580]	; (800169c <Settings_Read+0x2f0>)
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fb28 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&settings[30]);
 8001460:	4b8f      	ldr	r3, [pc, #572]	; (80016a0 <Settings_Read+0x2f4>)
 8001462:	4a90      	ldr	r2, [pc, #576]	; (80016a4 <Settings_Read+0x2f8>)
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fb22 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&settings[34]);
 800146c:	4b8e      	ldr	r3, [pc, #568]	; (80016a8 <Settings_Read+0x2fc>)
 800146e:	4a8f      	ldr	r2, [pc, #572]	; (80016ac <Settings_Read+0x300>)
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fb1c 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&settings[38]);
 8001478:	4b8d      	ldr	r3, [pc, #564]	; (80016b0 <Settings_Read+0x304>)
 800147a:	4a8e      	ldr	r2, [pc, #568]	; (80016b4 <Settings_Read+0x308>)
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fb16 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&settings[42]);
 8001484:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <Settings_Read+0x30c>)
 8001486:	4a8d      	ldr	r2, [pc, #564]	; (80016bc <Settings_Read+0x310>)
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb10 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&settings[46]);
 8001490:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <Settings_Read+0x314>)
 8001492:	4a8c      	ldr	r2, [pc, #560]	; (80016c4 <Settings_Read+0x318>)
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fb0a 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&settings[50]);
 800149c:	4b8a      	ldr	r3, [pc, #552]	; (80016c8 <Settings_Read+0x31c>)
 800149e:	4a8b      	ldr	r2, [pc, #556]	; (80016cc <Settings_Read+0x320>)
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fb04 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&settings[54]);
 80014a8:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <Settings_Read+0x324>)
 80014aa:	4a8a      	ldr	r2, [pc, #552]	; (80016d4 <Settings_Read+0x328>)
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fb1b 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&settings[56]);
 80014b4:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <Settings_Read+0x32c>)
 80014b6:	4a89      	ldr	r2, [pc, #548]	; (80016dc <Settings_Read+0x330>)
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fb15 	bl	8000aea <General_Copy_16_Bit>
		pid_sampling_time = settings[58];
 80014c0:	4b61      	ldr	r3, [pc, #388]	; (8001648 <Settings_Read+0x29c>)
 80014c2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80014c6:	4b86      	ldr	r3, [pc, #536]	; (80016e0 <Settings_Read+0x334>)
 80014c8:	701a      	strb	r2, [r3, #0]

		//Verify
		if((potentiometer_min < SETTINGS_DEF_POTENTIOMETER_MIN_MIN)||(potentiometer_min > SETTINGS_DEF_POTENTIOMETER_MIN_MAX)){
 80014ca:	4b62      	ldr	r3, [pc, #392]	; (8001654 <Settings_Read+0x2a8>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 80014d2:	d302      	bcc.n	80014da <Settings_Read+0x12e>
			potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 80014d4:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <Settings_Read+0x2a8>)
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	801a      	strh	r2, [r3, #0]
		}
		if((potentiometer_max < SETTINGS_DEF_POTENTIOMETER_MAX_MIN)||(potentiometer_max > SETTINGS_DEF_POTENTIOMETER_MAX_MAX)){
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <Settings_Read+0x2ac>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	2b7f      	cmp	r3, #127	; 0x7f
 80014e0:	d904      	bls.n	80014ec <Settings_Read+0x140>
 80014e2:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <Settings_Read+0x2ac>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ea:	d303      	bcc.n	80014f4 <Settings_Read+0x148>
			potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 80014ec:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <Settings_Read+0x2ac>)
 80014ee:	f640 727f 	movw	r2, #3967	; 0xf7f
 80014f2:	801a      	strh	r2, [r3, #0]
		}
		if((motor_max_power < SETTINGS_DEF_MOTOR_MAX_POWER_MIN)||(motor_max_power > SETTINGS_DEF_MOTOR_MAX_POWER_MAX)){
 80014f4:	4b5a      	ldr	r3, [pc, #360]	; (8001660 <Settings_Read+0x2b4>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fc:	d903      	bls.n	8001506 <Settings_Read+0x15a>
			motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <Settings_Read+0x2b4>)
 8001500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001504:	801a      	strh	r2, [r3, #0]
		}
		if((motor_invert != MOTOR_NORMAL) && (motor_invert != MOTOR_INVERT)){
 8001506:	4b58      	ldr	r3, [pc, #352]	; (8001668 <Settings_Read+0x2bc>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <Settings_Read+0x170>
 800150e:	4b56      	ldr	r3, [pc, #344]	; (8001668 <Settings_Read+0x2bc>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d002      	beq.n	800151c <Settings_Read+0x170>
			motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8001516:	4b54      	ldr	r3, [pc, #336]	; (8001668 <Settings_Read+0x2bc>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
		}
		if((signal_ignore != GENERAL_TRUE) && (signal_ignore != GENERAL_FALSE)){
 800151c:	4b53      	ldr	r3, [pc, #332]	; (800166c <Settings_Read+0x2c0>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d006      	beq.n	8001532 <Settings_Read+0x186>
 8001524:	4b51      	ldr	r3, [pc, #324]	; (800166c <Settings_Read+0x2c0>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <Settings_Read+0x186>
			signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 800152c:	4b4f      	ldr	r3, [pc, #316]	; (800166c <Settings_Read+0x2c0>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
		}
		if((signal_length < SETTINGS_DEF_SIGNAL_LENGTH_MIN)||(signal_length > SETTINGS_DEF_SIGNAL_LENGTH_MAX)){
 8001532:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <Settings_Read+0x2c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f8b2 	bl	80006a4 <__aeabi_fcmplt>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <Settings_Read+0x1ae>
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <Settings_Read+0x2c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f8c6 	bl	80006e0 <__aeabi_fcmpgt>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <Settings_Read+0x1b6>
			signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 800155a:	4b45      	ldr	r3, [pc, #276]	; (8001670 <Settings_Read+0x2c4>)
 800155c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001560:	601a      	str	r2, [r3, #0]
		}
		if((signal_timeout < SETTINGS_DEF_SIGNAL_TIMEOUT_MIN)||(signal_timeout > SETTINGS_DEF_SIGNAL_TIMEOUT_MAX)){
 8001562:	4b45      	ldr	r3, [pc, #276]	; (8001678 <Settings_Read+0x2cc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	495f      	ldr	r1, [pc, #380]	; (80016e4 <Settings_Read+0x338>)
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f89b 	bl	80006a4 <__aeabi_fcmplt>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d108      	bne.n	8001586 <Settings_Read+0x1da>
 8001574:	4b40      	ldr	r3, [pc, #256]	; (8001678 <Settings_Read+0x2cc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	495b      	ldr	r1, [pc, #364]	; (80016e8 <Settings_Read+0x33c>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f8b0 	bl	80006e0 <__aeabi_fcmpgt>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <Settings_Read+0x1e0>
			signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8001586:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <Settings_Read+0x2cc>)
 8001588:	4a56      	ldr	r2, [pc, #344]	; (80016e4 <Settings_Read+0x338>)
 800158a:	601a      	str	r2, [r3, #0]
		}
		if((led_mode != LED_MODE_OFF) && (led_mode != LED_MODE_POWER) && (led_mode != LED_MODE_SIGNAL) && (led_mode != LED_MODE_POSITION_CHANGE)){
 800158c:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <Settings_Read+0x2d4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <Settings_Read+0x206>
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <Settings_Read+0x2d4>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d00a      	beq.n	80015b2 <Settings_Read+0x206>
 800159c:	4b38      	ldr	r3, [pc, #224]	; (8001680 <Settings_Read+0x2d4>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d006      	beq.n	80015b2 <Settings_Read+0x206>
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <Settings_Read+0x2d4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d002      	beq.n	80015b2 <Settings_Read+0x206>
			led_mode = SETTINGS_DEF_LED_MODE_DEF;
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <Settings_Read+0x2d4>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
		}
		if((pid_on != PID_ON_M) && (pid_on != PID_ON_E)){
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <Settings_Read+0x2d8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <Settings_Read+0x21c>
 80015ba:	4b32      	ldr	r3, [pc, #200]	; (8001684 <Settings_Read+0x2d8>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d002      	beq.n	80015c8 <Settings_Read+0x21c>
			pid_on = SETTINGS_DEF_PID_ON_DEF;
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <Settings_Read+0x2d8>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
		}
		if((pid_kp_1 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_1 > SETTINGS_DEF_PID_KP_MAX)){
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <Settings_Read+0x2dc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f04f 0100 	mov.w	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f867 	bl	80006a4 <__aeabi_fcmplt>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d108      	bne.n	80015ee <Settings_Read+0x242>
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <Settings_Read+0x2dc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4942      	ldr	r1, [pc, #264]	; (80016ec <Settings_Read+0x340>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f87c 	bl	80006e0 <__aeabi_fcmpgt>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <Settings_Read+0x24a>
			pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <Settings_Read+0x2dc>)
 80015f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015f4:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_1 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_1 > SETTINGS_DEF_PID_KI_MAX)){
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <Settings_Read+0x2e4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f850 	bl	80006a4 <__aeabi_fcmplt>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <Settings_Read+0x270>
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <Settings_Read+0x2e4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4937      	ldr	r1, [pc, #220]	; (80016ec <Settings_Read+0x340>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f865 	bl	80006e0 <__aeabi_fcmpgt>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <Settings_Read+0x278>
			pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <Settings_Read+0x2e4>)
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_1 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_1 > SETTINGS_DEF_PID_KD_MAX)){
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <Settings_Read+0x2ec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f839 	bl	80006a4 <__aeabi_fcmplt>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d160      	bne.n	80016fa <Settings_Read+0x34e>
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <Settings_Read+0x2ec>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	492b      	ldr	r1, [pc, #172]	; (80016ec <Settings_Read+0x340>)
 800163e:	4618      	mov	r0, r3
 8001640:	e056      	b.n	80016f0 <Settings_Read+0x344>
 8001642:	bf00      	nop
 8001644:	0800fc00 	.word	0x0800fc00
 8001648:	200001fc 	.word	0x200001fc
 800164c:	20000238 	.word	0x20000238
 8001650:	200003c0 	.word	0x200003c0
 8001654:	200001ec 	.word	0x200001ec
 8001658:	200001ee 	.word	0x200001ee
 800165c:	200001fe 	.word	0x200001fe
 8001660:	20000000 	.word	0x20000000
 8001664:	20000200 	.word	0x20000200
 8001668:	200001c7 	.word	0x200001c7
 800166c:	2000023c 	.word	0x2000023c
 8001670:	20000240 	.word	0x20000240
 8001674:	20000204 	.word	0x20000204
 8001678:	20000244 	.word	0x20000244
 800167c:	20000208 	.word	0x20000208
 8001680:	200001c4 	.word	0x200001c4
 8001684:	20000020 	.word	0x20000020
 8001688:	20000004 	.word	0x20000004
 800168c:	2000020e 	.word	0x2000020e
 8001690:	200001cc 	.word	0x200001cc
 8001694:	20000212 	.word	0x20000212
 8001698:	20000008 	.word	0x20000008
 800169c:	20000216 	.word	0x20000216
 80016a0:	2000000c 	.word	0x2000000c
 80016a4:	2000021a 	.word	0x2000021a
 80016a8:	200001d0 	.word	0x200001d0
 80016ac:	2000021e 	.word	0x2000021e
 80016b0:	20000010 	.word	0x20000010
 80016b4:	20000222 	.word	0x20000222
 80016b8:	20000014 	.word	0x20000014
 80016bc:	20000226 	.word	0x20000226
 80016c0:	200001d4 	.word	0x200001d4
 80016c4:	2000022a 	.word	0x2000022a
 80016c8:	20000018 	.word	0x20000018
 80016cc:	2000022e 	.word	0x2000022e
 80016d0:	2000001c 	.word	0x2000001c
 80016d4:	20000232 	.word	0x20000232
 80016d8:	2000001e 	.word	0x2000001e
 80016dc:	20000234 	.word	0x20000234
 80016e0:	20000002 	.word	0x20000002
 80016e4:	41a00000 	.word	0x41a00000
 80016e8:	43480000 	.word	0x43480000
 80016ec:	42c80000 	.word	0x42c80000
 80016f0:	f7fe fff6 	bl	80006e0 <__aeabi_fcmpgt>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <Settings_Read+0x354>
			pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 80016fa:	4b85      	ldr	r3, [pc, #532]	; (8001910 <Settings_Read+0x564>)
 80016fc:	4a85      	ldr	r2, [pc, #532]	; (8001914 <Settings_Read+0x568>)
 80016fe:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_2 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_2 > SETTINGS_DEF_PID_KP_MAX)){
 8001700:	4b85      	ldr	r3, [pc, #532]	; (8001918 <Settings_Read+0x56c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f04f 0100 	mov.w	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ffcb 	bl	80006a4 <__aeabi_fcmplt>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d108      	bne.n	8001726 <Settings_Read+0x37a>
 8001714:	4b80      	ldr	r3, [pc, #512]	; (8001918 <Settings_Read+0x56c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4980      	ldr	r1, [pc, #512]	; (800191c <Settings_Read+0x570>)
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ffe0 	bl	80006e0 <__aeabi_fcmpgt>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <Settings_Read+0x382>
			pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 8001726:	4b7c      	ldr	r3, [pc, #496]	; (8001918 <Settings_Read+0x56c>)
 8001728:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800172c:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_2 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_2 > SETTINGS_DEF_PID_KI_MAX)){
 800172e:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <Settings_Read+0x574>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f04f 0100 	mov.w	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ffb4 	bl	80006a4 <__aeabi_fcmplt>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d108      	bne.n	8001754 <Settings_Read+0x3a8>
 8001742:	4b77      	ldr	r3, [pc, #476]	; (8001920 <Settings_Read+0x574>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4975      	ldr	r1, [pc, #468]	; (800191c <Settings_Read+0x570>)
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ffc9 	bl	80006e0 <__aeabi_fcmpgt>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <Settings_Read+0x3b0>
			pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 8001754:	4b72      	ldr	r3, [pc, #456]	; (8001920 <Settings_Read+0x574>)
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_2 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_2 > SETTINGS_DEF_PID_KD_MAX)){
 800175c:	4b71      	ldr	r3, [pc, #452]	; (8001924 <Settings_Read+0x578>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe ff9d 	bl	80006a4 <__aeabi_fcmplt>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d108      	bne.n	8001782 <Settings_Read+0x3d6>
 8001770:	4b6c      	ldr	r3, [pc, #432]	; (8001924 <Settings_Read+0x578>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4969      	ldr	r1, [pc, #420]	; (800191c <Settings_Read+0x570>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe ffb2 	bl	80006e0 <__aeabi_fcmpgt>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <Settings_Read+0x3dc>
			pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 8001782:	4b68      	ldr	r3, [pc, #416]	; (8001924 <Settings_Read+0x578>)
 8001784:	4a63      	ldr	r2, [pc, #396]	; (8001914 <Settings_Read+0x568>)
 8001786:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_3 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_3 > SETTINGS_DEF_PID_KP_MAX)){
 8001788:	4b67      	ldr	r3, [pc, #412]	; (8001928 <Settings_Read+0x57c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f04f 0100 	mov.w	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe ff87 	bl	80006a4 <__aeabi_fcmplt>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d108      	bne.n	80017ae <Settings_Read+0x402>
 800179c:	4b62      	ldr	r3, [pc, #392]	; (8001928 <Settings_Read+0x57c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	495e      	ldr	r1, [pc, #376]	; (800191c <Settings_Read+0x570>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe ff9c 	bl	80006e0 <__aeabi_fcmpgt>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <Settings_Read+0x40a>
			pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80017ae:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <Settings_Read+0x57c>)
 80017b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017b4:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_3 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_3 > SETTINGS_DEF_PID_KI_MAX)){
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <Settings_Read+0x580>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe ff70 	bl	80006a4 <__aeabi_fcmplt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d108      	bne.n	80017dc <Settings_Read+0x430>
 80017ca:	4b58      	ldr	r3, [pc, #352]	; (800192c <Settings_Read+0x580>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4953      	ldr	r1, [pc, #332]	; (800191c <Settings_Read+0x570>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe ff85 	bl	80006e0 <__aeabi_fcmpgt>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <Settings_Read+0x438>
			pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <Settings_Read+0x580>)
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_3 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_3 > SETTINGS_DEF_PID_KD_MAX)){
 80017e4:	4b52      	ldr	r3, [pc, #328]	; (8001930 <Settings_Read+0x584>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f04f 0100 	mov.w	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe ff59 	bl	80006a4 <__aeabi_fcmplt>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d108      	bne.n	800180a <Settings_Read+0x45e>
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <Settings_Read+0x584>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4947      	ldr	r1, [pc, #284]	; (800191c <Settings_Read+0x570>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe ff6e 	bl	80006e0 <__aeabi_fcmpgt>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <Settings_Read+0x464>
			pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <Settings_Read+0x584>)
 800180c:	4a41      	ldr	r2, [pc, #260]	; (8001914 <Settings_Read+0x568>)
 800180e:	601a      	str	r2, [r3, #0]
		}
		if((pid_split_1 < SETTINGS_DEF_PID_SPLIT_1_MIN)||(pid_split_1 > SETTINGS_DEF_PID_SPLIT_1_MAX)){
 8001810:	4b48      	ldr	r3, [pc, #288]	; (8001934 <Settings_Read+0x588>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001818:	d303      	bcc.n	8001822 <Settings_Read+0x476>
			pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 800181a:	4b46      	ldr	r3, [pc, #280]	; (8001934 <Settings_Read+0x588>)
 800181c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001820:	801a      	strh	r2, [r3, #0]
		}
		if((pid_split_2 < SETTINGS_DEF_PID_SPLIT_2_MIN)||(pid_split_2 > SETTINGS_DEF_PID_SPLIT_2_MAX)){
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <Settings_Read+0x58c>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182a:	d303      	bcc.n	8001834 <Settings_Read+0x488>
			pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <Settings_Read+0x58c>)
 800182e:	f640 32fc 	movw	r2, #3068	; 0xbfc
 8001832:	801a      	strh	r2, [r3, #0]
		}
		if((pid_sampling_time < SETTINGS_DEF_PID_SAMPLING_TIME_MIN)||(pid_sampling_time > SETTINGS_DEF_PID_SAMPLING_TIME_MAX)){
 8001834:	4b41      	ldr	r3, [pc, #260]	; (800193c <Settings_Read+0x590>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd41 	bl	80002c0 <__aeabi_i2f>
 800183e:	4603      	mov	r3, r0
 8001840:	493f      	ldr	r1, [pc, #252]	; (8001940 <Settings_Read+0x594>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe ff2e 	bl	80006a4 <__aeabi_fcmplt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10d      	bne.n	800186a <Settings_Read+0x4be>
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <Settings_Read+0x590>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fd34 	bl	80002c0 <__aeabi_i2f>
 8001858:	4603      	mov	r3, r0
 800185a:	4930      	ldr	r1, [pc, #192]	; (800191c <Settings_Read+0x570>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe ff3f 	bl	80006e0 <__aeabi_fcmpgt>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d100      	bne.n	800186a <Settings_Read+0x4be>
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
	}
}
 8001868:	e04d      	b.n	8001906 <Settings_Read+0x55a>
			pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <Settings_Read+0x590>)
 800186c:	2205      	movs	r2, #5
 800186e:	701a      	strb	r2, [r3, #0]
}
 8001870:	e049      	b.n	8001906 <Settings_Read+0x55a>
		potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 8001872:	4b34      	ldr	r3, [pc, #208]	; (8001944 <Settings_Read+0x598>)
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	801a      	strh	r2, [r3, #0]
		potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001878:	4b33      	ldr	r3, [pc, #204]	; (8001948 <Settings_Read+0x59c>)
 800187a:	f640 727f 	movw	r2, #3967	; 0xf7f
 800187e:	801a      	strh	r2, [r3, #0]
		motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001880:	4b32      	ldr	r3, [pc, #200]	; (800194c <Settings_Read+0x5a0>)
 8001882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001886:	801a      	strh	r2, [r3, #0]
		motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <Settings_Read+0x5a4>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
		signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <Settings_Read+0x5a8>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
		signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <Settings_Read+0x5ac>)
 8001896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800189a:	601a      	str	r2, [r3, #0]
		signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <Settings_Read+0x5b0>)
 800189e:	4a30      	ldr	r2, [pc, #192]	; (8001960 <Settings_Read+0x5b4>)
 80018a0:	601a      	str	r2, [r3, #0]
		led_mode = SETTINGS_DEF_LED_MODE_DEF;
 80018a2:	4b30      	ldr	r3, [pc, #192]	; (8001964 <Settings_Read+0x5b8>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
		pid_on = SETTINGS_DEF_PID_ON_DEF;
 80018a8:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <Settings_Read+0x5bc>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
		pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <Settings_Read+0x5c0>)
 80018b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018b4:	601a      	str	r2, [r3, #0]
		pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 80018b6:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <Settings_Read+0x5c4>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
		pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <Settings_Read+0x564>)
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <Settings_Read+0x568>)
 80018c2:	601a      	str	r2, [r3, #0]
		pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <Settings_Read+0x56c>)
 80018c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018ca:	601a      	str	r2, [r3, #0]
		pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <Settings_Read+0x574>)
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
		pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <Settings_Read+0x578>)
 80018d6:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <Settings_Read+0x568>)
 80018d8:	601a      	str	r2, [r3, #0]
		pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <Settings_Read+0x57c>)
 80018dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018e0:	601a      	str	r2, [r3, #0]
		pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <Settings_Read+0x580>)
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <Settings_Read+0x584>)
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <Settings_Read+0x568>)
 80018ee:	601a      	str	r2, [r3, #0]
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <Settings_Read+0x588>)
 80018f2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018f6:	801a      	strh	r2, [r3, #0]
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <Settings_Read+0x58c>)
 80018fa:	f640 32fc 	movw	r2, #3068	; 0xbfc
 80018fe:	801a      	strh	r2, [r3, #0]
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <Settings_Read+0x590>)
 8001902:	2205      	movs	r2, #5
 8001904:	701a      	strb	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008
 8001914:	40400000 	.word	0x40400000
 8001918:	2000000c 	.word	0x2000000c
 800191c:	42c80000 	.word	0x42c80000
 8001920:	200001d0 	.word	0x200001d0
 8001924:	20000010 	.word	0x20000010
 8001928:	20000014 	.word	0x20000014
 800192c:	200001d4 	.word	0x200001d4
 8001930:	20000018 	.word	0x20000018
 8001934:	2000001c 	.word	0x2000001c
 8001938:	2000001e 	.word	0x2000001e
 800193c:	20000002 	.word	0x20000002
 8001940:	40a00000 	.word	0x40a00000
 8001944:	200001ec 	.word	0x200001ec
 8001948:	200001ee 	.word	0x200001ee
 800194c:	20000000 	.word	0x20000000
 8001950:	200001c7 	.word	0x200001c7
 8001954:	2000023c 	.word	0x2000023c
 8001958:	20000240 	.word	0x20000240
 800195c:	20000244 	.word	0x20000244
 8001960:	41a00000 	.word	0x41a00000
 8001964:	200001c4 	.word	0x200001c4
 8001968:	20000020 	.word	0x20000020
 800196c:	20000004 	.word	0x20000004
 8001970:	200001cc 	.word	0x200001cc

08001974 <Settings_Write>:
void Settings_Write(){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
	General_Copy_16_Bit((uint32_t)&settings[0], (uint32_t)&potentiometer_min);
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <Settings_Write+0x124>)
 800197c:	4a47      	ldr	r2, [pc, #284]	; (8001a9c <Settings_Write+0x128>)
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f8b2 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[2], (uint32_t)&potentiometer_max);
 8001986:	4b46      	ldr	r3, [pc, #280]	; (8001aa0 <Settings_Write+0x12c>)
 8001988:	4a46      	ldr	r2, [pc, #280]	; (8001aa4 <Settings_Write+0x130>)
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f8ac 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[4], (uint32_t)&motor_max_power);
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <Settings_Write+0x134>)
 8001994:	4a45      	ldr	r2, [pc, #276]	; (8001aac <Settings_Write+0x138>)
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f8a6 	bl	8000aea <General_Copy_16_Bit>
	settings[6] = motor_invert;
 800199e:	4b44      	ldr	r3, [pc, #272]	; (8001ab0 <Settings_Write+0x13c>)
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <Settings_Write+0x124>)
 80019a4:	719a      	strb	r2, [r3, #6]
	settings[7] = signal_ignore;
 80019a6:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <Settings_Write+0x140>)
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <Settings_Write+0x124>)
 80019ac:	71da      	strb	r2, [r3, #7]
	General_Copy_32_Bit((uint32_t)&settings[8], (uint32_t)&signal_length);
 80019ae:	4b42      	ldr	r3, [pc, #264]	; (8001ab8 <Settings_Write+0x144>)
 80019b0:	4a42      	ldr	r2, [pc, #264]	; (8001abc <Settings_Write+0x148>)
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f87b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[12], (uint32_t)&signal_timeout);
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <Settings_Write+0x14c>)
 80019bc:	4a41      	ldr	r2, [pc, #260]	; (8001ac4 <Settings_Write+0x150>)
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f875 	bl	8000ab0 <General_Copy_32_Bit>
	settings[16] = led_mode;
 80019c6:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <Settings_Write+0x154>)
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <Settings_Write+0x124>)
 80019cc:	741a      	strb	r2, [r3, #16]
	settings[17] = pid_on;
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <Settings_Write+0x158>)
 80019d0:	781a      	ldrb	r2, [r3, #0]
 80019d2:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <Settings_Write+0x124>)
 80019d4:	745a      	strb	r2, [r3, #17]
	General_Copy_32_Bit((uint32_t)&settings[18], (uint32_t)&pid_kp_1);
 80019d6:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <Settings_Write+0x15c>)
 80019d8:	4a3e      	ldr	r2, [pc, #248]	; (8001ad4 <Settings_Write+0x160>)
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f867 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[22], (uint32_t)&pid_ki_1);
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <Settings_Write+0x164>)
 80019e4:	4a3d      	ldr	r2, [pc, #244]	; (8001adc <Settings_Write+0x168>)
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f861 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[26], (uint32_t)&pid_kd_1);
 80019ee:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <Settings_Write+0x16c>)
 80019f0:	4a3c      	ldr	r2, [pc, #240]	; (8001ae4 <Settings_Write+0x170>)
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f85b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[30], (uint32_t)&pid_kp_2);
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <Settings_Write+0x174>)
 80019fc:	4a3b      	ldr	r2, [pc, #236]	; (8001aec <Settings_Write+0x178>)
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f855 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[34], (uint32_t)&pid_ki_2);
 8001a06:	4b3a      	ldr	r3, [pc, #232]	; (8001af0 <Settings_Write+0x17c>)
 8001a08:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <Settings_Write+0x180>)
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f84f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[38], (uint32_t)&pid_kd_2);
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <Settings_Write+0x184>)
 8001a14:	4a39      	ldr	r2, [pc, #228]	; (8001afc <Settings_Write+0x188>)
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f849 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[42], (uint32_t)&pid_kp_3);
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <Settings_Write+0x18c>)
 8001a20:	4a38      	ldr	r2, [pc, #224]	; (8001b04 <Settings_Write+0x190>)
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f843 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[46], (uint32_t)&pid_ki_3);
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <Settings_Write+0x194>)
 8001a2c:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <Settings_Write+0x198>)
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f83d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[50], (uint32_t)&pid_kd_3);
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <Settings_Write+0x19c>)
 8001a38:	4a36      	ldr	r2, [pc, #216]	; (8001b14 <Settings_Write+0x1a0>)
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff f837 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&settings[54], (uint32_t)&pid_split_1);
 8001a42:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <Settings_Write+0x1a4>)
 8001a44:	4a35      	ldr	r2, [pc, #212]	; (8001b1c <Settings_Write+0x1a8>)
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f84e 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[56], (uint32_t)&pid_split_2);
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <Settings_Write+0x1ac>)
 8001a50:	4a34      	ldr	r2, [pc, #208]	; (8001b24 <Settings_Write+0x1b0>)
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f848 	bl	8000aea <General_Copy_16_Bit>
	settings[58] = pid_sampling_time;
 8001a5a:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <Settings_Write+0x1b4>)
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <Settings_Write+0x124>)
 8001a60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	settings[59] = SETTINGS_CRC_PADDING;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <Settings_Write+0x124>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1);
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	490a      	ldr	r1, [pc, #40]	; (8001a98 <Settings_Write+0x124>)
 8001a70:	482e      	ldr	r0, [pc, #184]	; (8001b2c <Settings_Write+0x1b8>)
 8001a72:	f001 fed8 	bl	8003826 <HAL_CRC_Calculate>
 8001a76:	4603      	mov	r3, r0
 8001a78:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&settings[60], (uint32_t)&crc);
 8001a7a:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <Settings_Write+0x1bc>)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f7ff f815 	bl	8000ab0 <General_Copy_32_Bit>
	Flash_Write(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	492a      	ldr	r1, [pc, #168]	; (8001b34 <Settings_Write+0x1c0>)
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <Settings_Write+0x124>)
 8001a8c:	f7fe ff73 	bl	8000976 <Flash_Write>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200001fc 	.word	0x200001fc
 8001a9c:	200001ec 	.word	0x200001ec
 8001aa0:	200001fe 	.word	0x200001fe
 8001aa4:	200001ee 	.word	0x200001ee
 8001aa8:	20000200 	.word	0x20000200
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	200001c7 	.word	0x200001c7
 8001ab4:	2000023c 	.word	0x2000023c
 8001ab8:	20000204 	.word	0x20000204
 8001abc:	20000240 	.word	0x20000240
 8001ac0:	20000208 	.word	0x20000208
 8001ac4:	20000244 	.word	0x20000244
 8001ac8:	200001c4 	.word	0x200001c4
 8001acc:	20000020 	.word	0x20000020
 8001ad0:	2000020e 	.word	0x2000020e
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	20000212 	.word	0x20000212
 8001adc:	200001cc 	.word	0x200001cc
 8001ae0:	20000216 	.word	0x20000216
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	2000021a 	.word	0x2000021a
 8001aec:	2000000c 	.word	0x2000000c
 8001af0:	2000021e 	.word	0x2000021e
 8001af4:	200001d0 	.word	0x200001d0
 8001af8:	20000222 	.word	0x20000222
 8001afc:	20000010 	.word	0x20000010
 8001b00:	20000226 	.word	0x20000226
 8001b04:	20000014 	.word	0x20000014
 8001b08:	2000022a 	.word	0x2000022a
 8001b0c:	200001d4 	.word	0x200001d4
 8001b10:	2000022e 	.word	0x2000022e
 8001b14:	20000018 	.word	0x20000018
 8001b18:	20000232 	.word	0x20000232
 8001b1c:	2000001c 	.word	0x2000001c
 8001b20:	20000234 	.word	0x20000234
 8001b24:	2000001e 	.word	0x2000001e
 8001b28:	20000002 	.word	0x20000002
 8001b2c:	200003c0 	.word	0x200003c0
 8001b30:	20000238 	.word	0x20000238
 8001b34:	0800fc00 	.word	0x0800fc00

08001b38 <Signal_SysTick_Interrupt>:
float signal_length;
float signal_timeout;

uint8_t signal_present = 0;

void Signal_SysTick_Interrupt(){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	if(((float)(Signal_Read_Timer() + 1) / 500.0f) > signal_timeout){
 8001b3c:	f000 f8fe 	bl	8001d3c <Signal_Read_Timer>
 8001b40:	4603      	mov	r3, r0
 8001b42:	3301      	adds	r3, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fbb7 	bl	80002b8 <__aeabi_ui2f>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4916      	ldr	r1, [pc, #88]	; (8001ba8 <Signal_SysTick_Interrupt+0x70>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fcbe 	bl	80004d0 <__aeabi_fdiv>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <Signal_SysTick_Interrupt+0x74>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f7fe fdbe 	bl	80006e0 <__aeabi_fcmpgt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d100      	bne.n	8001b6c <Signal_SysTick_Interrupt+0x34>
				PID_Stop();
			}
			pid_setpoint = 0;
		}
	}
}
 8001b6a:	e01a      	b.n	8001ba2 <Signal_SysTick_Interrupt+0x6a>
		signal_present = 0;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <Signal_SysTick_Interrupt+0x78>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
		Signal_Timer_Reset();
 8001b72:	f000 f8ef 	bl	8001d54 <Signal_Timer_Reset>
		if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <Signal_SysTick_Interrupt+0x7c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <Signal_SysTick_Interrupt+0x56>
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <Signal_SysTick_Interrupt+0x7c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <Signal_SysTick_Interrupt+0x6a>
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <Signal_SysTick_Interrupt+0x80>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <Signal_SysTick_Interrupt+0x6a>
			if(pid_running){
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <Signal_SysTick_Interrupt+0x84>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <Signal_SysTick_Interrupt+0x62>
				PID_Stop();
 8001b96:	f7ff fba5 	bl	80012e4 <PID_Stop>
			pid_setpoint = 0;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <Signal_SysTick_Interrupt+0x88>)
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	43fa0000 	.word	0x43fa0000
 8001bac:	20000244 	.word	0x20000244
 8001bb0:	20000248 	.word	0x20000248
 8001bb4:	2000023c 	.word	0x2000023c
 8001bb8:	2000024d 	.word	0x2000024d
 8001bbc:	200001d8 	.word	0x200001d8
 8001bc0:	20000024 	.word	0x20000024

08001bc4 <Signal_Interrupt>:
void Signal_Interrupt(){
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
	uint32_t cnt = Signal_Read_Timer();
 8001bca:	f000 f8b7 	bl	8001d3c <Signal_Read_Timer>
 8001bce:	60f8      	str	r0, [r7, #12]
	if(Signal_Read() == SIGNAL_HIGH){
 8001bd0:	f000 f8cc 	bl	8001d6c <Signal_Read>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d105      	bne.n	8001be6 <Signal_Interrupt+0x22>
		Signal_Timer_Reset();
 8001bda:	f000 f8bb 	bl	8001d54 <Signal_Timer_Reset>
		signal_present = 1;
 8001bde:	4b4d      	ldr	r3, [pc, #308]	; (8001d14 <Signal_Interrupt+0x150>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
					PID_Stop();
				}
			}
		}
	}
}
 8001be4:	e092      	b.n	8001d0c <Signal_Interrupt+0x148>
	}else if(signal_present){
 8001be6:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <Signal_Interrupt+0x150>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 808e 	beq.w	8001d0c <Signal_Interrupt+0x148>
		float received_length_ms  = (float)((uint32_t)cnt + (uint32_t)1) / 500.0f;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fb5f 	bl	80002b8 <__aeabi_ui2f>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4946      	ldr	r1, [pc, #280]	; (8001d18 <Signal_Interrupt+0x154>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc66 	bl	80004d0 <__aeabi_fdiv>
 8001c04:	4603      	mov	r3, r0
 8001c06:	60bb      	str	r3, [r7, #8]
		if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8001c08:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <Signal_Interrupt+0x158>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68b8      	ldr	r0, [r7, #8]
 8001c10:	f7fe fd52 	bl	80006b8 <__aeabi_fcmple>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d061      	beq.n	8001cde <Signal_Interrupt+0x11a>
 8001c1a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c1e:	68b8      	ldr	r0, [r7, #8]
 8001c20:	f7fe fd54 	bl	80006cc <__aeabi_fcmpge>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d059      	beq.n	8001cde <Signal_Interrupt+0x11a>
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <Signal_Interrupt+0x15c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <Signal_Interrupt+0x7e>
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <Signal_Interrupt+0x15c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d067      	beq.n	8001d0a <Signal_Interrupt+0x146>
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <Signal_Interrupt+0x160>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d163      	bne.n	8001d0a <Signal_Interrupt+0x146>
				float new_pid_setpoint = (((float)potentiometer_max - (float)potentiometer_min) * ((received_length_ms - 1.0f) / (signal_length - 1.0f))) + (float)potentiometer_min;
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <Signal_Interrupt+0x164>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fb36 	bl	80002b8 <__aeabi_ui2f>
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <Signal_Interrupt+0x168>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fb30 	bl	80002b8 <__aeabi_ui2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f7fe fa79 	bl	8000154 <__aeabi_fsub>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461c      	mov	r4, r3
 8001c66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c6a:	68b8      	ldr	r0, [r7, #8]
 8001c6c:	f7fe fa72 	bl	8000154 <__aeabi_fsub>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461d      	mov	r5, r3
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <Signal_Interrupt+0x158>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fa69 	bl	8000154 <__aeabi_fsub>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4619      	mov	r1, r3
 8001c86:	4628      	mov	r0, r5
 8001c88:	f7fe fc22 	bl	80004d0 <__aeabi_fdiv>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7fe fb69 	bl	8000368 <__aeabi_fmul>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461c      	mov	r4, r3
 8001c9a:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <Signal_Interrupt+0x168>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fb0a 	bl	80002b8 <__aeabi_ui2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7fe fa55 	bl	8000158 <__addsf3>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	607b      	str	r3, [r7, #4]
				if(pid_setpoint != new_pid_setpoint){
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <Signal_Interrupt+0x16c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fce9 	bl	8000690 <__aeabi_fcmpeq>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <Signal_Interrupt+0x106>
					led_position_changed = 1;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <Signal_Interrupt+0x170>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
				pid_setpoint = new_pid_setpoint;
 8001cca:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <Signal_Interrupt+0x16c>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6013      	str	r3, [r2, #0]
				if(!pid_running){
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <Signal_Interrupt+0x174>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d118      	bne.n	8001d0a <Signal_Interrupt+0x146>
					PID_Start();
 8001cd8:	f7ff fae2 	bl	80012a0 <PID_Start>
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001cdc:	e015      	b.n	8001d0a <Signal_Interrupt+0x146>
			signal_present = 0;
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <Signal_Interrupt+0x150>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <Signal_Interrupt+0x15c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <Signal_Interrupt+0x138>
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <Signal_Interrupt+0x15c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00b      	beq.n	8001d0c <Signal_Interrupt+0x148>
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <Signal_Interrupt+0x160>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d107      	bne.n	8001d0c <Signal_Interrupt+0x148>
				if(pid_running){
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <Signal_Interrupt+0x174>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <Signal_Interrupt+0x148>
					PID_Stop();
 8001d04:	f7ff faee 	bl	80012e4 <PID_Stop>
}
 8001d08:	e000      	b.n	8001d0c <Signal_Interrupt+0x148>
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001d0a:	bf00      	nop
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bdb0      	pop	{r4, r5, r7, pc}
 8001d14:	20000248 	.word	0x20000248
 8001d18:	43fa0000 	.word	0x43fa0000
 8001d1c:	20000240 	.word	0x20000240
 8001d20:	2000023c 	.word	0x2000023c
 8001d24:	2000024d 	.word	0x2000024d
 8001d28:	200001ee 	.word	0x200001ee
 8001d2c:	200001ec 	.word	0x200001ec
 8001d30:	20000024 	.word	0x20000024
 8001d34:	200001c5 	.word	0x200001c5
 8001d38:	200001d8 	.word	0x200001d8

08001d3c <Signal_Read_Timer>:

uint32_t Signal_Read_Timer(){
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <Signal_Read_Timer+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000458 	.word	0x20000458

08001d54 <Signal_Timer_Reset>:
void Signal_Timer_Reset(){
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <Signal_Timer_Reset+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	20000458 	.word	0x20000458

08001d6c <Signal_Read>:
uint8_t Signal_Read(){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001d7a:	e01d      	b.n	8001db8 <Signal_Read+0x4c>
		i = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 8001d80:	2102      	movs	r1, #2
 8001d82:	4811      	ldr	r0, [pc, #68]	; (8001dc8 <Signal_Read+0x5c>)
 8001d84:	f002 f906 	bl	8003f94 <HAL_GPIO_ReadPin>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001d8c:	e011      	b.n	8001db2 <Signal_Read+0x46>
			i++;
 8001d8e:	797b      	ldrb	r3, [r7, #5]
 8001d90:	3301      	adds	r3, #1
 8001d92:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 8001d94:	2102      	movs	r1, #2
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <Signal_Read+0x5c>)
 8001d98:	f002 f8fc 	bl	8003f94 <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d000      	beq.n	8001da8 <Signal_Read+0x3c>
				break;
 8001da6:	e007      	b.n	8001db8 <Signal_Read+0x4c>
			}
			if(i == SIGNAL_DEBOUNCE_SAMPLES){
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d101      	bne.n	8001db2 <Signal_Read+0x46>
				d = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	71bb      	strb	r3, [r7, #6]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d1ea      	bne.n	8001d8e <Signal_Read+0x22>
	while(d != 1){
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d1de      	bne.n	8001d7c <Signal_Read+0x10>
			}
		}
	}
	return level;
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40010c00 	.word	0x40010c00

08001dcc <Signal_Init>:

void Signal_Init(){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <Signal_Init+0x10>)
 8001dd2:	f004 fbb7 	bl	8006544 <HAL_TIM_Base_Start>
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000458 	.word	0x20000458

08001de0 <USB_Det_Read>:

uint8_t usb_present = 0;
uint8_t usb_tx_buffer[64];
uint8_t usb_long_buffer[256];

uint8_t USB_Det_Read(){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001dee:	e01f      	b.n	8001e30 <USB_Det_Read+0x50>
		i = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8001df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df8:	4811      	ldr	r0, [pc, #68]	; (8001e40 <USB_Det_Read+0x60>)
 8001dfa:	f002 f8cb 	bl	8003f94 <HAL_GPIO_ReadPin>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001e02:	e012      	b.n	8001e2a <USB_Det_Read+0x4a>
			i++;
 8001e04:	797b      	ldrb	r3, [r7, #5]
 8001e06:	3301      	adds	r3, #1
 8001e08:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 8001e0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e0e:	480c      	ldr	r0, [pc, #48]	; (8001e40 <USB_Det_Read+0x60>)
 8001e10:	f002 f8c0 	bl	8003f94 <HAL_GPIO_ReadPin>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d000      	beq.n	8001e20 <USB_Det_Read+0x40>
				break;
 8001e1e:	e007      	b.n	8001e30 <USB_Det_Read+0x50>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 8001e20:	797b      	ldrb	r3, [r7, #5]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d101      	bne.n	8001e2a <USB_Det_Read+0x4a>
				d = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001e2a:	797b      	ldrb	r3, [r7, #5]
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d1e9      	bne.n	8001e04 <USB_Det_Read+0x24>
	while(d != 1){
 8001e30:	79bb      	ldrb	r3, [r7, #6]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d1dc      	bne.n	8001df0 <USB_Det_Read+0x10>
			}
		}
	}
	return level;
 8001e36:	79fb      	ldrb	r3, [r7, #7]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40010c00 	.word	0x40010c00

08001e44 <USB_Det_Interrupt>:
void USB_Det_Interrupt(){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e48:	f7ff ffca 	bl	8001de0 <USB_Det_Read>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d103      	bne.n	8001e5a <USB_Det_Interrupt+0x16>
		usb_present = 1;
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <USB_Det_Interrupt+0x2c>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e002      	b.n	8001e60 <USB_Det_Interrupt+0x1c>
	}else{
		usb_present = 0;
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <USB_Det_Interrupt+0x2c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
	}
	if(pid_running){
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <USB_Det_Interrupt+0x30>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <USB_Det_Interrupt+0x28>
		PID_Stop();
 8001e68:	f7ff fa3c 	bl	80012e4 <PID_Stop>
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000024d 	.word	0x2000024d
 8001e74:	200001d8 	.word	0x200001d8

08001e78 <USB_Init>:
void USB_Init(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e7c:	f7ff ffb0 	bl	8001de0 <USB_Det_Read>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d103      	bne.n	8001e8e <USB_Init+0x16>
		usb_present = 1;
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <USB_Init+0x20>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
	}else{
		usb_present = 0;
	}
}
 8001e8c:	e002      	b.n	8001e94 <USB_Init+0x1c>
		usb_present = 0;
 8001e8e:	4b02      	ldr	r3, [pc, #8]	; (8001e98 <USB_Init+0x20>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000024d 	.word	0x2000024d

08001e9c <USB_Packet_Received>:
void USB_Packet_Received(uint8_t *data, uint32_t length){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	if((data[1] == USB_CMD_CONFIG) && (uint32_t)data[0] == length){
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d11c      	bne.n	8001eea <USB_Packet_Received+0x4e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d116      	bne.n	8001eea <USB_Packet_Received+0x4e>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4829      	ldr	r0, [pc, #164]	; (8001f6c <USB_Packet_Received+0xd0>)
 8001ec8:	f001 fcad 	bl	8003826 <HAL_CRC_Calculate>
 8001ecc:	4601      	mov	r1, r0
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	3b04      	subs	r3, #4
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4299      	cmp	r1, r3
 8001eda:	d143      	bne.n	8001f64 <USB_Packet_Received+0xc8>
			USB_Parse_Config(data);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f84d 	bl	8001f7c <USB_Parse_Config>
			usb_rq = USB_RQ_CONF;
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <USB_Packet_Received+0xd4>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001ee8:	e03c      	b.n	8001f64 <USB_Packet_Received+0xc8>
		}
	}else if((data[1] == USB_CMD_STATUS) && (length == 64)){
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3301      	adds	r3, #1
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d108      	bne.n	8001f06 <USB_Packet_Received+0x6a>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	d105      	bne.n	8001f06 <USB_Packet_Received+0x6a>
		memcpy(usb_long_buffer, data, 64);
 8001efa:	2240      	movs	r2, #64	; 0x40
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	481d      	ldr	r0, [pc, #116]	; (8001f74 <USB_Packet_Received+0xd8>)
 8001f00:	f00a f8a8 	bl	800c054 <memcpy>
 8001f04:	e02e      	b.n	8001f64 <USB_Packet_Received+0xc8>
	}
	else if((usb_long_buffer[1] == USB_CMD_STATUS) && (usb_long_buffer[0] == (length + 64))){
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <USB_Packet_Received+0xd8>)
 8001f08:	785b      	ldrb	r3, [r3, #1]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d126      	bne.n	8001f5c <USB_Packet_Received+0xc0>
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <USB_Packet_Received+0xd8>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	3340      	adds	r3, #64	; 0x40
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d11f      	bne.n	8001f5c <USB_Packet_Received+0xc0>
		memcpy(&usb_long_buffer[64], data, length);
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4815      	ldr	r0, [pc, #84]	; (8001f78 <USB_Packet_Received+0xdc>)
 8001f22:	f00a f897 	bl	800c054 <memcpy>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)usb_long_buffer, ((length + 64) / 4) - 1) == *(uint32_t *)&usb_long_buffer[length + 64- 4]){
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3340      	adds	r3, #64	; 0x40
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4910      	ldr	r1, [pc, #64]	; (8001f74 <USB_Packet_Received+0xd8>)
 8001f32:	480e      	ldr	r0, [pc, #56]	; (8001f6c <USB_Packet_Received+0xd0>)
 8001f34:	f001 fc77 	bl	8003826 <HAL_CRC_Calculate>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	333c      	adds	r3, #60	; 0x3c
 8001f3e:	490d      	ldr	r1, [pc, #52]	; (8001f74 <USB_Packet_Received+0xd8>)
 8001f40:	440b      	add	r3, r1
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d105      	bne.n	8001f54 <USB_Packet_Received+0xb8>
			USB_Parse_Status(usb_long_buffer);
 8001f48:	480a      	ldr	r0, [pc, #40]	; (8001f74 <USB_Packet_Received+0xd8>)
 8001f4a:	f000 f8ff 	bl	800214c <USB_Parse_Status>
			usb_rq = USB_RQ_STAT;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <USB_Packet_Received+0xd4>)
 8001f50:	2202      	movs	r2, #2
 8001f52:	701a      	strb	r2, [r3, #0]
		}
		usb_long_buffer[1] = 0xff;
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <USB_Packet_Received+0xd8>)
 8001f56:	22ff      	movs	r2, #255	; 0xff
 8001f58:	705a      	strb	r2, [r3, #1]
 8001f5a:	e003      	b.n	8001f64 <USB_Packet_Received+0xc8>
	}else{
		usb_long_buffer[1] = 0xff;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <USB_Packet_Received+0xd8>)
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	705a      	strb	r2, [r3, #1]
	}
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200003c0 	.word	0x200003c0
 8001f70:	20000249 	.word	0x20000249
 8001f74:	20000290 	.word	0x20000290
 8001f78:	200002d0 	.word	0x200002d0

08001f7c <USB_Parse_Config>:
void USB_Parse_Config(uint8_t *data){
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	usb_rq_sett_revert_flash = data[2];
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	789a      	ldrb	r2, [r3, #2]
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <USB_Parse_Config+0x1c>)
 8001f8a:	701a      	strb	r2, [r3, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	2000024a 	.word	0x2000024a

08001f9c <USB_Send_Config>:
void USB_Send_Config(){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_CONFIG_LENGTH;
 8001fa2:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <USB_Send_Config+0x128>)
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_CONFIG;
 8001fa8:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <USB_Send_Config+0x128>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	705a      	strb	r2, [r3, #1]
	*(uint16_t *)&usb_tx_buffer[2] = potentiometer_min;
 8001fae:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <USB_Send_Config+0x12c>)
 8001fb0:	4a46      	ldr	r2, [pc, #280]	; (80020cc <USB_Send_Config+0x130>)
 8001fb2:	8812      	ldrh	r2, [r2, #0]
 8001fb4:	801a      	strh	r2, [r3, #0]
	*(uint16_t *)&usb_tx_buffer[4] = potentiometer_max;
 8001fb6:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <USB_Send_Config+0x134>)
 8001fb8:	4a46      	ldr	r2, [pc, #280]	; (80020d4 <USB_Send_Config+0x138>)
 8001fba:	8812      	ldrh	r2, [r2, #0]
 8001fbc:	801a      	strh	r2, [r3, #0]
	usb_tx_buffer[6] = (uint8_t)((uint16_t)motor_max_power / 10);
 8001fbe:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <USB_Send_Config+0x13c>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	4a46      	ldr	r2, [pc, #280]	; (80020dc <USB_Send_Config+0x140>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	08db      	lsrs	r3, r3, #3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <USB_Send_Config+0x128>)
 8001fd0:	719a      	strb	r2, [r3, #6]
	usb_tx_buffer[7] = motor_invert;
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <USB_Send_Config+0x144>)
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <USB_Send_Config+0x128>)
 8001fd8:	71da      	strb	r2, [r3, #7]
	usb_tx_buffer[8] = signal_ignore;
 8001fda:	4b42      	ldr	r3, [pc, #264]	; (80020e4 <USB_Send_Config+0x148>)
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <USB_Send_Config+0x128>)
 8001fe0:	721a      	strb	r2, [r3, #8]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[9], (uint32_t)&signal_length);
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <USB_Send_Config+0x14c>)
 8001fe4:	4a41      	ldr	r2, [pc, #260]	; (80020ec <USB_Send_Config+0x150>)
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fd61 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[13], (uint32_t)&signal_timeout);
 8001fee:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <USB_Send_Config+0x154>)
 8001ff0:	4a40      	ldr	r2, [pc, #256]	; (80020f4 <USB_Send_Config+0x158>)
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fd5b 	bl	8000ab0 <General_Copy_32_Bit>
	usb_tx_buffer[17] = led_mode;
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <USB_Send_Config+0x15c>)
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <USB_Send_Config+0x128>)
 8002000:	745a      	strb	r2, [r3, #17]
	usb_tx_buffer[18] = pid_on;
 8002002:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <USB_Send_Config+0x160>)
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <USB_Send_Config+0x128>)
 8002008:	749a      	strb	r2, [r3, #18]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[19], (uint32_t)&pid_kp_1);
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <USB_Send_Config+0x164>)
 800200c:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <USB_Send_Config+0x168>)
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fd4d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[23], (uint32_t)&pid_ki_1);
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <USB_Send_Config+0x16c>)
 8002018:	4a3c      	ldr	r2, [pc, #240]	; (800210c <USB_Send_Config+0x170>)
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fd47 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[27], (uint32_t)&pid_kd_1);
 8002022:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <USB_Send_Config+0x174>)
 8002024:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <USB_Send_Config+0x178>)
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fd41 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[31], (uint32_t)&pid_kp_1);
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <USB_Send_Config+0x17c>)
 8002030:	4a34      	ldr	r2, [pc, #208]	; (8002104 <USB_Send_Config+0x168>)
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fd3b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[35], (uint32_t)&pid_ki_1);
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <USB_Send_Config+0x180>)
 800203c:	4a33      	ldr	r2, [pc, #204]	; (800210c <USB_Send_Config+0x170>)
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fd35 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[39], (uint32_t)&pid_kd_1);
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <USB_Send_Config+0x184>)
 8002048:	4a32      	ldr	r2, [pc, #200]	; (8002114 <USB_Send_Config+0x178>)
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fd2f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[43], (uint32_t)&pid_kp_1);
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <USB_Send_Config+0x188>)
 8002054:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <USB_Send_Config+0x168>)
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fd29 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[47], (uint32_t)&pid_ki_1);
 800205e:	4b32      	ldr	r3, [pc, #200]	; (8002128 <USB_Send_Config+0x18c>)
 8002060:	4a2a      	ldr	r2, [pc, #168]	; (800210c <USB_Send_Config+0x170>)
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fd23 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[51], (uint32_t)&pid_kd_1);
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <USB_Send_Config+0x190>)
 800206c:	4a29      	ldr	r2, [pc, #164]	; (8002114 <USB_Send_Config+0x178>)
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fd1d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[55], (uint32_t)&pid_split_1);
 8002076:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <USB_Send_Config+0x194>)
 8002078:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <USB_Send_Config+0x198>)
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fd34 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[57], (uint32_t)&pid_split_2);
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <USB_Send_Config+0x19c>)
 8002084:	4a2d      	ldr	r2, [pc, #180]	; (800213c <USB_Send_Config+0x1a0>)
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fd2e 	bl	8000aea <General_Copy_16_Bit>
	usb_tx_buffer[59] = pid_sampling_time;
 800208e:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <USB_Send_Config+0x1a4>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <USB_Send_Config+0x128>)
 8002094:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_CONFIG_LENGTH / 4) - 1);
 8002098:	220f      	movs	r2, #15
 800209a:	490a      	ldr	r1, [pc, #40]	; (80020c4 <USB_Send_Config+0x128>)
 800209c:	4829      	ldr	r0, [pc, #164]	; (8002144 <USB_Send_Config+0x1a8>)
 800209e:	f001 fbc2 	bl	8003826 <HAL_CRC_Calculate>
 80020a2:	4603      	mov	r3, r0
 80020a4:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[60], (uint32_t)&crc);
 80020a6:	4a28      	ldr	r2, [pc, #160]	; (8002148 <USB_Send_Config+0x1ac>)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4610      	mov	r0, r2
 80020ae:	f7fe fcff 	bl	8000ab0 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_CONFIG_LENGTH);
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <USB_Send_Config+0x128>)
 80020b6:	f009 fbcb 	bl	800b850 <CDC_Transmit_FS>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000250 	.word	0x20000250
 80020c8:	20000252 	.word	0x20000252
 80020cc:	200001ec 	.word	0x200001ec
 80020d0:	20000254 	.word	0x20000254
 80020d4:	200001ee 	.word	0x200001ee
 80020d8:	20000000 	.word	0x20000000
 80020dc:	cccccccd 	.word	0xcccccccd
 80020e0:	200001c7 	.word	0x200001c7
 80020e4:	2000023c 	.word	0x2000023c
 80020e8:	20000259 	.word	0x20000259
 80020ec:	20000240 	.word	0x20000240
 80020f0:	2000025d 	.word	0x2000025d
 80020f4:	20000244 	.word	0x20000244
 80020f8:	200001c4 	.word	0x200001c4
 80020fc:	20000020 	.word	0x20000020
 8002100:	20000263 	.word	0x20000263
 8002104:	20000004 	.word	0x20000004
 8002108:	20000267 	.word	0x20000267
 800210c:	200001cc 	.word	0x200001cc
 8002110:	2000026b 	.word	0x2000026b
 8002114:	20000008 	.word	0x20000008
 8002118:	2000026f 	.word	0x2000026f
 800211c:	20000273 	.word	0x20000273
 8002120:	20000277 	.word	0x20000277
 8002124:	2000027b 	.word	0x2000027b
 8002128:	2000027f 	.word	0x2000027f
 800212c:	20000283 	.word	0x20000283
 8002130:	20000287 	.word	0x20000287
 8002134:	2000001c 	.word	0x2000001c
 8002138:	20000289 	.word	0x20000289
 800213c:	2000001e 	.word	0x2000001e
 8002140:	20000002 	.word	0x20000002
 8002144:	200003c0 	.word	0x200003c0
 8002148:	2000028c 	.word	0x2000028c

0800214c <USB_Parse_Status>:
void USB_Parse_Status(uint8_t *data){
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	potentiometer_min = *(uint16_t *)&data[2];
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	885a      	ldrh	r2, [r3, #2]
 8002158:	4b5e      	ldr	r3, [pc, #376]	; (80022d4 <USB_Parse_Status+0x188>)
 800215a:	801a      	strh	r2, [r3, #0]
	potentiometer_max = *(uint16_t *)&data[4];
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	889a      	ldrh	r2, [r3, #4]
 8002160:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <USB_Parse_Status+0x18c>)
 8002162:	801a      	strh	r2, [r3, #0]
	motor_max_power = (uint16_t)data[6] * 10;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3306      	adds	r3, #6
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	0092      	lsls	r2, r2, #2
 8002170:	4413      	add	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b59      	ldr	r3, [pc, #356]	; (80022dc <USB_Parse_Status+0x190>)
 8002178:	801a      	strh	r2, [r3, #0]
	motor_invert = data[7];
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	79da      	ldrb	r2, [r3, #7]
 800217e:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <USB_Parse_Status+0x194>)
 8002180:	701a      	strb	r2, [r3, #0]
	signal_ignore = data[8];
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7a1a      	ldrb	r2, [r3, #8]
 8002186:	4b57      	ldr	r3, [pc, #348]	; (80022e4 <USB_Parse_Status+0x198>)
 8002188:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&data[9]);
 800218a:	4a57      	ldr	r2, [pc, #348]	; (80022e8 <USB_Parse_Status+0x19c>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3309      	adds	r3, #9
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f7fe fc8c 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&data[13]);
 8002198:	4a54      	ldr	r2, [pc, #336]	; (80022ec <USB_Parse_Status+0x1a0>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	330d      	adds	r3, #13
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f7fe fc85 	bl	8000ab0 <General_Copy_32_Bit>
	led_mode = data[17];
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7c5a      	ldrb	r2, [r3, #17]
 80021aa:	4b51      	ldr	r3, [pc, #324]	; (80022f0 <USB_Parse_Status+0x1a4>)
 80021ac:	701a      	strb	r2, [r3, #0]
	pid_on = data[18];
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7c9a      	ldrb	r2, [r3, #18]
 80021b2:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <USB_Parse_Status+0x1a8>)
 80021b4:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&data[19]);
 80021b6:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <USB_Parse_Status+0x1ac>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3313      	adds	r3, #19
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f7fe fc76 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&data[23]);
 80021c4:	4a4d      	ldr	r2, [pc, #308]	; (80022fc <USB_Parse_Status+0x1b0>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3317      	adds	r3, #23
 80021ca:	4619      	mov	r1, r3
 80021cc:	4610      	mov	r0, r2
 80021ce:	f7fe fc6f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&data[27]);
 80021d2:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <USB_Parse_Status+0x1b4>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	331b      	adds	r3, #27
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f7fe fc68 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&data[31]);
 80021e0:	4a48      	ldr	r2, [pc, #288]	; (8002304 <USB_Parse_Status+0x1b8>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	331f      	adds	r3, #31
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f7fe fc61 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&data[35]);
 80021ee:	4a46      	ldr	r2, [pc, #280]	; (8002308 <USB_Parse_Status+0x1bc>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3323      	adds	r3, #35	; 0x23
 80021f4:	4619      	mov	r1, r3
 80021f6:	4610      	mov	r0, r2
 80021f8:	f7fe fc5a 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&data[39]);
 80021fc:	4a43      	ldr	r2, [pc, #268]	; (800230c <USB_Parse_Status+0x1c0>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3327      	adds	r3, #39	; 0x27
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f7fe fc53 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&data[43]);
 800220a:	4a41      	ldr	r2, [pc, #260]	; (8002310 <USB_Parse_Status+0x1c4>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	332b      	adds	r3, #43	; 0x2b
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f7fe fc4c 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&data[47]);
 8002218:	4a3e      	ldr	r2, [pc, #248]	; (8002314 <USB_Parse_Status+0x1c8>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	332f      	adds	r3, #47	; 0x2f
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f7fe fc45 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&data[51]);
 8002226:	4a3c      	ldr	r2, [pc, #240]	; (8002318 <USB_Parse_Status+0x1cc>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3333      	adds	r3, #51	; 0x33
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f7fe fc3e 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&data[55]);
 8002234:	4a39      	ldr	r2, [pc, #228]	; (800231c <USB_Parse_Status+0x1d0>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3337      	adds	r3, #55	; 0x37
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f7fe fc54 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&data[57]);
 8002242:	4a37      	ldr	r2, [pc, #220]	; (8002320 <USB_Parse_Status+0x1d4>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3339      	adds	r3, #57	; 0x39
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7fe fc4d 	bl	8000aea <General_Copy_16_Bit>
	pid_sampling_time = data[59];
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <USB_Parse_Status+0x1d8>)
 8002258:	701a      	strb	r2, [r3, #0]
	if(PID_Get_Sampling_Time() != pid_sampling_time){
 800225a:	f7fe fe1b 	bl	8000e94 <PID_Get_Sampling_Time>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	4b30      	ldr	r3, [pc, #192]	; (8002324 <USB_Parse_Status+0x1d8>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	429a      	cmp	r2, r3
 800226a:	d005      	beq.n	8002278 <USB_Parse_Status+0x12c>
		PID_Set_Sampling_Time(pid_sampling_time);
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <USB_Parse_Status+0x1d8>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fe20 	bl	8000eb8 <PID_Set_Sampling_Time>
	}
	float new_pid_setpoint = 0;
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
	General_Copy_32_Bit((uint32_t)&new_pid_setpoint, (uint32_t)&data[60]);
 800227e:	f107 020c 	add.w	r2, r7, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	333c      	adds	r3, #60	; 0x3c
 8002286:	4619      	mov	r1, r3
 8002288:	4610      	mov	r0, r2
 800228a:	f7fe fc11 	bl	8000ab0 <General_Copy_32_Bit>
	if(signal_ignore){
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <USB_Parse_Status+0x198>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00f      	beq.n	80022b6 <USB_Parse_Status+0x16a>
		if(pid_setpoint != new_pid_setpoint){
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <USB_Parse_Status+0x1dc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f9f6 	bl	8000690 <__aeabi_fcmpeq>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <USB_Parse_Status+0x164>
			led_position_changed = 1;
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <USB_Parse_Status+0x1e0>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
		}
		pid_setpoint = new_pid_setpoint;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <USB_Parse_Status+0x1dc>)
 80022b4:	6013      	str	r3, [r2, #0]
	}
	usb_rq_stat_phold = data[64];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <USB_Parse_Status+0x1e4>)
 80022be:	701a      	strb	r2, [r3, #0]
	usb_rq_stat_motor = data[65];
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <USB_Parse_Status+0x1e8>)
 80022c8:	701a      	strb	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200001ec 	.word	0x200001ec
 80022d8:	200001ee 	.word	0x200001ee
 80022dc:	20000000 	.word	0x20000000
 80022e0:	200001c7 	.word	0x200001c7
 80022e4:	2000023c 	.word	0x2000023c
 80022e8:	20000240 	.word	0x20000240
 80022ec:	20000244 	.word	0x20000244
 80022f0:	200001c4 	.word	0x200001c4
 80022f4:	20000020 	.word	0x20000020
 80022f8:	20000004 	.word	0x20000004
 80022fc:	200001cc 	.word	0x200001cc
 8002300:	20000008 	.word	0x20000008
 8002304:	2000000c 	.word	0x2000000c
 8002308:	200001d0 	.word	0x200001d0
 800230c:	20000010 	.word	0x20000010
 8002310:	20000014 	.word	0x20000014
 8002314:	200001d4 	.word	0x200001d4
 8002318:	20000018 	.word	0x20000018
 800231c:	2000001c 	.word	0x2000001c
 8002320:	2000001e 	.word	0x2000001e
 8002324:	20000002 	.word	0x20000002
 8002328:	20000024 	.word	0x20000024
 800232c:	200001c5 	.word	0x200001c5
 8002330:	2000024c 	.word	0x2000024c
 8002334:	2000024b 	.word	0x2000024b

08002338 <USB_Send_Status>:
void USB_Send_Status(){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_STATUS_LENGTH;
 800233e:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <USB_Send_Status+0x84>)
 8002340:	2214      	movs	r2, #20
 8002342:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_STATUS;
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <USB_Send_Status+0x84>)
 8002346:	2201      	movs	r2, #1
 8002348:	705a      	strb	r2, [r3, #1]
	usb_tx_buffer[2] = pid_running;
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <USB_Send_Status+0x88>)
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <USB_Send_Status+0x84>)
 8002350:	709a      	strb	r2, [r3, #2]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[3], (uint32_t)&pid_setpoint);
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <USB_Send_Status+0x8c>)
 8002354:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <USB_Send_Status+0x90>)
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fba9 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[7], (uint32_t)&potentiometer_position);
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <USB_Send_Status+0x94>)
 8002360:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <USB_Send_Status+0x98>)
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fba3 	bl	8000ab0 <General_Copy_32_Bit>
	int16_t motor_val = Motor_Get();
 800236a:	f7fe fd1d 	bl	8000da8 <Motor_Get>
 800236e:	4603      	mov	r3, r0
 8002370:	80fb      	strh	r3, [r7, #6]
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[11], (uint32_t)&motor_val);
 8002372:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <USB_Send_Status+0x9c>)
 8002374:	1dbb      	adds	r3, r7, #6
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f7fe fbb6 	bl	8000aea <General_Copy_16_Bit>
	usb_tx_buffer[13] = USB_CRC_PADDING;
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <USB_Send_Status+0x84>)
 8002380:	2200      	movs	r2, #0
 8002382:	735a      	strb	r2, [r3, #13]
	usb_tx_buffer[14] = USB_CRC_PADDING;
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <USB_Send_Status+0x84>)
 8002386:	2200      	movs	r2, #0
 8002388:	739a      	strb	r2, [r3, #14]
	usb_tx_buffer[15] = USB_CRC_PADDING;
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <USB_Send_Status+0x84>)
 800238c:	2200      	movs	r2, #0
 800238e:	73da      	strb	r2, [r3, #15]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_STATUS_LENGTH / 4) - 1);
 8002390:	2204      	movs	r2, #4
 8002392:	490a      	ldr	r1, [pc, #40]	; (80023bc <USB_Send_Status+0x84>)
 8002394:	4810      	ldr	r0, [pc, #64]	; (80023d8 <USB_Send_Status+0xa0>)
 8002396:	f001 fa46 	bl	8003826 <HAL_CRC_Calculate>
 800239a:	4603      	mov	r3, r0
 800239c:	603b      	str	r3, [r7, #0]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[16], (uint32_t)&crc);
 800239e:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <USB_Send_Status+0xa4>)
 80023a0:	463b      	mov	r3, r7
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f7fe fb83 	bl	8000ab0 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_STATUS_LENGTH);
 80023aa:	2114      	movs	r1, #20
 80023ac:	4803      	ldr	r0, [pc, #12]	; (80023bc <USB_Send_Status+0x84>)
 80023ae:	f009 fa4f 	bl	800b850 <CDC_Transmit_FS>
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000250 	.word	0x20000250
 80023c0:	200001d8 	.word	0x200001d8
 80023c4:	20000253 	.word	0x20000253
 80023c8:	20000024 	.word	0x20000024
 80023cc:	20000257 	.word	0x20000257
 80023d0:	200001f8 	.word	0x200001f8
 80023d4:	2000025b 	.word	0x2000025b
 80023d8:	200003c0 	.word	0x200003c0
 80023dc:	20000260 	.word	0x20000260

080023e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e4:	f000 fbe4 	bl	8002bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e8:	f000 f813 	bl	8002412 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ec:	f000 f9de 	bl	80027ac <MX_GPIO_Init>
  MX_ADC1_Init();
 80023f0:	f000 f86c 	bl	80024cc <MX_ADC1_Init>
  MX_CRC_Init();
 80023f4:	f000 f8a8 	bl	8002548 <MX_CRC_Init>
  MX_TIM2_Init();
 80023f8:	f000 f8ba 	bl	8002570 <MX_TIM2_Init>
  MX_TIM3_Init();
 80023fc:	f000 f93a 	bl	8002674 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002400:	f000 f986 	bl	8002710 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002404:	f009 f960 	bl	800b6c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
App_Init();
 8002408:	f7fe f9f6 	bl	80007f8 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
App_Loop();
 800240c:	f7fe fa02 	bl	8000814 <App_Loop>
 8002410:	e7fc      	b.n	800240c <main+0x2c>

08002412 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b094      	sub	sp, #80	; 0x50
 8002416:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800241c:	2228      	movs	r2, #40	; 0x28
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f009 fe25 	bl	800c070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002442:	2301      	movs	r3, #1
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002450:	2301      	movs	r3, #1
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002454:	2302      	movs	r3, #2
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800245e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002462:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002468:	4618      	mov	r0, r3
 800246a:	f003 fa9f 	bl	80059ac <HAL_RCC_OscConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002474:	f000 fa04 	bl	8002880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002478:	230f      	movs	r3, #15
 800247a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002488:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	2102      	movs	r1, #2
 8002494:	4618      	mov	r0, r3
 8002496:	f003 fd0b 	bl	8005eb0 <HAL_RCC_ClockConfig>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80024a0:	f000 f9ee 	bl	8002880 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80024a4:	2312      	movs	r3, #18
 80024a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80024a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	4618      	mov	r0, r3
 80024b6:	f003 fe7f 	bl	80061b8 <HAL_RCCEx_PeriphCLKConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80024c0:	f000 f9de 	bl	8002880 <Error_Handler>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3750      	adds	r7, #80	; 0x50
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <MX_ADC1_Init+0x74>)
 80024de:	4a19      	ldr	r2, [pc, #100]	; (8002544 <MX_ADC1_Init+0x78>)
 80024e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <MX_ADC1_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <MX_ADC1_Init+0x74>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <MX_ADC1_Init+0x74>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <MX_ADC1_Init+0x74>)
 80024f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80024fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <MX_ADC1_Init+0x74>)
 80024fe:	2200      	movs	r2, #0
 8002500:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <MX_ADC1_Init+0x74>)
 8002504:	2201      	movs	r2, #1
 8002506:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002508:	480d      	ldr	r0, [pc, #52]	; (8002540 <MX_ADC1_Init+0x74>)
 800250a:	f000 fbb3 	bl	8002c74 <HAL_ADC_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002514:	f000 f9b4 	bl	8002880 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002518:	2304      	movs	r3, #4
 800251a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800251c:	2301      	movs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002520:	2307      	movs	r3, #7
 8002522:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_ADC1_Init+0x74>)
 800252a:	f000 fe09 	bl	8003140 <HAL_ADC_ConfigChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002534:	f000 f9a4 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000390 	.word	0x20000390
 8002544:	40012400 	.word	0x40012400

08002548 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_CRC_Init+0x20>)
 800254e:	4a07      	ldr	r2, [pc, #28]	; (800256c <MX_CRC_Init+0x24>)
 8002550:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_CRC_Init+0x20>)
 8002554:	f001 f94b 	bl	80037ee <HAL_CRC_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800255e:	f000 f98f 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200003c0 	.word	0x200003c0
 800256c:	40023000 	.word	0x40023000

08002570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	f107 0320 	add.w	r3, r7, #32
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
 800259c:	615a      	str	r2, [r3, #20]
 800259e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025a0:	4b33      	ldr	r3, [pc, #204]	; (8002670 <MX_TIM2_Init+0x100>)
 80025a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80025a8:	4b31      	ldr	r3, [pc, #196]	; (8002670 <MX_TIM2_Init+0x100>)
 80025aa:	2207      	movs	r2, #7
 80025ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ae:	4b30      	ldr	r3, [pc, #192]	; (8002670 <MX_TIM2_Init+0x100>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80025b4:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <MX_TIM2_Init+0x100>)
 80025b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <MX_TIM2_Init+0x100>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c2:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <MX_TIM2_Init+0x100>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025c8:	4829      	ldr	r0, [pc, #164]	; (8002670 <MX_TIM2_Init+0x100>)
 80025ca:	f003 ff6b 	bl	80064a4 <HAL_TIM_Base_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025d4:	f000 f954 	bl	8002880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e2:	4619      	mov	r1, r3
 80025e4:	4822      	ldr	r0, [pc, #136]	; (8002670 <MX_TIM2_Init+0x100>)
 80025e6:	f004 fb37 	bl	8006c58 <HAL_TIM_ConfigClockSource>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025f0:	f000 f946 	bl	8002880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025f4:	481e      	ldr	r0, [pc, #120]	; (8002670 <MX_TIM2_Init+0x100>)
 80025f6:	f004 f86f 	bl	80066d8 <HAL_TIM_PWM_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002600:	f000 f93e 	bl	8002880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800260c:	f107 0320 	add.w	r3, r7, #32
 8002610:	4619      	mov	r1, r3
 8002612:	4817      	ldr	r0, [pc, #92]	; (8002670 <MX_TIM2_Init+0x100>)
 8002614:	f004 feac 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800261e:	f000 f92f 	bl	8002880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002622:	2360      	movs	r3, #96	; 0x60
 8002624:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800262c:	2302      	movs	r3, #2
 800262e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2200      	movs	r2, #0
 8002638:	4619      	mov	r1, r3
 800263a:	480d      	ldr	r0, [pc, #52]	; (8002670 <MX_TIM2_Init+0x100>)
 800263c:	f004 fa4e 	bl	8006adc <HAL_TIM_PWM_ConfigChannel>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002646:	f000 f91b 	bl	8002880 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2204      	movs	r2, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4807      	ldr	r0, [pc, #28]	; (8002670 <MX_TIM2_Init+0x100>)
 8002652:	f004 fa43 	bl	8006adc <HAL_TIM_PWM_ConfigChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800265c:	f000 f910 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002660:	4803      	ldr	r0, [pc, #12]	; (8002670 <MX_TIM2_Init+0x100>)
 8002662:	f000 f9f3 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 8002666:	bf00      	nop
 8002668:	3738      	adds	r7, #56	; 0x38
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200003c8 	.word	0x200003c8

08002674 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002688:	463b      	mov	r3, r7
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <MX_TIM3_Init+0x94>)
 8002692:	4a1e      	ldr	r2, [pc, #120]	; (800270c <MX_TIM3_Init+0x98>)
 8002694:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <MX_TIM3_Init+0x94>)
 8002698:	f240 22cf 	movw	r2, #719	; 0x2cf
 800269c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <MX_TIM3_Init+0x94>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <MX_TIM3_Init+0x94>)
 80026a6:	22c7      	movs	r2, #199	; 0xc7
 80026a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <MX_TIM3_Init+0x94>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <MX_TIM3_Init+0x94>)
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026b6:	4814      	ldr	r0, [pc, #80]	; (8002708 <MX_TIM3_Init+0x94>)
 80026b8:	f003 fef4 	bl	80064a4 <HAL_TIM_Base_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80026c2:	f000 f8dd 	bl	8002880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	4619      	mov	r1, r3
 80026d2:	480d      	ldr	r0, [pc, #52]	; (8002708 <MX_TIM3_Init+0x94>)
 80026d4:	f004 fac0 	bl	8006c58 <HAL_TIM_ConfigClockSource>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80026de:	f000 f8cf 	bl	8002880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026ea:	463b      	mov	r3, r7
 80026ec:	4619      	mov	r1, r3
 80026ee:	4806      	ldr	r0, [pc, #24]	; (8002708 <MX_TIM3_Init+0x94>)
 80026f0:	f004 fe3e 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026fa:	f000 f8c1 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000410 	.word	0x20000410
 800270c:	40000400 	.word	0x40000400

08002710 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002724:	463b      	mov	r3, r7
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800272c:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <MX_TIM4_Init+0x94>)
 800272e:	4a1e      	ldr	r2, [pc, #120]	; (80027a8 <MX_TIM4_Init+0x98>)
 8002730:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 143;
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <MX_TIM4_Init+0x94>)
 8002734:	228f      	movs	r2, #143	; 0x8f
 8002736:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002738:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <MX_TIM4_Init+0x94>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <MX_TIM4_Init+0x94>)
 8002740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002744:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <MX_TIM4_Init+0x94>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274c:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <MX_TIM4_Init+0x94>)
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002752:	4814      	ldr	r0, [pc, #80]	; (80027a4 <MX_TIM4_Init+0x94>)
 8002754:	f003 fea6 	bl	80064a4 <HAL_TIM_Base_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800275e:	f000 f88f 	bl	8002880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002766:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002768:	f107 0308 	add.w	r3, r7, #8
 800276c:	4619      	mov	r1, r3
 800276e:	480d      	ldr	r0, [pc, #52]	; (80027a4 <MX_TIM4_Init+0x94>)
 8002770:	f004 fa72 	bl	8006c58 <HAL_TIM_ConfigClockSource>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800277a:	f000 f881 	bl	8002880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002786:	463b      	mov	r3, r7
 8002788:	4619      	mov	r1, r3
 800278a:	4806      	ldr	r0, [pc, #24]	; (80027a4 <MX_TIM4_Init+0x94>)
 800278c:	f004 fdf0 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002796:	f000 f873 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000458 	.word	0x20000458
 80027a8:	40000800 	.word	0x40000800

080027ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b2:	f107 0310 	add.w	r3, r7, #16
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <MX_GPIO_Init+0xc4>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <MX_GPIO_Init+0xc4>)
 80027c6:	f043 0320 	orr.w	r3, r3, #32
 80027ca:	6193      	str	r3, [r2, #24]
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <MX_GPIO_Init+0xc4>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <MX_GPIO_Init+0xc4>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a24      	ldr	r2, [pc, #144]	; (8002870 <MX_GPIO_Init+0xc4>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b22      	ldr	r3, [pc, #136]	; (8002870 <MX_GPIO_Init+0xc4>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <MX_GPIO_Init+0xc4>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <MX_GPIO_Init+0xc4>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <MX_GPIO_Init+0xc4>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002808:	2200      	movs	r2, #0
 800280a:	2180      	movs	r1, #128	; 0x80
 800280c:	4819      	ldr	r0, [pc, #100]	; (8002874 <MX_GPIO_Init+0xc8>)
 800280e:	f001 fbd8 	bl	8003fc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800281a:	2302      	movs	r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002822:	f107 0310 	add.w	r3, r7, #16
 8002826:	4619      	mov	r1, r3
 8002828:	4812      	ldr	r0, [pc, #72]	; (8002874 <MX_GPIO_Init+0xc8>)
 800282a:	f001 fa2f 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_Pin USB_DET_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin|USB_DET_Pin;
 800282e:	f240 2302 	movw	r3, #514	; 0x202
 8002832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <MX_GPIO_Init+0xcc>)
 8002836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	4619      	mov	r1, r3
 8002842:	480e      	ldr	r0, [pc, #56]	; (800287c <MX_GPIO_Init+0xd0>)
 8002844:	f001 fa22 	bl	8003c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002848:	2200      	movs	r2, #0
 800284a:	2100      	movs	r1, #0
 800284c:	2007      	movs	r0, #7
 800284e:	f000 ff98 	bl	8003782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002852:	2007      	movs	r0, #7
 8002854:	f000 ffb1 	bl	80037ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002858:	2200      	movs	r2, #0
 800285a:	2105      	movs	r1, #5
 800285c:	2017      	movs	r0, #23
 800285e:	f000 ff90 	bl	8003782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002862:	2017      	movs	r0, #23
 8002864:	f000 ffa9 	bl	80037ba <HAL_NVIC_EnableIRQ>

}
 8002868:	bf00      	nop
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	40010800 	.word	0x40010800
 8002878:	10310000 	.word	0x10310000
 800287c:	40010c00 	.word	0x40010c00

08002880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002884:	b672      	cpsid	i
}
 8002886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002888:	e7fe      	b.n	8002888 <Error_Handler+0x8>
	...

0800288c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_MspInit+0x5c>)
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <HAL_MspInit+0x5c>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6193      	str	r3, [r2, #24]
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_MspInit+0x5c>)
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_MspInit+0x5c>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <HAL_MspInit+0x5c>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b4:	61d3      	str	r3, [r2, #28]
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_MspInit+0x5c>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_MspInit+0x60>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_MspInit+0x60>)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40010000 	.word	0x40010000

080028f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <HAL_ADC_MspInit+0x7c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d129      	bne.n	8002964 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <HAL_ADC_MspInit+0x80>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a16      	ldr	r2, [pc, #88]	; (8002970 <HAL_ADC_MspInit+0x80>)
 8002916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_ADC_MspInit+0x80>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_ADC_MspInit+0x80>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_ADC_MspInit+0x80>)
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_ADC_MspInit+0x80>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8002940:	2310      	movs	r3, #16
 8002942:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002944:	2303      	movs	r3, #3
 8002946:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4619      	mov	r1, r3
 800294e:	4809      	ldr	r0, [pc, #36]	; (8002974 <HAL_ADC_MspInit+0x84>)
 8002950:	f001 f99c 	bl	8003c8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002954:	2200      	movs	r2, #0
 8002956:	2102      	movs	r1, #2
 8002958:	2012      	movs	r0, #18
 800295a:	f000 ff12 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800295e:	2012      	movs	r0, #18
 8002960:	f000 ff2b 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40012400 	.word	0x40012400
 8002970:	40021000 	.word	0x40021000
 8002974:	40010800 	.word	0x40010800

08002978 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_CRC_MspInit+0x34>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10b      	bne.n	80029a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_CRC_MspInit+0x38>)
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <HAL_CRC_MspInit+0x38>)
 8002990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002994:	6153      	str	r3, [r2, #20]
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_CRC_MspInit+0x38>)
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	40023000 	.word	0x40023000
 80029b0:	40021000 	.word	0x40021000

080029b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d10c      	bne.n	80029e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_TIM_Base_MspInit+0x8c>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <HAL_TIM_Base_MspInit+0x8c>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	61d3      	str	r3, [r2, #28]
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_TIM_Base_MspInit+0x8c>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029de:	e02a      	b.n	8002a36 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <HAL_TIM_Base_MspInit+0x90>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d114      	bne.n	8002a14 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_TIM_Base_MspInit+0x8c>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_TIM_Base_MspInit+0x8c>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	61d3      	str	r3, [r2, #28]
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_TIM_Base_MspInit+0x8c>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2101      	movs	r1, #1
 8002a06:	201d      	movs	r0, #29
 8002a08:	f000 febb 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a0c:	201d      	movs	r0, #29
 8002a0e:	f000 fed4 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 8002a12:	e010      	b.n	8002a36 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <HAL_TIM_Base_MspInit+0x94>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10b      	bne.n	8002a36 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_TIM_Base_MspInit+0x8c>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <HAL_TIM_Base_MspInit+0x8c>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	61d3      	str	r3, [r2, #28]
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_TIM_Base_MspInit+0x8c>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
}
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800

08002a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0310 	add.w	r3, r7, #16
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6a:	d117      	bne.n	8002a9c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_TIM_MspPostInit+0x58>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <HAL_TIM_MspPostInit+0x58>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	6193      	str	r3, [r2, #24]
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_TIM_MspPostInit+0x58>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8002a84:	2303      	movs	r3, #3
 8002a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	4619      	mov	r1, r3
 8002a96:	4804      	ldr	r0, [pc, #16]	; (8002aa8 <HAL_TIM_MspPostInit+0x5c>)
 8002a98:	f001 f8f8 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010800 	.word	0x40010800

08002aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <NMI_Handler+0x4>

08002ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <HardFault_Handler+0x4>

08002ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <MemManage_Handler+0x4>

08002abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <BusFault_Handler+0x4>

08002ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <UsageFault_Handler+0x4>

08002aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af2:	f000 f8a3 	bl	8002c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 8002af6:	f7fe f839 	bl	8000b6c <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}

08002afe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 8002b02:	2002      	movs	r0, #2
 8002b04:	f001 fa76 	bl	8003ff4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <ADC1_2_IRQHandler+0x10>)
 8002b12:	f000 fa49 	bl	8002fa8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000390 	.word	0x20000390

08002b20 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b26:	f001 fbae 	bl	8004286 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20001160 	.word	0x20001160

08002b34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DET_Pin);
 8002b38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b3c:	f001 fa5a 	bl	8003ff4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <TIM3_IRQHandler+0x10>)
 8002b4a:	f003 febf 	bl	80068cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000410 	.word	0x20000410

08002b58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b64:	480c      	ldr	r0, [pc, #48]	; (8002b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b66:	490d      	ldr	r1, [pc, #52]	; (8002b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b68:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b6c:	e002      	b.n	8002b74 <LoopCopyDataInit>

08002b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b72:	3304      	adds	r3, #4

08002b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b78:	d3f9      	bcc.n	8002b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b80:	e001      	b.n	8002b86 <LoopFillZerobss>

08002b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b84:	3204      	adds	r2, #4

08002b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b88:	d3fb      	bcc.n	8002b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b8a:	f7ff ffe5 	bl	8002b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b8e:	f009 fa3d 	bl	800c00c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b92:	f7ff fc25 	bl	80023e0 <main>
  bx lr
 8002b96:	4770      	bx	lr
  ldr r0, =_sdata
 8002b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b9c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8002ba0:	0800c11c 	.word	0x0800c11c
  ldr r2, =_sbss
 8002ba4:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8002ba8:	2000166c 	.word	0x2000166c

08002bac <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bac:	e7fe      	b.n	8002bac <CAN1_RX1_IRQHandler>
	...

08002bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_Init+0x28>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_Init+0x28>)
 8002bba:	f043 0310 	orr.w	r3, r3, #16
 8002bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f000 fdd3 	bl	800376c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bc6:	2004      	movs	r0, #4
 8002bc8:	f000 f808 	bl	8002bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bcc:	f7ff fe5e 	bl	800288c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40022000 	.word	0x40022000

08002bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_InitTick+0x54>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_InitTick+0x58>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4619      	mov	r1, r3
 8002bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fdeb 	bl	80037d6 <HAL_SYSTICK_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00e      	b.n	8002c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d80a      	bhi.n	8002c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c10:	2200      	movs	r2, #0
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f000 fdb3 	bl	8003782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c1c:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <HAL_InitTick+0x5c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000028 	.word	0x20000028
 8002c34:	20000030 	.word	0x20000030
 8002c38:	2000002c 	.word	0x2000002c

08002c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_IncTick+0x1c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_IncTick+0x20>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a03      	ldr	r2, [pc, #12]	; (8002c5c <HAL_IncTick+0x20>)
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	20000030 	.word	0x20000030
 8002c5c:	200004a0 	.word	0x200004a0

08002c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return uwTick;
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <HAL_GetTick+0x10>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	200004a0 	.word	0x200004a0

08002c74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0be      	b.n	8002e14 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fe1c 	bl	80028f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fb93 	bl	80033e4 <ADC_ConversionStop_Disable>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 8099 	bne.w	8002e02 <HAL_ADC_Init+0x18e>
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 8095 	bne.w	8002e02 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ce0:	f023 0302 	bic.w	r3, r3, #2
 8002ce4:	f043 0202 	orr.w	r2, r3, #2
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cf4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7b1b      	ldrb	r3, [r3, #12]
 8002cfa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cfc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0c:	d003      	beq.n	8002d16 <HAL_ADC_Init+0xa2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d102      	bne.n	8002d1c <HAL_ADC_Init+0xa8>
 8002d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d1a:	e000      	b.n	8002d1e <HAL_ADC_Init+0xaa>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7d1b      	ldrb	r3, [r3, #20]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d119      	bne.n	8002d60 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7b1b      	ldrb	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	035a      	lsls	r2, r3, #13
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	e00b      	b.n	8002d60 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	f043 0201 	orr.w	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <HAL_ADC_Init+0x1a8>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d90:	d003      	beq.n	8002d9a <HAL_ADC_Init+0x126>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d104      	bne.n	8002da4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	051b      	lsls	r3, r3, #20
 8002da2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_ADC_Init+0x1ac>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d10b      	bne.n	8002de0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	f023 0303 	bic.w	r3, r3, #3
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dde:	e018      	b.n	8002e12 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	f023 0312 	bic.w	r3, r3, #18
 8002de8:	f043 0210 	orr.w	r2, r3, #16
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e00:	e007      	b.n	8002e12 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	f043 0210 	orr.w	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	ffe1f7fd 	.word	0xffe1f7fd
 8002e20:	ff1f0efe 	.word	0xff1f0efe

08002e24 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_Start_IT+0x1a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e0a0      	b.n	8002f80 <HAL_ADC_Start_IT+0x15c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fa72 	bl	8003330 <ADC_Enable>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 808f 	bne.w	8002f76 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a45      	ldr	r2, [pc, #276]	; (8002f88 <HAL_ADC_Start_IT+0x164>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d105      	bne.n	8002e82 <HAL_ADC_Start_IT+0x5e>
 8002e76:	4b45      	ldr	r3, [pc, #276]	; (8002f8c <HAL_ADC_Start_IT+0x168>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d115      	bne.n	8002eae <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d026      	beq.n	8002eea <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ea4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eac:	e01d      	b.n	8002eea <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a33      	ldr	r2, [pc, #204]	; (8002f8c <HAL_ADC_Start_IT+0x168>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_ADC_Start_IT+0xaa>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2f      	ldr	r2, [pc, #188]	; (8002f88 <HAL_ADC_Start_IT+0x164>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10d      	bne.n	8002eea <HAL_ADC_Start_IT+0xc6>
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <HAL_ADC_Start_IT+0x168>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ee2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	f023 0206 	bic.w	r2, r3, #6
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f02:	e002      	b.n	8002f0a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f06f 0202 	mvn.w	r2, #2
 8002f1a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0220 	orr.w	r2, r2, #32
 8002f2a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f3a:	d113      	bne.n	8002f64 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f40:	4a11      	ldr	r2, [pc, #68]	; (8002f88 <HAL_ADC_Start_IT+0x164>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d105      	bne.n	8002f52 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_ADC_Start_IT+0x168>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	e00c      	b.n	8002f7e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	e003      	b.n	8002f7e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40012800 	.word	0x40012800
 8002f8c:	40012400 	.word	0x40012400

08002f90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d140      	bne.n	8003040 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d139      	bne.n	8003040 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ff2:	d11d      	bne.n	8003030 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d119      	bne.n	8003030 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0220 	bic.w	r2, r2, #32
 800300a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd fd77 	bl	8000b24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f06f 0212 	mvn.w	r2, #18
 800303e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d14f      	bne.n	80030ee <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b04      	cmp	r3, #4
 800305a:	d148      	bne.n	80030ee <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800307e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003082:	d012      	beq.n	80030aa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800308e:	2b00      	cmp	r3, #0
 8003090:	d125      	bne.n	80030de <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800309c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030a0:	d11d      	bne.n	80030de <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d119      	bne.n	80030de <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa6e 	bl	80035c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 020c 	mvn.w	r2, #12
 80030ec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d114      	bne.n	8003126 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b01      	cmp	r3, #1
 8003108:	d10d      	bne.n	8003126 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f809 	bl	800312e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0201 	mvn.w	r2, #1
 8003124:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x20>
 800315c:	2302      	movs	r3, #2
 800315e:	e0dc      	b.n	800331a <HAL_ADC_ConfigChannel+0x1da>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b06      	cmp	r3, #6
 800316e:	d81c      	bhi.n	80031aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	3b05      	subs	r3, #5
 8003182:	221f      	movs	r2, #31
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	4019      	ands	r1, r3
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	3b05      	subs	r3, #5
 800319c:	fa00 f203 	lsl.w	r2, r0, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	635a      	str	r2, [r3, #52]	; 0x34
 80031a8:	e03c      	b.n	8003224 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d81c      	bhi.n	80031ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	3b23      	subs	r3, #35	; 0x23
 80031c4:	221f      	movs	r2, #31
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	4019      	ands	r1, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	3b23      	subs	r3, #35	; 0x23
 80031de:	fa00 f203 	lsl.w	r2, r0, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
 80031ea:	e01b      	b.n	8003224 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3b41      	subs	r3, #65	; 0x41
 80031fe:	221f      	movs	r2, #31
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	4019      	ands	r1, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	3b41      	subs	r3, #65	; 0x41
 8003218:	fa00 f203 	lsl.w	r2, r0, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b09      	cmp	r3, #9
 800322a:	d91c      	bls.n	8003266 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68d9      	ldr	r1, [r3, #12]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	3b1e      	subs	r3, #30
 800323e:	2207      	movs	r2, #7
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	4019      	ands	r1, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6898      	ldr	r0, [r3, #8]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	3b1e      	subs	r3, #30
 8003258:	fa00 f203 	lsl.w	r2, r0, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	60da      	str	r2, [r3, #12]
 8003264:	e019      	b.n	800329a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6919      	ldr	r1, [r3, #16]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	2207      	movs	r2, #7
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	4019      	ands	r1, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6898      	ldr	r0, [r3, #8]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	fa00 f203 	lsl.w	r2, r0, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d003      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032a6:	2b11      	cmp	r3, #17
 80032a8:	d132      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_ADC_ConfigChannel+0x1e4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d125      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d126      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d11a      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <HAL_ADC_ConfigChannel+0x1e8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a13      	ldr	r2, [pc, #76]	; (800332c <HAL_ADC_ConfigChannel+0x1ec>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	0c9a      	lsrs	r2, r3, #18
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032f0:	e002      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f9      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x1b2>
 80032fe:	e007      	b.n	8003310 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40012400 	.word	0x40012400
 8003328:	20000028 	.word	0x20000028
 800332c:	431bde83 	.word	0x431bde83

08003330 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d040      	beq.n	80033d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800335e:	4b1f      	ldr	r3, [pc, #124]	; (80033dc <ADC_Enable+0xac>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1f      	ldr	r2, [pc, #124]	; (80033e0 <ADC_Enable+0xb0>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	0c9b      	lsrs	r3, r3, #18
 800336a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800336c:	e002      	b.n	8003374 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3b01      	subs	r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f9      	bne.n	800336e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800337a:	f7ff fc71 	bl	8002c60 <HAL_GetTick>
 800337e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003380:	e01f      	b.n	80033c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003382:	f7ff fc6d 	bl	8002c60 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d918      	bls.n	80033c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d011      	beq.n	80033c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f043 0210 	orr.w	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e007      	b.n	80033d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d1d8      	bne.n	8003382 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000028 	.word	0x20000028
 80033e0:	431bde83 	.word	0x431bde83

080033e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d12e      	bne.n	800345c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800340e:	f7ff fc27 	bl	8002c60 <HAL_GetTick>
 8003412:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003414:	e01b      	b.n	800344e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003416:	f7ff fc23 	bl	8002c60 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d914      	bls.n	800344e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d10d      	bne.n	800344e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	f043 0210 	orr.w	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e007      	b.n	800345e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d0dc      	beq.n	8003416 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_ADCEx_Calibration_Start+0x1e>
 8003482:	2302      	movs	r3, #2
 8003484:	e095      	b.n	80035b2 <HAL_ADCEx_Calibration_Start+0x14a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ffa8 	bl	80033e4 <ADC_ConversionStop_Disable>
 8003494:	4603      	mov	r3, r0
 8003496:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f040 8084 	bne.w	80035a8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034a8:	f023 0302 	bic.w	r3, r3, #2
 80034ac:	f043 0202 	orr.w	r2, r3, #2
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034b4:	4b41      	ldr	r3, [pc, #260]	; (80035bc <HAL_ADCEx_Calibration_Start+0x154>)
 80034b6:	681c      	ldr	r4, [r3, #0]
 80034b8:	2002      	movs	r0, #2
 80034ba:	f002 ff33 	bl	8006324 <HAL_RCCEx_GetPeriphCLKFreq>
 80034be:	4603      	mov	r3, r0
 80034c0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80034c4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80034c6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80034c8:	e002      	b.n	80034d0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f9      	bne.n	80034ca <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ff2a 	bl	8003330 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0208 	orr.w	r2, r2, #8
 80034ea:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034ec:	f7ff fbb8 	bl	8002c60 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034f2:	e01b      	b.n	800352c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034f4:	f7ff fbb4 	bl	8002c60 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b0a      	cmp	r3, #10
 8003500:	d914      	bls.n	800352c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00d      	beq.n	800352c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	f023 0312 	bic.w	r3, r3, #18
 8003518:	f043 0210 	orr.w	r2, r3, #16
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e042      	b.n	80035b2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1dc      	bne.n	80034f4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0204 	orr.w	r2, r2, #4
 8003548:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800354a:	f7ff fb89 	bl	8002c60 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003550:	e01b      	b.n	800358a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003552:	f7ff fb85 	bl	8002c60 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b0a      	cmp	r3, #10
 800355e:	d914      	bls.n	800358a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	f023 0312 	bic.w	r3, r3, #18
 8003576:	f043 0210 	orr.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e013      	b.n	80035b2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1dc      	bne.n	8003552 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	f023 0303 	bic.w	r3, r3, #3
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd90      	pop	{r4, r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000028 	.word	0x20000028

080035c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
	...

080035d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003606:	4a04      	ldr	r2, [pc, #16]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	60d3      	str	r3, [r2, #12]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <__NVIC_GetPriorityGrouping+0x18>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0307 	and.w	r3, r3, #7
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	db0b      	blt.n	8003662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4906      	ldr	r1, [pc, #24]	; (800366c <__NVIC_EnableIRQ+0x34>)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2001      	movs	r0, #1
 800365a:	fa00 f202 	lsl.w	r2, r0, r2
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	e000e100 	.word	0xe000e100

08003670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	; (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	; (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	2b04      	cmp	r3, #4
 80036e0:	bf28      	it	cs
 80036e2:	2304      	movcs	r3, #4
 80036e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d902      	bls.n	80036f4 <NVIC_EncodePriority+0x30>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3b03      	subs	r3, #3
 80036f2:	e000      	b.n	80036f6 <NVIC_EncodePriority+0x32>
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800370c:	f04f 31ff 	mov.w	r1, #4294967295
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43d9      	mvns	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	4313      	orrs	r3, r2
         );
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003738:	d301      	bcc.n	800373e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <SysTick_Config+0x40>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003746:	210f      	movs	r1, #15
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	f7ff ff90 	bl	8003670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <SysTick_Config+0x40>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003756:	4b04      	ldr	r3, [pc, #16]	; (8003768 <SysTick_Config+0x40>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff2d 	bl	80035d4 <__NVIC_SetPriorityGrouping>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003794:	f7ff ff42 	bl	800361c <__NVIC_GetPriorityGrouping>
 8003798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff90 	bl	80036c4 <NVIC_EncodePriority>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff5f 	bl	8003670 <__NVIC_SetPriority>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff35 	bl	8003638 <__NVIC_EnableIRQ>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ffa2 	bl	8003728 <SysTick_Config>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e00e      	b.n	800381e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	795b      	ldrb	r3, [r3, #5]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff f8b1 	bl	8002978 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003826:	b480      	push	{r7}
 8003828:	b087      	sub	sp, #28
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2202      	movs	r2, #2
 800383a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e00a      	b.n	8003868 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	441a      	add	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	3301      	adds	r3, #1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	d3f0      	bcc.n	8003852 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800387e:	693b      	ldr	r3, [r7, #16]
}
 8003880:	4618      	mov	r0, r3
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
	...

0800388c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800388c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038a6:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <HAL_FLASH_Program+0xd8>)
 80038a8:	7e1b      	ldrb	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_FLASH_Program+0x26>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e054      	b.n	800395c <HAL_FLASH_Program+0xd0>
 80038b2:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <HAL_FLASH_Program+0xd8>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038bc:	f000 f8a8 	bl	8003a10 <FLASH_WaitForLastOperation>
 80038c0:	4603      	mov	r3, r0
 80038c2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d144      	bne.n	8003954 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d102      	bne.n	80038d6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80038d0:	2301      	movs	r3, #1
 80038d2:	757b      	strb	r3, [r7, #21]
 80038d4:	e007      	b.n	80038e6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d102      	bne.n	80038e2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80038dc:	2302      	movs	r3, #2
 80038de:	757b      	strb	r3, [r7, #21]
 80038e0:	e001      	b.n	80038e6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80038e2:	2304      	movs	r3, #4
 80038e4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	75bb      	strb	r3, [r7, #22]
 80038ea:	e02d      	b.n	8003948 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80038ec:	7dbb      	ldrb	r3, [r7, #22]
 80038ee:	005a      	lsls	r2, r3, #1
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	eb02 0c03 	add.w	ip, r2, r3
 80038f6:	7dbb      	ldrb	r3, [r7, #22]
 80038f8:	0119      	lsls	r1, r3, #4
 80038fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038fe:	f1c1 0620 	rsb	r6, r1, #32
 8003902:	f1a1 0020 	sub.w	r0, r1, #32
 8003906:	fa22 f401 	lsr.w	r4, r2, r1
 800390a:	fa03 f606 	lsl.w	r6, r3, r6
 800390e:	4334      	orrs	r4, r6
 8003910:	fa23 f000 	lsr.w	r0, r3, r0
 8003914:	4304      	orrs	r4, r0
 8003916:	fa23 f501 	lsr.w	r5, r3, r1
 800391a:	b2a3      	uxth	r3, r4
 800391c:	4619      	mov	r1, r3
 800391e:	4660      	mov	r0, ip
 8003920:	f000 f85a 	bl	80039d8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003924:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003928:	f000 f872 	bl	8003a10 <FLASH_WaitForLastOperation>
 800392c:	4603      	mov	r3, r0
 800392e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003930:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <HAL_FLASH_Program+0xdc>)
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <HAL_FLASH_Program+0xdc>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d107      	bne.n	8003952 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003942:	7dbb      	ldrb	r3, [r7, #22]
 8003944:	3301      	adds	r3, #1
 8003946:	75bb      	strb	r3, [r7, #22]
 8003948:	7dba      	ldrb	r2, [r7, #22]
 800394a:	7d7b      	ldrb	r3, [r7, #21]
 800394c:	429a      	cmp	r2, r3
 800394e:	d3cd      	bcc.n	80038ec <HAL_FLASH_Program+0x60>
 8003950:	e000      	b.n	8003954 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003952:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_FLASH_Program+0xd8>)
 8003956:	2200      	movs	r2, #0
 8003958:	761a      	strb	r2, [r3, #24]

  return status;
 800395a:	7dfb      	ldrb	r3, [r7, #23]
}
 800395c:	4618      	mov	r0, r3
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003964:	200004a8 	.word	0x200004a8
 8003968:	40022000 	.word	0x40022000

0800396c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_FLASH_Unlock+0x40>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_FLASH_Unlock+0x40>)
 8003984:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <HAL_FLASH_Unlock+0x44>)
 8003986:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_FLASH_Unlock+0x40>)
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <HAL_FLASH_Unlock+0x48>)
 800398c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <HAL_FLASH_Unlock+0x40>)
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800399e:	79fb      	ldrb	r3, [r7, #7]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40022000 	.word	0x40022000
 80039b0:	45670123 	.word	0x45670123
 80039b4:	cdef89ab 	.word	0xcdef89ab

080039b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_FLASH_Lock+0x1c>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <HAL_FLASH_Lock+0x1c>)
 80039c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40022000 	.word	0x40022000

080039d8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <FLASH_Program_HalfWord+0x30>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <FLASH_Program_HalfWord+0x34>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <FLASH_Program_HalfWord+0x34>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	887a      	ldrh	r2, [r7, #2]
 80039fa:	801a      	strh	r2, [r3, #0]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	200004a8 	.word	0x200004a8
 8003a0c:	40022000 	.word	0x40022000

08003a10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a18:	f7ff f922 	bl	8002c60 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a1e:	e010      	b.n	8003a42 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d00c      	beq.n	8003a42 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <FLASH_WaitForLastOperation+0x2e>
 8003a2e:	f7ff f917 	bl	8002c60 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d201      	bcs.n	8003a42 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e025      	b.n	8003a8e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e8      	bne.n	8003a20 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a84:	f000 f80a 	bl	8003a9c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40022000 	.word	0x40022000

08003a9c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d009      	beq.n	8003ac6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003abc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f043 0310 	orr.w	r3, r3, #16
 8003ac4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003ad2:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003adc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003af2:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f043 0304 	orr.w	r3, r3, #4
 8003afa:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003afc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4a0c      	ldr	r2, [pc, #48]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f240 1201 	movw	r2, #257	; 0x101
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d106      	bne.n	8003b22 <FLASH_SetErrorCode+0x86>
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4a06      	ldr	r2, [pc, #24]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	61d3      	str	r3, [r2, #28]
}  
 8003b20:	e002      	b.n	8003b28 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b22:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	60d3      	str	r3, [r2, #12]
}  
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40022000 	.word	0x40022000
 8003b38:	200004a8 	.word	0x200004a8

08003b3c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <HAL_FLASHEx_Erase+0xd0>)
 8003b50:	7e1b      	ldrb	r3, [r3, #24]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_FLASHEx_Erase+0x1e>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e053      	b.n	8003c02 <HAL_FLASHEx_Erase+0xc6>
 8003b5a:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_FLASHEx_Erase+0xd0>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d116      	bne.n	8003b96 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b6c:	f7ff ff50 	bl	8003a10 <FLASH_WaitForLastOperation>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d141      	bne.n	8003bfa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003b76:	2001      	movs	r0, #1
 8003b78:	f000 f84c 	bl	8003c14 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b80:	f7ff ff46 	bl	8003a10 <FLASH_WaitForLastOperation>
 8003b84:	4603      	mov	r3, r0
 8003b86:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b88:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <HAL_FLASHEx_Erase+0xd4>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <HAL_FLASHEx_Erase+0xd4>)
 8003b8e:	f023 0304 	bic.w	r3, r3, #4
 8003b92:	6113      	str	r3, [r2, #16]
 8003b94:	e031      	b.n	8003bfa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b9a:	f7ff ff39 	bl	8003a10 <FLASH_WaitForLastOperation>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d12a      	bne.n	8003bfa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8003baa:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	e019      	b.n	8003be8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003bb4:	68b8      	ldr	r0, [r7, #8]
 8003bb6:	f000 f849 	bl	8003c4c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bbe:	f7ff ff27 	bl	8003a10 <FLASH_WaitForLastOperation>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_FLASHEx_Erase+0xd4>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <HAL_FLASHEx_Erase+0xd4>)
 8003bcc:	f023 0302 	bic.w	r3, r3, #2
 8003bd0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	601a      	str	r2, [r3, #0]
            break;
 8003bde:	e00c      	b.n	8003bfa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	029a      	lsls	r2, r3, #10
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d3dc      	bcc.n	8003bb4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bfa:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <HAL_FLASHEx_Erase+0xd0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	761a      	strb	r2, [r3, #24]

  return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200004a8 	.word	0x200004a8
 8003c10:	40022000 	.word	0x40022000

08003c14 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <FLASH_MassErase+0x30>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <FLASH_MassErase+0x34>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <FLASH_MassErase+0x34>)
 8003c28:	f043 0304 	orr.w	r3, r3, #4
 8003c2c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <FLASH_MassErase+0x34>)
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	4a05      	ldr	r2, [pc, #20]	; (8003c48 <FLASH_MassErase+0x34>)
 8003c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c38:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	200004a8 	.word	0x200004a8
 8003c48:	40022000 	.word	0x40022000

08003c4c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <FLASH_PageErase+0x38>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <FLASH_PageErase+0x3c>)
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <FLASH_PageErase+0x3c>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <FLASH_PageErase+0x3c>)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <FLASH_PageErase+0x3c>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <FLASH_PageErase+0x3c>)
 8003c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c76:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	200004a8 	.word	0x200004a8
 8003c88:	40022000 	.word	0x40022000

08003c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b08b      	sub	sp, #44	; 0x2c
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c9e:	e169      	b.n	8003f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	f040 8158 	bne.w	8003f6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4a9a      	ldr	r2, [pc, #616]	; (8003f2c <HAL_GPIO_Init+0x2a0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d05e      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cc8:	4a98      	ldr	r2, [pc, #608]	; (8003f2c <HAL_GPIO_Init+0x2a0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d875      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cce:	4a98      	ldr	r2, [pc, #608]	; (8003f30 <HAL_GPIO_Init+0x2a4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d058      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cd4:	4a96      	ldr	r2, [pc, #600]	; (8003f30 <HAL_GPIO_Init+0x2a4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d86f      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cda:	4a96      	ldr	r2, [pc, #600]	; (8003f34 <HAL_GPIO_Init+0x2a8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d052      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003ce0:	4a94      	ldr	r2, [pc, #592]	; (8003f34 <HAL_GPIO_Init+0x2a8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d869      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003ce6:	4a94      	ldr	r2, [pc, #592]	; (8003f38 <HAL_GPIO_Init+0x2ac>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d04c      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cec:	4a92      	ldr	r2, [pc, #584]	; (8003f38 <HAL_GPIO_Init+0x2ac>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d863      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cf2:	4a92      	ldr	r2, [pc, #584]	; (8003f3c <HAL_GPIO_Init+0x2b0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d046      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cf8:	4a90      	ldr	r2, [pc, #576]	; (8003f3c <HAL_GPIO_Init+0x2b0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d85d      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cfe:	2b12      	cmp	r3, #18
 8003d00:	d82a      	bhi.n	8003d58 <HAL_GPIO_Init+0xcc>
 8003d02:	2b12      	cmp	r3, #18
 8003d04:	d859      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003d06:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <HAL_GPIO_Init+0x80>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003d87 	.word	0x08003d87
 8003d10:	08003d61 	.word	0x08003d61
 8003d14:	08003d73 	.word	0x08003d73
 8003d18:	08003db5 	.word	0x08003db5
 8003d1c:	08003dbb 	.word	0x08003dbb
 8003d20:	08003dbb 	.word	0x08003dbb
 8003d24:	08003dbb 	.word	0x08003dbb
 8003d28:	08003dbb 	.word	0x08003dbb
 8003d2c:	08003dbb 	.word	0x08003dbb
 8003d30:	08003dbb 	.word	0x08003dbb
 8003d34:	08003dbb 	.word	0x08003dbb
 8003d38:	08003dbb 	.word	0x08003dbb
 8003d3c:	08003dbb 	.word	0x08003dbb
 8003d40:	08003dbb 	.word	0x08003dbb
 8003d44:	08003dbb 	.word	0x08003dbb
 8003d48:	08003dbb 	.word	0x08003dbb
 8003d4c:	08003dbb 	.word	0x08003dbb
 8003d50:	08003d69 	.word	0x08003d69
 8003d54:	08003d7d 	.word	0x08003d7d
 8003d58:	4a79      	ldr	r2, [pc, #484]	; (8003f40 <HAL_GPIO_Init+0x2b4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d5e:	e02c      	b.n	8003dba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	623b      	str	r3, [r7, #32]
          break;
 8003d66:	e029      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	623b      	str	r3, [r7, #32]
          break;
 8003d70:	e024      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	3308      	adds	r3, #8
 8003d78:	623b      	str	r3, [r7, #32]
          break;
 8003d7a:	e01f      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	330c      	adds	r3, #12
 8003d82:	623b      	str	r3, [r7, #32]
          break;
 8003d84:	e01a      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d8e:	2304      	movs	r3, #4
 8003d90:	623b      	str	r3, [r7, #32]
          break;
 8003d92:	e013      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d105      	bne.n	8003da8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	611a      	str	r2, [r3, #16]
          break;
 8003da6:	e009      	b.n	8003dbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003da8:	2308      	movs	r3, #8
 8003daa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	615a      	str	r2, [r3, #20]
          break;
 8003db2:	e003      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003db4:	2300      	movs	r3, #0
 8003db6:	623b      	str	r3, [r7, #32]
          break;
 8003db8:	e000      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          break;
 8003dba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2bff      	cmp	r3, #255	; 0xff
 8003dc0:	d801      	bhi.n	8003dc6 <HAL_GPIO_Init+0x13a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	e001      	b.n	8003dca <HAL_GPIO_Init+0x13e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2bff      	cmp	r3, #255	; 0xff
 8003dd0:	d802      	bhi.n	8003dd8 <HAL_GPIO_Init+0x14c>
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	e002      	b.n	8003dde <HAL_GPIO_Init+0x152>
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	3b08      	subs	r3, #8
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	210f      	movs	r1, #15
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	401a      	ands	r2, r3
 8003df0:	6a39      	ldr	r1, [r7, #32]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80b1 	beq.w	8003f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e0c:	4b4d      	ldr	r3, [pc, #308]	; (8003f44 <HAL_GPIO_Init+0x2b8>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	4a4c      	ldr	r2, [pc, #304]	; (8003f44 <HAL_GPIO_Init+0x2b8>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6193      	str	r3, [r2, #24]
 8003e18:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <HAL_GPIO_Init+0x2b8>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e24:	4a48      	ldr	r2, [pc, #288]	; (8003f48 <HAL_GPIO_Init+0x2bc>)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a40      	ldr	r2, [pc, #256]	; (8003f4c <HAL_GPIO_Init+0x2c0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d013      	beq.n	8003e78 <HAL_GPIO_Init+0x1ec>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3f      	ldr	r2, [pc, #252]	; (8003f50 <HAL_GPIO_Init+0x2c4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00d      	beq.n	8003e74 <HAL_GPIO_Init+0x1e8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3e      	ldr	r2, [pc, #248]	; (8003f54 <HAL_GPIO_Init+0x2c8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d007      	beq.n	8003e70 <HAL_GPIO_Init+0x1e4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3d      	ldr	r2, [pc, #244]	; (8003f58 <HAL_GPIO_Init+0x2cc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <HAL_GPIO_Init+0x1e0>
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e006      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	e004      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e002      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	f002 0203 	and.w	r2, r2, #3
 8003e80:	0092      	lsls	r2, r2, #2
 8003e82:	4093      	lsls	r3, r2
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e8a:	492f      	ldr	r1, [pc, #188]	; (8003f48 <HAL_GPIO_Init+0x2bc>)
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	3302      	adds	r3, #2
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d006      	beq.n	8003eb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ea4:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	492c      	ldr	r1, [pc, #176]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]
 8003eb0:	e006      	b.n	8003ec0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003eb2:	4b2a      	ldr	r3, [pc, #168]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	4928      	ldr	r1, [pc, #160]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d006      	beq.n	8003eda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ecc:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	4922      	ldr	r1, [pc, #136]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
 8003ed8:	e006      	b.n	8003ee8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	491e      	ldr	r1, [pc, #120]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ef4:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	4918      	ldr	r1, [pc, #96]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]
 8003f00:	e006      	b.n	8003f10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	4914      	ldr	r1, [pc, #80]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d021      	beq.n	8003f60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	490e      	ldr	r1, [pc, #56]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60cb      	str	r3, [r1, #12]
 8003f28:	e021      	b.n	8003f6e <HAL_GPIO_Init+0x2e2>
 8003f2a:	bf00      	nop
 8003f2c:	10320000 	.word	0x10320000
 8003f30:	10310000 	.word	0x10310000
 8003f34:	10220000 	.word	0x10220000
 8003f38:	10210000 	.word	0x10210000
 8003f3c:	10120000 	.word	0x10120000
 8003f40:	10110000 	.word	0x10110000
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40010800 	.word	0x40010800
 8003f50:	40010c00 	.word	0x40010c00
 8003f54:	40011000 	.word	0x40011000
 8003f58:	40011400 	.word	0x40011400
 8003f5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_GPIO_Init+0x304>)
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	4909      	ldr	r1, [pc, #36]	; (8003f90 <HAL_GPIO_Init+0x304>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	3301      	adds	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f47f ae8e 	bne.w	8003ca0 <HAL_GPIO_Init+0x14>
  }
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	372c      	adds	r7, #44	; 0x2c
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr
 8003f90:	40010400 	.word	0x40010400

08003f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
 8003fb0:	e001      	b.n	8003fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	807b      	strh	r3, [r7, #2]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fd2:	787b      	ldrb	r3, [r7, #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fd8:	887a      	ldrh	r2, [r7, #2]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fde:	e003      	b.n	8003fe8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fe0:	887b      	ldrh	r3, [r7, #2]
 8003fe2:	041a      	lsls	r2, r3, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	611a      	str	r2, [r3, #16]
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
	...

08003ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800400a:	4a05      	ldr	r2, [pc, #20]	; (8004020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fdb4 	bl	8000b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40010400 	.word	0x40010400

08004024 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004026:	b08b      	sub	sp, #44	; 0x2c
 8004028:	af06      	add	r7, sp, #24
 800402a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e0fd      	b.n	8004232 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f007 fd34 	bl	800bab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2203      	movs	r2, #3
 8004054:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f003 fa1d 	bl	800749c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	687e      	ldr	r6, [r7, #4]
 800406a:	466d      	mov	r5, sp
 800406c:	f106 0410 	add.w	r4, r6, #16
 8004070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	602b      	str	r3, [r5, #0]
 8004078:	1d33      	adds	r3, r6, #4
 800407a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800407c:	6838      	ldr	r0, [r7, #0]
 800407e:	f003 f9e7 	bl	8007450 <USB_CoreInit>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0ce      	b.n	8004232 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f003 fa18 	bl	80074d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	e04c      	b.n	8004140 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	440b      	add	r3, r1
 80040b6:	3301      	adds	r3, #1
 80040b8:	2201      	movs	r2, #1
 80040ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	b298      	uxth	r0, r3
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	440b      	add	r3, r1
 80040e2:	3336      	adds	r3, #54	; 0x36
 80040e4:	4602      	mov	r2, r0
 80040e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	440b      	add	r3, r1
 80040f8:	3303      	adds	r3, #3
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	440b      	add	r3, r1
 800410c:	3338      	adds	r3, #56	; 0x38
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	440b      	add	r3, r1
 8004120:	333c      	adds	r3, #60	; 0x3c
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004126:	7bfa      	ldrb	r2, [r7, #15]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	440b      	add	r3, r1
 8004134:	3340      	adds	r3, #64	; 0x40
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	3301      	adds	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d3ad      	bcc.n	80040a6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	e044      	b.n	80041da <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	440b      	add	r3, r1
 800415e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	440b      	add	r3, r1
 8004174:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004178:	7bfa      	ldrb	r2, [r7, #15]
 800417a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	440b      	add	r3, r1
 80041b6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	3301      	adds	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
 80041da:	7bfa      	ldrb	r2, [r7, #15]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d3b5      	bcc.n	8004150 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	687e      	ldr	r6, [r7, #4]
 80041ec:	466d      	mov	r5, sp
 80041ee:	f106 0410 	add.w	r4, r6, #16
 80041f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	602b      	str	r3, [r5, #0]
 80041fa:	1d33      	adds	r3, r6, #4
 80041fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041fe:	6838      	ldr	r0, [r7, #0]
 8004200:	f003 f972 	bl	80074e8 <USB_DevInit>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2202      	movs	r2, #2
 800420e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e00d      	b.n	8004232 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f005 fe24 	bl	8009e78 <USB_DevDisconnect>

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800423a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_PCD_Start+0x16>
 800424c:	2302      	movs	r3, #2
 800424e:	e016      	b.n	800427e <HAL_PCD_Start+0x44>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f003 f907 	bl	8007470 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004262:	2101      	movs	r1, #1
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f007 fe9a 	bl	800bf9e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f005 fdf8 	bl	8009e64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b088      	sub	sp, #32
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f005 fdfa 	bl	8009e8c <USB_ReadInterrupts>
 8004298:	4603      	mov	r3, r0
 800429a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a2:	d102      	bne.n	80042aa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fb5f 	bl	8004968 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f005 fdec 	bl	8009e8c <USB_ReadInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042be:	d112      	bne.n	80042e6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d2:	b292      	uxth	r2, r2
 80042d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f007 fc68 	bl	800bbae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80042de:	2100      	movs	r1, #0
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f923 	bl	800452c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f005 fdce 	bl	8009e8c <USB_ReadInterrupts>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042fa:	d10b      	bne.n	8004314 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800430e:	b292      	uxth	r2, r2
 8004310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f005 fdb7 	bl	8009e8c <USB_ReadInterrupts>
 800431e:	4603      	mov	r3, r0
 8004320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004328:	d10b      	bne.n	8004342 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800433c:	b292      	uxth	r2, r2
 800433e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f005 fda0 	bl	8009e8c <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004356:	d126      	bne.n	80043a6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004360:	b29a      	uxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0204 	bic.w	r2, r2, #4
 800436a:	b292      	uxth	r2, r2
 800436c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004378:	b29a      	uxth	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0208 	bic.w	r2, r2, #8
 8004382:	b292      	uxth	r2, r2
 8004384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f007 fc49 	bl	800bc20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004396:	b29a      	uxth	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043a0:	b292      	uxth	r2, r2
 80043a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f005 fd6e 	bl	8009e8c <USB_ReadInterrupts>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ba:	f040 8082 	bne.w	80044c2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80043be:	2300      	movs	r3, #0
 80043c0:	77fb      	strb	r3, [r7, #31]
 80043c2:	e010      	b.n	80043e6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	7ffb      	ldrb	r3, [r7, #31]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	441a      	add	r2, r3
 80043d0:	7ffb      	ldrb	r3, [r7, #31]
 80043d2:	8812      	ldrh	r2, [r2, #0]
 80043d4:	b292      	uxth	r2, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	3320      	adds	r3, #32
 80043da:	443b      	add	r3, r7
 80043dc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80043e0:	7ffb      	ldrb	r3, [r7, #31]
 80043e2:	3301      	adds	r3, #1
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	7ffb      	ldrb	r3, [r7, #31]
 80043e8:	2b07      	cmp	r3, #7
 80043ea:	d9eb      	bls.n	80043c4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	b292      	uxth	r2, r2
 8004400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0201 	bic.w	r2, r2, #1
 8004416:	b292      	uxth	r2, r2
 8004418:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800441c:	bf00      	nop
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004426:	b29b      	uxth	r3, r3
 8004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f6      	beq.n	800441e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004438:	b29a      	uxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004442:	b292      	uxth	r2, r2
 8004444:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004448:	2300      	movs	r3, #0
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e00f      	b.n	800446e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800444e:	7ffb      	ldrb	r3, [r7, #31]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	4611      	mov	r1, r2
 8004456:	7ffa      	ldrb	r2, [r7, #31]
 8004458:	0092      	lsls	r2, r2, #2
 800445a:	440a      	add	r2, r1
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	3320      	adds	r3, #32
 8004460:	443b      	add	r3, r7
 8004462:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004466:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004468:	7ffb      	ldrb	r3, [r7, #31]
 800446a:	3301      	adds	r3, #1
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	7ffb      	ldrb	r3, [r7, #31]
 8004470:	2b07      	cmp	r3, #7
 8004472:	d9ec      	bls.n	800444e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800447c:	b29a      	uxth	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0208 	orr.w	r2, r2, #8
 8004486:	b292      	uxth	r2, r2
 8004488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004494:	b29a      	uxth	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449e:	b292      	uxth	r2, r2
 80044a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0204 	orr.w	r2, r2, #4
 80044b6:	b292      	uxth	r2, r2
 80044b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f007 fb95 	bl	800bbec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f005 fce0 	bl	8009e8c <USB_ReadInterrupts>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d6:	d10e      	bne.n	80044f6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044ea:	b292      	uxth	r2, r2
 80044ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f007 fb4e 	bl	800bb92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f005 fcc6 	bl	8009e8c <USB_ReadInterrupts>
 8004500:	4603      	mov	r3, r0
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450a:	d10b      	bne.n	8004524 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004514:	b29a      	uxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451e:	b292      	uxth	r2, r2
 8004520:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004524:	bf00      	nop
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_PCD_SetAddress+0x1a>
 8004542:	2302      	movs	r3, #2
 8004544:	e013      	b.n	800456e <HAL_PCD_SetAddress+0x42>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	78fa      	ldrb	r2, [r7, #3]
 8004552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f005 fc6d 	bl	8009e3e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	4608      	mov	r0, r1
 8004580:	4611      	mov	r1, r2
 8004582:	461a      	mov	r2, r3
 8004584:	4603      	mov	r3, r0
 8004586:	70fb      	strb	r3, [r7, #3]
 8004588:	460b      	mov	r3, r1
 800458a:	803b      	strh	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004598:	2b00      	cmp	r3, #0
 800459a:	da0e      	bge.n	80045ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	4413      	add	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	705a      	strb	r2, [r3, #1]
 80045b8:	e00e      	b.n	80045d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	f003 0207 	and.w	r2, r3, #7
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4413      	add	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045e4:	883a      	ldrh	r2, [r7, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	78ba      	ldrb	r2, [r7, #2]
 80045ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004602:	78bb      	ldrb	r3, [r7, #2]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d102      	bne.n	800460e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_PCD_EP_Open+0xa6>
 8004618:	2302      	movs	r3, #2
 800461a:	e00e      	b.n	800463a <HAL_PCD_EP_Open+0xc4>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	4618      	mov	r0, r3
 800462c:	f002 ff7c 	bl	8007528 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004638:	7afb      	ldrb	r3, [r7, #11]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800464e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004652:	2b00      	cmp	r3, #0
 8004654:	da0e      	bge.n	8004674 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	4413      	add	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	705a      	strb	r2, [r3, #1]
 8004672:	e00e      	b.n	8004692 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	f003 0207 	and.w	r2, r3, #7
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_PCD_EP_Close+0x6a>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e00e      	b.n	80046ca <HAL_PCD_EP_Close+0x88>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68f9      	ldr	r1, [r7, #12]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f003 fa9e 	bl	8007bfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	460b      	mov	r3, r1
 80046e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046e2:	7afb      	ldrb	r3, [r7, #11]
 80046e4:	f003 0207 	and.w	r2, r3, #7
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2200      	movs	r2, #0
 800470a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2200      	movs	r2, #0
 8004710:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004712:	7afb      	ldrb	r3, [r7, #11]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	b2da      	uxtb	r2, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800471e:	7afb      	ldrb	r3, [r7, #11]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6979      	ldr	r1, [r7, #20]
 800472e:	4618      	mov	r0, r3
 8004730:	f003 fc50 	bl	8007fd4 <USB_EPStartXfer>
 8004734:	e005      	b.n	8004742 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6979      	ldr	r1, [r7, #20]
 800473c:	4618      	mov	r0, r3
 800473e:	f003 fc49 	bl	8007fd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	f003 0207 	and.w	r2, r3, #7
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	440b      	add	r3, r1
 800476a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b086      	sub	sp, #24
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	460b      	mov	r3, r1
 8004788:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800478a:	7afb      	ldrb	r3, [r7, #11]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4413      	add	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2200      	movs	r2, #0
 80047be:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2201      	movs	r2, #1
 80047c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047c6:	7afb      	ldrb	r3, [r7, #11]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047d2:	7afb      	ldrb	r3, [r7, #11]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6979      	ldr	r1, [r7, #20]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f003 fbf6 	bl	8007fd4 <USB_EPStartXfer>
 80047e8:	e005      	b.n	80047f6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6979      	ldr	r1, [r7, #20]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f003 fbef 	bl	8007fd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	f003 0207 	and.w	r2, r3, #7
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	429a      	cmp	r2, r3
 8004818:	d901      	bls.n	800481e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e04c      	b.n	80048b8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800481e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004822:	2b00      	cmp	r3, #0
 8004824:	da0e      	bge.n	8004844 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	4413      	add	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	705a      	strb	r2, [r3, #1]
 8004842:	e00c      	b.n	800485e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_PCD_EP_SetStall+0x7e>
 800487a:	2302      	movs	r3, #2
 800487c:	e01c      	b.n	80048b8 <HAL_PCD_EP_SetStall+0xb8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	4618      	mov	r0, r3
 800488e:	f005 f9d9 	bl	8009c44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	2b00      	cmp	r3, #0
 800489a:	d108      	bne.n	80048ae <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f005 fafe 	bl	8009eaa <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d901      	bls.n	80048de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e040      	b.n	8004960 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	da0e      	bge.n	8004904 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	705a      	strb	r2, [r3, #1]
 8004902:	e00e      	b.n	8004922 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	f003 0207 	and.w	r2, r3, #7
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_PCD_EP_ClrStall+0x82>
 800493e:	2302      	movs	r3, #2
 8004940:	e00e      	b.n	8004960 <HAL_PCD_EP_ClrStall+0xa0>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	4618      	mov	r0, r3
 8004952:	f005 f9c7 	bl	8009ce4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08e      	sub	sp, #56	; 0x38
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004970:	e2ec      	b.n	8004f4c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800497a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800497c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004988:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800498c:	2b00      	cmp	r3, #0
 800498e:	f040 8161 	bne.w	8004c54 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004992:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b00      	cmp	r3, #0
 800499a:	d152      	bne.n	8004a42 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80049a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ac:	81fb      	strh	r3, [r7, #14]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	89fb      	ldrh	r3, [r7, #14]
 80049b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049bc:	b29b      	uxth	r3, r3
 80049be:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3328      	adds	r3, #40	; 0x28
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4413      	add	r3, r2
 80049da:	3302      	adds	r3, #2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	441a      	add	r2, r3
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a00:	2100      	movs	r1, #0
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f007 f8ab 	bl	800bb5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 829b 	beq.w	8004f4c <PCD_EP_ISR_Handler+0x5e4>
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 8296 	bne.w	8004f4c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	b292      	uxth	r2, r2
 8004a34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a40:	e284      	b.n	8004f4c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004a52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d034      	beq.n	8004ac6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3306      	adds	r3, #6
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f005 fa55 	bl	8009f4a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004aac:	4013      	ands	r3, r2
 8004aae:	823b      	strh	r3, [r7, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	8a3a      	ldrh	r2, [r7, #16]
 8004ab6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aba:	b292      	uxth	r2, r2
 8004abc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f007 f820 	bl	800bb04 <HAL_PCD_SetupStageCallback>
 8004ac4:	e242      	b.n	8004f4c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ac6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f280 823e 	bge.w	8004f4c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004adc:	4013      	ands	r3, r2
 8004ade:	83bb      	strh	r3, [r7, #28]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	8bba      	ldrh	r2, [r7, #28]
 8004ae6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aea:	b292      	uxth	r2, r2
 8004aec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	3306      	adds	r3, #6
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d019      	beq.n	8004b56 <PCD_EP_ISR_Handler+0x1ee>
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d015      	beq.n	8004b56 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	6959      	ldr	r1, [r3, #20]
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f005 fa05 	bl	8009f4a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	441a      	add	r2, r3
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b4e:	2100      	movs	r1, #0
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f006 ffe9 	bl	800bb28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f040 81f2 	bne.w	8004f4c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d112      	bne.n	8004bb6 <PCD_EP_ISR_Handler+0x24e>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	801a      	strh	r2, [r3, #0]
 8004bb4:	e02f      	b.n	8004c16 <PCD_EP_ISR_Handler+0x2ae>
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b3e      	cmp	r3, #62	; 0x3e
 8004bbc:	d813      	bhi.n	8004be6 <PCD_EP_ISR_Handler+0x27e>
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <PCD_EP_ISR_Handler+0x270>
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	029b      	lsls	r3, r3, #10
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	e017      	b.n	8004c16 <PCD_EP_ISR_Handler+0x2ae>
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <PCD_EP_ISR_Handler+0x298>
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	029b      	lsls	r3, r3, #10
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	827b      	strh	r3, [r7, #18]
 8004c28:	8a7b      	ldrh	r3, [r7, #18]
 8004c2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c2e:	827b      	strh	r3, [r7, #18]
 8004c30:	8a7b      	ldrh	r3, [r7, #18]
 8004c32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c36:	827b      	strh	r3, [r7, #18]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	8a7b      	ldrh	r3, [r7, #18]
 8004c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	8013      	strh	r3, [r2, #0]
 8004c52:	e17b      	b.n	8004f4c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c66:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f280 80ea 	bge.w	8004e44 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c86:	4013      	ands	r3, r2
 8004c88:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004ca2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	7b1b      	ldrb	r3, [r3, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d122      	bne.n	8004d06 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3306      	adds	r3, #6
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ce8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004cea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8087 	beq.w	8004e00 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	6959      	ldr	r1, [r3, #20]
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	88da      	ldrh	r2, [r3, #6]
 8004cfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d00:	f005 f923 	bl	8009f4a <USB_ReadPMA>
 8004d04:	e07c      	b.n	8004e00 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	78db      	ldrb	r3, [r3, #3]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d108      	bne.n	8004d20 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004d0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d10:	461a      	mov	r2, r3
 8004d12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f927 	bl	8004f68 <HAL_PCD_EP_DB_Receive>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d1e:	e06f      	b.n	8004e00 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	441a      	add	r2, r3
 8004d4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d021      	beq.n	8004dbe <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3302      	adds	r3, #2
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004da4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d02a      	beq.n	8004e00 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	6959      	ldr	r1, [r3, #20]
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	891a      	ldrh	r2, [r3, #8]
 8004db6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004db8:	f005 f8c7 	bl	8009f4a <USB_ReadPMA>
 8004dbc:	e020      	b.n	8004e00 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3306      	adds	r3, #6
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004de8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	6959      	ldr	r1, [r3, #20]
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	895a      	ldrh	r2, [r3, #10]
 8004dfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dfc:	f005 f8a5 	bl	8009f4a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e06:	441a      	add	r2, r3
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e12:	441a      	add	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <PCD_EP_ISR_Handler+0x4c2>
 8004e20:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d206      	bcs.n	8004e38 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f006 fe79 	bl	800bb28 <HAL_PCD_DataOutStageCallback>
 8004e36:	e005      	b.n	8004e44 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f003 f8c8 	bl	8007fd4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d07e      	beq.n	8004f4c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4413      	add	r3, r2
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7c:	843b      	strh	r3, [r7, #32]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	8c3b      	ldrh	r3, [r7, #32]
 8004e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	78db      	ldrb	r3, [r3, #3]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d00c      	beq.n	8004ebc <PCD_EP_ISR_Handler+0x554>
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	78db      	ldrb	r3, [r3, #3]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d146      	bne.n	8004f40 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004eb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d141      	bne.n	8004f40 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	4413      	add	r3, r2
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ee4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	8bfb      	ldrh	r3, [r7, #30]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d906      	bls.n	8004efe <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	699a      	ldr	r2, [r3, #24]
 8004ef4:	8bfb      	ldrh	r3, [r7, #30]
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	619a      	str	r2, [r3, #24]
 8004efc:	e002      	b.n	8004f04 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	2200      	movs	r2, #0
 8004f02:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f006 fe23 	bl	800bb5e <HAL_PCD_DataInStageCallback>
 8004f18:	e018      	b.n	8004f4c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	8bfb      	ldrh	r3, [r7, #30]
 8004f20:	441a      	add	r2, r3
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	69da      	ldr	r2, [r3, #28]
 8004f2a:	8bfb      	ldrh	r3, [r7, #30]
 8004f2c:	441a      	add	r2, r3
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f003 f84b 	bl	8007fd4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004f3e:	e005      	b.n	8004f4c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f42:	461a      	mov	r2, r3
 8004f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f91b 	bl	8005182 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	b21b      	sxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f6ff ad0a 	blt.w	8004972 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3738      	adds	r7, #56	; 0x38
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d07e      	beq.n	800507e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4413      	add	r3, r2
 8004f94:	3302      	adds	r3, #2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	8b7b      	ldrh	r3, [r7, #26]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d306      	bcc.n	8004fc2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	8b7b      	ldrh	r3, [r7, #26]
 8004fba:	1ad2      	subs	r2, r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	619a      	str	r2, [r3, #24]
 8004fc0:	e002      	b.n	8004fc8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d123      	bne.n	8005018 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	833b      	strh	r3, [r7, #24]
 8004fec:	8b3b      	ldrh	r3, [r7, #24]
 8004fee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ff2:	833b      	strh	r3, [r7, #24]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	8b3b      	ldrh	r3, [r7, #24]
 8005004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005014:	b29b      	uxth	r3, r3
 8005016:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01f      	beq.n	8005062 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503c:	82fb      	strh	r3, [r7, #22]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	8afb      	ldrh	r3, [r7, #22]
 800504e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005062:	8b7b      	ldrh	r3, [r7, #26]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8087 	beq.w	8005178 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	6959      	ldr	r1, [r3, #20]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	891a      	ldrh	r2, [r3, #8]
 8005076:	8b7b      	ldrh	r3, [r7, #26]
 8005078:	f004 ff67 	bl	8009f4a <USB_ReadPMA>
 800507c:	e07c      	b.n	8005178 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005086:	b29b      	uxth	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4413      	add	r3, r2
 8005092:	3306      	adds	r3, #6
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	699a      	ldr	r2, [r3, #24]
 80050ac:	8b7b      	ldrh	r3, [r7, #26]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d306      	bcc.n	80050c0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	8b7b      	ldrh	r3, [r7, #26]
 80050b8:	1ad2      	subs	r2, r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	619a      	str	r2, [r3, #24]
 80050be:	e002      	b.n	80050c6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2200      	movs	r2, #0
 80050c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d123      	bne.n	8005116 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e8:	83fb      	strh	r3, [r7, #30]
 80050ea:	8bfb      	ldrh	r3, [r7, #30]
 80050ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050f0:	83fb      	strh	r3, [r7, #30]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	441a      	add	r2, r3
 8005100:	8bfb      	ldrh	r3, [r7, #30]
 8005102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005112:	b29b      	uxth	r3, r3
 8005114:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11f      	bne.n	8005160 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	b29b      	uxth	r3, r3
 8005132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	83bb      	strh	r3, [r7, #28]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	441a      	add	r2, r3
 800514a:	8bbb      	ldrh	r3, [r7, #28]
 800514c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005158:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800515c:	b29b      	uxth	r3, r3
 800515e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005160:	8b7b      	ldrh	r3, [r7, #26]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6959      	ldr	r1, [r3, #20]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	895a      	ldrh	r2, [r3, #10]
 8005172:	8b7b      	ldrh	r3, [r7, #26]
 8005174:	f004 fee9 	bl	8009f4a <USB_ReadPMA>
    }
  }

  return count;
 8005178:	8b7b      	ldrh	r3, [r7, #26]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b0a2      	sub	sp, #136	; 0x88
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	4613      	mov	r3, r2
 800518e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 81c7 	beq.w	800552a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	3302      	adds	r3, #2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d907      	bls.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051dc:	1ad2      	subs	r2, r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	619a      	str	r2, [r3, #24]
 80051e2:	e002      	b.n	80051ea <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2200      	movs	r2, #0
 80051e8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f040 80b9 	bne.w	8005366 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d126      	bne.n	800524a <HAL_PCD_EP_DB_Transmit+0xc8>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	62bb      	str	r3, [r7, #40]	; 0x28
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	4413      	add	r3, r2
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	011a      	lsls	r2, r3, #4
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	4413      	add	r3, r2
 800521e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800522e:	b29a      	uxth	r2, r3
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800523e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005242:	b29a      	uxth	r2, r3
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	e01a      	b.n	8005280 <HAL_PCD_EP_DB_Transmit+0xfe>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d116      	bne.n	8005280 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	633b      	str	r3, [r7, #48]	; 0x30
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005260:	b29b      	uxth	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	4413      	add	r3, r2
 8005268:	633b      	str	r3, [r7, #48]	; 0x30
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	011a      	lsls	r2, r3, #4
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	4413      	add	r3, r2
 8005274:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	2200      	movs	r2, #0
 800527e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	623b      	str	r3, [r7, #32]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d126      	bne.n	80052dc <HAL_PCD_EP_DB_Transmit+0x15a>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529c:	b29b      	uxth	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	4413      	add	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	011a      	lsls	r2, r3, #4
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	4413      	add	r3, r2
 80052b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	e017      	b.n	800530c <HAL_PCD_EP_DB_Transmit+0x18a>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d113      	bne.n	800530c <HAL_PCD_EP_DB_Transmit+0x18a>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	4413      	add	r3, r2
 80052f4:	623b      	str	r3, [r7, #32]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	011a      	lsls	r2, r3, #4
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	4413      	add	r3, r2
 8005300:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	2200      	movs	r2, #0
 800530a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	4619      	mov	r1, r3
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f006 fc23 	bl	800bb5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 82d4 	beq.w	80058cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	827b      	strh	r3, [r7, #18]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	8a7b      	ldrh	r3, [r7, #18]
 8005350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005360:	b29b      	uxth	r3, r3
 8005362:	8013      	strh	r3, [r2, #0]
 8005364:	e2b2      	b.n	80058cc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d021      	beq.n	80053b4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	f040 8286 	bne.w	80058cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053c8:	441a      	add	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053d6:	441a      	add	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6a1a      	ldr	r2, [r3, #32]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d309      	bcc.n	80053fc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6a1a      	ldr	r2, [r3, #32]
 80053f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f4:	1ad2      	subs	r2, r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	621a      	str	r2, [r3, #32]
 80053fa:	e015      	b.n	8005428 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005404:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005408:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005412:	e009      	b.n	8005428 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2200      	movs	r2, #0
 8005426:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d155      	bne.n	80054dc <HAL_PCD_EP_DB_Transmit+0x35a>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	63bb      	str	r3, [r7, #56]	; 0x38
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543e:	b29b      	uxth	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	4413      	add	r3, r2
 8005446:	63bb      	str	r3, [r7, #56]	; 0x38
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	011a      	lsls	r2, r3, #4
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	4413      	add	r3, r2
 8005452:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
 8005458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800545a:	2b00      	cmp	r3, #0
 800545c:	d112      	bne.n	8005484 <HAL_PCD_EP_DB_Transmit+0x302>
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005468:	b29a      	uxth	r2, r3
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546c:	801a      	strh	r2, [r3, #0]
 800546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547c:	b29a      	uxth	r2, r3
 800547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005480:	801a      	strh	r2, [r3, #0]
 8005482:	e047      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x392>
 8005484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005486:	2b3e      	cmp	r3, #62	; 0x3e
 8005488:	d811      	bhi.n	80054ae <HAL_PCD_EP_DB_Transmit+0x32c>
 800548a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_PCD_EP_DB_Transmit+0x31e>
 800549a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549c:	3301      	adds	r3, #1
 800549e:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	e032      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x392>
 80054ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d102      	bne.n	80054c4 <HAL_PCD_EP_DB_Transmit+0x342>
 80054be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c0:	3b01      	subs	r3, #1
 80054c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	029b      	lsls	r3, r3, #10
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	e01b      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x392>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d117      	bne.n	8005514 <HAL_PCD_EP_DB_Transmit+0x392>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	643b      	str	r3, [r7, #64]	; 0x40
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f8:	4413      	add	r3, r2
 80054fa:	643b      	str	r3, [r7, #64]	; 0x40
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	011a      	lsls	r2, r3, #4
 8005502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005504:	4413      	add	r3, r2
 8005506:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550e:	b29a      	uxth	r2, r3
 8005510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005512:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6959      	ldr	r1, [r3, #20]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	891a      	ldrh	r2, [r3, #8]
 8005520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005522:	b29b      	uxth	r3, r3
 8005524:	f004 fccc 	bl	8009ec0 <USB_WritePMA>
 8005528:	e1d0      	b.n	80058cc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005532:	b29b      	uxth	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4413      	add	r3, r2
 800553e:	3306      	adds	r3, #6
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005552:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800555e:	429a      	cmp	r2, r3
 8005560:	d307      	bcc.n	8005572 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800556a:	1ad2      	subs	r2, r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	619a      	str	r2, [r3, #24]
 8005570:	e002      	b.n	8005578 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2200      	movs	r2, #0
 8005576:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f040 80c4 	bne.w	800570a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d126      	bne.n	80055d8 <HAL_PCD_EP_DB_Transmit+0x456>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559e:	4413      	add	r3, r2
 80055a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	011a      	lsls	r2, r3, #4
 80055a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055aa:	4413      	add	r3, r2
 80055ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80055b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	e01a      	b.n	800560e <HAL_PCD_EP_DB_Transmit+0x48c>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d116      	bne.n	800560e <HAL_PCD_EP_DB_Transmit+0x48c>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	677b      	str	r3, [r7, #116]	; 0x74
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f4:	4413      	add	r3, r2
 80055f6:	677b      	str	r3, [r7, #116]	; 0x74
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	011a      	lsls	r2, r3, #4
 80055fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005600:	4413      	add	r3, r2
 8005602:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005606:	673b      	str	r3, [r7, #112]	; 0x70
 8005608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800560a:	2200      	movs	r2, #0
 800560c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	67bb      	str	r3, [r7, #120]	; 0x78
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	785b      	ldrb	r3, [r3, #1]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d12f      	bne.n	800567c <HAL_PCD_EP_DB_Transmit+0x4fa>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562c:	b29b      	uxth	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005634:	4413      	add	r3, r2
 8005636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	011a      	lsls	r2, r3, #4
 8005640:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005644:	4413      	add	r3, r2
 8005646:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800564a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800564e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800565a:	b29a      	uxth	r2, r3
 800565c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005672:	b29a      	uxth	r2, r3
 8005674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	e017      	b.n	80056ac <HAL_PCD_EP_DB_Transmit+0x52a>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d113      	bne.n	80056ac <HAL_PCD_EP_DB_Transmit+0x52a>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568c:	b29b      	uxth	r3, r3
 800568e:	461a      	mov	r2, r3
 8005690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005692:	4413      	add	r3, r2
 8005694:	67bb      	str	r3, [r7, #120]	; 0x78
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	011a      	lsls	r2, r3, #4
 800569c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800569e:	4413      	add	r3, r2
 80056a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056a8:	2200      	movs	r2, #0
 80056aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	4619      	mov	r1, r3
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f006 fa53 	bl	800bb5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056b8:	88fb      	ldrh	r3, [r7, #6]
 80056ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 8104 	bne.w	80058cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80056f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005704:	b29b      	uxth	r3, r3
 8005706:	8013      	strh	r3, [r2, #0]
 8005708:	e0e0      	b.n	80058cc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d121      	bne.n	8005758 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	441a      	add	r2, r3
 8005740:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800574c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005754:	b29b      	uxth	r3, r3
 8005756:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800575e:	2b01      	cmp	r3, #1
 8005760:	f040 80b4 	bne.w	80058cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	695a      	ldr	r2, [r3, #20]
 8005768:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800576c:	441a      	add	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800577a:	441a      	add	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	6a1a      	ldr	r2, [r3, #32]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	429a      	cmp	r2, r3
 800578a:	d309      	bcc.n	80057a0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6a1a      	ldr	r2, [r3, #32]
 8005796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005798:	1ad2      	subs	r2, r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	621a      	str	r2, [r3, #32]
 800579e:	e015      	b.n	80057cc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80057a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057b6:	e009      	b.n	80057cc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2200      	movs	r2, #0
 80057c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	667b      	str	r3, [r7, #100]	; 0x64
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d155      	bne.n	8005886 <HAL_PCD_EP_DB_Transmit+0x704>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ee:	4413      	add	r3, r2
 80057f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	011a      	lsls	r2, r3, #4
 80057f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057fa:	4413      	add	r3, r2
 80057fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005800:	65bb      	str	r3, [r7, #88]	; 0x58
 8005802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005804:	2b00      	cmp	r3, #0
 8005806:	d112      	bne.n	800582e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005812:	b29a      	uxth	r2, r3
 8005814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e044      	b.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x736>
 800582e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005830:	2b3e      	cmp	r3, #62	; 0x3e
 8005832:	d811      	bhi.n	8005858 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	657b      	str	r3, [r7, #84]	; 0x54
 800583a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005846:	3301      	adds	r3, #1
 8005848:	657b      	str	r3, [r7, #84]	; 0x54
 800584a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800584c:	b29b      	uxth	r3, r3
 800584e:	029b      	lsls	r3, r3, #10
 8005850:	b29a      	uxth	r2, r3
 8005852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	e02f      	b.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	657b      	str	r3, [r7, #84]	; 0x54
 800585e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800586a:	3b01      	subs	r3, #1
 800586c:	657b      	str	r3, [r7, #84]	; 0x54
 800586e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005870:	b29b      	uxth	r3, r3
 8005872:	029b      	lsls	r3, r3, #10
 8005874:	b29b      	uxth	r3, r3
 8005876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587e:	b29a      	uxth	r2, r3
 8005880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	e018      	b.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d114      	bne.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x736>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005896:	b29b      	uxth	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800589c:	4413      	add	r3, r2
 800589e:	667b      	str	r3, [r7, #100]	; 0x64
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	011a      	lsls	r2, r3, #4
 80058a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ae:	663b      	str	r3, [r7, #96]	; 0x60
 80058b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6959      	ldr	r1, [r3, #20]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	895a      	ldrh	r2, [r3, #10]
 80058c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f004 fafa 	bl	8009ec0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e6:	823b      	strh	r3, [r7, #16]
 80058e8:	8a3b      	ldrh	r3, [r7, #16]
 80058ea:	f083 0310 	eor.w	r3, r3, #16
 80058ee:	823b      	strh	r3, [r7, #16]
 80058f0:	8a3b      	ldrh	r3, [r7, #16]
 80058f2:	f083 0320 	eor.w	r3, r3, #32
 80058f6:	823b      	strh	r3, [r7, #16]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	8a3b      	ldrh	r3, [r7, #16]
 8005908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005918:	b29b      	uxth	r3, r3
 800591a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3788      	adds	r7, #136	; 0x88
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	817b      	strh	r3, [r7, #10]
 8005934:	4613      	mov	r3, r2
 8005936:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005938:	897b      	ldrh	r3, [r7, #10]
 800593a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005944:	897b      	ldrh	r3, [r7, #10]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	e009      	b.n	8005970 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800595c:	897a      	ldrh	r2, [r7, #10]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005970:	893b      	ldrh	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2200      	movs	r2, #0
 800597a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	b29a      	uxth	r2, r3
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	80da      	strh	r2, [r3, #6]
 8005984:	e00b      	b.n	800599e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2201      	movs	r2, #1
 800598a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	b29a      	uxth	r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	0c1b      	lsrs	r3, r3, #16
 8005998:	b29a      	uxth	r2, r3
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr
	...

080059ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e272      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8087 	beq.w	8005ada <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059cc:	4b92      	ldr	r3, [pc, #584]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 030c 	and.w	r3, r3, #12
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d00c      	beq.n	80059f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80059d8:	4b8f      	ldr	r3, [pc, #572]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 030c 	and.w	r3, r3, #12
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d112      	bne.n	8005a0a <HAL_RCC_OscConfig+0x5e>
 80059e4:	4b8c      	ldr	r3, [pc, #560]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f0:	d10b      	bne.n	8005a0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f2:	4b89      	ldr	r3, [pc, #548]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d06c      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x12c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d168      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e24c      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a12:	d106      	bne.n	8005a22 <HAL_RCC_OscConfig+0x76>
 8005a14:	4b80      	ldr	r3, [pc, #512]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a7f      	ldr	r2, [pc, #508]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	e02e      	b.n	8005a80 <HAL_RCC_OscConfig+0xd4>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10c      	bne.n	8005a44 <HAL_RCC_OscConfig+0x98>
 8005a2a:	4b7b      	ldr	r3, [pc, #492]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a7a      	ldr	r2, [pc, #488]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	4b78      	ldr	r3, [pc, #480]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a77      	ldr	r2, [pc, #476]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	e01d      	b.n	8005a80 <HAL_RCC_OscConfig+0xd4>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a4c:	d10c      	bne.n	8005a68 <HAL_RCC_OscConfig+0xbc>
 8005a4e:	4b72      	ldr	r3, [pc, #456]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a71      	ldr	r2, [pc, #452]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	4b6f      	ldr	r3, [pc, #444]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a6e      	ldr	r2, [pc, #440]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	e00b      	b.n	8005a80 <HAL_RCC_OscConfig+0xd4>
 8005a68:	4b6b      	ldr	r3, [pc, #428]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a6a      	ldr	r2, [pc, #424]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	4b68      	ldr	r3, [pc, #416]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a67      	ldr	r2, [pc, #412]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d013      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a88:	f7fd f8ea 	bl	8002c60 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a90:	f7fd f8e6 	bl	8002c60 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b64      	cmp	r3, #100	; 0x64
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e200      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa2:	4b5d      	ldr	r3, [pc, #372]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0f0      	beq.n	8005a90 <HAL_RCC_OscConfig+0xe4>
 8005aae:	e014      	b.n	8005ada <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab0:	f7fd f8d6 	bl	8002c60 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab8:	f7fd f8d2 	bl	8002c60 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b64      	cmp	r3, #100	; 0x64
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e1ec      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aca:	4b53      	ldr	r3, [pc, #332]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x10c>
 8005ad6:	e000      	b.n	8005ada <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d063      	beq.n	8005bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ae6:	4b4c      	ldr	r3, [pc, #304]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 030c 	and.w	r3, r3, #12
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005af2:	4b49      	ldr	r3, [pc, #292]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d11c      	bne.n	8005b38 <HAL_RCC_OscConfig+0x18c>
 8005afe:	4b46      	ldr	r3, [pc, #280]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d116      	bne.n	8005b38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0a:	4b43      	ldr	r3, [pc, #268]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <HAL_RCC_OscConfig+0x176>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e1c0      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b22:	4b3d      	ldr	r3, [pc, #244]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4939      	ldr	r1, [pc, #228]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b36:	e03a      	b.n	8005bae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b40:	4b36      	ldr	r3, [pc, #216]	; (8005c1c <HAL_RCC_OscConfig+0x270>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b46:	f7fd f88b 	bl	8002c60 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b4e:	f7fd f887 	bl	8002c60 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e1a1      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b60:	4b2d      	ldr	r3, [pc, #180]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6c:	4b2a      	ldr	r3, [pc, #168]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4927      	ldr	r1, [pc, #156]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]
 8005b80:	e015      	b.n	8005bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b82:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <HAL_RCC_OscConfig+0x270>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b88:	f7fd f86a 	bl	8002c60 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b90:	f7fd f866 	bl	8002c60 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e180      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba2:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d03a      	beq.n	8005c30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d019      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bc2:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <HAL_RCC_OscConfig+0x274>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc8:	f7fd f84a 	bl	8002c60 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd0:	f7fd f846 	bl	8002c60 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e160      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be2:	4b0d      	ldr	r3, [pc, #52]	; (8005c18 <HAL_RCC_OscConfig+0x26c>)
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005bee:	2001      	movs	r0, #1
 8005bf0:	f000 fac4 	bl	800617c <RCC_Delay>
 8005bf4:	e01c      	b.n	8005c30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <HAL_RCC_OscConfig+0x274>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bfc:	f7fd f830 	bl	8002c60 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c02:	e00f      	b.n	8005c24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c04:	f7fd f82c 	bl	8002c60 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d908      	bls.n	8005c24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e146      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
 8005c16:	bf00      	nop
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	42420000 	.word	0x42420000
 8005c20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c24:	4b92      	ldr	r3, [pc, #584]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e9      	bne.n	8005c04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80a6 	beq.w	8005d8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c42:	4b8b      	ldr	r3, [pc, #556]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10d      	bne.n	8005c6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4e:	4b88      	ldr	r3, [pc, #544]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	4a87      	ldr	r2, [pc, #540]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c58:	61d3      	str	r3, [r2, #28]
 8005c5a:	4b85      	ldr	r3, [pc, #532]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c62:	60bb      	str	r3, [r7, #8]
 8005c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6a:	4b82      	ldr	r3, [pc, #520]	; (8005e74 <HAL_RCC_OscConfig+0x4c8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d118      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c76:	4b7f      	ldr	r3, [pc, #508]	; (8005e74 <HAL_RCC_OscConfig+0x4c8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a7e      	ldr	r2, [pc, #504]	; (8005e74 <HAL_RCC_OscConfig+0x4c8>)
 8005c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c82:	f7fc ffed 	bl	8002c60 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8a:	f7fc ffe9 	bl	8002c60 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b64      	cmp	r3, #100	; 0x64
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e103      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9c:	4b75      	ldr	r3, [pc, #468]	; (8005e74 <HAL_RCC_OscConfig+0x4c8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0f0      	beq.n	8005c8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d106      	bne.n	8005cbe <HAL_RCC_OscConfig+0x312>
 8005cb0:	4b6f      	ldr	r3, [pc, #444]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	4a6e      	ldr	r2, [pc, #440]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	6213      	str	r3, [r2, #32]
 8005cbc:	e02d      	b.n	8005d1a <HAL_RCC_OscConfig+0x36e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x334>
 8005cc6:	4b6a      	ldr	r3, [pc, #424]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	4a69      	ldr	r2, [pc, #420]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	6213      	str	r3, [r2, #32]
 8005cd2:	4b67      	ldr	r3, [pc, #412]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	4a66      	ldr	r2, [pc, #408]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005cd8:	f023 0304 	bic.w	r3, r3, #4
 8005cdc:	6213      	str	r3, [r2, #32]
 8005cde:	e01c      	b.n	8005d1a <HAL_RCC_OscConfig+0x36e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b05      	cmp	r3, #5
 8005ce6:	d10c      	bne.n	8005d02 <HAL_RCC_OscConfig+0x356>
 8005ce8:	4b61      	ldr	r3, [pc, #388]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	4a60      	ldr	r2, [pc, #384]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005cee:	f043 0304 	orr.w	r3, r3, #4
 8005cf2:	6213      	str	r3, [r2, #32]
 8005cf4:	4b5e      	ldr	r3, [pc, #376]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	4a5d      	ldr	r2, [pc, #372]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	6213      	str	r3, [r2, #32]
 8005d00:	e00b      	b.n	8005d1a <HAL_RCC_OscConfig+0x36e>
 8005d02:	4b5b      	ldr	r3, [pc, #364]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	4a5a      	ldr	r2, [pc, #360]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	6213      	str	r3, [r2, #32]
 8005d0e:	4b58      	ldr	r3, [pc, #352]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	4a57      	ldr	r2, [pc, #348]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005d14:	f023 0304 	bic.w	r3, r3, #4
 8005d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d015      	beq.n	8005d4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d22:	f7fc ff9d 	bl	8002c60 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d28:	e00a      	b.n	8005d40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d2a:	f7fc ff99 	bl	8002c60 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e0b1      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d40:	4b4b      	ldr	r3, [pc, #300]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0ee      	beq.n	8005d2a <HAL_RCC_OscConfig+0x37e>
 8005d4c:	e014      	b.n	8005d78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d4e:	f7fc ff87 	bl	8002c60 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d54:	e00a      	b.n	8005d6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d56:	f7fc ff83 	bl	8002c60 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e09b      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d6c:	4b40      	ldr	r3, [pc, #256]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1ee      	bne.n	8005d56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d105      	bne.n	8005d8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7e:	4b3c      	ldr	r3, [pc, #240]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	4a3b      	ldr	r2, [pc, #236]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 8087 	beq.w	8005ea2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d94:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 030c 	and.w	r3, r3, #12
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d061      	beq.n	8005e64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d146      	bne.n	8005e36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da8:	4b33      	ldr	r3, [pc, #204]	; (8005e78 <HAL_RCC_OscConfig+0x4cc>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dae:	f7fc ff57 	bl	8002c60 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db6:	f7fc ff53 	bl	8002c60 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e06d      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dc8:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1f0      	bne.n	8005db6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ddc:	d108      	bne.n	8005df0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005dde:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	4921      	ldr	r1, [pc, #132]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005df0:	4b1f      	ldr	r3, [pc, #124]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a19      	ldr	r1, [r3, #32]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	430b      	orrs	r3, r1
 8005e02:	491b      	ldr	r1, [pc, #108]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e08:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <HAL_RCC_OscConfig+0x4cc>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0e:	f7fc ff27 	bl	8002c60 <HAL_GetTick>
 8005e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e16:	f7fc ff23 	bl	8002c60 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e03d      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e28:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0f0      	beq.n	8005e16 <HAL_RCC_OscConfig+0x46a>
 8005e34:	e035      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e36:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <HAL_RCC_OscConfig+0x4cc>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3c:	f7fc ff10 	bl	8002c60 <HAL_GetTick>
 8005e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e44:	f7fc ff0c 	bl	8002c60 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e026      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e56:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <HAL_RCC_OscConfig+0x4c4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <HAL_RCC_OscConfig+0x498>
 8005e62:	e01e      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d107      	bne.n	8005e7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e019      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40007000 	.word	0x40007000
 8005e78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <HAL_RCC_OscConfig+0x500>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d106      	bne.n	8005e9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d001      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40021000 	.word	0x40021000

08005eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0d0      	b.n	8006066 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec4:	4b6a      	ldr	r3, [pc, #424]	; (8006070 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d910      	bls.n	8005ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed2:	4b67      	ldr	r3, [pc, #412]	; (8006070 <HAL_RCC_ClockConfig+0x1c0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f023 0207 	bic.w	r2, r3, #7
 8005eda:	4965      	ldr	r1, [pc, #404]	; (8006070 <HAL_RCC_ClockConfig+0x1c0>)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee2:	4b63      	ldr	r3, [pc, #396]	; (8006070 <HAL_RCC_ClockConfig+0x1c0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d001      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0b8      	b.n	8006066 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d020      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f0c:	4b59      	ldr	r3, [pc, #356]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a58      	ldr	r2, [pc, #352]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f24:	4b53      	ldr	r3, [pc, #332]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4a52      	ldr	r2, [pc, #328]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f30:	4b50      	ldr	r3, [pc, #320]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	494d      	ldr	r1, [pc, #308]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d040      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d107      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f56:	4b47      	ldr	r3, [pc, #284]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d115      	bne.n	8005f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e07f      	b.n	8006066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d107      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6e:	4b41      	ldr	r3, [pc, #260]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e073      	b.n	8006066 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f7e:	4b3d      	ldr	r3, [pc, #244]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e06b      	b.n	8006066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f8e:	4b39      	ldr	r3, [pc, #228]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f023 0203 	bic.w	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	4936      	ldr	r1, [pc, #216]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fa0:	f7fc fe5e 	bl	8002c60 <HAL_GetTick>
 8005fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa6:	e00a      	b.n	8005fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa8:	f7fc fe5a 	bl	8002c60 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e053      	b.n	8006066 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fbe:	4b2d      	ldr	r3, [pc, #180]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f003 020c 	and.w	r2, r3, #12
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d1eb      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd0:	4b27      	ldr	r3, [pc, #156]	; (8006070 <HAL_RCC_ClockConfig+0x1c0>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d210      	bcs.n	8006000 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fde:	4b24      	ldr	r3, [pc, #144]	; (8006070 <HAL_RCC_ClockConfig+0x1c0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f023 0207 	bic.w	r2, r3, #7
 8005fe6:	4922      	ldr	r1, [pc, #136]	; (8006070 <HAL_RCC_ClockConfig+0x1c0>)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fee:	4b20      	ldr	r3, [pc, #128]	; (8006070 <HAL_RCC_ClockConfig+0x1c0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d001      	beq.n	8006000 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e032      	b.n	8006066 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800600c:	4b19      	ldr	r3, [pc, #100]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	4916      	ldr	r1, [pc, #88]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 800601a:	4313      	orrs	r3, r2
 800601c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800602a:	4b12      	ldr	r3, [pc, #72]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	490e      	ldr	r1, [pc, #56]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 800603a:	4313      	orrs	r3, r2
 800603c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800603e:	f000 f821 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8006042:	4602      	mov	r2, r0
 8006044:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	091b      	lsrs	r3, r3, #4
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	490a      	ldr	r1, [pc, #40]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8006050:	5ccb      	ldrb	r3, [r1, r3]
 8006052:	fa22 f303 	lsr.w	r3, r2, r3
 8006056:	4a09      	ldr	r2, [pc, #36]	; (800607c <HAL_RCC_ClockConfig+0x1cc>)
 8006058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <HAL_RCC_ClockConfig+0x1d0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fc fdbc 	bl	8002bdc <HAL_InitTick>

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40022000 	.word	0x40022000
 8006074:	40021000 	.word	0x40021000
 8006078:	0800c0fc 	.word	0x0800c0fc
 800607c:	20000028 	.word	0x20000028
 8006080:	2000002c 	.word	0x2000002c

08006084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006084:	b490      	push	{r4, r7}
 8006086:	b08a      	sub	sp, #40	; 0x28
 8006088:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800608a:	4b29      	ldr	r3, [pc, #164]	; (8006130 <HAL_RCC_GetSysClockFreq+0xac>)
 800608c:	1d3c      	adds	r4, r7, #4
 800608e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006094:	f240 2301 	movw	r3, #513	; 0x201
 8006098:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	2300      	movs	r3, #0
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	2300      	movs	r3, #0
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060ae:	4b21      	ldr	r3, [pc, #132]	; (8006134 <HAL_RCC_GetSysClockFreq+0xb0>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d002      	beq.n	80060c4 <HAL_RCC_GetSysClockFreq+0x40>
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d003      	beq.n	80060ca <HAL_RCC_GetSysClockFreq+0x46>
 80060c2:	e02b      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060c4:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <HAL_RCC_GetSysClockFreq+0xb4>)
 80060c6:	623b      	str	r3, [r7, #32]
      break;
 80060c8:	e02b      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	0c9b      	lsrs	r3, r3, #18
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	3328      	adds	r3, #40	; 0x28
 80060d4:	443b      	add	r3, r7
 80060d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80060da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d012      	beq.n	800610c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060e6:	4b13      	ldr	r3, [pc, #76]	; (8006134 <HAL_RCC_GetSysClockFreq+0xb0>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	0c5b      	lsrs	r3, r3, #17
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	3328      	adds	r3, #40	; 0x28
 80060f2:	443b      	add	r3, r7
 80060f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80060f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	4a0e      	ldr	r2, [pc, #56]	; (8006138 <HAL_RCC_GetSysClockFreq+0xb4>)
 80060fe:	fb03 f202 	mul.w	r2, r3, r2
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	fbb2 f3f3 	udiv	r3, r2, r3
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
 800610a:	e004      	b.n	8006116 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4a0b      	ldr	r2, [pc, #44]	; (800613c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006110:	fb02 f303 	mul.w	r3, r2, r3
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	623b      	str	r3, [r7, #32]
      break;
 800611a:	e002      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <HAL_RCC_GetSysClockFreq+0xb4>)
 800611e:	623b      	str	r3, [r7, #32]
      break;
 8006120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006122:	6a3b      	ldr	r3, [r7, #32]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3728      	adds	r7, #40	; 0x28
 8006128:	46bd      	mov	sp, r7
 800612a:	bc90      	pop	{r4, r7}
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	0800c098 	.word	0x0800c098
 8006134:	40021000 	.word	0x40021000
 8006138:	007a1200 	.word	0x007a1200
 800613c:	003d0900 	.word	0x003d0900

08006140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006144:	4b02      	ldr	r3, [pc, #8]	; (8006150 <HAL_RCC_GetHCLKFreq+0x10>)
 8006146:	681b      	ldr	r3, [r3, #0]
}
 8006148:	4618      	mov	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr
 8006150:	20000028 	.word	0x20000028

08006154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006158:	f7ff fff2 	bl	8006140 <HAL_RCC_GetHCLKFreq>
 800615c:	4602      	mov	r2, r0
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	0adb      	lsrs	r3, r3, #11
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	4903      	ldr	r1, [pc, #12]	; (8006178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800616a:	5ccb      	ldrb	r3, [r1, r3]
 800616c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40021000 	.word	0x40021000
 8006178:	0800c10c 	.word	0x0800c10c

0800617c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <RCC_Delay+0x34>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <RCC_Delay+0x38>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	0a5b      	lsrs	r3, r3, #9
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006198:	bf00      	nop
  }
  while (Delay --);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1e5a      	subs	r2, r3, #1
 800619e:	60fa      	str	r2, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1f9      	bne.n	8006198 <RCC_Delay+0x1c>
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr
 80061b0:	20000028 	.word	0x20000028
 80061b4:	10624dd3 	.word	0x10624dd3

080061b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d07d      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80061d4:	2300      	movs	r3, #0
 80061d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061d8:	4b4f      	ldr	r3, [pc, #316]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10d      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e4:	4b4c      	ldr	r3, [pc, #304]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	4a4b      	ldr	r2, [pc, #300]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ee:	61d3      	str	r3, [r2, #28]
 80061f0:	4b49      	ldr	r3, [pc, #292]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061fc:	2301      	movs	r3, #1
 80061fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006200:	4b46      	ldr	r3, [pc, #280]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d118      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800620c:	4b43      	ldr	r3, [pc, #268]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a42      	ldr	r2, [pc, #264]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006218:	f7fc fd22 	bl	8002c60 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800621e:	e008      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006220:	f7fc fd1e 	bl	8002c60 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b64      	cmp	r3, #100	; 0x64
 800622c:	d901      	bls.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e06d      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006232:	4b3a      	ldr	r3, [pc, #232]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f0      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800623e:	4b36      	ldr	r3, [pc, #216]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006246:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d02e      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	429a      	cmp	r2, r3
 800625a:	d027      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800625c:	4b2e      	ldr	r3, [pc, #184]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006264:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006266:	4b2e      	ldr	r3, [pc, #184]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006268:	2201      	movs	r2, #1
 800626a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800626c:	4b2c      	ldr	r3, [pc, #176]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006272:	4a29      	ldr	r2, [pc, #164]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d014      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006282:	f7fc fced 	bl	8002c60 <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006288:	e00a      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628a:	f7fc fce9 	bl	8002c60 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	f241 3288 	movw	r2, #5000	; 0x1388
 8006298:	4293      	cmp	r3, r2
 800629a:	d901      	bls.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e036      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a0:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0ee      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ac:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4917      	ldr	r1, [pc, #92]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d105      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c4:	4b14      	ldr	r3, [pc, #80]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	4a13      	ldr	r2, [pc, #76]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062dc:	4b0e      	ldr	r3, [pc, #56]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	490b      	ldr	r1, [pc, #44]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0310 	and.w	r3, r3, #16
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062fa:	4b07      	ldr	r3, [pc, #28]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	4904      	ldr	r1, [pc, #16]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006308:	4313      	orrs	r3, r2
 800630a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40021000 	.word	0x40021000
 800631c:	40007000 	.word	0x40007000
 8006320:	42420440 	.word	0x42420440

08006324 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006324:	b590      	push	{r4, r7, lr}
 8006326:	b08d      	sub	sp, #52	; 0x34
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800632c:	4b58      	ldr	r3, [pc, #352]	; (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800632e:	f107 040c 	add.w	r4, r7, #12
 8006332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006338:	f240 2301 	movw	r3, #513	; 0x201
 800633c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
 8006342:	2300      	movs	r3, #0
 8006344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006346:	2300      	movs	r3, #0
 8006348:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	2300      	movs	r3, #0
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b10      	cmp	r3, #16
 8006356:	d00a      	beq.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b10      	cmp	r3, #16
 800635c:	f200 808e 	bhi.w	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d049      	beq.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d079      	beq.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800636c:	e086      	b.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800636e:	4b49      	ldr	r3, [pc, #292]	; (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006374:	4b47      	ldr	r3, [pc, #284]	; (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d07f      	beq.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	0c9b      	lsrs	r3, r3, #18
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	3330      	adds	r3, #48	; 0x30
 800638a:	443b      	add	r3, r7
 800638c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006390:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d017      	beq.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800639c:	4b3d      	ldr	r3, [pc, #244]	; (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	0c5b      	lsrs	r3, r3, #17
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	3330      	adds	r3, #48	; 0x30
 80063a8:	443b      	add	r3, r7
 80063aa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00d      	beq.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80063ba:	4a37      	ldr	r2, [pc, #220]	; (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	fbb2 f2f3 	udiv	r2, r2, r3
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	fb02 f303 	mul.w	r3, r2, r3
 80063c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ca:	e004      	b.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	4a33      	ldr	r2, [pc, #204]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80063d0:	fb02 f303 	mul.w	r3, r2, r3
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80063d6:	4b2f      	ldr	r3, [pc, #188]	; (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063e2:	d102      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80063e8:	e04a      	b.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	085b      	lsrs	r3, r3, #1
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80063f8:	e042      	b.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80063fa:	4b26      	ldr	r3, [pc, #152]	; (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d108      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641a:	62bb      	str	r3, [r7, #40]	; 0x28
 800641c:	e01f      	b.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006428:	d109      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800642a:	4b1a      	ldr	r3, [pc, #104]	; (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006436:	f649 4340 	movw	r3, #40000	; 0x9c40
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28
 800643c:	e00f      	b.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006448:	d11c      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800644a:	4b12      	ldr	r3, [pc, #72]	; (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d016      	beq.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006456:	f24f 4324 	movw	r3, #62500	; 0xf424
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800645c:	e012      	b.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800645e:	e011      	b.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006460:	f7ff fe78 	bl	8006154 <HAL_RCC_GetPCLK2Freq>
 8006464:	4602      	mov	r2, r0
 8006466:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	0b9b      	lsrs	r3, r3, #14
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	3301      	adds	r3, #1
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800647a:	e004      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800647c:	bf00      	nop
 800647e:	e002      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006480:	bf00      	nop
 8006482:	e000      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006484:	bf00      	nop
    }
  }
  return (frequency);
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006488:	4618      	mov	r0, r3
 800648a:	3734      	adds	r7, #52	; 0x34
 800648c:	46bd      	mov	sp, r7
 800648e:	bd90      	pop	{r4, r7, pc}
 8006490:	0800c0a8 	.word	0x0800c0a8
 8006494:	40021000 	.word	0x40021000
 8006498:	007a1200 	.word	0x007a1200
 800649c:	003d0900 	.word	0x003d0900
 80064a0:	aaaaaaab 	.word	0xaaaaaaab

080064a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e041      	b.n	800653a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fc fa72 	bl	80029b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f000 fca0 	bl	8006e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b01      	cmp	r3, #1
 8006556:	d001      	beq.n	800655c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e032      	b.n	80065c2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a18      	ldr	r2, [pc, #96]	; (80065cc <HAL_TIM_Base_Start+0x88>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00e      	beq.n	800658c <HAL_TIM_Base_Start+0x48>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006576:	d009      	beq.n	800658c <HAL_TIM_Base_Start+0x48>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <HAL_TIM_Base_Start+0x8c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_TIM_Base_Start+0x48>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a13      	ldr	r2, [pc, #76]	; (80065d4 <HAL_TIM_Base_Start+0x90>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d111      	bne.n	80065b0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b06      	cmp	r3, #6
 800659c:	d010      	beq.n	80065c0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0201 	orr.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ae:	e007      	b.n	80065c0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	4770      	bx	lr
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40000400 	.word	0x40000400
 80065d4:	40000800 	.word	0x40000800

080065d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d001      	beq.n	80065f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e03a      	b.n	8006666 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a18      	ldr	r2, [pc, #96]	; (8006670 <HAL_TIM_Base_Start_IT+0x98>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d00e      	beq.n	8006630 <HAL_TIM_Base_Start_IT+0x58>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800661a:	d009      	beq.n	8006630 <HAL_TIM_Base_Start_IT+0x58>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a14      	ldr	r2, [pc, #80]	; (8006674 <HAL_TIM_Base_Start_IT+0x9c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d004      	beq.n	8006630 <HAL_TIM_Base_Start_IT+0x58>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a13      	ldr	r2, [pc, #76]	; (8006678 <HAL_TIM_Base_Start_IT+0xa0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d111      	bne.n	8006654 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b06      	cmp	r3, #6
 8006640:	d010      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006652:	e007      	b.n	8006664 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800

0800667c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0201 	bic.w	r2, r2, #1
 8006692:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6a1a      	ldr	r2, [r3, #32]
 800669a:	f241 1311 	movw	r3, #4369	; 0x1111
 800669e:	4013      	ands	r3, r2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10f      	bne.n	80066c4 <HAL_TIM_Base_Stop_IT+0x48>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	f240 4344 	movw	r3, #1092	; 0x444
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d107      	bne.n	80066c4 <HAL_TIM_Base_Stop_IT+0x48>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e041      	b.n	800676e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f839 	bl	8006776 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3304      	adds	r3, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f000 fb86 	bl	8006e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <HAL_TIM_PWM_Start+0x24>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	bf14      	ite	ne
 80067a4:	2301      	movne	r3, #1
 80067a6:	2300      	moveq	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	e022      	b.n	80067f2 <HAL_TIM_PWM_Start+0x6a>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d109      	bne.n	80067c6 <HAL_TIM_PWM_Start+0x3e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	bf14      	ite	ne
 80067be:	2301      	movne	r3, #1
 80067c0:	2300      	moveq	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	e015      	b.n	80067f2 <HAL_TIM_PWM_Start+0x6a>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d109      	bne.n	80067e0 <HAL_TIM_PWM_Start+0x58>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	bf14      	ite	ne
 80067d8:	2301      	movne	r3, #1
 80067da:	2300      	moveq	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	e008      	b.n	80067f2 <HAL_TIM_PWM_Start+0x6a>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e05e      	b.n	80068b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <HAL_TIM_PWM_Start+0x82>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006808:	e013      	b.n	8006832 <HAL_TIM_PWM_Start+0xaa>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b04      	cmp	r3, #4
 800680e:	d104      	bne.n	800681a <HAL_TIM_PWM_Start+0x92>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006818:	e00b      	b.n	8006832 <HAL_TIM_PWM_Start+0xaa>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b08      	cmp	r3, #8
 800681e:	d104      	bne.n	800682a <HAL_TIM_PWM_Start+0xa2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006828:	e003      	b.n	8006832 <HAL_TIM_PWM_Start+0xaa>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2201      	movs	r2, #1
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fd74 	bl	8007328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <HAL_TIM_PWM_Start+0x138>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d107      	bne.n	800685a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006858:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a18      	ldr	r2, [pc, #96]	; (80068c0 <HAL_TIM_PWM_Start+0x138>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00e      	beq.n	8006882 <HAL_TIM_PWM_Start+0xfa>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686c:	d009      	beq.n	8006882 <HAL_TIM_PWM_Start+0xfa>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a14      	ldr	r2, [pc, #80]	; (80068c4 <HAL_TIM_PWM_Start+0x13c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d004      	beq.n	8006882 <HAL_TIM_PWM_Start+0xfa>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <HAL_TIM_PWM_Start+0x140>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d111      	bne.n	80068a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b06      	cmp	r3, #6
 8006892:	d010      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a4:	e007      	b.n	80068b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0201 	orr.w	r2, r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800

080068cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d122      	bne.n	8006928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d11b      	bne.n	8006928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0202 	mvn.w	r2, #2
 80068f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa6f 	bl	8006df2 <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fa62 	bl	8006de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa71 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b04      	cmp	r3, #4
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b04      	cmp	r3, #4
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0204 	mvn.w	r2, #4
 800694c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2202      	movs	r2, #2
 8006952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa45 	bl	8006df2 <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa38 	bl	8006de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fa47 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b08      	cmp	r3, #8
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b08      	cmp	r3, #8
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0208 	mvn.w	r2, #8
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2204      	movs	r2, #4
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa1b 	bl	8006df2 <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa0e 	bl	8006de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fa1d 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0310 	and.w	r3, r3, #16
 80069da:	2b10      	cmp	r3, #16
 80069dc:	d122      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	2b10      	cmp	r3, #16
 80069ea:	d11b      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0210 	mvn.w	r2, #16
 80069f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2208      	movs	r2, #8
 80069fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f9f1 	bl	8006df2 <HAL_TIM_IC_CaptureCallback>
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f9e4 	bl	8006de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f9f3 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d10e      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d107      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0201 	mvn.w	r2, #1
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fa f87c 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5a:	2b80      	cmp	r3, #128	; 0x80
 8006a5c:	d10e      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a68:	2b80      	cmp	r3, #128	; 0x80
 8006a6a:	d107      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fce1 	bl	800743e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a86:	2b40      	cmp	r3, #64	; 0x40
 8006a88:	d10e      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b40      	cmp	r3, #64	; 0x40
 8006a96:	d107      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f9b7 	bl	8006e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d10e      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	d107      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0220 	mvn.w	r2, #32
 8006acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fcac 	bl	800742c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e0ac      	b.n	8006c50 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b0c      	cmp	r3, #12
 8006b02:	f200 809f 	bhi.w	8006c44 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b41 	.word	0x08006b41
 8006b10:	08006c45 	.word	0x08006c45
 8006b14:	08006c45 	.word	0x08006c45
 8006b18:	08006c45 	.word	0x08006c45
 8006b1c:	08006b81 	.word	0x08006b81
 8006b20:	08006c45 	.word	0x08006c45
 8006b24:	08006c45 	.word	0x08006c45
 8006b28:	08006c45 	.word	0x08006c45
 8006b2c:	08006bc3 	.word	0x08006bc3
 8006b30:	08006c45 	.word	0x08006c45
 8006b34:	08006c45 	.word	0x08006c45
 8006b38:	08006c45 	.word	0x08006c45
 8006b3c:	08006c03 	.word	0x08006c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f9d0 	bl	8006eec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0208 	orr.w	r2, r2, #8
 8006b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0204 	bic.w	r2, r2, #4
 8006b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6999      	ldr	r1, [r3, #24]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691a      	ldr	r2, [r3, #16]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	619a      	str	r2, [r3, #24]
      break;
 8006b7e:	e062      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fa16 	bl	8006fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6999      	ldr	r1, [r3, #24]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	021a      	lsls	r2, r3, #8
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	619a      	str	r2, [r3, #24]
      break;
 8006bc0:	e041      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fa5f 	bl	800708c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0208 	orr.w	r2, r2, #8
 8006bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0204 	bic.w	r2, r2, #4
 8006bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69d9      	ldr	r1, [r3, #28]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	61da      	str	r2, [r3, #28]
      break;
 8006c00:	e021      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 faa9 	bl	8007160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69da      	ldr	r2, [r3, #28]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69da      	ldr	r2, [r3, #28]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69d9      	ldr	r1, [r3, #28]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	021a      	lsls	r2, r3, #8
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	61da      	str	r2, [r3, #28]
      break;
 8006c42:	e000      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006c44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_TIM_ConfigClockSource+0x18>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e0b3      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x180>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca8:	d03e      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0xd0>
 8006caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cae:	f200 8087 	bhi.w	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb6:	f000 8085 	beq.w	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cbe:	d87f      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cc0:	2b70      	cmp	r3, #112	; 0x70
 8006cc2:	d01a      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0xa2>
 8006cc4:	2b70      	cmp	r3, #112	; 0x70
 8006cc6:	d87b      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cc8:	2b60      	cmp	r3, #96	; 0x60
 8006cca:	d050      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x116>
 8006ccc:	2b60      	cmp	r3, #96	; 0x60
 8006cce:	d877      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cd0:	2b50      	cmp	r3, #80	; 0x50
 8006cd2:	d03c      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0xf6>
 8006cd4:	2b50      	cmp	r3, #80	; 0x50
 8006cd6:	d873      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cd8:	2b40      	cmp	r3, #64	; 0x40
 8006cda:	d058      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x136>
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d86f      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ce0:	2b30      	cmp	r3, #48	; 0x30
 8006ce2:	d064      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x156>
 8006ce4:	2b30      	cmp	r3, #48	; 0x30
 8006ce6:	d86b      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d060      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x156>
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d867      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d05c      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x156>
 8006cf4:	2b10      	cmp	r3, #16
 8006cf6:	d05a      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006cf8:	e062      	b.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6899      	ldr	r1, [r3, #8]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f000 faee 	bl	80072ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	609a      	str	r2, [r3, #8]
      break;
 8006d26:	e04e      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6899      	ldr	r1, [r3, #8]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f000 fad7 	bl	80072ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d4a:	609a      	str	r2, [r3, #8]
      break;
 8006d4c:	e03b      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6859      	ldr	r1, [r3, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f000 fa4e 	bl	80071fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2150      	movs	r1, #80	; 0x50
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 faa5 	bl	80072b6 <TIM_ITRx_SetConfig>
      break;
 8006d6c:	e02b      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6859      	ldr	r1, [r3, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f000 fa6c 	bl	8007258 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2160      	movs	r1, #96	; 0x60
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fa95 	bl	80072b6 <TIM_ITRx_SetConfig>
      break;
 8006d8c:	e01b      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6859      	ldr	r1, [r3, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f000 fa2e 	bl	80071fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2140      	movs	r1, #64	; 0x40
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fa85 	bl	80072b6 <TIM_ITRx_SetConfig>
      break;
 8006dac:	e00b      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f000 fa7c 	bl	80072b6 <TIM_ITRx_SetConfig>
        break;
 8006dbe:	e002      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr

08006e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr

08006e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a29      	ldr	r2, [pc, #164]	; (8006ee0 <TIM_Base_SetConfig+0xb8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00b      	beq.n	8006e58 <TIM_Base_SetConfig+0x30>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e46:	d007      	beq.n	8006e58 <TIM_Base_SetConfig+0x30>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a26      	ldr	r2, [pc, #152]	; (8006ee4 <TIM_Base_SetConfig+0xbc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_Base_SetConfig+0x30>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a25      	ldr	r2, [pc, #148]	; (8006ee8 <TIM_Base_SetConfig+0xc0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d108      	bne.n	8006e6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <TIM_Base_SetConfig+0xb8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_Base_SetConfig+0x62>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e78:	d007      	beq.n	8006e8a <TIM_Base_SetConfig+0x62>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a19      	ldr	r2, [pc, #100]	; (8006ee4 <TIM_Base_SetConfig+0xbc>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_Base_SetConfig+0x62>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <TIM_Base_SetConfig+0xc0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d108      	bne.n	8006e9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a07      	ldr	r2, [pc, #28]	; (8006ee0 <TIM_Base_SetConfig+0xb8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d103      	bne.n	8006ed0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	691a      	ldr	r2, [r3, #16]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	615a      	str	r2, [r3, #20]
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800

08006eec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f023 0201 	bic.w	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f023 0302 	bic.w	r3, r3, #2
 8006f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a1c      	ldr	r2, [pc, #112]	; (8006fb4 <TIM_OC1_SetConfig+0xc8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d10c      	bne.n	8006f62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f023 0308 	bic.w	r3, r3, #8
 8006f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 0304 	bic.w	r3, r3, #4
 8006f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a13      	ldr	r2, [pc, #76]	; (8006fb4 <TIM_OC1_SetConfig+0xc8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d111      	bne.n	8006f8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	621a      	str	r2, [r3, #32]
}
 8006fa8:	bf00      	nop
 8006faa:	371c      	adds	r7, #28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bc80      	pop	{r7}
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40012c00 	.word	0x40012c00

08006fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f023 0210 	bic.w	r2, r3, #16
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f023 0320 	bic.w	r3, r3, #32
 8007002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	011b      	lsls	r3, r3, #4
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a1d      	ldr	r2, [pc, #116]	; (8007088 <TIM_OC2_SetConfig+0xd0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d10d      	bne.n	8007034 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800701e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a14      	ldr	r2, [pc, #80]	; (8007088 <TIM_OC2_SetConfig+0xd0>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d113      	bne.n	8007064 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	4313      	orrs	r3, r2
 8007062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	621a      	str	r2, [r3, #32]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr
 8007088:	40012c00 	.word	0x40012c00

0800708c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	021b      	lsls	r3, r3, #8
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a1d      	ldr	r2, [pc, #116]	; (800715c <TIM_OC3_SetConfig+0xd0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d10d      	bne.n	8007106 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a14      	ldr	r2, [pc, #80]	; (800715c <TIM_OC3_SetConfig+0xd0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d113      	bne.n	8007136 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800711c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	621a      	str	r2, [r3, #32]
}
 8007150:	bf00      	nop
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	bc80      	pop	{r7}
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40012c00 	.word	0x40012c00

08007160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	031b      	lsls	r3, r3, #12
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a0f      	ldr	r2, [pc, #60]	; (80071f8 <TIM_OC4_SetConfig+0x98>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d109      	bne.n	80071d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	019b      	lsls	r3, r3, #6
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr
 80071f8:	40012c00 	.word	0x40012c00

080071fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f023 0201 	bic.w	r2, r3, #1
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 030a 	bic.w	r3, r3, #10
 8007238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr

08007258 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f023 0210 	bic.w	r2, r3, #16
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007282:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	031b      	lsls	r3, r3, #12
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007294:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	621a      	str	r2, [r3, #32]
}
 80072ac:	bf00      	nop
 80072ae:	371c      	adds	r7, #28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr

080072b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f043 0307 	orr.w	r3, r3, #7
 80072d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	609a      	str	r2, [r3, #8]
}
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr

080072ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b087      	sub	sp, #28
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007304:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	021a      	lsls	r2, r3, #8
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	431a      	orrs	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	4313      	orrs	r3, r2
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	609a      	str	r2, [r3, #8]
}
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr

08007328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2201      	movs	r2, #1
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	43db      	mvns	r3, r3
 800734a:	401a      	ands	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1a      	ldr	r2, [r3, #32]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	fa01 f303 	lsl.w	r3, r1, r3
 8007360:	431a      	orrs	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	621a      	str	r2, [r3, #32]
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	bc80      	pop	{r7}
 800736e:	4770      	bx	lr

08007370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007384:	2302      	movs	r3, #2
 8007386:	e046      	b.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a16      	ldr	r2, [pc, #88]	; (8007420 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d4:	d009      	beq.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a12      	ldr	r2, [pc, #72]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a10      	ldr	r2, [pc, #64]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d10c      	bne.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr
 8007420:	40012c00 	.word	0x40012c00
 8007424:	40000400 	.word	0x40000400
 8007428:	40000800 	.word	0x40000800

0800742c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr

0800743e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr

08007450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007450:	b084      	sub	sp, #16
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	f107 0014 	add.w	r0, r7, #20
 800745e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	b004      	add	sp, #16
 800746e:	4770      	bx	lr

08007470 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007480:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007484:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	bc80      	pop	{r7}
 800749a:	4770      	bx	lr

0800749c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	43db      	mvns	r3, r3
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	4013      	ands	r3, r2
 80074bc:	b29a      	uxth	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr

080074d0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074e8:	b084      	sub	sp, #16
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	f107 0014 	add.w	r0, r7, #20
 80074f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	b004      	add	sp, #16
 8007526:	4770      	bx	lr

08007528 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007528:	b480      	push	{r7}
 800752a:	b09b      	sub	sp, #108	; 0x6c
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29b      	uxth	r3, r3
 8007546:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800754a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	78db      	ldrb	r3, [r3, #3]
 8007556:	2b03      	cmp	r3, #3
 8007558:	d81f      	bhi.n	800759a <USB_ActivateEndpoint+0x72>
 800755a:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <USB_ActivateEndpoint+0x38>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	08007571 	.word	0x08007571
 8007564:	0800758d 	.word	0x0800758d
 8007568:	080075a3 	.word	0x080075a3
 800756c:	0800757f 	.word	0x0800757f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007570:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007578:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800757c:	e012      	b.n	80075a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800757e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007582:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007586:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800758a:	e00b      	b.n	80075a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800758c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007590:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007594:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007598:	e004      	b.n	80075a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80075a0:	e000      	b.n	80075a4 <USB_ActivateEndpoint+0x7c>
      break;
 80075a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	441a      	add	r2, r3
 80075ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075dc:	b29a      	uxth	r2, r3
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	4313      	orrs	r3, r2
 80075e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	441a      	add	r2, r3
 80075f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80075f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007608:	b29b      	uxth	r3, r3
 800760a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	7b1b      	ldrb	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f040 8149 	bne.w	80078a8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8084 	beq.w	8007728 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762a:	b29b      	uxth	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	4413      	add	r3, r2
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	011a      	lsls	r2, r3, #4
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	88db      	ldrh	r3, [r3, #6]
 8007648:	085b      	lsrs	r3, r3, #1
 800764a:	b29b      	uxth	r3, r3
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	81fb      	strh	r3, [r7, #14]
 8007662:	89fb      	ldrh	r3, [r7, #14]
 8007664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01b      	beq.n	80076a4 <USB_ActivateEndpoint+0x17c>
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	b29b      	uxth	r3, r3
 800767a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007682:	81bb      	strh	r3, [r7, #12]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	441a      	add	r2, r3
 800768e:	89bb      	ldrh	r3, [r7, #12]
 8007690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800769c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	78db      	ldrb	r3, [r3, #3]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d020      	beq.n	80076ee <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c2:	813b      	strh	r3, [r7, #8]
 80076c4:	893b      	ldrh	r3, [r7, #8]
 80076c6:	f083 0320 	eor.w	r3, r3, #32
 80076ca:	813b      	strh	r3, [r7, #8]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	441a      	add	r2, r3
 80076d6:	893b      	ldrh	r3, [r7, #8]
 80076d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	8013      	strh	r3, [r2, #0]
 80076ec:	e27f      	b.n	8007bee <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007704:	817b      	strh	r3, [r7, #10]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	441a      	add	r2, r3
 8007710:	897b      	ldrh	r3, [r7, #10]
 8007712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007722:	b29b      	uxth	r3, r3
 8007724:	8013      	strh	r3, [r2, #0]
 8007726:	e262      	b.n	8007bee <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007732:	b29b      	uxth	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	4413      	add	r3, r2
 800773a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	011a      	lsls	r2, r3, #4
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	4413      	add	r3, r2
 8007746:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	88db      	ldrh	r3, [r3, #6]
 8007750:	085b      	lsrs	r3, r3, #1
 8007752:	b29b      	uxth	r3, r3
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007766:	b29b      	uxth	r3, r3
 8007768:	461a      	mov	r2, r3
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	4413      	add	r3, r2
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	011a      	lsls	r2, r3, #4
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	4413      	add	r3, r2
 800777a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800777e:	623b      	str	r3, [r7, #32]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d112      	bne.n	80077ae <USB_ActivateEndpoint+0x286>
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
 800778e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007792:	b29a      	uxth	r2, r3
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	e02f      	b.n	800780e <USB_ActivateEndpoint+0x2e6>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b3e      	cmp	r3, #62	; 0x3e
 80077b4:	d813      	bhi.n	80077de <USB_ActivateEndpoint+0x2b6>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	085b      	lsrs	r3, r3, #1
 80077bc:	663b      	str	r3, [r7, #96]	; 0x60
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <USB_ActivateEndpoint+0x2a8>
 80077ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077cc:	3301      	adds	r3, #1
 80077ce:	663b      	str	r3, [r7, #96]	; 0x60
 80077d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	029b      	lsls	r3, r3, #10
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	801a      	strh	r2, [r3, #0]
 80077dc:	e017      	b.n	800780e <USB_ActivateEndpoint+0x2e6>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	095b      	lsrs	r3, r3, #5
 80077e4:	663b      	str	r3, [r7, #96]	; 0x60
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f003 031f 	and.w	r3, r3, #31
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d102      	bne.n	80077f8 <USB_ActivateEndpoint+0x2d0>
 80077f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077f4:	3b01      	subs	r3, #1
 80077f6:	663b      	str	r3, [r7, #96]	; 0x60
 80077f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	029b      	lsls	r3, r3, #10
 80077fe:	b29b      	uxth	r3, r3
 8007800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007808:	b29a      	uxth	r2, r3
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	83fb      	strh	r3, [r7, #30]
 800781c:	8bfb      	ldrh	r3, [r7, #30]
 800781e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d01b      	beq.n	800785e <USB_ActivateEndpoint+0x336>
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783c:	83bb      	strh	r3, [r7, #28]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	441a      	add	r2, r3
 8007848:	8bbb      	ldrh	r3, [r7, #28]
 800784a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800785a:	b29b      	uxth	r3, r3
 800785c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007874:	837b      	strh	r3, [r7, #26]
 8007876:	8b7b      	ldrh	r3, [r7, #26]
 8007878:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800787c:	837b      	strh	r3, [r7, #26]
 800787e:	8b7b      	ldrh	r3, [r7, #26]
 8007880:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007884:	837b      	strh	r3, [r7, #26]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	441a      	add	r2, r3
 8007890:	8b7b      	ldrh	r3, [r7, #26]
 8007892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800789a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	8013      	strh	r3, [r2, #0]
 80078a6:	e1a2      	b.n	8007bee <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078be:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	441a      	add	r2, r3
 80078cc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80078d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80078dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078f4:	4413      	add	r3, r2
 80078f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	011a      	lsls	r2, r3, #4
 80078fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007900:	4413      	add	r3, r2
 8007902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007906:	657b      	str	r3, [r7, #84]	; 0x54
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	891b      	ldrh	r3, [r3, #8]
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	b29b      	uxth	r3, r3
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	653b      	str	r3, [r7, #80]	; 0x50
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007922:	b29b      	uxth	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007928:	4413      	add	r3, r2
 800792a:	653b      	str	r3, [r7, #80]	; 0x50
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	011a      	lsls	r2, r3, #4
 8007932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007934:	4413      	add	r3, r2
 8007936:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800793a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	895b      	ldrh	r3, [r3, #10]
 8007940:	085b      	lsrs	r3, r3, #1
 8007942:	b29b      	uxth	r3, r3
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800794a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	785b      	ldrb	r3, [r3, #1]
 8007950:	2b00      	cmp	r3, #0
 8007952:	f040 8091 	bne.w	8007a78 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007964:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d01b      	beq.n	80079a6 <USB_ActivateEndpoint+0x47e>
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	b29b      	uxth	r3, r3
 800797c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007984:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	441a      	add	r2, r3
 8007990:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800799a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800799e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	873b      	strh	r3, [r7, #56]	; 0x38
 80079b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01b      	beq.n	80079f6 <USB_ActivateEndpoint+0x4ce>
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	441a      	add	r2, r3
 80079e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80079e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	441a      	add	r2, r3
 8007a28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a54:	867b      	strh	r3, [r7, #50]	; 0x32
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	441a      	add	r2, r3
 8007a60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	8013      	strh	r3, [r2, #0]
 8007a76:	e0ba      	b.n	8007bee <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007a88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01d      	beq.n	8007ad0 <USB_ActivateEndpoint+0x5a8>
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aaa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	441a      	add	r2, r3
 8007ab8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007ae0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01d      	beq.n	8007b28 <USB_ActivateEndpoint+0x600>
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	441a      	add	r2, r3
 8007b10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	78db      	ldrb	r3, [r3, #3]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d024      	beq.n	8007b7a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b4e:	f083 0320 	eor.w	r3, r3, #32
 8007b52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	441a      	add	r2, r3
 8007b60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	8013      	strh	r3, [r2, #0]
 8007b78:	e01d      	b.n	8007bb6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	441a      	add	r2, r3
 8007b9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bcc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	441a      	add	r2, r3
 8007bd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007bee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	376c      	adds	r7, #108	; 0x6c
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b08d      	sub	sp, #52	; 0x34
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	7b1b      	ldrb	r3, [r3, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f040 808e 	bne.w	8007d2c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d044      	beq.n	8007ca2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	81bb      	strh	r3, [r7, #12]
 8007c26:	89bb      	ldrh	r3, [r7, #12]
 8007c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01b      	beq.n	8007c68 <USB_DeactivateEndpoint+0x6c>
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c46:	817b      	strh	r3, [r7, #10]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	441a      	add	r2, r3
 8007c52:	897b      	ldrh	r3, [r7, #10]
 8007c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c7e:	813b      	strh	r3, [r7, #8]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	441a      	add	r2, r3
 8007c8a:	893b      	ldrh	r3, [r7, #8]
 8007c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	8013      	strh	r3, [r2, #0]
 8007ca0:	e192      	b.n	8007fc8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	827b      	strh	r3, [r7, #18]
 8007cb0:	8a7b      	ldrh	r3, [r7, #18]
 8007cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01b      	beq.n	8007cf2 <USB_DeactivateEndpoint+0xf6>
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd0:	823b      	strh	r3, [r7, #16]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	441a      	add	r2, r3
 8007cdc:	8a3b      	ldrh	r3, [r7, #16]
 8007cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d08:	81fb      	strh	r3, [r7, #14]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	441a      	add	r2, r3
 8007d14:	89fb      	ldrh	r3, [r7, #14]
 8007d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	8013      	strh	r3, [r2, #0]
 8007d2a:	e14d      	b.n	8007fc8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f040 80a5 	bne.w	8007e80 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	843b      	strh	r3, [r7, #32]
 8007d44:	8c3b      	ldrh	r3, [r7, #32]
 8007d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01b      	beq.n	8007d86 <USB_DeactivateEndpoint+0x18a>
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d64:	83fb      	strh	r3, [r7, #30]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	441a      	add	r2, r3
 8007d70:	8bfb      	ldrh	r3, [r7, #30]
 8007d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	83bb      	strh	r3, [r7, #28]
 8007d94:	8bbb      	ldrh	r3, [r7, #28]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d01b      	beq.n	8007dd6 <USB_DeactivateEndpoint+0x1da>
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db4:	837b      	strh	r3, [r7, #26]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	441a      	add	r2, r3
 8007dc0:	8b7b      	ldrh	r3, [r7, #26]
 8007dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dec:	833b      	strh	r3, [r7, #24]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	441a      	add	r2, r3
 8007df8:	8b3b      	ldrh	r3, [r7, #24]
 8007dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e24:	82fb      	strh	r3, [r7, #22]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	441a      	add	r2, r3
 8007e30:	8afb      	ldrh	r3, [r7, #22]
 8007e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e5c:	82bb      	strh	r3, [r7, #20]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	441a      	add	r2, r3
 8007e68:	8abb      	ldrh	r3, [r7, #20]
 8007e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	8013      	strh	r3, [r2, #0]
 8007e7e:	e0a3      	b.n	8007fc8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d01b      	beq.n	8007ed0 <USB_DeactivateEndpoint+0x2d4>
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	441a      	add	r2, r3
 8007eba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007ede:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01b      	beq.n	8007f20 <USB_DeactivateEndpoint+0x324>
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efe:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	441a      	add	r2, r3
 8007f0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	441a      	add	r2, r3
 8007f42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	441a      	add	r2, r3
 8007f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa6:	847b      	strh	r3, [r7, #34]	; 0x22
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	441a      	add	r2, r3
 8007fb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3734      	adds	r7, #52	; 0x34
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bc80      	pop	{r7}
 8007fd2:	4770      	bx	lr

08007fd4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b0cc      	sub	sp, #304	; 0x130
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fe2:	6018      	str	r0, [r3, #0]
 8007fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fec:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	f041 817d 	bne.w	80092fa <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	429a      	cmp	r2, r3
 800801a:	d908      	bls.n	800802e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800801c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800802c:	e007      	b.n	800803e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800802e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800803e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	7b1b      	ldrb	r3, [r3, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d152      	bne.n	80080f4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800804e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6959      	ldr	r1, [r3, #20]
 800805a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	88da      	ldrh	r2, [r3, #6]
 8008066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800806a:	b29b      	uxth	r3, r3
 800806c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008070:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008074:	6800      	ldr	r0, [r0, #0]
 8008076:	f001 ff23 	bl	8009ec0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800807a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008082:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008086:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800808a:	6812      	ldr	r2, [r2, #0]
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008092:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809c:	b29b      	uxth	r3, r3
 800809e:	4619      	mov	r1, r3
 80080a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80080a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080ac:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	440a      	add	r2, r1
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	011a      	lsls	r2, r3, #4
 80080c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4413      	add	r3, r2
 80080d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80080d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	f001 b8b5 	b.w	800925e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80080f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	78db      	ldrb	r3, [r3, #3]
 8008100:	2b02      	cmp	r3, #2
 8008102:	f040 84c6 	bne.w	8008a92 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6a1a      	ldr	r2, [r3, #32]
 8008112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	429a      	cmp	r2, r3
 8008120:	f240 8443 	bls.w	80089aa <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008128:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800814a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800814e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	441a      	add	r2, r3
 8008168:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800816c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008174:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817c:	b29b      	uxth	r3, r3
 800817e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008190:	1ad2      	subs	r2, r2, r3
 8008192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800819e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 823e 	beq.w	8008642 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80081ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081d2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 809a 	bne.w	8008320 <USB_EPStartXfer+0x34c>
 80081ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081f8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80081fc:	6812      	ldr	r2, [r2, #0]
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008204:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800820e:	b29b      	uxth	r3, r3
 8008210:	4619      	mov	r1, r3
 8008212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800821a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800821e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008222:	6812      	ldr	r2, [r2, #0]
 8008224:	440a      	add	r2, r1
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	011a      	lsls	r2, r3, #4
 8008236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4413      	add	r3, r2
 8008242:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d122      	bne.n	800829e <USB_EPStartXfer+0x2ca>
 8008258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800826a:	b29a      	uxth	r2, r3
 800826c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008270:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	801a      	strh	r2, [r3, #0]
 8008278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800827c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	b29b      	uxth	r3, r3
 8008286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800828e:	b29a      	uxth	r2, r3
 8008290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008294:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	e079      	b.n	8008392 <USB_EPStartXfer+0x3be>
 800829e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a2:	2b3e      	cmp	r3, #62	; 0x3e
 80082a4:	d81b      	bhi.n	80082de <USB_EPStartXfer+0x30a>
 80082a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082aa:	085b      	lsrs	r3, r3, #1
 80082ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d004      	beq.n	80082c6 <USB_EPStartXfer+0x2f2>
 80082bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082c0:	3301      	adds	r3, #1
 80082c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	029b      	lsls	r3, r3, #10
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	801a      	strh	r2, [r3, #0]
 80082dc:	e059      	b.n	8008392 <USB_EPStartXfer+0x3be>
 80082de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082e2:	095b      	lsrs	r3, r3, #5
 80082e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ec:	f003 031f 	and.w	r3, r3, #31
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <USB_EPStartXfer+0x32a>
 80082f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082f8:	3b01      	subs	r3, #1
 80082fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008302:	b29b      	uxth	r3, r3
 8008304:	029b      	lsls	r3, r3, #10
 8008306:	b29b      	uxth	r3, r3
 8008308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008310:	b29a      	uxth	r2, r3
 8008312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008316:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	e038      	b.n	8008392 <USB_EPStartXfer+0x3be>
 8008320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d130      	bne.n	8008392 <USB_EPStartXfer+0x3be>
 8008330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800833e:	b29b      	uxth	r3, r3
 8008340:	4619      	mov	r1, r3
 8008342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008346:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800834a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800834e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	440a      	add	r2, r1
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	011a      	lsls	r2, r3, #4
 8008366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800836a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4413      	add	r3, r2
 8008372:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008384:	b29a      	uxth	r2, r3
 8008386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	895b      	ldrh	r3, [r3, #10]
 800839e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6959      	ldr	r1, [r3, #20]
 80083ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80083b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80083bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80083c0:	6800      	ldr	r0, [r0, #0]
 80083c2:	f001 fd7d 	bl	8009ec0 <USB_WritePMA>
            ep->xfer_buff += len;
 80083c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695a      	ldr	r2, [r3, #20]
 80083d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d6:	441a      	add	r2, r3
 80083d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80083e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6a1a      	ldr	r2, [r3, #32]
 80083f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d90f      	bls.n	8008420 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6a1a      	ldr	r2, [r3, #32]
 800840c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008410:	1ad2      	subs	r2, r2, r3
 8008412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	621a      	str	r2, [r3, #32]
 800841e:	e00e      	b.n	800843e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2200      	movs	r2, #0
 800843c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800843e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f040 809a 	bne.w	8008584 <USB_EPStartXfer+0x5b0>
 8008450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008454:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008458:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800845c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008468:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008472:	b29b      	uxth	r3, r3
 8008474:	4619      	mov	r1, r3
 8008476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800847e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008482:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	440a      	add	r2, r1
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	011a      	lsls	r2, r3, #4
 800849a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4413      	add	r3, r2
 80084a6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80084aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d122      	bne.n	8008502 <USB_EPStartXfer+0x52e>
 80084bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	801a      	strh	r2, [r3, #0]
 80084dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	801a      	strh	r2, [r3, #0]
 8008500:	e083      	b.n	800860a <USB_EPStartXfer+0x636>
 8008502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008506:	2b3e      	cmp	r3, #62	; 0x3e
 8008508:	d81b      	bhi.n	8008542 <USB_EPStartXfer+0x56e>
 800850a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800850e:	085b      	lsrs	r3, r3, #1
 8008510:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d004      	beq.n	800852a <USB_EPStartXfer+0x556>
 8008520:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008524:	3301      	adds	r3, #1
 8008526:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800852a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800852e:	b29b      	uxth	r3, r3
 8008530:	029b      	lsls	r3, r3, #10
 8008532:	b29a      	uxth	r2, r3
 8008534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008538:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e063      	b.n	800860a <USB_EPStartXfer+0x636>
 8008542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008546:	095b      	lsrs	r3, r3, #5
 8008548:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800854c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008550:	f003 031f 	and.w	r3, r3, #31
 8008554:	2b00      	cmp	r3, #0
 8008556:	d104      	bne.n	8008562 <USB_EPStartXfer+0x58e>
 8008558:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800855c:	3b01      	subs	r3, #1
 800855e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008562:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008566:	b29b      	uxth	r3, r3
 8008568:	029b      	lsls	r3, r3, #10
 800856a:	b29b      	uxth	r3, r3
 800856c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008574:	b29a      	uxth	r2, r3
 8008576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800857a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	e042      	b.n	800860a <USB_EPStartXfer+0x636>
 8008584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	785b      	ldrb	r3, [r3, #1]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d13a      	bne.n	800860a <USB_EPStartXfer+0x636>
 8008594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008598:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800859c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085a0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80085a4:	6812      	ldr	r2, [r2, #0]
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	4619      	mov	r1, r3
 80085ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80085c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085c6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	440a      	add	r2, r1
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	011a      	lsls	r2, r3, #4
 80085de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4413      	add	r3, r2
 80085ea:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80085ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008602:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800860a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	891b      	ldrh	r3, [r3, #8]
 8008616:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800861a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6959      	ldr	r1, [r3, #20]
 8008626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800862a:	b29b      	uxth	r3, r3
 800862c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008630:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008634:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008638:	6800      	ldr	r0, [r0, #0]
 800863a:	f001 fc41 	bl	8009ec0 <USB_WritePMA>
 800863e:	f000 be0e 	b.w	800925e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d16d      	bne.n	800872e <USB_EPStartXfer+0x75a>
 8008652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	64bb      	str	r3, [r7, #72]	; 0x48
 800865e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008662:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800866c:	b29b      	uxth	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008672:	4413      	add	r3, r2
 8008674:	64bb      	str	r3, [r7, #72]	; 0x48
 8008676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	011a      	lsls	r2, r3, #4
 8008684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008686:	4413      	add	r3, r2
 8008688:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800868c:	647b      	str	r3, [r7, #68]	; 0x44
 800868e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008692:	2b00      	cmp	r3, #0
 8008694:	d112      	bne.n	80086bc <USB_EPStartXfer+0x6e8>
 8008696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	b29b      	uxth	r3, r3
 800869c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b8:	801a      	strh	r2, [r3, #0]
 80086ba:	e063      	b.n	8008784 <USB_EPStartXfer+0x7b0>
 80086bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c0:	2b3e      	cmp	r3, #62	; 0x3e
 80086c2:	d817      	bhi.n	80086f4 <USB_EPStartXfer+0x720>
 80086c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c8:	085b      	lsrs	r3, r3, #1
 80086ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d004      	beq.n	80086e4 <USB_EPStartXfer+0x710>
 80086da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086de:	3301      	adds	r3, #1
 80086e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	029b      	lsls	r3, r3, #10
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	e047      	b.n	8008784 <USB_EPStartXfer+0x7b0>
 80086f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f8:	095b      	lsrs	r3, r3, #5
 80086fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008702:	f003 031f 	and.w	r3, r3, #31
 8008706:	2b00      	cmp	r3, #0
 8008708:	d104      	bne.n	8008714 <USB_EPStartXfer+0x740>
 800870a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800870e:	3b01      	subs	r3, #1
 8008710:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008714:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008718:	b29b      	uxth	r3, r3
 800871a:	029b      	lsls	r3, r3, #10
 800871c:	b29b      	uxth	r3, r3
 800871e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008726:	b29a      	uxth	r2, r3
 8008728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	e02a      	b.n	8008784 <USB_EPStartXfer+0x7b0>
 800872e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008732:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d122      	bne.n	8008784 <USB_EPStartXfer+0x7b0>
 800873e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008742:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	653b      	str	r3, [r7, #80]	; 0x50
 800874a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008758:	b29b      	uxth	r3, r3
 800875a:	461a      	mov	r2, r3
 800875c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800875e:	4413      	add	r3, r2
 8008760:	653b      	str	r3, [r7, #80]	; 0x50
 8008762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	011a      	lsls	r2, r3, #4
 8008770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008772:	4413      	add	r3, r2
 8008774:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008778:	64fb      	str	r3, [r7, #76]	; 0x4c
 800877a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800877e:	b29a      	uxth	r2, r3
 8008780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008782:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	891b      	ldrh	r3, [r3, #8]
 8008790:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6959      	ldr	r1, [r3, #20]
 80087a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80087aa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80087ae:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80087b2:	6800      	ldr	r0, [r0, #0]
 80087b4:	f001 fb84 	bl	8009ec0 <USB_WritePMA>
            ep->xfer_buff += len;
 80087b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	695a      	ldr	r2, [r3, #20]
 80087c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c8:	441a      	add	r2, r3
 80087ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80087d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6a1a      	ldr	r2, [r3, #32]
 80087e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d90f      	bls.n	8008812 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80087f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6a1a      	ldr	r2, [r3, #32]
 80087fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008802:	1ad2      	subs	r2, r2, r3
 8008804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	621a      	str	r2, [r3, #32]
 8008810:	e00e      	b.n	8008830 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8008812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2200      	movs	r2, #0
 800882e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008834:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	643b      	str	r3, [r7, #64]	; 0x40
 800883c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	785b      	ldrb	r3, [r3, #1]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d16d      	bne.n	8008928 <USB_EPStartXfer+0x954>
 800884c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	63bb      	str	r3, [r7, #56]	; 0x38
 8008858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008866:	b29b      	uxth	r3, r3
 8008868:	461a      	mov	r2, r3
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	4413      	add	r3, r2
 800886e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	011a      	lsls	r2, r3, #4
 800887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008880:	4413      	add	r3, r2
 8008882:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008886:	637b      	str	r3, [r7, #52]	; 0x34
 8008888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d112      	bne.n	80088b6 <USB_EPStartXfer+0x8e2>
 8008890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800889a:	b29a      	uxth	r2, r3
 800889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	e05d      	b.n	8008972 <USB_EPStartXfer+0x99e>
 80088b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ba:	2b3e      	cmp	r3, #62	; 0x3e
 80088bc:	d817      	bhi.n	80088ee <USB_EPStartXfer+0x91a>
 80088be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c2:	085b      	lsrs	r3, r3, #1
 80088c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80088c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d004      	beq.n	80088de <USB_EPStartXfer+0x90a>
 80088d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088d8:	3301      	adds	r3, #1
 80088da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80088de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	029b      	lsls	r3, r3, #10
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ea:	801a      	strh	r2, [r3, #0]
 80088ec:	e041      	b.n	8008972 <USB_EPStartXfer+0x99e>
 80088ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f2:	095b      	lsrs	r3, r3, #5
 80088f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80088f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fc:	f003 031f 	and.w	r3, r3, #31
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <USB_EPStartXfer+0x93a>
 8008904:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008908:	3b01      	subs	r3, #1
 800890a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800890e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008912:	b29b      	uxth	r3, r3
 8008914:	029b      	lsls	r3, r3, #10
 8008916:	b29b      	uxth	r3, r3
 8008918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008920:	b29a      	uxth	r2, r3
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	801a      	strh	r2, [r3, #0]
 8008926:	e024      	b.n	8008972 <USB_EPStartXfer+0x99e>
 8008928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	785b      	ldrb	r3, [r3, #1]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d11c      	bne.n	8008972 <USB_EPStartXfer+0x99e>
 8008938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800893c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008946:	b29b      	uxth	r3, r3
 8008948:	461a      	mov	r2, r3
 800894a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800894c:	4413      	add	r3, r2
 800894e:	643b      	str	r3, [r7, #64]	; 0x40
 8008950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	011a      	lsls	r2, r3, #4
 800895e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008960:	4413      	add	r3, r2
 8008962:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896c:	b29a      	uxth	r2, r3
 800896e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008970:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	895b      	ldrh	r3, [r3, #10]
 800897e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6959      	ldr	r1, [r3, #20]
 800898e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008992:	b29b      	uxth	r3, r3
 8008994:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008998:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800899c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80089a0:	6800      	ldr	r0, [r0, #0]
 80089a2:	f001 fa8d 	bl	8009ec0 <USB_WritePMA>
 80089a6:	f000 bc5a 	b.w	800925e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80089aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80089ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80089dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80089e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	441a      	add	r2, r3
 80089fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	461a      	mov	r2, r3
 8008a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a36:	4413      	add	r3, r2
 8008a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	011a      	lsls	r2, r3, #4
 8008a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a50:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	891b      	ldrh	r3, [r3, #8]
 8008a68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6959      	ldr	r1, [r3, #20]
 8008a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a82:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008a86:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	f001 fa18 	bl	8009ec0 <USB_WritePMA>
 8008a90:	e3e5      	b.n	800925e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	441a      	add	r2, r3
 8008ad6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ae2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6a1a      	ldr	r2, [r3, #32]
 8008afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afe:	1ad2      	subs	r2, r2, r3
 8008b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 81bc 	beq.w	8008eac <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d16d      	bne.n	8008c2e <USB_EPStartXfer+0xc5a>
 8008b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	461a      	mov	r2, r3
 8008b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b72:	4413      	add	r3, r2
 8008b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	011a      	lsls	r2, r3, #4
 8008b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b86:	4413      	add	r3, r2
 8008b88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b8c:	677b      	str	r3, [r7, #116]	; 0x74
 8008b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d112      	bne.n	8008bbc <USB_EPStartXfer+0xbe8>
 8008b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba4:	801a      	strh	r2, [r3, #0]
 8008ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bb8:	801a      	strh	r2, [r3, #0]
 8008bba:	e060      	b.n	8008c7e <USB_EPStartXfer+0xcaa>
 8008bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc0:	2b3e      	cmp	r3, #62	; 0x3e
 8008bc2:	d817      	bhi.n	8008bf4 <USB_EPStartXfer+0xc20>
 8008bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc8:	085b      	lsrs	r3, r3, #1
 8008bca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <USB_EPStartXfer+0xc10>
 8008bda:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008bde:	3301      	adds	r3, #1
 8008be0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008be4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	029b      	lsls	r3, r3, #10
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	e044      	b.n	8008c7e <USB_EPStartXfer+0xcaa>
 8008bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d104      	bne.n	8008c14 <USB_EPStartXfer+0xc40>
 8008c0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	029b      	lsls	r3, r3, #10
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c2a:	801a      	strh	r2, [r3, #0]
 8008c2c:	e027      	b.n	8008c7e <USB_EPStartXfer+0xcaa>
 8008c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d11f      	bne.n	8008c7e <USB_EPStartXfer+0xcaa>
 8008c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c54:	4413      	add	r3, r2
 8008c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	011a      	lsls	r2, r3, #4
 8008c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	895b      	ldrh	r3, [r3, #10]
 8008c8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6959      	ldr	r1, [r3, #20]
 8008c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ca4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008ca8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008cac:	6800      	ldr	r0, [r0, #0]
 8008cae:	f001 f907 	bl	8009ec0 <USB_WritePMA>
          ep->xfer_buff += len;
 8008cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695a      	ldr	r2, [r3, #20]
 8008cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc2:	441a      	add	r2, r3
 8008cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6a1a      	ldr	r2, [r3, #32]
 8008cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d90f      	bls.n	8008d0c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6a1a      	ldr	r2, [r3, #32]
 8008cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cfc:	1ad2      	subs	r2, r2, r3
 8008cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	621a      	str	r2, [r3, #32]
 8008d0a:	e00e      	b.n	8008d2a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2200      	movs	r2, #0
 8008d28:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 8295 	beq.w	800925e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	785b      	ldrb	r3, [r3, #1]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d16d      	bne.n	8008e20 <USB_EPStartXfer+0xe4c>
 8008d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	461a      	mov	r2, r3
 8008d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d64:	4413      	add	r3, r2
 8008d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	011a      	lsls	r2, r3, #4
 8008d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d78:	4413      	add	r3, r2
 8008d7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8008d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d112      	bne.n	8008dae <USB_EPStartXfer+0xdda>
 8008d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008daa:	801a      	strh	r2, [r3, #0]
 8008dac:	e063      	b.n	8008e76 <USB_EPStartXfer+0xea2>
 8008dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db2:	2b3e      	cmp	r3, #62	; 0x3e
 8008db4:	d817      	bhi.n	8008de6 <USB_EPStartXfer+0xe12>
 8008db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dba:	085b      	lsrs	r3, r3, #1
 8008dbc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <USB_EPStartXfer+0xe02>
 8008dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	029b      	lsls	r3, r3, #10
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008de2:	801a      	strh	r2, [r3, #0]
 8008de4:	e047      	b.n	8008e76 <USB_EPStartXfer+0xea2>
 8008de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dea:	095b      	lsrs	r3, r3, #5
 8008dec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df4:	f003 031f 	and.w	r3, r3, #31
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d104      	bne.n	8008e06 <USB_EPStartXfer+0xe32>
 8008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e00:	3b01      	subs	r3, #1
 8008e02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	029b      	lsls	r3, r3, #10
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e1c:	801a      	strh	r2, [r3, #0]
 8008e1e:	e02a      	b.n	8008e76 <USB_EPStartXfer+0xea2>
 8008e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d122      	bne.n	8008e76 <USB_EPStartXfer+0xea2>
 8008e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8008e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e50:	4413      	add	r3, r2
 8008e52:	673b      	str	r3, [r7, #112]	; 0x70
 8008e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	011a      	lsls	r2, r3, #4
 8008e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e64:	4413      	add	r3, r2
 8008e66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	891b      	ldrh	r3, [r3, #8]
 8008e82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6959      	ldr	r1, [r3, #20]
 8008e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e9c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008ea0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008ea4:	6800      	ldr	r0, [r0, #0]
 8008ea6:	f001 f80b 	bl	8009ec0 <USB_WritePMA>
 8008eaa:	e1d8      	b.n	800925e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	785b      	ldrb	r3, [r3, #1]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d178      	bne.n	8008fae <USB_EPStartXfer+0xfda>
 8008ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	461a      	mov	r2, r3
 8008edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	011a      	lsls	r2, r3, #4
 8008ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ef8:	4413      	add	r3, r2
 8008efa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008efe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d116      	bne.n	8008f38 <USB_EPStartXfer+0xf64>
 8008f0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f1c:	801a      	strh	r2, [r3, #0]
 8008f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	e06b      	b.n	8009010 <USB_EPStartXfer+0x103c>
 8008f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8008f3e:	d818      	bhi.n	8008f72 <USB_EPStartXfer+0xf9e>
 8008f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f44:	085b      	lsrs	r3, r3, #1
 8008f46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d004      	beq.n	8008f60 <USB_EPStartXfer+0xf8c>
 8008f56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	029b      	lsls	r3, r3, #10
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	e04e      	b.n	8009010 <USB_EPStartXfer+0x103c>
 8008f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f80:	f003 031f 	and.w	r3, r3, #31
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <USB_EPStartXfer+0xfbe>
 8008f88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	029b      	lsls	r3, r3, #10
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	e030      	b.n	8009010 <USB_EPStartXfer+0x103c>
 8008fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d128      	bne.n	8009010 <USB_EPStartXfer+0x103c>
 8008fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	011a      	lsls	r2, r3, #4
 8008ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009008:	b29a      	uxth	r2, r3
 800900a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800900e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	891b      	ldrh	r3, [r3, #8]
 800901c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6959      	ldr	r1, [r3, #20]
 800902c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009030:	b29b      	uxth	r3, r3
 8009032:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009036:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800903a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800903e:	6800      	ldr	r0, [r0, #0]
 8009040:	f000 ff3e 	bl	8009ec0 <USB_WritePMA>
          ep->xfer_buff += len;
 8009044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	695a      	ldr	r2, [r3, #20]
 8009050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009054:	441a      	add	r2, r3
 8009056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800905a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6a1a      	ldr	r2, [r3, #32]
 800906e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	429a      	cmp	r2, r3
 800907c:	d90f      	bls.n	800909e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800907e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6a1a      	ldr	r2, [r3, #32]
 800908a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	621a      	str	r2, [r3, #32]
 800909c:	e00e      	b.n	80090bc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800909e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80090ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2200      	movs	r2, #0
 80090ba:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80090bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80cc 	beq.w	800925e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d178      	bne.n	80091d6 <USB_EPStartXfer+0x1202>
 80090e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009100:	b29b      	uxth	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009108:	4413      	add	r3, r2
 800910a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800910e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	011a      	lsls	r2, r3, #4
 800911c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009120:	4413      	add	r3, r2
 8009122:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009126:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800912a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d116      	bne.n	8009160 <USB_EPStartXfer+0x118c>
 8009132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	b29b      	uxth	r3, r3
 800913a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800913e:	b29a      	uxth	r2, r3
 8009140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	b29b      	uxth	r3, r3
 800914e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009156:	b29a      	uxth	r2, r3
 8009158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800915c:	801a      	strh	r2, [r3, #0]
 800915e:	e064      	b.n	800922a <USB_EPStartXfer+0x1256>
 8009160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009164:	2b3e      	cmp	r3, #62	; 0x3e
 8009166:	d818      	bhi.n	800919a <USB_EPStartXfer+0x11c6>
 8009168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800916c:	085b      	lsrs	r3, r3, #1
 800916e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d004      	beq.n	8009188 <USB_EPStartXfer+0x11b4>
 800917e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009182:	3301      	adds	r3, #1
 8009184:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800918c:	b29b      	uxth	r3, r3
 800918e:	029b      	lsls	r3, r3, #10
 8009190:	b29a      	uxth	r2, r3
 8009192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009196:	801a      	strh	r2, [r3, #0]
 8009198:	e047      	b.n	800922a <USB_EPStartXfer+0x1256>
 800919a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919e:	095b      	lsrs	r3, r3, #5
 80091a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a8:	f003 031f 	and.w	r3, r3, #31
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d104      	bne.n	80091ba <USB_EPStartXfer+0x11e6>
 80091b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091b4:	3b01      	subs	r3, #1
 80091b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091be:	b29b      	uxth	r3, r3
 80091c0:	029b      	lsls	r3, r3, #10
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091d2:	801a      	strh	r2, [r3, #0]
 80091d4:	e029      	b.n	800922a <USB_EPStartXfer+0x1256>
 80091d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d121      	bne.n	800922a <USB_EPStartXfer+0x1256>
 80091e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	461a      	mov	r2, r3
 80091f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091fc:	4413      	add	r3, r2
 80091fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	011a      	lsls	r2, r3, #4
 8009210:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009214:	4413      	add	r3, r2
 8009216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800921a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800921e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009222:	b29a      	uxth	r2, r3
 8009224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009228:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800922a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800922e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	895b      	ldrh	r3, [r3, #10]
 8009236:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800923a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800923e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6959      	ldr	r1, [r3, #20]
 8009246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800924a:	b29b      	uxth	r3, r3
 800924c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009250:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009254:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009258:	6800      	ldr	r0, [r0, #0]
 800925a:	f000 fe31 	bl	8009ec0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800925e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800926c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009280:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800928c:	8013      	strh	r3, [r2, #0]
 800928e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009292:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009296:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800929a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800929e:	8812      	ldrh	r2, [r2, #0]
 80092a0:	f082 0210 	eor.w	r2, r2, #16
 80092a4:	801a      	strh	r2, [r3, #0]
 80092a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092aa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80092ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092b2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80092b6:	8812      	ldrh	r2, [r2, #0]
 80092b8:	f082 0220 	eor.w	r2, r2, #32
 80092bc:	801a      	strh	r2, [r3, #0]
 80092be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	441a      	add	r2, r3
 80092d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092dc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	8013      	strh	r3, [r2, #0]
 80092f6:	f000 bc9f 	b.w	8009c38 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80092fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	7b1b      	ldrb	r3, [r3, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	f040 80ae 	bne.w	8009468 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800930c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	699a      	ldr	r2, [r3, #24]
 8009318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	429a      	cmp	r2, r3
 8009326:	d917      	bls.n	8009358 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800932c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800933c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	699a      	ldr	r2, [r3, #24]
 8009344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009348:	1ad2      	subs	r2, r2, r3
 800934a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800934e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	619a      	str	r2, [r3, #24]
 8009356:	e00e      	b.n	8009376 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800935c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800936c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2200      	movs	r2, #0
 8009374:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800937a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009392:	b29b      	uxth	r3, r3
 8009394:	461a      	mov	r2, r3
 8009396:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800939a:	4413      	add	r3, r2
 800939c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	011a      	lsls	r2, r3, #4
 80093ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093b2:	4413      	add	r3, r2
 80093b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d116      	bne.n	80093f2 <USB_EPStartXfer+0x141e>
 80093c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093d6:	801a      	strh	r2, [r3, #0]
 80093d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093ee:	801a      	strh	r2, [r3, #0]
 80093f0:	e3e8      	b.n	8009bc4 <USB_EPStartXfer+0x1bf0>
 80093f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f6:	2b3e      	cmp	r3, #62	; 0x3e
 80093f8:	d818      	bhi.n	800942c <USB_EPStartXfer+0x1458>
 80093fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093fe:	085b      	lsrs	r3, r3, #1
 8009400:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d004      	beq.n	800941a <USB_EPStartXfer+0x1446>
 8009410:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009414:	3301      	adds	r3, #1
 8009416:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800941a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800941e:	b29b      	uxth	r3, r3
 8009420:	029b      	lsls	r3, r3, #10
 8009422:	b29a      	uxth	r2, r3
 8009424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009428:	801a      	strh	r2, [r3, #0]
 800942a:	e3cb      	b.n	8009bc4 <USB_EPStartXfer+0x1bf0>
 800942c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009430:	095b      	lsrs	r3, r3, #5
 8009432:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800943a:	f003 031f 	and.w	r3, r3, #31
 800943e:	2b00      	cmp	r3, #0
 8009440:	d104      	bne.n	800944c <USB_EPStartXfer+0x1478>
 8009442:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009446:	3b01      	subs	r3, #1
 8009448:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800944c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009450:	b29b      	uxth	r3, r3
 8009452:	029b      	lsls	r3, r3, #10
 8009454:	b29b      	uxth	r3, r3
 8009456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800945a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800945e:	b29a      	uxth	r2, r3
 8009460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009464:	801a      	strh	r2, [r3, #0]
 8009466:	e3ad      	b.n	8009bc4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	78db      	ldrb	r3, [r3, #3]
 8009474:	2b02      	cmp	r3, #2
 8009476:	f040 8200 	bne.w	800987a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800947a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800947e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	2b00      	cmp	r3, #0
 8009488:	f040 8091 	bne.w	80095ae <USB_EPStartXfer+0x15da>
 800948c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800949a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800949e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094b0:	4413      	add	r3, r2
 80094b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	011a      	lsls	r2, r3, #4
 80094c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094c8:	4413      	add	r3, r2
 80094ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d116      	bne.n	8009510 <USB_EPStartXfer+0x153c>
 80094e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094e6:	881b      	ldrh	r3, [r3, #0]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094f4:	801a      	strh	r2, [r3, #0]
 80094f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009506:	b29a      	uxth	r2, r3
 8009508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	e083      	b.n	8009618 <USB_EPStartXfer+0x1644>
 8009510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	2b3e      	cmp	r3, #62	; 0x3e
 800951e:	d820      	bhi.n	8009562 <USB_EPStartXfer+0x158e>
 8009520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	085b      	lsrs	r3, r3, #1
 800952e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d004      	beq.n	8009550 <USB_EPStartXfer+0x157c>
 8009546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954a:	3301      	adds	r3, #1
 800954c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009554:	b29b      	uxth	r3, r3
 8009556:	029b      	lsls	r3, r3, #10
 8009558:	b29a      	uxth	r2, r3
 800955a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800955e:	801a      	strh	r2, [r3, #0]
 8009560:	e05a      	b.n	8009618 <USB_EPStartXfer+0x1644>
 8009562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	095b      	lsrs	r3, r3, #5
 8009570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	f003 031f 	and.w	r3, r3, #31
 8009584:	2b00      	cmp	r3, #0
 8009586:	d104      	bne.n	8009592 <USB_EPStartXfer+0x15be>
 8009588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800958c:	3b01      	subs	r3, #1
 800958e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009596:	b29b      	uxth	r3, r3
 8009598:	029b      	lsls	r3, r3, #10
 800959a:	b29b      	uxth	r3, r3
 800959c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095aa:	801a      	strh	r2, [r3, #0]
 80095ac:	e034      	b.n	8009618 <USB_EPStartXfer+0x1644>
 80095ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d12c      	bne.n	8009618 <USB_EPStartXfer+0x1644>
 80095be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095da:	b29b      	uxth	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095e2:	4413      	add	r3, r2
 80095e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	011a      	lsls	r2, r3, #4
 80095f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095fa:	4413      	add	r3, r2
 80095fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	b29a      	uxth	r2, r3
 8009612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009616:	801a      	strh	r2, [r3, #0]
 8009618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800962a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	785b      	ldrb	r3, [r3, #1]
 8009632:	2b00      	cmp	r3, #0
 8009634:	f040 8091 	bne.w	800975a <USB_EPStartXfer+0x1786>
 8009638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800963c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009654:	b29b      	uxth	r3, r3
 8009656:	461a      	mov	r2, r3
 8009658:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800965c:	4413      	add	r3, r2
 800965e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	011a      	lsls	r2, r3, #4
 8009670:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009674:	4413      	add	r3, r2
 8009676:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800967a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800967e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d116      	bne.n	80096bc <USB_EPStartXfer+0x16e8>
 800968e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800969a:	b29a      	uxth	r2, r3
 800969c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096a0:	801a      	strh	r2, [r3, #0]
 80096a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096b8:	801a      	strh	r2, [r3, #0]
 80096ba:	e07c      	b.n	80097b6 <USB_EPStartXfer+0x17e2>
 80096bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2b3e      	cmp	r3, #62	; 0x3e
 80096ca:	d820      	bhi.n	800970e <USB_EPStartXfer+0x173a>
 80096cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	085b      	lsrs	r3, r3, #1
 80096da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <USB_EPStartXfer+0x1728>
 80096f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096f6:	3301      	adds	r3, #1
 80096f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009700:	b29b      	uxth	r3, r3
 8009702:	029b      	lsls	r3, r3, #10
 8009704:	b29a      	uxth	r2, r3
 8009706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800970a:	801a      	strh	r2, [r3, #0]
 800970c:	e053      	b.n	80097b6 <USB_EPStartXfer+0x17e2>
 800970e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	095b      	lsrs	r3, r3, #5
 800971c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	f003 031f 	and.w	r3, r3, #31
 8009730:	2b00      	cmp	r3, #0
 8009732:	d104      	bne.n	800973e <USB_EPStartXfer+0x176a>
 8009734:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009738:	3b01      	subs	r3, #1
 800973a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800973e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009742:	b29b      	uxth	r3, r3
 8009744:	029b      	lsls	r3, r3, #10
 8009746:	b29b      	uxth	r3, r3
 8009748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800974c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009750:	b29a      	uxth	r2, r3
 8009752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009756:	801a      	strh	r2, [r3, #0]
 8009758:	e02d      	b.n	80097b6 <USB_EPStartXfer+0x17e2>
 800975a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800975e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	785b      	ldrb	r3, [r3, #1]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d125      	bne.n	80097b6 <USB_EPStartXfer+0x17e2>
 800976a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800976e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009778:	b29b      	uxth	r3, r3
 800977a:	461a      	mov	r2, r3
 800977c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009780:	4413      	add	r3, r2
 8009782:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800978a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	011a      	lsls	r2, r3, #4
 8009794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009798:	4413      	add	r3, r2
 800979a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800979e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097b4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80097b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 81fe 	beq.w	8009bc4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80097c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80097e8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80097ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <USB_EPStartXfer+0x182c>
 80097f4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80097f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10d      	bne.n	800981c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009800:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009808:	2b00      	cmp	r3, #0
 800980a:	f040 81db 	bne.w	8009bc4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800980e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	f040 81d4 	bne.w	8009bc4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800981c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009820:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800982a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	b29b      	uxth	r3, r3
 800983a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800983e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009842:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800984a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	441a      	add	r2, r3
 8009860:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800986c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009870:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009874:	b29b      	uxth	r3, r3
 8009876:	8013      	strh	r3, [r2, #0]
 8009878:	e1a4      	b.n	8009bc4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800987a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800987e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	78db      	ldrb	r3, [r3, #3]
 8009886:	2b01      	cmp	r3, #1
 8009888:	f040 819a 	bne.w	8009bc0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800988c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	699a      	ldr	r2, [r3, #24]
 8009898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800989c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d917      	bls.n	80098d8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80098a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80098b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699a      	ldr	r2, [r3, #24]
 80098c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098c8:	1ad2      	subs	r2, r2, r3
 80098ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	619a      	str	r2, [r3, #24]
 80098d6:	e00e      	b.n	80098f6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80098d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80098e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2200      	movs	r2, #0
 80098f4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80098f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	785b      	ldrb	r3, [r3, #1]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d178      	bne.n	80099f8 <USB_EPStartXfer+0x1a24>
 8009906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800990a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009918:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009922:	b29b      	uxth	r3, r3
 8009924:	461a      	mov	r2, r3
 8009926:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800992a:	4413      	add	r3, r2
 800992c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	011a      	lsls	r2, r3, #4
 800993e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009942:	4413      	add	r3, r2
 8009944:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009948:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800994c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009950:	2b00      	cmp	r3, #0
 8009952:	d116      	bne.n	8009982 <USB_EPStartXfer+0x19ae>
 8009954:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	b29b      	uxth	r3, r3
 800995c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009960:	b29a      	uxth	r2, r3
 8009962:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009966:	801a      	strh	r2, [r3, #0]
 8009968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	b29b      	uxth	r3, r3
 8009970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009978:	b29a      	uxth	r2, r3
 800997a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800997e:	801a      	strh	r2, [r3, #0]
 8009980:	e06b      	b.n	8009a5a <USB_EPStartXfer+0x1a86>
 8009982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009986:	2b3e      	cmp	r3, #62	; 0x3e
 8009988:	d818      	bhi.n	80099bc <USB_EPStartXfer+0x19e8>
 800998a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800998e:	085b      	lsrs	r3, r3, #1
 8009990:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	2b00      	cmp	r3, #0
 800999e:	d004      	beq.n	80099aa <USB_EPStartXfer+0x19d6>
 80099a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099a4:	3301      	adds	r3, #1
 80099a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	029b      	lsls	r3, r3, #10
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099b8:	801a      	strh	r2, [r3, #0]
 80099ba:	e04e      	b.n	8009a5a <USB_EPStartXfer+0x1a86>
 80099bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099c0:	095b      	lsrs	r3, r3, #5
 80099c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ca:	f003 031f 	and.w	r3, r3, #31
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d104      	bne.n	80099dc <USB_EPStartXfer+0x1a08>
 80099d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099d6:	3b01      	subs	r3, #1
 80099d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	029b      	lsls	r3, r3, #10
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099f4:	801a      	strh	r2, [r3, #0]
 80099f6:	e030      	b.n	8009a5a <USB_EPStartXfer+0x1a86>
 80099f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	785b      	ldrb	r3, [r3, #1]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d128      	bne.n	8009a5a <USB_EPStartXfer+0x1a86>
 8009a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	461a      	mov	r2, r3
 8009a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	011a      	lsls	r2, r3, #4
 8009a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a44:	4413      	add	r3, r2
 8009a46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009a58:	801a      	strh	r2, [r3, #0]
 8009a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	785b      	ldrb	r3, [r3, #1]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d178      	bne.n	8009b6a <USB_EPStartXfer+0x1b96>
 8009a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	461a      	mov	r2, r3
 8009a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	011a      	lsls	r2, r3, #4
 8009ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d116      	bne.n	8009af4 <USB_EPStartXfer+0x1b20>
 8009ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ad8:	801a      	strh	r2, [r3, #0]
 8009ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009af0:	801a      	strh	r2, [r3, #0]
 8009af2:	e067      	b.n	8009bc4 <USB_EPStartXfer+0x1bf0>
 8009af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009af8:	2b3e      	cmp	r3, #62	; 0x3e
 8009afa:	d818      	bhi.n	8009b2e <USB_EPStartXfer+0x1b5a>
 8009afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b00:	085b      	lsrs	r3, r3, #1
 8009b02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d004      	beq.n	8009b1c <USB_EPStartXfer+0x1b48>
 8009b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b16:	3301      	adds	r3, #1
 8009b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	029b      	lsls	r3, r3, #10
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b2a:	801a      	strh	r2, [r3, #0]
 8009b2c:	e04a      	b.n	8009bc4 <USB_EPStartXfer+0x1bf0>
 8009b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b32:	095b      	lsrs	r3, r3, #5
 8009b34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b3c:	f003 031f 	and.w	r3, r3, #31
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d104      	bne.n	8009b4e <USB_EPStartXfer+0x1b7a>
 8009b44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	029b      	lsls	r3, r3, #10
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b66:	801a      	strh	r2, [r3, #0]
 8009b68:	e02c      	b.n	8009bc4 <USB_EPStartXfer+0x1bf0>
 8009b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	785b      	ldrb	r3, [r3, #1]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d124      	bne.n	8009bc4 <USB_EPStartXfer+0x1bf0>
 8009b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b90:	4413      	add	r3, r2
 8009b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	011a      	lsls	r2, r3, #4
 8009ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ba8:	4413      	add	r3, r2
 8009baa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bbc:	801a      	strh	r2, [r3, #0]
 8009bbe:	e001      	b.n	8009bc4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e03a      	b.n	8009c3a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009bee:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009bf2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009bf6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009bfa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009bfe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c02:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	441a      	add	r2, r3
 8009c20:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	785b      	ldrb	r3, [r3, #1]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d020      	beq.n	8009c98 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c6c:	81bb      	strh	r3, [r7, #12]
 8009c6e:	89bb      	ldrh	r3, [r7, #12]
 8009c70:	f083 0310 	eor.w	r3, r3, #16
 8009c74:	81bb      	strh	r3, [r7, #12]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	441a      	add	r2, r3
 8009c80:	89bb      	ldrh	r3, [r7, #12]
 8009c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	8013      	strh	r3, [r2, #0]
 8009c96:	e01f      	b.n	8009cd8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cae:	81fb      	strh	r3, [r7, #14]
 8009cb0:	89fb      	ldrh	r3, [r7, #14]
 8009cb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009cb6:	81fb      	strh	r3, [r7, #14]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	441a      	add	r2, r3
 8009cc2:	89fb      	ldrh	r3, [r7, #14]
 8009cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bc80      	pop	{r7}
 8009ce2:	4770      	bx	lr

08009ce4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	7b1b      	ldrb	r3, [r3, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f040 809d 	bne.w	8009e32 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	785b      	ldrb	r3, [r3, #1]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d04c      	beq.n	8009d9a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	881b      	ldrh	r3, [r3, #0]
 8009d0c:	823b      	strh	r3, [r7, #16]
 8009d0e:	8a3b      	ldrh	r3, [r7, #16]
 8009d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d01b      	beq.n	8009d50 <USB_EPClearStall+0x6c>
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d2e:	81fb      	strh	r3, [r7, #14]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	441a      	add	r2, r3
 8009d3a:	89fb      	ldrh	r3, [r7, #14]
 8009d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	78db      	ldrb	r3, [r3, #3]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d06c      	beq.n	8009e32 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d6e:	81bb      	strh	r3, [r7, #12]
 8009d70:	89bb      	ldrh	r3, [r7, #12]
 8009d72:	f083 0320 	eor.w	r3, r3, #32
 8009d76:	81bb      	strh	r3, [r7, #12]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	441a      	add	r2, r3
 8009d82:	89bb      	ldrh	r3, [r7, #12]
 8009d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	8013      	strh	r3, [r2, #0]
 8009d98:	e04b      	b.n	8009e32 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	82fb      	strh	r3, [r7, #22]
 8009da8:	8afb      	ldrh	r3, [r7, #22]
 8009daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d01b      	beq.n	8009dea <USB_EPClearStall+0x106>
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc8:	82bb      	strh	r3, [r7, #20]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	441a      	add	r2, r3
 8009dd4:	8abb      	ldrh	r3, [r7, #20]
 8009dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e00:	827b      	strh	r3, [r7, #18]
 8009e02:	8a7b      	ldrh	r3, [r7, #18]
 8009e04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e08:	827b      	strh	r3, [r7, #18]
 8009e0a:	8a7b      	ldrh	r3, [r7, #18]
 8009e0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e10:	827b      	strh	r3, [r7, #18]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	441a      	add	r2, r3
 8009e1c:	8a7b      	ldrh	r3, [r7, #18]
 8009e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	371c      	adds	r7, #28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bc80      	pop	{r7}
 8009e3c:	4770      	bx	lr

08009e3e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b083      	sub	sp, #12
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	460b      	mov	r3, r1
 8009e48:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d103      	bne.n	8009e58 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2280      	movs	r2, #128	; 0x80
 8009e54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bc80      	pop	{r7}
 8009e62:	4770      	bx	lr

08009e64 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bc80      	pop	{r7}
 8009e76:	4770      	bx	lr

08009e78 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bc80      	pop	{r7}
 8009e8a:	4770      	bx	lr

08009e8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bc80      	pop	{r7}
 8009ea8:	4770      	bx	lr

08009eaa <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b083      	sub	sp, #12
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bc80      	pop	{r7}
 8009ebe:	4770      	bx	lr

08009ec0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b08d      	sub	sp, #52	; 0x34
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	4611      	mov	r1, r2
 8009ecc:	461a      	mov	r2, r3
 8009ece:	460b      	mov	r3, r1
 8009ed0:	80fb      	strh	r3, [r7, #6]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009ed6:	88bb      	ldrh	r3, [r7, #4]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	085b      	lsrs	r3, r3, #1
 8009edc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	005a      	lsls	r2, r3, #1
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	4413      	add	r3, r2
 8009eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ef8:	e01e      	b.n	8009f38 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	3301      	adds	r3, #1
 8009f04:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	461a      	mov	r2, r3
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	3302      	adds	r3, #2
 8009f24:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	3302      	adds	r3, #2
 8009f2a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	3301      	adds	r3, #1
 8009f30:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f34:	3b01      	subs	r3, #1
 8009f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1dd      	bne.n	8009efa <USB_WritePMA+0x3a>
  }
}
 8009f3e:	bf00      	nop
 8009f40:	bf00      	nop
 8009f42:	3734      	adds	r7, #52	; 0x34
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bc80      	pop	{r7}
 8009f48:	4770      	bx	lr

08009f4a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b08b      	sub	sp, #44	; 0x2c
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	60f8      	str	r0, [r7, #12]
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	4611      	mov	r1, r2
 8009f56:	461a      	mov	r2, r3
 8009f58:	460b      	mov	r3, r1
 8009f5a:	80fb      	strh	r3, [r7, #6]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009f60:	88bb      	ldrh	r3, [r7, #4]
 8009f62:	085b      	lsrs	r3, r3, #1
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009f70:	88fb      	ldrh	r3, [r7, #6]
 8009f72:	005a      	lsls	r2, r3, #1
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f7c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24
 8009f82:	e01b      	b.n	8009fbc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	3302      	adds	r3, #2
 8009f90:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	0a1b      	lsrs	r3, r3, #8
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	3301      	adds	r3, #1
 8009fae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	3302      	adds	r3, #2
 8009fb4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	627b      	str	r3, [r7, #36]	; 0x24
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1e0      	bne.n	8009f84 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009fc2:	88bb      	ldrh	r3, [r7, #4]
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d007      	beq.n	8009fde <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	701a      	strb	r2, [r3, #0]
  }
}
 8009fde:	bf00      	nop
 8009fe0:	372c      	adds	r7, #44	; 0x2c
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bc80      	pop	{r7}
 8009fe6:	4770      	bx	lr

08009fe8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	7c1b      	ldrb	r3, [r3, #16]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d115      	bne.n	800a02c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a000:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a004:	2202      	movs	r2, #2
 800a006:	2181      	movs	r1, #129	; 0x81
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 fe8c 	bl	800bd26 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a014:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a018:	2202      	movs	r2, #2
 800a01a:	2101      	movs	r1, #1
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f001 fe82 	bl	800bd26 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a02a:	e012      	b.n	800a052 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a02c:	2340      	movs	r3, #64	; 0x40
 800a02e:	2202      	movs	r2, #2
 800a030:	2181      	movs	r1, #129	; 0x81
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 fe77 	bl	800bd26 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a03e:	2340      	movs	r3, #64	; 0x40
 800a040:	2202      	movs	r2, #2
 800a042:	2101      	movs	r1, #1
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f001 fe6e 	bl	800bd26 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a052:	2308      	movs	r3, #8
 800a054:	2203      	movs	r2, #3
 800a056:	2182      	movs	r1, #130	; 0x82
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 fe64 	bl	800bd26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a064:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a068:	f001 ff84 	bl	800bf74 <USBD_static_malloc>
 800a06c:	4602      	mov	r2, r0
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d102      	bne.n	800a084 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a07e:	2301      	movs	r3, #1
 800a080:	73fb      	strb	r3, [r7, #15]
 800a082:	e026      	b.n	800a0d2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2200      	movs	r2, #0
 800a09a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	7c1b      	ldrb	r3, [r3, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d109      	bne.n	800a0c2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f001 ff24 	bl	800bf08 <USBD_LL_PrepareReceive>
 800a0c0:	e007      	b.n	800a0d2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0c8:	2340      	movs	r3, #64	; 0x40
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 ff1b 	bl	800bf08 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a0ec:	2181      	movs	r1, #129	; 0x81
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f001 fe3f 	bl	800bd72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 fe38 	bl	800bd72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a10a:	2182      	movs	r1, #130	; 0x82
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fe30 	bl	800bd72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00e      	beq.n	800a140 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a132:	4618      	mov	r0, r3
 800a134:	f001 ff2a 	bl	800bf8c <USBD_static_free>
    pdev->pClassData = NULL;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b086      	sub	sp, #24
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a15a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a160:	2300      	movs	r3, #0
 800a162:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a170:	2b00      	cmp	r3, #0
 800a172:	d039      	beq.n	800a1e8 <USBD_CDC_Setup+0x9e>
 800a174:	2b20      	cmp	r3, #32
 800a176:	d17f      	bne.n	800a278 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	88db      	ldrh	r3, [r3, #6]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d029      	beq.n	800a1d4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	b25b      	sxtb	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	da11      	bge.n	800a1ae <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a196:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	88d2      	ldrh	r2, [r2, #6]
 800a19c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a19e:	6939      	ldr	r1, [r7, #16]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	88db      	ldrh	r3, [r3, #6]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f001 fa09 	bl	800b5be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a1ac:	e06b      	b.n	800a286 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	785a      	ldrb	r2, [r3, #1]
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	88db      	ldrh	r3, [r3, #6]
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a1c4:	6939      	ldr	r1, [r7, #16]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	88db      	ldrh	r3, [r3, #6]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f001 fa24 	bl	800b61a <USBD_CtlPrepareRx>
      break;
 800a1d2:	e058      	b.n	800a286 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	7850      	ldrb	r0, [r2, #1]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	4798      	blx	r3
      break;
 800a1e6:	e04e      	b.n	800a286 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	785b      	ldrb	r3, [r3, #1]
 800a1ec:	2b0b      	cmp	r3, #11
 800a1ee:	d02e      	beq.n	800a24e <USBD_CDC_Setup+0x104>
 800a1f0:	2b0b      	cmp	r3, #11
 800a1f2:	dc38      	bgt.n	800a266 <USBD_CDC_Setup+0x11c>
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <USBD_CDC_Setup+0xb4>
 800a1f8:	2b0a      	cmp	r3, #10
 800a1fa:	d014      	beq.n	800a226 <USBD_CDC_Setup+0xdc>
 800a1fc:	e033      	b.n	800a266 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a204:	2b03      	cmp	r3, #3
 800a206:	d107      	bne.n	800a218 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a208:	f107 030c 	add.w	r3, r7, #12
 800a20c:	2202      	movs	r2, #2
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f001 f9d4 	bl	800b5be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a216:	e02e      	b.n	800a276 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f001 f965 	bl	800b4ea <USBD_CtlError>
            ret = USBD_FAIL;
 800a220:	2302      	movs	r3, #2
 800a222:	75fb      	strb	r3, [r7, #23]
          break;
 800a224:	e027      	b.n	800a276 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d107      	bne.n	800a240 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a230:	f107 030f 	add.w	r3, r7, #15
 800a234:	2201      	movs	r2, #1
 800a236:	4619      	mov	r1, r3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f001 f9c0 	bl	800b5be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a23e:	e01a      	b.n	800a276 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f001 f951 	bl	800b4ea <USBD_CtlError>
            ret = USBD_FAIL;
 800a248:	2302      	movs	r3, #2
 800a24a:	75fb      	strb	r3, [r7, #23]
          break;
 800a24c:	e013      	b.n	800a276 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a254:	2b03      	cmp	r3, #3
 800a256:	d00d      	beq.n	800a274 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f001 f945 	bl	800b4ea <USBD_CtlError>
            ret = USBD_FAIL;
 800a260:	2302      	movs	r3, #2
 800a262:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a264:	e006      	b.n	800a274 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f001 f93e 	bl	800b4ea <USBD_CtlError>
          ret = USBD_FAIL;
 800a26e:	2302      	movs	r3, #2
 800a270:	75fb      	strb	r3, [r7, #23]
          break;
 800a272:	e000      	b.n	800a276 <USBD_CDC_Setup+0x12c>
          break;
 800a274:	bf00      	nop
      }
      break;
 800a276:	e006      	b.n	800a286 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f001 f935 	bl	800b4ea <USBD_CtlError>
      ret = USBD_FAIL;
 800a280:	2302      	movs	r3, #2
 800a282:	75fb      	strb	r3, [r7, #23]
      break;
 800a284:	bf00      	nop
  }

  return ret;
 800a286:	7dfb      	ldrb	r3, [r7, #23]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2aa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d03a      	beq.n	800a32c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a2b6:	78fa      	ldrb	r2, [r7, #3]
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	440b      	add	r3, r1
 800a2c4:	331c      	adds	r3, #28
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d029      	beq.n	800a320 <USBD_CDC_DataIn+0x90>
 800a2cc:	78fa      	ldrb	r2, [r7, #3]
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	440b      	add	r3, r1
 800a2da:	331c      	adds	r3, #28
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	78f9      	ldrb	r1, [r7, #3]
 800a2e0:	68b8      	ldr	r0, [r7, #8]
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	440b      	add	r3, r1
 800a2e8:	00db      	lsls	r3, r3, #3
 800a2ea:	4403      	add	r3, r0
 800a2ec:	3338      	adds	r3, #56	; 0x38
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a2f4:	fb01 f303 	mul.w	r3, r1, r3
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d110      	bne.n	800a320 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a2fe:	78fa      	ldrb	r2, [r7, #3]
 800a300:	6879      	ldr	r1, [r7, #4]
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	440b      	add	r3, r1
 800a30c:	331c      	adds	r3, #28
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a312:	78f9      	ldrb	r1, [r7, #3]
 800a314:	2300      	movs	r3, #0
 800a316:	2200      	movs	r2, #0
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 fdd2 	bl	800bec2 <USBD_LL_Transmit>
 800a31e:	e003      	b.n	800a328 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	e000      	b.n	800a32e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a32c:	2302      	movs	r3, #2
  }
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	460b      	mov	r3, r1
 800a340:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a348:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a34a:	78fb      	ldrb	r3, [r7, #3]
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f001 fdfd 	bl	800bf4e <USBD_LL_GetRxDataSize>
 800a354:	4602      	mov	r2, r0
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00d      	beq.n	800a382 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a37a:	4611      	mov	r1, r2
 800a37c:	4798      	blx	r3

    return USBD_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	e000      	b.n	800a384 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a382:	2302      	movs	r3, #2
  }
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a39a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d015      	beq.n	800a3d2 <USBD_CDC_EP0_RxReady+0x46>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a3ac:	2bff      	cmp	r3, #255	; 0xff
 800a3ae:	d010      	beq.n	800a3d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a3be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a3c6:	b292      	uxth	r2, r2
 800a3c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	22ff      	movs	r2, #255	; 0xff
 800a3ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2243      	movs	r2, #67	; 0x43
 800a3e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a3ea:	4b03      	ldr	r3, [pc, #12]	; (800a3f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bc80      	pop	{r7}
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	200000bc 	.word	0x200000bc

0800a3fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2243      	movs	r2, #67	; 0x43
 800a408:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a40a:	4b03      	ldr	r3, [pc, #12]	; (800a418 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	bc80      	pop	{r7}
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	20000078 	.word	0x20000078

0800a41c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2243      	movs	r2, #67	; 0x43
 800a428:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a42a:	4b03      	ldr	r3, [pc, #12]	; (800a438 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	bc80      	pop	{r7}
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20000100 	.word	0x20000100

0800a43c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	220a      	movs	r2, #10
 800a448:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a44a:	4b03      	ldr	r3, [pc, #12]	; (800a458 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	bc80      	pop	{r7}
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	20000034 	.word	0x20000034

0800a45c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a466:	2302      	movs	r3, #2
 800a468:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d005      	beq.n	800a47c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	bc80      	pop	{r7}
 800a486:	4770      	bx	lr

0800a488 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a49c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a4a6:	88fa      	ldrh	r2, [r7, #6]
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	371c      	adds	r7, #28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bc80      	pop	{r7}
 800a4b8:	4770      	bx	lr

0800a4ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b085      	sub	sp, #20
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bc80      	pop	{r7}
 800a4de:	4770      	bx	lr

0800a4e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d01c      	beq.n	800a534 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a500:	2b00      	cmp	r3, #0
 800a502:	d115      	bne.n	800a530 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2201      	movs	r2, #1
 800a508:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a522:	b29b      	uxth	r3, r3
 800a524:	2181      	movs	r1, #129	; 0x81
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f001 fccb 	bl	800bec2 <USBD_LL_Transmit>

      return USBD_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	e002      	b.n	800a536 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a530:	2301      	movs	r3, #1
 800a532:	e000      	b.n	800a536 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a534:	2302      	movs	r3, #2
  }
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a554:	2b00      	cmp	r3, #0
 800a556:	d017      	beq.n	800a588 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	7c1b      	ldrb	r3, [r3, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d109      	bne.n	800a574 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a56a:	2101      	movs	r1, #1
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f001 fccb 	bl	800bf08 <USBD_LL_PrepareReceive>
 800a572:	e007      	b.n	800a584 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a57a:	2340      	movs	r3, #64	; 0x40
 800a57c:	2101      	movs	r1, #1
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f001 fcc2 	bl	800bf08 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	e000      	b.n	800a58a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a588:	2302      	movs	r3, #2
  }
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	60b9      	str	r1, [r7, #8]
 800a59c:	4613      	mov	r3, r2
 800a59e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e01a      	b.n	800a5e0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d003      	beq.n	800a5bc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d003      	beq.n	800a5ca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	79fa      	ldrb	r2, [r7, #7]
 800a5d6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f001 fb2f 	bl	800bc3c <USBD_LL_Init>

  return USBD_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d006      	beq.n	800a60a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a604:	2300      	movs	r3, #0
 800a606:	73fb      	strb	r3, [r7, #15]
 800a608:	e001      	b.n	800a60e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a60a:	2302      	movs	r3, #2
 800a60c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	bc80      	pop	{r7}
 800a618:	4770      	bx	lr

0800a61a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fb64 	bl	800bcf0 <USBD_LL_Start>

  return USBD_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	bc80      	pop	{r7}
 800a644:	4770      	bx	lr

0800a646 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	460b      	mov	r3, r1
 800a650:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a652:	2302      	movs	r3, #2
 800a654:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00c      	beq.n	800a67a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	78fa      	ldrb	r2, [r7, #3]
 800a66a:	4611      	mov	r1, r2
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	4798      	blx	r3
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	460b      	mov	r3, r1
 800a68e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	78fa      	ldrb	r2, [r7, #3]
 800a69a:	4611      	mov	r1, r2
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	4798      	blx	r3

  return USBD_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b082      	sub	sp, #8
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 fed8 	bl	800b472 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a6de:	f003 031f 	and.w	r3, r3, #31
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d016      	beq.n	800a714 <USBD_LL_SetupStage+0x6a>
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d81c      	bhi.n	800a724 <USBD_LL_SetupStage+0x7a>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <USBD_LL_SetupStage+0x4a>
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d008      	beq.n	800a704 <USBD_LL_SetupStage+0x5a>
 800a6f2:	e017      	b.n	800a724 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f9cb 	bl	800aa98 <USBD_StdDevReq>
      break;
 800a702:	e01a      	b.n	800a73a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a70a:	4619      	mov	r1, r3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fa2d 	bl	800ab6c <USBD_StdItfReq>
      break;
 800a712:	e012      	b.n	800a73a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 fa6d 	bl	800abfc <USBD_StdEPReq>
      break;
 800a722:	e00a      	b.n	800a73a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a72a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f001 fb3c 	bl	800bdb0 <USBD_LL_StallEP>
      break;
 800a738:	bf00      	nop
  }

  return USBD_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	460b      	mov	r3, r1
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a752:	7afb      	ldrb	r3, [r7, #11]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d14b      	bne.n	800a7f0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a75e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a766:	2b03      	cmp	r3, #3
 800a768:	d134      	bne.n	800a7d4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	68da      	ldr	r2, [r3, #12]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	429a      	cmp	r2, r3
 800a774:	d919      	bls.n	800a7aa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	68da      	ldr	r2, [r3, #12]
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	1ad2      	subs	r2, r2, r3
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	68da      	ldr	r2, [r3, #12]
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d203      	bcs.n	800a798 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a794:	b29b      	uxth	r3, r3
 800a796:	e002      	b.n	800a79e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	461a      	mov	r2, r3
 800a7a0:	6879      	ldr	r1, [r7, #4]
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 ff57 	bl	800b656 <USBD_CtlContinueRx>
 800a7a8:	e038      	b.n	800a81c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00a      	beq.n	800a7cc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d105      	bne.n	800a7cc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f000 ff54 	bl	800b67a <USBD_CtlSendStatus>
 800a7d2:	e023      	b.n	800a81c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7da:	2b05      	cmp	r3, #5
 800a7dc:	d11e      	bne.n	800a81c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f001 fae1 	bl	800bdb0 <USBD_LL_StallEP>
 800a7ee:	e015      	b.n	800a81c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00d      	beq.n	800a818 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a802:	2b03      	cmp	r3, #3
 800a804:	d108      	bne.n	800a818 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	7afa      	ldrb	r2, [r7, #11]
 800a810:	4611      	mov	r1, r2
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	4798      	blx	r3
 800a816:	e001      	b.n	800a81c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a818:	2302      	movs	r3, #2
 800a81a:	e000      	b.n	800a81e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	460b      	mov	r3, r1
 800a830:	607a      	str	r2, [r7, #4]
 800a832:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d17f      	bne.n	800a93a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3314      	adds	r3, #20
 800a83e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a846:	2b02      	cmp	r3, #2
 800a848:	d15c      	bne.n	800a904 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	68da      	ldr	r2, [r3, #12]
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	429a      	cmp	r2, r3
 800a854:	d915      	bls.n	800a882 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	68da      	ldr	r2, [r3, #12]
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	1ad2      	subs	r2, r2, r3
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	461a      	mov	r2, r3
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 fec1 	bl	800b5f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a874:	2300      	movs	r3, #0
 800a876:	2200      	movs	r2, #0
 800a878:	2100      	movs	r1, #0
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f001 fb44 	bl	800bf08 <USBD_LL_PrepareReceive>
 800a880:	e04e      	b.n	800a920 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	6912      	ldr	r2, [r2, #16]
 800a88a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a88e:	fb01 f202 	mul.w	r2, r1, r2
 800a892:	1a9b      	subs	r3, r3, r2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d11c      	bne.n	800a8d2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d316      	bcc.n	800a8d2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d20f      	bcs.n	800a8d2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 fe9d 	bl	800b5f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f001 fb1c 	bl	800bf08 <USBD_LL_PrepareReceive>
 800a8d0:	e026      	b.n	800a920 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00a      	beq.n	800a8f4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d105      	bne.n	800a8f4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a8f4:	2180      	movs	r1, #128	; 0x80
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f001 fa5a 	bl	800bdb0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f000 fecf 	bl	800b6a0 <USBD_CtlReceiveStatus>
 800a902:	e00d      	b.n	800a920 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a90a:	2b04      	cmp	r3, #4
 800a90c:	d004      	beq.n	800a918 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a914:	2b00      	cmp	r3, #0
 800a916:	d103      	bne.n	800a920 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a918:	2180      	movs	r1, #128	; 0x80
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f001 fa48 	bl	800bdb0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a926:	2b01      	cmp	r3, #1
 800a928:	d11d      	bne.n	800a966 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7ff fe81 	bl	800a632 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a938:	e015      	b.n	800a966 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00d      	beq.n	800a962 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a94c:	2b03      	cmp	r3, #3
 800a94e:	d108      	bne.n	800a962 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	7afa      	ldrb	r2, [r7, #11]
 800a95a:	4611      	mov	r1, r2
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	4798      	blx	r3
 800a960:	e001      	b.n	800a966 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a962:	2302      	movs	r3, #2
 800a964:	e000      	b.n	800a968 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a978:	2340      	movs	r3, #64	; 0x40
 800a97a:	2200      	movs	r2, #0
 800a97c:	2100      	movs	r1, #0
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f001 f9d1 	bl	800bd26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2240      	movs	r2, #64	; 0x40
 800a990:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a994:	2340      	movs	r3, #64	; 0x40
 800a996:	2200      	movs	r2, #0
 800a998:	2180      	movs	r1, #128	; 0x80
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f001 f9c3 	bl	800bd26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2240      	movs	r2, #64	; 0x40
 800a9aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d009      	beq.n	800a9e8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	6852      	ldr	r2, [r2, #4]
 800a9e0:	b2d2      	uxtb	r2, r2
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	4798      	blx	r3
  }

  return USBD_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	78fa      	ldrb	r2, [r7, #3]
 800aa02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bc80      	pop	{r7}
 800aa0e:	4770      	bx	lr

0800aa10 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2204      	movs	r2, #4
 800aa28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bc80      	pop	{r7}
 800aa36:	4770      	bx	lr

0800aa38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa46:	2b04      	cmp	r3, #4
 800aa48:	d105      	bne.n	800aa56 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bc80      	pop	{r7}
 800aa60:	4770      	bx	lr

0800aa62 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa70:	2b03      	cmp	r3, #3
 800aa72:	d10b      	bne.n	800aa8c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d005      	beq.n	800aa8c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa86:	69db      	ldr	r3, [r3, #28]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aaae:	2b40      	cmp	r3, #64	; 0x40
 800aab0:	d005      	beq.n	800aabe <USBD_StdDevReq+0x26>
 800aab2:	2b40      	cmp	r3, #64	; 0x40
 800aab4:	d84f      	bhi.n	800ab56 <USBD_StdDevReq+0xbe>
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d009      	beq.n	800aace <USBD_StdDevReq+0x36>
 800aaba:	2b20      	cmp	r3, #32
 800aabc:	d14b      	bne.n	800ab56 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	6839      	ldr	r1, [r7, #0]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	4798      	blx	r3
      break;
 800aacc:	e048      	b.n	800ab60 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	785b      	ldrb	r3, [r3, #1]
 800aad2:	2b09      	cmp	r3, #9
 800aad4:	d839      	bhi.n	800ab4a <USBD_StdDevReq+0xb2>
 800aad6:	a201      	add	r2, pc, #4	; (adr r2, 800aadc <USBD_StdDevReq+0x44>)
 800aad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aadc:	0800ab2d 	.word	0x0800ab2d
 800aae0:	0800ab41 	.word	0x0800ab41
 800aae4:	0800ab4b 	.word	0x0800ab4b
 800aae8:	0800ab37 	.word	0x0800ab37
 800aaec:	0800ab4b 	.word	0x0800ab4b
 800aaf0:	0800ab0f 	.word	0x0800ab0f
 800aaf4:	0800ab05 	.word	0x0800ab05
 800aaf8:	0800ab4b 	.word	0x0800ab4b
 800aafc:	0800ab23 	.word	0x0800ab23
 800ab00:	0800ab19 	.word	0x0800ab19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f9dc 	bl	800aec4 <USBD_GetDescriptor>
          break;
 800ab0c:	e022      	b.n	800ab54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fb3f 	bl	800b194 <USBD_SetAddress>
          break;
 800ab16:	e01d      	b.n	800ab54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fb7e 	bl	800b21c <USBD_SetConfig>
          break;
 800ab20:	e018      	b.n	800ab54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fc07 	bl	800b338 <USBD_GetConfig>
          break;
 800ab2a:	e013      	b.n	800ab54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fc37 	bl	800b3a2 <USBD_GetStatus>
          break;
 800ab34:	e00e      	b.n	800ab54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fc65 	bl	800b408 <USBD_SetFeature>
          break;
 800ab3e:	e009      	b.n	800ab54 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fc74 	bl	800b430 <USBD_ClrFeature>
          break;
 800ab48:	e004      	b.n	800ab54 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fccc 	bl	800b4ea <USBD_CtlError>
          break;
 800ab52:	bf00      	nop
      }
      break;
 800ab54:	e004      	b.n	800ab60 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ab56:	6839      	ldr	r1, [r7, #0]
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fcc6 	bl	800b4ea <USBD_CtlError>
      break;
 800ab5e:	bf00      	nop
  }

  return ret;
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop

0800ab6c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab82:	2b40      	cmp	r3, #64	; 0x40
 800ab84:	d005      	beq.n	800ab92 <USBD_StdItfReq+0x26>
 800ab86:	2b40      	cmp	r3, #64	; 0x40
 800ab88:	d82e      	bhi.n	800abe8 <USBD_StdItfReq+0x7c>
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <USBD_StdItfReq+0x26>
 800ab8e:	2b20      	cmp	r3, #32
 800ab90:	d12a      	bne.n	800abe8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d81d      	bhi.n	800abda <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	889b      	ldrh	r3, [r3, #4]
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d813      	bhi.n	800abd0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	4798      	blx	r3
 800abb6:	4603      	mov	r3, r0
 800abb8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	88db      	ldrh	r3, [r3, #6]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d110      	bne.n	800abe4 <USBD_StdItfReq+0x78>
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10d      	bne.n	800abe4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fd56 	bl	800b67a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abce:	e009      	b.n	800abe4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fc89 	bl	800b4ea <USBD_CtlError>
          break;
 800abd8:	e004      	b.n	800abe4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fc84 	bl	800b4ea <USBD_CtlError>
          break;
 800abe2:	e000      	b.n	800abe6 <USBD_StdItfReq+0x7a>
          break;
 800abe4:	bf00      	nop
      }
      break;
 800abe6:	e004      	b.n	800abf2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fc7d 	bl	800b4ea <USBD_CtlError>
      break;
 800abf0:	bf00      	nop
  }

  return USBD_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	889b      	ldrh	r3, [r3, #4]
 800ac0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac18:	2b40      	cmp	r3, #64	; 0x40
 800ac1a:	d007      	beq.n	800ac2c <USBD_StdEPReq+0x30>
 800ac1c:	2b40      	cmp	r3, #64	; 0x40
 800ac1e:	f200 8146 	bhi.w	800aeae <USBD_StdEPReq+0x2b2>
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00a      	beq.n	800ac3c <USBD_StdEPReq+0x40>
 800ac26:	2b20      	cmp	r3, #32
 800ac28:	f040 8141 	bne.w	800aeae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
      break;
 800ac3a:	e13d      	b.n	800aeb8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac44:	2b20      	cmp	r3, #32
 800ac46:	d10a      	bne.n	800ac5e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	4798      	blx	r3
 800ac56:	4603      	mov	r3, r0
 800ac58:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	e12d      	b.n	800aeba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	785b      	ldrb	r3, [r3, #1]
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d007      	beq.n	800ac76 <USBD_StdEPReq+0x7a>
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	f300 811b 	bgt.w	800aea2 <USBD_StdEPReq+0x2a6>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d072      	beq.n	800ad56 <USBD_StdEPReq+0x15a>
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d03a      	beq.n	800acea <USBD_StdEPReq+0xee>
 800ac74:	e115      	b.n	800aea2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d002      	beq.n	800ac86 <USBD_StdEPReq+0x8a>
 800ac80:	2b03      	cmp	r3, #3
 800ac82:	d015      	beq.n	800acb0 <USBD_StdEPReq+0xb4>
 800ac84:	e02b      	b.n	800acde <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac86:	7bbb      	ldrb	r3, [r7, #14]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00c      	beq.n	800aca6 <USBD_StdEPReq+0xaa>
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
 800ac8e:	2b80      	cmp	r3, #128	; 0x80
 800ac90:	d009      	beq.n	800aca6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f001 f88a 	bl	800bdb0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ac9c:	2180      	movs	r1, #128	; 0x80
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 f886 	bl	800bdb0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aca4:	e020      	b.n	800ace8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fc1e 	bl	800b4ea <USBD_CtlError>
              break;
 800acae:	e01b      	b.n	800ace8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	885b      	ldrh	r3, [r3, #2]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10e      	bne.n	800acd6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800acb8:	7bbb      	ldrb	r3, [r7, #14]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00b      	beq.n	800acd6 <USBD_StdEPReq+0xda>
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	2b80      	cmp	r3, #128	; 0x80
 800acc2:	d008      	beq.n	800acd6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	88db      	ldrh	r3, [r3, #6]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d104      	bne.n	800acd6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800accc:	7bbb      	ldrb	r3, [r7, #14]
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f001 f86d 	bl	800bdb0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fccf 	bl	800b67a <USBD_CtlSendStatus>

              break;
 800acdc:	e004      	b.n	800ace8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fc02 	bl	800b4ea <USBD_CtlError>
              break;
 800ace6:	bf00      	nop
          }
          break;
 800ace8:	e0e0      	b.n	800aeac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d002      	beq.n	800acfa <USBD_StdEPReq+0xfe>
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d015      	beq.n	800ad24 <USBD_StdEPReq+0x128>
 800acf8:	e026      	b.n	800ad48 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acfa:	7bbb      	ldrb	r3, [r7, #14]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00c      	beq.n	800ad1a <USBD_StdEPReq+0x11e>
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	2b80      	cmp	r3, #128	; 0x80
 800ad04:	d009      	beq.n	800ad1a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ad06:	7bbb      	ldrb	r3, [r7, #14]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f001 f850 	bl	800bdb0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ad10:	2180      	movs	r1, #128	; 0x80
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f001 f84c 	bl	800bdb0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad18:	e01c      	b.n	800ad54 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fbe4 	bl	800b4ea <USBD_CtlError>
              break;
 800ad22:	e017      	b.n	800ad54 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	885b      	ldrh	r3, [r3, #2]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d112      	bne.n	800ad52 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d004      	beq.n	800ad40 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad36:	7bbb      	ldrb	r3, [r7, #14]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f001 f857 	bl	800bdee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fc9a 	bl	800b67a <USBD_CtlSendStatus>
              }
              break;
 800ad46:	e004      	b.n	800ad52 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fbcd 	bl	800b4ea <USBD_CtlError>
              break;
 800ad50:	e000      	b.n	800ad54 <USBD_StdEPReq+0x158>
              break;
 800ad52:	bf00      	nop
          }
          break;
 800ad54:	e0aa      	b.n	800aeac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d002      	beq.n	800ad66 <USBD_StdEPReq+0x16a>
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d032      	beq.n	800adca <USBD_StdEPReq+0x1ce>
 800ad64:	e097      	b.n	800ae96 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad66:	7bbb      	ldrb	r3, [r7, #14]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d007      	beq.n	800ad7c <USBD_StdEPReq+0x180>
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	2b80      	cmp	r3, #128	; 0x80
 800ad70:	d004      	beq.n	800ad7c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fbb8 	bl	800b4ea <USBD_CtlError>
                break;
 800ad7a:	e091      	b.n	800aea0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da0b      	bge.n	800ad9c <USBD_StdEPReq+0x1a0>
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	3310      	adds	r3, #16
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	4413      	add	r3, r2
 800ad98:	3304      	adds	r3, #4
 800ad9a:	e00b      	b.n	800adb4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad9c:	7bbb      	ldrb	r3, [r7, #14]
 800ad9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ada2:	4613      	mov	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	4413      	add	r3, r2
 800adb2:	3304      	adds	r3, #4
 800adb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2202      	movs	r2, #2
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fbfb 	bl	800b5be <USBD_CtlSendData>
              break;
 800adc8:	e06a      	b.n	800aea0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800adca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adce:	2b00      	cmp	r3, #0
 800add0:	da11      	bge.n	800adf6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800add2:	7bbb      	ldrb	r3, [r7, #14]
 800add4:	f003 020f 	and.w	r2, r3, #15
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	4613      	mov	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	440b      	add	r3, r1
 800ade4:	3318      	adds	r3, #24
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d117      	bne.n	800ae1c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fb7b 	bl	800b4ea <USBD_CtlError>
                  break;
 800adf4:	e054      	b.n	800aea0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	f003 020f 	and.w	r2, r3, #15
 800adfc:	6879      	ldr	r1, [r7, #4]
 800adfe:	4613      	mov	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	440b      	add	r3, r1
 800ae08:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d104      	bne.n	800ae1c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fb68 	bl	800b4ea <USBD_CtlError>
                  break;
 800ae1a:	e041      	b.n	800aea0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	da0b      	bge.n	800ae3c <USBD_StdEPReq+0x240>
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	3310      	adds	r3, #16
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	4413      	add	r3, r2
 800ae38:	3304      	adds	r3, #4
 800ae3a:	e00b      	b.n	800ae54 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae3c:	7bbb      	ldrb	r3, [r7, #14]
 800ae3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae42:	4613      	mov	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	4413      	add	r3, r2
 800ae52:	3304      	adds	r3, #4
 800ae54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <USBD_StdEPReq+0x266>
 800ae5c:	7bbb      	ldrb	r3, [r7, #14]
 800ae5e:	2b80      	cmp	r3, #128	; 0x80
 800ae60:	d103      	bne.n	800ae6a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	e00e      	b.n	800ae88 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 ffdc 	bl	800be2c <USBD_LL_IsStallEP>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	601a      	str	r2, [r3, #0]
 800ae80:	e002      	b.n	800ae88 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fb95 	bl	800b5be <USBD_CtlSendData>
              break;
 800ae94:	e004      	b.n	800aea0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fb26 	bl	800b4ea <USBD_CtlError>
              break;
 800ae9e:	bf00      	nop
          }
          break;
 800aea0:	e004      	b.n	800aeac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fb20 	bl	800b4ea <USBD_CtlError>
          break;
 800aeaa:	bf00      	nop
      }
      break;
 800aeac:	e004      	b.n	800aeb8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 fb1a 	bl	800b4ea <USBD_CtlError>
      break;
 800aeb6:	bf00      	nop
  }

  return ret;
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
	...

0800aec4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aece:	2300      	movs	r3, #0
 800aed0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aed2:	2300      	movs	r3, #0
 800aed4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aed6:	2300      	movs	r3, #0
 800aed8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	885b      	ldrh	r3, [r3, #2]
 800aede:	0a1b      	lsrs	r3, r3, #8
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	3b01      	subs	r3, #1
 800aee4:	2b06      	cmp	r3, #6
 800aee6:	f200 8128 	bhi.w	800b13a <USBD_GetDescriptor+0x276>
 800aeea:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <USBD_GetDescriptor+0x2c>)
 800aeec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef0:	0800af0d 	.word	0x0800af0d
 800aef4:	0800af25 	.word	0x0800af25
 800aef8:	0800af65 	.word	0x0800af65
 800aefc:	0800b13b 	.word	0x0800b13b
 800af00:	0800b13b 	.word	0x0800b13b
 800af04:	0800b0db 	.word	0x0800b0db
 800af08:	0800b107 	.word	0x0800b107
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	7c12      	ldrb	r2, [r2, #16]
 800af18:	f107 0108 	add.w	r1, r7, #8
 800af1c:	4610      	mov	r0, r2
 800af1e:	4798      	blx	r3
 800af20:	60f8      	str	r0, [r7, #12]
      break;
 800af22:	e112      	b.n	800b14a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	7c1b      	ldrb	r3, [r3, #16]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10d      	bne.n	800af48 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af34:	f107 0208 	add.w	r2, r7, #8
 800af38:	4610      	mov	r0, r2
 800af3a:	4798      	blx	r3
 800af3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3301      	adds	r3, #1
 800af42:	2202      	movs	r2, #2
 800af44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af46:	e100      	b.n	800b14a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	f107 0208 	add.w	r2, r7, #8
 800af54:	4610      	mov	r0, r2
 800af56:	4798      	blx	r3
 800af58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3301      	adds	r3, #1
 800af5e:	2202      	movs	r2, #2
 800af60:	701a      	strb	r2, [r3, #0]
      break;
 800af62:	e0f2      	b.n	800b14a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	885b      	ldrh	r3, [r3, #2]
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b05      	cmp	r3, #5
 800af6c:	f200 80ac 	bhi.w	800b0c8 <USBD_GetDescriptor+0x204>
 800af70:	a201      	add	r2, pc, #4	; (adr r2, 800af78 <USBD_GetDescriptor+0xb4>)
 800af72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af76:	bf00      	nop
 800af78:	0800af91 	.word	0x0800af91
 800af7c:	0800afc5 	.word	0x0800afc5
 800af80:	0800aff9 	.word	0x0800aff9
 800af84:	0800b02d 	.word	0x0800b02d
 800af88:	0800b061 	.word	0x0800b061
 800af8c:	0800b095 	.word	0x0800b095
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00b      	beq.n	800afb4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	7c12      	ldrb	r2, [r2, #16]
 800afa8:	f107 0108 	add.w	r1, r7, #8
 800afac:	4610      	mov	r0, r2
 800afae:	4798      	blx	r3
 800afb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afb2:	e091      	b.n	800b0d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fa97 	bl	800b4ea <USBD_CtlError>
            err++;
 800afbc:	7afb      	ldrb	r3, [r7, #11]
 800afbe:	3301      	adds	r3, #1
 800afc0:	72fb      	strb	r3, [r7, #11]
          break;
 800afc2:	e089      	b.n	800b0d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00b      	beq.n	800afe8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	7c12      	ldrb	r2, [r2, #16]
 800afdc:	f107 0108 	add.w	r1, r7, #8
 800afe0:	4610      	mov	r0, r2
 800afe2:	4798      	blx	r3
 800afe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afe6:	e077      	b.n	800b0d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fa7d 	bl	800b4ea <USBD_CtlError>
            err++;
 800aff0:	7afb      	ldrb	r3, [r7, #11]
 800aff2:	3301      	adds	r3, #1
 800aff4:	72fb      	strb	r3, [r7, #11]
          break;
 800aff6:	e06f      	b.n	800b0d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00b      	beq.n	800b01c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	7c12      	ldrb	r2, [r2, #16]
 800b010:	f107 0108 	add.w	r1, r7, #8
 800b014:	4610      	mov	r0, r2
 800b016:	4798      	blx	r3
 800b018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b01a:	e05d      	b.n	800b0d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fa63 	bl	800b4ea <USBD_CtlError>
            err++;
 800b024:	7afb      	ldrb	r3, [r7, #11]
 800b026:	3301      	adds	r3, #1
 800b028:	72fb      	strb	r3, [r7, #11]
          break;
 800b02a:	e055      	b.n	800b0d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00b      	beq.n	800b050 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	7c12      	ldrb	r2, [r2, #16]
 800b044:	f107 0108 	add.w	r1, r7, #8
 800b048:	4610      	mov	r0, r2
 800b04a:	4798      	blx	r3
 800b04c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b04e:	e043      	b.n	800b0d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fa49 	bl	800b4ea <USBD_CtlError>
            err++;
 800b058:	7afb      	ldrb	r3, [r7, #11]
 800b05a:	3301      	adds	r3, #1
 800b05c:	72fb      	strb	r3, [r7, #11]
          break;
 800b05e:	e03b      	b.n	800b0d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	7c12      	ldrb	r2, [r2, #16]
 800b078:	f107 0108 	add.w	r1, r7, #8
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
 800b080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b082:	e029      	b.n	800b0d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 fa2f 	bl	800b4ea <USBD_CtlError>
            err++;
 800b08c:	7afb      	ldrb	r3, [r7, #11]
 800b08e:	3301      	adds	r3, #1
 800b090:	72fb      	strb	r3, [r7, #11]
          break;
 800b092:	e021      	b.n	800b0d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00b      	beq.n	800b0b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	7c12      	ldrb	r2, [r2, #16]
 800b0ac:	f107 0108 	add.w	r1, r7, #8
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	4798      	blx	r3
 800b0b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0b6:	e00f      	b.n	800b0d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0b8:	6839      	ldr	r1, [r7, #0]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fa15 	bl	800b4ea <USBD_CtlError>
            err++;
 800b0c0:	7afb      	ldrb	r3, [r7, #11]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b0c6:	e007      	b.n	800b0d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fa0d 	bl	800b4ea <USBD_CtlError>
          err++;
 800b0d0:	7afb      	ldrb	r3, [r7, #11]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b0d6:	e038      	b.n	800b14a <USBD_GetDescriptor+0x286>
 800b0d8:	e037      	b.n	800b14a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	7c1b      	ldrb	r3, [r3, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d109      	bne.n	800b0f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ea:	f107 0208 	add.w	r2, r7, #8
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	4798      	blx	r3
 800b0f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0f4:	e029      	b.n	800b14a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f9f6 	bl	800b4ea <USBD_CtlError>
        err++;
 800b0fe:	7afb      	ldrb	r3, [r7, #11]
 800b100:	3301      	adds	r3, #1
 800b102:	72fb      	strb	r3, [r7, #11]
      break;
 800b104:	e021      	b.n	800b14a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	7c1b      	ldrb	r3, [r3, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10d      	bne.n	800b12a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b116:	f107 0208 	add.w	r2, r7, #8
 800b11a:	4610      	mov	r0, r2
 800b11c:	4798      	blx	r3
 800b11e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3301      	adds	r3, #1
 800b124:	2207      	movs	r2, #7
 800b126:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b128:	e00f      	b.n	800b14a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f9dc 	bl	800b4ea <USBD_CtlError>
        err++;
 800b132:	7afb      	ldrb	r3, [r7, #11]
 800b134:	3301      	adds	r3, #1
 800b136:	72fb      	strb	r3, [r7, #11]
      break;
 800b138:	e007      	b.n	800b14a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f9d4 	bl	800b4ea <USBD_CtlError>
      err++;
 800b142:	7afb      	ldrb	r3, [r7, #11]
 800b144:	3301      	adds	r3, #1
 800b146:	72fb      	strb	r3, [r7, #11]
      break;
 800b148:	bf00      	nop
  }

  if (err != 0U)
 800b14a:	7afb      	ldrb	r3, [r7, #11]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d11c      	bne.n	800b18a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b150:	893b      	ldrh	r3, [r7, #8]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d011      	beq.n	800b17a <USBD_GetDescriptor+0x2b6>
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	88db      	ldrh	r3, [r3, #6]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00d      	beq.n	800b17a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	88da      	ldrh	r2, [r3, #6]
 800b162:	893b      	ldrh	r3, [r7, #8]
 800b164:	4293      	cmp	r3, r2
 800b166:	bf28      	it	cs
 800b168:	4613      	movcs	r3, r2
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b16e:	893b      	ldrh	r3, [r7, #8]
 800b170:	461a      	mov	r2, r3
 800b172:	68f9      	ldr	r1, [r7, #12]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fa22 	bl	800b5be <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	88db      	ldrh	r3, [r3, #6]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d104      	bne.n	800b18c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fa79 	bl	800b67a <USBD_CtlSendStatus>
 800b188:	e000      	b.n	800b18c <USBD_GetDescriptor+0x2c8>
    return;
 800b18a:	bf00      	nop
    }
  }
}
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop

0800b194 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	889b      	ldrh	r3, [r3, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d130      	bne.n	800b208 <USBD_SetAddress+0x74>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	88db      	ldrh	r3, [r3, #6]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d12c      	bne.n	800b208 <USBD_SetAddress+0x74>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	885b      	ldrh	r3, [r3, #2]
 800b1b2:	2b7f      	cmp	r3, #127	; 0x7f
 800b1b4:	d828      	bhi.n	800b208 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	885b      	ldrh	r3, [r3, #2]
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	d104      	bne.n	800b1d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f98b 	bl	800b4ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1d4:	e01d      	b.n	800b212 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	7bfa      	ldrb	r2, [r7, #15]
 800b1da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fe4e 	bl	800be84 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fa46 	bl	800b67a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d004      	beq.n	800b1fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1fc:	e009      	b.n	800b212 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b206:	e004      	b.n	800b212 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 f96d 	bl	800b4ea <USBD_CtlError>
  }
}
 800b210:	bf00      	nop
 800b212:	bf00      	nop
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	885b      	ldrh	r3, [r3, #2]
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	4b41      	ldr	r3, [pc, #260]	; (800b334 <USBD_SetConfig+0x118>)
 800b22e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b230:	4b40      	ldr	r3, [pc, #256]	; (800b334 <USBD_SetConfig+0x118>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d904      	bls.n	800b242 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f955 	bl	800b4ea <USBD_CtlError>
 800b240:	e075      	b.n	800b32e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d002      	beq.n	800b252 <USBD_SetConfig+0x36>
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d023      	beq.n	800b298 <USBD_SetConfig+0x7c>
 800b250:	e062      	b.n	800b318 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b252:	4b38      	ldr	r3, [pc, #224]	; (800b334 <USBD_SetConfig+0x118>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d01a      	beq.n	800b290 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b25a:	4b36      	ldr	r3, [pc, #216]	; (800b334 <USBD_SetConfig+0x118>)
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2203      	movs	r2, #3
 800b268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b26c:	4b31      	ldr	r3, [pc, #196]	; (800b334 <USBD_SetConfig+0x118>)
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7ff f9e7 	bl	800a646 <USBD_SetClassConfig>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d104      	bne.n	800b288 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f932 	bl	800b4ea <USBD_CtlError>
            return;
 800b286:	e052      	b.n	800b32e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f9f6 	bl	800b67a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b28e:	e04e      	b.n	800b32e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f9f2 	bl	800b67a <USBD_CtlSendStatus>
        break;
 800b296:	e04a      	b.n	800b32e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b298:	4b26      	ldr	r3, [pc, #152]	; (800b334 <USBD_SetConfig+0x118>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d112      	bne.n	800b2c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b2a8:	4b22      	ldr	r3, [pc, #136]	; (800b334 <USBD_SetConfig+0x118>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b2b2:	4b20      	ldr	r3, [pc, #128]	; (800b334 <USBD_SetConfig+0x118>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7ff f9e3 	bl	800a684 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f9db 	bl	800b67a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b2c4:	e033      	b.n	800b32e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b2c6:	4b1b      	ldr	r3, [pc, #108]	; (800b334 <USBD_SetConfig+0x118>)
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d01d      	beq.n	800b310 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff f9d1 	bl	800a684 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b2e2:	4b14      	ldr	r3, [pc, #80]	; (800b334 <USBD_SetConfig+0x118>)
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b2ec:	4b11      	ldr	r3, [pc, #68]	; (800b334 <USBD_SetConfig+0x118>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7ff f9a7 	bl	800a646 <USBD_SetClassConfig>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d104      	bne.n	800b308 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f8f2 	bl	800b4ea <USBD_CtlError>
            return;
 800b306:	e012      	b.n	800b32e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f9b6 	bl	800b67a <USBD_CtlSendStatus>
        break;
 800b30e:	e00e      	b.n	800b32e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f9b2 	bl	800b67a <USBD_CtlSendStatus>
        break;
 800b316:	e00a      	b.n	800b32e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f8e5 	bl	800b4ea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b320:	4b04      	ldr	r3, [pc, #16]	; (800b334 <USBD_SetConfig+0x118>)
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7ff f9ac 	bl	800a684 <USBD_ClrClassConfig>
        break;
 800b32c:	bf00      	nop
    }
  }
}
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	200004c8 	.word	0x200004c8

0800b338 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	88db      	ldrh	r3, [r3, #6]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d004      	beq.n	800b354 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f8cc 	bl	800b4ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b352:	e022      	b.n	800b39a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	dc02      	bgt.n	800b364 <USBD_GetConfig+0x2c>
 800b35e:	2b00      	cmp	r3, #0
 800b360:	dc03      	bgt.n	800b36a <USBD_GetConfig+0x32>
 800b362:	e015      	b.n	800b390 <USBD_GetConfig+0x58>
 800b364:	2b03      	cmp	r3, #3
 800b366:	d00b      	beq.n	800b380 <USBD_GetConfig+0x48>
 800b368:	e012      	b.n	800b390 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	3308      	adds	r3, #8
 800b374:	2201      	movs	r2, #1
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 f920 	bl	800b5be <USBD_CtlSendData>
        break;
 800b37e:	e00c      	b.n	800b39a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	3304      	adds	r3, #4
 800b384:	2201      	movs	r2, #1
 800b386:	4619      	mov	r1, r3
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f918 	bl	800b5be <USBD_CtlSendData>
        break;
 800b38e:	e004      	b.n	800b39a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f8a9 	bl	800b4ea <USBD_CtlError>
        break;
 800b398:	bf00      	nop
}
 800b39a:	bf00      	nop
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b082      	sub	sp, #8
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d81e      	bhi.n	800b3f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	88db      	ldrh	r3, [r3, #6]
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d004      	beq.n	800b3ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b3c0:	6839      	ldr	r1, [r7, #0]
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f891 	bl	800b4ea <USBD_CtlError>
        break;
 800b3c8:	e01a      	b.n	800b400 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d005      	beq.n	800b3e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	f043 0202 	orr.w	r2, r3, #2
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	330c      	adds	r3, #12
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f8e5 	bl	800b5be <USBD_CtlSendData>
      break;
 800b3f4:	e004      	b.n	800b400 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f876 	bl	800b4ea <USBD_CtlError>
      break;
 800b3fe:	bf00      	nop
  }
}
 800b400:	bf00      	nop
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	885b      	ldrh	r3, [r3, #2]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d106      	bne.n	800b428 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 f929 	bl	800b67a <USBD_CtlSendStatus>
  }
}
 800b428:	bf00      	nop
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b440:	3b01      	subs	r3, #1
 800b442:	2b02      	cmp	r3, #2
 800b444:	d80b      	bhi.n	800b45e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	885b      	ldrh	r3, [r3, #2]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d10c      	bne.n	800b468 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f90f 	bl	800b67a <USBD_CtlSendStatus>
      }
      break;
 800b45c:	e004      	b.n	800b468 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f842 	bl	800b4ea <USBD_CtlError>
      break;
 800b466:	e000      	b.n	800b46a <USBD_ClrFeature+0x3a>
      break;
 800b468:	bf00      	nop
  }
}
 800b46a:	bf00      	nop
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b472:	b480      	push	{r7}
 800b474:	b083      	sub	sp, #12
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	781a      	ldrb	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	785a      	ldrb	r2, [r3, #1]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	3302      	adds	r3, #2
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	b29a      	uxth	r2, r3
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	3303      	adds	r3, #3
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	021b      	lsls	r3, r3, #8
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	4413      	add	r3, r2
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	3305      	adds	r3, #5
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	021b      	lsls	r3, r3, #8
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	4413      	add	r3, r2
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	3306      	adds	r3, #6
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	3307      	adds	r3, #7
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	021b      	lsls	r3, r3, #8
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	4413      	add	r3, r2
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	80da      	strh	r2, [r3, #6]

}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bc80      	pop	{r7}
 800b4e8:	4770      	bx	lr

0800b4ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b4f4:	2180      	movs	r1, #128	; 0x80
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fc5a 	bl	800bdb0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fc56 	bl	800bdb0 <USBD_LL_StallEP>
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b518:	2300      	movs	r3, #0
 800b51a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d032      	beq.n	800b588 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f000 f834 	bl	800b590 <USBD_GetLen>
 800b528:	4603      	mov	r3, r0
 800b52a:	3301      	adds	r3, #1
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	b29a      	uxth	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b536:	7dfb      	ldrb	r3, [r7, #23]
 800b538:	1c5a      	adds	r2, r3, #1
 800b53a:	75fa      	strb	r2, [r7, #23]
 800b53c:	461a      	mov	r2, r3
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	4413      	add	r3, r2
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	7812      	ldrb	r2, [r2, #0]
 800b546:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b548:	7dfb      	ldrb	r3, [r7, #23]
 800b54a:	1c5a      	adds	r2, r3, #1
 800b54c:	75fa      	strb	r2, [r7, #23]
 800b54e:	461a      	mov	r2, r3
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	4413      	add	r3, r2
 800b554:	2203      	movs	r2, #3
 800b556:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b558:	e012      	b.n	800b580 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	1c5a      	adds	r2, r3, #1
 800b55e:	60fa      	str	r2, [r7, #12]
 800b560:	7dfa      	ldrb	r2, [r7, #23]
 800b562:	1c51      	adds	r1, r2, #1
 800b564:	75f9      	strb	r1, [r7, #23]
 800b566:	4611      	mov	r1, r2
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	440a      	add	r2, r1
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b570:	7dfb      	ldrb	r3, [r7, #23]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	75fa      	strb	r2, [r7, #23]
 800b576:	461a      	mov	r2, r3
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	4413      	add	r3, r2
 800b57c:	2200      	movs	r2, #0
 800b57e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1e8      	bne.n	800b55a <USBD_GetString+0x4e>
    }
  }
}
 800b588:	bf00      	nop
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b59c:	e005      	b.n	800b5aa <USBD_GetLen+0x1a>
  {
    len++;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d1f5      	bne.n	800b59e <USBD_GetLen+0xe>
  }

  return len;
 800b5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bc80      	pop	{r7}
 800b5bc:	4770      	bx	lr

0800b5be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	60f8      	str	r0, [r7, #12]
 800b5c6:	60b9      	str	r1, [r7, #8]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b5d4:	88fa      	ldrh	r2, [r7, #6]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b5da:	88fa      	ldrh	r2, [r7, #6]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5e0:	88fb      	ldrh	r3, [r7, #6]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f000 fc6b 	bl	800bec2 <USBD_LL_Transmit>

  return USBD_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	60b9      	str	r1, [r7, #8]
 800b600:	4613      	mov	r3, r2
 800b602:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b604:	88fb      	ldrh	r3, [r7, #6]
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	2100      	movs	r1, #0
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f000 fc59 	bl	800bec2 <USBD_LL_Transmit>

  return USBD_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	60f8      	str	r0, [r7, #12]
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	4613      	mov	r3, r2
 800b626:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2203      	movs	r2, #3
 800b62c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b630:	88fa      	ldrh	r2, [r7, #6]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b638:	88fa      	ldrh	r2, [r7, #6]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b640:	88fb      	ldrh	r3, [r7, #6]
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	2100      	movs	r1, #0
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 fc5e 	bl	800bf08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b084      	sub	sp, #16
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	60f8      	str	r0, [r7, #12]
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	4613      	mov	r3, r2
 800b662:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b664:	88fb      	ldrh	r3, [r7, #6]
 800b666:	68ba      	ldr	r2, [r7, #8]
 800b668:	2100      	movs	r1, #0
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f000 fc4c 	bl	800bf08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2204      	movs	r2, #4
 800b686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b68a:	2300      	movs	r3, #0
 800b68c:	2200      	movs	r2, #0
 800b68e:	2100      	movs	r1, #0
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fc16 	bl	800bec2 <USBD_LL_Transmit>

  return USBD_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2205      	movs	r2, #5
 800b6ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fc26 	bl	800bf08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
	...

0800b6c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	4912      	ldr	r1, [pc, #72]	; (800b718 <MX_USB_DEVICE_Init+0x50>)
 800b6d0:	4812      	ldr	r0, [pc, #72]	; (800b71c <MX_USB_DEVICE_Init+0x54>)
 800b6d2:	f7fe ff5e 	bl	800a592 <USBD_Init>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b6dc:	f7f7 f8d0 	bl	8002880 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b6e0:	490f      	ldr	r1, [pc, #60]	; (800b720 <MX_USB_DEVICE_Init+0x58>)
 800b6e2:	480e      	ldr	r0, [pc, #56]	; (800b71c <MX_USB_DEVICE_Init+0x54>)
 800b6e4:	f7fe ff80 	bl	800a5e8 <USBD_RegisterClass>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b6ee:	f7f7 f8c7 	bl	8002880 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b6f2:	490c      	ldr	r1, [pc, #48]	; (800b724 <MX_USB_DEVICE_Init+0x5c>)
 800b6f4:	4809      	ldr	r0, [pc, #36]	; (800b71c <MX_USB_DEVICE_Init+0x54>)
 800b6f6:	f7fe feb1 	bl	800a45c <USBD_CDC_RegisterInterface>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b700:	f7f7 f8be 	bl	8002880 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b704:	4805      	ldr	r0, [pc, #20]	; (800b71c <MX_USB_DEVICE_Init+0x54>)
 800b706:	f7fe ff88 	bl	800a61a <USBD_Start>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b710:	f7f7 f8b6 	bl	8002880 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b714:	bf00      	nop
 800b716:	bd80      	pop	{r7, pc}
 800b718:	20000154 	.word	0x20000154
 800b71c:	200004cc 	.word	0x200004cc
 800b720:	20000040 	.word	0x20000040
 800b724:	20000144 	.word	0x20000144

0800b728 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b72c:	2200      	movs	r2, #0
 800b72e:	4905      	ldr	r1, [pc, #20]	; (800b744 <CDC_Init_FS+0x1c>)
 800b730:	4805      	ldr	r0, [pc, #20]	; (800b748 <CDC_Init_FS+0x20>)
 800b732:	f7fe fea9 	bl	800a488 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b736:	4905      	ldr	r1, [pc, #20]	; (800b74c <CDC_Init_FS+0x24>)
 800b738:	4803      	ldr	r0, [pc, #12]	; (800b748 <CDC_Init_FS+0x20>)
 800b73a:	f7fe febe 	bl	800a4ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b73e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b740:	4618      	mov	r0, r3
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20000b78 	.word	0x20000b78
 800b748:	200004cc 	.word	0x200004cc
 800b74c:	20000790 	.word	0x20000790

0800b750 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b750:	b480      	push	{r7}
 800b752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b754:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b756:	4618      	mov	r0, r3
 800b758:	46bd      	mov	sp, r7
 800b75a:	bc80      	pop	{r7}
 800b75c:	4770      	bx	lr
	...

0800b760 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	6039      	str	r1, [r7, #0]
 800b76a:	71fb      	strb	r3, [r7, #7]
 800b76c:	4613      	mov	r3, r2
 800b76e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b770:	79fb      	ldrb	r3, [r7, #7]
 800b772:	2b23      	cmp	r3, #35	; 0x23
 800b774:	d84a      	bhi.n	800b80c <CDC_Control_FS+0xac>
 800b776:	a201      	add	r2, pc, #4	; (adr r2, 800b77c <CDC_Control_FS+0x1c>)
 800b778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77c:	0800b80d 	.word	0x0800b80d
 800b780:	0800b80d 	.word	0x0800b80d
 800b784:	0800b80d 	.word	0x0800b80d
 800b788:	0800b80d 	.word	0x0800b80d
 800b78c:	0800b80d 	.word	0x0800b80d
 800b790:	0800b80d 	.word	0x0800b80d
 800b794:	0800b80d 	.word	0x0800b80d
 800b798:	0800b80d 	.word	0x0800b80d
 800b79c:	0800b80d 	.word	0x0800b80d
 800b7a0:	0800b80d 	.word	0x0800b80d
 800b7a4:	0800b80d 	.word	0x0800b80d
 800b7a8:	0800b80d 	.word	0x0800b80d
 800b7ac:	0800b80d 	.word	0x0800b80d
 800b7b0:	0800b80d 	.word	0x0800b80d
 800b7b4:	0800b80d 	.word	0x0800b80d
 800b7b8:	0800b80d 	.word	0x0800b80d
 800b7bc:	0800b80d 	.word	0x0800b80d
 800b7c0:	0800b80d 	.word	0x0800b80d
 800b7c4:	0800b80d 	.word	0x0800b80d
 800b7c8:	0800b80d 	.word	0x0800b80d
 800b7cc:	0800b80d 	.word	0x0800b80d
 800b7d0:	0800b80d 	.word	0x0800b80d
 800b7d4:	0800b80d 	.word	0x0800b80d
 800b7d8:	0800b80d 	.word	0x0800b80d
 800b7dc:	0800b80d 	.word	0x0800b80d
 800b7e0:	0800b80d 	.word	0x0800b80d
 800b7e4:	0800b80d 	.word	0x0800b80d
 800b7e8:	0800b80d 	.word	0x0800b80d
 800b7ec:	0800b80d 	.word	0x0800b80d
 800b7f0:	0800b80d 	.word	0x0800b80d
 800b7f4:	0800b80d 	.word	0x0800b80d
 800b7f8:	0800b80d 	.word	0x0800b80d
 800b7fc:	0800b80d 	.word	0x0800b80d
 800b800:	0800b80d 	.word	0x0800b80d
 800b804:	0800b80d 	.word	0x0800b80d
 800b808:	0800b80d 	.word	0x0800b80d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b80c:	bf00      	nop
  }

  return (USBD_OK);
 800b80e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b810:	4618      	mov	r0, r3
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	bc80      	pop	{r7}
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop

0800b81c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	4808      	ldr	r0, [pc, #32]	; (800b84c <CDC_Receive_FS+0x30>)
 800b82a:	f7fe fe46 	bl	800a4ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b82e:	4807      	ldr	r0, [pc, #28]	; (800b84c <CDC_Receive_FS+0x30>)
 800b830:	f7fe fe85 	bl	800a53e <USBD_CDC_ReceivePacket>
USB_Packet_Received(&Buf[0], Len[0]);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4619      	mov	r1, r3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7f6 fb2e 	bl	8001e9c <USB_Packet_Received>
  return (USBD_OK);
 800b840:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b842:	4618      	mov	r0, r3
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	200004cc 	.word	0x200004cc

0800b850 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	460b      	mov	r3, r1
 800b85a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b860:	4b0d      	ldr	r3, [pc, #52]	; (800b898 <CDC_Transmit_FS+0x48>)
 800b862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b866:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b872:	2301      	movs	r3, #1
 800b874:	e00b      	b.n	800b88e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b876:	887b      	ldrh	r3, [r7, #2]
 800b878:	461a      	mov	r2, r3
 800b87a:	6879      	ldr	r1, [r7, #4]
 800b87c:	4806      	ldr	r0, [pc, #24]	; (800b898 <CDC_Transmit_FS+0x48>)
 800b87e:	f7fe fe03 	bl	800a488 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b882:	4805      	ldr	r0, [pc, #20]	; (800b898 <CDC_Transmit_FS+0x48>)
 800b884:	f7fe fe2c 	bl	800a4e0 <USBD_CDC_TransmitPacket>
 800b888:	4603      	mov	r3, r0
 800b88a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	200004cc 	.word	0x200004cc

0800b89c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	6039      	str	r1, [r7, #0]
 800b8a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	2212      	movs	r2, #18
 800b8ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b8ae:	4b03      	ldr	r3, [pc, #12]	; (800b8bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bc80      	pop	{r7}
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	20000170 	.word	0x20000170

0800b8c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	6039      	str	r1, [r7, #0]
 800b8ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8d2:	4b03      	ldr	r3, [pc, #12]	; (800b8e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bc80      	pop	{r7}
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	20000184 	.word	0x20000184

0800b8e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	6039      	str	r1, [r7, #0]
 800b8ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8f0:	79fb      	ldrb	r3, [r7, #7]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d105      	bne.n	800b902 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	4907      	ldr	r1, [pc, #28]	; (800b918 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8fa:	4808      	ldr	r0, [pc, #32]	; (800b91c <USBD_FS_ProductStrDescriptor+0x38>)
 800b8fc:	f7ff fe06 	bl	800b50c <USBD_GetString>
 800b900:	e004      	b.n	800b90c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	4904      	ldr	r1, [pc, #16]	; (800b918 <USBD_FS_ProductStrDescriptor+0x34>)
 800b906:	4805      	ldr	r0, [pc, #20]	; (800b91c <USBD_FS_ProductStrDescriptor+0x38>)
 800b908:	f7ff fe00 	bl	800b50c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b90c:	4b02      	ldr	r3, [pc, #8]	; (800b918 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	20000f60 	.word	0x20000f60
 800b91c:	0800c0b8 	.word	0x0800c0b8

0800b920 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	6039      	str	r1, [r7, #0]
 800b92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b92c:	683a      	ldr	r2, [r7, #0]
 800b92e:	4904      	ldr	r1, [pc, #16]	; (800b940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b930:	4804      	ldr	r0, [pc, #16]	; (800b944 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b932:	f7ff fdeb 	bl	800b50c <USBD_GetString>
  return USBD_StrDesc;
 800b936:	4b02      	ldr	r3, [pc, #8]	; (800b940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20000f60 	.word	0x20000f60
 800b944:	0800c0cc 	.word	0x0800c0cc

0800b948 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	4603      	mov	r3, r0
 800b950:	6039      	str	r1, [r7, #0]
 800b952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	221a      	movs	r2, #26
 800b958:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b95a:	f000 f843 	bl	800b9e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b95e:	4b02      	ldr	r3, [pc, #8]	; (800b968 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b960:	4618      	mov	r0, r3
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	20000188 	.word	0x20000188

0800b96c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	6039      	str	r1, [r7, #0]
 800b976:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b978:	79fb      	ldrb	r3, [r7, #7]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d105      	bne.n	800b98a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	4907      	ldr	r1, [pc, #28]	; (800b9a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b982:	4808      	ldr	r0, [pc, #32]	; (800b9a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b984:	f7ff fdc2 	bl	800b50c <USBD_GetString>
 800b988:	e004      	b.n	800b994 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	4904      	ldr	r1, [pc, #16]	; (800b9a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b98e:	4805      	ldr	r0, [pc, #20]	; (800b9a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b990:	f7ff fdbc 	bl	800b50c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b994:	4b02      	ldr	r3, [pc, #8]	; (800b9a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20000f60 	.word	0x20000f60
 800b9a4:	0800c0e0 	.word	0x0800c0e0

0800b9a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	6039      	str	r1, [r7, #0]
 800b9b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9b4:	79fb      	ldrb	r3, [r7, #7]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d105      	bne.n	800b9c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	4907      	ldr	r1, [pc, #28]	; (800b9dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9be:	4808      	ldr	r0, [pc, #32]	; (800b9e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9c0:	f7ff fda4 	bl	800b50c <USBD_GetString>
 800b9c4:	e004      	b.n	800b9d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	4904      	ldr	r1, [pc, #16]	; (800b9dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9ca:	4805      	ldr	r0, [pc, #20]	; (800b9e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9cc:	f7ff fd9e 	bl	800b50c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9d0:	4b02      	ldr	r3, [pc, #8]	; (800b9dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20000f60 	.word	0x20000f60
 800b9e0:	0800c0ec 	.word	0x0800c0ec

0800b9e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ba28 <Get_SerialNum+0x44>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9f0:	4b0e      	ldr	r3, [pc, #56]	; (800ba2c <Get_SerialNum+0x48>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9f6:	4b0e      	ldr	r3, [pc, #56]	; (800ba30 <Get_SerialNum+0x4c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4413      	add	r3, r2
 800ba02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d009      	beq.n	800ba1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba0a:	2208      	movs	r2, #8
 800ba0c:	4909      	ldr	r1, [pc, #36]	; (800ba34 <Get_SerialNum+0x50>)
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f000 f814 	bl	800ba3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba14:	2204      	movs	r2, #4
 800ba16:	4908      	ldr	r1, [pc, #32]	; (800ba38 <Get_SerialNum+0x54>)
 800ba18:	68b8      	ldr	r0, [r7, #8]
 800ba1a:	f000 f80f 	bl	800ba3c <IntToUnicode>
  }
}
 800ba1e:	bf00      	nop
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	1ffff7e8 	.word	0x1ffff7e8
 800ba2c:	1ffff7ec 	.word	0x1ffff7ec
 800ba30:	1ffff7f0 	.word	0x1ffff7f0
 800ba34:	2000018a 	.word	0x2000018a
 800ba38:	2000019a 	.word	0x2000019a

0800ba3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b087      	sub	sp, #28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	4613      	mov	r3, r2
 800ba48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba4e:	2300      	movs	r3, #0
 800ba50:	75fb      	strb	r3, [r7, #23]
 800ba52:	e027      	b.n	800baa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	0f1b      	lsrs	r3, r3, #28
 800ba58:	2b09      	cmp	r3, #9
 800ba5a:	d80b      	bhi.n	800ba74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	0f1b      	lsrs	r3, r3, #28
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	4619      	mov	r1, r3
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	440b      	add	r3, r1
 800ba6c:	3230      	adds	r2, #48	; 0x30
 800ba6e:	b2d2      	uxtb	r2, r2
 800ba70:	701a      	strb	r2, [r3, #0]
 800ba72:	e00a      	b.n	800ba8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	0f1b      	lsrs	r3, r3, #28
 800ba78:	b2da      	uxtb	r2, r3
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
 800ba7c:	005b      	lsls	r3, r3, #1
 800ba7e:	4619      	mov	r1, r3
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	440b      	add	r3, r1
 800ba84:	3237      	adds	r2, #55	; 0x37
 800ba86:	b2d2      	uxtb	r2, r2
 800ba88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	011b      	lsls	r3, r3, #4
 800ba8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
 800ba92:	005b      	lsls	r3, r3, #1
 800ba94:	3301      	adds	r3, #1
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	4413      	add	r3, r2
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
 800baa0:	3301      	adds	r3, #1
 800baa2:	75fb      	strb	r3, [r7, #23]
 800baa4:	7dfa      	ldrb	r2, [r7, #23]
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d3d3      	bcc.n	800ba54 <IntToUnicode+0x18>
  }
}
 800baac:	bf00      	nop
 800baae:	bf00      	nop
 800bab0:	371c      	adds	r7, #28
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bc80      	pop	{r7}
 800bab6:	4770      	bx	lr

0800bab8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a0d      	ldr	r2, [pc, #52]	; (800bafc <HAL_PCD_MspInit+0x44>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d113      	bne.n	800baf2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800baca:	4b0d      	ldr	r3, [pc, #52]	; (800bb00 <HAL_PCD_MspInit+0x48>)
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	4a0c      	ldr	r2, [pc, #48]	; (800bb00 <HAL_PCD_MspInit+0x48>)
 800bad0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bad4:	61d3      	str	r3, [r2, #28]
 800bad6:	4b0a      	ldr	r3, [pc, #40]	; (800bb00 <HAL_PCD_MspInit+0x48>)
 800bad8:	69db      	ldr	r3, [r3, #28]
 800bada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bade:	60fb      	str	r3, [r7, #12]
 800bae0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 800bae2:	2200      	movs	r2, #0
 800bae4:	2103      	movs	r1, #3
 800bae6:	2014      	movs	r0, #20
 800bae8:	f7f7 fe4b 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800baec:	2014      	movs	r0, #20
 800baee:	f7f7 fe64 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800baf2:	bf00      	nop
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	40005c00 	.word	0x40005c00
 800bb00:	40021000 	.word	0x40021000

0800bb04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bb18:	4619      	mov	r1, r3
 800bb1a:	4610      	mov	r0, r2
 800bb1c:	f7fe fdc5 	bl	800a6aa <USBD_LL_SetupStage>
}
 800bb20:	bf00      	nop
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	460b      	mov	r3, r1
 800bb32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb3a:	78fa      	ldrb	r2, [r7, #3]
 800bb3c:	6879      	ldr	r1, [r7, #4]
 800bb3e:	4613      	mov	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4413      	add	r3, r2
 800bb44:	00db      	lsls	r3, r3, #3
 800bb46:	440b      	add	r3, r1
 800bb48:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	78fb      	ldrb	r3, [r7, #3]
 800bb50:	4619      	mov	r1, r3
 800bb52:	f7fe fdf7 	bl	800a744 <USBD_LL_DataOutStage>
}
 800bb56:	bf00      	nop
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	460b      	mov	r3, r1
 800bb68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb70:	78fa      	ldrb	r2, [r7, #3]
 800bb72:	6879      	ldr	r1, [r7, #4]
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	440b      	add	r3, r1
 800bb7e:	333c      	adds	r3, #60	; 0x3c
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	78fb      	ldrb	r3, [r7, #3]
 800bb84:	4619      	mov	r1, r3
 800bb86:	f7fe fe4e 	bl	800a826 <USBD_LL_DataInStage>
}
 800bb8a:	bf00      	nop
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b082      	sub	sp, #8
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7fe ff5e 	bl	800aa62 <USBD_LL_SOF>
}
 800bba6:	bf00      	nop
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b084      	sub	sp, #16
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d001      	beq.n	800bbc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bbc2:	f7f6 fe5d 	bl	8002880 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbcc:	7bfa      	ldrb	r2, [r7, #15]
 800bbce:	4611      	mov	r1, r2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fe ff0e 	bl	800a9f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fe fec7 	bl	800a970 <USBD_LL_Reset>
}
 800bbe2:	bf00      	nop
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
	...

0800bbec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fe ff08 	bl	800aa10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d005      	beq.n	800bc14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc08:	4b04      	ldr	r3, [pc, #16]	; (800bc1c <HAL_PCD_SuspendCallback+0x30>)
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	4a03      	ldr	r2, [pc, #12]	; (800bc1c <HAL_PCD_SuspendCallback+0x30>)
 800bc0e:	f043 0306 	orr.w	r3, r3, #6
 800bc12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc14:	bf00      	nop
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	e000ed00 	.word	0xe000ed00

0800bc20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe ff02 	bl	800aa38 <USBD_LL_Resume>
}
 800bc34:	bf00      	nop
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bc44:	4a28      	ldr	r2, [pc, #160]	; (800bce8 <USBD_LL_Init+0xac>)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a26      	ldr	r2, [pc, #152]	; (800bce8 <USBD_LL_Init+0xac>)
 800bc50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bc54:	4b24      	ldr	r3, [pc, #144]	; (800bce8 <USBD_LL_Init+0xac>)
 800bc56:	4a25      	ldr	r2, [pc, #148]	; (800bcec <USBD_LL_Init+0xb0>)
 800bc58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc5a:	4b23      	ldr	r3, [pc, #140]	; (800bce8 <USBD_LL_Init+0xac>)
 800bc5c:	2208      	movs	r2, #8
 800bc5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc60:	4b21      	ldr	r3, [pc, #132]	; (800bce8 <USBD_LL_Init+0xac>)
 800bc62:	2202      	movs	r2, #2
 800bc64:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc66:	4b20      	ldr	r3, [pc, #128]	; (800bce8 <USBD_LL_Init+0xac>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc6c:	4b1e      	ldr	r3, [pc, #120]	; (800bce8 <USBD_LL_Init+0xac>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc72:	4b1d      	ldr	r3, [pc, #116]	; (800bce8 <USBD_LL_Init+0xac>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bc78:	481b      	ldr	r0, [pc, #108]	; (800bce8 <USBD_LL_Init+0xac>)
 800bc7a:	f7f8 f9d3 	bl	8004024 <HAL_PCD_Init>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bc84:	f7f6 fdfc 	bl	8002880 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc8e:	2318      	movs	r3, #24
 800bc90:	2200      	movs	r2, #0
 800bc92:	2100      	movs	r1, #0
 800bc94:	f7f9 fe47 	bl	8005926 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc9e:	2358      	movs	r3, #88	; 0x58
 800bca0:	2200      	movs	r2, #0
 800bca2:	2180      	movs	r1, #128	; 0x80
 800bca4:	f7f9 fe3f 	bl	8005926 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcae:	23c0      	movs	r3, #192	; 0xc0
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2181      	movs	r1, #129	; 0x81
 800bcb4:	f7f9 fe37 	bl	8005926 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcbe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	f7f9 fe2e 	bl	8005926 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2182      	movs	r1, #130	; 0x82
 800bcd8:	f7f9 fe25 	bl	8005926 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	20001160 	.word	0x20001160
 800bcec:	40005c00 	.word	0x40005c00

0800bcf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f8 fa97 	bl	800423a <HAL_PCD_Start>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 f94e 	bl	800bfb4 <USBD_Get_USB_Status>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b084      	sub	sp, #16
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	4608      	mov	r0, r1
 800bd30:	4611      	mov	r1, r2
 800bd32:	461a      	mov	r2, r3
 800bd34:	4603      	mov	r3, r0
 800bd36:	70fb      	strb	r3, [r7, #3]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	70bb      	strb	r3, [r7, #2]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd40:	2300      	movs	r3, #0
 800bd42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd4e:	78bb      	ldrb	r3, [r7, #2]
 800bd50:	883a      	ldrh	r2, [r7, #0]
 800bd52:	78f9      	ldrb	r1, [r7, #3]
 800bd54:	f7f8 fc0f 	bl	8004576 <HAL_PCD_EP_Open>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f000 f928 	bl	800bfb4 <USBD_Get_USB_Status>
 800bd64:	4603      	mov	r3, r0
 800bd66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b084      	sub	sp, #16
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd8c:	78fa      	ldrb	r2, [r7, #3]
 800bd8e:	4611      	mov	r1, r2
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7f8 fc56 	bl	8004642 <HAL_PCD_EP_Close>
 800bd96:	4603      	mov	r3, r0
 800bd98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd9a:	7bfb      	ldrb	r3, [r7, #15]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 f909 	bl	800bfb4 <USBD_Get_USB_Status>
 800bda2:	4603      	mov	r3, r0
 800bda4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdca:	78fa      	ldrb	r2, [r7, #3]
 800bdcc:	4611      	mov	r1, r2
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f8 fd16 	bl	8004800 <HAL_PCD_EP_SetStall>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdd8:	7bfb      	ldrb	r3, [r7, #15]
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 f8ea 	bl	800bfb4 <USBD_Get_USB_Status>
 800bde0:	4603      	mov	r3, r0
 800bde2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bde4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b084      	sub	sp, #16
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be08:	78fa      	ldrb	r2, [r7, #3]
 800be0a:	4611      	mov	r1, r2
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7f8 fd57 	bl	80048c0 <HAL_PCD_EP_ClrStall>
 800be12:	4603      	mov	r3, r0
 800be14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	4618      	mov	r0, r3
 800be1a:	f000 f8cb 	bl	800bfb4 <USBD_Get_USB_Status>
 800be1e:	4603      	mov	r3, r0
 800be20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be22:	7bbb      	ldrb	r3, [r7, #14]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	460b      	mov	r3, r1
 800be36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be44:	2b00      	cmp	r3, #0
 800be46:	da0c      	bge.n	800be62 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be48:	78fb      	ldrb	r3, [r7, #3]
 800be4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be4e:	68f9      	ldr	r1, [r7, #12]
 800be50:	1c5a      	adds	r2, r3, #1
 800be52:	4613      	mov	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4413      	add	r3, r2
 800be58:	00db      	lsls	r3, r3, #3
 800be5a:	440b      	add	r3, r1
 800be5c:	3302      	adds	r3, #2
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	e00b      	b.n	800be7a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be62:	78fb      	ldrb	r3, [r7, #3]
 800be64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be68:	68f9      	ldr	r1, [r7, #12]
 800be6a:	4613      	mov	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	00db      	lsls	r3, r3, #3
 800be72:	440b      	add	r3, r1
 800be74:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800be78:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	bc80      	pop	{r7}
 800be82:	4770      	bx	lr

0800be84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	460b      	mov	r3, r1
 800be8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be9e:	78fa      	ldrb	r2, [r7, #3]
 800bea0:	4611      	mov	r1, r2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7f8 fb42 	bl	800452c <HAL_PCD_SetAddress>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	4618      	mov	r0, r3
 800beb0:	f000 f880 	bl	800bfb4 <USBD_Get_USB_Status>
 800beb4:	4603      	mov	r3, r0
 800beb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b086      	sub	sp, #24
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	60f8      	str	r0, [r7, #12]
 800beca:	607a      	str	r2, [r7, #4]
 800becc:	461a      	mov	r2, r3
 800bece:	460b      	mov	r3, r1
 800bed0:	72fb      	strb	r3, [r7, #11]
 800bed2:	4613      	mov	r3, r2
 800bed4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bee4:	893b      	ldrh	r3, [r7, #8]
 800bee6:	7af9      	ldrb	r1, [r7, #11]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	f7f8 fc46 	bl	800477a <HAL_PCD_EP_Transmit>
 800beee:	4603      	mov	r3, r0
 800bef0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bef2:	7dfb      	ldrb	r3, [r7, #23]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 f85d 	bl	800bfb4 <USBD_Get_USB_Status>
 800befa:	4603      	mov	r3, r0
 800befc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800befe:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3718      	adds	r7, #24
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	607a      	str	r2, [r7, #4]
 800bf12:	461a      	mov	r2, r3
 800bf14:	460b      	mov	r3, r1
 800bf16:	72fb      	strb	r3, [r7, #11]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf2a:	893b      	ldrh	r3, [r7, #8]
 800bf2c:	7af9      	ldrb	r1, [r7, #11]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	f7f8 fbcf 	bl	80046d2 <HAL_PCD_EP_Receive>
 800bf34:	4603      	mov	r3, r0
 800bf36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 f83a 	bl	800bfb4 <USBD_Get_USB_Status>
 800bf40:	4603      	mov	r3, r0
 800bf42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf44:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3718      	adds	r7, #24
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b082      	sub	sp, #8
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	460b      	mov	r3, r1
 800bf58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf60:	78fa      	ldrb	r2, [r7, #3]
 800bf62:	4611      	mov	r1, r2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7f8 fbf1 	bl	800474c <HAL_PCD_EP_GetRxCount>
 800bf6a:	4603      	mov	r3, r0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf7c:	4b02      	ldr	r3, [pc, #8]	; (800bf88 <USBD_static_malloc+0x14>)
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bc80      	pop	{r7}
 800bf86:	4770      	bx	lr
 800bf88:	2000144c 	.word	0x2000144c

0800bf8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]

}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bc80      	pop	{r7}
 800bf9c:	4770      	bx	lr

0800bf9e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b083      	sub	sp, #12
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bfaa:	bf00      	nop
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bc80      	pop	{r7}
 800bfb2:	4770      	bx	lr

0800bfb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	4603      	mov	r3, r0
 800bfbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d817      	bhi.n	800bff8 <USBD_Get_USB_Status+0x44>
 800bfc8:	a201      	add	r2, pc, #4	; (adr r2, 800bfd0 <USBD_Get_USB_Status+0x1c>)
 800bfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfce:	bf00      	nop
 800bfd0:	0800bfe1 	.word	0x0800bfe1
 800bfd4:	0800bfe7 	.word	0x0800bfe7
 800bfd8:	0800bfed 	.word	0x0800bfed
 800bfdc:	0800bff3 	.word	0x0800bff3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe4:	e00b      	b.n	800bffe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfe6:	2302      	movs	r3, #2
 800bfe8:	73fb      	strb	r3, [r7, #15]
    break;
 800bfea:	e008      	b.n	800bffe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfec:	2301      	movs	r3, #1
 800bfee:	73fb      	strb	r3, [r7, #15]
    break;
 800bff0:	e005      	b.n	800bffe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bff2:	2302      	movs	r3, #2
 800bff4:	73fb      	strb	r3, [r7, #15]
    break;
 800bff6:	e002      	b.n	800bffe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bff8:	2302      	movs	r3, #2
 800bffa:	73fb      	strb	r3, [r7, #15]
    break;
 800bffc:	bf00      	nop
  }
  return usb_status;
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3714      	adds	r7, #20
 800c004:	46bd      	mov	sp, r7
 800c006:	bc80      	pop	{r7}
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop

0800c00c <__libc_init_array>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	2600      	movs	r6, #0
 800c010:	4d0c      	ldr	r5, [pc, #48]	; (800c044 <__libc_init_array+0x38>)
 800c012:	4c0d      	ldr	r4, [pc, #52]	; (800c048 <__libc_init_array+0x3c>)
 800c014:	1b64      	subs	r4, r4, r5
 800c016:	10a4      	asrs	r4, r4, #2
 800c018:	42a6      	cmp	r6, r4
 800c01a:	d109      	bne.n	800c030 <__libc_init_array+0x24>
 800c01c:	f000 f830 	bl	800c080 <_init>
 800c020:	2600      	movs	r6, #0
 800c022:	4d0a      	ldr	r5, [pc, #40]	; (800c04c <__libc_init_array+0x40>)
 800c024:	4c0a      	ldr	r4, [pc, #40]	; (800c050 <__libc_init_array+0x44>)
 800c026:	1b64      	subs	r4, r4, r5
 800c028:	10a4      	asrs	r4, r4, #2
 800c02a:	42a6      	cmp	r6, r4
 800c02c:	d105      	bne.n	800c03a <__libc_init_array+0x2e>
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	f855 3b04 	ldr.w	r3, [r5], #4
 800c034:	4798      	blx	r3
 800c036:	3601      	adds	r6, #1
 800c038:	e7ee      	b.n	800c018 <__libc_init_array+0xc>
 800c03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c03e:	4798      	blx	r3
 800c040:	3601      	adds	r6, #1
 800c042:	e7f2      	b.n	800c02a <__libc_init_array+0x1e>
 800c044:	0800c114 	.word	0x0800c114
 800c048:	0800c114 	.word	0x0800c114
 800c04c:	0800c114 	.word	0x0800c114
 800c050:	0800c118 	.word	0x0800c118

0800c054 <memcpy>:
 800c054:	440a      	add	r2, r1
 800c056:	4291      	cmp	r1, r2
 800c058:	f100 33ff 	add.w	r3, r0, #4294967295
 800c05c:	d100      	bne.n	800c060 <memcpy+0xc>
 800c05e:	4770      	bx	lr
 800c060:	b510      	push	{r4, lr}
 800c062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c066:	4291      	cmp	r1, r2
 800c068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c06c:	d1f9      	bne.n	800c062 <memcpy+0xe>
 800c06e:	bd10      	pop	{r4, pc}

0800c070 <memset>:
 800c070:	4603      	mov	r3, r0
 800c072:	4402      	add	r2, r0
 800c074:	4293      	cmp	r3, r2
 800c076:	d100      	bne.n	800c07a <memset+0xa>
 800c078:	4770      	bx	lr
 800c07a:	f803 1b01 	strb.w	r1, [r3], #1
 800c07e:	e7f9      	b.n	800c074 <memset+0x4>

0800c080 <_init>:
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c082:	bf00      	nop
 800c084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c086:	bc08      	pop	{r3}
 800c088:	469e      	mov	lr, r3
 800c08a:	4770      	bx	lr

0800c08c <_fini>:
 800c08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08e:	bf00      	nop
 800c090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c092:	bc08      	pop	{r3}
 800c094:	469e      	mov	lr, r3
 800c096:	4770      	bx	lr
