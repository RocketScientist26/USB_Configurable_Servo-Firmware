
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c140  0800c140  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c140  0800c140  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c140  0800c140  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c140  0800c140  0001c140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c144  0800c144  0001c144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800c148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014cc  200001a8  0800c2ec  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  0800c2ec  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b58  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049fb  00000000  00000000  00038d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003d720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  0003ec98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0ee  00000000  00000000  0003ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d26c  00000000  00000000  0005d0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936ef  00000000  00000000  0007a31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010da09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000559c  00000000  00000000  0010da5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c0ac 	.word	0x0800c0ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	0800c0ac 	.word	0x0800c0ac

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <Potentiometer_Ready>:
extern uint8_t usb_rq;
extern uint8_t usb_rq_sett_revert_flash;
extern uint8_t usb_rq_stat_motor;
extern uint8_t usb_rq_stat_phold;

void Potentiometer_Ready(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	pid_input = potentiometer_position;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <Potentiometer_Ready+0x80>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <Potentiometer_Ready+0x84>)
 800074a:	6013      	str	r3, [r2, #0]
	if(!pid_running){
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <Potentiometer_Ready+0x88>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d133      	bne.n	80007bc <Potentiometer_Ready+0x7c>
		if(motor_running){
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <Potentiometer_Ready+0x8c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d02f      	beq.n	80007bc <Potentiometer_Ready+0x7c>
			if((potentiometer_position <= potentiometer_min) && (Motor_Get() < 0)){
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <Potentiometer_Ready+0x90>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fdad 	bl	80002c0 <__aeabi_i2f>
 8000766:	4602      	mov	r2, r0
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <Potentiometer_Ready+0x80>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4610      	mov	r0, r2
 8000770:	f7ff ffac 	bl	80006cc <__aeabi_fcmpge>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d008      	beq.n	800078c <Potentiometer_Ready+0x4c>
 800077a:	f000 fb1f 	bl	8000dbc <Motor_Get>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	da03      	bge.n	800078c <Potentiometer_Ready+0x4c>
				Motor_Set(0);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fab1 	bl	8000cec <Motor_Set>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 800078a:	e017      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <Potentiometer_Ready+0x94>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd95 	bl	80002c0 <__aeabi_i2f>
 8000796:	4602      	mov	r2, r0
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <Potentiometer_Ready+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f7ff ff8a 	bl	80006b8 <__aeabi_fcmple>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <Potentiometer_Ready+0x6c>
}
 80007aa:	e007      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 80007ac:	f000 fb06 	bl	8000dbc <Motor_Get>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	dd02      	ble.n	80007bc <Potentiometer_Ready+0x7c>
				Motor_Set(0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fa98 	bl	8000cec <Motor_Set>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001f8 	.word	0x200001f8
 80007c4:	200001dc 	.word	0x200001dc
 80007c8:	200001d8 	.word	0x200001d8
 80007cc:	200001c8 	.word	0x200001c8
 80007d0:	200001ec 	.word	0x200001ec
 80007d4:	200001ee 	.word	0x200001ee

080007d8 <PID_Ready>:
void PID_Ready(float output){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff87 	bl	80006f4 <__aeabi_f2iz>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fa7e 	bl	8000cec <Motor_Set>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <App_Init>:

void App_Init(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	Settings_Read();
 80007fc:	f000 fde0 	bl	80013c0 <Settings_Read>
	USB_Init();
 8000800:	f001 fb3e 	bl	8001e80 <USB_Init>
	Signal_Init();
 8000804:	f001 fae6 	bl	8001dd4 <Signal_Init>
	Potentiometer_Init();
 8000808:	f000 fdc2 	bl	8001390 <Potentiometer_Init>
	Motor_Init();
 800080c:	f000 fb14 	bl	8000e38 <Motor_Init>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <App_Loop>:
void App_Loop(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	switch(usb_rq){
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <App_Loop+0xf8>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d002      	beq.n	8000826 <App_Loop+0x12>
 8000820:	2b02      	cmp	r3, #2
 8000822:	d019      	beq.n	8000858 <App_Loop+0x44>
 8000824:	e06e      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_CONF:
			if(usb_rq_sett_revert_flash == USB_SETTINGS_REVERT){
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <App_Loop+0xfc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d105      	bne.n	800083a <App_Loop+0x26>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <App_Loop+0xfc>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
				//Read from flash
				Settings_Read();
 8000834:	f000 fdc4 	bl	80013c0 <Settings_Read>
 8000838:	e008      	b.n	800084c <App_Loop+0x38>
			}else if(usb_rq_sett_revert_flash == USB_SETTINGS_FLASH){
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <App_Loop+0xfc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d104      	bne.n	800084c <App_Loop+0x38>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <App_Loop+0xfc>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
				//Write to flash
				Settings_Write();
 8000848:	f001 f890 	bl	800196c <Settings_Write>
			}
			USB_Send_Config();
 800084c:	f001 fbaa 	bl	8001fa4 <USB_Send_Config>
			usb_rq = USB_RQ_NONE;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <App_Loop+0xf8>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e055      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_STAT:
			if(usb_rq_stat_motor != 0){
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <App_Loop+0x100>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d033      	beq.n	80008c8 <App_Loop+0xb4>
				//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout
				if(usb_rq_stat_motor == 1){//Backward
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <App_Loop+0x100>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d112      	bne.n	800088e <App_Loop+0x7a>
					if(potentiometer_position > potentiometer_min){
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <App_Loop+0x104>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fd27 	bl	80002c0 <__aeabi_i2f>
 8000872:	4602      	mov	r2, r0
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <App_Loop+0x108>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f7ff ff12 	bl	80006a4 <__aeabi_fcmplt>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01a      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(-1000);
 8000886:	4826      	ldr	r0, [pc, #152]	; (8000920 <App_Loop+0x10c>)
 8000888:	f000 fa30 	bl	8000cec <Motor_Set>
 800088c:	e016      	b.n	80008bc <App_Loop+0xa8>
					}
				}else if(usb_rq_stat_motor == 2){//Forward
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <App_Loop+0x100>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d112      	bne.n	80008bc <App_Loop+0xa8>
					if(potentiometer_position < potentiometer_max){
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <App_Loop+0x110>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd10 	bl	80002c0 <__aeabi_i2f>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <App_Loop+0x108>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff ff19 	bl	80006e0 <__aeabi_fcmpgt>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d003      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f000 fa18 	bl	8000cec <Motor_Set>
					}
				}
				motor_systick = 0;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <App_Loop+0x114>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
				usb_rq_stat_motor = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <App_Loop+0x100>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
			}
			if(usb_rq_stat_phold == 1){
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <App_Loop+0x118>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d109      	bne.n	80008e4 <App_Loop+0xd0>
				usb_rq_stat_phold = 0;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <App_Loop+0x118>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
				if(!pid_running){//Run pid with signal timeout
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <App_Loop+0x11c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10c      	bne.n	80008f8 <App_Loop+0xe4>
					PID_Start();
 80008de:	f000 fce9 	bl	80012b4 <PID_Start>
 80008e2:	e009      	b.n	80008f8 <App_Loop+0xe4>
				}
			}else if(signal_ignore && pid_running){
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <App_Loop+0x120>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d005      	beq.n	80008f8 <App_Loop+0xe4>
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <App_Loop+0x11c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <App_Loop+0xe4>
				PID_Stop();
 80008f4:	f000 fd00 	bl	80012f8 <PID_Stop>
			}
			USB_Send_Status();
 80008f8:	f001 fd22 	bl	8002340 <USB_Send_Status>
			usb_rq = USB_RQ_NONE;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <App_Loop+0xf8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
		break;
 8000902:	bf00      	nop
	}
	LED_Update();
 8000904:	f000 f992 	bl	8000c2c <LED_Update>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000250 	.word	0x20000250
 8000910:	20000251 	.word	0x20000251
 8000914:	20000252 	.word	0x20000252
 8000918:	200001ec 	.word	0x200001ec
 800091c:	200001f8 	.word	0x200001f8
 8000920:	fffffc18 	.word	0xfffffc18
 8000924:	200001ee 	.word	0x200001ee
 8000928:	200001c9 	.word	0x200001c9
 800092c:	20000253 	.word	0x20000253
 8000930:	200001d8 	.word	0x200001d8
 8000934:	2000023c 	.word	0x2000023c

08000938 <Flash_Read>:
#include "main.h"
#include "flash.h"

void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000948:	e00b      	b.n	8000962 <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	4413      	add	r3, r2
 8000958:	780a      	ldrb	r2, [r1, #0]
 800095a:	701a      	strb	r2, [r3, #0]
		i++;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	d1ef      	bne.n	800094a <Flash_Read+0x12>
	}
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	371c      	adds	r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <Flash_Write>:
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 8000976:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8000994:	f003 f800 	bl	8003998 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8000998:	f107 0210 	add.w	r2, r7, #16
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 f8e0 	bl	8003b68 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80009c0:	e027      	b.n	8000a12 <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80009c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	18d0      	adds	r0, r2, r3
				((uint32_t)data[i+3]<<24)|
 80009c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009ca:	3303      	adds	r3, #3
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	061a      	lsls	r2, r3, #24
				((uint32_t)data[i+2]<<16)|
 80009d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009d6:	3302      	adds	r3, #2
 80009d8:	68f9      	ldr	r1, [r7, #12]
 80009da:	440b      	add	r3, r1
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	041b      	lsls	r3, r3, #16
				((uint32_t)data[i+3]<<24)|
 80009e0:	431a      	orrs	r2, r3
				((uint32_t)data[i+1]<<8)|
 80009e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009e4:	3301      	adds	r3, #1
 80009e6:	68f9      	ldr	r1, [r7, #12]
 80009e8:	440b      	add	r3, r1
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	021b      	lsls	r3, r3, #8
				((uint32_t)data[i+2]<<16)|
 80009ee:	4313      	orrs	r3, r2
				(uint32_t)data[i]
 80009f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009f2:	68f9      	ldr	r1, [r7, #12]
 80009f4:	440a      	add	r2, r1
 80009f6:	7812      	ldrb	r2, [r2, #0]
				((uint32_t)data[i+1]<<8)|
 80009f8:	4313      	orrs	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80009fa:	2200      	movs	r2, #0
 80009fc:	4698      	mov	r8, r3
 80009fe:	4691      	mov	r9, r2
 8000a00:	4642      	mov	r2, r8
 8000a02:	464b      	mov	r3, r9
 8000a04:	4601      	mov	r1, r0
 8000a06:	2002      	movs	r0, #2
 8000a08:	f002 ff56 	bl	80038b8 <HAL_FLASH_Program>
		);
		i+=4;
 8000a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a0e:	3304      	adds	r3, #4
 8000a10:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 8000a12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d1d2      	bne.n	80009c2 <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 8000a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d03f      	beq.n	8000aa2 <Flash_Write+0x12c>
		uint32_t wdata = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 8000a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d114      	bne.n	8000a56 <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i+2]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i]<<8);
 8000a2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a2e:	3302      	adds	r3, #2
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	061a      	lsls	r2, r3, #24
 8000a38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	440b      	add	r3, r1
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	041b      	lsls	r3, r3, #16
 8000a44:	431a      	orrs	r2, r3
 8000a46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a48:	68f9      	ldr	r1, [r7, #12]
 8000a4a:	440b      	add	r3, r1
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	4313      	orrs	r3, r2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a54:	e019      	b.n	8000a8a <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 8000a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d10d      	bne.n	8000a78 <Flash_Write+0x102>
			wdata = ((uint32_t)data[i+1]<<24)|((uint32_t)data[i]<<16);
 8000a5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a5e:	3301      	adds	r3, #1
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	061a      	lsls	r2, r3, #24
 8000a68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	041b      	lsls	r3, r3, #16
 8000a72:	4313      	orrs	r3, r2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a76:	e008      	b.n	8000a8a <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 8000a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d105      	bne.n	8000a8a <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 8000a7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	061b      	lsls	r3, r3, #24
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 8000a8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	18d1      	adds	r1, r2, r3
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	2200      	movs	r2, #0
 8000a94:	461c      	mov	r4, r3
 8000a96:	4615      	mov	r5, r2
 8000a98:	4622      	mov	r2, r4
 8000a9a:	462b      	mov	r3, r5
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f002 ff0b 	bl	80038b8 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8000aa2:	f002 ff9f 	bl	80039e4 <HAL_FLASH_Lock>
}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	; 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000ab0 <General_Copy_32_Bit>:
#include "main.h"
#include "general.h"

void General_Copy_32_Bit(uint32_t address_to, uint32_t address_from){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000abe:	e00b      	b.n	8000ad8 <General_Copy_32_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000ac0:	7bfa      	ldrb	r2, [r7, #15]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	7bfa      	ldrb	r2, [r7, #15]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	780a      	ldrb	r2, [r1, #0]
 8000ad0:	701a      	strb	r2, [r3, #0]
		i++;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d1f0      	bne.n	8000ac0 <General_Copy_32_Bit+0x10>
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <General_Copy_16_Bit>:
void General_Copy_16_Bit(uint32_t address_to, uint32_t address_from){
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000af8:	e00b      	b.n	8000b12 <General_Copy_16_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	780a      	ldrb	r2, [r1, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
		i++;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d1f0      	bne.n	8000afa <General_Copy_16_Bit+0x10>
	}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <HAL_ADC_ConvCpltCallback>:
#include "motor.h"
#include "signal.h"
#include "usb.h"
#include "led.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_ADC_ConvCpltCallback+0x20>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 8000b36:	f000 fbef 	bl	8001318 <Potentiometer_ADC_Interrupt>
    }
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012400 	.word	0x40012400

08000b48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d102      	bne.n	8000b60 <HAL_TIM_PeriodElapsedCallback+0x18>
		PID_Timer_Interrupt();
 8000b5a:	f000 f995 	bl	8000e88 <PID_Timer_Interrupt>
	}
	else if(htim->Instance == TIM4){
		Signal_Timer_Interrupt();
	}
}
 8000b5e:	e006      	b.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x26>
	else if(htim->Instance == TIM4){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x26>
		Signal_Timer_Interrupt();
 8000b6a:	f001 f81d 	bl	8001ba8 <Signal_Timer_Interrupt>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40000400 	.word	0x40000400
 8000b7c:	40000800 	.word	0x40000800

08000b80 <Interrupts_SysTick>:

void Interrupts_SysTick(){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	Motor_SysTick_Interrupt();
 8000b84:	f000 f890 	bl	8000ca8 <Motor_SysTick_Interrupt>
	Signal_SysTick_Interrupt();
 8000b88:	f000 ffd2 	bl	8001b30 <Signal_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 8000b8c:	f000 f818 	bl	8000bc0 <LED_SysTick_Interrupt>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_EXTI_Callback+0x18>
 8000ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_EXTI_Callback+0x1e>
		break;
		case USB_DET_Pin:
			USB_Det_Interrupt();
		break;
	}
}
 8000baa:	e005      	b.n	8000bb8 <HAL_GPIO_EXTI_Callback+0x24>
			Signal_Interrupt();
 8000bac:	f001 f808 	bl	8001bc0 <Signal_Interrupt>
		break;
 8000bb0:	e002      	b.n	8000bb8 <HAL_GPIO_EXTI_Callback+0x24>
			USB_Det_Interrupt();
 8000bb2:	f001 f94b 	bl	8001e4c <USB_Det_Interrupt>
		break;
 8000bb6:	bf00      	nop
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <LED_SysTick_Interrupt>:

uint8_t led_mode = 0;
uint8_t led_position_changed = 0;
uint8_t led_systick = 0;

void LED_SysTick_Interrupt(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	if(led_mode == LED_MODE_POSITION_CHANGE){
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <LED_SysTick_Interrupt+0x30>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d10f      	bne.n	8000bec <LED_SysTick_Interrupt+0x2c>
		led_systick++;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <LED_SysTick_Interrupt+0x34>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <LED_SysTick_Interrupt+0x34>)
 8000bd6:	701a      	strb	r2, [r3, #0]
		if(led_systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <LED_SysTick_Interrupt+0x34>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b13      	cmp	r3, #19
 8000bde:	d905      	bls.n	8000bec <LED_SysTick_Interrupt+0x2c>
			LED_Set(OFF);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f000 f809 	bl	8000bf8 <LED_Set>
			led_systick = 0;
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <LED_SysTick_Interrupt+0x34>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200001c4 	.word	0x200001c4
 8000bf4:	200001c6 	.word	0x200001c6

08000bf8 <LED_Set>:

void LED_Set(uint8_t state){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	if(state == ON){
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d105      	bne.n	8000c14 <LED_Set+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <LED_Set+0x30>)
 8000c0e:	f003 f9ee 	bl	8003fee <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 8000c12:	e004      	b.n	8000c1e <LED_Set+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <LED_Set+0x30>)
 8000c1a:	f003 f9e8 	bl	8003fee <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010800 	.word	0x40010800

08000c2c <LED_Update>:
void LED_Update(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	switch(led_mode){
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <LED_Update+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d82a      	bhi.n	8000c8e <LED_Update+0x62>
 8000c38:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <LED_Update+0x14>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000c51 	.word	0x08000c51
 8000c44:	08000c59 	.word	0x08000c59
 8000c48:	08000c61 	.word	0x08000c61
 8000c4c:	08000c79 	.word	0x08000c79
		case LED_MODE_OFF:
			LED_Set(OFF);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff ffd1 	bl	8000bf8 <LED_Set>
		break;
 8000c56:	e01a      	b.n	8000c8e <LED_Update+0x62>
		case LED_MODE_POWER:
			LED_Set(ON);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff ffcd 	bl	8000bf8 <LED_Set>
		break;
 8000c5e:	e016      	b.n	8000c8e <LED_Update+0x62>
		case LED_MODE_SIGNAL:
			if(pid_running){
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <LED_Update+0x70>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <LED_Update+0x44>
				LED_Set(ON);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff ffc5 	bl	8000bf8 <LED_Set>
			}else{
				LED_Set(OFF);
			}
		break;
 8000c6e:	e00e      	b.n	8000c8e <LED_Update+0x62>
				LED_Set(OFF);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff ffc1 	bl	8000bf8 <LED_Set>
		break;
 8000c76:	e00a      	b.n	8000c8e <LED_Update+0x62>
		case LED_MODE_POSITION_CHANGE:
			if(led_position_changed){
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <LED_Update+0x74>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <LED_Update+0x60>
				led_systick = 0;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <LED_Update+0x78>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
				LED_Set(ON);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ffb6 	bl	8000bf8 <LED_Set>
			}
		break;
 8000c8c:	bf00      	nop
	}
	led_position_changed = 0;
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <LED_Update+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200001c4 	.word	0x200001c4
 8000c9c:	200001d8 	.word	0x200001d8
 8000ca0:	200001c5 	.word	0x200001c5
 8000ca4:	200001c6 	.word	0x200001c6

08000ca8 <Motor_SysTick_Interrupt>:
uint8_t motor_invert = MOTOR_NORMAL;
uint16_t motor_max_power = 1000;
uint8_t motor_running = 0;
uint8_t motor_systick = 0;

void Motor_SysTick_Interrupt(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	if(!pid_running){
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <Motor_SysTick_Interrupt+0x38>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d113      	bne.n	8000cdc <Motor_SysTick_Interrupt+0x34>
		if(motor_running){
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <Motor_SysTick_Interrupt+0x3c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d00f      	beq.n	8000cdc <Motor_SysTick_Interrupt+0x34>
			motor_systick++;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <Motor_SysTick_Interrupt+0x40>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <Motor_SysTick_Interrupt+0x40>)
 8000cc6:	701a      	strb	r2, [r3, #0]
			if(motor_systick == MOTOR_USB_TEST_TIMEOUT_MS){
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <Motor_SysTick_Interrupt+0x40>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b32      	cmp	r3, #50	; 0x32
 8000cce:	d105      	bne.n	8000cdc <Motor_SysTick_Interrupt+0x34>
				Motor_Set(0);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 f80b 	bl	8000cec <Motor_Set>
				motor_systick = 0;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <Motor_SysTick_Interrupt+0x40>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200001d8 	.word	0x200001d8
 8000ce4:	200001c8 	.word	0x200001c8
 8000ce8:	200001c9 	.word	0x200001c9

08000cec <Motor_Set>:

void Motor_Set(int16_t strength){//-1000 0 1000 Strength
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
	if(motor_invert == MOTOR_INVERT){
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <Motor_Set+0xc0>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d103      	bne.n	8000d06 <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	425b      	negs	r3, r3
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	80fb      	strh	r3, [r7, #6]
	}

	if(strength == 0){
 8000d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d110      	bne.n	8000d30 <Motor_Set+0x44>
		TIM2 -> CCR1 = 1000;
 8000d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d16:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 0;
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <Motor_Set+0xc4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		motor_systick = 0;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <Motor_Set+0xc8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
		TIM2 -> CCR2 = 1000;
		motor_running = 1;
	}
}
 8000d2e:	e038      	b.n	8000da2 <Motor_Set+0xb6>
	}else if(strength < 0){
 8000d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da18      	bge.n	8000d6a <Motor_Set+0x7e>
		TIM2 -> CCR1 = 1000;
 8000d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000 + (strength / (1000 / motor_max_power));
 8000d42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <Motor_Set+0xcc>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d50:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d54:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d58:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000d5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <Motor_Set+0xc4>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
}
 8000d68:	e01b      	b.n	8000da2 <Motor_Set+0xb6>
	}else if(strength > 0){
 8000d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dd17      	ble.n	8000da2 <Motor_Set+0xb6>
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
 8000d72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <Motor_Set+0xcc>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d80:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d88:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9a:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <Motor_Set+0xc4>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	200001c7 	.word	0x200001c7
 8000db0:	200001c8 	.word	0x200001c8
 8000db4:	200001c9 	.word	0x200001c9
 8000db8:	20000000 	.word	0x20000000

08000dbc <Motor_Get>:
int16_t Motor_Get(){
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
	if(TIM2 -> CCR1 != 1000){
 8000dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dca:	d013      	beq.n	8000df4 <Motor_Get+0x38>
		return (1000 - (int16_t)(TIM2 -> CCR1)) * (1000 / motor_max_power);
 8000dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <Motor_Get+0x78>)
 8000ddc:	8812      	ldrh	r2, [r2, #0]
 8000dde:	4611      	mov	r1, r2
 8000de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000de4:	fb92 f2f1 	sdiv	r2, r2, r1
 8000de8:	b292      	uxth	r2, r2
 8000dea:	fb02 f303 	mul.w	r3, r2, r3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	e01a      	b.n	8000e2a <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 8000df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dfe:	d013      	beq.n	8000e28 <Motor_Get+0x6c>
		return ((int16_t)(TIM2 -> CCR2) - 1000) * (1000 / motor_max_power);
 8000e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <Motor_Get+0x78>)
 8000e10:	8812      	ldrh	r2, [r2, #0]
 8000e12:	4611      	mov	r1, r2
 8000e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e18:	fb92 f2f1 	sdiv	r2, r2, r1
 8000e1c:	b292      	uxth	r2, r2
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	e000      	b.n	8000e2a <Motor_Get+0x6e>
	}
	return 0;
 8000e28:	2300      	movs	r3, #0
} 
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000000 	.word	0x20000000

08000e38 <Motor_Init>:
void Motor_Init(){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4804      	ldr	r0, [pc, #16]	; (8000e50 <Motor_Init+0x18>)
 8000e40:	f005 fcb8 	bl	80067b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e44:	2104      	movs	r1, #4
 8000e46:	4802      	ldr	r0, [pc, #8]	; (8000e50 <Motor_Init+0x18>)
 8000e48:	f005 fcb4 	bl	80067b4 <HAL_TIM_PWM_Start>
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200003d0 	.word	0x200003d0

08000e54 <PID_Timer_Stop>:
float pid_setpoint = 2047;
//Runtime variables
float pid_last_input = 0;
float pid_output_sum = 0;

void PID_Timer_Stop(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <PID_Timer_Stop+0x10>)
 8000e5a:	f005 fc25 	bl	80066a8 <HAL_TIM_Base_Stop_IT>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000418 	.word	0x20000418

08000e68 <PID_Timer_Restart>:
void PID_Timer_Restart(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <PID_Timer_Restart+0x1c>)
 8000e6e:	f005 fc1b 	bl	80066a8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <PID_Timer_Restart+0x1c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 8000e7a:	4802      	ldr	r0, [pc, #8]	; (8000e84 <PID_Timer_Restart+0x1c>)
 8000e7c:	f005 fbc2 	bl	8006604 <HAL_TIM_Base_Start_IT>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000418 	.word	0x20000418

08000e88 <PID_Timer_Interrupt>:
void PID_Timer_Interrupt(){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	PID_Compute();
 8000e8c:	f000 f838 	bl	8000f00 <PID_Compute>
	PID_Ready(pid_output);
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <PID_Timer_Interrupt+0x1c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc9f 	bl	80007d8 <PID_Ready>
	PID_Timer_Restart();
 8000e9a:	f7ff ffe5 	bl	8000e68 <PID_Timer_Restart>
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200001e0 	.word	0x200001e0

08000ea8 <PID_Get_Sampling_Time>:

uint16_t PID_Get_Sampling_Time(){
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <PID_Get_Sampling_Time+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <PID_Get_Sampling_Time+0x20>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	095b      	lsrs	r3, r3, #5
 8000eba:	b29b      	uxth	r3, r3
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	20000418 	.word	0x20000418
 8000ec8:	51eb851f 	.word	0x51eb851f

08000ecc <PID_Set_Sampling_Time>:
void PID_Set_Sampling_Time(uint16_t ms){
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	2264      	movs	r2, #100	; 0x64
 8000eda:	fb03 f202 	mul.w	r2, r3, r2
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <PID_Set_Sampling_Time+0x30>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	2264      	movs	r2, #100	; 0x64
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <PID_Set_Sampling_Time+0x30>)
 8000ef0:	60da      	str	r2, [r3, #12]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	20000418 	.word	0x20000418

08000f00 <PID_Compute>:
void PID_Compute(){
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
	float input = pid_input;
 8000f06:	4b94      	ldr	r3, [pc, #592]	; (8001158 <PID_Compute+0x258>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60bb      	str	r3, [r7, #8]
	float error = pid_setpoint - input;
 8000f0c:	4b93      	ldr	r3, [pc, #588]	; (800115c <PID_Compute+0x25c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff f91e 	bl	8000154 <__aeabi_fsub>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	607b      	str	r3, [r7, #4]
	float input_d = (input - pid_last_input);
 8000f1c:	4b90      	ldr	r3, [pc, #576]	; (8001160 <PID_Compute+0x260>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	68b8      	ldr	r0, [r7, #8]
 8000f24:	f7ff f916 	bl	8000154 <__aeabi_fsub>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	603b      	str	r3, [r7, #0]
	float output = 0;
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]

	if(error >= pid_split_1){
 8000f32:	4b8c      	ldr	r3, [pc, #560]	; (8001164 <PID_Compute+0x264>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff f9c2 	bl	80002c0 <__aeabi_i2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fbc3 	bl	80006cc <__aeabi_fcmpge>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d074      	beq.n	8001036 <PID_Compute+0x136>
		pid_output_sum += pid_ki_1 * error;
 8000f4c:	4b86      	ldr	r3, [pc, #536]	; (8001168 <PID_Compute+0x268>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa08 	bl	8000368 <__aeabi_fmul>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b83      	ldr	r3, [pc, #524]	; (800116c <PID_Compute+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f7ff f8f8 	bl	8000158 <__addsf3>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b7f      	ldr	r3, [pc, #508]	; (800116c <PID_Compute+0x26c>)
 8000f6e:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8000f70:	4b7f      	ldr	r3, [pc, #508]	; (8001170 <PID_Compute+0x270>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d110      	bne.n	8000f9a <PID_Compute+0x9a>
			pid_output_sum -= pid_kp_1 * input_d;
 8000f78:	4b7c      	ldr	r3, [pc, #496]	; (800116c <PID_Compute+0x26c>)
 8000f7a:	681c      	ldr	r4, [r3, #0]
 8000f7c:	4b7d      	ldr	r3, [pc, #500]	; (8001174 <PID_Compute+0x274>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f9f0 	bl	8000368 <__aeabi_fmul>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff f8e1 	bl	8000154 <__aeabi_fsub>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b75      	ldr	r3, [pc, #468]	; (800116c <PID_Compute+0x26c>)
 8000f98:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 8000f9a:	4b74      	ldr	r3, [pc, #464]	; (800116c <PID_Compute+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4976      	ldr	r1, [pc, #472]	; (8001178 <PID_Compute+0x278>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fb9d 	bl	80006e0 <__aeabi_fcmpgt>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <PID_Compute+0xb4>
			pid_output_sum = 1000.0f;
 8000fac:	4b6f      	ldr	r3, [pc, #444]	; (800116c <PID_Compute+0x26c>)
 8000fae:	4a72      	ldr	r2, [pc, #456]	; (8001178 <PID_Compute+0x278>)
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e00b      	b.n	8000fcc <PID_Compute+0xcc>
		}else if(pid_output_sum < -1000.0f){
 8000fb4:	4b6d      	ldr	r3, [pc, #436]	; (800116c <PID_Compute+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4970      	ldr	r1, [pc, #448]	; (800117c <PID_Compute+0x27c>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fb72 	bl	80006a4 <__aeabi_fcmplt>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <PID_Compute+0xcc>
			pid_output_sum = -1000.0f;
 8000fc6:	4b69      	ldr	r3, [pc, #420]	; (800116c <PID_Compute+0x26c>)
 8000fc8:	4a6c      	ldr	r2, [pc, #432]	; (800117c <PID_Compute+0x27c>)
 8000fca:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8000fcc:	4b68      	ldr	r3, [pc, #416]	; (8001170 <PID_Compute+0x270>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d107      	bne.n	8000fe4 <PID_Compute+0xe4>
			output = pid_kp_1 * error;
 8000fd4:	4b67      	ldr	r3, [pc, #412]	; (8001174 <PID_Compute+0x274>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff f9c4 	bl	8000368 <__aeabi_fmul>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_1 * input_d;
 8000fe4:	4b61      	ldr	r3, [pc, #388]	; (800116c <PID_Compute+0x26c>)
 8000fe6:	681c      	ldr	r4, [r3, #0]
 8000fe8:	4b65      	ldr	r3, [pc, #404]	; (8001180 <PID_Compute+0x280>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6839      	ldr	r1, [r7, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff f9ba 	bl	8000368 <__aeabi_fmul>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff f8ab 	bl	8000154 <__aeabi_fsub>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4619      	mov	r1, r3
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff f8a8 	bl	8000158 <__addsf3>
 8001008:	4603      	mov	r3, r0
 800100a:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800100c:	495a      	ldr	r1, [pc, #360]	; (8001178 <PID_Compute+0x278>)
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff fb66 	bl	80006e0 <__aeabi_fcmpgt>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <PID_Compute+0x120>
			output = 1000.0f;
 800101a:	4b57      	ldr	r3, [pc, #348]	; (8001178 <PID_Compute+0x278>)
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e12c      	b.n	800127a <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001020:	4956      	ldr	r1, [pc, #344]	; (800117c <PID_Compute+0x27c>)
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff fb3e 	bl	80006a4 <__aeabi_fcmplt>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8125 	beq.w	800127a <PID_Compute+0x37a>
			output = -1000.0f;
 8001030:	4b52      	ldr	r3, [pc, #328]	; (800117c <PID_Compute+0x27c>)
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e121      	b.n	800127a <PID_Compute+0x37a>
		}
	}else if((error < pid_split_1) && (error >= pid_split_2)){
 8001036:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <PID_Compute+0x264>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f940 	bl	80002c0 <__aeabi_i2f>
 8001040:	4603      	mov	r3, r0
 8001042:	4619      	mov	r1, r3
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fb2d 	bl	80006a4 <__aeabi_fcmplt>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80a1 	beq.w	8001194 <PID_Compute+0x294>
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <PID_Compute+0x284>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f932 	bl	80002c0 <__aeabi_i2f>
 800105c:	4603      	mov	r3, r0
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fb33 	bl	80006cc <__aeabi_fcmpge>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 8093 	beq.w	8001194 <PID_Compute+0x294>
		pid_output_sum += pid_ki_2 * error;
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <PID_Compute+0x288>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f977 	bl	8000368 <__aeabi_fmul>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <PID_Compute+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f7ff f867 	bl	8000158 <__addsf3>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <PID_Compute+0x26c>)
 8001090:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <PID_Compute+0x270>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d110      	bne.n	80010bc <PID_Compute+0x1bc>
			pid_output_sum -= pid_kp_2 * input_d;
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <PID_Compute+0x26c>)
 800109c:	681c      	ldr	r4, [r3, #0]
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <PID_Compute+0x28c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f95f 	bl	8000368 <__aeabi_fmul>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4619      	mov	r1, r3
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff f850 	bl	8000154 <__aeabi_fsub>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <PID_Compute+0x26c>)
 80010ba:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <PID_Compute+0x26c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	492d      	ldr	r1, [pc, #180]	; (8001178 <PID_Compute+0x278>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fb0c 	bl	80006e0 <__aeabi_fcmpgt>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <PID_Compute+0x1d6>
			pid_output_sum = 1000.0f;
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <PID_Compute+0x26c>)
 80010d0:	4a29      	ldr	r2, [pc, #164]	; (8001178 <PID_Compute+0x278>)
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e00b      	b.n	80010ee <PID_Compute+0x1ee>
		}else if(pid_output_sum < -1000.0f){
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <PID_Compute+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4928      	ldr	r1, [pc, #160]	; (800117c <PID_Compute+0x27c>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fae1 	bl	80006a4 <__aeabi_fcmplt>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <PID_Compute+0x1ee>
			pid_output_sum = -1000.0f;
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <PID_Compute+0x26c>)
 80010ea:	4a24      	ldr	r2, [pc, #144]	; (800117c <PID_Compute+0x27c>)
 80010ec:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <PID_Compute+0x270>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d107      	bne.n	8001106 <PID_Compute+0x206>
			output = pid_kp_2 * error;
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <PID_Compute+0x28c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff f933 	bl	8000368 <__aeabi_fmul>
 8001102:	4603      	mov	r3, r0
 8001104:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_2 * input_d;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <PID_Compute+0x26c>)
 8001108:	681c      	ldr	r4, [r3, #0]
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <PID_Compute+0x290>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f929 	bl	8000368 <__aeabi_fmul>
 8001116:	4603      	mov	r3, r0
 8001118:	4619      	mov	r1, r3
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff f81a 	bl	8000154 <__aeabi_fsub>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff f817 	bl	8000158 <__addsf3>
 800112a:	4603      	mov	r3, r0
 800112c:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800112e:	4912      	ldr	r1, [pc, #72]	; (8001178 <PID_Compute+0x278>)
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff fad5 	bl	80006e0 <__aeabi_fcmpgt>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <PID_Compute+0x242>
			output = 1000.0f;
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <PID_Compute+0x278>)
 800113e:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001140:	e09b      	b.n	800127a <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <PID_Compute+0x27c>)
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff faad 	bl	80006a4 <__aeabi_fcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d100      	bne.n	8001152 <PID_Compute+0x252>
		if(output > 1000.0f){
 8001150:	e093      	b.n	800127a <PID_Compute+0x37a>
			output = -1000.0f;
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <PID_Compute+0x27c>)
 8001154:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001156:	e090      	b.n	800127a <PID_Compute+0x37a>
 8001158:	200001dc 	.word	0x200001dc
 800115c:	20000024 	.word	0x20000024
 8001160:	200001e4 	.word	0x200001e4
 8001164:	2000001c 	.word	0x2000001c
 8001168:	200001cc 	.word	0x200001cc
 800116c:	200001e8 	.word	0x200001e8
 8001170:	20000020 	.word	0x20000020
 8001174:	20000004 	.word	0x20000004
 8001178:	447a0000 	.word	0x447a0000
 800117c:	c47a0000 	.word	0xc47a0000
 8001180:	20000008 	.word	0x20000008
 8001184:	2000001e 	.word	0x2000001e
 8001188:	200001d0 	.word	0x200001d0
 800118c:	2000000c 	.word	0x2000000c
 8001190:	20000010 	.word	0x20000010
		}
	}else{
		pid_output_sum += pid_ki_3 * error;
 8001194:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <PID_Compute+0x390>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f8e4 	bl	8000368 <__aeabi_fmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <PID_Compute+0x394>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f7fe ffd4 	bl	8000158 <__addsf3>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <PID_Compute+0x394>)
 80011b6:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 80011b8:	4b37      	ldr	r3, [pc, #220]	; (8001298 <PID_Compute+0x398>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d110      	bne.n	80011e2 <PID_Compute+0x2e2>
			pid_output_sum -= pid_kp_3 * input_d;
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <PID_Compute+0x394>)
 80011c2:	681c      	ldr	r4, [r3, #0]
 80011c4:	4b35      	ldr	r3, [pc, #212]	; (800129c <PID_Compute+0x39c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f8cc 	bl	8000368 <__aeabi_fmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	4620      	mov	r0, r4
 80011d6:	f7fe ffbd 	bl	8000154 <__aeabi_fsub>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <PID_Compute+0x394>)
 80011e0:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80011e2:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <PID_Compute+0x394>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	492e      	ldr	r1, [pc, #184]	; (80012a0 <PID_Compute+0x3a0>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fa79 	bl	80006e0 <__aeabi_fcmpgt>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <PID_Compute+0x2fc>
			pid_output_sum = 1000.0f;
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <PID_Compute+0x394>)
 80011f6:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <PID_Compute+0x3a0>)
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e00b      	b.n	8001214 <PID_Compute+0x314>
		}else if(pid_output_sum < -1000.0f){
 80011fc:	4b25      	ldr	r3, [pc, #148]	; (8001294 <PID_Compute+0x394>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4928      	ldr	r1, [pc, #160]	; (80012a4 <PID_Compute+0x3a4>)
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fa4e 	bl	80006a4 <__aeabi_fcmplt>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <PID_Compute+0x314>
			pid_output_sum = -1000.0f;
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <PID_Compute+0x394>)
 8001210:	4a24      	ldr	r2, [pc, #144]	; (80012a4 <PID_Compute+0x3a4>)
 8001212:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <PID_Compute+0x398>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <PID_Compute+0x32c>
			output = pid_kp_3 * error;
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <PID_Compute+0x39c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff f8a0 	bl	8000368 <__aeabi_fmul>
 8001228:	4603      	mov	r3, r0
 800122a:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_3 * input_d;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <PID_Compute+0x394>)
 800122e:	681c      	ldr	r4, [r3, #0]
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <PID_Compute+0x3a8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6839      	ldr	r1, [r7, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f896 	bl	8000368 <__aeabi_fmul>
 800123c:	4603      	mov	r3, r0
 800123e:	4619      	mov	r1, r3
 8001240:	4620      	mov	r0, r4
 8001242:	f7fe ff87 	bl	8000154 <__aeabi_fsub>
 8001246:	4603      	mov	r3, r0
 8001248:	4619      	mov	r1, r3
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f7fe ff84 	bl	8000158 <__addsf3>
 8001250:	4603      	mov	r3, r0
 8001252:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001254:	4912      	ldr	r1, [pc, #72]	; (80012a0 <PID_Compute+0x3a0>)
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fa42 	bl	80006e0 <__aeabi_fcmpgt>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <PID_Compute+0x368>
			output = 1000.0f;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <PID_Compute+0x3a0>)
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e008      	b.n	800127a <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001268:	490e      	ldr	r1, [pc, #56]	; (80012a4 <PID_Compute+0x3a4>)
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff fa1a 	bl	80006a4 <__aeabi_fcmplt>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <PID_Compute+0x37a>
			output = -1000.0f;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <PID_Compute+0x3a4>)
 8001278:	60fb      	str	r3, [r7, #12]
		}
	}

	pid_output = output;
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <PID_Compute+0x3ac>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6013      	str	r3, [r2, #0]
	pid_last_input = input;
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <PID_Compute+0x3b0>)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	6013      	str	r3, [r2, #0]
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop
 8001290:	200001d4 	.word	0x200001d4
 8001294:	200001e8 	.word	0x200001e8
 8001298:	20000020 	.word	0x20000020
 800129c:	20000014 	.word	0x20000014
 80012a0:	447a0000 	.word	0x447a0000
 80012a4:	c47a0000 	.word	0xc47a0000
 80012a8:	20000018 	.word	0x20000018
 80012ac:	200001e0 	.word	0x200001e0
 80012b0:	200001e4 	.word	0x200001e4

080012b4 <PID_Start>:
void PID_Start(){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	pid_last_input = pid_input;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <PID_Start+0x30>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <PID_Start+0x34>)
 80012be:	6013      	str	r3, [r2, #0]
	pid_output_sum = 0;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <PID_Start+0x38>)
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    PID_Set_Sampling_Time(pid_sampling_time);
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <PID_Start+0x3c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fdfc 	bl	8000ecc <PID_Set_Sampling_Time>
	PID_Timer_Restart();
 80012d4:	f7ff fdc8 	bl	8000e68 <PID_Timer_Restart>
	pid_running = 1;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <PID_Start+0x40>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001dc 	.word	0x200001dc
 80012e8:	200001e4 	.word	0x200001e4
 80012ec:	200001e8 	.word	0x200001e8
 80012f0:	20000002 	.word	0x20000002
 80012f4:	200001d8 	.word	0x200001d8

080012f8 <PID_Stop>:
void PID_Stop(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	PID_Timer_Stop();
 80012fc:	f7ff fdaa 	bl	8000e54 <PID_Timer_Stop>
	PID_Ready(0);
 8001300:	f04f 0000 	mov.w	r0, #0
 8001304:	f7ff fa68 	bl	80007d8 <PID_Ready>
	pid_running = 0;
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <PID_Stop+0x1c>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001d8 	.word	0x200001d8

08001318 <Potentiometer_ADC_Interrupt>:
uint32_t potentiometer_adctmp = 0;
uint16_t potentiometer_adccnt = 0;
uint8_t potentiometer_init_cplt = 0;
float potentiometer_position = 0;

void Potentiometer_ADC_Interrupt(){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	potentiometer_adctmp += HAL_ADC_GetValue(&hadc1);
 800131c:	4816      	ldr	r0, [pc, #88]	; (8001378 <Potentiometer_ADC_Interrupt+0x60>)
 800131e:	f001 fe4d 	bl	8002fbc <HAL_ADC_GetValue>
 8001322:	4602      	mov	r2, r0
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <Potentiometer_ADC_Interrupt+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4413      	add	r3, r2
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <Potentiometer_ADC_Interrupt+0x64>)
 800132c:	6013      	str	r3, [r2, #0]
	potentiometer_adccnt++;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <Potentiometer_ADC_Interrupt+0x68>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <Potentiometer_ADC_Interrupt+0x68>)
 8001338:	801a      	strh	r2, [r3, #0]
	if(potentiometer_adccnt == POTENTIOMETER_SAMPLE_CNT){
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <Potentiometer_ADC_Interrupt+0x68>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d115      	bne.n	800136e <Potentiometer_ADC_Interrupt+0x56>
		potentiometer_position = (float)potentiometer_adctmp/POTENTIOMETER_SAMPLE_CNT;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <Potentiometer_ADC_Interrupt+0x64>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ffb6 	bl	80002b8 <__aeabi_ui2f>
 800134c:	4603      	mov	r3, r0
 800134e:	490d      	ldr	r1, [pc, #52]	; (8001384 <Potentiometer_ADC_Interrupt+0x6c>)
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8bd 	bl	80004d0 <__aeabi_fdiv>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <Potentiometer_ADC_Interrupt+0x70>)
 800135c:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 800135e:	f7ff f9ef 	bl	8000740 <Potentiometer_Ready>
		potentiometer_adccnt = 0;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <Potentiometer_ADC_Interrupt+0x68>)
 8001364:	2200      	movs	r2, #0
 8001366:	801a      	strh	r2, [r3, #0]
		potentiometer_adctmp = 0;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <Potentiometer_ADC_Interrupt+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
	}
	potentiometer_init_cplt = 1;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <Potentiometer_ADC_Interrupt+0x74>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000398 	.word	0x20000398
 800137c:	200001f0 	.word	0x200001f0
 8001380:	200001f4 	.word	0x200001f4
 8001384:	42c80000 	.word	0x42c80000
 8001388:	200001f8 	.word	0x200001f8
 800138c:	200001f6 	.word	0x200001f6

08001390 <Potentiometer_Init>:

void Potentiometer_Init(){
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001394:	bf00      	nop
 8001396:	4808      	ldr	r0, [pc, #32]	; (80013b8 <Potentiometer_Init+0x28>)
 8001398:	f002 f87c 	bl	8003494 <HAL_ADCEx_Calibration_Start>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f9      	bne.n	8001396 <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <Potentiometer_Init+0x28>)
 80013a4:	f001 fd54 	bl	8002e50 <HAL_ADC_Start_IT>
	while(!potentiometer_init_cplt);
 80013a8:	bf00      	nop
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <Potentiometer_Init+0x2c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0fb      	beq.n	80013aa <Potentiometer_Init+0x1a>
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000398 	.word	0x20000398
 80013bc:	200001f6 	.word	0x200001f6

080013c0 <Settings_Read>:
extern uint16_t pid_split_2;
extern uint8_t pid_sampling_time;

uint8_t settings[SETTINGS_TOTAL_LENGTH];

void Settings_Read(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	//Read
	Flash_Read(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 80013c6:	2240      	movs	r2, #64	; 0x40
 80013c8:	49a1      	ldr	r1, [pc, #644]	; (8001650 <Settings_Read+0x290>)
 80013ca:	48a2      	ldr	r0, [pc, #648]	; (8001654 <Settings_Read+0x294>)
 80013cc:	f7ff fab4 	bl	8000938 <Flash_Read>
	//Get CRC
	uint32_t crc = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&crc, (uint32_t)&settings[SETTINGS_TOTAL_LENGTH - 4]);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4aa0      	ldr	r2, [pc, #640]	; (8001658 <Settings_Read+0x298>)
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fb68 	bl	8000ab0 <General_Copy_32_Bit>
	//If CRC is correct
	if(HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1) == crc){
 80013e0:	220f      	movs	r2, #15
 80013e2:	499c      	ldr	r1, [pc, #624]	; (8001654 <Settings_Read+0x294>)
 80013e4:	489d      	ldr	r0, [pc, #628]	; (800165c <Settings_Read+0x29c>)
 80013e6:	f002 fa34 	bl	8003852 <HAL_CRC_Calculate>
 80013ea:	4602      	mov	r2, r0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	f040 823d 	bne.w	800186e <Settings_Read+0x4ae>
		//Parse
		General_Copy_16_Bit((uint32_t)&potentiometer_min, (uint32_t)&settings[0]);
 80013f4:	4b9a      	ldr	r3, [pc, #616]	; (8001660 <Settings_Read+0x2a0>)
 80013f6:	4a97      	ldr	r2, [pc, #604]	; (8001654 <Settings_Read+0x294>)
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fb75 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&potentiometer_max, (uint32_t)&settings[2]);
 8001400:	4b98      	ldr	r3, [pc, #608]	; (8001664 <Settings_Read+0x2a4>)
 8001402:	4a99      	ldr	r2, [pc, #612]	; (8001668 <Settings_Read+0x2a8>)
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fb6f 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&motor_max_power, (uint32_t)&settings[4]);
 800140c:	4b97      	ldr	r3, [pc, #604]	; (800166c <Settings_Read+0x2ac>)
 800140e:	4a98      	ldr	r2, [pc, #608]	; (8001670 <Settings_Read+0x2b0>)
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb69 	bl	8000aea <General_Copy_16_Bit>
		motor_invert = settings[6];
 8001418:	4b8e      	ldr	r3, [pc, #568]	; (8001654 <Settings_Read+0x294>)
 800141a:	799a      	ldrb	r2, [r3, #6]
 800141c:	4b95      	ldr	r3, [pc, #596]	; (8001674 <Settings_Read+0x2b4>)
 800141e:	701a      	strb	r2, [r3, #0]
		signal_ignore = settings[7];
 8001420:	4b8c      	ldr	r3, [pc, #560]	; (8001654 <Settings_Read+0x294>)
 8001422:	79da      	ldrb	r2, [r3, #7]
 8001424:	4b94      	ldr	r3, [pc, #592]	; (8001678 <Settings_Read+0x2b8>)
 8001426:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&settings[8]);
 8001428:	4b94      	ldr	r3, [pc, #592]	; (800167c <Settings_Read+0x2bc>)
 800142a:	4a95      	ldr	r2, [pc, #596]	; (8001680 <Settings_Read+0x2c0>)
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fb3e 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&settings[12]);
 8001434:	4b93      	ldr	r3, [pc, #588]	; (8001684 <Settings_Read+0x2c4>)
 8001436:	4a94      	ldr	r2, [pc, #592]	; (8001688 <Settings_Read+0x2c8>)
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fb38 	bl	8000ab0 <General_Copy_32_Bit>
		led_mode = settings[16];
 8001440:	4b84      	ldr	r3, [pc, #528]	; (8001654 <Settings_Read+0x294>)
 8001442:	7c1a      	ldrb	r2, [r3, #16]
 8001444:	4b91      	ldr	r3, [pc, #580]	; (800168c <Settings_Read+0x2cc>)
 8001446:	701a      	strb	r2, [r3, #0]
		pid_on = settings[17];
 8001448:	4b82      	ldr	r3, [pc, #520]	; (8001654 <Settings_Read+0x294>)
 800144a:	7c5a      	ldrb	r2, [r3, #17]
 800144c:	4b90      	ldr	r3, [pc, #576]	; (8001690 <Settings_Read+0x2d0>)
 800144e:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&settings[18]);
 8001450:	4b90      	ldr	r3, [pc, #576]	; (8001694 <Settings_Read+0x2d4>)
 8001452:	4a91      	ldr	r2, [pc, #580]	; (8001698 <Settings_Read+0x2d8>)
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fb2a 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&settings[22]);
 800145c:	4b8f      	ldr	r3, [pc, #572]	; (800169c <Settings_Read+0x2dc>)
 800145e:	4a90      	ldr	r2, [pc, #576]	; (80016a0 <Settings_Read+0x2e0>)
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fb24 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&settings[26]);
 8001468:	4b8e      	ldr	r3, [pc, #568]	; (80016a4 <Settings_Read+0x2e4>)
 800146a:	4a8f      	ldr	r2, [pc, #572]	; (80016a8 <Settings_Read+0x2e8>)
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fb1e 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&settings[30]);
 8001474:	4b8d      	ldr	r3, [pc, #564]	; (80016ac <Settings_Read+0x2ec>)
 8001476:	4a8e      	ldr	r2, [pc, #568]	; (80016b0 <Settings_Read+0x2f0>)
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fb18 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&settings[34]);
 8001480:	4b8c      	ldr	r3, [pc, #560]	; (80016b4 <Settings_Read+0x2f4>)
 8001482:	4a8d      	ldr	r2, [pc, #564]	; (80016b8 <Settings_Read+0x2f8>)
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fb12 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&settings[38]);
 800148c:	4b8b      	ldr	r3, [pc, #556]	; (80016bc <Settings_Read+0x2fc>)
 800148e:	4a8c      	ldr	r2, [pc, #560]	; (80016c0 <Settings_Read+0x300>)
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fb0c 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&settings[42]);
 8001498:	4b8a      	ldr	r3, [pc, #552]	; (80016c4 <Settings_Read+0x304>)
 800149a:	4a8b      	ldr	r2, [pc, #556]	; (80016c8 <Settings_Read+0x308>)
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fb06 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&settings[46]);
 80014a4:	4b89      	ldr	r3, [pc, #548]	; (80016cc <Settings_Read+0x30c>)
 80014a6:	4a8a      	ldr	r2, [pc, #552]	; (80016d0 <Settings_Read+0x310>)
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fb00 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&settings[50]);
 80014b0:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <Settings_Read+0x314>)
 80014b2:	4a89      	ldr	r2, [pc, #548]	; (80016d8 <Settings_Read+0x318>)
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fafa 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&settings[54]);
 80014bc:	4b87      	ldr	r3, [pc, #540]	; (80016dc <Settings_Read+0x31c>)
 80014be:	4a88      	ldr	r2, [pc, #544]	; (80016e0 <Settings_Read+0x320>)
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fb11 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&settings[56]);
 80014c8:	4b86      	ldr	r3, [pc, #536]	; (80016e4 <Settings_Read+0x324>)
 80014ca:	4a87      	ldr	r2, [pc, #540]	; (80016e8 <Settings_Read+0x328>)
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fb0b 	bl	8000aea <General_Copy_16_Bit>
		pid_sampling_time = settings[58];
 80014d4:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <Settings_Read+0x294>)
 80014d6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80014da:	4b84      	ldr	r3, [pc, #528]	; (80016ec <Settings_Read+0x32c>)
 80014dc:	701a      	strb	r2, [r3, #0]

		//Verify
		if((potentiometer_min < SETTINGS_DEF_POTENTIOMETER_MIN_MIN)||(potentiometer_min > SETTINGS_DEF_POTENTIOMETER_MIN_MAX)){
 80014de:	4b60      	ldr	r3, [pc, #384]	; (8001660 <Settings_Read+0x2a0>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 80014e6:	d302      	bcc.n	80014ee <Settings_Read+0x12e>
			potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 80014e8:	4b5d      	ldr	r3, [pc, #372]	; (8001660 <Settings_Read+0x2a0>)
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	801a      	strh	r2, [r3, #0]
		}
		if((potentiometer_max < SETTINGS_DEF_POTENTIOMETER_MAX_MIN)||(potentiometer_max > SETTINGS_DEF_POTENTIOMETER_MAX_MAX)){
 80014ee:	4b5d      	ldr	r3, [pc, #372]	; (8001664 <Settings_Read+0x2a4>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	2b7f      	cmp	r3, #127	; 0x7f
 80014f4:	d904      	bls.n	8001500 <Settings_Read+0x140>
 80014f6:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <Settings_Read+0x2a4>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014fe:	d303      	bcc.n	8001508 <Settings_Read+0x148>
			potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001500:	4b58      	ldr	r3, [pc, #352]	; (8001664 <Settings_Read+0x2a4>)
 8001502:	f640 727f 	movw	r2, #3967	; 0xf7f
 8001506:	801a      	strh	r2, [r3, #0]
		}
		if((motor_max_power < SETTINGS_DEF_MOTOR_MAX_POWER_MIN)||(motor_max_power > SETTINGS_DEF_MOTOR_MAX_POWER_MAX)){
 8001508:	4b58      	ldr	r3, [pc, #352]	; (800166c <Settings_Read+0x2ac>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001510:	d903      	bls.n	800151a <Settings_Read+0x15a>
			motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001512:	4b56      	ldr	r3, [pc, #344]	; (800166c <Settings_Read+0x2ac>)
 8001514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001518:	801a      	strh	r2, [r3, #0]
		}
		if((motor_invert != MOTOR_NORMAL) && (motor_invert != MOTOR_INVERT)){
 800151a:	4b56      	ldr	r3, [pc, #344]	; (8001674 <Settings_Read+0x2b4>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d006      	beq.n	8001530 <Settings_Read+0x170>
 8001522:	4b54      	ldr	r3, [pc, #336]	; (8001674 <Settings_Read+0x2b4>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d002      	beq.n	8001530 <Settings_Read+0x170>
			motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 800152a:	4b52      	ldr	r3, [pc, #328]	; (8001674 <Settings_Read+0x2b4>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
		}
		if((signal_ignore != GENERAL_TRUE) && (signal_ignore != GENERAL_FALSE)){
 8001530:	4b51      	ldr	r3, [pc, #324]	; (8001678 <Settings_Read+0x2b8>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d006      	beq.n	8001546 <Settings_Read+0x186>
 8001538:	4b4f      	ldr	r3, [pc, #316]	; (8001678 <Settings_Read+0x2b8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <Settings_Read+0x186>
			signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 8001540:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <Settings_Read+0x2b8>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
		}
		if((signal_length < SETTINGS_DEF_SIGNAL_LENGTH_MIN)||(signal_length > SETTINGS_DEF_SIGNAL_LENGTH_MAX)){
 8001546:	4b4d      	ldr	r3, [pc, #308]	; (800167c <Settings_Read+0x2bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f8a8 	bl	80006a4 <__aeabi_fcmplt>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d108      	bne.n	800156c <Settings_Read+0x1ac>
 800155a:	4b48      	ldr	r3, [pc, #288]	; (800167c <Settings_Read+0x2bc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4964      	ldr	r1, [pc, #400]	; (80016f0 <Settings_Read+0x330>)
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff f8bd 	bl	80006e0 <__aeabi_fcmpgt>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <Settings_Read+0x1b4>
			signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 800156c:	4b43      	ldr	r3, [pc, #268]	; (800167c <Settings_Read+0x2bc>)
 800156e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001572:	601a      	str	r2, [r3, #0]
		}
		if((signal_timeout < SETTINGS_DEF_SIGNAL_TIMEOUT_MIN)||(signal_timeout > SETTINGS_DEF_SIGNAL_TIMEOUT_MAX)){
 8001574:	4b43      	ldr	r3, [pc, #268]	; (8001684 <Settings_Read+0x2c4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d903      	bls.n	8001584 <Settings_Read+0x1c4>
 800157c:	4b41      	ldr	r3, [pc, #260]	; (8001684 <Settings_Read+0x2c4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2bc8      	cmp	r3, #200	; 0xc8
 8001582:	d902      	bls.n	800158a <Settings_Read+0x1ca>
			signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8001584:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <Settings_Read+0x2c4>)
 8001586:	2219      	movs	r2, #25
 8001588:	601a      	str	r2, [r3, #0]
		}
		if((led_mode != LED_MODE_OFF) && (led_mode != LED_MODE_POWER) && (led_mode != LED_MODE_SIGNAL) && (led_mode != LED_MODE_POSITION_CHANGE)){
 800158a:	4b40      	ldr	r3, [pc, #256]	; (800168c <Settings_Read+0x2cc>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00e      	beq.n	80015b0 <Settings_Read+0x1f0>
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <Settings_Read+0x2cc>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d00a      	beq.n	80015b0 <Settings_Read+0x1f0>
 800159a:	4b3c      	ldr	r3, [pc, #240]	; (800168c <Settings_Read+0x2cc>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d006      	beq.n	80015b0 <Settings_Read+0x1f0>
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <Settings_Read+0x2cc>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d002      	beq.n	80015b0 <Settings_Read+0x1f0>
			led_mode = SETTINGS_DEF_LED_MODE_DEF;
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <Settings_Read+0x2cc>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
		}
		if((pid_on != PID_ON_M) && (pid_on != PID_ON_E)){
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <Settings_Read+0x2d0>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <Settings_Read+0x206>
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <Settings_Read+0x2d0>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d002      	beq.n	80015c6 <Settings_Read+0x206>
			pid_on = SETTINGS_DEF_PID_ON_DEF;
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <Settings_Read+0x2d0>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
		}
		if((pid_kp_1 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_1 > SETTINGS_DEF_PID_KP_MAX)){
 80015c6:	4b33      	ldr	r3, [pc, #204]	; (8001694 <Settings_Read+0x2d4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f04f 0100 	mov.w	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff f868 	bl	80006a4 <__aeabi_fcmplt>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <Settings_Read+0x22c>
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <Settings_Read+0x2d4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4945      	ldr	r1, [pc, #276]	; (80016f4 <Settings_Read+0x334>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff f87d 	bl	80006e0 <__aeabi_fcmpgt>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <Settings_Read+0x234>
			pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <Settings_Read+0x2d4>)
 80015ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015f2:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_1 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_1 > SETTINGS_DEF_PID_KI_MAX)){
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <Settings_Read+0x2dc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff f851 	bl	80006a4 <__aeabi_fcmplt>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <Settings_Read+0x25a>
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <Settings_Read+0x2dc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4939      	ldr	r1, [pc, #228]	; (80016f4 <Settings_Read+0x334>)
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff f866 	bl	80006e0 <__aeabi_fcmpgt>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <Settings_Read+0x262>
			pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <Settings_Read+0x2dc>)
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_1 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_1 > SETTINGS_DEF_PID_KD_MAX)){
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <Settings_Read+0x2e4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f83a 	bl	80006a4 <__aeabi_fcmplt>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d108      	bne.n	8001648 <Settings_Read+0x288>
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <Settings_Read+0x2e4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	492e      	ldr	r1, [pc, #184]	; (80016f4 <Settings_Read+0x334>)
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff f84f 	bl	80006e0 <__aeabi_fcmpgt>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d059      	beq.n	80016fc <Settings_Read+0x33c>
			pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <Settings_Read+0x2e4>)
 800164a:	4a2b      	ldr	r2, [pc, #172]	; (80016f8 <Settings_Read+0x338>)
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e055      	b.n	80016fc <Settings_Read+0x33c>
 8001650:	0800fc00 	.word	0x0800fc00
 8001654:	200001fc 	.word	0x200001fc
 8001658:	20000238 	.word	0x20000238
 800165c:	200003c8 	.word	0x200003c8
 8001660:	200001ec 	.word	0x200001ec
 8001664:	200001ee 	.word	0x200001ee
 8001668:	200001fe 	.word	0x200001fe
 800166c:	20000000 	.word	0x20000000
 8001670:	20000200 	.word	0x20000200
 8001674:	200001c7 	.word	0x200001c7
 8001678:	2000023c 	.word	0x2000023c
 800167c:	20000240 	.word	0x20000240
 8001680:	20000204 	.word	0x20000204
 8001684:	20000244 	.word	0x20000244
 8001688:	20000208 	.word	0x20000208
 800168c:	200001c4 	.word	0x200001c4
 8001690:	20000020 	.word	0x20000020
 8001694:	20000004 	.word	0x20000004
 8001698:	2000020e 	.word	0x2000020e
 800169c:	200001cc 	.word	0x200001cc
 80016a0:	20000212 	.word	0x20000212
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000216 	.word	0x20000216
 80016ac:	2000000c 	.word	0x2000000c
 80016b0:	2000021a 	.word	0x2000021a
 80016b4:	200001d0 	.word	0x200001d0
 80016b8:	2000021e 	.word	0x2000021e
 80016bc:	20000010 	.word	0x20000010
 80016c0:	20000222 	.word	0x20000222
 80016c4:	20000014 	.word	0x20000014
 80016c8:	20000226 	.word	0x20000226
 80016cc:	200001d4 	.word	0x200001d4
 80016d0:	2000022a 	.word	0x2000022a
 80016d4:	20000018 	.word	0x20000018
 80016d8:	2000022e 	.word	0x2000022e
 80016dc:	2000001c 	.word	0x2000001c
 80016e0:	20000232 	.word	0x20000232
 80016e4:	2000001e 	.word	0x2000001e
 80016e8:	20000234 	.word	0x20000234
 80016ec:	20000002 	.word	0x20000002
 80016f0:	40a00000 	.word	0x40a00000
 80016f4:	42c80000 	.word	0x42c80000
 80016f8:	40400000 	.word	0x40400000
		}
		if((pid_kp_2 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_2 > SETTINGS_DEF_PID_KP_MAX)){
 80016fc:	4b83      	ldr	r3, [pc, #524]	; (800190c <Settings_Read+0x54c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ffcd 	bl	80006a4 <__aeabi_fcmplt>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d108      	bne.n	8001722 <Settings_Read+0x362>
 8001710:	4b7e      	ldr	r3, [pc, #504]	; (800190c <Settings_Read+0x54c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	497e      	ldr	r1, [pc, #504]	; (8001910 <Settings_Read+0x550>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ffe2 	bl	80006e0 <__aeabi_fcmpgt>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <Settings_Read+0x36a>
			pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 8001722:	4b7a      	ldr	r3, [pc, #488]	; (800190c <Settings_Read+0x54c>)
 8001724:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001728:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_2 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_2 > SETTINGS_DEF_PID_KI_MAX)){
 800172a:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <Settings_Read+0x554>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ffb6 	bl	80006a4 <__aeabi_fcmplt>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d108      	bne.n	8001750 <Settings_Read+0x390>
 800173e:	4b75      	ldr	r3, [pc, #468]	; (8001914 <Settings_Read+0x554>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4973      	ldr	r1, [pc, #460]	; (8001910 <Settings_Read+0x550>)
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ffcb 	bl	80006e0 <__aeabi_fcmpgt>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <Settings_Read+0x398>
			pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 8001750:	4b70      	ldr	r3, [pc, #448]	; (8001914 <Settings_Read+0x554>)
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_2 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_2 > SETTINGS_DEF_PID_KD_MAX)){
 8001758:	4b6f      	ldr	r3, [pc, #444]	; (8001918 <Settings_Read+0x558>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f04f 0100 	mov.w	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe ff9f 	bl	80006a4 <__aeabi_fcmplt>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d108      	bne.n	800177e <Settings_Read+0x3be>
 800176c:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <Settings_Read+0x558>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4967      	ldr	r1, [pc, #412]	; (8001910 <Settings_Read+0x550>)
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe ffb4 	bl	80006e0 <__aeabi_fcmpgt>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <Settings_Read+0x3c4>
			pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 800177e:	4b66      	ldr	r3, [pc, #408]	; (8001918 <Settings_Read+0x558>)
 8001780:	4a66      	ldr	r2, [pc, #408]	; (800191c <Settings_Read+0x55c>)
 8001782:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_3 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_3 > SETTINGS_DEF_PID_KP_MAX)){
 8001784:	4b66      	ldr	r3, [pc, #408]	; (8001920 <Settings_Read+0x560>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f04f 0100 	mov.w	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe ff89 	bl	80006a4 <__aeabi_fcmplt>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d108      	bne.n	80017aa <Settings_Read+0x3ea>
 8001798:	4b61      	ldr	r3, [pc, #388]	; (8001920 <Settings_Read+0x560>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	495c      	ldr	r1, [pc, #368]	; (8001910 <Settings_Read+0x550>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe ff9e 	bl	80006e0 <__aeabi_fcmpgt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <Settings_Read+0x3f2>
			pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80017aa:	4b5d      	ldr	r3, [pc, #372]	; (8001920 <Settings_Read+0x560>)
 80017ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017b0:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_3 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_3 > SETTINGS_DEF_PID_KI_MAX)){
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <Settings_Read+0x564>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe ff72 	bl	80006a4 <__aeabi_fcmplt>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d108      	bne.n	80017d8 <Settings_Read+0x418>
 80017c6:	4b57      	ldr	r3, [pc, #348]	; (8001924 <Settings_Read+0x564>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4951      	ldr	r1, [pc, #324]	; (8001910 <Settings_Read+0x550>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe ff87 	bl	80006e0 <__aeabi_fcmpgt>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <Settings_Read+0x420>
			pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80017d8:	4b52      	ldr	r3, [pc, #328]	; (8001924 <Settings_Read+0x564>)
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_3 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_3 > SETTINGS_DEF_PID_KD_MAX)){
 80017e0:	4b51      	ldr	r3, [pc, #324]	; (8001928 <Settings_Read+0x568>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe ff5b 	bl	80006a4 <__aeabi_fcmplt>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d108      	bne.n	8001806 <Settings_Read+0x446>
 80017f4:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <Settings_Read+0x568>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4945      	ldr	r1, [pc, #276]	; (8001910 <Settings_Read+0x550>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe ff70 	bl	80006e0 <__aeabi_fcmpgt>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <Settings_Read+0x44c>
			pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 8001806:	4b48      	ldr	r3, [pc, #288]	; (8001928 <Settings_Read+0x568>)
 8001808:	4a44      	ldr	r2, [pc, #272]	; (800191c <Settings_Read+0x55c>)
 800180a:	601a      	str	r2, [r3, #0]
		}
		if((pid_split_1 < SETTINGS_DEF_PID_SPLIT_1_MIN)||(pid_split_1 > SETTINGS_DEF_PID_SPLIT_1_MAX)){
 800180c:	4b47      	ldr	r3, [pc, #284]	; (800192c <Settings_Read+0x56c>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001814:	d303      	bcc.n	800181e <Settings_Read+0x45e>
			pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 8001816:	4b45      	ldr	r3, [pc, #276]	; (800192c <Settings_Read+0x56c>)
 8001818:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800181c:	801a      	strh	r2, [r3, #0]
		}
		if((pid_split_2 < SETTINGS_DEF_PID_SPLIT_2_MIN)||(pid_split_2 > SETTINGS_DEF_PID_SPLIT_2_MAX)){
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <Settings_Read+0x570>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001826:	d303      	bcc.n	8001830 <Settings_Read+0x470>
			pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 8001828:	4b41      	ldr	r3, [pc, #260]	; (8001930 <Settings_Read+0x570>)
 800182a:	f640 32fc 	movw	r2, #3068	; 0xbfc
 800182e:	801a      	strh	r2, [r3, #0]
		}
		if((pid_sampling_time < SETTINGS_DEF_PID_SAMPLING_TIME_MIN)||(pid_sampling_time > SETTINGS_DEF_PID_SAMPLING_TIME_MAX)){
 8001830:	4b40      	ldr	r3, [pc, #256]	; (8001934 <Settings_Read+0x574>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fd43 	bl	80002c0 <__aeabi_i2f>
 800183a:	4603      	mov	r3, r0
 800183c:	493e      	ldr	r1, [pc, #248]	; (8001938 <Settings_Read+0x578>)
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe ff30 	bl	80006a4 <__aeabi_fcmplt>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10d      	bne.n	8001866 <Settings_Read+0x4a6>
 800184a:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <Settings_Read+0x574>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fd36 	bl	80002c0 <__aeabi_i2f>
 8001854:	4603      	mov	r3, r0
 8001856:	492e      	ldr	r1, [pc, #184]	; (8001910 <Settings_Read+0x550>)
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe ff41 	bl	80006e0 <__aeabi_fcmpgt>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d100      	bne.n	8001866 <Settings_Read+0x4a6>
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
	}
}
 8001864:	e04d      	b.n	8001902 <Settings_Read+0x542>
			pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 8001866:	4b33      	ldr	r3, [pc, #204]	; (8001934 <Settings_Read+0x574>)
 8001868:	2205      	movs	r2, #5
 800186a:	701a      	strb	r2, [r3, #0]
}
 800186c:	e049      	b.n	8001902 <Settings_Read+0x542>
		potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <Settings_Read+0x57c>)
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	801a      	strh	r2, [r3, #0]
		potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <Settings_Read+0x580>)
 8001876:	f640 727f 	movw	r2, #3967	; 0xf7f
 800187a:	801a      	strh	r2, [r3, #0]
		motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <Settings_Read+0x584>)
 800187e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001882:	801a      	strh	r2, [r3, #0]
		motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <Settings_Read+0x588>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
		signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <Settings_Read+0x58c>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
		signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 8001890:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <Settings_Read+0x590>)
 8001892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001896:	601a      	str	r2, [r3, #0]
		signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <Settings_Read+0x594>)
 800189a:	2219      	movs	r2, #25
 800189c:	601a      	str	r2, [r3, #0]
		led_mode = SETTINGS_DEF_LED_MODE_DEF;
 800189e:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <Settings_Read+0x598>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
		pid_on = SETTINGS_DEF_PID_ON_DEF;
 80018a4:	4b2d      	ldr	r3, [pc, #180]	; (800195c <Settings_Read+0x59c>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
		pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <Settings_Read+0x5a0>)
 80018ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018b0:	601a      	str	r2, [r3, #0]
		pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <Settings_Read+0x5a4>)
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
		pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <Settings_Read+0x5a8>)
 80018bc:	4a17      	ldr	r2, [pc, #92]	; (800191c <Settings_Read+0x55c>)
 80018be:	601a      	str	r2, [r3, #0]
		pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <Settings_Read+0x54c>)
 80018c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018c6:	601a      	str	r2, [r3, #0]
		pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <Settings_Read+0x554>)
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
		pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <Settings_Read+0x558>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <Settings_Read+0x55c>)
 80018d4:	601a      	str	r2, [r3, #0]
		pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <Settings_Read+0x560>)
 80018d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018dc:	601a      	str	r2, [r3, #0]
		pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <Settings_Read+0x564>)
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <Settings_Read+0x568>)
 80018e8:	4a0c      	ldr	r2, [pc, #48]	; (800191c <Settings_Read+0x55c>)
 80018ea:	601a      	str	r2, [r3, #0]
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <Settings_Read+0x56c>)
 80018ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018f2:	801a      	strh	r2, [r3, #0]
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <Settings_Read+0x570>)
 80018f6:	f640 32fc 	movw	r2, #3068	; 0xbfc
 80018fa:	801a      	strh	r2, [r3, #0]
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <Settings_Read+0x574>)
 80018fe:	2205      	movs	r2, #5
 8001900:	701a      	strb	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000000c 	.word	0x2000000c
 8001910:	42c80000 	.word	0x42c80000
 8001914:	200001d0 	.word	0x200001d0
 8001918:	20000010 	.word	0x20000010
 800191c:	40400000 	.word	0x40400000
 8001920:	20000014 	.word	0x20000014
 8001924:	200001d4 	.word	0x200001d4
 8001928:	20000018 	.word	0x20000018
 800192c:	2000001c 	.word	0x2000001c
 8001930:	2000001e 	.word	0x2000001e
 8001934:	20000002 	.word	0x20000002
 8001938:	40a00000 	.word	0x40a00000
 800193c:	200001ec 	.word	0x200001ec
 8001940:	200001ee 	.word	0x200001ee
 8001944:	20000000 	.word	0x20000000
 8001948:	200001c7 	.word	0x200001c7
 800194c:	2000023c 	.word	0x2000023c
 8001950:	20000240 	.word	0x20000240
 8001954:	20000244 	.word	0x20000244
 8001958:	200001c4 	.word	0x200001c4
 800195c:	20000020 	.word	0x20000020
 8001960:	20000004 	.word	0x20000004
 8001964:	200001cc 	.word	0x200001cc
 8001968:	20000008 	.word	0x20000008

0800196c <Settings_Write>:
void Settings_Write(){
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	General_Copy_16_Bit((uint32_t)&settings[0], (uint32_t)&potentiometer_min);
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <Settings_Write+0x124>)
 8001974:	4a47      	ldr	r2, [pc, #284]	; (8001a94 <Settings_Write+0x128>)
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f8b6 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[2], (uint32_t)&potentiometer_max);
 800197e:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <Settings_Write+0x12c>)
 8001980:	4a46      	ldr	r2, [pc, #280]	; (8001a9c <Settings_Write+0x130>)
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f8b0 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[4], (uint32_t)&motor_max_power);
 800198a:	4b45      	ldr	r3, [pc, #276]	; (8001aa0 <Settings_Write+0x134>)
 800198c:	4a45      	ldr	r2, [pc, #276]	; (8001aa4 <Settings_Write+0x138>)
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f8aa 	bl	8000aea <General_Copy_16_Bit>
	settings[6] = motor_invert;
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <Settings_Write+0x13c>)
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <Settings_Write+0x124>)
 800199c:	719a      	strb	r2, [r3, #6]
	settings[7] = signal_ignore;
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <Settings_Write+0x140>)
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <Settings_Write+0x124>)
 80019a4:	71da      	strb	r2, [r3, #7]
	General_Copy_32_Bit((uint32_t)&settings[8], (uint32_t)&signal_length);
 80019a6:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <Settings_Write+0x144>)
 80019a8:	4a42      	ldr	r2, [pc, #264]	; (8001ab4 <Settings_Write+0x148>)
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f87f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[12], (uint32_t)&signal_timeout);
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <Settings_Write+0x14c>)
 80019b4:	4a41      	ldr	r2, [pc, #260]	; (8001abc <Settings_Write+0x150>)
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f879 	bl	8000ab0 <General_Copy_32_Bit>
	settings[16] = led_mode;
 80019be:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <Settings_Write+0x154>)
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <Settings_Write+0x124>)
 80019c4:	741a      	strb	r2, [r3, #16]
	settings[17] = pid_on;
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <Settings_Write+0x158>)
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <Settings_Write+0x124>)
 80019cc:	745a      	strb	r2, [r3, #17]
	General_Copy_32_Bit((uint32_t)&settings[18], (uint32_t)&pid_kp_1);
 80019ce:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <Settings_Write+0x15c>)
 80019d0:	4a3e      	ldr	r2, [pc, #248]	; (8001acc <Settings_Write+0x160>)
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f86b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[22], (uint32_t)&pid_ki_1);
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <Settings_Write+0x164>)
 80019dc:	4a3d      	ldr	r2, [pc, #244]	; (8001ad4 <Settings_Write+0x168>)
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f865 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[26], (uint32_t)&pid_kd_1);
 80019e6:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <Settings_Write+0x16c>)
 80019e8:	4a3c      	ldr	r2, [pc, #240]	; (8001adc <Settings_Write+0x170>)
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f85f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[30], (uint32_t)&pid_kp_2);
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <Settings_Write+0x174>)
 80019f4:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <Settings_Write+0x178>)
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f859 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[34], (uint32_t)&pid_ki_2);
 80019fe:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <Settings_Write+0x17c>)
 8001a00:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <Settings_Write+0x180>)
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f853 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[38], (uint32_t)&pid_kd_2);
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <Settings_Write+0x184>)
 8001a0c:	4a39      	ldr	r2, [pc, #228]	; (8001af4 <Settings_Write+0x188>)
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f84d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[42], (uint32_t)&pid_kp_3);
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <Settings_Write+0x18c>)
 8001a18:	4a38      	ldr	r2, [pc, #224]	; (8001afc <Settings_Write+0x190>)
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f847 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[46], (uint32_t)&pid_ki_3);
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <Settings_Write+0x194>)
 8001a24:	4a37      	ldr	r2, [pc, #220]	; (8001b04 <Settings_Write+0x198>)
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f841 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[50], (uint32_t)&pid_kd_3);
 8001a2e:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <Settings_Write+0x19c>)
 8001a30:	4a36      	ldr	r2, [pc, #216]	; (8001b0c <Settings_Write+0x1a0>)
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f83b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&settings[54], (uint32_t)&pid_split_1);
 8001a3a:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <Settings_Write+0x1a4>)
 8001a3c:	4a35      	ldr	r2, [pc, #212]	; (8001b14 <Settings_Write+0x1a8>)
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f852 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[56], (uint32_t)&pid_split_2);
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <Settings_Write+0x1ac>)
 8001a48:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <Settings_Write+0x1b0>)
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f84c 	bl	8000aea <General_Copy_16_Bit>
	settings[58] = pid_sampling_time;
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <Settings_Write+0x1b4>)
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <Settings_Write+0x124>)
 8001a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	settings[59] = SETTINGS_CRC_PADDING;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <Settings_Write+0x124>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1);
 8001a64:	220f      	movs	r2, #15
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <Settings_Write+0x124>)
 8001a68:	482e      	ldr	r0, [pc, #184]	; (8001b24 <Settings_Write+0x1b8>)
 8001a6a:	f001 fef2 	bl	8003852 <HAL_CRC_Calculate>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&settings[60], (uint32_t)&crc);
 8001a72:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <Settings_Write+0x1bc>)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f7ff f819 	bl	8000ab0 <General_Copy_32_Bit>
	Flash_Write(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 8001a7e:	2240      	movs	r2, #64	; 0x40
 8001a80:	492a      	ldr	r1, [pc, #168]	; (8001b2c <Settings_Write+0x1c0>)
 8001a82:	4803      	ldr	r0, [pc, #12]	; (8001a90 <Settings_Write+0x124>)
 8001a84:	f7fe ff77 	bl	8000976 <Flash_Write>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200001fc 	.word	0x200001fc
 8001a94:	200001ec 	.word	0x200001ec
 8001a98:	200001fe 	.word	0x200001fe
 8001a9c:	200001ee 	.word	0x200001ee
 8001aa0:	20000200 	.word	0x20000200
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	200001c7 	.word	0x200001c7
 8001aac:	2000023c 	.word	0x2000023c
 8001ab0:	20000204 	.word	0x20000204
 8001ab4:	20000240 	.word	0x20000240
 8001ab8:	20000208 	.word	0x20000208
 8001abc:	20000244 	.word	0x20000244
 8001ac0:	200001c4 	.word	0x200001c4
 8001ac4:	20000020 	.word	0x20000020
 8001ac8:	2000020e 	.word	0x2000020e
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	20000212 	.word	0x20000212
 8001ad4:	200001cc 	.word	0x200001cc
 8001ad8:	20000216 	.word	0x20000216
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	2000021a 	.word	0x2000021a
 8001ae4:	2000000c 	.word	0x2000000c
 8001ae8:	2000021e 	.word	0x2000021e
 8001aec:	200001d0 	.word	0x200001d0
 8001af0:	20000222 	.word	0x20000222
 8001af4:	20000010 	.word	0x20000010
 8001af8:	20000226 	.word	0x20000226
 8001afc:	20000014 	.word	0x20000014
 8001b00:	2000022a 	.word	0x2000022a
 8001b04:	200001d4 	.word	0x200001d4
 8001b08:	2000022e 	.word	0x2000022e
 8001b0c:	20000018 	.word	0x20000018
 8001b10:	20000232 	.word	0x20000232
 8001b14:	2000001c 	.word	0x2000001c
 8001b18:	20000234 	.word	0x20000234
 8001b1c:	2000001e 	.word	0x2000001e
 8001b20:	20000002 	.word	0x20000002
 8001b24:	200003c8 	.word	0x200003c8
 8001b28:	20000238 	.word	0x20000238
 8001b2c:	0800fc00 	.word	0x0800fc00

08001b30 <Signal_SysTick_Interrupt>:
uint32_t signal_timeout;

uint8_t signal_present = 0;
uint32_t signal_timeout_passed_ms = 0;

void Signal_SysTick_Interrupt(){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	if(signal_present){
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <Signal_SysTick_Interrupt+0x5c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d024      	beq.n	8001b86 <Signal_SysTick_Interrupt+0x56>
		if(signal_timeout_passed_ms >= signal_timeout){
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <Signal_SysTick_Interrupt+0x60>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <Signal_SysTick_Interrupt+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d319      	bcc.n	8001b7c <Signal_SysTick_Interrupt+0x4c>
			signal_present = 0;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <Signal_SysTick_Interrupt+0x5c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <Signal_SysTick_Interrupt+0x68>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <Signal_SysTick_Interrupt+0x36>
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <Signal_SysTick_Interrupt+0x68>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d013      	beq.n	8001b86 <Signal_SysTick_Interrupt+0x56>
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <Signal_SysTick_Interrupt+0x6c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <Signal_SysTick_Interrupt+0x56>
				if(pid_running){
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <Signal_SysTick_Interrupt+0x70>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <Signal_SysTick_Interrupt+0x42>
					PID_Stop();
 8001b6e:	f7ff fbc3 	bl	80012f8 <PID_Stop>
				}
				pid_setpoint = 0;
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <Signal_SysTick_Interrupt+0x74>)
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
			}
		}else{
			signal_timeout_passed_ms++;
		}
	}
}
 8001b7a:	e004      	b.n	8001b86 <Signal_SysTick_Interrupt+0x56>
			signal_timeout_passed_ms++;
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <Signal_SysTick_Interrupt+0x60>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <Signal_SysTick_Interrupt+0x60>)
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000248 	.word	0x20000248
 8001b90:	2000024c 	.word	0x2000024c
 8001b94:	20000244 	.word	0x20000244
 8001b98:	2000023c 	.word	0x2000023c
 8001b9c:	20000254 	.word	0x20000254
 8001ba0:	200001d8 	.word	0x200001d8
 8001ba4:	20000024 	.word	0x20000024

08001ba8 <Signal_Timer_Interrupt>:
void Signal_Timer_Interrupt(){
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	signal_present = 0;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <Signal_Timer_Interrupt+0x14>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000248 	.word	0x20000248

08001bc0 <Signal_Interrupt>:
void Signal_Interrupt(){
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
	uint32_t cnt = Signal_Read_Timer();
 8001bc6:	f000 f8bd 	bl	8001d44 <Signal_Read_Timer>
 8001bca:	60f8      	str	r0, [r7, #12]
	if(Signal_Read() == SIGNAL_HIGH){
 8001bcc:	f000 f8d2 	bl	8001d74 <Signal_Read>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d108      	bne.n	8001be8 <Signal_Interrupt+0x28>
		Signal_Timer_Reset();
 8001bd6:	f000 f8c1 	bl	8001d5c <Signal_Timer_Reset>
		signal_present = 1;
 8001bda:	4b4f      	ldr	r3, [pc, #316]	; (8001d18 <Signal_Interrupt+0x158>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
		signal_timeout_passed_ms = 0;
 8001be0:	4b4e      	ldr	r3, [pc, #312]	; (8001d1c <Signal_Interrupt+0x15c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
					PID_Stop();
				}
			}
		}
	}
}
 8001be6:	e092      	b.n	8001d0e <Signal_Interrupt+0x14e>
	}else if(signal_present){
 8001be8:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <Signal_Interrupt+0x158>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 808e 	beq.w	8001d0e <Signal_Interrupt+0x14e>
		float received_length_ms  = (float)((uint32_t)cnt + (uint32_t)1) / 12000.0f;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fb5e 	bl	80002b8 <__aeabi_ui2f>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4948      	ldr	r1, [pc, #288]	; (8001d20 <Signal_Interrupt+0x160>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc65 	bl	80004d0 <__aeabi_fdiv>
 8001c06:	4603      	mov	r3, r0
 8001c08:	60bb      	str	r3, [r7, #8]
		if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8001c0a:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <Signal_Interrupt+0x164>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	68b8      	ldr	r0, [r7, #8]
 8001c12:	f7fe fd51 	bl	80006b8 <__aeabi_fcmple>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d061      	beq.n	8001ce0 <Signal_Interrupt+0x120>
 8001c1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	f7fe fd53 	bl	80006cc <__aeabi_fcmpge>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d059      	beq.n	8001ce0 <Signal_Interrupt+0x120>
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001c2c:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <Signal_Interrupt+0x168>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <Signal_Interrupt+0x84>
 8001c34:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <Signal_Interrupt+0x168>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d067      	beq.n	8001d0c <Signal_Interrupt+0x14c>
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <Signal_Interrupt+0x16c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d163      	bne.n	8001d0c <Signal_Interrupt+0x14c>
				float new_pid_setpoint = (((float)potentiometer_max - (float)potentiometer_min) * ((received_length_ms - 1.0f) / (signal_length - 1.0f))) + (float)potentiometer_min;
 8001c44:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <Signal_Interrupt+0x170>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fb35 	bl	80002b8 <__aeabi_ui2f>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <Signal_Interrupt+0x174>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fb2f 	bl	80002b8 <__aeabi_ui2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7fe fa78 	bl	8000154 <__aeabi_fsub>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461c      	mov	r4, r3
 8001c68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c6c:	68b8      	ldr	r0, [r7, #8]
 8001c6e:	f7fe fa71 	bl	8000154 <__aeabi_fsub>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461d      	mov	r5, r3
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <Signal_Interrupt+0x164>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fa68 	bl	8000154 <__aeabi_fsub>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4619      	mov	r1, r3
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f7fe fc21 	bl	80004d0 <__aeabi_fdiv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4619      	mov	r1, r3
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7fe fb68 	bl	8000368 <__aeabi_fmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <Signal_Interrupt+0x174>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fb09 	bl	80002b8 <__aeabi_ui2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7fe fa54 	bl	8000158 <__addsf3>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	607b      	str	r3, [r7, #4]
				if(pid_setpoint != new_pid_setpoint){
 8001cb4:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <Signal_Interrupt+0x178>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fce8 	bl	8000690 <__aeabi_fcmpeq>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <Signal_Interrupt+0x10c>
					led_position_changed = 1;
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <Signal_Interrupt+0x17c>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
				pid_setpoint = new_pid_setpoint;
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <Signal_Interrupt+0x178>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
				if(!pid_running){
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <Signal_Interrupt+0x180>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <Signal_Interrupt+0x14c>
					PID_Start();
 8001cda:	f7ff faeb 	bl	80012b4 <PID_Start>
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001cde:	e015      	b.n	8001d0c <Signal_Interrupt+0x14c>
			signal_present = 0;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <Signal_Interrupt+0x158>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <Signal_Interrupt+0x168>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <Signal_Interrupt+0x13e>
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <Signal_Interrupt+0x168>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <Signal_Interrupt+0x14e>
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <Signal_Interrupt+0x16c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d107      	bne.n	8001d0e <Signal_Interrupt+0x14e>
				if(pid_running){
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <Signal_Interrupt+0x180>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <Signal_Interrupt+0x14e>
					PID_Stop();
 8001d06:	f7ff faf7 	bl	80012f8 <PID_Stop>
}
 8001d0a:	e000      	b.n	8001d0e <Signal_Interrupt+0x14e>
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001d0c:	bf00      	nop
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bdb0      	pop	{r4, r5, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000248 	.word	0x20000248
 8001d1c:	2000024c 	.word	0x2000024c
 8001d20:	463b8000 	.word	0x463b8000
 8001d24:	20000240 	.word	0x20000240
 8001d28:	2000023c 	.word	0x2000023c
 8001d2c:	20000254 	.word	0x20000254
 8001d30:	200001ee 	.word	0x200001ee
 8001d34:	200001ec 	.word	0x200001ec
 8001d38:	20000024 	.word	0x20000024
 8001d3c:	200001c5 	.word	0x200001c5
 8001d40:	200001d8 	.word	0x200001d8

08001d44 <Signal_Read_Timer>:

uint32_t Signal_Read_Timer(){
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <Signal_Read_Timer+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000460 	.word	0x20000460

08001d5c <Signal_Timer_Reset>:
void Signal_Timer_Reset(){
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <Signal_Timer_Reset+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000460 	.word	0x20000460

08001d74 <Signal_Read>:
uint8_t Signal_Read(){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001d82:	e01d      	b.n	8001dc0 <Signal_Read+0x4c>
		i = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4811      	ldr	r0, [pc, #68]	; (8001dd0 <Signal_Read+0x5c>)
 8001d8c:	f002 f918 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001d94:	e011      	b.n	8001dba <Signal_Read+0x46>
			i++;
 8001d96:	797b      	ldrb	r3, [r7, #5]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <Signal_Read+0x5c>)
 8001da0:	f002 f90e 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d000      	beq.n	8001db0 <Signal_Read+0x3c>
				break;
 8001dae:	e007      	b.n	8001dc0 <Signal_Read+0x4c>
			}
			if(i == SIGNAL_DEBOUNCE_SAMPLES){
 8001db0:	797b      	ldrb	r3, [r7, #5]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d101      	bne.n	8001dba <Signal_Read+0x46>
				d = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	71bb      	strb	r3, [r7, #6]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001dba:	797b      	ldrb	r3, [r7, #5]
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d1ea      	bne.n	8001d96 <Signal_Read+0x22>
	while(d != 1){
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d1de      	bne.n	8001d84 <Signal_Read+0x10>
			}
		}
	}
	return level;
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40010c00 	.word	0x40010c00

08001dd4 <Signal_Init>:

void Signal_Init(){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <Signal_Init+0x10>)
 8001dda:	f004 fbc9 	bl	8006570 <HAL_TIM_Base_Start>
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000460 	.word	0x20000460

08001de8 <USB_Det_Read>:

uint8_t usb_present = 0;
uint8_t usb_tx_buffer[64];
uint8_t usb_long_buffer[256];

uint8_t USB_Det_Read(){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001df6:	e01f      	b.n	8001e38 <USB_Det_Read+0x50>
		i = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8001dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e00:	4811      	ldr	r0, [pc, #68]	; (8001e48 <USB_Det_Read+0x60>)
 8001e02:	f002 f8dd 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001e0a:	e012      	b.n	8001e32 <USB_Det_Read+0x4a>
			i++;
 8001e0c:	797b      	ldrb	r3, [r7, #5]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 8001e12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e16:	480c      	ldr	r0, [pc, #48]	; (8001e48 <USB_Det_Read+0x60>)
 8001e18:	f002 f8d2 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d000      	beq.n	8001e28 <USB_Det_Read+0x40>
				break;
 8001e26:	e007      	b.n	8001e38 <USB_Det_Read+0x50>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 8001e28:	797b      	ldrb	r3, [r7, #5]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d101      	bne.n	8001e32 <USB_Det_Read+0x4a>
				d = 1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001e32:	797b      	ldrb	r3, [r7, #5]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d1e9      	bne.n	8001e0c <USB_Det_Read+0x24>
	while(d != 1){
 8001e38:	79bb      	ldrb	r3, [r7, #6]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d1dc      	bne.n	8001df8 <USB_Det_Read+0x10>
			}
		}
	}
	return level;
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40010c00 	.word	0x40010c00

08001e4c <USB_Det_Interrupt>:
void USB_Det_Interrupt(){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e50:	f7ff ffca 	bl	8001de8 <USB_Det_Read>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d103      	bne.n	8001e62 <USB_Det_Interrupt+0x16>
		usb_present = 1;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <USB_Det_Interrupt+0x2c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	e002      	b.n	8001e68 <USB_Det_Interrupt+0x1c>
	}else{
		usb_present = 0;
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <USB_Det_Interrupt+0x2c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
	}
	if(pid_running){
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <USB_Det_Interrupt+0x30>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <USB_Det_Interrupt+0x28>
		PID_Stop();
 8001e70:	f7ff fa42 	bl	80012f8 <PID_Stop>
	}
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000254 	.word	0x20000254
 8001e7c:	200001d8 	.word	0x200001d8

08001e80 <USB_Init>:
void USB_Init(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e84:	f7ff ffb0 	bl	8001de8 <USB_Det_Read>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d103      	bne.n	8001e96 <USB_Init+0x16>
		usb_present = 1;
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <USB_Init+0x20>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
	}else{
		usb_present = 0;
	}
}
 8001e94:	e002      	b.n	8001e9c <USB_Init+0x1c>
		usb_present = 0;
 8001e96:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <USB_Init+0x20>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000254 	.word	0x20000254

08001ea4 <USB_Packet_Received>:
void USB_Packet_Received(uint8_t *data, uint32_t length){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	if((data[1] == USB_CMD_CONFIG) && (uint32_t)data[0] == length){
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d11c      	bne.n	8001ef2 <USB_Packet_Received+0x4e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d116      	bne.n	8001ef2 <USB_Packet_Received+0x4e>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	461a      	mov	r2, r3
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4829      	ldr	r0, [pc, #164]	; (8001f74 <USB_Packet_Received+0xd0>)
 8001ed0:	f001 fcbf 	bl	8003852 <HAL_CRC_Calculate>
 8001ed4:	4601      	mov	r1, r0
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3b04      	subs	r3, #4
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4299      	cmp	r1, r3
 8001ee2:	d143      	bne.n	8001f6c <USB_Packet_Received+0xc8>
			USB_Parse_Config(data);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f84d 	bl	8001f84 <USB_Parse_Config>
			usb_rq = USB_RQ_CONF;
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <USB_Packet_Received+0xd4>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001ef0:	e03c      	b.n	8001f6c <USB_Packet_Received+0xc8>
		}
	}else if((data[1] == USB_CMD_STATUS) && (length == 64)){
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d108      	bne.n	8001f0e <USB_Packet_Received+0x6a>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d105      	bne.n	8001f0e <USB_Packet_Received+0x6a>
		memcpy(usb_long_buffer, data, 64);
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	481d      	ldr	r0, [pc, #116]	; (8001f7c <USB_Packet_Received+0xd8>)
 8001f08:	f00a f8ba 	bl	800c080 <memcpy>
 8001f0c:	e02e      	b.n	8001f6c <USB_Packet_Received+0xc8>
	}
	else if((usb_long_buffer[1] == USB_CMD_STATUS) && (usb_long_buffer[0] == (length + 64))){
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <USB_Packet_Received+0xd8>)
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d126      	bne.n	8001f64 <USB_Packet_Received+0xc0>
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <USB_Packet_Received+0xd8>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3340      	adds	r3, #64	; 0x40
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d11f      	bne.n	8001f64 <USB_Packet_Received+0xc0>
		memcpy(&usb_long_buffer[64], data, length);
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4815      	ldr	r0, [pc, #84]	; (8001f80 <USB_Packet_Received+0xdc>)
 8001f2a:	f00a f8a9 	bl	800c080 <memcpy>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)usb_long_buffer, ((length + 64) / 4) - 1) == *(uint32_t *)&usb_long_buffer[length + 64- 4]){
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	3340      	adds	r3, #64	; 0x40
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3b01      	subs	r3, #1
 8001f36:	461a      	mov	r2, r3
 8001f38:	4910      	ldr	r1, [pc, #64]	; (8001f7c <USB_Packet_Received+0xd8>)
 8001f3a:	480e      	ldr	r0, [pc, #56]	; (8001f74 <USB_Packet_Received+0xd0>)
 8001f3c:	f001 fc89 	bl	8003852 <HAL_CRC_Calculate>
 8001f40:	4602      	mov	r2, r0
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	333c      	adds	r3, #60	; 0x3c
 8001f46:	490d      	ldr	r1, [pc, #52]	; (8001f7c <USB_Packet_Received+0xd8>)
 8001f48:	440b      	add	r3, r1
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d105      	bne.n	8001f5c <USB_Packet_Received+0xb8>
			USB_Parse_Status(usb_long_buffer);
 8001f50:	480a      	ldr	r0, [pc, #40]	; (8001f7c <USB_Packet_Received+0xd8>)
 8001f52:	f000 f8ff 	bl	8002154 <USB_Parse_Status>
			usb_rq = USB_RQ_STAT;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <USB_Packet_Received+0xd4>)
 8001f58:	2202      	movs	r2, #2
 8001f5a:	701a      	strb	r2, [r3, #0]
		}
		usb_long_buffer[1] = 0xff;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <USB_Packet_Received+0xd8>)
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	705a      	strb	r2, [r3, #1]
 8001f62:	e003      	b.n	8001f6c <USB_Packet_Received+0xc8>
	}else{
		usb_long_buffer[1] = 0xff;
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <USB_Packet_Received+0xd8>)
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	705a      	strb	r2, [r3, #1]
	}
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200003c8 	.word	0x200003c8
 8001f78:	20000250 	.word	0x20000250
 8001f7c:	20000298 	.word	0x20000298
 8001f80:	200002d8 	.word	0x200002d8

08001f84 <USB_Parse_Config>:
void USB_Parse_Config(uint8_t *data){
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	usb_rq_sett_revert_flash = data[2];
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	789a      	ldrb	r2, [r3, #2]
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <USB_Parse_Config+0x1c>)
 8001f92:	701a      	strb	r2, [r3, #0]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000251 	.word	0x20000251

08001fa4 <USB_Send_Config>:
void USB_Send_Config(){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_CONFIG_LENGTH;
 8001faa:	4b48      	ldr	r3, [pc, #288]	; (80020cc <USB_Send_Config+0x128>)
 8001fac:	2240      	movs	r2, #64	; 0x40
 8001fae:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_CONFIG;
 8001fb0:	4b46      	ldr	r3, [pc, #280]	; (80020cc <USB_Send_Config+0x128>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	705a      	strb	r2, [r3, #1]
	*(uint16_t *)&usb_tx_buffer[2] = potentiometer_min;
 8001fb6:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <USB_Send_Config+0x12c>)
 8001fb8:	4a46      	ldr	r2, [pc, #280]	; (80020d4 <USB_Send_Config+0x130>)
 8001fba:	8812      	ldrh	r2, [r2, #0]
 8001fbc:	801a      	strh	r2, [r3, #0]
	*(uint16_t *)&usb_tx_buffer[4] = potentiometer_max;
 8001fbe:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <USB_Send_Config+0x134>)
 8001fc0:	4a46      	ldr	r2, [pc, #280]	; (80020dc <USB_Send_Config+0x138>)
 8001fc2:	8812      	ldrh	r2, [r2, #0]
 8001fc4:	801a      	strh	r2, [r3, #0]
	usb_tx_buffer[6] = (uint8_t)((uint16_t)motor_max_power / 10);
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <USB_Send_Config+0x13c>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	4a46      	ldr	r2, [pc, #280]	; (80020e4 <USB_Send_Config+0x140>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <USB_Send_Config+0x128>)
 8001fd8:	719a      	strb	r2, [r3, #6]
	usb_tx_buffer[7] = motor_invert;
 8001fda:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <USB_Send_Config+0x144>)
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <USB_Send_Config+0x128>)
 8001fe0:	71da      	strb	r2, [r3, #7]
	usb_tx_buffer[8] = signal_ignore;
 8001fe2:	4b42      	ldr	r3, [pc, #264]	; (80020ec <USB_Send_Config+0x148>)
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	4b39      	ldr	r3, [pc, #228]	; (80020cc <USB_Send_Config+0x128>)
 8001fe8:	721a      	strb	r2, [r3, #8]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[9], (uint32_t)&signal_length);
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <USB_Send_Config+0x14c>)
 8001fec:	4a41      	ldr	r2, [pc, #260]	; (80020f4 <USB_Send_Config+0x150>)
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fd5d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[13], (uint32_t)&signal_timeout);
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <USB_Send_Config+0x154>)
 8001ff8:	4a40      	ldr	r2, [pc, #256]	; (80020fc <USB_Send_Config+0x158>)
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fd57 	bl	8000ab0 <General_Copy_32_Bit>
	usb_tx_buffer[17] = led_mode;
 8002002:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <USB_Send_Config+0x15c>)
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <USB_Send_Config+0x128>)
 8002008:	745a      	strb	r2, [r3, #17]
	usb_tx_buffer[18] = pid_on;
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <USB_Send_Config+0x160>)
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <USB_Send_Config+0x128>)
 8002010:	749a      	strb	r2, [r3, #18]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[19], (uint32_t)&pid_kp_1);
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <USB_Send_Config+0x164>)
 8002014:	4a3d      	ldr	r2, [pc, #244]	; (800210c <USB_Send_Config+0x168>)
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fd49 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[23], (uint32_t)&pid_ki_1);
 800201e:	4b3c      	ldr	r3, [pc, #240]	; (8002110 <USB_Send_Config+0x16c>)
 8002020:	4a3c      	ldr	r2, [pc, #240]	; (8002114 <USB_Send_Config+0x170>)
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fd43 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[27], (uint32_t)&pid_kd_1);
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <USB_Send_Config+0x174>)
 800202c:	4a3b      	ldr	r2, [pc, #236]	; (800211c <USB_Send_Config+0x178>)
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fd3d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[31], (uint32_t)&pid_kp_1);
 8002036:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <USB_Send_Config+0x17c>)
 8002038:	4a34      	ldr	r2, [pc, #208]	; (800210c <USB_Send_Config+0x168>)
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fd37 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[35], (uint32_t)&pid_ki_1);
 8002042:	4b38      	ldr	r3, [pc, #224]	; (8002124 <USB_Send_Config+0x180>)
 8002044:	4a33      	ldr	r2, [pc, #204]	; (8002114 <USB_Send_Config+0x170>)
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fd31 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[39], (uint32_t)&pid_kd_1);
 800204e:	4b36      	ldr	r3, [pc, #216]	; (8002128 <USB_Send_Config+0x184>)
 8002050:	4a32      	ldr	r2, [pc, #200]	; (800211c <USB_Send_Config+0x178>)
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fd2b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[43], (uint32_t)&pid_kp_1);
 800205a:	4b34      	ldr	r3, [pc, #208]	; (800212c <USB_Send_Config+0x188>)
 800205c:	4a2b      	ldr	r2, [pc, #172]	; (800210c <USB_Send_Config+0x168>)
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fd25 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[47], (uint32_t)&pid_ki_1);
 8002066:	4b32      	ldr	r3, [pc, #200]	; (8002130 <USB_Send_Config+0x18c>)
 8002068:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <USB_Send_Config+0x170>)
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fd1f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[51], (uint32_t)&pid_kd_1);
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <USB_Send_Config+0x190>)
 8002074:	4a29      	ldr	r2, [pc, #164]	; (800211c <USB_Send_Config+0x178>)
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fd19 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[55], (uint32_t)&pid_split_1);
 800207e:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <USB_Send_Config+0x194>)
 8002080:	4a2e      	ldr	r2, [pc, #184]	; (800213c <USB_Send_Config+0x198>)
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fd30 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[57], (uint32_t)&pid_split_2);
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <USB_Send_Config+0x19c>)
 800208c:	4a2d      	ldr	r2, [pc, #180]	; (8002144 <USB_Send_Config+0x1a0>)
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fd2a 	bl	8000aea <General_Copy_16_Bit>
	usb_tx_buffer[59] = pid_sampling_time;
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <USB_Send_Config+0x1a4>)
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <USB_Send_Config+0x128>)
 800209c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_CONFIG_LENGTH / 4) - 1);
 80020a0:	220f      	movs	r2, #15
 80020a2:	490a      	ldr	r1, [pc, #40]	; (80020cc <USB_Send_Config+0x128>)
 80020a4:	4829      	ldr	r0, [pc, #164]	; (800214c <USB_Send_Config+0x1a8>)
 80020a6:	f001 fbd4 	bl	8003852 <HAL_CRC_Calculate>
 80020aa:	4603      	mov	r3, r0
 80020ac:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[60], (uint32_t)&crc);
 80020ae:	4a28      	ldr	r2, [pc, #160]	; (8002150 <USB_Send_Config+0x1ac>)
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	4619      	mov	r1, r3
 80020b4:	4610      	mov	r0, r2
 80020b6:	f7fe fcfb 	bl	8000ab0 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_CONFIG_LENGTH);
 80020ba:	2140      	movs	r1, #64	; 0x40
 80020bc:	4803      	ldr	r0, [pc, #12]	; (80020cc <USB_Send_Config+0x128>)
 80020be:	f009 fbdd 	bl	800b87c <CDC_Transmit_FS>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000258 	.word	0x20000258
 80020d0:	2000025a 	.word	0x2000025a
 80020d4:	200001ec 	.word	0x200001ec
 80020d8:	2000025c 	.word	0x2000025c
 80020dc:	200001ee 	.word	0x200001ee
 80020e0:	20000000 	.word	0x20000000
 80020e4:	cccccccd 	.word	0xcccccccd
 80020e8:	200001c7 	.word	0x200001c7
 80020ec:	2000023c 	.word	0x2000023c
 80020f0:	20000261 	.word	0x20000261
 80020f4:	20000240 	.word	0x20000240
 80020f8:	20000265 	.word	0x20000265
 80020fc:	20000244 	.word	0x20000244
 8002100:	200001c4 	.word	0x200001c4
 8002104:	20000020 	.word	0x20000020
 8002108:	2000026b 	.word	0x2000026b
 800210c:	20000004 	.word	0x20000004
 8002110:	2000026f 	.word	0x2000026f
 8002114:	200001cc 	.word	0x200001cc
 8002118:	20000273 	.word	0x20000273
 800211c:	20000008 	.word	0x20000008
 8002120:	20000277 	.word	0x20000277
 8002124:	2000027b 	.word	0x2000027b
 8002128:	2000027f 	.word	0x2000027f
 800212c:	20000283 	.word	0x20000283
 8002130:	20000287 	.word	0x20000287
 8002134:	2000028b 	.word	0x2000028b
 8002138:	2000028f 	.word	0x2000028f
 800213c:	2000001c 	.word	0x2000001c
 8002140:	20000291 	.word	0x20000291
 8002144:	2000001e 	.word	0x2000001e
 8002148:	20000002 	.word	0x20000002
 800214c:	200003c8 	.word	0x200003c8
 8002150:	20000294 	.word	0x20000294

08002154 <USB_Parse_Status>:
void USB_Parse_Status(uint8_t *data){
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	potentiometer_min = *(uint16_t *)&data[2];
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	885a      	ldrh	r2, [r3, #2]
 8002160:	4b5e      	ldr	r3, [pc, #376]	; (80022dc <USB_Parse_Status+0x188>)
 8002162:	801a      	strh	r2, [r3, #0]
	potentiometer_max = *(uint16_t *)&data[4];
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	889a      	ldrh	r2, [r3, #4]
 8002168:	4b5d      	ldr	r3, [pc, #372]	; (80022e0 <USB_Parse_Status+0x18c>)
 800216a:	801a      	strh	r2, [r3, #0]
	motor_max_power = (uint16_t)data[6] * 10;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3306      	adds	r3, #6
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4413      	add	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <USB_Parse_Status+0x190>)
 8002180:	801a      	strh	r2, [r3, #0]
	motor_invert = data[7];
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	79da      	ldrb	r2, [r3, #7]
 8002186:	4b58      	ldr	r3, [pc, #352]	; (80022e8 <USB_Parse_Status+0x194>)
 8002188:	701a      	strb	r2, [r3, #0]
	signal_ignore = data[8];
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7a1a      	ldrb	r2, [r3, #8]
 800218e:	4b57      	ldr	r3, [pc, #348]	; (80022ec <USB_Parse_Status+0x198>)
 8002190:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&data[9]);
 8002192:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <USB_Parse_Status+0x19c>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3309      	adds	r3, #9
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f7fe fc88 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&data[13]);
 80021a0:	4a54      	ldr	r2, [pc, #336]	; (80022f4 <USB_Parse_Status+0x1a0>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	330d      	adds	r3, #13
 80021a6:	4619      	mov	r1, r3
 80021a8:	4610      	mov	r0, r2
 80021aa:	f7fe fc81 	bl	8000ab0 <General_Copy_32_Bit>
	led_mode = data[17];
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7c5a      	ldrb	r2, [r3, #17]
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <USB_Parse_Status+0x1a4>)
 80021b4:	701a      	strb	r2, [r3, #0]
	pid_on = data[18];
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7c9a      	ldrb	r2, [r3, #18]
 80021ba:	4b50      	ldr	r3, [pc, #320]	; (80022fc <USB_Parse_Status+0x1a8>)
 80021bc:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&data[19]);
 80021be:	4a50      	ldr	r2, [pc, #320]	; (8002300 <USB_Parse_Status+0x1ac>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3313      	adds	r3, #19
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f7fe fc72 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&data[23]);
 80021cc:	4a4d      	ldr	r2, [pc, #308]	; (8002304 <USB_Parse_Status+0x1b0>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3317      	adds	r3, #23
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f7fe fc6b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&data[27]);
 80021da:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <USB_Parse_Status+0x1b4>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	331b      	adds	r3, #27
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f7fe fc64 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&data[31]);
 80021e8:	4a48      	ldr	r2, [pc, #288]	; (800230c <USB_Parse_Status+0x1b8>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	331f      	adds	r3, #31
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7fe fc5d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&data[35]);
 80021f6:	4a46      	ldr	r2, [pc, #280]	; (8002310 <USB_Parse_Status+0x1bc>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3323      	adds	r3, #35	; 0x23
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7fe fc56 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&data[39]);
 8002204:	4a43      	ldr	r2, [pc, #268]	; (8002314 <USB_Parse_Status+0x1c0>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3327      	adds	r3, #39	; 0x27
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7fe fc4f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&data[43]);
 8002212:	4a41      	ldr	r2, [pc, #260]	; (8002318 <USB_Parse_Status+0x1c4>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	332b      	adds	r3, #43	; 0x2b
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f7fe fc48 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&data[47]);
 8002220:	4a3e      	ldr	r2, [pc, #248]	; (800231c <USB_Parse_Status+0x1c8>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	332f      	adds	r3, #47	; 0x2f
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7fe fc41 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&data[51]);
 800222e:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <USB_Parse_Status+0x1cc>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3333      	adds	r3, #51	; 0x33
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f7fe fc3a 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&data[55]);
 800223c:	4a39      	ldr	r2, [pc, #228]	; (8002324 <USB_Parse_Status+0x1d0>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3337      	adds	r3, #55	; 0x37
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f7fe fc50 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&data[57]);
 800224a:	4a37      	ldr	r2, [pc, #220]	; (8002328 <USB_Parse_Status+0x1d4>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3339      	adds	r3, #57	; 0x39
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f7fe fc49 	bl	8000aea <General_Copy_16_Bit>
	pid_sampling_time = data[59];
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 800225e:	4b33      	ldr	r3, [pc, #204]	; (800232c <USB_Parse_Status+0x1d8>)
 8002260:	701a      	strb	r2, [r3, #0]
	if(PID_Get_Sampling_Time() != pid_sampling_time){
 8002262:	f7fe fe21 	bl	8000ea8 <PID_Get_Sampling_Time>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	4b30      	ldr	r3, [pc, #192]	; (800232c <USB_Parse_Status+0x1d8>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	429a      	cmp	r2, r3
 8002272:	d005      	beq.n	8002280 <USB_Parse_Status+0x12c>
		PID_Set_Sampling_Time(pid_sampling_time);
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <USB_Parse_Status+0x1d8>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fe26 	bl	8000ecc <PID_Set_Sampling_Time>
	}
	float new_pid_setpoint = 0;
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
	General_Copy_32_Bit((uint32_t)&new_pid_setpoint, (uint32_t)&data[60]);
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	333c      	adds	r3, #60	; 0x3c
 800228e:	4619      	mov	r1, r3
 8002290:	4610      	mov	r0, r2
 8002292:	f7fe fc0d 	bl	8000ab0 <General_Copy_32_Bit>
	if(signal_ignore){
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <USB_Parse_Status+0x198>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00f      	beq.n	80022be <USB_Parse_Status+0x16a>
		if(pid_setpoint != new_pid_setpoint){
 800229e:	4b24      	ldr	r3, [pc, #144]	; (8002330 <USB_Parse_Status+0x1dc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f9f2 	bl	8000690 <__aeabi_fcmpeq>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <USB_Parse_Status+0x164>
			led_position_changed = 1;
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <USB_Parse_Status+0x1e0>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
		}
		pid_setpoint = new_pid_setpoint;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <USB_Parse_Status+0x1dc>)
 80022bc:	6013      	str	r3, [r2, #0]
	}
	usb_rq_stat_phold = data[64];
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <USB_Parse_Status+0x1e4>)
 80022c6:	701a      	strb	r2, [r3, #0]
	usb_rq_stat_motor = data[65];
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <USB_Parse_Status+0x1e8>)
 80022d0:	701a      	strb	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200001ec 	.word	0x200001ec
 80022e0:	200001ee 	.word	0x200001ee
 80022e4:	20000000 	.word	0x20000000
 80022e8:	200001c7 	.word	0x200001c7
 80022ec:	2000023c 	.word	0x2000023c
 80022f0:	20000240 	.word	0x20000240
 80022f4:	20000244 	.word	0x20000244
 80022f8:	200001c4 	.word	0x200001c4
 80022fc:	20000020 	.word	0x20000020
 8002300:	20000004 	.word	0x20000004
 8002304:	200001cc 	.word	0x200001cc
 8002308:	20000008 	.word	0x20000008
 800230c:	2000000c 	.word	0x2000000c
 8002310:	200001d0 	.word	0x200001d0
 8002314:	20000010 	.word	0x20000010
 8002318:	20000014 	.word	0x20000014
 800231c:	200001d4 	.word	0x200001d4
 8002320:	20000018 	.word	0x20000018
 8002324:	2000001c 	.word	0x2000001c
 8002328:	2000001e 	.word	0x2000001e
 800232c:	20000002 	.word	0x20000002
 8002330:	20000024 	.word	0x20000024
 8002334:	200001c5 	.word	0x200001c5
 8002338:	20000253 	.word	0x20000253
 800233c:	20000252 	.word	0x20000252

08002340 <USB_Send_Status>:
void USB_Send_Status(){
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_STATUS_LENGTH;
 8002346:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <USB_Send_Status+0x84>)
 8002348:	2214      	movs	r2, #20
 800234a:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_STATUS;
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <USB_Send_Status+0x84>)
 800234e:	2201      	movs	r2, #1
 8002350:	705a      	strb	r2, [r3, #1]
	usb_tx_buffer[2] = pid_running;
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <USB_Send_Status+0x88>)
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <USB_Send_Status+0x84>)
 8002358:	709a      	strb	r2, [r3, #2]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[3], (uint32_t)&pid_setpoint);
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <USB_Send_Status+0x8c>)
 800235c:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <USB_Send_Status+0x90>)
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fba5 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[7], (uint32_t)&potentiometer_position);
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <USB_Send_Status+0x94>)
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <USB_Send_Status+0x98>)
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fb9f 	bl	8000ab0 <General_Copy_32_Bit>
	int16_t motor_val = Motor_Get();
 8002372:	f7fe fd23 	bl	8000dbc <Motor_Get>
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[11], (uint32_t)&motor_val);
 800237a:	4a18      	ldr	r2, [pc, #96]	; (80023dc <USB_Send_Status+0x9c>)
 800237c:	1dbb      	adds	r3, r7, #6
 800237e:	4619      	mov	r1, r3
 8002380:	4610      	mov	r0, r2
 8002382:	f7fe fbb2 	bl	8000aea <General_Copy_16_Bit>
	usb_tx_buffer[13] = USB_CRC_PADDING;
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <USB_Send_Status+0x84>)
 8002388:	2200      	movs	r2, #0
 800238a:	735a      	strb	r2, [r3, #13]
	usb_tx_buffer[14] = USB_CRC_PADDING;
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <USB_Send_Status+0x84>)
 800238e:	2200      	movs	r2, #0
 8002390:	739a      	strb	r2, [r3, #14]
	usb_tx_buffer[15] = USB_CRC_PADDING;
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <USB_Send_Status+0x84>)
 8002394:	2200      	movs	r2, #0
 8002396:	73da      	strb	r2, [r3, #15]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_STATUS_LENGTH / 4) - 1);
 8002398:	2204      	movs	r2, #4
 800239a:	490a      	ldr	r1, [pc, #40]	; (80023c4 <USB_Send_Status+0x84>)
 800239c:	4810      	ldr	r0, [pc, #64]	; (80023e0 <USB_Send_Status+0xa0>)
 800239e:	f001 fa58 	bl	8003852 <HAL_CRC_Calculate>
 80023a2:	4603      	mov	r3, r0
 80023a4:	603b      	str	r3, [r7, #0]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[16], (uint32_t)&crc);
 80023a6:	4a0f      	ldr	r2, [pc, #60]	; (80023e4 <USB_Send_Status+0xa4>)
 80023a8:	463b      	mov	r3, r7
 80023aa:	4619      	mov	r1, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	f7fe fb7f 	bl	8000ab0 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_STATUS_LENGTH);
 80023b2:	2114      	movs	r1, #20
 80023b4:	4803      	ldr	r0, [pc, #12]	; (80023c4 <USB_Send_Status+0x84>)
 80023b6:	f009 fa61 	bl	800b87c <CDC_Transmit_FS>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000258 	.word	0x20000258
 80023c8:	200001d8 	.word	0x200001d8
 80023cc:	2000025b 	.word	0x2000025b
 80023d0:	20000024 	.word	0x20000024
 80023d4:	2000025f 	.word	0x2000025f
 80023d8:	200001f8 	.word	0x200001f8
 80023dc:	20000263 	.word	0x20000263
 80023e0:	200003c8 	.word	0x200003c8
 80023e4:	20000268 	.word	0x20000268

080023e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ec:	f000 fbf6 	bl	8002bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023f0:	f000 f813 	bl	800241a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f4:	f000 f9de 	bl	80027b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80023f8:	f000 f86c 	bl	80024d4 <MX_ADC1_Init>
  MX_CRC_Init();
 80023fc:	f000 f8a8 	bl	8002550 <MX_CRC_Init>
  MX_TIM2_Init();
 8002400:	f000 f8ba 	bl	8002578 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002404:	f000 f93a 	bl	800267c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002408:	f000 f986 	bl	8002718 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 800240c:	f009 f972 	bl	800b6f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
App_Init();
 8002410:	f7fe f9f2 	bl	80007f8 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
App_Loop();
 8002414:	f7fe f9fe 	bl	8000814 <App_Loop>
 8002418:	e7fc      	b.n	8002414 <main+0x2c>

0800241a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b094      	sub	sp, #80	; 0x50
 800241e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002424:	2228      	movs	r2, #40	; 0x28
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f009 fe37 	bl	800c09c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800244a:	2301      	movs	r3, #1
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800244e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002454:	2300      	movs	r3, #0
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002458:	2301      	movs	r3, #1
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245c:	2302      	movs	r3, #2
 800245e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002466:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800246c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002470:	4618      	mov	r0, r3
 8002472:	f003 fab1 	bl	80059d8 <HAL_RCC_OscConfig>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800247c:	f000 fa04 	bl	8002888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002480:	230f      	movs	r3, #15
 8002482:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800248c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002490:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	2102      	movs	r1, #2
 800249c:	4618      	mov	r0, r3
 800249e:	f003 fd1d 	bl	8005edc <HAL_RCC_ClockConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <SystemClock_Config+0x92>
  {
    Error_Handler();
 80024a8:	f000 f9ee 	bl	8002888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80024ac:	2312      	movs	r3, #18
 80024ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80024b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 fe91 	bl	80061e4 <HAL_RCCEx_PeriphCLKConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80024c8:	f000 f9de 	bl	8002888 <Error_Handler>
  }
}
 80024cc:	bf00      	nop
 80024ce:	3750      	adds	r7, #80	; 0x50
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <MX_ADC1_Init+0x74>)
 80024e6:	4a19      	ldr	r2, [pc, #100]	; (800254c <MX_ADC1_Init+0x78>)
 80024e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <MX_ADC1_Init+0x74>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80024f0:	4b15      	ldr	r3, [pc, #84]	; (8002548 <MX_ADC1_Init+0x74>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <MX_ADC1_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <MX_ADC1_Init+0x74>)
 80024fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002502:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <MX_ADC1_Init+0x74>)
 8002506:	2200      	movs	r2, #0
 8002508:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <MX_ADC1_Init+0x74>)
 800250c:	2201      	movs	r2, #1
 800250e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002510:	480d      	ldr	r0, [pc, #52]	; (8002548 <MX_ADC1_Init+0x74>)
 8002512:	f000 fbc5 	bl	8002ca0 <HAL_ADC_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800251c:	f000 f9b4 	bl	8002888 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002520:	2304      	movs	r3, #4
 8002522:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002524:	2301      	movs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002528:	2307      	movs	r3, #7
 800252a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_ADC1_Init+0x74>)
 8002532:	f000 fe1b 	bl	800316c <HAL_ADC_ConfigChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800253c:	f000 f9a4 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000398 	.word	0x20000398
 800254c:	40012400 	.word	0x40012400

08002550 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <MX_CRC_Init+0x20>)
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <MX_CRC_Init+0x24>)
 8002558:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_CRC_Init+0x20>)
 800255c:	f001 f95d 	bl	800381a <HAL_CRC_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002566:	f000 f98f 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200003c8 	.word	0x200003c8
 8002574:	40023000 	.word	0x40023000

08002578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08e      	sub	sp, #56	; 0x38
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258c:	f107 0320 	add.w	r3, r7, #32
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
 80025a4:	615a      	str	r2, [r3, #20]
 80025a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025a8:	4b33      	ldr	r3, [pc, #204]	; (8002678 <MX_TIM2_Init+0x100>)
 80025aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80025b0:	4b31      	ldr	r3, [pc, #196]	; (8002678 <MX_TIM2_Init+0x100>)
 80025b2:	2207      	movs	r2, #7
 80025b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <MX_TIM2_Init+0x100>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <MX_TIM2_Init+0x100>)
 80025be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <MX_TIM2_Init+0x100>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <MX_TIM2_Init+0x100>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025d0:	4829      	ldr	r0, [pc, #164]	; (8002678 <MX_TIM2_Init+0x100>)
 80025d2:	f003 ff7d 	bl	80064d0 <HAL_TIM_Base_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025dc:	f000 f954 	bl	8002888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ea:	4619      	mov	r1, r3
 80025ec:	4822      	ldr	r0, [pc, #136]	; (8002678 <MX_TIM2_Init+0x100>)
 80025ee:	f004 fb49 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025f8:	f000 f946 	bl	8002888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025fc:	481e      	ldr	r0, [pc, #120]	; (8002678 <MX_TIM2_Init+0x100>)
 80025fe:	f004 f881 	bl	8006704 <HAL_TIM_PWM_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002608:	f000 f93e 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002614:	f107 0320 	add.w	r3, r7, #32
 8002618:	4619      	mov	r1, r3
 800261a:	4817      	ldr	r0, [pc, #92]	; (8002678 <MX_TIM2_Init+0x100>)
 800261c:	f004 febe 	bl	800739c <HAL_TIMEx_MasterConfigSynchronization>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002626:	f000 f92f 	bl	8002888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800262a:	2360      	movs	r3, #96	; 0x60
 800262c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800262e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002632:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002634:	2302      	movs	r3, #2
 8002636:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	2200      	movs	r2, #0
 8002640:	4619      	mov	r1, r3
 8002642:	480d      	ldr	r0, [pc, #52]	; (8002678 <MX_TIM2_Init+0x100>)
 8002644:	f004 fa60 	bl	8006b08 <HAL_TIM_PWM_ConfigChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800264e:	f000 f91b 	bl	8002888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	2204      	movs	r2, #4
 8002656:	4619      	mov	r1, r3
 8002658:	4807      	ldr	r0, [pc, #28]	; (8002678 <MX_TIM2_Init+0x100>)
 800265a:	f004 fa55 	bl	8006b08 <HAL_TIM_PWM_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002664:	f000 f910 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002668:	4803      	ldr	r0, [pc, #12]	; (8002678 <MX_TIM2_Init+0x100>)
 800266a:	f000 f9fb 	bl	8002a64 <HAL_TIM_MspPostInit>

}
 800266e:	bf00      	nop
 8002670:	3738      	adds	r7, #56	; 0x38
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200003d0 	.word	0x200003d0

0800267c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002690:	463b      	mov	r3, r7
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <MX_TIM3_Init+0x94>)
 800269a:	4a1e      	ldr	r2, [pc, #120]	; (8002714 <MX_TIM3_Init+0x98>)
 800269c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_TIM3_Init+0x94>)
 80026a0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80026a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_TIM3_Init+0x94>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <MX_TIM3_Init+0x94>)
 80026ae:	22c7      	movs	r2, #199	; 0xc7
 80026b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <MX_TIM3_Init+0x94>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026b8:	4b15      	ldr	r3, [pc, #84]	; (8002710 <MX_TIM3_Init+0x94>)
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026be:	4814      	ldr	r0, [pc, #80]	; (8002710 <MX_TIM3_Init+0x94>)
 80026c0:	f003 ff06 	bl	80064d0 <HAL_TIM_Base_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80026ca:	f000 f8dd 	bl	8002888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	4619      	mov	r1, r3
 80026da:	480d      	ldr	r0, [pc, #52]	; (8002710 <MX_TIM3_Init+0x94>)
 80026dc:	f004 fad2 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80026e6:	f000 f8cf 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	4619      	mov	r1, r3
 80026f6:	4806      	ldr	r0, [pc, #24]	; (8002710 <MX_TIM3_Init+0x94>)
 80026f8:	f004 fe50 	bl	800739c <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002702:	f000 f8c1 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000418 	.word	0x20000418
 8002714:	40000400 	.word	0x40000400

08002718 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271e:	f107 0308 	add.w	r3, r7, #8
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272c:	463b      	mov	r3, r7
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <MX_TIM4_Init+0x94>)
 8002736:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <MX_TIM4_Init+0x98>)
 8002738:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5;
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <MX_TIM4_Init+0x94>)
 800273c:	2205      	movs	r2, #5
 800273e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <MX_TIM4_Init+0x94>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <MX_TIM4_Init+0x94>)
 8002748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800274c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <MX_TIM4_Init+0x94>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <MX_TIM4_Init+0x94>)
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800275a:	4814      	ldr	r0, [pc, #80]	; (80027ac <MX_TIM4_Init+0x94>)
 800275c:	f003 feb8 	bl	80064d0 <HAL_TIM_Base_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002766:	f000 f88f 	bl	8002888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	4619      	mov	r1, r3
 8002776:	480d      	ldr	r0, [pc, #52]	; (80027ac <MX_TIM4_Init+0x94>)
 8002778:	f004 fa84 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002782:	f000 f881 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800278e:	463b      	mov	r3, r7
 8002790:	4619      	mov	r1, r3
 8002792:	4806      	ldr	r0, [pc, #24]	; (80027ac <MX_TIM4_Init+0x94>)
 8002794:	f004 fe02 	bl	800739c <HAL_TIMEx_MasterConfigSynchronization>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800279e:	f000 f873 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000460 	.word	0x20000460
 80027b0:	40000800 	.word	0x40000800

080027b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <MX_GPIO_Init+0xc4>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <MX_GPIO_Init+0xc4>)
 80027ce:	f043 0320 	orr.w	r3, r3, #32
 80027d2:	6193      	str	r3, [r2, #24]
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <MX_GPIO_Init+0xc4>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <MX_GPIO_Init+0xc4>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4a24      	ldr	r2, [pc, #144]	; (8002878 <MX_GPIO_Init+0xc4>)
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	6193      	str	r3, [r2, #24]
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <MX_GPIO_Init+0xc4>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <MX_GPIO_Init+0xc4>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4a1e      	ldr	r2, [pc, #120]	; (8002878 <MX_GPIO_Init+0xc4>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	6193      	str	r3, [r2, #24]
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <MX_GPIO_Init+0xc4>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002810:	2200      	movs	r2, #0
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	4819      	ldr	r0, [pc, #100]	; (800287c <MX_GPIO_Init+0xc8>)
 8002816:	f001 fbea 	bl	8003fee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281e:	2301      	movs	r3, #1
 8002820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002822:	2302      	movs	r3, #2
 8002824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800282a:	f107 0310 	add.w	r3, r7, #16
 800282e:	4619      	mov	r1, r3
 8002830:	4812      	ldr	r0, [pc, #72]	; (800287c <MX_GPIO_Init+0xc8>)
 8002832:	f001 fa41 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_Pin USB_DET_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin|USB_DET_Pin;
 8002836:	f240 2302 	movw	r3, #514	; 0x202
 800283a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_GPIO_Init+0xcc>)
 800283e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f107 0310 	add.w	r3, r7, #16
 8002848:	4619      	mov	r1, r3
 800284a:	480e      	ldr	r0, [pc, #56]	; (8002884 <MX_GPIO_Init+0xd0>)
 800284c:	f001 fa34 	bl	8003cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	2007      	movs	r0, #7
 8002856:	f000 ffaa 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800285a:	2007      	movs	r0, #7
 800285c:	f000 ffc3 	bl	80037e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2105      	movs	r1, #5
 8002864:	2017      	movs	r0, #23
 8002866:	f000 ffa2 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800286a:	2017      	movs	r0, #23
 800286c:	f000 ffbb 	bl	80037e6 <HAL_NVIC_EnableIRQ>

}
 8002870:	bf00      	nop
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	40010800 	.word	0x40010800
 8002880:	10310000 	.word	0x10310000
 8002884:	40010c00 	.word	0x40010c00

08002888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800288c:	b672      	cpsid	i
}
 800288e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002890:	e7fe      	b.n	8002890 <Error_Handler+0x8>
	...

08002894 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_MspInit+0x5c>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <HAL_MspInit+0x5c>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6193      	str	r3, [r2, #24]
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_MspInit+0x5c>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_MspInit+0x5c>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <HAL_MspInit+0x5c>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	61d3      	str	r3, [r2, #28]
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HAL_MspInit+0x5c>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_MspInit+0x60>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_MspInit+0x60>)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40010000 	.word	0x40010000

080028f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_ADC_MspInit+0x7c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d129      	bne.n	800296c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_ADC_MspInit+0x80>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_ADC_MspInit+0x80>)
 800291e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_ADC_MspInit+0x80>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_ADC_MspInit+0x80>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_ADC_MspInit+0x80>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_ADC_MspInit+0x80>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8002948:	2310      	movs	r3, #16
 800294a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800294c:	2303      	movs	r3, #3
 800294e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	4619      	mov	r1, r3
 8002956:	4809      	ldr	r0, [pc, #36]	; (800297c <HAL_ADC_MspInit+0x84>)
 8002958:	f001 f9ae 	bl	8003cb8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2102      	movs	r1, #2
 8002960:	2012      	movs	r0, #18
 8002962:	f000 ff24 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002966:	2012      	movs	r0, #18
 8002968:	f000 ff3d 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800296c:	bf00      	nop
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40012400 	.word	0x40012400
 8002978:	40021000 	.word	0x40021000
 800297c:	40010800 	.word	0x40010800

08002980 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_CRC_MspInit+0x34>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10b      	bne.n	80029aa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_CRC_MspInit+0x38>)
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <HAL_CRC_MspInit+0x38>)
 8002998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800299c:	6153      	str	r3, [r2, #20]
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_CRC_MspInit+0x38>)
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	40023000 	.word	0x40023000
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029cc:	d10c      	bne.n	80029e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	61d3      	str	r3, [r2, #28]
 80029da:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029e6:	e032      	b.n	8002a4e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <HAL_TIM_Base_MspInit+0xa0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d114      	bne.n	8002a1c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	61d3      	str	r3, [r2, #28]
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	201d      	movs	r0, #29
 8002a10:	f000 fecd 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a14:	201d      	movs	r0, #29
 8002a16:	f000 fee6 	bl	80037e6 <HAL_NVIC_EnableIRQ>
}
 8002a1a:	e018      	b.n	8002a4e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <HAL_TIM_Base_MspInit+0xa4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d113      	bne.n	8002a4e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a26:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a0b      	ldr	r2, [pc, #44]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2100      	movs	r1, #0
 8002a42:	201e      	movs	r0, #30
 8002a44:	f000 feb3 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a48:	201e      	movs	r0, #30
 8002a4a:	f000 fecc 	bl	80037e6 <HAL_NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800

08002a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0310 	add.w	r3, r7, #16
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a82:	d117      	bne.n	8002ab4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_TIM_MspPostInit+0x58>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <HAL_TIM_MspPostInit+0x58>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6193      	str	r3, [r2, #24]
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_TIM_MspPostInit+0x58>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4619      	mov	r1, r3
 8002aae:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <HAL_TIM_MspPostInit+0x5c>)
 8002ab0:	f001 f902 	bl	8003cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ab4:	bf00      	nop
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010800 	.word	0x40010800

08002ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <NMI_Handler+0x4>

08002aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ace:	e7fe      	b.n	8002ace <HardFault_Handler+0x4>

08002ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <MemManage_Handler+0x4>

08002ad6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ada:	e7fe      	b.n	8002ada <BusFault_Handler+0x4>

08002adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <UsageFault_Handler+0x4>

08002ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b0a:	f000 f8ad 	bl	8002c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 8002b0e:	f7fe f837 	bl	8000b80 <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f001 fa80 	bl	8004020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <ADC1_2_IRQHandler+0x10>)
 8002b2a:	f000 fa53 	bl	8002fd4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000398 	.word	0x20000398

08002b38 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b3e:	f001 fbb8 	bl	80042b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20001168 	.word	0x20001168

08002b4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DET_Pin);
 8002b50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b54:	f001 fa64 	bl	8004020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <TIM3_IRQHandler+0x10>)
 8002b62:	f003 fec9 	bl	80068f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000418 	.word	0x20000418

08002b70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <TIM4_IRQHandler+0x10>)
 8002b76:	f003 febf 	bl	80068f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000460 	.word	0x20000460

08002b84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b90:	480c      	ldr	r0, [pc, #48]	; (8002bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b92:	490d      	ldr	r1, [pc, #52]	; (8002bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b94:	4a0d      	ldr	r2, [pc, #52]	; (8002bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b98:	e002      	b.n	8002ba0 <LoopCopyDataInit>

08002b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b9e:	3304      	adds	r3, #4

08002ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba4:	d3f9      	bcc.n	8002b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ba8:	4c0a      	ldr	r4, [pc, #40]	; (8002bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bac:	e001      	b.n	8002bb2 <LoopFillZerobss>

08002bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb0:	3204      	adds	r2, #4

08002bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb4:	d3fb      	bcc.n	8002bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bb6:	f7ff ffe5 	bl	8002b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bba:	f009 fa3d 	bl	800c038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bbe:	f7ff fc13 	bl	80023e8 <main>
  bx lr
 8002bc2:	4770      	bx	lr
  ldr r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc8:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8002bcc:	0800c148 	.word	0x0800c148
  ldr r2, =_sbss
 8002bd0:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8002bd4:	20001674 	.word	0x20001674

08002bd8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bd8:	e7fe      	b.n	8002bd8 <CAN1_RX1_IRQHandler>
	...

08002bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_Init+0x28>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <HAL_Init+0x28>)
 8002be6:	f043 0310 	orr.w	r3, r3, #16
 8002bea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bec:	2003      	movs	r0, #3
 8002bee:	f000 fdd3 	bl	8003798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bf2:	2004      	movs	r0, #4
 8002bf4:	f000 f808 	bl	8002c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf8:	f7ff fe4c 	bl	8002894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000

08002c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_InitTick+0x54>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_InitTick+0x58>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fdeb 	bl	8003802 <HAL_SYSTICK_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00e      	b.n	8002c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b0f      	cmp	r3, #15
 8002c3a:	d80a      	bhi.n	8002c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	f000 fdb3 	bl	80037ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c48:	4a06      	ldr	r2, [pc, #24]	; (8002c64 <HAL_InitTick+0x5c>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000028 	.word	0x20000028
 8002c60:	20000030 	.word	0x20000030
 8002c64:	2000002c 	.word	0x2000002c

08002c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_IncTick+0x1c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_IncTick+0x20>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <HAL_IncTick+0x20>)
 8002c7a:	6013      	str	r3, [r2, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	20000030 	.word	0x20000030
 8002c88:	200004a8 	.word	0x200004a8

08002c8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c90:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <HAL_GetTick+0x10>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	200004a8 	.word	0x200004a8

08002ca0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0be      	b.n	8002e40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fe0a 	bl	80028f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fb93 	bl	8003410 <ADC_ConversionStop_Disable>
 8002cea:	4603      	mov	r3, r0
 8002cec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 8099 	bne.w	8002e2e <HAL_ADC_Init+0x18e>
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 8095 	bne.w	8002e2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d0c:	f023 0302 	bic.w	r3, r3, #2
 8002d10:	f043 0202 	orr.w	r2, r3, #2
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7b1b      	ldrb	r3, [r3, #12]
 8002d26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d38:	d003      	beq.n	8002d42 <HAL_ADC_Init+0xa2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d102      	bne.n	8002d48 <HAL_ADC_Init+0xa8>
 8002d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d46:	e000      	b.n	8002d4a <HAL_ADC_Init+0xaa>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7d1b      	ldrb	r3, [r3, #20]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d119      	bne.n	8002d8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7b1b      	ldrb	r3, [r3, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	3b01      	subs	r3, #1
 8002d66:	035a      	lsls	r2, r3, #13
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	e00b      	b.n	8002d8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_ADC_Init+0x1a8>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbc:	d003      	beq.n	8002dc6 <HAL_ADC_Init+0x126>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d104      	bne.n	8002dd0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	051b      	lsls	r3, r3, #20
 8002dce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <HAL_ADC_Init+0x1ac>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d10b      	bne.n	8002e0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e0a:	e018      	b.n	8002e3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	f023 0312 	bic.w	r3, r3, #18
 8002e14:	f043 0210 	orr.w	r2, r3, #16
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e2c:	e007      	b.n	8002e3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	f043 0210 	orr.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	ffe1f7fd 	.word	0xffe1f7fd
 8002e4c:	ff1f0efe 	.word	0xff1f0efe

08002e50 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_Start_IT+0x1a>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0a0      	b.n	8002fac <HAL_ADC_Start_IT+0x15c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa72 	bl	800335c <ADC_Enable>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 808f 	bne.w	8002fa2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a45      	ldr	r2, [pc, #276]	; (8002fb4 <HAL_ADC_Start_IT+0x164>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d105      	bne.n	8002eae <HAL_ADC_Start_IT+0x5e>
 8002ea2:	4b45      	ldr	r3, [pc, #276]	; (8002fb8 <HAL_ADC_Start_IT+0x168>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d115      	bne.n	8002eda <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d026      	beq.n	8002f16 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ed0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ed8:	e01d      	b.n	8002f16 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <HAL_ADC_Start_IT+0x168>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_ADC_Start_IT+0xaa>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2f      	ldr	r2, [pc, #188]	; (8002fb4 <HAL_ADC_Start_IT+0x164>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10d      	bne.n	8002f16 <HAL_ADC_Start_IT+0xc6>
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_ADC_Start_IT+0x168>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	f023 0206 	bic.w	r2, r3, #6
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f2e:	e002      	b.n	8002f36 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f06f 0202 	mvn.w	r2, #2
 8002f46:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0220 	orr.w	r2, r2, #32
 8002f56:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f66:	d113      	bne.n	8002f90 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f6c:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <HAL_ADC_Start_IT+0x164>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d105      	bne.n	8002f7e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_ADC_Start_IT+0x168>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d108      	bne.n	8002f90 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	e00c      	b.n	8002faa <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	e003      	b.n	8002faa <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40012800 	.word	0x40012800
 8002fb8:	40012400 	.word	0x40012400

08002fbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d140      	bne.n	800306c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d139      	bne.n	800306c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800301a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800301e:	d11d      	bne.n	800305c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003024:	2b00      	cmp	r3, #0
 8003026:	d119      	bne.n	800305c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0220 	bic.w	r2, r2, #32
 8003036:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fd fd61 	bl	8000b24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f06f 0212 	mvn.w	r2, #18
 800306a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b80      	cmp	r3, #128	; 0x80
 8003078:	d14f      	bne.n	800311a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b04      	cmp	r3, #4
 8003086:	d148      	bne.n	800311a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80030aa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80030ae:	d012      	beq.n	80030d6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d125      	bne.n	800310a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030cc:	d11d      	bne.n	800310a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d119      	bne.n	800310a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa6e 	bl	80035ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 020c 	mvn.w	r2, #12
 8003118:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d114      	bne.n	8003152 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d10d      	bne.n	8003152 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f809 	bl	800315a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0201 	mvn.w	r2, #1
 8003150:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x20>
 8003188:	2302      	movs	r3, #2
 800318a:	e0dc      	b.n	8003346 <HAL_ADC_ConfigChannel+0x1da>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b06      	cmp	r3, #6
 800319a:	d81c      	bhi.n	80031d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3b05      	subs	r3, #5
 80031ae:	221f      	movs	r2, #31
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	4019      	ands	r1, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	3b05      	subs	r3, #5
 80031c8:	fa00 f203 	lsl.w	r2, r0, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	635a      	str	r2, [r3, #52]	; 0x34
 80031d4:	e03c      	b.n	8003250 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d81c      	bhi.n	8003218 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	3b23      	subs	r3, #35	; 0x23
 80031f0:	221f      	movs	r2, #31
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	4019      	ands	r1, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	3b23      	subs	r3, #35	; 0x23
 800320a:	fa00 f203 	lsl.w	r2, r0, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
 8003216:	e01b      	b.n	8003250 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	3b41      	subs	r3, #65	; 0x41
 800322a:	221f      	movs	r2, #31
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	4019      	ands	r1, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	3b41      	subs	r3, #65	; 0x41
 8003244:	fa00 f203 	lsl.w	r2, r0, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b09      	cmp	r3, #9
 8003256:	d91c      	bls.n	8003292 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68d9      	ldr	r1, [r3, #12]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	3b1e      	subs	r3, #30
 800326a:	2207      	movs	r2, #7
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	4019      	ands	r1, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6898      	ldr	r0, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	3b1e      	subs	r3, #30
 8003284:	fa00 f203 	lsl.w	r2, r0, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	e019      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6919      	ldr	r1, [r3, #16]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	2207      	movs	r2, #7
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	4019      	ands	r1, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6898      	ldr	r0, [r3, #8]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	fa00 f203 	lsl.w	r2, r0, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d003      	beq.n	80032d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032d2:	2b11      	cmp	r3, #17
 80032d4:	d132      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <HAL_ADC_ConfigChannel+0x1e4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d125      	bne.n	800332c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d126      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b10      	cmp	r3, #16
 8003304:	d11a      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003306:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_ADC_ConfigChannel+0x1e8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a13      	ldr	r2, [pc, #76]	; (8003358 <HAL_ADC_ConfigChannel+0x1ec>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	0c9a      	lsrs	r2, r3, #18
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800331c:	e002      	b.n	8003324 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	3b01      	subs	r3, #1
 8003322:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f9      	bne.n	800331e <HAL_ADC_ConfigChannel+0x1b2>
 800332a:	e007      	b.n	800333c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40012400 	.word	0x40012400
 8003354:	20000028 	.word	0x20000028
 8003358:	431bde83 	.word	0x431bde83

0800335c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d040      	beq.n	80033fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800338a:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <ADC_Enable+0xac>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1f      	ldr	r2, [pc, #124]	; (800340c <ADC_Enable+0xb0>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	0c9b      	lsrs	r3, r3, #18
 8003396:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003398:	e002      	b.n	80033a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3b01      	subs	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f9      	bne.n	800339a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033a6:	f7ff fc71 	bl	8002c8c <HAL_GetTick>
 80033aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033ac:	e01f      	b.n	80033ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033ae:	f7ff fc6d 	bl	8002c8c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d918      	bls.n	80033ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d011      	beq.n	80033ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e007      	b.n	80033fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d1d8      	bne.n	80033ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000028 	.word	0x20000028
 800340c:	431bde83 	.word	0x431bde83

08003410 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12e      	bne.n	8003488 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800343a:	f7ff fc27 	bl	8002c8c <HAL_GetTick>
 800343e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003440:	e01b      	b.n	800347a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003442:	f7ff fc23 	bl	8002c8c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d914      	bls.n	800347a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d10d      	bne.n	800347a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	f043 0210 	orr.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e007      	b.n	800348a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d0dc      	beq.n	8003442 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_ADCEx_Calibration_Start+0x1e>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e095      	b.n	80035de <HAL_ADCEx_Calibration_Start+0x14a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffa8 	bl	8003410 <ADC_ConversionStop_Disable>
 80034c0:	4603      	mov	r3, r0
 80034c2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 8084 	bne.w	80035d4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034d4:	f023 0302 	bic.w	r3, r3, #2
 80034d8:	f043 0202 	orr.w	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034e0:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_ADCEx_Calibration_Start+0x154>)
 80034e2:	681c      	ldr	r4, [r3, #0]
 80034e4:	2002      	movs	r0, #2
 80034e6:	f002 ff33 	bl	8006350 <HAL_RCCEx_GetPeriphCLKFreq>
 80034ea:	4603      	mov	r3, r0
 80034ec:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80034f0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80034f2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80034f4:	e002      	b.n	80034fc <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f9      	bne.n	80034f6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ff2a 	bl	800335c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0208 	orr.w	r2, r2, #8
 8003516:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003518:	f7ff fbb8 	bl	8002c8c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800351e:	e01b      	b.n	8003558 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003520:	f7ff fbb4 	bl	8002c8c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b0a      	cmp	r3, #10
 800352c:	d914      	bls.n	8003558 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f023 0312 	bic.w	r3, r3, #18
 8003544:	f043 0210 	orr.w	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e042      	b.n	80035de <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1dc      	bne.n	8003520 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0204 	orr.w	r2, r2, #4
 8003574:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003576:	f7ff fb89 	bl	8002c8c <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800357c:	e01b      	b.n	80035b6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800357e:	f7ff fb85 	bl	8002c8c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b0a      	cmp	r3, #10
 800358a:	d914      	bls.n	80035b6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	f023 0312 	bic.w	r3, r3, #18
 80035a2:	f043 0210 	orr.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e013      	b.n	80035de <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1dc      	bne.n	800357e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	f023 0303 	bic.w	r3, r3, #3
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd90      	pop	{r4, r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000028 	.word	0x20000028

080035ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
	...

08003600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800361c:	4013      	ands	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003632:	4a04      	ldr	r2, [pc, #16]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	60d3      	str	r3, [r2, #12]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <__NVIC_GetPriorityGrouping+0x18>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0307 	and.w	r3, r3, #7
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	2b00      	cmp	r3, #0
 8003674:	db0b      	blt.n	800368e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	f003 021f 	and.w	r2, r3, #31
 800367c:	4906      	ldr	r1, [pc, #24]	; (8003698 <__NVIC_EnableIRQ+0x34>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2001      	movs	r0, #1
 8003686:	fa00 f202 	lsl.w	r2, r0, r2
 800368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	e000e100 	.word	0xe000e100

0800369c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	db0a      	blt.n	80036c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	490c      	ldr	r1, [pc, #48]	; (80036e8 <__NVIC_SetPriority+0x4c>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	440b      	add	r3, r1
 80036c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c4:	e00a      	b.n	80036dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4908      	ldr	r1, [pc, #32]	; (80036ec <__NVIC_SetPriority+0x50>)
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	3b04      	subs	r3, #4
 80036d4:	0112      	lsls	r2, r2, #4
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	440b      	add	r3, r1
 80036da:	761a      	strb	r2, [r3, #24]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000e100 	.word	0xe000e100
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b089      	sub	sp, #36	; 0x24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f1c3 0307 	rsb	r3, r3, #7
 800370a:	2b04      	cmp	r3, #4
 800370c:	bf28      	it	cs
 800370e:	2304      	movcs	r3, #4
 8003710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3304      	adds	r3, #4
 8003716:	2b06      	cmp	r3, #6
 8003718:	d902      	bls.n	8003720 <NVIC_EncodePriority+0x30>
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3b03      	subs	r3, #3
 800371e:	e000      	b.n	8003722 <NVIC_EncodePriority+0x32>
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43da      	mvns	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	401a      	ands	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003738:	f04f 31ff 	mov.w	r1, #4294967295
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	43d9      	mvns	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	4313      	orrs	r3, r2
         );
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003764:	d301      	bcc.n	800376a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003766:	2301      	movs	r3, #1
 8003768:	e00f      	b.n	800378a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <SysTick_Config+0x40>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003772:	210f      	movs	r1, #15
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	f7ff ff90 	bl	800369c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <SysTick_Config+0x40>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <SysTick_Config+0x40>)
 8003784:	2207      	movs	r2, #7
 8003786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000e010 	.word	0xe000e010

08003798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff2d 	bl	8003600 <__NVIC_SetPriorityGrouping>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c0:	f7ff ff42 	bl	8003648 <__NVIC_GetPriorityGrouping>
 80037c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff90 	bl	80036f0 <NVIC_EncodePriority>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff5f 	bl	800369c <__NVIC_SetPriority>
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff35 	bl	8003664 <__NVIC_EnableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ffa2 	bl	8003754 <SysTick_Config>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e00e      	b.n	800384a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	795b      	ldrb	r3, [r3, #5]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff f89f 	bl	8002980 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003852:	b480      	push	{r7}
 8003854:	b087      	sub	sp, #28
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2202      	movs	r2, #2
 8003866:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e00a      	b.n	8003894 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	441a      	add	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3301      	adds	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	d3f0      	bcc.n	800387e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80038aa:	693b      	ldr	r3, [r7, #16]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80038b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038d2:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HAL_FLASH_Program+0xd8>)
 80038d4:	7e1b      	ldrb	r3, [r3, #24]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_FLASH_Program+0x26>
 80038da:	2302      	movs	r3, #2
 80038dc:	e054      	b.n	8003988 <HAL_FLASH_Program+0xd0>
 80038de:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_FLASH_Program+0xd8>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038e8:	f000 f8a8 	bl	8003a3c <FLASH_WaitForLastOperation>
 80038ec:	4603      	mov	r3, r0
 80038ee:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d144      	bne.n	8003980 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d102      	bne.n	8003902 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80038fc:	2301      	movs	r3, #1
 80038fe:	757b      	strb	r3, [r7, #21]
 8003900:	e007      	b.n	8003912 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d102      	bne.n	800390e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003908:	2302      	movs	r3, #2
 800390a:	757b      	strb	r3, [r7, #21]
 800390c:	e001      	b.n	8003912 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800390e:	2304      	movs	r3, #4
 8003910:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003912:	2300      	movs	r3, #0
 8003914:	75bb      	strb	r3, [r7, #22]
 8003916:	e02d      	b.n	8003974 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003918:	7dbb      	ldrb	r3, [r7, #22]
 800391a:	005a      	lsls	r2, r3, #1
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	eb02 0c03 	add.w	ip, r2, r3
 8003922:	7dbb      	ldrb	r3, [r7, #22]
 8003924:	0119      	lsls	r1, r3, #4
 8003926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800392a:	f1c1 0620 	rsb	r6, r1, #32
 800392e:	f1a1 0020 	sub.w	r0, r1, #32
 8003932:	fa22 f401 	lsr.w	r4, r2, r1
 8003936:	fa03 f606 	lsl.w	r6, r3, r6
 800393a:	4334      	orrs	r4, r6
 800393c:	fa23 f000 	lsr.w	r0, r3, r0
 8003940:	4304      	orrs	r4, r0
 8003942:	fa23 f501 	lsr.w	r5, r3, r1
 8003946:	b2a3      	uxth	r3, r4
 8003948:	4619      	mov	r1, r3
 800394a:	4660      	mov	r0, ip
 800394c:	f000 f85a 	bl	8003a04 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003950:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003954:	f000 f872 	bl	8003a3c <FLASH_WaitForLastOperation>
 8003958:	4603      	mov	r3, r0
 800395a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <HAL_FLASH_Program+0xdc>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <HAL_FLASH_Program+0xdc>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d107      	bne.n	800397e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800396e:	7dbb      	ldrb	r3, [r7, #22]
 8003970:	3301      	adds	r3, #1
 8003972:	75bb      	strb	r3, [r7, #22]
 8003974:	7dba      	ldrb	r2, [r7, #22]
 8003976:	7d7b      	ldrb	r3, [r7, #21]
 8003978:	429a      	cmp	r2, r3
 800397a:	d3cd      	bcc.n	8003918 <HAL_FLASH_Program+0x60>
 800397c:	e000      	b.n	8003980 <HAL_FLASH_Program+0xc8>
      {
        break;
 800397e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_FLASH_Program+0xd8>)
 8003982:	2200      	movs	r2, #0
 8003984:	761a      	strb	r2, [r3, #24]

  return status;
 8003986:	7dfb      	ldrb	r3, [r7, #23]
}
 8003988:	4618      	mov	r0, r3
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003990:	200004b0 	.word	0x200004b0
 8003994:	40022000 	.word	0x40022000

08003998 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_FLASH_Unlock+0x40>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_FLASH_Unlock+0x40>)
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <HAL_FLASH_Unlock+0x44>)
 80039b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80039b4:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_FLASH_Unlock+0x40>)
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <HAL_FLASH_Unlock+0x48>)
 80039b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <HAL_FLASH_Unlock+0x40>)
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80039ca:	79fb      	ldrb	r3, [r7, #7]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40022000 	.word	0x40022000
 80039dc:	45670123 	.word	0x45670123
 80039e0:	cdef89ab 	.word	0xcdef89ab

080039e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_FLASH_Lock+0x1c>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <HAL_FLASH_Lock+0x1c>)
 80039ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40022000 	.word	0x40022000

08003a04 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <FLASH_Program_HalfWord+0x30>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <FLASH_Program_HalfWord+0x34>)
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <FLASH_Program_HalfWord+0x34>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	887a      	ldrh	r2, [r7, #2]
 8003a26:	801a      	strh	r2, [r3, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	200004b0 	.word	0x200004b0
 8003a38:	40022000 	.word	0x40022000

08003a3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a44:	f7ff f922 	bl	8002c8c <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a4a:	e010      	b.n	8003a6e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d00c      	beq.n	8003a6e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <FLASH_WaitForLastOperation+0x2e>
 8003a5a:	f7ff f917 	bl	8002c8c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d201      	bcs.n	8003a6e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e025      	b.n	8003aba <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e8      	bne.n	8003a4c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003a88:	2220      	movs	r2, #32
 8003a8a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d105      	bne.n	8003ab0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003ab0:	f000 f80a 	bl	8003ac8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40022000 	.word	0x40022000

08003ac8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003ad2:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003ae8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f043 0310 	orr.w	r3, r3, #16
 8003af0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003af2:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003afe:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003b08:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003b12:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f043 0304 	orr.w	r3, r3, #4
 8003b26:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003b28:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f240 1201 	movw	r2, #257	; 0x101
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d106      	bne.n	8003b4e <FLASH_SetErrorCode+0x86>
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	61d3      	str	r3, [r2, #28]
}  
 8003b4c:	e002      	b.n	8003b54 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b4e:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	60d3      	str	r3, [r2, #12]
}  
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40022000 	.word	0x40022000
 8003b64:	200004b0 	.word	0x200004b0

08003b68 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b7a:	4b2f      	ldr	r3, [pc, #188]	; (8003c38 <HAL_FLASHEx_Erase+0xd0>)
 8003b7c:	7e1b      	ldrb	r3, [r3, #24]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_FLASHEx_Erase+0x1e>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e053      	b.n	8003c2e <HAL_FLASHEx_Erase+0xc6>
 8003b86:	4b2c      	ldr	r3, [pc, #176]	; (8003c38 <HAL_FLASHEx_Erase+0xd0>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d116      	bne.n	8003bc2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b98:	f7ff ff50 	bl	8003a3c <FLASH_WaitForLastOperation>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d141      	bne.n	8003c26 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f000 f84c 	bl	8003c40 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ba8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bac:	f7ff ff46 	bl	8003a3c <FLASH_WaitForLastOperation>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003bb4:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <HAL_FLASHEx_Erase+0xd4>)
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <HAL_FLASHEx_Erase+0xd4>)
 8003bba:	f023 0304 	bic.w	r3, r3, #4
 8003bbe:	6113      	str	r3, [r2, #16]
 8003bc0:	e031      	b.n	8003c26 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003bc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bc6:	f7ff ff39 	bl	8003a3c <FLASH_WaitForLastOperation>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d12a      	bne.n	8003c26 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	e019      	b.n	8003c14 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003be0:	68b8      	ldr	r0, [r7, #8]
 8003be2:	f000 f849 	bl	8003c78 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003be6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bea:	f7ff ff27 	bl	8003a3c <FLASH_WaitForLastOperation>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003bf2:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <HAL_FLASHEx_Erase+0xd4>)
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	4a11      	ldr	r2, [pc, #68]	; (8003c3c <HAL_FLASHEx_Erase+0xd4>)
 8003bf8:	f023 0302 	bic.w	r3, r3, #2
 8003bfc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	601a      	str	r2, [r3, #0]
            break;
 8003c0a:	e00c      	b.n	8003c26 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c12:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	029a      	lsls	r2, r3, #10
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3dc      	bcc.n	8003be0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_FLASHEx_Erase+0xd0>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	761a      	strb	r2, [r3, #24]

  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200004b0 	.word	0x200004b0
 8003c3c:	40022000 	.word	0x40022000

08003c40 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <FLASH_MassErase+0x30>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <FLASH_MassErase+0x34>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <FLASH_MassErase+0x34>)
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <FLASH_MassErase+0x34>)
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <FLASH_MassErase+0x34>)
 8003c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c64:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr
 8003c70:	200004b0 	.word	0x200004b0
 8003c74:	40022000 	.word	0x40022000

08003c78 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <FLASH_PageErase+0x38>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <FLASH_PageErase+0x3c>)
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <FLASH_PageErase+0x3c>)
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c92:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <FLASH_PageErase+0x3c>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <FLASH_PageErase+0x3c>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <FLASH_PageErase+0x3c>)
 8003c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	200004b0 	.word	0x200004b0
 8003cb4:	40022000 	.word	0x40022000

08003cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b08b      	sub	sp, #44	; 0x2c
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cca:	e169      	b.n	8003fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ccc:	2201      	movs	r2, #1
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	f040 8158 	bne.w	8003f9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4a9a      	ldr	r2, [pc, #616]	; (8003f58 <HAL_GPIO_Init+0x2a0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d05e      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
 8003cf4:	4a98      	ldr	r2, [pc, #608]	; (8003f58 <HAL_GPIO_Init+0x2a0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d875      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003cfa:	4a98      	ldr	r2, [pc, #608]	; (8003f5c <HAL_GPIO_Init+0x2a4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d058      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
 8003d00:	4a96      	ldr	r2, [pc, #600]	; (8003f5c <HAL_GPIO_Init+0x2a4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d86f      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003d06:	4a96      	ldr	r2, [pc, #600]	; (8003f60 <HAL_GPIO_Init+0x2a8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d052      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
 8003d0c:	4a94      	ldr	r2, [pc, #592]	; (8003f60 <HAL_GPIO_Init+0x2a8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d869      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003d12:	4a94      	ldr	r2, [pc, #592]	; (8003f64 <HAL_GPIO_Init+0x2ac>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04c      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
 8003d18:	4a92      	ldr	r2, [pc, #584]	; (8003f64 <HAL_GPIO_Init+0x2ac>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d863      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003d1e:	4a92      	ldr	r2, [pc, #584]	; (8003f68 <HAL_GPIO_Init+0x2b0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d046      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
 8003d24:	4a90      	ldr	r2, [pc, #576]	; (8003f68 <HAL_GPIO_Init+0x2b0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d85d      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003d2a:	2b12      	cmp	r3, #18
 8003d2c:	d82a      	bhi.n	8003d84 <HAL_GPIO_Init+0xcc>
 8003d2e:	2b12      	cmp	r3, #18
 8003d30:	d859      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_GPIO_Init+0x80>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003db3 	.word	0x08003db3
 8003d3c:	08003d8d 	.word	0x08003d8d
 8003d40:	08003d9f 	.word	0x08003d9f
 8003d44:	08003de1 	.word	0x08003de1
 8003d48:	08003de7 	.word	0x08003de7
 8003d4c:	08003de7 	.word	0x08003de7
 8003d50:	08003de7 	.word	0x08003de7
 8003d54:	08003de7 	.word	0x08003de7
 8003d58:	08003de7 	.word	0x08003de7
 8003d5c:	08003de7 	.word	0x08003de7
 8003d60:	08003de7 	.word	0x08003de7
 8003d64:	08003de7 	.word	0x08003de7
 8003d68:	08003de7 	.word	0x08003de7
 8003d6c:	08003de7 	.word	0x08003de7
 8003d70:	08003de7 	.word	0x08003de7
 8003d74:	08003de7 	.word	0x08003de7
 8003d78:	08003de7 	.word	0x08003de7
 8003d7c:	08003d95 	.word	0x08003d95
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	4a79      	ldr	r2, [pc, #484]	; (8003f6c <HAL_GPIO_Init+0x2b4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d8a:	e02c      	b.n	8003de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	623b      	str	r3, [r7, #32]
          break;
 8003d92:	e029      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	623b      	str	r3, [r7, #32]
          break;
 8003d9c:	e024      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	3308      	adds	r3, #8
 8003da4:	623b      	str	r3, [r7, #32]
          break;
 8003da6:	e01f      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	330c      	adds	r3, #12
 8003dae:	623b      	str	r3, [r7, #32]
          break;
 8003db0:	e01a      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003dba:	2304      	movs	r3, #4
 8003dbc:	623b      	str	r3, [r7, #32]
          break;
 8003dbe:	e013      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dc8:	2308      	movs	r3, #8
 8003dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	611a      	str	r2, [r3, #16]
          break;
 8003dd2:	e009      	b.n	8003de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	615a      	str	r2, [r3, #20]
          break;
 8003dde:	e003      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003de0:	2300      	movs	r3, #0
 8003de2:	623b      	str	r3, [r7, #32]
          break;
 8003de4:	e000      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          break;
 8003de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2bff      	cmp	r3, #255	; 0xff
 8003dec:	d801      	bhi.n	8003df2 <HAL_GPIO_Init+0x13a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	e001      	b.n	8003df6 <HAL_GPIO_Init+0x13e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3304      	adds	r3, #4
 8003df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2bff      	cmp	r3, #255	; 0xff
 8003dfc:	d802      	bhi.n	8003e04 <HAL_GPIO_Init+0x14c>
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	e002      	b.n	8003e0a <HAL_GPIO_Init+0x152>
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	3b08      	subs	r3, #8
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	210f      	movs	r1, #15
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	6a39      	ldr	r1, [r7, #32]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	431a      	orrs	r2, r3
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80b1 	beq.w	8003f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e38:	4b4d      	ldr	r3, [pc, #308]	; (8003f70 <HAL_GPIO_Init+0x2b8>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	4a4c      	ldr	r2, [pc, #304]	; (8003f70 <HAL_GPIO_Init+0x2b8>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6193      	str	r3, [r2, #24]
 8003e44:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <HAL_GPIO_Init+0x2b8>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e50:	4a48      	ldr	r2, [pc, #288]	; (8003f74 <HAL_GPIO_Init+0x2bc>)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	3302      	adds	r3, #2
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	220f      	movs	r2, #15
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a40      	ldr	r2, [pc, #256]	; (8003f78 <HAL_GPIO_Init+0x2c0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_GPIO_Init+0x1ec>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3f      	ldr	r2, [pc, #252]	; (8003f7c <HAL_GPIO_Init+0x2c4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00d      	beq.n	8003ea0 <HAL_GPIO_Init+0x1e8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3e      	ldr	r2, [pc, #248]	; (8003f80 <HAL_GPIO_Init+0x2c8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <HAL_GPIO_Init+0x1e4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <HAL_GPIO_Init+0x2cc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d101      	bne.n	8003e98 <HAL_GPIO_Init+0x1e0>
 8003e94:	2303      	movs	r3, #3
 8003e96:	e006      	b.n	8003ea6 <HAL_GPIO_Init+0x1ee>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	e004      	b.n	8003ea6 <HAL_GPIO_Init+0x1ee>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e002      	b.n	8003ea6 <HAL_GPIO_Init+0x1ee>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_GPIO_Init+0x1ee>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	f002 0203 	and.w	r2, r2, #3
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	4093      	lsls	r3, r2
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003eb6:	492f      	ldr	r1, [pc, #188]	; (8003f74 <HAL_GPIO_Init+0x2bc>)
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d006      	beq.n	8003ede <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	492c      	ldr	r1, [pc, #176]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]
 8003edc:	e006      	b.n	8003eec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ede:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	4928      	ldr	r1, [pc, #160]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d006      	beq.n	8003f06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	4922      	ldr	r1, [pc, #136]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	e006      	b.n	8003f14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	491e      	ldr	r1, [pc, #120]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	4918      	ldr	r1, [pc, #96]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	608b      	str	r3, [r1, #8]
 8003f2c:	e006      	b.n	8003f3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	4914      	ldr	r1, [pc, #80]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d021      	beq.n	8003f8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	490e      	ldr	r1, [pc, #56]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60cb      	str	r3, [r1, #12]
 8003f54:	e021      	b.n	8003f9a <HAL_GPIO_Init+0x2e2>
 8003f56:	bf00      	nop
 8003f58:	10320000 	.word	0x10320000
 8003f5c:	10310000 	.word	0x10310000
 8003f60:	10220000 	.word	0x10220000
 8003f64:	10210000 	.word	0x10210000
 8003f68:	10120000 	.word	0x10120000
 8003f6c:	10110000 	.word	0x10110000
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40010800 	.word	0x40010800
 8003f7c:	40010c00 	.word	0x40010c00
 8003f80:	40011000 	.word	0x40011000
 8003f84:	40011400 	.word	0x40011400
 8003f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_GPIO_Init+0x304>)
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	4909      	ldr	r1, [pc, #36]	; (8003fbc <HAL_GPIO_Init+0x304>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f47f ae8e 	bne.w	8003ccc <HAL_GPIO_Init+0x14>
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	372c      	adds	r7, #44	; 0x2c
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	40010400 	.word	0x40010400

08003fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	e001      	b.n	8003fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	807b      	strh	r3, [r7, #2]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ffe:	787b      	ldrb	r3, [r7, #1]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004004:	887a      	ldrh	r2, [r7, #2]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800400a:	e003      	b.n	8004014 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800400c:	887b      	ldrh	r3, [r7, #2]
 800400e:	041a      	lsls	r2, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	611a      	str	r2, [r3, #16]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
	...

08004020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004036:	4a05      	ldr	r2, [pc, #20]	; (800404c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc fda8 	bl	8000b94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40010400 	.word	0x40010400

08004050 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004052:	b08b      	sub	sp, #44	; 0x2c
 8004054:	af06      	add	r7, sp, #24
 8004056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e0fd      	b.n	800425e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f007 fd34 	bl	800bae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2203      	movs	r2, #3
 8004080:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f003 fa1d 	bl	80074c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	687e      	ldr	r6, [r7, #4]
 8004096:	466d      	mov	r5, sp
 8004098:	f106 0410 	add.w	r4, r6, #16
 800409c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800409e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	1d33      	adds	r3, r6, #4
 80040a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a8:	6838      	ldr	r0, [r7, #0]
 80040aa:	f003 f9e7 	bl	800747c <USB_CoreInit>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0ce      	b.n	800425e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fa18 	bl	80074fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	e04c      	b.n	800416c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	440b      	add	r3, r1
 80040e2:	3301      	adds	r3, #1
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	440b      	add	r3, r1
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	b298      	uxth	r0, r3
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	3336      	adds	r3, #54	; 0x36
 8004110:	4602      	mov	r2, r0
 8004112:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	3303      	adds	r3, #3
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	3338      	adds	r3, #56	; 0x38
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	440b      	add	r3, r1
 800414c:	333c      	adds	r3, #60	; 0x3c
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	3340      	adds	r3, #64	; 0x40
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	3301      	adds	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d3ad      	bcc.n	80040d2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e044      	b.n	8004206 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	440b      	add	r3, r1
 80041b6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	440b      	add	r3, r1
 80041e2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	3301      	adds	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3b5      	bcc.n	800417c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	687e      	ldr	r6, [r7, #4]
 8004218:	466d      	mov	r5, sp
 800421a:	f106 0410 	add.w	r4, r6, #16
 800421e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	1d33      	adds	r3, r6, #4
 8004228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800422a:	6838      	ldr	r0, [r7, #0]
 800422c:	f003 f972 	bl	8007514 <USB_DevInit>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e00d      	b.n	800425e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f005 fe24 	bl	8009ea4 <USB_DevDisconnect>

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004266 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_PCD_Start+0x16>
 8004278:	2302      	movs	r3, #2
 800427a:	e016      	b.n	80042aa <HAL_PCD_Start+0x44>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f003 f907 	bl	800749c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800428e:	2101      	movs	r1, #1
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f007 fe9a 	bl	800bfca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f005 fdf8 	bl	8009e90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b088      	sub	sp, #32
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f005 fdfa 	bl	8009eb8 <USB_ReadInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ce:	d102      	bne.n	80042d6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fb5f 	bl	8004994 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f005 fdec 	bl	8009eb8 <USB_ReadInterrupts>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ea:	d112      	bne.n	8004312 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	b292      	uxth	r2, r2
 8004300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f007 fc68 	bl	800bbda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800430a:	2100      	movs	r1, #0
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f923 	bl	8004558 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f005 fdce 	bl	8009eb8 <USB_ReadInterrupts>
 800431c:	4603      	mov	r3, r0
 800431e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004326:	d10b      	bne.n	8004340 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800433a:	b292      	uxth	r2, r2
 800433c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f005 fdb7 	bl	8009eb8 <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004354:	d10b      	bne.n	800436e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004368:	b292      	uxth	r2, r2
 800436a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f005 fda0 	bl	8009eb8 <USB_ReadInterrupts>
 8004378:	4603      	mov	r3, r0
 800437a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800437e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004382:	d126      	bne.n	80043d2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0204 	bic.w	r2, r2, #4
 8004396:	b292      	uxth	r2, r2
 8004398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0208 	bic.w	r2, r2, #8
 80043ae:	b292      	uxth	r2, r2
 80043b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f007 fc49 	bl	800bc4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043cc:	b292      	uxth	r2, r2
 80043ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f005 fd6e 	bl	8009eb8 <USB_ReadInterrupts>
 80043dc:	4603      	mov	r3, r0
 80043de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e6:	f040 8082 	bne.w	80044ee <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e010      	b.n	8004412 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	441a      	add	r2, r3
 80043fc:	7ffb      	ldrb	r3, [r7, #31]
 80043fe:	8812      	ldrh	r2, [r2, #0]
 8004400:	b292      	uxth	r2, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	3320      	adds	r3, #32
 8004406:	443b      	add	r3, r7
 8004408:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800440c:	7ffb      	ldrb	r3, [r7, #31]
 800440e:	3301      	adds	r3, #1
 8004410:	77fb      	strb	r3, [r7, #31]
 8004412:	7ffb      	ldrb	r3, [r7, #31]
 8004414:	2b07      	cmp	r3, #7
 8004416:	d9eb      	bls.n	80043f0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	b292      	uxth	r2, r2
 800442c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004438:	b29a      	uxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	b292      	uxth	r2, r2
 8004444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004448:	bf00      	nop
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004452:	b29b      	uxth	r3, r3
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f6      	beq.n	800444a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446e:	b292      	uxth	r2, r2
 8004470:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e00f      	b.n	800449a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800447a:	7ffb      	ldrb	r3, [r7, #31]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	4611      	mov	r1, r2
 8004482:	7ffa      	ldrb	r2, [r7, #31]
 8004484:	0092      	lsls	r2, r2, #2
 8004486:	440a      	add	r2, r1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	3320      	adds	r3, #32
 800448c:	443b      	add	r3, r7
 800448e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004492:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004494:	7ffb      	ldrb	r3, [r7, #31]
 8004496:	3301      	adds	r3, #1
 8004498:	77fb      	strb	r3, [r7, #31]
 800449a:	7ffb      	ldrb	r3, [r7, #31]
 800449c:	2b07      	cmp	r3, #7
 800449e:	d9ec      	bls.n	800447a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0208 	orr.w	r2, r2, #8
 80044b2:	b292      	uxth	r2, r2
 80044b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ca:	b292      	uxth	r2, r2
 80044cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0204 	orr.w	r2, r2, #4
 80044e2:	b292      	uxth	r2, r2
 80044e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f007 fb95 	bl	800bc18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f005 fce0 	bl	8009eb8 <USB_ReadInterrupts>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004502:	d10e      	bne.n	8004522 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004516:	b292      	uxth	r2, r2
 8004518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f007 fb4e 	bl	800bbbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f005 fcc6 	bl	8009eb8 <USB_ReadInterrupts>
 800452c:	4603      	mov	r3, r0
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004536:	d10b      	bne.n	8004550 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004540:	b29a      	uxth	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800454a:	b292      	uxth	r2, r2
 800454c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004550:	bf00      	nop
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_PCD_SetAddress+0x1a>
 800456e:	2302      	movs	r3, #2
 8004570:	e013      	b.n	800459a <HAL_PCD_SetAddress+0x42>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	78fa      	ldrb	r2, [r7, #3]
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f005 fc6d 	bl	8009e6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	4608      	mov	r0, r1
 80045ac:	4611      	mov	r1, r2
 80045ae:	461a      	mov	r2, r3
 80045b0:	4603      	mov	r3, r0
 80045b2:	70fb      	strb	r3, [r7, #3]
 80045b4:	460b      	mov	r3, r1
 80045b6:	803b      	strh	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da0e      	bge.n	80045e6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4413      	add	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	705a      	strb	r2, [r3, #1]
 80045e4:	e00e      	b.n	8004604 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	f003 0207 	and.w	r2, r3, #7
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	4413      	add	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004610:	883a      	ldrh	r2, [r7, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	78ba      	ldrb	r2, [r7, #2]
 800461a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800462e:	78bb      	ldrb	r3, [r7, #2]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d102      	bne.n	800463a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_PCD_EP_Open+0xa6>
 8004644:	2302      	movs	r3, #2
 8004646:	e00e      	b.n	8004666 <HAL_PCD_EP_Open+0xc4>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68f9      	ldr	r1, [r7, #12]
 8004656:	4618      	mov	r0, r3
 8004658:	f002 ff7c 	bl	8007554 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004664:	7afb      	ldrb	r3, [r7, #11]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800467a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800467e:	2b00      	cmp	r3, #0
 8004680:	da0e      	bge.n	80046a0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	705a      	strb	r2, [r3, #1]
 800469e:	e00e      	b.n	80046be <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	f003 0207 	and.w	r2, r3, #7
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_PCD_EP_Close+0x6a>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e00e      	b.n	80046f6 <HAL_PCD_EP_Close+0x88>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f003 fa9e 	bl	8007c28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	460b      	mov	r3, r1
 800470c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800470e:	7afb      	ldrb	r3, [r7, #11]
 8004710:	f003 0207 	and.w	r2, r3, #7
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2200      	movs	r2, #0
 8004736:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800473e:	7afb      	ldrb	r3, [r7, #11]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	b2da      	uxtb	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800474a:	7afb      	ldrb	r3, [r7, #11]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6979      	ldr	r1, [r7, #20]
 800475a:	4618      	mov	r0, r3
 800475c:	f003 fc50 	bl	8008000 <USB_EPStartXfer>
 8004760:	e005      	b.n	800476e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6979      	ldr	r1, [r7, #20]
 8004768:	4618      	mov	r0, r3
 800476a:	f003 fc49 	bl	8008000 <USB_EPStartXfer>
  }

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 0207 	and.w	r2, r3, #7
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	440b      	add	r3, r1
 8004796:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800479a:	681b      	ldr	r3, [r3, #0]
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr

080047a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	460b      	mov	r3, r1
 80047b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047b6:	7afb      	ldrb	r3, [r7, #11]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2200      	movs	r2, #0
 80047ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2201      	movs	r2, #1
 80047f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047f2:	7afb      	ldrb	r3, [r7, #11]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047fe:	7afb      	ldrb	r3, [r7, #11]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6979      	ldr	r1, [r7, #20]
 800480e:	4618      	mov	r0, r3
 8004810:	f003 fbf6 	bl	8008000 <USB_EPStartXfer>
 8004814:	e005      	b.n	8004822 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	4618      	mov	r0, r3
 800481e:	f003 fbef 	bl	8008000 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 0207 	and.w	r2, r3, #7
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d901      	bls.n	800484a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e04c      	b.n	80048e4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800484a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da0e      	bge.n	8004870 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	705a      	strb	r2, [r3, #1]
 800486e:	e00c      	b.n	800488a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	4413      	add	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	b2da      	uxtb	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_PCD_EP_SetStall+0x7e>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e01c      	b.n	80048e4 <HAL_PCD_EP_SetStall+0xb8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f005 f9d9 	bl	8009c70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d108      	bne.n	80048da <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f005 fafe 	bl	8009ed6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	f003 020f 	and.w	r2, r3, #15
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	429a      	cmp	r2, r3
 8004904:	d901      	bls.n	800490a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e040      	b.n	800498c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800490a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800490e:	2b00      	cmp	r3, #0
 8004910:	da0e      	bge.n	8004930 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	705a      	strb	r2, [r3, #1]
 800492e:	e00e      	b.n	800494e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	f003 0207 	and.w	r2, r3, #7
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	b2da      	uxtb	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_PCD_EP_ClrStall+0x82>
 800496a:	2302      	movs	r3, #2
 800496c:	e00e      	b.n	800498c <HAL_PCD_EP_ClrStall+0xa0>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	4618      	mov	r0, r3
 800497e:	f005 f9c7 	bl	8009d10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08e      	sub	sp, #56	; 0x38
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800499c:	e2ec      	b.n	8004f78 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80049b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 8161 	bne.w	8004c80 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80049be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d152      	bne.n	8004a6e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80049d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d8:	81fb      	strh	r3, [r7, #14]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	89fb      	ldrh	r3, [r7, #14]
 80049e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3328      	adds	r3, #40	; 0x28
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	3302      	adds	r3, #2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	441a      	add	r2, r3
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f007 f8ab 	bl	800bb8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 829b 	beq.w	8004f78 <PCD_EP_ISR_Handler+0x5e4>
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f040 8296 	bne.w	8004f78 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a6c:	e284      	b.n	8004f78 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004a7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d034      	beq.n	8004af2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3306      	adds	r3, #6
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f005 fa55 	bl	8009f76 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ad8:	4013      	ands	r3, r2
 8004ada:	823b      	strh	r3, [r7, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	8a3a      	ldrh	r2, [r7, #16]
 8004ae2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ae6:	b292      	uxth	r2, r2
 8004ae8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f007 f820 	bl	800bb30 <HAL_PCD_SetupStageCallback>
 8004af0:	e242      	b.n	8004f78 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004af2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f280 823e 	bge.w	8004f78 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b08:	4013      	ands	r3, r2
 8004b0a:	83bb      	strh	r3, [r7, #28]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	8bba      	ldrh	r2, [r7, #28]
 8004b12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b16:	b292      	uxth	r2, r2
 8004b18:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3306      	adds	r3, #6
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d019      	beq.n	8004b82 <PCD_EP_ISR_Handler+0x1ee>
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d015      	beq.n	8004b82 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	6959      	ldr	r1, [r3, #20]
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f005 fa05 	bl	8009f76 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	441a      	add	r2, r3
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f006 ffe9 	bl	800bb54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f040 81f2 	bne.w	8004f78 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	4413      	add	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d112      	bne.n	8004be2 <PCD_EP_ISR_Handler+0x24e>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	801a      	strh	r2, [r3, #0]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	801a      	strh	r2, [r3, #0]
 8004be0:	e02f      	b.n	8004c42 <PCD_EP_ISR_Handler+0x2ae>
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b3e      	cmp	r3, #62	; 0x3e
 8004be8:	d813      	bhi.n	8004c12 <PCD_EP_ISR_Handler+0x27e>
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <PCD_EP_ISR_Handler+0x270>
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	3301      	adds	r3, #1
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	029b      	lsls	r3, r3, #10
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	e017      	b.n	8004c42 <PCD_EP_ISR_Handler+0x2ae>
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	633b      	str	r3, [r7, #48]	; 0x30
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d102      	bne.n	8004c2c <PCD_EP_ISR_Handler+0x298>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	029b      	lsls	r3, r3, #10
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	827b      	strh	r3, [r7, #18]
 8004c54:	8a7b      	ldrh	r3, [r7, #18]
 8004c56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c5a:	827b      	strh	r3, [r7, #18]
 8004c5c:	8a7b      	ldrh	r3, [r7, #18]
 8004c5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c62:	827b      	strh	r3, [r7, #18]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	8a7b      	ldrh	r3, [r7, #18]
 8004c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	8013      	strh	r3, [r2, #0]
 8004c7e:	e17b      	b.n	8004f78 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c92:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f280 80ea 	bge.w	8004e70 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004cc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cca:	b292      	uxth	r2, r2
 8004ccc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004cce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	7b1b      	ldrb	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d122      	bne.n	8004d32 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4413      	add	r3, r2
 8004d00:	3306      	adds	r3, #6
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d14:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004d16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8087 	beq.w	8004e2c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	6959      	ldr	r1, [r3, #20]
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	88da      	ldrh	r2, [r3, #6]
 8004d2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d2c:	f005 f923 	bl	8009f76 <USB_ReadPMA>
 8004d30:	e07c      	b.n	8004e2c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	78db      	ldrb	r3, [r3, #3]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d108      	bne.n	8004d4c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004d3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f927 	bl	8004f94 <HAL_PCD_EP_DB_Receive>
 8004d46:	4603      	mov	r3, r0
 8004d48:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d4a:	e06f      	b.n	8004e2c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d021      	beq.n	8004dea <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	3302      	adds	r3, #2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dce:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004dd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d02a      	beq.n	8004e2c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	6959      	ldr	r1, [r3, #20]
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	891a      	ldrh	r2, [r3, #8]
 8004de2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004de4:	f005 f8c7 	bl	8009f76 <USB_ReadPMA>
 8004de8:	e020      	b.n	8004e2c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3306      	adds	r3, #6
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e12:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004e14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	6959      	ldr	r1, [r3, #20]
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	895a      	ldrh	r2, [r3, #10]
 8004e26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e28:	f005 f8a5 	bl	8009f76 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e32:	441a      	add	r2, r3
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e3e:	441a      	add	r2, r3
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d004      	beq.n	8004e56 <PCD_EP_ISR_Handler+0x4c2>
 8004e4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d206      	bcs.n	8004e64 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f006 fe79 	bl	800bb54 <HAL_PCD_DataOutStageCallback>
 8004e62:	e005      	b.n	8004e70 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f003 f8c8 	bl	8008000 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d07e      	beq.n	8004f78 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea8:	843b      	strh	r3, [r7, #32]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	8c3b      	ldrh	r3, [r7, #32]
 8004eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d00c      	beq.n	8004ee8 <PCD_EP_ISR_Handler+0x554>
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	78db      	ldrb	r3, [r3, #3]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d146      	bne.n	8004f6c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004ede:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d141      	bne.n	8004f6c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	3302      	adds	r3, #2
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f10:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	8bfb      	ldrh	r3, [r7, #30]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d906      	bls.n	8004f2a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	699a      	ldr	r2, [r3, #24]
 8004f20:	8bfb      	ldrh	r3, [r7, #30]
 8004f22:	1ad2      	subs	r2, r2, r3
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	619a      	str	r2, [r3, #24]
 8004f28:	e002      	b.n	8004f30 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f006 fe23 	bl	800bb8a <HAL_PCD_DataInStageCallback>
 8004f44:	e018      	b.n	8004f78 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	8bfb      	ldrh	r3, [r7, #30]
 8004f4c:	441a      	add	r2, r3
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	8bfb      	ldrh	r3, [r7, #30]
 8004f58:	441a      	add	r2, r3
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f64:	4618      	mov	r0, r3
 8004f66:	f003 f84b 	bl	8008000 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004f6a:	e005      	b.n	8004f78 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f91b 	bl	80051ae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	b21b      	sxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f6ff ad0a 	blt.w	800499e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3738      	adds	r7, #56	; 0x38
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d07e      	beq.n	80050aa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	8b7b      	ldrh	r3, [r7, #26]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d306      	bcc.n	8004fee <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	8b7b      	ldrh	r3, [r7, #26]
 8004fe6:	1ad2      	subs	r2, r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	619a      	str	r2, [r3, #24]
 8004fec:	e002      	b.n	8004ff4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d123      	bne.n	8005044 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	833b      	strh	r3, [r7, #24]
 8005018:	8b3b      	ldrh	r3, [r7, #24]
 800501a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800501e:	833b      	strh	r3, [r7, #24]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	441a      	add	r2, r3
 800502e:	8b3b      	ldrh	r3, [r7, #24]
 8005030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	b29b      	uxth	r3, r3
 8005042:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d01f      	beq.n	800508e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005068:	82fb      	strh	r3, [r7, #22]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	441a      	add	r2, r3
 8005078:	8afb      	ldrh	r3, [r7, #22]
 800507a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005086:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800508a:	b29b      	uxth	r3, r3
 800508c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800508e:	8b7b      	ldrh	r3, [r7, #26]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8087 	beq.w	80051a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6959      	ldr	r1, [r3, #20]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	891a      	ldrh	r2, [r3, #8]
 80050a2:	8b7b      	ldrh	r3, [r7, #26]
 80050a4:	f004 ff67 	bl	8009f76 <USB_ReadPMA>
 80050a8:	e07c      	b.n	80051a4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	4413      	add	r3, r2
 80050be:	3306      	adds	r3, #6
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	8b7b      	ldrh	r3, [r7, #26]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d306      	bcc.n	80050ec <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	8b7b      	ldrh	r3, [r7, #26]
 80050e4:	1ad2      	subs	r2, r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	619a      	str	r2, [r3, #24]
 80050ea:	e002      	b.n	80050f2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2200      	movs	r2, #0
 80050f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d123      	bne.n	8005142 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005114:	83fb      	strh	r3, [r7, #30]
 8005116:	8bfb      	ldrh	r3, [r7, #30]
 8005118:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800511c:	83fb      	strh	r3, [r7, #30]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	441a      	add	r2, r3
 800512c:	8bfb      	ldrh	r3, [r7, #30]
 800512e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513e:	b29b      	uxth	r3, r3
 8005140:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11f      	bne.n	800518c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	83bb      	strh	r3, [r7, #28]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	8bbb      	ldrh	r3, [r7, #28]
 8005178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005184:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005188:	b29b      	uxth	r3, r3
 800518a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800518c:	8b7b      	ldrh	r3, [r7, #26]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6959      	ldr	r1, [r3, #20]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	895a      	ldrh	r2, [r3, #10]
 800519e:	8b7b      	ldrh	r3, [r7, #26]
 80051a0:	f004 fee9 	bl	8009f76 <USB_ReadPMA>
    }
  }

  return count;
 80051a4:	8b7b      	ldrh	r3, [r7, #26]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b0a2      	sub	sp, #136	; 0x88
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	4613      	mov	r3, r2
 80051ba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 81c7 	beq.w	8005556 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	3302      	adds	r3, #2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d907      	bls.n	8005210 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	699a      	ldr	r2, [r3, #24]
 8005204:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005208:	1ad2      	subs	r2, r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	619a      	str	r2, [r3, #24]
 800520e:	e002      	b.n	8005216 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2200      	movs	r2, #0
 8005214:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f040 80b9 	bne.w	8005392 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	785b      	ldrb	r3, [r3, #1]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d126      	bne.n	8005276 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005236:	b29b      	uxth	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	4413      	add	r3, r2
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	011a      	lsls	r2, r3, #4
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	4413      	add	r3, r2
 800524a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800525a:	b29a      	uxth	r2, r3
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526e:	b29a      	uxth	r2, r3
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	e01a      	b.n	80052ac <HAL_PCD_EP_DB_Transmit+0xfe>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d116      	bne.n	80052ac <HAL_PCD_EP_DB_Transmit+0xfe>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	633b      	str	r3, [r7, #48]	; 0x30
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528c:	b29b      	uxth	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	4413      	add	r3, r2
 8005294:	633b      	str	r3, [r7, #48]	; 0x30
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	011a      	lsls	r2, r3, #4
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	4413      	add	r3, r2
 80052a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	2200      	movs	r2, #0
 80052aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d126      	bne.n	8005308 <HAL_PCD_EP_DB_Transmit+0x15a>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	4413      	add	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	011a      	lsls	r2, r3, #4
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	4413      	add	r3, r2
 80052dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005300:	b29a      	uxth	r2, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e017      	b.n	8005338 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d113      	bne.n	8005338 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005318:	b29b      	uxth	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	4413      	add	r3, r2
 8005320:	623b      	str	r3, [r7, #32]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	011a      	lsls	r2, r3, #4
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	4413      	add	r3, r2
 800532c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	2200      	movs	r2, #0
 8005336:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	4619      	mov	r1, r3
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f006 fc23 	bl	800bb8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 82d4 	beq.w	80058f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	827b      	strh	r3, [r7, #18]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	441a      	add	r2, r3
 800537a:	8a7b      	ldrh	r3, [r7, #18]
 800537c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538c:	b29b      	uxth	r3, r3
 800538e:	8013      	strh	r3, [r2, #0]
 8005390:	e2b2      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d021      	beq.n	80053e0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	f040 8286 	bne.w	80058f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	695a      	ldr	r2, [r3, #20]
 80053f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053f4:	441a      	add	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005402:	441a      	add	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	429a      	cmp	r2, r3
 8005412:	d309      	bcc.n	8005428 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6a1a      	ldr	r2, [r3, #32]
 800541e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	621a      	str	r2, [r3, #32]
 8005426:	e015      	b.n	8005454 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d107      	bne.n	8005440 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005434:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800543e:	e009      	b.n	8005454 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2200      	movs	r2, #0
 8005452:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d155      	bne.n	8005508 <HAL_PCD_EP_DB_Transmit+0x35a>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	63bb      	str	r3, [r7, #56]	; 0x38
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	4413      	add	r3, r2
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	011a      	lsls	r2, r3, #4
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	4413      	add	r3, r2
 800547e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005482:	637b      	str	r3, [r7, #52]	; 0x34
 8005484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005486:	2b00      	cmp	r3, #0
 8005488:	d112      	bne.n	80054b0 <HAL_PCD_EP_DB_Transmit+0x302>
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005494:	b29a      	uxth	r2, r3
 8005496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	e047      	b.n	8005540 <HAL_PCD_EP_DB_Transmit+0x392>
 80054b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b2:	2b3e      	cmp	r3, #62	; 0x3e
 80054b4:	d811      	bhi.n	80054da <HAL_PCD_EP_DB_Transmit+0x32c>
 80054b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80054bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_PCD_EP_DB_Transmit+0x31e>
 80054c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c8:	3301      	adds	r3, #1
 80054ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80054cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	029b      	lsls	r3, r3, #10
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	801a      	strh	r2, [r3, #0]
 80054d8:	e032      	b.n	8005540 <HAL_PCD_EP_DB_Transmit+0x392>
 80054da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <HAL_PCD_EP_DB_Transmit+0x342>
 80054ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ec:	3b01      	subs	r3, #1
 80054ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	029b      	lsls	r3, r3, #10
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005500:	b29a      	uxth	r2, r3
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	801a      	strh	r2, [r3, #0]
 8005506:	e01b      	b.n	8005540 <HAL_PCD_EP_DB_Transmit+0x392>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d117      	bne.n	8005540 <HAL_PCD_EP_DB_Transmit+0x392>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	643b      	str	r3, [r7, #64]	; 0x40
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005524:	4413      	add	r3, r2
 8005526:	643b      	str	r3, [r7, #64]	; 0x40
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	011a      	lsls	r2, r3, #4
 800552e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005530:	4413      	add	r3, r2
 8005532:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553a:	b29a      	uxth	r2, r3
 800553c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6818      	ldr	r0, [r3, #0]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	6959      	ldr	r1, [r3, #20]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	891a      	ldrh	r2, [r3, #8]
 800554c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554e:	b29b      	uxth	r3, r3
 8005550:	f004 fccc 	bl	8009eec <USB_WritePMA>
 8005554:	e1d0      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555e:	b29b      	uxth	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4413      	add	r3, r2
 800556a:	3306      	adds	r3, #6
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800557e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800558a:	429a      	cmp	r2, r3
 800558c:	d307      	bcc.n	800559e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005596:	1ad2      	subs	r2, r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	619a      	str	r2, [r3, #24]
 800559c:	e002      	b.n	80055a4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2200      	movs	r2, #0
 80055a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f040 80c4 	bne.w	8005736 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d126      	bne.n	8005604 <HAL_PCD_EP_DB_Transmit+0x456>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ca:	4413      	add	r3, r2
 80055cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	011a      	lsls	r2, r3, #4
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	4413      	add	r3, r2
 80055d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80055de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005600:	801a      	strh	r2, [r3, #0]
 8005602:	e01a      	b.n	800563a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d116      	bne.n	800563a <HAL_PCD_EP_DB_Transmit+0x48c>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	677b      	str	r3, [r7, #116]	; 0x74
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561a:	b29b      	uxth	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005620:	4413      	add	r3, r2
 8005622:	677b      	str	r3, [r7, #116]	; 0x74
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	011a      	lsls	r2, r3, #4
 800562a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800562c:	4413      	add	r3, r2
 800562e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005632:	673b      	str	r3, [r7, #112]	; 0x70
 8005634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005636:	2200      	movs	r2, #0
 8005638:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d12f      	bne.n	80056a8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005658:	b29b      	uxth	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005660:	4413      	add	r3, r2
 8005662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	011a      	lsls	r2, r3, #4
 800566c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005670:	4413      	add	r3, r2
 8005672:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800567a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005686:	b29a      	uxth	r2, r3
 8005688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569e:	b29a      	uxth	r2, r3
 80056a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	e017      	b.n	80056d8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d113      	bne.n	80056d8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056be:	4413      	add	r3, r2
 80056c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	011a      	lsls	r2, r3, #4
 80056c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ca:	4413      	add	r3, r2
 80056cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056d4:	2200      	movs	r2, #0
 80056d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	4619      	mov	r1, r3
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f006 fa53 	bl	800bb8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f040 8104 	bne.w	80058f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	441a      	add	r2, r3
 800571c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800572c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005730:	b29b      	uxth	r3, r3
 8005732:	8013      	strh	r3, [r2, #0]
 8005734:	e0e0      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d121      	bne.n	8005784 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	441a      	add	r2, r3
 800576c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800577c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005780:	b29b      	uxth	r3, r3
 8005782:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800578a:	2b01      	cmp	r3, #1
 800578c:	f040 80b4 	bne.w	80058f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005798:	441a      	add	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057a6:	441a      	add	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6a1a      	ldr	r2, [r3, #32]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d309      	bcc.n	80057cc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6a1a      	ldr	r2, [r3, #32]
 80057c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c4:	1ad2      	subs	r2, r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	621a      	str	r2, [r3, #32]
 80057ca:	e015      	b.n	80057f8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d107      	bne.n	80057e4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80057d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057e2:	e009      	b.n	80057f8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2200      	movs	r2, #0
 80057ee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	667b      	str	r3, [r7, #100]	; 0x64
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d155      	bne.n	80058b2 <HAL_PCD_EP_DB_Transmit+0x704>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005814:	b29b      	uxth	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581a:	4413      	add	r3, r2
 800581c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	011a      	lsls	r2, r3, #4
 8005824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005826:	4413      	add	r3, r2
 8005828:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800582c:	65bb      	str	r3, [r7, #88]	; 0x58
 800582e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005830:	2b00      	cmp	r3, #0
 8005832:	d112      	bne.n	800585a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	b29b      	uxth	r3, r3
 800583a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800583e:	b29a      	uxth	r2, r3
 8005840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005842:	801a      	strh	r2, [r3, #0]
 8005844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005852:	b29a      	uxth	r2, r3
 8005854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	e044      	b.n	80058e4 <HAL_PCD_EP_DB_Transmit+0x736>
 800585a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585c:	2b3e      	cmp	r3, #62	; 0x3e
 800585e:	d811      	bhi.n	8005884 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005862:	085b      	lsrs	r3, r3, #1
 8005864:	657b      	str	r3, [r7, #84]	; 0x54
 8005866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005872:	3301      	adds	r3, #1
 8005874:	657b      	str	r3, [r7, #84]	; 0x54
 8005876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005878:	b29b      	uxth	r3, r3
 800587a:	029b      	lsls	r3, r3, #10
 800587c:	b29a      	uxth	r2, r3
 800587e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e02f      	b.n	80058e4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	657b      	str	r3, [r7, #84]	; 0x54
 800588a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005896:	3b01      	subs	r3, #1
 8005898:	657b      	str	r3, [r7, #84]	; 0x54
 800589a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800589c:	b29b      	uxth	r3, r3
 800589e:	029b      	lsls	r3, r3, #10
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ae:	801a      	strh	r2, [r3, #0]
 80058b0:	e018      	b.n	80058e4 <HAL_PCD_EP_DB_Transmit+0x736>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d114      	bne.n	80058e4 <HAL_PCD_EP_DB_Transmit+0x736>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058c8:	4413      	add	r3, r2
 80058ca:	667b      	str	r3, [r7, #100]	; 0x64
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	011a      	lsls	r2, r3, #4
 80058d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d4:	4413      	add	r3, r2
 80058d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058da:	663b      	str	r3, [r7, #96]	; 0x60
 80058dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058e2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	6959      	ldr	r1, [r3, #20]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	895a      	ldrh	r2, [r3, #10]
 80058f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f004 fafa 	bl	8009eec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005912:	823b      	strh	r3, [r7, #16]
 8005914:	8a3b      	ldrh	r3, [r7, #16]
 8005916:	f083 0310 	eor.w	r3, r3, #16
 800591a:	823b      	strh	r3, [r7, #16]
 800591c:	8a3b      	ldrh	r3, [r7, #16]
 800591e:	f083 0320 	eor.w	r3, r3, #32
 8005922:	823b      	strh	r3, [r7, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	441a      	add	r2, r3
 8005932:	8a3b      	ldrh	r3, [r7, #16]
 8005934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005944:	b29b      	uxth	r3, r3
 8005946:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3788      	adds	r7, #136	; 0x88
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005952:	b480      	push	{r7}
 8005954:	b087      	sub	sp, #28
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	817b      	strh	r3, [r7, #10]
 8005960:	4613      	mov	r3, r2
 8005962:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005970:	897b      	ldrh	r3, [r7, #10]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e009      	b.n	800599c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005988:	897a      	ldrh	r2, [r7, #10]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800599c:	893b      	ldrh	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d107      	bne.n	80059b2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	80da      	strh	r2, [r3, #6]
 80059b0:	e00b      	b.n	80059ca <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2201      	movs	r2, #1
 80059b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
	...

080059d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e272      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 8087 	beq.w	8005b06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059f8:	4b92      	ldr	r3, [pc, #584]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 030c 	and.w	r3, r3, #12
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d00c      	beq.n	8005a1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a04:	4b8f      	ldr	r3, [pc, #572]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d112      	bne.n	8005a36 <HAL_RCC_OscConfig+0x5e>
 8005a10:	4b8c      	ldr	r3, [pc, #560]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1c:	d10b      	bne.n	8005a36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1e:	4b89      	ldr	r3, [pc, #548]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d06c      	beq.n	8005b04 <HAL_RCC_OscConfig+0x12c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d168      	bne.n	8005b04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e24c      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3e:	d106      	bne.n	8005a4e <HAL_RCC_OscConfig+0x76>
 8005a40:	4b80      	ldr	r3, [pc, #512]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a7f      	ldr	r2, [pc, #508]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	e02e      	b.n	8005aac <HAL_RCC_OscConfig+0xd4>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x98>
 8005a56:	4b7b      	ldr	r3, [pc, #492]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a7a      	ldr	r2, [pc, #488]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4b78      	ldr	r3, [pc, #480]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a77      	ldr	r2, [pc, #476]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e01d      	b.n	8005aac <HAL_RCC_OscConfig+0xd4>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0xbc>
 8005a7a:	4b72      	ldr	r3, [pc, #456]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a71      	ldr	r2, [pc, #452]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4b6f      	ldr	r3, [pc, #444]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a6e      	ldr	r2, [pc, #440]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_OscConfig+0xd4>
 8005a94:	4b6b      	ldr	r3, [pc, #428]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a6a      	ldr	r2, [pc, #424]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4b68      	ldr	r3, [pc, #416]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a67      	ldr	r2, [pc, #412]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d013      	beq.n	8005adc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab4:	f7fd f8ea 	bl	8002c8c <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005abc:	f7fd f8e6 	bl	8002c8c <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	; 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e200      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	4b5d      	ldr	r3, [pc, #372]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0xe4>
 8005ada:	e014      	b.n	8005b06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005adc:	f7fd f8d6 	bl	8002c8c <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fd f8d2 	bl	8002c8c <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	; 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e1ec      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af6:	4b53      	ldr	r3, [pc, #332]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x10c>
 8005b02:	e000      	b.n	8005b06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d063      	beq.n	8005bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b12:	4b4c      	ldr	r3, [pc, #304]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00b      	beq.n	8005b36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b1e:	4b49      	ldr	r3, [pc, #292]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f003 030c 	and.w	r3, r3, #12
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d11c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x18c>
 8005b2a:	4b46      	ldr	r3, [pc, #280]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d116      	bne.n	8005b64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b36:	4b43      	ldr	r3, [pc, #268]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_RCC_OscConfig+0x176>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d001      	beq.n	8005b4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e1c0      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4e:	4b3d      	ldr	r3, [pc, #244]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4939      	ldr	r1, [pc, #228]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b62:	e03a      	b.n	8005bda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d020      	beq.n	8005bae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b6c:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <HAL_RCC_OscConfig+0x270>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b72:	f7fd f88b 	bl	8002c8c <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b7a:	f7fd f887 	bl	8002c8c <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e1a1      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b98:	4b2a      	ldr	r3, [pc, #168]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4927      	ldr	r1, [pc, #156]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	600b      	str	r3, [r1, #0]
 8005bac:	e015      	b.n	8005bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bae:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <HAL_RCC_OscConfig+0x270>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb4:	f7fd f86a 	bl	8002c8c <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bbc:	f7fd f866 	bl	8002c8c <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e180      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bce:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d03a      	beq.n	8005c5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d019      	beq.n	8005c22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bee:	4b17      	ldr	r3, [pc, #92]	; (8005c4c <HAL_RCC_OscConfig+0x274>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf4:	f7fd f84a 	bl	8002c8c <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bfc:	f7fd f846 	bl	8002c8c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e160      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c0e:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <HAL_RCC_OscConfig+0x26c>)
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	f000 fac4 	bl	80061a8 <RCC_Delay>
 8005c20:	e01c      	b.n	8005c5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <HAL_RCC_OscConfig+0x274>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c28:	f7fd f830 	bl	8002c8c <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c2e:	e00f      	b.n	8005c50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c30:	f7fd f82c 	bl	8002c8c <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d908      	bls.n	8005c50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e146      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
 8005c48:	42420000 	.word	0x42420000
 8005c4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c50:	4b92      	ldr	r3, [pc, #584]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e9      	bne.n	8005c30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80a6 	beq.w	8005db6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c6e:	4b8b      	ldr	r3, [pc, #556]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10d      	bne.n	8005c96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c7a:	4b88      	ldr	r3, [pc, #544]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	4a87      	ldr	r2, [pc, #540]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c84:	61d3      	str	r3, [r2, #28]
 8005c86:	4b85      	ldr	r3, [pc, #532]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c92:	2301      	movs	r3, #1
 8005c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c96:	4b82      	ldr	r3, [pc, #520]	; (8005ea0 <HAL_RCC_OscConfig+0x4c8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d118      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca2:	4b7f      	ldr	r3, [pc, #508]	; (8005ea0 <HAL_RCC_OscConfig+0x4c8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a7e      	ldr	r2, [pc, #504]	; (8005ea0 <HAL_RCC_OscConfig+0x4c8>)
 8005ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cae:	f7fc ffed 	bl	8002c8c <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb6:	f7fc ffe9 	bl	8002c8c <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b64      	cmp	r3, #100	; 0x64
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e103      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc8:	4b75      	ldr	r3, [pc, #468]	; (8005ea0 <HAL_RCC_OscConfig+0x4c8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0f0      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d106      	bne.n	8005cea <HAL_RCC_OscConfig+0x312>
 8005cdc:	4b6f      	ldr	r3, [pc, #444]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	4a6e      	ldr	r2, [pc, #440]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	6213      	str	r3, [r2, #32]
 8005ce8:	e02d      	b.n	8005d46 <HAL_RCC_OscConfig+0x36e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCC_OscConfig+0x334>
 8005cf2:	4b6a      	ldr	r3, [pc, #424]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	4a69      	ldr	r2, [pc, #420]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	6213      	str	r3, [r2, #32]
 8005cfe:	4b67      	ldr	r3, [pc, #412]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	4a66      	ldr	r2, [pc, #408]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d04:	f023 0304 	bic.w	r3, r3, #4
 8005d08:	6213      	str	r3, [r2, #32]
 8005d0a:	e01c      	b.n	8005d46 <HAL_RCC_OscConfig+0x36e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	2b05      	cmp	r3, #5
 8005d12:	d10c      	bne.n	8005d2e <HAL_RCC_OscConfig+0x356>
 8005d14:	4b61      	ldr	r3, [pc, #388]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	4a60      	ldr	r2, [pc, #384]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d1a:	f043 0304 	orr.w	r3, r3, #4
 8005d1e:	6213      	str	r3, [r2, #32]
 8005d20:	4b5e      	ldr	r3, [pc, #376]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	4a5d      	ldr	r2, [pc, #372]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	6213      	str	r3, [r2, #32]
 8005d2c:	e00b      	b.n	8005d46 <HAL_RCC_OscConfig+0x36e>
 8005d2e:	4b5b      	ldr	r3, [pc, #364]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	4a5a      	ldr	r2, [pc, #360]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	6213      	str	r3, [r2, #32]
 8005d3a:	4b58      	ldr	r3, [pc, #352]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	4a57      	ldr	r2, [pc, #348]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d40:	f023 0304 	bic.w	r3, r3, #4
 8005d44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d015      	beq.n	8005d7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d4e:	f7fc ff9d 	bl	8002c8c <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d54:	e00a      	b.n	8005d6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d56:	f7fc ff99 	bl	8002c8c <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e0b1      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6c:	4b4b      	ldr	r3, [pc, #300]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0ee      	beq.n	8005d56 <HAL_RCC_OscConfig+0x37e>
 8005d78:	e014      	b.n	8005da4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7a:	f7fc ff87 	bl	8002c8c <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d80:	e00a      	b.n	8005d98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d82:	f7fc ff83 	bl	8002c8c <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e09b      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d98:	4b40      	ldr	r3, [pc, #256]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1ee      	bne.n	8005d82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d105      	bne.n	8005db6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005daa:	4b3c      	ldr	r3, [pc, #240]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	4a3b      	ldr	r2, [pc, #236]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8087 	beq.w	8005ece <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dc0:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f003 030c 	and.w	r3, r3, #12
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d061      	beq.n	8005e90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d146      	bne.n	8005e62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd4:	4b33      	ldr	r3, [pc, #204]	; (8005ea4 <HAL_RCC_OscConfig+0x4cc>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dda:	f7fc ff57 	bl	8002c8c <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de2:	f7fc ff53 	bl	8002c8c <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e06d      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005df4:	4b29      	ldr	r3, [pc, #164]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1f0      	bne.n	8005de2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e08:	d108      	bne.n	8005e1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e0a:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	4921      	ldr	r1, [pc, #132]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e1c:	4b1f      	ldr	r3, [pc, #124]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a19      	ldr	r1, [r3, #32]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	491b      	ldr	r1, [pc, #108]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e34:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <HAL_RCC_OscConfig+0x4cc>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3a:	f7fc ff27 	bl	8002c8c <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e42:	f7fc ff23 	bl	8002c8c <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e03d      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e54:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x46a>
 8005e60:	e035      	b.n	8005ece <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e62:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <HAL_RCC_OscConfig+0x4cc>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e68:	f7fc ff10 	bl	8002c8c <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e70:	f7fc ff0c 	bl	8002c8c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e026      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e82:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <HAL_RCC_OscConfig+0x4c4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x498>
 8005e8e:	e01e      	b.n	8005ece <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d107      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e019      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	40007000 	.word	0x40007000
 8005ea4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <HAL_RCC_OscConfig+0x500>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d106      	bne.n	8005eca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d001      	beq.n	8005ece <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e000      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40021000 	.word	0x40021000

08005edc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0d0      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ef0:	4b6a      	ldr	r3, [pc, #424]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d910      	bls.n	8005f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efe:	4b67      	ldr	r3, [pc, #412]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 0207 	bic.w	r2, r3, #7
 8005f06:	4965      	ldr	r1, [pc, #404]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0e:	4b63      	ldr	r3, [pc, #396]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d001      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e0b8      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d020      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f38:	4b59      	ldr	r3, [pc, #356]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4a58      	ldr	r2, [pc, #352]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f50:	4b53      	ldr	r3, [pc, #332]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4a52      	ldr	r2, [pc, #328]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f5c:	4b50      	ldr	r3, [pc, #320]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	494d      	ldr	r1, [pc, #308]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d040      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d107      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f82:	4b47      	ldr	r3, [pc, #284]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d115      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e07f      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d107      	bne.n	8005faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f9a:	4b41      	ldr	r3, [pc, #260]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e073      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005faa:	4b3d      	ldr	r3, [pc, #244]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e06b      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fba:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f023 0203 	bic.w	r2, r3, #3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4936      	ldr	r1, [pc, #216]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fcc:	f7fc fe5e 	bl	8002c8c <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd2:	e00a      	b.n	8005fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd4:	f7fc fe5a 	bl	8002c8c <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e053      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fea:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 020c 	and.w	r2, r3, #12
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d1eb      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b27      	ldr	r3, [pc, #156]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d210      	bcs.n	800602c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b24      	ldr	r3, [pc, #144]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f023 0207 	bic.w	r2, r3, #7
 8006012:	4922      	ldr	r1, [pc, #136]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	4313      	orrs	r3, r2
 8006018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800601a:	4b20      	ldr	r3, [pc, #128]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e032      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006038:	4b19      	ldr	r3, [pc, #100]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	4916      	ldr	r1, [pc, #88]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006046:	4313      	orrs	r3, r2
 8006048:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	490e      	ldr	r1, [pc, #56]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006066:	4313      	orrs	r3, r2
 8006068:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800606a:	f000 f821 	bl	80060b0 <HAL_RCC_GetSysClockFreq>
 800606e:	4602      	mov	r2, r0
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	490a      	ldr	r1, [pc, #40]	; (80060a4 <HAL_RCC_ClockConfig+0x1c8>)
 800607c:	5ccb      	ldrb	r3, [r1, r3]
 800607e:	fa22 f303 	lsr.w	r3, r2, r3
 8006082:	4a09      	ldr	r2, [pc, #36]	; (80060a8 <HAL_RCC_ClockConfig+0x1cc>)
 8006084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006086:	4b09      	ldr	r3, [pc, #36]	; (80060ac <HAL_RCC_ClockConfig+0x1d0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f7fc fdbc 	bl	8002c08 <HAL_InitTick>

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40022000 	.word	0x40022000
 80060a0:	40021000 	.word	0x40021000
 80060a4:	0800c128 	.word	0x0800c128
 80060a8:	20000028 	.word	0x20000028
 80060ac:	2000002c 	.word	0x2000002c

080060b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060b0:	b490      	push	{r4, r7}
 80060b2:	b08a      	sub	sp, #40	; 0x28
 80060b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80060b6:	4b29      	ldr	r3, [pc, #164]	; (800615c <HAL_RCC_GetSysClockFreq+0xac>)
 80060b8:	1d3c      	adds	r4, r7, #4
 80060ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80060c0:	f240 2301 	movw	r3, #513	; 0x201
 80060c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	2300      	movs	r3, #0
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	2300      	movs	r3, #0
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060da:	4b21      	ldr	r3, [pc, #132]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb0>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 030c 	and.w	r3, r3, #12
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d002      	beq.n	80060f0 <HAL_RCC_GetSysClockFreq+0x40>
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d003      	beq.n	80060f6 <HAL_RCC_GetSysClockFreq+0x46>
 80060ee:	e02b      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060f0:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <HAL_RCC_GetSysClockFreq+0xb4>)
 80060f2:	623b      	str	r3, [r7, #32]
      break;
 80060f4:	e02b      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	0c9b      	lsrs	r3, r3, #18
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	3328      	adds	r3, #40	; 0x28
 8006100:	443b      	add	r3, r7
 8006102:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006106:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d012      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006112:	4b13      	ldr	r3, [pc, #76]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	0c5b      	lsrs	r3, r3, #17
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	3328      	adds	r3, #40	; 0x28
 800611e:	443b      	add	r3, r7
 8006120:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006124:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	4a0e      	ldr	r2, [pc, #56]	; (8006164 <HAL_RCC_GetSysClockFreq+0xb4>)
 800612a:	fb03 f202 	mul.w	r2, r3, r2
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	fbb2 f3f3 	udiv	r3, r2, r3
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
 8006136:	e004      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	4a0b      	ldr	r2, [pc, #44]	; (8006168 <HAL_RCC_GetSysClockFreq+0xb8>)
 800613c:	fb02 f303 	mul.w	r3, r2, r3
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	623b      	str	r3, [r7, #32]
      break;
 8006146:	e002      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <HAL_RCC_GetSysClockFreq+0xb4>)
 800614a:	623b      	str	r3, [r7, #32]
      break;
 800614c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800614e:	6a3b      	ldr	r3, [r7, #32]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3728      	adds	r7, #40	; 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bc90      	pop	{r4, r7}
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	0800c0c4 	.word	0x0800c0c4
 8006160:	40021000 	.word	0x40021000
 8006164:	007a1200 	.word	0x007a1200
 8006168:	003d0900 	.word	0x003d0900

0800616c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006170:	4b02      	ldr	r3, [pc, #8]	; (800617c <HAL_RCC_GetHCLKFreq+0x10>)
 8006172:	681b      	ldr	r3, [r3, #0]
}
 8006174:	4618      	mov	r0, r3
 8006176:	46bd      	mov	sp, r7
 8006178:	bc80      	pop	{r7}
 800617a:	4770      	bx	lr
 800617c:	20000028 	.word	0x20000028

08006180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006184:	f7ff fff2 	bl	800616c <HAL_RCC_GetHCLKFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	0adb      	lsrs	r3, r3, #11
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	4903      	ldr	r1, [pc, #12]	; (80061a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800619c:	4618      	mov	r0, r3
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40021000 	.word	0x40021000
 80061a4:	0800c138 	.word	0x0800c138

080061a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <RCC_Delay+0x34>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <RCC_Delay+0x38>)
 80061b6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ba:	0a5b      	lsrs	r3, r3, #9
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061c4:	bf00      	nop
  }
  while (Delay --);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1e5a      	subs	r2, r3, #1
 80061ca:	60fa      	str	r2, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f9      	bne.n	80061c4 <RCC_Delay+0x1c>
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr
 80061dc:	20000028 	.word	0x20000028
 80061e0:	10624dd3 	.word	0x10624dd3

080061e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d07d      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006200:	2300      	movs	r3, #0
 8006202:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006204:	4b4f      	ldr	r3, [pc, #316]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10d      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006210:	4b4c      	ldr	r3, [pc, #304]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	4a4b      	ldr	r2, [pc, #300]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621a:	61d3      	str	r3, [r2, #28]
 800621c:	4b49      	ldr	r3, [pc, #292]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622c:	4b46      	ldr	r3, [pc, #280]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006234:	2b00      	cmp	r3, #0
 8006236:	d118      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006238:	4b43      	ldr	r3, [pc, #268]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a42      	ldr	r2, [pc, #264]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800623e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006242:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006244:	f7fc fd22 	bl	8002c8c <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624a:	e008      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624c:	f7fc fd1e 	bl	8002c8c <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b64      	cmp	r3, #100	; 0x64
 8006258:	d901      	bls.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e06d      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625e:	4b3a      	ldr	r3, [pc, #232]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f0      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800626a:	4b36      	ldr	r3, [pc, #216]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006272:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d02e      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	429a      	cmp	r2, r3
 8006286:	d027      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006288:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006290:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006292:	4b2e      	ldr	r3, [pc, #184]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006294:	2201      	movs	r2, #1
 8006296:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006298:	4b2c      	ldr	r3, [pc, #176]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800629e:	4a29      	ldr	r2, [pc, #164]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d014      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ae:	f7fc fced 	bl	8002c8c <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b4:	e00a      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b6:	f7fc fce9 	bl	8002c8c <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d901      	bls.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e036      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062cc:	4b1d      	ldr	r3, [pc, #116]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ee      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062d8:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4917      	ldr	r1, [pc, #92]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d105      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f0:	4b14      	ldr	r3, [pc, #80]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	4a13      	ldr	r2, [pc, #76]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006308:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	490b      	ldr	r1, [pc, #44]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006316:	4313      	orrs	r3, r2
 8006318:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0310 	and.w	r3, r3, #16
 8006322:	2b00      	cmp	r3, #0
 8006324:	d008      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006326:	4b07      	ldr	r3, [pc, #28]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	4904      	ldr	r1, [pc, #16]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006334:	4313      	orrs	r3, r2
 8006336:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40021000 	.word	0x40021000
 8006348:	40007000 	.word	0x40007000
 800634c:	42420440 	.word	0x42420440

08006350 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006350:	b590      	push	{r4, r7, lr}
 8006352:	b08d      	sub	sp, #52	; 0x34
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006358:	4b58      	ldr	r3, [pc, #352]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800635a:	f107 040c 	add.w	r4, r7, #12
 800635e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006364:	f240 2301 	movw	r3, #513	; 0x201
 8006368:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
 800636e:	2300      	movs	r3, #0
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006372:	2300      	movs	r3, #0
 8006374:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	2300      	movs	r3, #0
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b10      	cmp	r3, #16
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b10      	cmp	r3, #16
 8006388:	f200 808e 	bhi.w	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d049      	beq.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b02      	cmp	r3, #2
 8006396:	d079      	beq.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006398:	e086      	b.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800639a:	4b49      	ldr	r3, [pc, #292]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80063a0:	4b47      	ldr	r3, [pc, #284]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d07f      	beq.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	0c9b      	lsrs	r3, r3, #18
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	3330      	adds	r3, #48	; 0x30
 80063b6:	443b      	add	r3, r7
 80063b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80063bc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d017      	beq.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80063c8:	4b3d      	ldr	r3, [pc, #244]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	0c5b      	lsrs	r3, r3, #17
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	3330      	adds	r3, #48	; 0x30
 80063d4:	443b      	add	r3, r7
 80063d6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00d      	beq.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80063e6:	4a37      	ldr	r2, [pc, #220]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f6:	e004      	b.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	4a33      	ldr	r2, [pc, #204]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80063fc:	fb02 f303 	mul.w	r3, r2, r3
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006402:	4b2f      	ldr	r3, [pc, #188]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800640a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800640e:	d102      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006414:	e04a      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4a2c      	ldr	r2, [pc, #176]	; (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800641c:	fba2 2303 	umull	r2, r3, r2, r3
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006424:	e042      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006426:	4b26      	ldr	r3, [pc, #152]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006436:	d108      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006446:	62bb      	str	r3, [r7, #40]	; 0x28
 8006448:	e01f      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006454:	d109      	bne.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006456:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006462:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
 8006468:	e00f      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006474:	d11c      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d016      	beq.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006482:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006488:	e012      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800648a:	e011      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800648c:	f7ff fe78 	bl	8006180 <HAL_RCC_GetPCLK2Freq>
 8006490:	4602      	mov	r2, r0
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	0b9b      	lsrs	r3, r3, #14
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	3301      	adds	r3, #1
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064a6:	e004      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80064a8:	bf00      	nop
 80064aa:	e002      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80064ac:	bf00      	nop
 80064ae:	e000      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80064b0:	bf00      	nop
    }
  }
  return (frequency);
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3734      	adds	r7, #52	; 0x34
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd90      	pop	{r4, r7, pc}
 80064bc:	0800c0d4 	.word	0x0800c0d4
 80064c0:	40021000 	.word	0x40021000
 80064c4:	007a1200 	.word	0x007a1200
 80064c8:	003d0900 	.word	0x003d0900
 80064cc:	aaaaaaab 	.word	0xaaaaaaab

080064d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e041      	b.n	8006566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fc fa60 	bl	80029bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f000 fca0 	bl	8006e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d001      	beq.n	8006588 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e032      	b.n	80065ee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a18      	ldr	r2, [pc, #96]	; (80065f8 <HAL_TIM_Base_Start+0x88>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00e      	beq.n	80065b8 <HAL_TIM_Base_Start+0x48>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a2:	d009      	beq.n	80065b8 <HAL_TIM_Base_Start+0x48>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a14      	ldr	r2, [pc, #80]	; (80065fc <HAL_TIM_Base_Start+0x8c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_TIM_Base_Start+0x48>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a13      	ldr	r2, [pc, #76]	; (8006600 <HAL_TIM_Base_Start+0x90>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d111      	bne.n	80065dc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b06      	cmp	r3, #6
 80065c8:	d010      	beq.n	80065ec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	e007      	b.n	80065ec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	40012c00 	.word	0x40012c00
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800

08006604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	d001      	beq.n	800661c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e03a      	b.n	8006692 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a18      	ldr	r2, [pc, #96]	; (800669c <HAL_TIM_Base_Start_IT+0x98>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00e      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x58>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006646:	d009      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x58>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a14      	ldr	r2, [pc, #80]	; (80066a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d004      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x58>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a13      	ldr	r2, [pc, #76]	; (80066a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d111      	bne.n	8006680 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b06      	cmp	r3, #6
 800666c:	d010      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0201 	orr.w	r2, r2, #1
 800667c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667e:	e007      	b.n	8006690 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr
 800669c:	40012c00 	.word	0x40012c00
 80066a0:	40000400 	.word	0x40000400
 80066a4:	40000800 	.word	0x40000800

080066a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6a1a      	ldr	r2, [r3, #32]
 80066c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10f      	bne.n	80066f0 <HAL_TIM_Base_Stop_IT+0x48>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6a1a      	ldr	r2, [r3, #32]
 80066d6:	f240 4344 	movw	r3, #1092	; 0x444
 80066da:	4013      	ands	r3, r2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d107      	bne.n	80066f0 <HAL_TIM_Base_Stop_IT+0x48>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e041      	b.n	800679a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f839 	bl	80067a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f000 fb86 	bl	8006e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_TIM_PWM_Start+0x24>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e022      	b.n	800681e <HAL_TIM_PWM_Start+0x6a>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d109      	bne.n	80067f2 <HAL_TIM_PWM_Start+0x3e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	bf14      	ite	ne
 80067ea:	2301      	movne	r3, #1
 80067ec:	2300      	moveq	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	e015      	b.n	800681e <HAL_TIM_PWM_Start+0x6a>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d109      	bne.n	800680c <HAL_TIM_PWM_Start+0x58>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	e008      	b.n	800681e <HAL_TIM_PWM_Start+0x6a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	bf14      	ite	ne
 8006818:	2301      	movne	r3, #1
 800681a:	2300      	moveq	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e05e      	b.n	80068e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <HAL_TIM_PWM_Start+0x82>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006834:	e013      	b.n	800685e <HAL_TIM_PWM_Start+0xaa>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b04      	cmp	r3, #4
 800683a:	d104      	bne.n	8006846 <HAL_TIM_PWM_Start+0x92>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006844:	e00b      	b.n	800685e <HAL_TIM_PWM_Start+0xaa>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b08      	cmp	r3, #8
 800684a:	d104      	bne.n	8006856 <HAL_TIM_PWM_Start+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006854:	e003      	b.n	800685e <HAL_TIM_PWM_Start+0xaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2201      	movs	r2, #1
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fd74 	bl	8007354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1e      	ldr	r2, [pc, #120]	; (80068ec <HAL_TIM_PWM_Start+0x138>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d107      	bne.n	8006886 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006884:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a18      	ldr	r2, [pc, #96]	; (80068ec <HAL_TIM_PWM_Start+0x138>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <HAL_TIM_PWM_Start+0xfa>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006898:	d009      	beq.n	80068ae <HAL_TIM_PWM_Start+0xfa>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a14      	ldr	r2, [pc, #80]	; (80068f0 <HAL_TIM_PWM_Start+0x13c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <HAL_TIM_PWM_Start+0xfa>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a12      	ldr	r2, [pc, #72]	; (80068f4 <HAL_TIM_PWM_Start+0x140>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d111      	bne.n	80068d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b06      	cmp	r3, #6
 80068be:	d010      	beq.n	80068e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d0:	e007      	b.n	80068e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40012c00 	.word	0x40012c00
 80068f0:	40000400 	.word	0x40000400
 80068f4:	40000800 	.word	0x40000800

080068f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b02      	cmp	r3, #2
 800690c:	d122      	bne.n	8006954 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b02      	cmp	r3, #2
 800691a:	d11b      	bne.n	8006954 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f06f 0202 	mvn.w	r2, #2
 8006924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fa6f 	bl	8006e1e <HAL_TIM_IC_CaptureCallback>
 8006940:	e005      	b.n	800694e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa62 	bl	8006e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fa71 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b04      	cmp	r3, #4
 8006960:	d122      	bne.n	80069a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b04      	cmp	r3, #4
 800696e:	d11b      	bne.n	80069a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0204 	mvn.w	r2, #4
 8006978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa45 	bl	8006e1e <HAL_TIM_IC_CaptureCallback>
 8006994:	e005      	b.n	80069a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa38 	bl	8006e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fa47 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	d122      	bne.n	80069fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d11b      	bne.n	80069fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f06f 0208 	mvn.w	r2, #8
 80069cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2204      	movs	r2, #4
 80069d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa1b 	bl	8006e1e <HAL_TIM_IC_CaptureCallback>
 80069e8:	e005      	b.n	80069f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa0e 	bl	8006e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa1d 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0310 	and.w	r3, r3, #16
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d122      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b10      	cmp	r3, #16
 8006a16:	d11b      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0210 	mvn.w	r2, #16
 8006a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2208      	movs	r2, #8
 8006a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9f1 	bl	8006e1e <HAL_TIM_IC_CaptureCallback>
 8006a3c:	e005      	b.n	8006a4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9e4 	bl	8006e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f9f3 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d10e      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d107      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0201 	mvn.w	r2, #1
 8006a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fa f866 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a86:	2b80      	cmp	r3, #128	; 0x80
 8006a88:	d10e      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a94:	2b80      	cmp	r3, #128	; 0x80
 8006a96:	d107      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fce1 	bl	800746a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab2:	2b40      	cmp	r3, #64	; 0x40
 8006ab4:	d10e      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d107      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9b7 	bl	8006e42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d10e      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d107      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f06f 0220 	mvn.w	r2, #32
 8006af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fcac 	bl	8007458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b00:	bf00      	nop
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e0ac      	b.n	8006c7c <HAL_TIM_PWM_ConfigChannel+0x174>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b0c      	cmp	r3, #12
 8006b2e:	f200 809f 	bhi.w	8006c70 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b6d 	.word	0x08006b6d
 8006b3c:	08006c71 	.word	0x08006c71
 8006b40:	08006c71 	.word	0x08006c71
 8006b44:	08006c71 	.word	0x08006c71
 8006b48:	08006bad 	.word	0x08006bad
 8006b4c:	08006c71 	.word	0x08006c71
 8006b50:	08006c71 	.word	0x08006c71
 8006b54:	08006c71 	.word	0x08006c71
 8006b58:	08006bef 	.word	0x08006bef
 8006b5c:	08006c71 	.word	0x08006c71
 8006b60:	08006c71 	.word	0x08006c71
 8006b64:	08006c71 	.word	0x08006c71
 8006b68:	08006c2f 	.word	0x08006c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 f9d0 	bl	8006f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0208 	orr.w	r2, r2, #8
 8006b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0204 	bic.w	r2, r2, #4
 8006b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6999      	ldr	r1, [r3, #24]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	619a      	str	r2, [r3, #24]
      break;
 8006baa:	e062      	b.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fa16 	bl	8006fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6999      	ldr	r1, [r3, #24]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	021a      	lsls	r2, r3, #8
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	619a      	str	r2, [r3, #24]
      break;
 8006bec:	e041      	b.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fa5f 	bl	80070b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0208 	orr.w	r2, r2, #8
 8006c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0204 	bic.w	r2, r2, #4
 8006c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69d9      	ldr	r1, [r3, #28]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	61da      	str	r2, [r3, #28]
      break;
 8006c2c:	e021      	b.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 faa9 	bl	800718c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69da      	ldr	r2, [r3, #28]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69d9      	ldr	r1, [r3, #28]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	021a      	lsls	r2, r3, #8
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	61da      	str	r2, [r3, #28]
      break;
 8006c6e:	e000      	b.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006c70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIM_ConfigClockSource+0x18>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e0b3      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x180>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd4:	d03e      	beq.n	8006d54 <HAL_TIM_ConfigClockSource+0xd0>
 8006cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cda:	f200 8087 	bhi.w	8006dec <HAL_TIM_ConfigClockSource+0x168>
 8006cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce2:	f000 8085 	beq.w	8006df0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cea:	d87f      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x168>
 8006cec:	2b70      	cmp	r3, #112	; 0x70
 8006cee:	d01a      	beq.n	8006d26 <HAL_TIM_ConfigClockSource+0xa2>
 8006cf0:	2b70      	cmp	r3, #112	; 0x70
 8006cf2:	d87b      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x168>
 8006cf4:	2b60      	cmp	r3, #96	; 0x60
 8006cf6:	d050      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0x116>
 8006cf8:	2b60      	cmp	r3, #96	; 0x60
 8006cfa:	d877      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x168>
 8006cfc:	2b50      	cmp	r3, #80	; 0x50
 8006cfe:	d03c      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0xf6>
 8006d00:	2b50      	cmp	r3, #80	; 0x50
 8006d02:	d873      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x168>
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	d058      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x136>
 8006d08:	2b40      	cmp	r3, #64	; 0x40
 8006d0a:	d86f      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x168>
 8006d0c:	2b30      	cmp	r3, #48	; 0x30
 8006d0e:	d064      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x156>
 8006d10:	2b30      	cmp	r3, #48	; 0x30
 8006d12:	d86b      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x168>
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d060      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x156>
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d867      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x168>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d05c      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x156>
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d05a      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d24:	e062      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	6899      	ldr	r1, [r3, #8]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f000 faee 	bl	8007316 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	609a      	str	r2, [r3, #8]
      break;
 8006d52:	e04e      	b.n	8006df2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6899      	ldr	r1, [r3, #8]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f000 fad7 	bl	8007316 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d76:	609a      	str	r2, [r3, #8]
      break;
 8006d78:	e03b      	b.n	8006df2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6859      	ldr	r1, [r3, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f000 fa4e 	bl	8007228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2150      	movs	r1, #80	; 0x50
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 faa5 	bl	80072e2 <TIM_ITRx_SetConfig>
      break;
 8006d98:	e02b      	b.n	8006df2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	6859      	ldr	r1, [r3, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f000 fa6c 	bl	8007284 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2160      	movs	r1, #96	; 0x60
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fa95 	bl	80072e2 <TIM_ITRx_SetConfig>
      break;
 8006db8:	e01b      	b.n	8006df2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6859      	ldr	r1, [r3, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f000 fa2e 	bl	8007228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2140      	movs	r1, #64	; 0x40
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fa85 	bl	80072e2 <TIM_ITRx_SetConfig>
      break;
 8006dd8:	e00b      	b.n	8006df2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4619      	mov	r1, r3
 8006de4:	4610      	mov	r0, r2
 8006de6:	f000 fa7c 	bl	80072e2 <TIM_ITRx_SetConfig>
        break;
 8006dea:	e002      	b.n	8006df2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dec:	bf00      	nop
 8006dee:	e000      	b.n	8006df2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006df0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr

08006e1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a29      	ldr	r2, [pc, #164]	; (8006f0c <TIM_Base_SetConfig+0xb8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_Base_SetConfig+0x30>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e72:	d007      	beq.n	8006e84 <TIM_Base_SetConfig+0x30>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a26      	ldr	r2, [pc, #152]	; (8006f10 <TIM_Base_SetConfig+0xbc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_Base_SetConfig+0x30>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a25      	ldr	r2, [pc, #148]	; (8006f14 <TIM_Base_SetConfig+0xc0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d108      	bne.n	8006e96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <TIM_Base_SetConfig+0xb8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00b      	beq.n	8006eb6 <TIM_Base_SetConfig+0x62>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea4:	d007      	beq.n	8006eb6 <TIM_Base_SetConfig+0x62>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a19      	ldr	r2, [pc, #100]	; (8006f10 <TIM_Base_SetConfig+0xbc>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_Base_SetConfig+0x62>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a18      	ldr	r2, [pc, #96]	; (8006f14 <TIM_Base_SetConfig+0xc0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d108      	bne.n	8006ec8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a07      	ldr	r2, [pc, #28]	; (8006f0c <TIM_Base_SetConfig+0xb8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d103      	bne.n	8006efc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	615a      	str	r2, [r3, #20]
}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800

08006f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f023 0201 	bic.w	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 0302 	bic.w	r3, r3, #2
 8006f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <TIM_OC1_SetConfig+0xc8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d10c      	bne.n	8006f8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f023 0308 	bic.w	r3, r3, #8
 8006f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f023 0304 	bic.w	r3, r3, #4
 8006f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <TIM_OC1_SetConfig+0xc8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d111      	bne.n	8006fba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	621a      	str	r2, [r3, #32]
}
 8006fd4:	bf00      	nop
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40012c00 	.word	0x40012c00

08006fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f023 0210 	bic.w	r2, r3, #16
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0320 	bic.w	r3, r3, #32
 800702e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <TIM_OC2_SetConfig+0xd0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d10d      	bne.n	8007060 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800704a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <TIM_OC2_SetConfig+0xd0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d113      	bne.n	8007090 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800706e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr
 80070b4:	40012c00 	.word	0x40012c00

080070b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <TIM_OC3_SetConfig+0xd0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d10d      	bne.n	8007132 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800711c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a14      	ldr	r2, [pc, #80]	; (8007188 <TIM_OC3_SetConfig+0xd0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d113      	bne.n	8007162 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	621a      	str	r2, [r3, #32]
}
 800717c:	bf00      	nop
 800717e:	371c      	adds	r7, #28
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40012c00 	.word	0x40012c00

0800718c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	031b      	lsls	r3, r3, #12
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a0f      	ldr	r2, [pc, #60]	; (8007224 <TIM_OC4_SetConfig+0x98>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d109      	bne.n	8007200 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	019b      	lsls	r3, r3, #6
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr
 8007224:	40012c00 	.word	0x40012c00

08007228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f023 0201 	bic.w	r2, r3, #1
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 030a 	bic.w	r3, r3, #10
 8007264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	621a      	str	r2, [r3, #32]
}
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	f023 0210 	bic.w	r2, r3, #16
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	031b      	lsls	r3, r3, #12
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	621a      	str	r2, [r3, #32]
}
 80072d8:	bf00      	nop
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr

080072e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b085      	sub	sp, #20
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4313      	orrs	r3, r2
 8007300:	f043 0307 	orr.w	r3, r3, #7
 8007304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	609a      	str	r2, [r3, #8]
}
 800730c:	bf00      	nop
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr

08007316 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007316:	b480      	push	{r7}
 8007318:	b087      	sub	sp, #28
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007330:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	021a      	lsls	r2, r3, #8
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	431a      	orrs	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4313      	orrs	r3, r2
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	609a      	str	r2, [r3, #8]
}
 800734a:	bf00      	nop
 800734c:	371c      	adds	r7, #28
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr

08007354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	2201      	movs	r2, #1
 8007368:	fa02 f303 	lsl.w	r3, r2, r3
 800736c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a1a      	ldr	r2, [r3, #32]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	43db      	mvns	r3, r3
 8007376:	401a      	ands	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a1a      	ldr	r2, [r3, #32]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f003 031f 	and.w	r3, r3, #31
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	fa01 f303 	lsl.w	r3, r1, r3
 800738c:	431a      	orrs	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	621a      	str	r2, [r3, #32]
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e046      	b.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a16      	ldr	r2, [pc, #88]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00e      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007400:	d009      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a12      	ldr	r2, [pc, #72]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d004      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a10      	ldr	r2, [pc, #64]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d10c      	bne.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800741c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	4313      	orrs	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	bc80      	pop	{r7}
 800744a:	4770      	bx	lr
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40000400 	.word	0x40000400
 8007454:	40000800 	.word	0x40000800

08007458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr

0800746a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr

0800747c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800747c:	b084      	sub	sp, #16
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	f107 0014 	add.w	r0, r7, #20
 800748a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	bc80      	pop	{r7}
 8007498:	b004      	add	sp, #16
 800749a:	4770      	bx	lr

0800749c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr

080074c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074dc:	b29a      	uxth	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	43db      	mvns	r3, r3
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	4013      	ands	r3, r2
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr

080074fc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007514:	b084      	sub	sp, #16
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	f107 0014 	add.w	r0, r7, #20
 8007522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	b004      	add	sp, #16
 8007552:	4770      	bx	lr

08007554 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007554:	b480      	push	{r7}
 8007556:	b09b      	sub	sp, #108	; 0x6c
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	b29b      	uxth	r3, r3
 8007572:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	78db      	ldrb	r3, [r3, #3]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d81f      	bhi.n	80075c6 <USB_ActivateEndpoint+0x72>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <USB_ActivateEndpoint+0x38>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	0800759d 	.word	0x0800759d
 8007590:	080075b9 	.word	0x080075b9
 8007594:	080075cf 	.word	0x080075cf
 8007598:	080075ab 	.word	0x080075ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800759c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075a8:	e012      	b.n	80075d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80075b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075b6:	e00b      	b.n	80075d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075c4:	e004      	b.n	80075d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80075cc:	e000      	b.n	80075d0 <USB_ActivateEndpoint+0x7c>
      break;
 80075ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	441a      	add	r2, r3
 80075da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007608:	b29a      	uxth	r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	4313      	orrs	r3, r2
 8007612:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	441a      	add	r2, r3
 8007620:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800762c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007634:	b29b      	uxth	r3, r3
 8007636:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	7b1b      	ldrb	r3, [r3, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 8149 	bne.w	80078d4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	785b      	ldrb	r3, [r3, #1]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 8084 	beq.w	8007754 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007656:	b29b      	uxth	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	4413      	add	r3, r2
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	011a      	lsls	r2, r3, #4
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	88db      	ldrh	r3, [r3, #6]
 8007674:	085b      	lsrs	r3, r3, #1
 8007676:	b29b      	uxth	r3, r3
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	81fb      	strh	r3, [r7, #14]
 800768e:	89fb      	ldrh	r3, [r7, #14]
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01b      	beq.n	80076d0 <USB_ActivateEndpoint+0x17c>
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	81bb      	strh	r3, [r7, #12]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	441a      	add	r2, r3
 80076ba:	89bb      	ldrh	r3, [r7, #12]
 80076bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	78db      	ldrb	r3, [r3, #3]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d020      	beq.n	800771a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ee:	813b      	strh	r3, [r7, #8]
 80076f0:	893b      	ldrh	r3, [r7, #8]
 80076f2:	f083 0320 	eor.w	r3, r3, #32
 80076f6:	813b      	strh	r3, [r7, #8]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	893b      	ldrh	r3, [r7, #8]
 8007704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800770c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007714:	b29b      	uxth	r3, r3
 8007716:	8013      	strh	r3, [r2, #0]
 8007718:	e27f      	b.n	8007c1a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007730:	817b      	strh	r3, [r7, #10]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	441a      	add	r2, r3
 800773c:	897b      	ldrh	r3, [r7, #10]
 800773e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800774a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774e:	b29b      	uxth	r3, r3
 8007750:	8013      	strh	r3, [r2, #0]
 8007752:	e262      	b.n	8007c1a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800775e:	b29b      	uxth	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	4413      	add	r3, r2
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	011a      	lsls	r2, r3, #4
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	4413      	add	r3, r2
 8007772:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007776:	62bb      	str	r3, [r7, #40]	; 0x28
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	88db      	ldrh	r3, [r3, #6]
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	b29b      	uxth	r3, r3
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007792:	b29b      	uxth	r3, r3
 8007794:	461a      	mov	r2, r3
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	4413      	add	r3, r2
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	011a      	lsls	r2, r3, #4
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	4413      	add	r3, r2
 80077a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077aa:	623b      	str	r3, [r7, #32]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d112      	bne.n	80077da <USB_ActivateEndpoint+0x286>
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077be:	b29a      	uxth	r2, r3
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	801a      	strh	r2, [r3, #0]
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	801a      	strh	r2, [r3, #0]
 80077d8:	e02f      	b.n	800783a <USB_ActivateEndpoint+0x2e6>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b3e      	cmp	r3, #62	; 0x3e
 80077e0:	d813      	bhi.n	800780a <USB_ActivateEndpoint+0x2b6>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	085b      	lsrs	r3, r3, #1
 80077e8:	663b      	str	r3, [r7, #96]	; 0x60
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <USB_ActivateEndpoint+0x2a8>
 80077f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077f8:	3301      	adds	r3, #1
 80077fa:	663b      	str	r3, [r7, #96]	; 0x60
 80077fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077fe:	b29b      	uxth	r3, r3
 8007800:	029b      	lsls	r3, r3, #10
 8007802:	b29a      	uxth	r2, r3
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	e017      	b.n	800783a <USB_ActivateEndpoint+0x2e6>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	095b      	lsrs	r3, r3, #5
 8007810:	663b      	str	r3, [r7, #96]	; 0x60
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 031f 	and.w	r3, r3, #31
 800781a:	2b00      	cmp	r3, #0
 800781c:	d102      	bne.n	8007824 <USB_ActivateEndpoint+0x2d0>
 800781e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007820:	3b01      	subs	r3, #1
 8007822:	663b      	str	r3, [r7, #96]	; 0x60
 8007824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007826:	b29b      	uxth	r3, r3
 8007828:	029b      	lsls	r3, r3, #10
 800782a:	b29b      	uxth	r3, r3
 800782c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007834:	b29a      	uxth	r2, r3
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	83fb      	strh	r3, [r7, #30]
 8007848:	8bfb      	ldrh	r3, [r7, #30]
 800784a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01b      	beq.n	800788a <USB_ActivateEndpoint+0x336>
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29b      	uxth	r3, r3
 8007860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007868:	83bb      	strh	r3, [r7, #28]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	441a      	add	r2, r3
 8007874:	8bbb      	ldrh	r3, [r7, #28]
 8007876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800787a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800787e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007886:	b29b      	uxth	r3, r3
 8007888:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800789c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a0:	837b      	strh	r3, [r7, #26]
 80078a2:	8b7b      	ldrh	r3, [r7, #26]
 80078a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078a8:	837b      	strh	r3, [r7, #26]
 80078aa:	8b7b      	ldrh	r3, [r7, #26]
 80078ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078b0:	837b      	strh	r3, [r7, #26]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	441a      	add	r2, r3
 80078bc:	8b7b      	ldrh	r3, [r7, #26]
 80078be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	8013      	strh	r3, [r2, #0]
 80078d2:	e1a2      	b.n	8007c1a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	441a      	add	r2, r3
 80078f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80078fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007904:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790c:	b29b      	uxth	r3, r3
 800790e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	65bb      	str	r3, [r7, #88]	; 0x58
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791a:	b29b      	uxth	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007920:	4413      	add	r3, r2
 8007922:	65bb      	str	r3, [r7, #88]	; 0x58
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	011a      	lsls	r2, r3, #4
 800792a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800792c:	4413      	add	r3, r2
 800792e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007932:	657b      	str	r3, [r7, #84]	; 0x54
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	891b      	ldrh	r3, [r3, #8]
 8007938:	085b      	lsrs	r3, r3, #1
 800793a:	b29b      	uxth	r3, r3
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007942:	801a      	strh	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	653b      	str	r3, [r7, #80]	; 0x50
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794e:	b29b      	uxth	r3, r3
 8007950:	461a      	mov	r2, r3
 8007952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007954:	4413      	add	r3, r2
 8007956:	653b      	str	r3, [r7, #80]	; 0x50
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	011a      	lsls	r2, r3, #4
 800795e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007960:	4413      	add	r3, r2
 8007962:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	895b      	ldrh	r3, [r3, #10]
 800796c:	085b      	lsrs	r3, r3, #1
 800796e:	b29b      	uxth	r3, r3
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	b29a      	uxth	r2, r3
 8007974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007976:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	785b      	ldrb	r3, [r3, #1]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f040 8091 	bne.w	8007aa4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007990:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01b      	beq.n	80079d2 <USB_ActivateEndpoint+0x47e>
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	441a      	add	r2, r3
 80079bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80079be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	873b      	strh	r3, [r7, #56]	; 0x38
 80079e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d01b      	beq.n	8007a22 <USB_ActivateEndpoint+0x4ce>
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a00:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	441a      	add	r2, r3
 8007a0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	441a      	add	r2, r3
 8007a54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a80:	867b      	strh	r3, [r7, #50]	; 0x32
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	441a      	add	r2, r3
 8007a8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	8013      	strh	r3, [r2, #0]
 8007aa2:	e0ba      	b.n	8007c1a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ab4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01d      	beq.n	8007afc <USB_ActivateEndpoint+0x5a8>
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	441a      	add	r2, r3
 8007ae4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007b0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d01d      	beq.n	8007b54 <USB_ActivateEndpoint+0x600>
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	441a      	add	r2, r3
 8007b3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	78db      	ldrb	r3, [r3, #3]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d024      	beq.n	8007ba6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b7a:	f083 0320 	eor.w	r3, r3, #32
 8007b7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	441a      	add	r2, r3
 8007b8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	8013      	strh	r3, [r2, #0]
 8007ba4:	e01d      	b.n	8007be2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bbc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	441a      	add	r2, r3
 8007bca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	441a      	add	r2, r3
 8007c04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007c1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	376c      	adds	r7, #108	; 0x6c
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b08d      	sub	sp, #52	; 0x34
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	7b1b      	ldrb	r3, [r3, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f040 808e 	bne.w	8007d58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d044      	beq.n	8007cce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	81bb      	strh	r3, [r7, #12]
 8007c52:	89bb      	ldrh	r3, [r7, #12]
 8007c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01b      	beq.n	8007c94 <USB_DeactivateEndpoint+0x6c>
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c72:	817b      	strh	r3, [r7, #10]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	441a      	add	r2, r3
 8007c7e:	897b      	ldrh	r3, [r7, #10]
 8007c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007caa:	813b      	strh	r3, [r7, #8]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	441a      	add	r2, r3
 8007cb6:	893b      	ldrh	r3, [r7, #8]
 8007cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	8013      	strh	r3, [r2, #0]
 8007ccc:	e192      	b.n	8007ff4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	827b      	strh	r3, [r7, #18]
 8007cdc:	8a7b      	ldrh	r3, [r7, #18]
 8007cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d01b      	beq.n	8007d1e <USB_DeactivateEndpoint+0xf6>
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfc:	823b      	strh	r3, [r7, #16]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	441a      	add	r2, r3
 8007d08:	8a3b      	ldrh	r3, [r7, #16]
 8007d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d34:	81fb      	strh	r3, [r7, #14]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	441a      	add	r2, r3
 8007d40:	89fb      	ldrh	r3, [r7, #14]
 8007d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	8013      	strh	r3, [r2, #0]
 8007d56:	e14d      	b.n	8007ff4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 80a5 	bne.w	8007eac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	843b      	strh	r3, [r7, #32]
 8007d70:	8c3b      	ldrh	r3, [r7, #32]
 8007d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d01b      	beq.n	8007db2 <USB_DeactivateEndpoint+0x18a>
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d90:	83fb      	strh	r3, [r7, #30]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441a      	add	r2, r3
 8007d9c:	8bfb      	ldrh	r3, [r7, #30]
 8007d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	83bb      	strh	r3, [r7, #28]
 8007dc0:	8bbb      	ldrh	r3, [r7, #28]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01b      	beq.n	8007e02 <USB_DeactivateEndpoint+0x1da>
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de0:	837b      	strh	r3, [r7, #26]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	441a      	add	r2, r3
 8007dec:	8b7b      	ldrh	r3, [r7, #26]
 8007dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e18:	833b      	strh	r3, [r7, #24]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	441a      	add	r2, r3
 8007e24:	8b3b      	ldrh	r3, [r7, #24]
 8007e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e50:	82fb      	strh	r3, [r7, #22]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	441a      	add	r2, r3
 8007e5c:	8afb      	ldrh	r3, [r7, #22]
 8007e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e88:	82bb      	strh	r3, [r7, #20]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	441a      	add	r2, r3
 8007e94:	8abb      	ldrh	r3, [r7, #20]
 8007e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	8013      	strh	r3, [r2, #0]
 8007eaa:	e0a3      	b.n	8007ff4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007eba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01b      	beq.n	8007efc <USB_DeactivateEndpoint+0x2d4>
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eda:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	441a      	add	r2, r3
 8007ee6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01b      	beq.n	8007f4c <USB_DeactivateEndpoint+0x324>
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	441a      	add	r2, r3
 8007f36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	441a      	add	r2, r3
 8007f6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	441a      	add	r2, r3
 8007fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	441a      	add	r2, r3
 8007fde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3734      	adds	r7, #52	; 0x34
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b0cc      	sub	sp, #304	; 0x130
 8008004:	af00      	add	r7, sp, #0
 8008006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800800e:	6018      	str	r0, [r3, #0]
 8008010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008018:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800801a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	785b      	ldrb	r3, [r3, #1]
 8008026:	2b01      	cmp	r3, #1
 8008028:	f041 817d 	bne.w	8009326 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800802c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	699a      	ldr	r2, [r3, #24]
 8008038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	429a      	cmp	r2, r3
 8008046:	d908      	bls.n	800805a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008058:	e007      	b.n	800806a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800805a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800806a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	7b1b      	ldrb	r3, [r3, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d152      	bne.n	8008120 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800807a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6959      	ldr	r1, [r3, #20]
 8008086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	88da      	ldrh	r2, [r3, #6]
 8008092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008096:	b29b      	uxth	r3, r3
 8008098:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800809c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80080a0:	6800      	ldr	r0, [r0, #0]
 80080a2:	f001 ff23 	bl	8009eec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80080a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80080ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80080b6:	6812      	ldr	r2, [r2, #0]
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	4619      	mov	r1, r3
 80080cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80080d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080d8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	440a      	add	r2, r1
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	011a      	lsls	r2, r3, #4
 80080f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4413      	add	r3, r2
 80080fc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008104:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810e:	b29a      	uxth	r2, r3
 8008110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008114:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	f001 b8b5 	b.w	800928a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	78db      	ldrb	r3, [r3, #3]
 800812c:	2b02      	cmp	r3, #2
 800812e:	f040 84c6 	bne.w	8008abe <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6a1a      	ldr	r2, [r3, #32]
 800813e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	429a      	cmp	r2, r3
 800814c:	f240 8443 	bls.w	80089d6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	b29b      	uxth	r3, r3
 800816e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008176:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800817a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	441a      	add	r2, r3
 8008194:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800819c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80081ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6a1a      	ldr	r2, [r3, #32]
 80081b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081bc:	1ad2      	subs	r2, r2, r3
 80081be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 823e 	beq.w	800866e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80081fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081fe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008202:	6812      	ldr	r2, [r2, #0]
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	785b      	ldrb	r3, [r3, #1]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 809a 	bne.w	800834c <USB_EPStartXfer+0x34c>
 8008218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008220:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008224:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008228:	6812      	ldr	r2, [r2, #0]
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800823a:	b29b      	uxth	r3, r3
 800823c:	4619      	mov	r1, r3
 800823e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008246:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800824a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800824e:	6812      	ldr	r2, [r2, #0]
 8008250:	440a      	add	r2, r1
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	011a      	lsls	r2, r3, #4
 8008262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4413      	add	r3, r2
 800826e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008276:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d122      	bne.n	80082ca <USB_EPStartXfer+0x2ca>
 8008284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	b29b      	uxth	r3, r3
 8008292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008296:	b29a      	uxth	r2, r3
 8008298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	801a      	strh	r2, [r3, #0]
 80082a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	e079      	b.n	80083be <USB_EPStartXfer+0x3be>
 80082ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ce:	2b3e      	cmp	r3, #62	; 0x3e
 80082d0:	d81b      	bhi.n	800830a <USB_EPStartXfer+0x30a>
 80082d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d6:	085b      	lsrs	r3, r3, #1
 80082d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <USB_EPStartXfer+0x2f2>
 80082e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082ec:	3301      	adds	r3, #1
 80082ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80082f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	029b      	lsls	r3, r3, #10
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008300:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	801a      	strh	r2, [r3, #0]
 8008308:	e059      	b.n	80083be <USB_EPStartXfer+0x3be>
 800830a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008318:	f003 031f 	and.w	r3, r3, #31
 800831c:	2b00      	cmp	r3, #0
 800831e:	d104      	bne.n	800832a <USB_EPStartXfer+0x32a>
 8008320:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008324:	3b01      	subs	r3, #1
 8008326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800832a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800832e:	b29b      	uxth	r3, r3
 8008330:	029b      	lsls	r3, r3, #10
 8008332:	b29b      	uxth	r3, r3
 8008334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800833c:	b29a      	uxth	r2, r3
 800833e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008342:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	801a      	strh	r2, [r3, #0]
 800834a:	e038      	b.n	80083be <USB_EPStartXfer+0x3be>
 800834c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d130      	bne.n	80083be <USB_EPStartXfer+0x3be>
 800835c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008360:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800836a:	b29b      	uxth	r3, r3
 800836c:	4619      	mov	r1, r3
 800836e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008372:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008376:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800837a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800837e:	6812      	ldr	r2, [r2, #0]
 8008380:	440a      	add	r2, r1
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	011a      	lsls	r2, r3, #4
 8008392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008396:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4413      	add	r3, r2
 800839e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80083a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80083be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	895b      	ldrh	r3, [r3, #10]
 80083ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6959      	ldr	r1, [r3, #20]
 80083da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083de:	b29b      	uxth	r3, r3
 80083e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80083e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80083e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80083ec:	6800      	ldr	r0, [r0, #0]
 80083ee:	f001 fd7d 	bl	8009eec <USB_WritePMA>
            ep->xfer_buff += len;
 80083f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	695a      	ldr	r2, [r3, #20]
 80083fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008402:	441a      	add	r2, r3
 8008404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6a1a      	ldr	r2, [r3, #32]
 800841c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	429a      	cmp	r2, r3
 800842a:	d90f      	bls.n	800844c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800842c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6a1a      	ldr	r2, [r3, #32]
 8008438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800843c:	1ad2      	subs	r2, r2, r3
 800843e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	621a      	str	r2, [r3, #32]
 800844a:	e00e      	b.n	800846a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800844c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800845c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2200      	movs	r2, #0
 8008468:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800846a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f040 809a 	bne.w	80085b0 <USB_EPStartXfer+0x5b0>
 800847c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008480:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008484:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008488:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800848c:	6812      	ldr	r2, [r2, #0]
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800849e:	b29b      	uxth	r3, r3
 80084a0:	4619      	mov	r1, r3
 80084a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80084aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084ae:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80084b2:	6812      	ldr	r2, [r2, #0]
 80084b4:	440a      	add	r2, r1
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	011a      	lsls	r2, r3, #4
 80084c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4413      	add	r3, r2
 80084d2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80084d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d122      	bne.n	800852e <USB_EPStartXfer+0x52e>
 80084e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008500:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	801a      	strh	r2, [r3, #0]
 8008508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b29b      	uxth	r3, r3
 8008516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800851a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851e:	b29a      	uxth	r2, r3
 8008520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008524:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	801a      	strh	r2, [r3, #0]
 800852c:	e083      	b.n	8008636 <USB_EPStartXfer+0x636>
 800852e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008532:	2b3e      	cmp	r3, #62	; 0x3e
 8008534:	d81b      	bhi.n	800856e <USB_EPStartXfer+0x56e>
 8008536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853a:	085b      	lsrs	r3, r3, #1
 800853c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <USB_EPStartXfer+0x556>
 800854c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008550:	3301      	adds	r3, #1
 8008552:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008556:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800855a:	b29b      	uxth	r3, r3
 800855c:	029b      	lsls	r3, r3, #10
 800855e:	b29a      	uxth	r2, r3
 8008560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008564:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	801a      	strh	r2, [r3, #0]
 800856c:	e063      	b.n	8008636 <USB_EPStartXfer+0x636>
 800856e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008572:	095b      	lsrs	r3, r3, #5
 8008574:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800857c:	f003 031f 	and.w	r3, r3, #31
 8008580:	2b00      	cmp	r3, #0
 8008582:	d104      	bne.n	800858e <USB_EPStartXfer+0x58e>
 8008584:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008588:	3b01      	subs	r3, #1
 800858a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800858e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008592:	b29b      	uxth	r3, r3
 8008594:	029b      	lsls	r3, r3, #10
 8008596:	b29b      	uxth	r3, r3
 8008598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	801a      	strh	r2, [r3, #0]
 80085ae:	e042      	b.n	8008636 <USB_EPStartXfer+0x636>
 80085b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	785b      	ldrb	r3, [r3, #1]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d13a      	bne.n	8008636 <USB_EPStartXfer+0x636>
 80085c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80085c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	4619      	mov	r1, r3
 80085e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80085ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80085f6:	6812      	ldr	r2, [r2, #0]
 80085f8:	440a      	add	r2, r1
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	011a      	lsls	r2, r3, #4
 800860a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4413      	add	r3, r2
 8008616:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800861a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008628:	b29a      	uxth	r2, r3
 800862a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	891b      	ldrh	r3, [r3, #8]
 8008642:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6959      	ldr	r1, [r3, #20]
 8008652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008656:	b29b      	uxth	r3, r3
 8008658:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800865c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008660:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008664:	6800      	ldr	r0, [r0, #0]
 8008666:	f001 fc41 	bl	8009eec <USB_WritePMA>
 800866a:	f000 be0e 	b.w	800928a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800866e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d16d      	bne.n	800875a <USB_EPStartXfer+0x75a>
 800867e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008682:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	64bb      	str	r3, [r7, #72]	; 0x48
 800868a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800868e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008698:	b29b      	uxth	r3, r3
 800869a:	461a      	mov	r2, r3
 800869c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800869e:	4413      	add	r3, r2
 80086a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80086a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	011a      	lsls	r2, r3, #4
 80086b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b2:	4413      	add	r3, r2
 80086b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086b8:	647b      	str	r3, [r7, #68]	; 0x44
 80086ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d112      	bne.n	80086e8 <USB_EPStartXfer+0x6e8>
 80086c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d0:	801a      	strh	r2, [r3, #0]
 80086d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e4:	801a      	strh	r2, [r3, #0]
 80086e6:	e063      	b.n	80087b0 <USB_EPStartXfer+0x7b0>
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ec:	2b3e      	cmp	r3, #62	; 0x3e
 80086ee:	d817      	bhi.n	8008720 <USB_EPStartXfer+0x720>
 80086f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <USB_EPStartXfer+0x710>
 8008706:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800870a:	3301      	adds	r3, #1
 800870c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008710:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008714:	b29b      	uxth	r3, r3
 8008716:	029b      	lsls	r3, r3, #10
 8008718:	b29a      	uxth	r2, r3
 800871a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	e047      	b.n	80087b0 <USB_EPStartXfer+0x7b0>
 8008720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800872a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872e:	f003 031f 	and.w	r3, r3, #31
 8008732:	2b00      	cmp	r3, #0
 8008734:	d104      	bne.n	8008740 <USB_EPStartXfer+0x740>
 8008736:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800873a:	3b01      	subs	r3, #1
 800873c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008740:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008744:	b29b      	uxth	r3, r3
 8008746:	029b      	lsls	r3, r3, #10
 8008748:	b29b      	uxth	r3, r3
 800874a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008752:	b29a      	uxth	r2, r3
 8008754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008756:	801a      	strh	r2, [r3, #0]
 8008758:	e02a      	b.n	80087b0 <USB_EPStartXfer+0x7b0>
 800875a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	785b      	ldrb	r3, [r3, #1]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d122      	bne.n	80087b0 <USB_EPStartXfer+0x7b0>
 800876a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	653b      	str	r3, [r7, #80]	; 0x50
 8008776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008784:	b29b      	uxth	r3, r3
 8008786:	461a      	mov	r2, r3
 8008788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800878a:	4413      	add	r3, r2
 800878c:	653b      	str	r3, [r7, #80]	; 0x50
 800878e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	011a      	lsls	r2, r3, #4
 800879c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800879e:	4413      	add	r3, r2
 80087a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80087b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	891b      	ldrh	r3, [r3, #8]
 80087bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6959      	ldr	r1, [r3, #20]
 80087cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80087d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80087da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80087de:	6800      	ldr	r0, [r0, #0]
 80087e0:	f001 fb84 	bl	8009eec <USB_WritePMA>
            ep->xfer_buff += len;
 80087e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	695a      	ldr	r2, [r3, #20]
 80087f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f4:	441a      	add	r2, r3
 80087f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6a1a      	ldr	r2, [r3, #32]
 800880e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	429a      	cmp	r2, r3
 800881c:	d90f      	bls.n	800883e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800881e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6a1a      	ldr	r2, [r3, #32]
 800882a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800882e:	1ad2      	subs	r2, r2, r3
 8008830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	621a      	str	r2, [r3, #32]
 800883c:	e00e      	b.n	800885c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800883e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800884e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2200      	movs	r2, #0
 800885a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800885c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	643b      	str	r3, [r7, #64]	; 0x40
 8008868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	785b      	ldrb	r3, [r3, #1]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d16d      	bne.n	8008954 <USB_EPStartXfer+0x954>
 8008878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	63bb      	str	r3, [r7, #56]	; 0x38
 8008884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008888:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008892:	b29b      	uxth	r3, r3
 8008894:	461a      	mov	r2, r3
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	4413      	add	r3, r2
 800889a:	63bb      	str	r3, [r7, #56]	; 0x38
 800889c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	011a      	lsls	r2, r3, #4
 80088aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ac:	4413      	add	r3, r2
 80088ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088b2:	637b      	str	r3, [r7, #52]	; 0x34
 80088b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d112      	bne.n	80088e2 <USB_EPStartXfer+0x8e2>
 80088bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ca:	801a      	strh	r2, [r3, #0]
 80088cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088da:	b29a      	uxth	r2, r3
 80088dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	e05d      	b.n	800899e <USB_EPStartXfer+0x99e>
 80088e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e6:	2b3e      	cmp	r3, #62	; 0x3e
 80088e8:	d817      	bhi.n	800891a <USB_EPStartXfer+0x91a>
 80088ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ee:	085b      	lsrs	r3, r3, #1
 80088f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80088f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d004      	beq.n	800890a <USB_EPStartXfer+0x90a>
 8008900:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008904:	3301      	adds	r3, #1
 8008906:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800890a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800890e:	b29b      	uxth	r3, r3
 8008910:	029b      	lsls	r3, r3, #10
 8008912:	b29a      	uxth	r2, r3
 8008914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008916:	801a      	strh	r2, [r3, #0]
 8008918:	e041      	b.n	800899e <USB_EPStartXfer+0x99e>
 800891a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800891e:	095b      	lsrs	r3, r3, #5
 8008920:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008928:	f003 031f 	and.w	r3, r3, #31
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <USB_EPStartXfer+0x93a>
 8008930:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008934:	3b01      	subs	r3, #1
 8008936:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800893a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800893e:	b29b      	uxth	r3, r3
 8008940:	029b      	lsls	r3, r3, #10
 8008942:	b29b      	uxth	r3, r3
 8008944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800894c:	b29a      	uxth	r2, r3
 800894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008950:	801a      	strh	r2, [r3, #0]
 8008952:	e024      	b.n	800899e <USB_EPStartXfer+0x99e>
 8008954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	785b      	ldrb	r3, [r3, #1]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d11c      	bne.n	800899e <USB_EPStartXfer+0x99e>
 8008964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008972:	b29b      	uxth	r3, r3
 8008974:	461a      	mov	r2, r3
 8008976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008978:	4413      	add	r3, r2
 800897a:	643b      	str	r3, [r7, #64]	; 0x40
 800897c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	011a      	lsls	r2, r3, #4
 800898a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800898c:	4413      	add	r3, r2
 800898e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008998:	b29a      	uxth	r2, r3
 800899a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800899e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	895b      	ldrh	r3, [r3, #10]
 80089aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6959      	ldr	r1, [r3, #20]
 80089ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80089c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80089cc:	6800      	ldr	r0, [r0, #0]
 80089ce:	f001 fa8d 	bl	8009eec <USB_WritePMA>
 80089d2:	f000 bc5a 	b.w	800928a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80089d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80089e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	441a      	add	r2, r3
 8008a2a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	461a      	mov	r2, r3
 8008a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a62:	4413      	add	r3, r2
 8008a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	011a      	lsls	r2, r3, #4
 8008a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a76:	4413      	add	r3, r2
 8008a78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	891b      	ldrh	r3, [r3, #8]
 8008a94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6959      	ldr	r1, [r3, #20]
 8008aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008aae:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008ab2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008ab6:	6800      	ldr	r0, [r0, #0]
 8008ab8:	f001 fa18 	bl	8009eec <USB_WritePMA>
 8008abc:	e3e5      	b.n	800928a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	441a      	add	r2, r3
 8008b02:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6a1a      	ldr	r2, [r3, #32]
 8008b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b2a:	1ad2      	subs	r2, r2, r3
 8008b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 81bc 	beq.w	8008ed8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d16d      	bne.n	8008c5a <USB_EPStartXfer+0xc5a>
 8008b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b9e:	4413      	add	r3, r2
 8008ba0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	011a      	lsls	r2, r3, #4
 8008bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008bb8:	677b      	str	r3, [r7, #116]	; 0x74
 8008bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d112      	bne.n	8008be8 <USB_EPStartXfer+0xbe8>
 8008bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd0:	801a      	strh	r2, [r3, #0]
 8008bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008be4:	801a      	strh	r2, [r3, #0]
 8008be6:	e060      	b.n	8008caa <USB_EPStartXfer+0xcaa>
 8008be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bec:	2b3e      	cmp	r3, #62	; 0x3e
 8008bee:	d817      	bhi.n	8008c20 <USB_EPStartXfer+0xc20>
 8008bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf4:	085b      	lsrs	r3, r3, #1
 8008bf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d004      	beq.n	8008c10 <USB_EPStartXfer+0xc10>
 8008c06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	029b      	lsls	r3, r3, #10
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c1c:	801a      	strh	r2, [r3, #0]
 8008c1e:	e044      	b.n	8008caa <USB_EPStartXfer+0xcaa>
 8008c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c24:	095b      	lsrs	r3, r3, #5
 8008c26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2e:	f003 031f 	and.w	r3, r3, #31
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d104      	bne.n	8008c40 <USB_EPStartXfer+0xc40>
 8008c36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	029b      	lsls	r3, r3, #10
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	e027      	b.n	8008caa <USB_EPStartXfer+0xcaa>
 8008c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d11f      	bne.n	8008caa <USB_EPStartXfer+0xcaa>
 8008c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c80:	4413      	add	r3, r2
 8008c82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	011a      	lsls	r2, r3, #4
 8008c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c98:	4413      	add	r3, r2
 8008c9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ca8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	895b      	ldrh	r3, [r3, #10]
 8008cb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6959      	ldr	r1, [r3, #20]
 8008cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008cd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008cd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008cd8:	6800      	ldr	r0, [r0, #0]
 8008cda:	f001 f907 	bl	8009eec <USB_WritePMA>
          ep->xfer_buff += len;
 8008cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695a      	ldr	r2, [r3, #20]
 8008cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cee:	441a      	add	r2, r3
 8008cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6a1a      	ldr	r2, [r3, #32]
 8008d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d90f      	bls.n	8008d38 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6a1a      	ldr	r2, [r3, #32]
 8008d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d28:	1ad2      	subs	r2, r2, r3
 8008d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	621a      	str	r2, [r3, #32]
 8008d36:	e00e      	b.n	8008d56 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2200      	movs	r2, #0
 8008d54:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 8295 	beq.w	800928a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d16d      	bne.n	8008e4c <USB_EPStartXfer+0xe4c>
 8008d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d90:	4413      	add	r3, r2
 8008d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	011a      	lsls	r2, r3, #4
 8008da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008da4:	4413      	add	r3, r2
 8008da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008daa:	667b      	str	r3, [r7, #100]	; 0x64
 8008dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d112      	bne.n	8008dda <USB_EPStartXfer+0xdda>
 8008db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dc2:	801a      	strh	r2, [r3, #0]
 8008dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dd6:	801a      	strh	r2, [r3, #0]
 8008dd8:	e063      	b.n	8008ea2 <USB_EPStartXfer+0xea2>
 8008dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dde:	2b3e      	cmp	r3, #62	; 0x3e
 8008de0:	d817      	bhi.n	8008e12 <USB_EPStartXfer+0xe12>
 8008de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <USB_EPStartXfer+0xe02>
 8008df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	029b      	lsls	r3, r3, #10
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	e047      	b.n	8008ea2 <USB_EPStartXfer+0xea2>
 8008e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e16:	095b      	lsrs	r3, r3, #5
 8008e18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d104      	bne.n	8008e32 <USB_EPStartXfer+0xe32>
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	029b      	lsls	r3, r3, #10
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e48:	801a      	strh	r2, [r3, #0]
 8008e4a:	e02a      	b.n	8008ea2 <USB_EPStartXfer+0xea2>
 8008e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	785b      	ldrb	r3, [r3, #1]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d122      	bne.n	8008ea2 <USB_EPStartXfer+0xea2>
 8008e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	673b      	str	r3, [r7, #112]	; 0x70
 8008e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	461a      	mov	r2, r3
 8008e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e7c:	4413      	add	r3, r2
 8008e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8008e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	011a      	lsls	r2, r3, #4
 8008e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e90:	4413      	add	r3, r2
 8008e92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	891b      	ldrh	r3, [r3, #8]
 8008eae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6959      	ldr	r1, [r3, #20]
 8008ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ec8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008ecc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008ed0:	6800      	ldr	r0, [r0, #0]
 8008ed2:	f001 f80b 	bl	8009eec <USB_WritePMA>
 8008ed6:	e1d8      	b.n	800928a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d178      	bne.n	8008fda <USB_EPStartXfer+0xfda>
 8008ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008efa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	461a      	mov	r2, r3
 8008f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	011a      	lsls	r2, r3, #4
 8008f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f24:	4413      	add	r3, r2
 8008f26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d116      	bne.n	8008f64 <USB_EPStartXfer+0xf64>
 8008f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f48:	801a      	strh	r2, [r3, #0]
 8008f4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f60:	801a      	strh	r2, [r3, #0]
 8008f62:	e06b      	b.n	800903c <USB_EPStartXfer+0x103c>
 8008f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f68:	2b3e      	cmp	r3, #62	; 0x3e
 8008f6a:	d818      	bhi.n	8008f9e <USB_EPStartXfer+0xf9e>
 8008f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f70:	085b      	lsrs	r3, r3, #1
 8008f72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d004      	beq.n	8008f8c <USB_EPStartXfer+0xf8c>
 8008f82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f86:	3301      	adds	r3, #1
 8008f88:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	029b      	lsls	r3, r3, #10
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f9a:	801a      	strh	r2, [r3, #0]
 8008f9c:	e04e      	b.n	800903c <USB_EPStartXfer+0x103c>
 8008f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa2:	095b      	lsrs	r3, r3, #5
 8008fa4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fac:	f003 031f 	and.w	r3, r3, #31
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d104      	bne.n	8008fbe <USB_EPStartXfer+0xfbe>
 8008fb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	029b      	lsls	r3, r3, #10
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fd6:	801a      	strh	r2, [r3, #0]
 8008fd8:	e030      	b.n	800903c <USB_EPStartXfer+0x103c>
 8008fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d128      	bne.n	800903c <USB_EPStartXfer+0x103c>
 8008fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009006:	b29b      	uxth	r3, r3
 8009008:	461a      	mov	r2, r3
 800900a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800900e:	4413      	add	r3, r2
 8009010:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	011a      	lsls	r2, r3, #4
 8009022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009026:	4413      	add	r3, r2
 8009028:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800902c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009034:	b29a      	uxth	r2, r3
 8009036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800903a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800903c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	891b      	ldrh	r3, [r3, #8]
 8009048:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800904c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6959      	ldr	r1, [r3, #20]
 8009058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800905c:	b29b      	uxth	r3, r3
 800905e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009062:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009066:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800906a:	6800      	ldr	r0, [r0, #0]
 800906c:	f000 ff3e 	bl	8009eec <USB_WritePMA>
          ep->xfer_buff += len;
 8009070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695a      	ldr	r2, [r3, #20]
 800907c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009080:	441a      	add	r2, r3
 8009082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800908e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6a1a      	ldr	r2, [r3, #32]
 800909a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d90f      	bls.n	80090ca <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80090aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6a1a      	ldr	r2, [r3, #32]
 80090b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ba:	1ad2      	subs	r2, r2, r3
 80090bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	621a      	str	r2, [r3, #32]
 80090c8:	e00e      	b.n	80090e8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80090ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80090da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2200      	movs	r2, #0
 80090e6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80090e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 80cc 	beq.w	800928a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	785b      	ldrb	r3, [r3, #1]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d178      	bne.n	8009202 <USB_EPStartXfer+0x1202>
 8009110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800911e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800912c:	b29b      	uxth	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009134:	4413      	add	r3, r2
 8009136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800913a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	011a      	lsls	r2, r3, #4
 8009148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800914c:	4413      	add	r3, r2
 800914e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800915a:	2b00      	cmp	r3, #0
 800915c:	d116      	bne.n	800918c <USB_EPStartXfer+0x118c>
 800915e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800916a:	b29a      	uxth	r2, r3
 800916c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009170:	801a      	strh	r2, [r3, #0]
 8009172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	b29b      	uxth	r3, r3
 800917a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800917e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009182:	b29a      	uxth	r2, r3
 8009184:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009188:	801a      	strh	r2, [r3, #0]
 800918a:	e064      	b.n	8009256 <USB_EPStartXfer+0x1256>
 800918c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009190:	2b3e      	cmp	r3, #62	; 0x3e
 8009192:	d818      	bhi.n	80091c6 <USB_EPStartXfer+0x11c6>
 8009194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009198:	085b      	lsrs	r3, r3, #1
 800919a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800919e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <USB_EPStartXfer+0x11b4>
 80091aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ae:	3301      	adds	r3, #1
 80091b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	029b      	lsls	r3, r3, #10
 80091bc:	b29a      	uxth	r2, r3
 80091be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091c2:	801a      	strh	r2, [r3, #0]
 80091c4:	e047      	b.n	8009256 <USB_EPStartXfer+0x1256>
 80091c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <USB_EPStartXfer+0x11e6>
 80091dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091e0:	3b01      	subs	r3, #1
 80091e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	029b      	lsls	r3, r3, #10
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091fe:	801a      	strh	r2, [r3, #0]
 8009200:	e029      	b.n	8009256 <USB_EPStartXfer+0x1256>
 8009202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	785b      	ldrb	r3, [r3, #1]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d121      	bne.n	8009256 <USB_EPStartXfer+0x1256>
 8009212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009220:	b29b      	uxth	r3, r3
 8009222:	461a      	mov	r2, r3
 8009224:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009228:	4413      	add	r3, r2
 800922a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800922e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	011a      	lsls	r2, r3, #4
 800923c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009240:	4413      	add	r3, r2
 8009242:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800924a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800924e:	b29a      	uxth	r2, r3
 8009250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009254:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800925a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	895b      	ldrh	r3, [r3, #10]
 8009262:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800926a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6959      	ldr	r1, [r3, #20]
 8009272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009276:	b29b      	uxth	r3, r3
 8009278:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800927c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009280:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009284:	6800      	ldr	r0, [r0, #0]
 8009286:	f000 fe31 	bl	8009eec <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800928a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009298:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092ac:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80092b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092b8:	8013      	strh	r3, [r2, #0]
 80092ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092be:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80092c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092c6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80092ca:	8812      	ldrh	r2, [r2, #0]
 80092cc:	f082 0210 	eor.w	r2, r2, #16
 80092d0:	801a      	strh	r2, [r3, #0]
 80092d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80092da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092de:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80092e2:	8812      	ldrh	r2, [r2, #0]
 80092e4:	f082 0220 	eor.w	r2, r2, #32
 80092e8:	801a      	strh	r2, [r3, #0]
 80092ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	441a      	add	r2, r3
 8009304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009308:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800931a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931e:	b29b      	uxth	r3, r3
 8009320:	8013      	strh	r3, [r2, #0]
 8009322:	f000 bc9f 	b.w	8009c64 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800932a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	7b1b      	ldrb	r3, [r3, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f040 80ae 	bne.w	8009494 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800933c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	699a      	ldr	r2, [r3, #24]
 8009344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	429a      	cmp	r2, r3
 8009352:	d917      	bls.n	8009384 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	699a      	ldr	r2, [r3, #24]
 8009370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009374:	1ad2      	subs	r2, r2, r3
 8009376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800937a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	619a      	str	r2, [r3, #24]
 8009382:	e00e      	b.n	80093a2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2200      	movs	r2, #0
 80093a0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80093a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093be:	b29b      	uxth	r3, r3
 80093c0:	461a      	mov	r2, r3
 80093c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093c6:	4413      	add	r3, r2
 80093c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	011a      	lsls	r2, r3, #4
 80093da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093de:	4413      	add	r3, r2
 80093e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d116      	bne.n	800941e <USB_EPStartXfer+0x141e>
 80093f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009402:	801a      	strh	r2, [r3, #0]
 8009404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	b29b      	uxth	r3, r3
 800940c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009414:	b29a      	uxth	r2, r3
 8009416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800941a:	801a      	strh	r2, [r3, #0]
 800941c:	e3e8      	b.n	8009bf0 <USB_EPStartXfer+0x1bf0>
 800941e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009422:	2b3e      	cmp	r3, #62	; 0x3e
 8009424:	d818      	bhi.n	8009458 <USB_EPStartXfer+0x1458>
 8009426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800942a:	085b      	lsrs	r3, r3, #1
 800942c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <USB_EPStartXfer+0x1446>
 800943c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009440:	3301      	adds	r3, #1
 8009442:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009446:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800944a:	b29b      	uxth	r3, r3
 800944c:	029b      	lsls	r3, r3, #10
 800944e:	b29a      	uxth	r2, r3
 8009450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009454:	801a      	strh	r2, [r3, #0]
 8009456:	e3cb      	b.n	8009bf0 <USB_EPStartXfer+0x1bf0>
 8009458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800945c:	095b      	lsrs	r3, r3, #5
 800945e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009466:	f003 031f 	and.w	r3, r3, #31
 800946a:	2b00      	cmp	r3, #0
 800946c:	d104      	bne.n	8009478 <USB_EPStartXfer+0x1478>
 800946e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009472:	3b01      	subs	r3, #1
 8009474:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009478:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800947c:	b29b      	uxth	r3, r3
 800947e:	029b      	lsls	r3, r3, #10
 8009480:	b29b      	uxth	r3, r3
 8009482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800948a:	b29a      	uxth	r2, r3
 800948c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009490:	801a      	strh	r2, [r3, #0]
 8009492:	e3ad      	b.n	8009bf0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	78db      	ldrb	r3, [r3, #3]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	f040 8200 	bne.w	80098a6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80094a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 8091 	bne.w	80095da <USB_EPStartXfer+0x15da>
 80094b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	461a      	mov	r2, r3
 80094d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094dc:	4413      	add	r3, r2
 80094de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	011a      	lsls	r2, r3, #4
 80094f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094f4:	4413      	add	r3, r2
 80094f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d116      	bne.n	800953c <USB_EPStartXfer+0x153c>
 800950e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	b29b      	uxth	r3, r3
 8009516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800951a:	b29a      	uxth	r2, r3
 800951c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009520:	801a      	strh	r2, [r3, #0]
 8009522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	b29b      	uxth	r3, r3
 800952a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800952e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009532:	b29a      	uxth	r2, r3
 8009534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009538:	801a      	strh	r2, [r3, #0]
 800953a:	e083      	b.n	8009644 <USB_EPStartXfer+0x1644>
 800953c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	2b3e      	cmp	r3, #62	; 0x3e
 800954a:	d820      	bhi.n	800958e <USB_EPStartXfer+0x158e>
 800954c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	085b      	lsrs	r3, r3, #1
 800955a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800955e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <USB_EPStartXfer+0x157c>
 8009572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009576:	3301      	adds	r3, #1
 8009578:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800957c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009580:	b29b      	uxth	r3, r3
 8009582:	029b      	lsls	r3, r3, #10
 8009584:	b29a      	uxth	r2, r3
 8009586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800958a:	801a      	strh	r2, [r3, #0]
 800958c:	e05a      	b.n	8009644 <USB_EPStartXfer+0x1644>
 800958e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	095b      	lsrs	r3, r3, #5
 800959c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	f003 031f 	and.w	r3, r3, #31
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d104      	bne.n	80095be <USB_EPStartXfer+0x15be>
 80095b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b8:	3b01      	subs	r3, #1
 80095ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	029b      	lsls	r3, r3, #10
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095d6:	801a      	strh	r2, [r3, #0]
 80095d8:	e034      	b.n	8009644 <USB_EPStartXfer+0x1644>
 80095da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	785b      	ldrb	r3, [r3, #1]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d12c      	bne.n	8009644 <USB_EPStartXfer+0x1644>
 80095ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009606:	b29b      	uxth	r3, r3
 8009608:	461a      	mov	r2, r3
 800960a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800960e:	4413      	add	r3, r2
 8009610:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	011a      	lsls	r2, r3, #4
 8009622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009626:	4413      	add	r3, r2
 8009628:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800962c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	b29a      	uxth	r2, r3
 800963e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009642:	801a      	strh	r2, [r3, #0]
 8009644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	785b      	ldrb	r3, [r3, #1]
 800965e:	2b00      	cmp	r3, #0
 8009660:	f040 8091 	bne.w	8009786 <USB_EPStartXfer+0x1786>
 8009664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009668:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009680:	b29b      	uxth	r3, r3
 8009682:	461a      	mov	r2, r3
 8009684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009688:	4413      	add	r3, r2
 800968a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800968e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	011a      	lsls	r2, r3, #4
 800969c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096a0:	4413      	add	r3, r2
 80096a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d116      	bne.n	80096e8 <USB_EPStartXfer+0x16e8>
 80096ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096cc:	801a      	strh	r2, [r3, #0]
 80096ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096de:	b29a      	uxth	r2, r3
 80096e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096e4:	801a      	strh	r2, [r3, #0]
 80096e6:	e07c      	b.n	80097e2 <USB_EPStartXfer+0x17e2>
 80096e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	2b3e      	cmp	r3, #62	; 0x3e
 80096f6:	d820      	bhi.n	800973a <USB_EPStartXfer+0x173a>
 80096f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800970a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800970e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	d004      	beq.n	8009728 <USB_EPStartXfer+0x1728>
 800971e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009722:	3301      	adds	r3, #1
 8009724:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009728:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800972c:	b29b      	uxth	r3, r3
 800972e:	029b      	lsls	r3, r3, #10
 8009730:	b29a      	uxth	r2, r3
 8009732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009736:	801a      	strh	r2, [r3, #0]
 8009738:	e053      	b.n	80097e2 <USB_EPStartXfer+0x17e2>
 800973a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800973e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	095b      	lsrs	r3, r3, #5
 8009748:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800974c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009750:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	f003 031f 	and.w	r3, r3, #31
 800975c:	2b00      	cmp	r3, #0
 800975e:	d104      	bne.n	800976a <USB_EPStartXfer+0x176a>
 8009760:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009764:	3b01      	subs	r3, #1
 8009766:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800976a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800976e:	b29b      	uxth	r3, r3
 8009770:	029b      	lsls	r3, r3, #10
 8009772:	b29b      	uxth	r3, r3
 8009774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800977c:	b29a      	uxth	r2, r3
 800977e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009782:	801a      	strh	r2, [r3, #0]
 8009784:	e02d      	b.n	80097e2 <USB_EPStartXfer+0x17e2>
 8009786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800978a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d125      	bne.n	80097e2 <USB_EPStartXfer+0x17e2>
 8009796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800979a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	461a      	mov	r2, r3
 80097a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097ac:	4413      	add	r3, r2
 80097ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	011a      	lsls	r2, r3, #4
 80097c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097c4:	4413      	add	r3, r2
 80097c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	b29a      	uxth	r2, r3
 80097dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80097e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 81fe 	beq.w	8009bf0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80097f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009814:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <USB_EPStartXfer+0x182c>
 8009820:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10d      	bne.n	8009848 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800982c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009834:	2b00      	cmp	r3, #0
 8009836:	f040 81db 	bne.w	8009bf0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800983a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800983e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009842:	2b00      	cmp	r3, #0
 8009844:	f040 81d4 	bne.w	8009bf0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800984c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800986a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800986e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	441a      	add	r2, r3
 800988c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800989c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	8013      	strh	r3, [r2, #0]
 80098a4:	e1a4      	b.n	8009bf0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80098a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	78db      	ldrb	r3, [r3, #3]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	f040 819a 	bne.w	8009bec <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80098b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699a      	ldr	r2, [r3, #24]
 80098c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d917      	bls.n	8009904 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80098d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80098e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699a      	ldr	r2, [r3, #24]
 80098f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098f4:	1ad2      	subs	r2, r2, r3
 80098f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	619a      	str	r2, [r3, #24]
 8009902:	e00e      	b.n	8009922 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8009904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2200      	movs	r2, #0
 8009920:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	785b      	ldrb	r3, [r3, #1]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d178      	bne.n	8009a24 <USB_EPStartXfer+0x1a24>
 8009932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800994e:	b29b      	uxth	r3, r3
 8009950:	461a      	mov	r2, r3
 8009952:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009956:	4413      	add	r3, r2
 8009958:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800995c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	011a      	lsls	r2, r3, #4
 800996a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800996e:	4413      	add	r3, r2
 8009970:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009974:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800997c:	2b00      	cmp	r3, #0
 800997e:	d116      	bne.n	80099ae <USB_EPStartXfer+0x19ae>
 8009980:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800998c:	b29a      	uxth	r2, r3
 800998e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009992:	801a      	strh	r2, [r3, #0]
 8009994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	e06b      	b.n	8009a86 <USB_EPStartXfer+0x1a86>
 80099ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099b2:	2b3e      	cmp	r3, #62	; 0x3e
 80099b4:	d818      	bhi.n	80099e8 <USB_EPStartXfer+0x19e8>
 80099b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ba:	085b      	lsrs	r3, r3, #1
 80099bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d004      	beq.n	80099d6 <USB_EPStartXfer+0x19d6>
 80099cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099d0:	3301      	adds	r3, #1
 80099d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099da:	b29b      	uxth	r3, r3
 80099dc:	029b      	lsls	r3, r3, #10
 80099de:	b29a      	uxth	r2, r3
 80099e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099e4:	801a      	strh	r2, [r3, #0]
 80099e6:	e04e      	b.n	8009a86 <USB_EPStartXfer+0x1a86>
 80099e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ec:	095b      	lsrs	r3, r3, #5
 80099ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099f6:	f003 031f 	and.w	r3, r3, #31
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d104      	bne.n	8009a08 <USB_EPStartXfer+0x1a08>
 80099fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a02:	3b01      	subs	r3, #1
 8009a04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	029b      	lsls	r3, r3, #10
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a20:	801a      	strh	r2, [r3, #0]
 8009a22:	e030      	b.n	8009a86 <USB_EPStartXfer+0x1a86>
 8009a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	785b      	ldrb	r3, [r3, #1]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d128      	bne.n	8009a86 <USB_EPStartXfer+0x1a86>
 8009a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a58:	4413      	add	r3, r2
 8009a5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	011a      	lsls	r2, r3, #4
 8009a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a70:	4413      	add	r3, r2
 8009a72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009a84:	801a      	strh	r2, [r3, #0]
 8009a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	785b      	ldrb	r3, [r3, #1]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d178      	bne.n	8009b96 <USB_EPStartXfer+0x1b96>
 8009aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ac8:	4413      	add	r3, r2
 8009aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	011a      	lsls	r2, r3, #4
 8009adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d116      	bne.n	8009b20 <USB_EPStartXfer+0x1b20>
 8009af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b04:	801a      	strh	r2, [r3, #0]
 8009b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b0a:	881b      	ldrh	r3, [r3, #0]
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b1c:	801a      	strh	r2, [r3, #0]
 8009b1e:	e067      	b.n	8009bf0 <USB_EPStartXfer+0x1bf0>
 8009b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b24:	2b3e      	cmp	r3, #62	; 0x3e
 8009b26:	d818      	bhi.n	8009b5a <USB_EPStartXfer+0x1b5a>
 8009b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b2c:	085b      	lsrs	r3, r3, #1
 8009b2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d004      	beq.n	8009b48 <USB_EPStartXfer+0x1b48>
 8009b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b42:	3301      	adds	r3, #1
 8009b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	029b      	lsls	r3, r3, #10
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b56:	801a      	strh	r2, [r3, #0]
 8009b58:	e04a      	b.n	8009bf0 <USB_EPStartXfer+0x1bf0>
 8009b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b5e:	095b      	lsrs	r3, r3, #5
 8009b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b68:	f003 031f 	and.w	r3, r3, #31
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d104      	bne.n	8009b7a <USB_EPStartXfer+0x1b7a>
 8009b70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b74:	3b01      	subs	r3, #1
 8009b76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	029b      	lsls	r3, r3, #10
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b92:	801a      	strh	r2, [r3, #0]
 8009b94:	e02c      	b.n	8009bf0 <USB_EPStartXfer+0x1bf0>
 8009b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d124      	bne.n	8009bf0 <USB_EPStartXfer+0x1bf0>
 8009ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009baa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	011a      	lsls	r2, r3, #4
 8009bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009be8:	801a      	strh	r2, [r3, #0]
 8009bea:	e001      	b.n	8009bf0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e03a      	b.n	8009c66 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c16:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009c1a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009c26:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	441a      	add	r2, r3
 8009c4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d020      	beq.n	8009cc4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c98:	81bb      	strh	r3, [r7, #12]
 8009c9a:	89bb      	ldrh	r3, [r7, #12]
 8009c9c:	f083 0310 	eor.w	r3, r3, #16
 8009ca0:	81bb      	strh	r3, [r7, #12]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	441a      	add	r2, r3
 8009cac:	89bb      	ldrh	r3, [r7, #12]
 8009cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	8013      	strh	r3, [r2, #0]
 8009cc2:	e01f      	b.n	8009d04 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cda:	81fb      	strh	r3, [r7, #14]
 8009cdc:	89fb      	ldrh	r3, [r7, #14]
 8009cde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ce2:	81fb      	strh	r3, [r7, #14]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	441a      	add	r2, r3
 8009cee:	89fb      	ldrh	r3, [r7, #14]
 8009cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bc80      	pop	{r7}
 8009d0e:	4770      	bx	lr

08009d10 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	7b1b      	ldrb	r3, [r3, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f040 809d 	bne.w	8009e5e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	785b      	ldrb	r3, [r3, #1]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d04c      	beq.n	8009dc6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	881b      	ldrh	r3, [r3, #0]
 8009d38:	823b      	strh	r3, [r7, #16]
 8009d3a:	8a3b      	ldrh	r3, [r7, #16]
 8009d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01b      	beq.n	8009d7c <USB_EPClearStall+0x6c>
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d5a:	81fb      	strh	r3, [r7, #14]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	441a      	add	r2, r3
 8009d66:	89fb      	ldrh	r3, [r7, #14]
 8009d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	78db      	ldrb	r3, [r3, #3]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d06c      	beq.n	8009e5e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d9a:	81bb      	strh	r3, [r7, #12]
 8009d9c:	89bb      	ldrh	r3, [r7, #12]
 8009d9e:	f083 0320 	eor.w	r3, r3, #32
 8009da2:	81bb      	strh	r3, [r7, #12]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	441a      	add	r2, r3
 8009dae:	89bb      	ldrh	r3, [r7, #12]
 8009db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	8013      	strh	r3, [r2, #0]
 8009dc4:	e04b      	b.n	8009e5e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	82fb      	strh	r3, [r7, #22]
 8009dd4:	8afb      	ldrh	r3, [r7, #22]
 8009dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d01b      	beq.n	8009e16 <USB_EPClearStall+0x106>
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df4:	82bb      	strh	r3, [r7, #20]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	441a      	add	r2, r3
 8009e00:	8abb      	ldrh	r3, [r7, #20]
 8009e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e2c:	827b      	strh	r3, [r7, #18]
 8009e2e:	8a7b      	ldrh	r3, [r7, #18]
 8009e30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e34:	827b      	strh	r3, [r7, #18]
 8009e36:	8a7b      	ldrh	r3, [r7, #18]
 8009e38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e3c:	827b      	strh	r3, [r7, #18]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	441a      	add	r2, r3
 8009e48:	8a7b      	ldrh	r3, [r7, #18]
 8009e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	371c      	adds	r7, #28
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bc80      	pop	{r7}
 8009e68:	4770      	bx	lr

08009e6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d103      	bne.n	8009e84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2280      	movs	r2, #128	; 0x80
 8009e80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bc80      	pop	{r7}
 8009e8e:	4770      	bx	lr

08009e90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bc80      	pop	{r7}
 8009ea2:	4770      	bx	lr

08009ea4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bc80      	pop	{r7}
 8009eb6:	4770      	bx	lr

08009eb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009eca:	68fb      	ldr	r3, [r7, #12]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bc80      	pop	{r7}
 8009ed4:	4770      	bx	lr

08009ed6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bc80      	pop	{r7}
 8009eea:	4770      	bx	lr

08009eec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b08d      	sub	sp, #52	; 0x34
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	461a      	mov	r2, r3
 8009efa:	460b      	mov	r3, r1
 8009efc:	80fb      	strh	r3, [r7, #6]
 8009efe:	4613      	mov	r3, r2
 8009f00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009f02:	88bb      	ldrh	r3, [r7, #4]
 8009f04:	3301      	adds	r3, #1
 8009f06:	085b      	lsrs	r3, r3, #1
 8009f08:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	005a      	lsls	r2, r3, #1
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f1e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f24:	e01e      	b.n	8009f64 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	3301      	adds	r3, #1
 8009f30:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4e:	3302      	adds	r3, #2
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f54:	3302      	adds	r3, #2
 8009f56:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	3b01      	subs	r3, #1
 8009f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1dd      	bne.n	8009f26 <USB_WritePMA+0x3a>
  }
}
 8009f6a:	bf00      	nop
 8009f6c:	bf00      	nop
 8009f6e:	3734      	adds	r7, #52	; 0x34
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bc80      	pop	{r7}
 8009f74:	4770      	bx	lr

08009f76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b08b      	sub	sp, #44	; 0x2c
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	60b9      	str	r1, [r7, #8]
 8009f80:	4611      	mov	r1, r2
 8009f82:	461a      	mov	r2, r3
 8009f84:	460b      	mov	r3, r1
 8009f86:	80fb      	strh	r3, [r7, #6]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009f8c:	88bb      	ldrh	r3, [r7, #4]
 8009f8e:	085b      	lsrs	r3, r3, #1
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009f9c:	88fb      	ldrh	r3, [r7, #6]
 8009f9e:	005a      	lsls	r2, r3, #1
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fa8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24
 8009fae:	e01b      	b.n	8009fe8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	3302      	adds	r3, #2
 8009fbc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	0a1b      	lsrs	r3, r3, #8
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	3302      	adds	r3, #2
 8009fe0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e0      	bne.n	8009fb0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009fee:	88bb      	ldrh	r3, [r7, #4]
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d007      	beq.n	800a00a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	881b      	ldrh	r3, [r3, #0]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	b2da      	uxtb	r2, r3
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	701a      	strb	r2, [r3, #0]
  }
}
 800a00a:	bf00      	nop
 800a00c:	372c      	adds	r7, #44	; 0x2c
 800a00e:	46bd      	mov	sp, r7
 800a010:	bc80      	pop	{r7}
 800a012:	4770      	bx	lr

0800a014 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a020:	2300      	movs	r3, #0
 800a022:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	7c1b      	ldrb	r3, [r3, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d115      	bne.n	800a058 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a02c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a030:	2202      	movs	r2, #2
 800a032:	2181      	movs	r1, #129	; 0x81
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 fe8c 	bl	800bd52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a040:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a044:	2202      	movs	r2, #2
 800a046:	2101      	movs	r1, #1
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f001 fe82 	bl	800bd52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a056:	e012      	b.n	800a07e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	2202      	movs	r2, #2
 800a05c:	2181      	movs	r1, #129	; 0x81
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f001 fe77 	bl	800bd52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a06a:	2340      	movs	r3, #64	; 0x40
 800a06c:	2202      	movs	r2, #2
 800a06e:	2101      	movs	r1, #1
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 fe6e 	bl	800bd52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a07e:	2308      	movs	r3, #8
 800a080:	2203      	movs	r2, #3
 800a082:	2182      	movs	r1, #130	; 0x82
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 fe64 	bl	800bd52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a090:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a094:	f001 ff84 	bl	800bfa0 <USBD_static_malloc>
 800a098:	4602      	mov	r2, r0
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d102      	bne.n	800a0b0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	73fb      	strb	r3, [r7, #15]
 800a0ae:	e026      	b.n	800a0fe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	7c1b      	ldrb	r3, [r3, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d109      	bne.n	800a0ee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f001 ff24 	bl	800bf34 <USBD_LL_PrepareReceive>
 800a0ec:	e007      	b.n	800a0fe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0f4:	2340      	movs	r3, #64	; 0x40
 800a0f6:	2101      	movs	r1, #1
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 ff1b 	bl	800bf34 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a118:	2181      	movs	r1, #129	; 0x81
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f001 fe3f 	bl	800bd9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a126:	2101      	movs	r1, #1
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 fe38 	bl	800bd9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a136:	2182      	movs	r1, #130	; 0x82
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f001 fe30 	bl	800bd9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00e      	beq.n	800a16c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a15e:	4618      	mov	r0, r3
 800a160:	f001 ff2a 	bl	800bfb8 <USBD_static_free>
    pdev->pClassData = NULL;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b086      	sub	sp, #24
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a186:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d039      	beq.n	800a214 <USBD_CDC_Setup+0x9e>
 800a1a0:	2b20      	cmp	r3, #32
 800a1a2:	d17f      	bne.n	800a2a4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	88db      	ldrh	r3, [r3, #6]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d029      	beq.n	800a200 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	b25b      	sxtb	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da11      	bge.n	800a1da <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a1c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	88d2      	ldrh	r2, [r2, #6]
 800a1c8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a1ca:	6939      	ldr	r1, [r7, #16]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	88db      	ldrh	r3, [r3, #6]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f001 fa09 	bl	800b5ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a1d8:	e06b      	b.n	800a2b2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	785a      	ldrb	r2, [r3, #1]
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	88db      	ldrh	r3, [r3, #6]
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a1f0:	6939      	ldr	r1, [r7, #16]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	88db      	ldrh	r3, [r3, #6]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 fa24 	bl	800b646 <USBD_CtlPrepareRx>
      break;
 800a1fe:	e058      	b.n	800a2b2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	7850      	ldrb	r0, [r2, #1]
 800a20c:	2200      	movs	r2, #0
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	4798      	blx	r3
      break;
 800a212:	e04e      	b.n	800a2b2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	785b      	ldrb	r3, [r3, #1]
 800a218:	2b0b      	cmp	r3, #11
 800a21a:	d02e      	beq.n	800a27a <USBD_CDC_Setup+0x104>
 800a21c:	2b0b      	cmp	r3, #11
 800a21e:	dc38      	bgt.n	800a292 <USBD_CDC_Setup+0x11c>
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <USBD_CDC_Setup+0xb4>
 800a224:	2b0a      	cmp	r3, #10
 800a226:	d014      	beq.n	800a252 <USBD_CDC_Setup+0xdc>
 800a228:	e033      	b.n	800a292 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a230:	2b03      	cmp	r3, #3
 800a232:	d107      	bne.n	800a244 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a234:	f107 030c 	add.w	r3, r7, #12
 800a238:	2202      	movs	r2, #2
 800a23a:	4619      	mov	r1, r3
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f001 f9d4 	bl	800b5ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a242:	e02e      	b.n	800a2a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f001 f965 	bl	800b516 <USBD_CtlError>
            ret = USBD_FAIL;
 800a24c:	2302      	movs	r3, #2
 800a24e:	75fb      	strb	r3, [r7, #23]
          break;
 800a250:	e027      	b.n	800a2a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d107      	bne.n	800a26c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a25c:	f107 030f 	add.w	r3, r7, #15
 800a260:	2201      	movs	r2, #1
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f001 f9c0 	bl	800b5ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a26a:	e01a      	b.n	800a2a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f001 f951 	bl	800b516 <USBD_CtlError>
            ret = USBD_FAIL;
 800a274:	2302      	movs	r3, #2
 800a276:	75fb      	strb	r3, [r7, #23]
          break;
 800a278:	e013      	b.n	800a2a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a280:	2b03      	cmp	r3, #3
 800a282:	d00d      	beq.n	800a2a0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 f945 	bl	800b516 <USBD_CtlError>
            ret = USBD_FAIL;
 800a28c:	2302      	movs	r3, #2
 800a28e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a290:	e006      	b.n	800a2a0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f001 f93e 	bl	800b516 <USBD_CtlError>
          ret = USBD_FAIL;
 800a29a:	2302      	movs	r3, #2
 800a29c:	75fb      	strb	r3, [r7, #23]
          break;
 800a29e:	e000      	b.n	800a2a2 <USBD_CDC_Setup+0x12c>
          break;
 800a2a0:	bf00      	nop
      }
      break;
 800a2a2:	e006      	b.n	800a2b2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 f935 	bl	800b516 <USBD_CtlError>
      ret = USBD_FAIL;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b0:	bf00      	nop
  }

  return ret;
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ce:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2d6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d03a      	beq.n	800a358 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a2e2:	78fa      	ldrb	r2, [r7, #3]
 800a2e4:	6879      	ldr	r1, [r7, #4]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	440b      	add	r3, r1
 800a2f0:	331c      	adds	r3, #28
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d029      	beq.n	800a34c <USBD_CDC_DataIn+0x90>
 800a2f8:	78fa      	ldrb	r2, [r7, #3]
 800a2fa:	6879      	ldr	r1, [r7, #4]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	440b      	add	r3, r1
 800a306:	331c      	adds	r3, #28
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	78f9      	ldrb	r1, [r7, #3]
 800a30c:	68b8      	ldr	r0, [r7, #8]
 800a30e:	460b      	mov	r3, r1
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	440b      	add	r3, r1
 800a314:	00db      	lsls	r3, r3, #3
 800a316:	4403      	add	r3, r0
 800a318:	3338      	adds	r3, #56	; 0x38
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a320:	fb01 f303 	mul.w	r3, r1, r3
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d110      	bne.n	800a34c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a32a:	78fa      	ldrb	r2, [r7, #3]
 800a32c:	6879      	ldr	r1, [r7, #4]
 800a32e:	4613      	mov	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	440b      	add	r3, r1
 800a338:	331c      	adds	r3, #28
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a33e:	78f9      	ldrb	r1, [r7, #3]
 800a340:	2300      	movs	r3, #0
 800a342:	2200      	movs	r2, #0
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 fdd2 	bl	800beee <USBD_LL_Transmit>
 800a34a:	e003      	b.n	800a354 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	e000      	b.n	800a35a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a358:	2302      	movs	r3, #2
  }
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a374:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a376:	78fb      	ldrb	r3, [r7, #3]
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 fdfd 	bl	800bf7a <USBD_LL_GetRxDataSize>
 800a380:	4602      	mov	r2, r0
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00d      	beq.n	800a3ae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	4798      	blx	r3

    return USBD_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	e000      	b.n	800a3b0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a3ae:	2302      	movs	r3, #2
  }
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d015      	beq.n	800a3fe <USBD_CDC_EP0_RxReady+0x46>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a3d8:	2bff      	cmp	r3, #255	; 0xff
 800a3da:	d010      	beq.n	800a3fe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a3ea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a3f2:	b292      	uxth	r2, r2
 800a3f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	22ff      	movs	r2, #255	; 0xff
 800a3fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2243      	movs	r2, #67	; 0x43
 800a414:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a416:	4b03      	ldr	r3, [pc, #12]	; (800a424 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bc80      	pop	{r7}
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	200000bc 	.word	0x200000bc

0800a428 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2243      	movs	r2, #67	; 0x43
 800a434:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a436:	4b03      	ldr	r3, [pc, #12]	; (800a444 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	20000078 	.word	0x20000078

0800a448 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2243      	movs	r2, #67	; 0x43
 800a454:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a456:	4b03      	ldr	r3, [pc, #12]	; (800a464 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bc80      	pop	{r7}
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	20000100 	.word	0x20000100

0800a468 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	220a      	movs	r2, #10
 800a474:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a476:	4b03      	ldr	r3, [pc, #12]	; (800a484 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a478:	4618      	mov	r0, r3
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bc80      	pop	{r7}
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	20000034 	.word	0x20000034

0800a488 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a492:	2302      	movs	r3, #2
 800a494:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d005      	beq.n	800a4a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bc80      	pop	{r7}
 800a4b2:	4770      	bx	lr

0800a4b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a4d2:	88fa      	ldrh	r2, [r7, #6]
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	371c      	adds	r7, #28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bc80      	pop	{r7}
 800a4e4:	4770      	bx	lr

0800a4e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	bc80      	pop	{r7}
 800a50a:	4770      	bx	lr

0800a50c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a51a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a522:	2b00      	cmp	r3, #0
 800a524:	d01c      	beq.n	800a560 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d115      	bne.n	800a55c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2201      	movs	r2, #1
 800a534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a54e:	b29b      	uxth	r3, r3
 800a550:	2181      	movs	r1, #129	; 0x81
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f001 fccb 	bl	800beee <USBD_LL_Transmit>

      return USBD_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	e002      	b.n	800a562 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e000      	b.n	800a562 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a560:	2302      	movs	r3, #2
  }
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a578:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a580:	2b00      	cmp	r3, #0
 800a582:	d017      	beq.n	800a5b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	7c1b      	ldrb	r3, [r3, #16]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d109      	bne.n	800a5a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a592:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a596:	2101      	movs	r1, #1
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 fccb 	bl	800bf34 <USBD_LL_PrepareReceive>
 800a59e:	e007      	b.n	800a5b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5a6:	2340      	movs	r3, #64	; 0x40
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 fcc2 	bl	800bf34 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e000      	b.n	800a5b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a5b4:	2302      	movs	r3, #2
  }
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e01a      	b.n	800a60c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d003      	beq.n	800a5e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	79fa      	ldrb	r2, [r7, #7]
 800a602:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f001 fb2f 	bl	800bc68 <USBD_LL_Init>

  return USBD_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d006      	beq.n	800a636 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	73fb      	strb	r3, [r7, #15]
 800a634:	e001      	b.n	800a63a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a636:	2302      	movs	r3, #2
 800a638:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	bc80      	pop	{r7}
 800a644:	4770      	bx	lr

0800a646 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 fb64 	bl	800bd1c <USBD_LL_Start>

  return USBD_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bc80      	pop	{r7}
 800a670:	4770      	bx	lr

0800a672 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	460b      	mov	r3, r1
 800a67c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a67e:	2302      	movs	r3, #2
 800a680:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00c      	beq.n	800a6a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	78fa      	ldrb	r2, [r7, #3]
 800a696:	4611      	mov	r1, r2
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	4798      	blx	r3
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	78fa      	ldrb	r2, [r7, #3]
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	4798      	blx	r3

  return USBD_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 fed8 	bl	800b49e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a70a:	f003 031f 	and.w	r3, r3, #31
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d016      	beq.n	800a740 <USBD_LL_SetupStage+0x6a>
 800a712:	2b02      	cmp	r3, #2
 800a714:	d81c      	bhi.n	800a750 <USBD_LL_SetupStage+0x7a>
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <USBD_LL_SetupStage+0x4a>
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d008      	beq.n	800a730 <USBD_LL_SetupStage+0x5a>
 800a71e:	e017      	b.n	800a750 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a726:	4619      	mov	r1, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f9cb 	bl	800aac4 <USBD_StdDevReq>
      break;
 800a72e:	e01a      	b.n	800a766 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fa2d 	bl	800ab98 <USBD_StdItfReq>
      break;
 800a73e:	e012      	b.n	800a766 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fa6d 	bl	800ac28 <USBD_StdEPReq>
      break;
 800a74e:	e00a      	b.n	800a766 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a756:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	4619      	mov	r1, r3
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f001 fb3c 	bl	800bddc <USBD_LL_StallEP>
      break;
 800a764:	bf00      	nop
  }

  return USBD_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	460b      	mov	r3, r1
 800a77a:	607a      	str	r2, [r7, #4]
 800a77c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a77e:	7afb      	ldrb	r3, [r7, #11]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d14b      	bne.n	800a81c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a78a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a792:	2b03      	cmp	r3, #3
 800a794:	d134      	bne.n	800a800 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	68da      	ldr	r2, [r3, #12]
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d919      	bls.n	800a7d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	68da      	ldr	r2, [r3, #12]
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	1ad2      	subs	r2, r2, r3
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d203      	bcs.n	800a7c4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	e002      	b.n	800a7ca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 ff57 	bl	800b682 <USBD_CtlContinueRx>
 800a7d4:	e038      	b.n	800a848 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00a      	beq.n	800a7f8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d105      	bne.n	800a7f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 ff54 	bl	800b6a6 <USBD_CtlSendStatus>
 800a7fe:	e023      	b.n	800a848 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a806:	2b05      	cmp	r3, #5
 800a808:	d11e      	bne.n	800a848 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a812:	2100      	movs	r1, #0
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f001 fae1 	bl	800bddc <USBD_LL_StallEP>
 800a81a:	e015      	b.n	800a848 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00d      	beq.n	800a844 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d108      	bne.n	800a844 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	7afa      	ldrb	r2, [r7, #11]
 800a83c:	4611      	mov	r1, r2
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	4798      	blx	r3
 800a842:	e001      	b.n	800a848 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a844:	2302      	movs	r3, #2
 800a846:	e000      	b.n	800a84a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b086      	sub	sp, #24
 800a856:	af00      	add	r7, sp, #0
 800a858:	60f8      	str	r0, [r7, #12]
 800a85a:	460b      	mov	r3, r1
 800a85c:	607a      	str	r2, [r7, #4]
 800a85e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a860:	7afb      	ldrb	r3, [r7, #11]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d17f      	bne.n	800a966 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3314      	adds	r3, #20
 800a86a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a872:	2b02      	cmp	r3, #2
 800a874:	d15c      	bne.n	800a930 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	68da      	ldr	r2, [r3, #12]
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d915      	bls.n	800a8ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	68da      	ldr	r2, [r3, #12]
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	1ad2      	subs	r2, r2, r3
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	b29b      	uxth	r3, r3
 800a896:	461a      	mov	r2, r3
 800a898:	6879      	ldr	r1, [r7, #4]
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f000 fec1 	bl	800b622 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f001 fb44 	bl	800bf34 <USBD_LL_PrepareReceive>
 800a8ac:	e04e      	b.n	800a94c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	6912      	ldr	r2, [r2, #16]
 800a8b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8ba:	fb01 f202 	mul.w	r2, r1, r2
 800a8be:	1a9b      	subs	r3, r3, r2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d11c      	bne.n	800a8fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	689a      	ldr	r2, [r3, #8]
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d316      	bcc.n	800a8fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d20f      	bcs.n	800a8fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8de:	2200      	movs	r2, #0
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 fe9d 	bl	800b622 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f001 fb1c 	bl	800bf34 <USBD_LL_PrepareReceive>
 800a8fc:	e026      	b.n	800a94c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a910:	2b03      	cmp	r3, #3
 800a912:	d105      	bne.n	800a920 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a920:	2180      	movs	r1, #128	; 0x80
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f001 fa5a 	bl	800bddc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 fecf 	bl	800b6cc <USBD_CtlReceiveStatus>
 800a92e:	e00d      	b.n	800a94c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a936:	2b04      	cmp	r3, #4
 800a938:	d004      	beq.n	800a944 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a940:	2b00      	cmp	r3, #0
 800a942:	d103      	bne.n	800a94c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a944:	2180      	movs	r1, #128	; 0x80
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f001 fa48 	bl	800bddc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a952:	2b01      	cmp	r3, #1
 800a954:	d11d      	bne.n	800a992 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f7ff fe81 	bl	800a65e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a964:	e015      	b.n	800a992 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00d      	beq.n	800a98e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a978:	2b03      	cmp	r3, #3
 800a97a:	d108      	bne.n	800a98e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	7afa      	ldrb	r2, [r7, #11]
 800a986:	4611      	mov	r1, r2
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	4798      	blx	r3
 800a98c:	e001      	b.n	800a992 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a98e:	2302      	movs	r3, #2
 800a990:	e000      	b.n	800a994 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3718      	adds	r7, #24
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9a4:	2340      	movs	r3, #64	; 0x40
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f001 f9d1 	bl	800bd52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2240      	movs	r2, #64	; 0x40
 800a9bc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9c0:	2340      	movs	r3, #64	; 0x40
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2180      	movs	r1, #128	; 0x80
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f001 f9c3 	bl	800bd52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2240      	movs	r2, #64	; 0x40
 800a9d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d009      	beq.n	800aa14 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	6852      	ldr	r2, [r2, #4]
 800aa0c:	b2d2      	uxtb	r2, r2
 800aa0e:	4611      	mov	r1, r2
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	4798      	blx	r3
  }

  return USBD_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	78fa      	ldrb	r2, [r7, #3]
 800aa2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bc80      	pop	{r7}
 800aa3a:	4770      	bx	lr

0800aa3c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2204      	movs	r2, #4
 800aa54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bc80      	pop	{r7}
 800aa62:	4770      	bx	lr

0800aa64 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d105      	bne.n	800aa82 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bc80      	pop	{r7}
 800aa8c:	4770      	bx	lr

0800aa8e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	d10b      	bne.n	800aab8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d005      	beq.n	800aab8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aab2:	69db      	ldr	r3, [r3, #28]
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
	...

0800aac4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aada:	2b40      	cmp	r3, #64	; 0x40
 800aadc:	d005      	beq.n	800aaea <USBD_StdDevReq+0x26>
 800aade:	2b40      	cmp	r3, #64	; 0x40
 800aae0:	d84f      	bhi.n	800ab82 <USBD_StdDevReq+0xbe>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d009      	beq.n	800aafa <USBD_StdDevReq+0x36>
 800aae6:	2b20      	cmp	r3, #32
 800aae8:	d14b      	bne.n	800ab82 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	4798      	blx	r3
      break;
 800aaf8:	e048      	b.n	800ab8c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	785b      	ldrb	r3, [r3, #1]
 800aafe:	2b09      	cmp	r3, #9
 800ab00:	d839      	bhi.n	800ab76 <USBD_StdDevReq+0xb2>
 800ab02:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <USBD_StdDevReq+0x44>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab59 	.word	0x0800ab59
 800ab0c:	0800ab6d 	.word	0x0800ab6d
 800ab10:	0800ab77 	.word	0x0800ab77
 800ab14:	0800ab63 	.word	0x0800ab63
 800ab18:	0800ab77 	.word	0x0800ab77
 800ab1c:	0800ab3b 	.word	0x0800ab3b
 800ab20:	0800ab31 	.word	0x0800ab31
 800ab24:	0800ab77 	.word	0x0800ab77
 800ab28:	0800ab4f 	.word	0x0800ab4f
 800ab2c:	0800ab45 	.word	0x0800ab45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f9dc 	bl	800aef0 <USBD_GetDescriptor>
          break;
 800ab38:	e022      	b.n	800ab80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fb3f 	bl	800b1c0 <USBD_SetAddress>
          break;
 800ab42:	e01d      	b.n	800ab80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fb7e 	bl	800b248 <USBD_SetConfig>
          break;
 800ab4c:	e018      	b.n	800ab80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fc07 	bl	800b364 <USBD_GetConfig>
          break;
 800ab56:	e013      	b.n	800ab80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fc37 	bl	800b3ce <USBD_GetStatus>
          break;
 800ab60:	e00e      	b.n	800ab80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fc65 	bl	800b434 <USBD_SetFeature>
          break;
 800ab6a:	e009      	b.n	800ab80 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fc74 	bl	800b45c <USBD_ClrFeature>
          break;
 800ab74:	e004      	b.n	800ab80 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fccc 	bl	800b516 <USBD_CtlError>
          break;
 800ab7e:	bf00      	nop
      }
      break;
 800ab80:	e004      	b.n	800ab8c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fcc6 	bl	800b516 <USBD_CtlError>
      break;
 800ab8a:	bf00      	nop
  }

  return ret;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop

0800ab98 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abae:	2b40      	cmp	r3, #64	; 0x40
 800abb0:	d005      	beq.n	800abbe <USBD_StdItfReq+0x26>
 800abb2:	2b40      	cmp	r3, #64	; 0x40
 800abb4:	d82e      	bhi.n	800ac14 <USBD_StdItfReq+0x7c>
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <USBD_StdItfReq+0x26>
 800abba:	2b20      	cmp	r3, #32
 800abbc:	d12a      	bne.n	800ac14 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc4:	3b01      	subs	r3, #1
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d81d      	bhi.n	800ac06 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	889b      	ldrh	r3, [r3, #4]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d813      	bhi.n	800abfc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	4798      	blx	r3
 800abe2:	4603      	mov	r3, r0
 800abe4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	88db      	ldrh	r3, [r3, #6]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d110      	bne.n	800ac10 <USBD_StdItfReq+0x78>
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10d      	bne.n	800ac10 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fd56 	bl	800b6a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abfa:	e009      	b.n	800ac10 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fc89 	bl	800b516 <USBD_CtlError>
          break;
 800ac04:	e004      	b.n	800ac10 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fc84 	bl	800b516 <USBD_CtlError>
          break;
 800ac0e:	e000      	b.n	800ac12 <USBD_StdItfReq+0x7a>
          break;
 800ac10:	bf00      	nop
      }
      break;
 800ac12:	e004      	b.n	800ac1e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fc7d 	bl	800b516 <USBD_CtlError>
      break;
 800ac1c:	bf00      	nop
  }

  return USBD_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	889b      	ldrh	r3, [r3, #4]
 800ac3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac44:	2b40      	cmp	r3, #64	; 0x40
 800ac46:	d007      	beq.n	800ac58 <USBD_StdEPReq+0x30>
 800ac48:	2b40      	cmp	r3, #64	; 0x40
 800ac4a:	f200 8146 	bhi.w	800aeda <USBD_StdEPReq+0x2b2>
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00a      	beq.n	800ac68 <USBD_StdEPReq+0x40>
 800ac52:	2b20      	cmp	r3, #32
 800ac54:	f040 8141 	bne.w	800aeda <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	4798      	blx	r3
      break;
 800ac66:	e13d      	b.n	800aee4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac70:	2b20      	cmp	r3, #32
 800ac72:	d10a      	bne.n	800ac8a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	4798      	blx	r3
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	e12d      	b.n	800aee6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d007      	beq.n	800aca2 <USBD_StdEPReq+0x7a>
 800ac92:	2b03      	cmp	r3, #3
 800ac94:	f300 811b 	bgt.w	800aece <USBD_StdEPReq+0x2a6>
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d072      	beq.n	800ad82 <USBD_StdEPReq+0x15a>
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d03a      	beq.n	800ad16 <USBD_StdEPReq+0xee>
 800aca0:	e115      	b.n	800aece <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d002      	beq.n	800acb2 <USBD_StdEPReq+0x8a>
 800acac:	2b03      	cmp	r3, #3
 800acae:	d015      	beq.n	800acdc <USBD_StdEPReq+0xb4>
 800acb0:	e02b      	b.n	800ad0a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acb2:	7bbb      	ldrb	r3, [r7, #14]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00c      	beq.n	800acd2 <USBD_StdEPReq+0xaa>
 800acb8:	7bbb      	ldrb	r3, [r7, #14]
 800acba:	2b80      	cmp	r3, #128	; 0x80
 800acbc:	d009      	beq.n	800acd2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 f88a 	bl	800bddc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800acc8:	2180      	movs	r1, #128	; 0x80
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f001 f886 	bl	800bddc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800acd0:	e020      	b.n	800ad14 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fc1e 	bl	800b516 <USBD_CtlError>
              break;
 800acda:	e01b      	b.n	800ad14 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	885b      	ldrh	r3, [r3, #2]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10e      	bne.n	800ad02 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00b      	beq.n	800ad02 <USBD_StdEPReq+0xda>
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	2b80      	cmp	r3, #128	; 0x80
 800acee:	d008      	beq.n	800ad02 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	88db      	ldrh	r3, [r3, #6]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d104      	bne.n	800ad02 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800acf8:	7bbb      	ldrb	r3, [r7, #14]
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f001 f86d 	bl	800bddc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fccf 	bl	800b6a6 <USBD_CtlSendStatus>

              break;
 800ad08:	e004      	b.n	800ad14 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fc02 	bl	800b516 <USBD_CtlError>
              break;
 800ad12:	bf00      	nop
          }
          break;
 800ad14:	e0e0      	b.n	800aed8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d002      	beq.n	800ad26 <USBD_StdEPReq+0xfe>
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	d015      	beq.n	800ad50 <USBD_StdEPReq+0x128>
 800ad24:	e026      	b.n	800ad74 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00c      	beq.n	800ad46 <USBD_StdEPReq+0x11e>
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	2b80      	cmp	r3, #128	; 0x80
 800ad30:	d009      	beq.n	800ad46 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f001 f850 	bl	800bddc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ad3c:	2180      	movs	r1, #128	; 0x80
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f001 f84c 	bl	800bddc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad44:	e01c      	b.n	800ad80 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fbe4 	bl	800b516 <USBD_CtlError>
              break;
 800ad4e:	e017      	b.n	800ad80 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	885b      	ldrh	r3, [r3, #2]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d112      	bne.n	800ad7e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d004      	beq.n	800ad6c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad62:	7bbb      	ldrb	r3, [r7, #14]
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 f857 	bl	800be1a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fc9a 	bl	800b6a6 <USBD_CtlSendStatus>
              }
              break;
 800ad72:	e004      	b.n	800ad7e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fbcd 	bl	800b516 <USBD_CtlError>
              break;
 800ad7c:	e000      	b.n	800ad80 <USBD_StdEPReq+0x158>
              break;
 800ad7e:	bf00      	nop
          }
          break;
 800ad80:	e0aa      	b.n	800aed8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d002      	beq.n	800ad92 <USBD_StdEPReq+0x16a>
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d032      	beq.n	800adf6 <USBD_StdEPReq+0x1ce>
 800ad90:	e097      	b.n	800aec2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad92:	7bbb      	ldrb	r3, [r7, #14]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d007      	beq.n	800ada8 <USBD_StdEPReq+0x180>
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	2b80      	cmp	r3, #128	; 0x80
 800ad9c:	d004      	beq.n	800ada8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fbb8 	bl	800b516 <USBD_CtlError>
                break;
 800ada6:	e091      	b.n	800aecc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ada8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adac:	2b00      	cmp	r3, #0
 800adae:	da0b      	bge.n	800adc8 <USBD_StdEPReq+0x1a0>
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	3310      	adds	r3, #16
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	4413      	add	r3, r2
 800adc4:	3304      	adds	r3, #4
 800adc6:	e00b      	b.n	800ade0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adce:	4613      	mov	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	4413      	add	r3, r2
 800adde:	3304      	adds	r3, #4
 800ade0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	2202      	movs	r2, #2
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fbfb 	bl	800b5ea <USBD_CtlSendData>
              break;
 800adf4:	e06a      	b.n	800aecc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800adf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	da11      	bge.n	800ae22 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
 800ae00:	f003 020f 	and.w	r2, r3, #15
 800ae04:	6879      	ldr	r1, [r7, #4]
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	440b      	add	r3, r1
 800ae10:	3318      	adds	r3, #24
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d117      	bne.n	800ae48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fb7b 	bl	800b516 <USBD_CtlError>
                  break;
 800ae20:	e054      	b.n	800aecc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae22:	7bbb      	ldrb	r3, [r7, #14]
 800ae24:	f003 020f 	and.w	r2, r3, #15
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	440b      	add	r3, r1
 800ae34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d104      	bne.n	800ae48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fb68 	bl	800b516 <USBD_CtlError>
                  break;
 800ae46:	e041      	b.n	800aecc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	da0b      	bge.n	800ae68 <USBD_StdEPReq+0x240>
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae56:	4613      	mov	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	3310      	adds	r3, #16
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	4413      	add	r3, r2
 800ae64:	3304      	adds	r3, #4
 800ae66:	e00b      	b.n	800ae80 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
 800ae6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	3304      	adds	r3, #4
 800ae80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae82:	7bbb      	ldrb	r3, [r7, #14]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <USBD_StdEPReq+0x266>
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	2b80      	cmp	r3, #128	; 0x80
 800ae8c:	d103      	bne.n	800ae96 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	e00e      	b.n	800aeb4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ae96:	7bbb      	ldrb	r3, [r7, #14]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 ffdc 	bl	800be58 <USBD_LL_IsStallEP>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	601a      	str	r2, [r3, #0]
 800aeac:	e002      	b.n	800aeb4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fb95 	bl	800b5ea <USBD_CtlSendData>
              break;
 800aec0:	e004      	b.n	800aecc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fb26 	bl	800b516 <USBD_CtlError>
              break;
 800aeca:	bf00      	nop
          }
          break;
 800aecc:	e004      	b.n	800aed8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fb20 	bl	800b516 <USBD_CtlError>
          break;
 800aed6:	bf00      	nop
      }
      break;
 800aed8:	e004      	b.n	800aee4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fb1a 	bl	800b516 <USBD_CtlError>
      break;
 800aee2:	bf00      	nop
  }

  return ret;
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	885b      	ldrh	r3, [r3, #2]
 800af0a:	0a1b      	lsrs	r3, r3, #8
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	3b01      	subs	r3, #1
 800af10:	2b06      	cmp	r3, #6
 800af12:	f200 8128 	bhi.w	800b166 <USBD_GetDescriptor+0x276>
 800af16:	a201      	add	r2, pc, #4	; (adr r2, 800af1c <USBD_GetDescriptor+0x2c>)
 800af18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1c:	0800af39 	.word	0x0800af39
 800af20:	0800af51 	.word	0x0800af51
 800af24:	0800af91 	.word	0x0800af91
 800af28:	0800b167 	.word	0x0800b167
 800af2c:	0800b167 	.word	0x0800b167
 800af30:	0800b107 	.word	0x0800b107
 800af34:	0800b133 	.word	0x0800b133
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	7c12      	ldrb	r2, [r2, #16]
 800af44:	f107 0108 	add.w	r1, r7, #8
 800af48:	4610      	mov	r0, r2
 800af4a:	4798      	blx	r3
 800af4c:	60f8      	str	r0, [r7, #12]
      break;
 800af4e:	e112      	b.n	800b176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	7c1b      	ldrb	r3, [r3, #16]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10d      	bne.n	800af74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af60:	f107 0208 	add.w	r2, r7, #8
 800af64:	4610      	mov	r0, r2
 800af66:	4798      	blx	r3
 800af68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3301      	adds	r3, #1
 800af6e:	2202      	movs	r2, #2
 800af70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af72:	e100      	b.n	800b176 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	f107 0208 	add.w	r2, r7, #8
 800af80:	4610      	mov	r0, r2
 800af82:	4798      	blx	r3
 800af84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3301      	adds	r3, #1
 800af8a:	2202      	movs	r2, #2
 800af8c:	701a      	strb	r2, [r3, #0]
      break;
 800af8e:	e0f2      	b.n	800b176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	885b      	ldrh	r3, [r3, #2]
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b05      	cmp	r3, #5
 800af98:	f200 80ac 	bhi.w	800b0f4 <USBD_GetDescriptor+0x204>
 800af9c:	a201      	add	r2, pc, #4	; (adr r2, 800afa4 <USBD_GetDescriptor+0xb4>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800afbd 	.word	0x0800afbd
 800afa8:	0800aff1 	.word	0x0800aff1
 800afac:	0800b025 	.word	0x0800b025
 800afb0:	0800b059 	.word	0x0800b059
 800afb4:	0800b08d 	.word	0x0800b08d
 800afb8:	0800b0c1 	.word	0x0800b0c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00b      	beq.n	800afe0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	7c12      	ldrb	r2, [r2, #16]
 800afd4:	f107 0108 	add.w	r1, r7, #8
 800afd8:	4610      	mov	r0, r2
 800afda:	4798      	blx	r3
 800afdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afde:	e091      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fa97 	bl	800b516 <USBD_CtlError>
            err++;
 800afe8:	7afb      	ldrb	r3, [r7, #11]
 800afea:	3301      	adds	r3, #1
 800afec:	72fb      	strb	r3, [r7, #11]
          break;
 800afee:	e089      	b.n	800b104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00b      	beq.n	800b014 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	7c12      	ldrb	r2, [r2, #16]
 800b008:	f107 0108 	add.w	r1, r7, #8
 800b00c:	4610      	mov	r0, r2
 800b00e:	4798      	blx	r3
 800b010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b012:	e077      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fa7d 	bl	800b516 <USBD_CtlError>
            err++;
 800b01c:	7afb      	ldrb	r3, [r7, #11]
 800b01e:	3301      	adds	r3, #1
 800b020:	72fb      	strb	r3, [r7, #11]
          break;
 800b022:	e06f      	b.n	800b104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00b      	beq.n	800b048 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	7c12      	ldrb	r2, [r2, #16]
 800b03c:	f107 0108 	add.w	r1, r7, #8
 800b040:	4610      	mov	r0, r2
 800b042:	4798      	blx	r3
 800b044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b046:	e05d      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fa63 	bl	800b516 <USBD_CtlError>
            err++;
 800b050:	7afb      	ldrb	r3, [r7, #11]
 800b052:	3301      	adds	r3, #1
 800b054:	72fb      	strb	r3, [r7, #11]
          break;
 800b056:	e055      	b.n	800b104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00b      	beq.n	800b07c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	7c12      	ldrb	r2, [r2, #16]
 800b070:	f107 0108 	add.w	r1, r7, #8
 800b074:	4610      	mov	r0, r2
 800b076:	4798      	blx	r3
 800b078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b07a:	e043      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fa49 	bl	800b516 <USBD_CtlError>
            err++;
 800b084:	7afb      	ldrb	r3, [r7, #11]
 800b086:	3301      	adds	r3, #1
 800b088:	72fb      	strb	r3, [r7, #11]
          break;
 800b08a:	e03b      	b.n	800b104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00b      	beq.n	800b0b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	7c12      	ldrb	r2, [r2, #16]
 800b0a4:	f107 0108 	add.w	r1, r7, #8
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	4798      	blx	r3
 800b0ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0ae:	e029      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fa2f 	bl	800b516 <USBD_CtlError>
            err++;
 800b0b8:	7afb      	ldrb	r3, [r7, #11]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b0be:	e021      	b.n	800b104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00b      	beq.n	800b0e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	7c12      	ldrb	r2, [r2, #16]
 800b0d8:	f107 0108 	add.w	r1, r7, #8
 800b0dc:	4610      	mov	r0, r2
 800b0de:	4798      	blx	r3
 800b0e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0e2:	e00f      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fa15 	bl	800b516 <USBD_CtlError>
            err++;
 800b0ec:	7afb      	ldrb	r3, [r7, #11]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b0f2:	e007      	b.n	800b104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fa0d 	bl	800b516 <USBD_CtlError>
          err++;
 800b0fc:	7afb      	ldrb	r3, [r7, #11]
 800b0fe:	3301      	adds	r3, #1
 800b100:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b102:	e038      	b.n	800b176 <USBD_GetDescriptor+0x286>
 800b104:	e037      	b.n	800b176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	7c1b      	ldrb	r3, [r3, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d109      	bne.n	800b122 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b116:	f107 0208 	add.w	r2, r7, #8
 800b11a:	4610      	mov	r0, r2
 800b11c:	4798      	blx	r3
 800b11e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b120:	e029      	b.n	800b176 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f9f6 	bl	800b516 <USBD_CtlError>
        err++;
 800b12a:	7afb      	ldrb	r3, [r7, #11]
 800b12c:	3301      	adds	r3, #1
 800b12e:	72fb      	strb	r3, [r7, #11]
      break;
 800b130:	e021      	b.n	800b176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	7c1b      	ldrb	r3, [r3, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10d      	bne.n	800b156 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	f107 0208 	add.w	r2, r7, #8
 800b146:	4610      	mov	r0, r2
 800b148:	4798      	blx	r3
 800b14a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	3301      	adds	r3, #1
 800b150:	2207      	movs	r2, #7
 800b152:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b154:	e00f      	b.n	800b176 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f9dc 	bl	800b516 <USBD_CtlError>
        err++;
 800b15e:	7afb      	ldrb	r3, [r7, #11]
 800b160:	3301      	adds	r3, #1
 800b162:	72fb      	strb	r3, [r7, #11]
      break;
 800b164:	e007      	b.n	800b176 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f9d4 	bl	800b516 <USBD_CtlError>
      err++;
 800b16e:	7afb      	ldrb	r3, [r7, #11]
 800b170:	3301      	adds	r3, #1
 800b172:	72fb      	strb	r3, [r7, #11]
      break;
 800b174:	bf00      	nop
  }

  if (err != 0U)
 800b176:	7afb      	ldrb	r3, [r7, #11]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d11c      	bne.n	800b1b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b17c:	893b      	ldrh	r3, [r7, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d011      	beq.n	800b1a6 <USBD_GetDescriptor+0x2b6>
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	88db      	ldrh	r3, [r3, #6]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00d      	beq.n	800b1a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	88da      	ldrh	r2, [r3, #6]
 800b18e:	893b      	ldrh	r3, [r7, #8]
 800b190:	4293      	cmp	r3, r2
 800b192:	bf28      	it	cs
 800b194:	4613      	movcs	r3, r2
 800b196:	b29b      	uxth	r3, r3
 800b198:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b19a:	893b      	ldrh	r3, [r7, #8]
 800b19c:	461a      	mov	r2, r3
 800b19e:	68f9      	ldr	r1, [r7, #12]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fa22 	bl	800b5ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	88db      	ldrh	r3, [r3, #6]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d104      	bne.n	800b1b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fa79 	bl	800b6a6 <USBD_CtlSendStatus>
 800b1b4:	e000      	b.n	800b1b8 <USBD_GetDescriptor+0x2c8>
    return;
 800b1b6:	bf00      	nop
    }
  }
}
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop

0800b1c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	889b      	ldrh	r3, [r3, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d130      	bne.n	800b234 <USBD_SetAddress+0x74>
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	88db      	ldrh	r3, [r3, #6]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d12c      	bne.n	800b234 <USBD_SetAddress+0x74>
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	885b      	ldrh	r3, [r3, #2]
 800b1de:	2b7f      	cmp	r3, #127	; 0x7f
 800b1e0:	d828      	bhi.n	800b234 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	885b      	ldrh	r3, [r3, #2]
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f4:	2b03      	cmp	r3, #3
 800b1f6:	d104      	bne.n	800b202 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f98b 	bl	800b516 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b200:	e01d      	b.n	800b23e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	7bfa      	ldrb	r2, [r7, #15]
 800b206:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fe4e 	bl	800beb0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 fa46 	bl	800b6a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d004      	beq.n	800b22a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2202      	movs	r2, #2
 800b224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b228:	e009      	b.n	800b23e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2201      	movs	r2, #1
 800b22e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b232:	e004      	b.n	800b23e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f96d 	bl	800b516 <USBD_CtlError>
  }
}
 800b23c:	bf00      	nop
 800b23e:	bf00      	nop
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	885b      	ldrh	r3, [r3, #2]
 800b256:	b2da      	uxtb	r2, r3
 800b258:	4b41      	ldr	r3, [pc, #260]	; (800b360 <USBD_SetConfig+0x118>)
 800b25a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b25c:	4b40      	ldr	r3, [pc, #256]	; (800b360 <USBD_SetConfig+0x118>)
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d904      	bls.n	800b26e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b264:	6839      	ldr	r1, [r7, #0]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f955 	bl	800b516 <USBD_CtlError>
 800b26c:	e075      	b.n	800b35a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b274:	2b02      	cmp	r3, #2
 800b276:	d002      	beq.n	800b27e <USBD_SetConfig+0x36>
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d023      	beq.n	800b2c4 <USBD_SetConfig+0x7c>
 800b27c:	e062      	b.n	800b344 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b27e:	4b38      	ldr	r3, [pc, #224]	; (800b360 <USBD_SetConfig+0x118>)
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d01a      	beq.n	800b2bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b286:	4b36      	ldr	r3, [pc, #216]	; (800b360 <USBD_SetConfig+0x118>)
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	461a      	mov	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2203      	movs	r2, #3
 800b294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b298:	4b31      	ldr	r3, [pc, #196]	; (800b360 <USBD_SetConfig+0x118>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff f9e7 	bl	800a672 <USBD_SetClassConfig>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d104      	bne.n	800b2b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f932 	bl	800b516 <USBD_CtlError>
            return;
 800b2b2:	e052      	b.n	800b35a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f9f6 	bl	800b6a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b2ba:	e04e      	b.n	800b35a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f9f2 	bl	800b6a6 <USBD_CtlSendStatus>
        break;
 800b2c2:	e04a      	b.n	800b35a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b2c4:	4b26      	ldr	r3, [pc, #152]	; (800b360 <USBD_SetConfig+0x118>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d112      	bne.n	800b2f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b2d4:	4b22      	ldr	r3, [pc, #136]	; (800b360 <USBD_SetConfig+0x118>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b2de:	4b20      	ldr	r3, [pc, #128]	; (800b360 <USBD_SetConfig+0x118>)
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff f9e3 	bl	800a6b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f9db 	bl	800b6a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b2f0:	e033      	b.n	800b35a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b2f2:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <USBD_SetConfig+0x118>)
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d01d      	beq.n	800b33c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7ff f9d1 	bl	800a6b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b30e:	4b14      	ldr	r3, [pc, #80]	; (800b360 <USBD_SetConfig+0x118>)
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	461a      	mov	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b318:	4b11      	ldr	r3, [pc, #68]	; (800b360 <USBD_SetConfig+0x118>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	4619      	mov	r1, r3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f7ff f9a7 	bl	800a672 <USBD_SetClassConfig>
 800b324:	4603      	mov	r3, r0
 800b326:	2b02      	cmp	r3, #2
 800b328:	d104      	bne.n	800b334 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f8f2 	bl	800b516 <USBD_CtlError>
            return;
 800b332:	e012      	b.n	800b35a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f9b6 	bl	800b6a6 <USBD_CtlSendStatus>
        break;
 800b33a:	e00e      	b.n	800b35a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f9b2 	bl	800b6a6 <USBD_CtlSendStatus>
        break;
 800b342:	e00a      	b.n	800b35a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b344:	6839      	ldr	r1, [r7, #0]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f8e5 	bl	800b516 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b34c:	4b04      	ldr	r3, [pc, #16]	; (800b360 <USBD_SetConfig+0x118>)
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	4619      	mov	r1, r3
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7ff f9ac 	bl	800a6b0 <USBD_ClrClassConfig>
        break;
 800b358:	bf00      	nop
    }
  }
}
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	200004d0 	.word	0x200004d0

0800b364 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	88db      	ldrh	r3, [r3, #6]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d004      	beq.n	800b380 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b376:	6839      	ldr	r1, [r7, #0]
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 f8cc 	bl	800b516 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b37e:	e022      	b.n	800b3c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b386:	2b02      	cmp	r3, #2
 800b388:	dc02      	bgt.n	800b390 <USBD_GetConfig+0x2c>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	dc03      	bgt.n	800b396 <USBD_GetConfig+0x32>
 800b38e:	e015      	b.n	800b3bc <USBD_GetConfig+0x58>
 800b390:	2b03      	cmp	r3, #3
 800b392:	d00b      	beq.n	800b3ac <USBD_GetConfig+0x48>
 800b394:	e012      	b.n	800b3bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 f920 	bl	800b5ea <USBD_CtlSendData>
        break;
 800b3aa:	e00c      	b.n	800b3c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f918 	bl	800b5ea <USBD_CtlSendData>
        break;
 800b3ba:	e004      	b.n	800b3c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f8a9 	bl	800b516 <USBD_CtlError>
        break;
 800b3c4:	bf00      	nop
}
 800b3c6:	bf00      	nop
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d81e      	bhi.n	800b422 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	88db      	ldrh	r3, [r3, #6]
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d004      	beq.n	800b3f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f891 	bl	800b516 <USBD_CtlError>
        break;
 800b3f4:	e01a      	b.n	800b42c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b402:	2b00      	cmp	r3, #0
 800b404:	d005      	beq.n	800b412 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	f043 0202 	orr.w	r2, r3, #2
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	330c      	adds	r3, #12
 800b416:	2202      	movs	r2, #2
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f8e5 	bl	800b5ea <USBD_CtlSendData>
      break;
 800b420:	e004      	b.n	800b42c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f876 	bl	800b516 <USBD_CtlError>
      break;
 800b42a:	bf00      	nop
  }
}
 800b42c:	bf00      	nop
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	885b      	ldrh	r3, [r3, #2]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d106      	bne.n	800b454 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f929 	bl	800b6a6 <USBD_CtlSendStatus>
  }
}
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b46c:	3b01      	subs	r3, #1
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d80b      	bhi.n	800b48a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	885b      	ldrh	r3, [r3, #2]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d10c      	bne.n	800b494 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f90f 	bl	800b6a6 <USBD_CtlSendStatus>
      }
      break;
 800b488:	e004      	b.n	800b494 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 f842 	bl	800b516 <USBD_CtlError>
      break;
 800b492:	e000      	b.n	800b496 <USBD_ClrFeature+0x3a>
      break;
 800b494:	bf00      	nop
  }
}
 800b496:	bf00      	nop
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b083      	sub	sp, #12
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	781a      	ldrb	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	785a      	ldrb	r2, [r3, #1]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	3302      	adds	r3, #2
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	3303      	adds	r3, #3
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	4413      	add	r3, r2
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	3305      	adds	r3, #5
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	021b      	lsls	r3, r3, #8
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	4413      	add	r3, r2
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	3306      	adds	r3, #6
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	3307      	adds	r3, #7
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	021b      	lsls	r3, r3, #8
 800b502:	b29b      	uxth	r3, r3
 800b504:	4413      	add	r3, r2
 800b506:	b29a      	uxth	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	80da      	strh	r2, [r3, #6]

}
 800b50c:	bf00      	nop
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	bc80      	pop	{r7}
 800b514:	4770      	bx	lr

0800b516 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b082      	sub	sp, #8
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b520:	2180      	movs	r1, #128	; 0x80
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fc5a 	bl	800bddc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b528:	2100      	movs	r1, #0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 fc56 	bl	800bddc <USBD_LL_StallEP>
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b086      	sub	sp, #24
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b544:	2300      	movs	r3, #0
 800b546:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d032      	beq.n	800b5b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f000 f834 	bl	800b5bc <USBD_GetLen>
 800b554:	4603      	mov	r3, r0
 800b556:	3301      	adds	r3, #1
 800b558:	b29b      	uxth	r3, r3
 800b55a:	005b      	lsls	r3, r3, #1
 800b55c:	b29a      	uxth	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b562:	7dfb      	ldrb	r3, [r7, #23]
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	75fa      	strb	r2, [r7, #23]
 800b568:	461a      	mov	r2, r3
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	4413      	add	r3, r2
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	7812      	ldrb	r2, [r2, #0]
 800b572:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b574:	7dfb      	ldrb	r3, [r7, #23]
 800b576:	1c5a      	adds	r2, r3, #1
 800b578:	75fa      	strb	r2, [r7, #23]
 800b57a:	461a      	mov	r2, r3
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	4413      	add	r3, r2
 800b580:	2203      	movs	r2, #3
 800b582:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b584:	e012      	b.n	800b5ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	60fa      	str	r2, [r7, #12]
 800b58c:	7dfa      	ldrb	r2, [r7, #23]
 800b58e:	1c51      	adds	r1, r2, #1
 800b590:	75f9      	strb	r1, [r7, #23]
 800b592:	4611      	mov	r1, r2
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	440a      	add	r2, r1
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b59c:	7dfb      	ldrb	r3, [r7, #23]
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	75fa      	strb	r2, [r7, #23]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1e8      	bne.n	800b586 <USBD_GetString+0x4e>
    }
  }
}
 800b5b4:	bf00      	nop
 800b5b6:	3718      	adds	r7, #24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b5c8:	e005      	b.n	800b5d6 <USBD_GetLen+0x1a>
  {
    len++;
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1f5      	bne.n	800b5ca <USBD_GetLen+0xe>
  }

  return len;
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bc80      	pop	{r7}
 800b5e8:	4770      	bx	lr

0800b5ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b084      	sub	sp, #16
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	60b9      	str	r1, [r7, #8]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b600:	88fa      	ldrh	r2, [r7, #6]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b606:	88fa      	ldrh	r2, [r7, #6]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b60c:	88fb      	ldrh	r3, [r7, #6]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	2100      	movs	r1, #0
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 fc6b 	bl	800beee <USBD_LL_Transmit>

  return USBD_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	60f8      	str	r0, [r7, #12]
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	4613      	mov	r3, r2
 800b62e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b630:	88fb      	ldrh	r3, [r7, #6]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	2100      	movs	r1, #0
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 fc59 	bl	800beee <USBD_LL_Transmit>

  return USBD_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	60f8      	str	r0, [r7, #12]
 800b64e:	60b9      	str	r1, [r7, #8]
 800b650:	4613      	mov	r3, r2
 800b652:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2203      	movs	r2, #3
 800b658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b65c:	88fa      	ldrh	r2, [r7, #6]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b664:	88fa      	ldrh	r2, [r7, #6]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b66c:	88fb      	ldrh	r3, [r7, #6]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	2100      	movs	r1, #0
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f000 fc5e 	bl	800bf34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b084      	sub	sp, #16
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	4613      	mov	r3, r2
 800b68e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b690:	88fb      	ldrh	r3, [r7, #6]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	2100      	movs	r1, #0
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 fc4c 	bl	800bf34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b082      	sub	sp, #8
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2204      	movs	r2, #4
 800b6b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fc16 	bl	800beee <USBD_LL_Transmit>

  return USBD_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2205      	movs	r2, #5
 800b6d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6dc:	2300      	movs	r3, #0
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fc26 	bl	800bf34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4912      	ldr	r1, [pc, #72]	; (800b744 <MX_USB_DEVICE_Init+0x50>)
 800b6fc:	4812      	ldr	r0, [pc, #72]	; (800b748 <MX_USB_DEVICE_Init+0x54>)
 800b6fe:	f7fe ff5e 	bl	800a5be <USBD_Init>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b708:	f7f7 f8be 	bl	8002888 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b70c:	490f      	ldr	r1, [pc, #60]	; (800b74c <MX_USB_DEVICE_Init+0x58>)
 800b70e:	480e      	ldr	r0, [pc, #56]	; (800b748 <MX_USB_DEVICE_Init+0x54>)
 800b710:	f7fe ff80 	bl	800a614 <USBD_RegisterClass>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b71a:	f7f7 f8b5 	bl	8002888 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b71e:	490c      	ldr	r1, [pc, #48]	; (800b750 <MX_USB_DEVICE_Init+0x5c>)
 800b720:	4809      	ldr	r0, [pc, #36]	; (800b748 <MX_USB_DEVICE_Init+0x54>)
 800b722:	f7fe feb1 	bl	800a488 <USBD_CDC_RegisterInterface>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b72c:	f7f7 f8ac 	bl	8002888 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b730:	4805      	ldr	r0, [pc, #20]	; (800b748 <MX_USB_DEVICE_Init+0x54>)
 800b732:	f7fe ff88 	bl	800a646 <USBD_Start>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b73c:	f7f7 f8a4 	bl	8002888 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b740:	bf00      	nop
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20000154 	.word	0x20000154
 800b748:	200004d4 	.word	0x200004d4
 800b74c:	20000040 	.word	0x20000040
 800b750:	20000144 	.word	0x20000144

0800b754 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b758:	2200      	movs	r2, #0
 800b75a:	4905      	ldr	r1, [pc, #20]	; (800b770 <CDC_Init_FS+0x1c>)
 800b75c:	4805      	ldr	r0, [pc, #20]	; (800b774 <CDC_Init_FS+0x20>)
 800b75e:	f7fe fea9 	bl	800a4b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b762:	4905      	ldr	r1, [pc, #20]	; (800b778 <CDC_Init_FS+0x24>)
 800b764:	4803      	ldr	r0, [pc, #12]	; (800b774 <CDC_Init_FS+0x20>)
 800b766:	f7fe febe 	bl	800a4e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b76a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20000b80 	.word	0x20000b80
 800b774:	200004d4 	.word	0x200004d4
 800b778:	20000798 	.word	0x20000798

0800b77c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b780:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b782:	4618      	mov	r0, r3
 800b784:	46bd      	mov	sp, r7
 800b786:	bc80      	pop	{r7}
 800b788:	4770      	bx	lr
	...

0800b78c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	6039      	str	r1, [r7, #0]
 800b796:	71fb      	strb	r3, [r7, #7]
 800b798:	4613      	mov	r3, r2
 800b79a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b79c:	79fb      	ldrb	r3, [r7, #7]
 800b79e:	2b23      	cmp	r3, #35	; 0x23
 800b7a0:	d84a      	bhi.n	800b838 <CDC_Control_FS+0xac>
 800b7a2:	a201      	add	r2, pc, #4	; (adr r2, 800b7a8 <CDC_Control_FS+0x1c>)
 800b7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a8:	0800b839 	.word	0x0800b839
 800b7ac:	0800b839 	.word	0x0800b839
 800b7b0:	0800b839 	.word	0x0800b839
 800b7b4:	0800b839 	.word	0x0800b839
 800b7b8:	0800b839 	.word	0x0800b839
 800b7bc:	0800b839 	.word	0x0800b839
 800b7c0:	0800b839 	.word	0x0800b839
 800b7c4:	0800b839 	.word	0x0800b839
 800b7c8:	0800b839 	.word	0x0800b839
 800b7cc:	0800b839 	.word	0x0800b839
 800b7d0:	0800b839 	.word	0x0800b839
 800b7d4:	0800b839 	.word	0x0800b839
 800b7d8:	0800b839 	.word	0x0800b839
 800b7dc:	0800b839 	.word	0x0800b839
 800b7e0:	0800b839 	.word	0x0800b839
 800b7e4:	0800b839 	.word	0x0800b839
 800b7e8:	0800b839 	.word	0x0800b839
 800b7ec:	0800b839 	.word	0x0800b839
 800b7f0:	0800b839 	.word	0x0800b839
 800b7f4:	0800b839 	.word	0x0800b839
 800b7f8:	0800b839 	.word	0x0800b839
 800b7fc:	0800b839 	.word	0x0800b839
 800b800:	0800b839 	.word	0x0800b839
 800b804:	0800b839 	.word	0x0800b839
 800b808:	0800b839 	.word	0x0800b839
 800b80c:	0800b839 	.word	0x0800b839
 800b810:	0800b839 	.word	0x0800b839
 800b814:	0800b839 	.word	0x0800b839
 800b818:	0800b839 	.word	0x0800b839
 800b81c:	0800b839 	.word	0x0800b839
 800b820:	0800b839 	.word	0x0800b839
 800b824:	0800b839 	.word	0x0800b839
 800b828:	0800b839 	.word	0x0800b839
 800b82c:	0800b839 	.word	0x0800b839
 800b830:	0800b839 	.word	0x0800b839
 800b834:	0800b839 	.word	0x0800b839
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b838:	bf00      	nop
  }

  return (USBD_OK);
 800b83a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	bc80      	pop	{r7}
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop

0800b848 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	4808      	ldr	r0, [pc, #32]	; (800b878 <CDC_Receive_FS+0x30>)
 800b856:	f7fe fe46 	bl	800a4e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b85a:	4807      	ldr	r0, [pc, #28]	; (800b878 <CDC_Receive_FS+0x30>)
 800b85c:	f7fe fe85 	bl	800a56a <USBD_CDC_ReceivePacket>
USB_Packet_Received(&Buf[0], Len[0]);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7f6 fb1c 	bl	8001ea4 <USB_Packet_Received>
  return (USBD_OK);
 800b86c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	200004d4 	.word	0x200004d4

0800b87c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b88c:	4b0d      	ldr	r3, [pc, #52]	; (800b8c4 <CDC_Transmit_FS+0x48>)
 800b88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b892:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e00b      	b.n	800b8ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b8a2:	887b      	ldrh	r3, [r7, #2]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	6879      	ldr	r1, [r7, #4]
 800b8a8:	4806      	ldr	r0, [pc, #24]	; (800b8c4 <CDC_Transmit_FS+0x48>)
 800b8aa:	f7fe fe03 	bl	800a4b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b8ae:	4805      	ldr	r0, [pc, #20]	; (800b8c4 <CDC_Transmit_FS+0x48>)
 800b8b0:	f7fe fe2c 	bl	800a50c <USBD_CDC_TransmitPacket>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	200004d4 	.word	0x200004d4

0800b8c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	6039      	str	r1, [r7, #0]
 800b8d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	2212      	movs	r2, #18
 800b8d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b8da:	4b03      	ldr	r3, [pc, #12]	; (800b8e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bc80      	pop	{r7}
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	20000170 	.word	0x20000170

0800b8ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	6039      	str	r1, [r7, #0]
 800b8f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2204      	movs	r2, #4
 800b8fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8fe:	4b03      	ldr	r3, [pc, #12]	; (800b90c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b900:	4618      	mov	r0, r3
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	bc80      	pop	{r7}
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	20000184 	.word	0x20000184

0800b910 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	4603      	mov	r3, r0
 800b918:	6039      	str	r1, [r7, #0]
 800b91a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b91c:	79fb      	ldrb	r3, [r7, #7]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d105      	bne.n	800b92e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	4907      	ldr	r1, [pc, #28]	; (800b944 <USBD_FS_ProductStrDescriptor+0x34>)
 800b926:	4808      	ldr	r0, [pc, #32]	; (800b948 <USBD_FS_ProductStrDescriptor+0x38>)
 800b928:	f7ff fe06 	bl	800b538 <USBD_GetString>
 800b92c:	e004      	b.n	800b938 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	4904      	ldr	r1, [pc, #16]	; (800b944 <USBD_FS_ProductStrDescriptor+0x34>)
 800b932:	4805      	ldr	r0, [pc, #20]	; (800b948 <USBD_FS_ProductStrDescriptor+0x38>)
 800b934:	f7ff fe00 	bl	800b538 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b938:	4b02      	ldr	r3, [pc, #8]	; (800b944 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	20000f68 	.word	0x20000f68
 800b948:	0800c0e4 	.word	0x0800c0e4

0800b94c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	6039      	str	r1, [r7, #0]
 800b956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	4904      	ldr	r1, [pc, #16]	; (800b96c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b95c:	4804      	ldr	r0, [pc, #16]	; (800b970 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b95e:	f7ff fdeb 	bl	800b538 <USBD_GetString>
  return USBD_StrDesc;
 800b962:	4b02      	ldr	r3, [pc, #8]	; (800b96c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	20000f68 	.word	0x20000f68
 800b970:	0800c0f8 	.word	0x0800c0f8

0800b974 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	4603      	mov	r3, r0
 800b97c:	6039      	str	r1, [r7, #0]
 800b97e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	221a      	movs	r2, #26
 800b984:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b986:	f000 f843 	bl	800ba10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b98a:	4b02      	ldr	r3, [pc, #8]	; (800b994 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	20000188 	.word	0x20000188

0800b998 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	6039      	str	r1, [r7, #0]
 800b9a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d105      	bne.n	800b9b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	4907      	ldr	r1, [pc, #28]	; (800b9cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9ae:	4808      	ldr	r0, [pc, #32]	; (800b9d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9b0:	f7ff fdc2 	bl	800b538 <USBD_GetString>
 800b9b4:	e004      	b.n	800b9c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	4904      	ldr	r1, [pc, #16]	; (800b9cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9ba:	4805      	ldr	r0, [pc, #20]	; (800b9d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9bc:	f7ff fdbc 	bl	800b538 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9c0:	4b02      	ldr	r3, [pc, #8]	; (800b9cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	20000f68 	.word	0x20000f68
 800b9d0:	0800c10c 	.word	0x0800c10c

0800b9d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	6039      	str	r1, [r7, #0]
 800b9de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9e0:	79fb      	ldrb	r3, [r7, #7]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d105      	bne.n	800b9f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	4907      	ldr	r1, [pc, #28]	; (800ba08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9ea:	4808      	ldr	r0, [pc, #32]	; (800ba0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9ec:	f7ff fda4 	bl	800b538 <USBD_GetString>
 800b9f0:	e004      	b.n	800b9fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	4904      	ldr	r1, [pc, #16]	; (800ba08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9f6:	4805      	ldr	r0, [pc, #20]	; (800ba0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9f8:	f7ff fd9e 	bl	800b538 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9fc:	4b02      	ldr	r3, [pc, #8]	; (800ba08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20000f68 	.word	0x20000f68
 800ba0c:	0800c118 	.word	0x0800c118

0800ba10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba16:	4b0f      	ldr	r3, [pc, #60]	; (800ba54 <Get_SerialNum+0x44>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba1c:	4b0e      	ldr	r3, [pc, #56]	; (800ba58 <Get_SerialNum+0x48>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba22:	4b0e      	ldr	r3, [pc, #56]	; (800ba5c <Get_SerialNum+0x4c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d009      	beq.n	800ba4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba36:	2208      	movs	r2, #8
 800ba38:	4909      	ldr	r1, [pc, #36]	; (800ba60 <Get_SerialNum+0x50>)
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f000 f814 	bl	800ba68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba40:	2204      	movs	r2, #4
 800ba42:	4908      	ldr	r1, [pc, #32]	; (800ba64 <Get_SerialNum+0x54>)
 800ba44:	68b8      	ldr	r0, [r7, #8]
 800ba46:	f000 f80f 	bl	800ba68 <IntToUnicode>
  }
}
 800ba4a:	bf00      	nop
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	1ffff7e8 	.word	0x1ffff7e8
 800ba58:	1ffff7ec 	.word	0x1ffff7ec
 800ba5c:	1ffff7f0 	.word	0x1ffff7f0
 800ba60:	2000018a 	.word	0x2000018a
 800ba64:	2000019a 	.word	0x2000019a

0800ba68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b087      	sub	sp, #28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	4613      	mov	r3, r2
 800ba74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	75fb      	strb	r3, [r7, #23]
 800ba7e:	e027      	b.n	800bad0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	0f1b      	lsrs	r3, r3, #28
 800ba84:	2b09      	cmp	r3, #9
 800ba86:	d80b      	bhi.n	800baa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	0f1b      	lsrs	r3, r3, #28
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	005b      	lsls	r3, r3, #1
 800ba92:	4619      	mov	r1, r3
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	440b      	add	r3, r1
 800ba98:	3230      	adds	r2, #48	; 0x30
 800ba9a:	b2d2      	uxtb	r2, r2
 800ba9c:	701a      	strb	r2, [r3, #0]
 800ba9e:	e00a      	b.n	800bab6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	0f1b      	lsrs	r3, r3, #28
 800baa4:	b2da      	uxtb	r2, r3
 800baa6:	7dfb      	ldrb	r3, [r7, #23]
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	4619      	mov	r1, r3
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	440b      	add	r3, r1
 800bab0:	3237      	adds	r2, #55	; 0x37
 800bab2:	b2d2      	uxtb	r2, r2
 800bab4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	011b      	lsls	r3, r3, #4
 800baba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800babc:	7dfb      	ldrb	r3, [r7, #23]
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	3301      	adds	r3, #1
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	4413      	add	r3, r2
 800bac6:	2200      	movs	r2, #0
 800bac8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	3301      	adds	r3, #1
 800bace:	75fb      	strb	r3, [r7, #23]
 800bad0:	7dfa      	ldrb	r2, [r7, #23]
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d3d3      	bcc.n	800ba80 <IntToUnicode+0x18>
  }
}
 800bad8:	bf00      	nop
 800bada:	bf00      	nop
 800badc:	371c      	adds	r7, #28
 800bade:	46bd      	mov	sp, r7
 800bae0:	bc80      	pop	{r7}
 800bae2:	4770      	bx	lr

0800bae4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a0d      	ldr	r2, [pc, #52]	; (800bb28 <HAL_PCD_MspInit+0x44>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d113      	bne.n	800bb1e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800baf6:	4b0d      	ldr	r3, [pc, #52]	; (800bb2c <HAL_PCD_MspInit+0x48>)
 800baf8:	69db      	ldr	r3, [r3, #28]
 800bafa:	4a0c      	ldr	r2, [pc, #48]	; (800bb2c <HAL_PCD_MspInit+0x48>)
 800bafc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb00:	61d3      	str	r3, [r2, #28]
 800bb02:	4b0a      	ldr	r3, [pc, #40]	; (800bb2c <HAL_PCD_MspInit+0x48>)
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb0a:	60fb      	str	r3, [r7, #12]
 800bb0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 800bb0e:	2200      	movs	r2, #0
 800bb10:	2103      	movs	r1, #3
 800bb12:	2014      	movs	r0, #20
 800bb14:	f7f7 fe4b 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bb18:	2014      	movs	r0, #20
 800bb1a:	f7f7 fe64 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bb1e:	bf00      	nop
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	40005c00 	.word	0x40005c00
 800bb2c:	40021000 	.word	0x40021000

0800bb30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f7fe fdc5 	bl	800a6d6 <USBD_LL_SetupStage>
}
 800bb4c:	bf00      	nop
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb66:	78fa      	ldrb	r2, [r7, #3]
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	440b      	add	r3, r1
 800bb74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	78fb      	ldrb	r3, [r7, #3]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	f7fe fdf7 	bl	800a770 <USBD_LL_DataOutStage>
}
 800bb82:	bf00      	nop
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b082      	sub	sp, #8
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb9c:	78fa      	ldrb	r2, [r7, #3]
 800bb9e:	6879      	ldr	r1, [r7, #4]
 800bba0:	4613      	mov	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4413      	add	r3, r2
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	440b      	add	r3, r1
 800bbaa:	333c      	adds	r3, #60	; 0x3c
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	78fb      	ldrb	r3, [r7, #3]
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	f7fe fe4e 	bl	800a852 <USBD_LL_DataInStage>
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fe ff5e 	bl	800aa8e <USBD_LL_SOF>
}
 800bbd2:	bf00      	nop
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b084      	sub	sp, #16
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d001      	beq.n	800bbf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bbee:	f7f6 fe4b 	bl	8002888 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbf8:	7bfa      	ldrb	r2, [r7, #15]
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fe ff0e 	bl	800aa1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7fe fec7 	bl	800a99c <USBD_LL_Reset>
}
 800bc0e:	bf00      	nop
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
	...

0800bc18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fe ff08 	bl	800aa3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d005      	beq.n	800bc40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc34:	4b04      	ldr	r3, [pc, #16]	; (800bc48 <HAL_PCD_SuspendCallback+0x30>)
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	4a03      	ldr	r2, [pc, #12]	; (800bc48 <HAL_PCD_SuspendCallback+0x30>)
 800bc3a:	f043 0306 	orr.w	r3, r3, #6
 800bc3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc40:	bf00      	nop
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	e000ed00 	.word	0xe000ed00

0800bc4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe ff02 	bl	800aa64 <USBD_LL_Resume>
}
 800bc60:	bf00      	nop
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bc70:	4a28      	ldr	r2, [pc, #160]	; (800bd14 <USBD_LL_Init+0xac>)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a26      	ldr	r2, [pc, #152]	; (800bd14 <USBD_LL_Init+0xac>)
 800bc7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bc80:	4b24      	ldr	r3, [pc, #144]	; (800bd14 <USBD_LL_Init+0xac>)
 800bc82:	4a25      	ldr	r2, [pc, #148]	; (800bd18 <USBD_LL_Init+0xb0>)
 800bc84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc86:	4b23      	ldr	r3, [pc, #140]	; (800bd14 <USBD_LL_Init+0xac>)
 800bc88:	2208      	movs	r2, #8
 800bc8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc8c:	4b21      	ldr	r3, [pc, #132]	; (800bd14 <USBD_LL_Init+0xac>)
 800bc8e:	2202      	movs	r2, #2
 800bc90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc92:	4b20      	ldr	r3, [pc, #128]	; (800bd14 <USBD_LL_Init+0xac>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc98:	4b1e      	ldr	r3, [pc, #120]	; (800bd14 <USBD_LL_Init+0xac>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <USBD_LL_Init+0xac>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bca4:	481b      	ldr	r0, [pc, #108]	; (800bd14 <USBD_LL_Init+0xac>)
 800bca6:	f7f8 f9d3 	bl	8004050 <HAL_PCD_Init>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bcb0:	f7f6 fdea 	bl	8002888 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcba:	2318      	movs	r3, #24
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	f7f9 fe47 	bl	8005952 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcca:	2358      	movs	r3, #88	; 0x58
 800bccc:	2200      	movs	r2, #0
 800bcce:	2180      	movs	r1, #128	; 0x80
 800bcd0:	f7f9 fe3f 	bl	8005952 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcda:	23c0      	movs	r3, #192	; 0xc0
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2181      	movs	r1, #129	; 0x81
 800bce0:	f7f9 fe37 	bl	8005952 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcea:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	f7f9 fe2e 	bl	8005952 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd00:	2200      	movs	r2, #0
 800bd02:	2182      	movs	r1, #130	; 0x82
 800bd04:	f7f9 fe25 	bl	8005952 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20001168 	.word	0x20001168
 800bd18:	40005c00 	.word	0x40005c00

0800bd1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7f8 fa97 	bl	8004266 <HAL_PCD_Start>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 f94e 	bl	800bfe0 <USBD_Get_USB_Status>
 800bd44:	4603      	mov	r3, r0
 800bd46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	4608      	mov	r0, r1
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	461a      	mov	r2, r3
 800bd60:	4603      	mov	r3, r0
 800bd62:	70fb      	strb	r3, [r7, #3]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70bb      	strb	r3, [r7, #2]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd7a:	78bb      	ldrb	r3, [r7, #2]
 800bd7c:	883a      	ldrh	r2, [r7, #0]
 800bd7e:	78f9      	ldrb	r1, [r7, #3]
 800bd80:	f7f8 fc0f 	bl	80045a2 <HAL_PCD_EP_Open>
 800bd84:	4603      	mov	r3, r0
 800bd86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 f928 	bl	800bfe0 <USBD_Get_USB_Status>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	460b      	mov	r3, r1
 800bda8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdb8:	78fa      	ldrb	r2, [r7, #3]
 800bdba:	4611      	mov	r1, r2
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7f8 fc56 	bl	800466e <HAL_PCD_EP_Close>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 f909 	bl	800bfe0 <USBD_Get_USB_Status>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdf6:	78fa      	ldrb	r2, [r7, #3]
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7f8 fd16 	bl	800482c <HAL_PCD_EP_SetStall>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be04:	7bfb      	ldrb	r3, [r7, #15]
 800be06:	4618      	mov	r0, r3
 800be08:	f000 f8ea 	bl	800bfe0 <USBD_Get_USB_Status>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be10:	7bbb      	ldrb	r3, [r7, #14]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b084      	sub	sp, #16
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	460b      	mov	r3, r1
 800be24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be34:	78fa      	ldrb	r2, [r7, #3]
 800be36:	4611      	mov	r1, r2
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f8 fd57 	bl	80048ec <HAL_PCD_EP_ClrStall>
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	4618      	mov	r0, r3
 800be46:	f000 f8cb 	bl	800bfe0 <USBD_Get_USB_Status>
 800be4a:	4603      	mov	r3, r0
 800be4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	460b      	mov	r3, r1
 800be62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be70:	2b00      	cmp	r3, #0
 800be72:	da0c      	bge.n	800be8e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be7a:	68f9      	ldr	r1, [r7, #12]
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	4613      	mov	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	00db      	lsls	r3, r3, #3
 800be86:	440b      	add	r3, r1
 800be88:	3302      	adds	r3, #2
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	e00b      	b.n	800bea6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be8e:	78fb      	ldrb	r3, [r7, #3]
 800be90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be94:	68f9      	ldr	r1, [r7, #12]
 800be96:	4613      	mov	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4413      	add	r3, r2
 800be9c:	00db      	lsls	r3, r3, #3
 800be9e:	440b      	add	r3, r1
 800bea0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bea4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	bc80      	pop	{r7}
 800beae:	4770      	bx	lr

0800beb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	460b      	mov	r3, r1
 800beba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beca:	78fa      	ldrb	r2, [r7, #3]
 800becc:	4611      	mov	r1, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	f7f8 fb42 	bl	8004558 <HAL_PCD_SetAddress>
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 f880 	bl	800bfe0 <USBD_Get_USB_Status>
 800bee0:	4603      	mov	r3, r0
 800bee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b086      	sub	sp, #24
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	461a      	mov	r2, r3
 800befa:	460b      	mov	r3, r1
 800befc:	72fb      	strb	r3, [r7, #11]
 800befe:	4613      	mov	r3, r2
 800bf00:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf10:	893b      	ldrh	r3, [r7, #8]
 800bf12:	7af9      	ldrb	r1, [r7, #11]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	f7f8 fc46 	bl	80047a6 <HAL_PCD_EP_Transmit>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f000 f85d 	bl	800bfe0 <USBD_Get_USB_Status>
 800bf26:	4603      	mov	r3, r0
 800bf28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf2a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	607a      	str	r2, [r7, #4]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	460b      	mov	r3, r1
 800bf42:	72fb      	strb	r3, [r7, #11]
 800bf44:	4613      	mov	r3, r2
 800bf46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf56:	893b      	ldrh	r3, [r7, #8]
 800bf58:	7af9      	ldrb	r1, [r7, #11]
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	f7f8 fbcf 	bl	80046fe <HAL_PCD_EP_Receive>
 800bf60:	4603      	mov	r3, r0
 800bf62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf64:	7dfb      	ldrb	r3, [r7, #23]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 f83a 	bl	800bfe0 <USBD_Get_USB_Status>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf70:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
 800bf82:	460b      	mov	r3, r1
 800bf84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf8c:	78fa      	ldrb	r2, [r7, #3]
 800bf8e:	4611      	mov	r1, r2
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7f8 fbf1 	bl	8004778 <HAL_PCD_EP_GetRxCount>
 800bf96:	4603      	mov	r3, r0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfa8:	4b02      	ldr	r3, [pc, #8]	; (800bfb4 <USBD_static_malloc+0x14>)
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bc80      	pop	{r7}
 800bfb2:	4770      	bx	lr
 800bfb4:	20001454 	.word	0x20001454

0800bfb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]

}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bc80      	pop	{r7}
 800bfc8:	4770      	bx	lr

0800bfca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfca:	b480      	push	{r7}
 800bfcc:	b083      	sub	sp, #12
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bfd6:	bf00      	nop
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bc80      	pop	{r7}
 800bfde:	4770      	bx	lr

0800bfe0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfee:	79fb      	ldrb	r3, [r7, #7]
 800bff0:	2b03      	cmp	r3, #3
 800bff2:	d817      	bhi.n	800c024 <USBD_Get_USB_Status+0x44>
 800bff4:	a201      	add	r2, pc, #4	; (adr r2, 800bffc <USBD_Get_USB_Status+0x1c>)
 800bff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffa:	bf00      	nop
 800bffc:	0800c00d 	.word	0x0800c00d
 800c000:	0800c013 	.word	0x0800c013
 800c004:	0800c019 	.word	0x0800c019
 800c008:	0800c01f 	.word	0x0800c01f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c00c:	2300      	movs	r3, #0
 800c00e:	73fb      	strb	r3, [r7, #15]
    break;
 800c010:	e00b      	b.n	800c02a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c012:	2302      	movs	r3, #2
 800c014:	73fb      	strb	r3, [r7, #15]
    break;
 800c016:	e008      	b.n	800c02a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c018:	2301      	movs	r3, #1
 800c01a:	73fb      	strb	r3, [r7, #15]
    break;
 800c01c:	e005      	b.n	800c02a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c01e:	2302      	movs	r3, #2
 800c020:	73fb      	strb	r3, [r7, #15]
    break;
 800c022:	e002      	b.n	800c02a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c024:	2302      	movs	r3, #2
 800c026:	73fb      	strb	r3, [r7, #15]
    break;
 800c028:	bf00      	nop
  }
  return usb_status;
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	bc80      	pop	{r7}
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop

0800c038 <__libc_init_array>:
 800c038:	b570      	push	{r4, r5, r6, lr}
 800c03a:	2600      	movs	r6, #0
 800c03c:	4d0c      	ldr	r5, [pc, #48]	; (800c070 <__libc_init_array+0x38>)
 800c03e:	4c0d      	ldr	r4, [pc, #52]	; (800c074 <__libc_init_array+0x3c>)
 800c040:	1b64      	subs	r4, r4, r5
 800c042:	10a4      	asrs	r4, r4, #2
 800c044:	42a6      	cmp	r6, r4
 800c046:	d109      	bne.n	800c05c <__libc_init_array+0x24>
 800c048:	f000 f830 	bl	800c0ac <_init>
 800c04c:	2600      	movs	r6, #0
 800c04e:	4d0a      	ldr	r5, [pc, #40]	; (800c078 <__libc_init_array+0x40>)
 800c050:	4c0a      	ldr	r4, [pc, #40]	; (800c07c <__libc_init_array+0x44>)
 800c052:	1b64      	subs	r4, r4, r5
 800c054:	10a4      	asrs	r4, r4, #2
 800c056:	42a6      	cmp	r6, r4
 800c058:	d105      	bne.n	800c066 <__libc_init_array+0x2e>
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c060:	4798      	blx	r3
 800c062:	3601      	adds	r6, #1
 800c064:	e7ee      	b.n	800c044 <__libc_init_array+0xc>
 800c066:	f855 3b04 	ldr.w	r3, [r5], #4
 800c06a:	4798      	blx	r3
 800c06c:	3601      	adds	r6, #1
 800c06e:	e7f2      	b.n	800c056 <__libc_init_array+0x1e>
 800c070:	0800c140 	.word	0x0800c140
 800c074:	0800c140 	.word	0x0800c140
 800c078:	0800c140 	.word	0x0800c140
 800c07c:	0800c144 	.word	0x0800c144

0800c080 <memcpy>:
 800c080:	440a      	add	r2, r1
 800c082:	4291      	cmp	r1, r2
 800c084:	f100 33ff 	add.w	r3, r0, #4294967295
 800c088:	d100      	bne.n	800c08c <memcpy+0xc>
 800c08a:	4770      	bx	lr
 800c08c:	b510      	push	{r4, lr}
 800c08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c092:	4291      	cmp	r1, r2
 800c094:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c098:	d1f9      	bne.n	800c08e <memcpy+0xe>
 800c09a:	bd10      	pop	{r4, pc}

0800c09c <memset>:
 800c09c:	4603      	mov	r3, r0
 800c09e:	4402      	add	r2, r0
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d100      	bne.n	800c0a6 <memset+0xa>
 800c0a4:	4770      	bx	lr
 800c0a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c0aa:	e7f9      	b.n	800c0a0 <memset+0x4>

0800c0ac <_init>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	bf00      	nop
 800c0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b2:	bc08      	pop	{r3}
 800c0b4:	469e      	mov	lr, r3
 800c0b6:	4770      	bx	lr

0800c0b8 <_fini>:
 800c0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ba:	bf00      	nop
 800c0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0be:	bc08      	pop	{r3}
 800c0c0:	469e      	mov	lr, r3
 800c0c2:	4770      	bx	lr
