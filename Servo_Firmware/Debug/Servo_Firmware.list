
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800c0f0  0800c0f0  0001c0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c16c  0800c16c  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c16c  0800c16c  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c16c  0800c16c  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c16c  0800c16c  0001c16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c170  0800c170  0001c170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800c174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c4  200001a8  0800c318  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800c318  0002166c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b22  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049fb  00000000  00000000  00038cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003d6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003ec58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0ee  00000000  00000000  0003ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d20f  00000000  00000000  0005d05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093671  00000000  00000000  0007a26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d8de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000555c  00000000  00000000  0010d930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c0d8 	.word	0x0800c0d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	0800c0d8 	.word	0x0800c0d8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <Potentiometer_Ready>:
extern uint8_t usb_rq;
extern uint8_t usb_rq_sett_revert_flash;
extern uint8_t usb_rq_stat_motor;
extern uint8_t usb_rq_stat_phold;

void Potentiometer_Ready(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	pid_input = potentiometer_position;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <Potentiometer_Ready+0x80>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <Potentiometer_Ready+0x84>)
 800074a:	6013      	str	r3, [r2, #0]
	if(!pid_running){
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <Potentiometer_Ready+0x88>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d133      	bne.n	80007bc <Potentiometer_Ready+0x7c>
		if(motor_running){
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <Potentiometer_Ready+0x8c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d02f      	beq.n	80007bc <Potentiometer_Ready+0x7c>
			if((potentiometer_position <= potentiometer_min) && (Motor_Get() < 0)){
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <Potentiometer_Ready+0x90>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fdad 	bl	80002c0 <__aeabi_i2f>
 8000766:	4602      	mov	r2, r0
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <Potentiometer_Ready+0x80>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4610      	mov	r0, r2
 8000770:	f7ff ffac 	bl	80006cc <__aeabi_fcmpge>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d008      	beq.n	800078c <Potentiometer_Ready+0x4c>
 800077a:	f000 fb15 	bl	8000da8 <Motor_Get>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	da03      	bge.n	800078c <Potentiometer_Ready+0x4c>
				Motor_Set(0);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 faa7 	bl	8000cd8 <Motor_Set>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 800078a:	e017      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <Potentiometer_Ready+0x94>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd95 	bl	80002c0 <__aeabi_i2f>
 8000796:	4602      	mov	r2, r0
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <Potentiometer_Ready+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f7ff ff8a 	bl	80006b8 <__aeabi_fcmple>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <Potentiometer_Ready+0x6c>
}
 80007aa:	e007      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 80007ac:	f000 fafc 	bl	8000da8 <Motor_Get>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	dd02      	ble.n	80007bc <Potentiometer_Ready+0x7c>
				Motor_Set(0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fa8e 	bl	8000cd8 <Motor_Set>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001f8 	.word	0x200001f8
 80007c4:	200001dc 	.word	0x200001dc
 80007c8:	200001d8 	.word	0x200001d8
 80007cc:	200001c8 	.word	0x200001c8
 80007d0:	200001ec 	.word	0x200001ec
 80007d4:	200001ee 	.word	0x200001ee

080007d8 <PID_Ready>:
void PID_Ready(float output){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff87 	bl	80006f4 <__aeabi_f2iz>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fa74 	bl	8000cd8 <Motor_Set>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <App_Init>:

void App_Init(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	Settings_Read();
 80007fc:	f000 fdd8 	bl	80013b0 <Settings_Read>
	USB_Init();
 8000800:	f001 fb30 	bl	8001e64 <USB_Init>
	Signal_Init();
 8000804:	f001 fad8 	bl	8001db8 <Signal_Init>
	Potentiometer_Init();
 8000808:	f000 fdba 	bl	8001380 <Potentiometer_Init>
	Motor_Init();
 800080c:	f000 fb0a 	bl	8000e24 <Motor_Init>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <App_Loop>:
void App_Loop(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	switch(usb_rq){
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <App_Loop+0xf8>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d002      	beq.n	8000826 <App_Loop+0x12>
 8000820:	2b02      	cmp	r3, #2
 8000822:	d019      	beq.n	8000858 <App_Loop+0x44>
 8000824:	e06e      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_CONF:
			if(usb_rq_sett_revert_flash == USB_SETTINGS_REVERT){
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <App_Loop+0xfc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d105      	bne.n	800083a <App_Loop+0x26>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <App_Loop+0xfc>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
				//Read from flash
				Settings_Read();
 8000834:	f000 fdbc 	bl	80013b0 <Settings_Read>
 8000838:	e008      	b.n	800084c <App_Loop+0x38>
			}else if(usb_rq_sett_revert_flash == USB_SETTINGS_FLASH){
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <App_Loop+0xfc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d104      	bne.n	800084c <App_Loop+0x38>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <App_Loop+0xfc>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
				//Write to flash
				Settings_Write();
 8000848:	f001 f896 	bl	8001978 <Settings_Write>
			}
			USB_Send_Config();
 800084c:	f001 fb9c 	bl	8001f88 <USB_Send_Config>
			usb_rq = USB_RQ_NONE;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <App_Loop+0xf8>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e055      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_STAT:
			if(usb_rq_stat_motor != 0){
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <App_Loop+0x100>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d033      	beq.n	80008c8 <App_Loop+0xb4>
				//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout
				if(usb_rq_stat_motor == 1){//Backward
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <App_Loop+0x100>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d112      	bne.n	800088e <App_Loop+0x7a>
					if(potentiometer_position > potentiometer_min){
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <App_Loop+0x104>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fd27 	bl	80002c0 <__aeabi_i2f>
 8000872:	4602      	mov	r2, r0
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <App_Loop+0x108>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f7ff ff12 	bl	80006a4 <__aeabi_fcmplt>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01a      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(-1000);
 8000886:	4826      	ldr	r0, [pc, #152]	; (8000920 <App_Loop+0x10c>)
 8000888:	f000 fa26 	bl	8000cd8 <Motor_Set>
 800088c:	e016      	b.n	80008bc <App_Loop+0xa8>
					}
				}else if(usb_rq_stat_motor == 2){//Forward
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <App_Loop+0x100>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d112      	bne.n	80008bc <App_Loop+0xa8>
					if(potentiometer_position < potentiometer_max){
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <App_Loop+0x110>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd10 	bl	80002c0 <__aeabi_i2f>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <App_Loop+0x108>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff ff19 	bl	80006e0 <__aeabi_fcmpgt>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d003      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f000 fa0e 	bl	8000cd8 <Motor_Set>
					}
				}
				motor_systick = 0;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <App_Loop+0x114>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
				usb_rq_stat_motor = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <App_Loop+0x100>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
			}
			if(usb_rq_stat_phold == 1){
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <App_Loop+0x118>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d109      	bne.n	80008e4 <App_Loop+0xd0>
				usb_rq_stat_phold = 0;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <App_Loop+0x118>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
				if(!pid_running){//Run pid with signal timeout
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <App_Loop+0x11c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10c      	bne.n	80008f8 <App_Loop+0xe4>
					PID_Start();
 80008de:	f000 fcdb 	bl	8001298 <PID_Start>
 80008e2:	e009      	b.n	80008f8 <App_Loop+0xe4>
				}
			}else if(signal_ignore && pid_running){
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <App_Loop+0x120>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d005      	beq.n	80008f8 <App_Loop+0xe4>
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <App_Loop+0x11c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <App_Loop+0xe4>
				PID_Stop();
 80008f4:	f000 fcf2 	bl	80012dc <PID_Stop>
			}
			USB_Send_Status();
 80008f8:	f001 fd14 	bl	8002324 <USB_Send_Status>
			usb_rq = USB_RQ_NONE;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <App_Loop+0xf8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
		break;
 8000902:	bf00      	nop
	}
	LED_Update();
 8000904:	f000 f988 	bl	8000c18 <LED_Update>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000249 	.word	0x20000249
 8000910:	2000024a 	.word	0x2000024a
 8000914:	2000024b 	.word	0x2000024b
 8000918:	200001ec 	.word	0x200001ec
 800091c:	200001f8 	.word	0x200001f8
 8000920:	fffffc18 	.word	0xfffffc18
 8000924:	200001ee 	.word	0x200001ee
 8000928:	200001c9 	.word	0x200001c9
 800092c:	2000024c 	.word	0x2000024c
 8000930:	200001d8 	.word	0x200001d8
 8000934:	2000023c 	.word	0x2000023c

08000938 <Flash_Read>:
#include "main.h"
#include "flash.h"

void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000948:	e00b      	b.n	8000962 <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	4413      	add	r3, r2
 8000958:	780a      	ldrb	r2, [r1, #0]
 800095a:	701a      	strb	r2, [r3, #0]
		i++;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	d1ef      	bne.n	800094a <Flash_Read+0x12>
	}
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	371c      	adds	r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <Flash_Write>:
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 8000976:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8000994:	f003 f816 	bl	80039c4 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8000998:	f107 0210 	add.w	r2, r7, #16
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 f8f6 	bl	8003b94 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80009c0:	e027      	b.n	8000a12 <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8)|(uint32_t)data[i+3]);
 80009c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	18d0      	adds	r0, r2, r3
 80009c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	061a      	lsls	r2, r3, #24
 80009d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009d4:	3301      	adds	r3, #1
 80009d6:	68f9      	ldr	r1, [r7, #12]
 80009d8:	440b      	add	r3, r1
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	041b      	lsls	r3, r3, #16
 80009de:	431a      	orrs	r2, r3
 80009e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009e2:	3302      	adds	r3, #2
 80009e4:	68f9      	ldr	r1, [r7, #12]
 80009e6:	440b      	add	r3, r1
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	4313      	orrs	r3, r2
 80009ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009f0:	3203      	adds	r2, #3
 80009f2:	68f9      	ldr	r1, [r7, #12]
 80009f4:	440a      	add	r2, r1
 80009f6:	7812      	ldrb	r2, [r2, #0]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	2200      	movs	r2, #0
 80009fc:	4698      	mov	r8, r3
 80009fe:	4691      	mov	r9, r2
 8000a00:	4642      	mov	r2, r8
 8000a02:	464b      	mov	r3, r9
 8000a04:	4601      	mov	r1, r0
 8000a06:	2002      	movs	r0, #2
 8000a08:	f002 ff6c 	bl	80038e4 <HAL_FLASH_Program>
		i+=4;
 8000a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a0e:	3304      	adds	r3, #4
 8000a10:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 8000a12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d1d2      	bne.n	80009c2 <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 8000a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d03f      	beq.n	8000aa2 <Flash_Write+0x12c>
		uint32_t wdata = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 8000a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d114      	bne.n	8000a56 <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8);
 8000a2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	061a      	lsls	r2, r3, #24
 8000a36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a38:	3301      	adds	r3, #1
 8000a3a:	68f9      	ldr	r1, [r7, #12]
 8000a3c:	440b      	add	r3, r1
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	431a      	orrs	r2, r3
 8000a44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a46:	3302      	adds	r3, #2
 8000a48:	68f9      	ldr	r1, [r7, #12]
 8000a4a:	440b      	add	r3, r1
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	4313      	orrs	r3, r2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a54:	e019      	b.n	8000a8a <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 8000a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d10d      	bne.n	8000a78 <Flash_Write+0x102>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16);
 8000a5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	061a      	lsls	r2, r3, #24
 8000a66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a68:	3301      	adds	r3, #1
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	041b      	lsls	r3, r3, #16
 8000a72:	4313      	orrs	r3, r2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a76:	e008      	b.n	8000a8a <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 8000a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d105      	bne.n	8000a8a <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 8000a7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	061b      	lsls	r3, r3, #24
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 8000a8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	18d1      	adds	r1, r2, r3
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	2200      	movs	r2, #0
 8000a94:	461c      	mov	r4, r3
 8000a96:	4615      	mov	r5, r2
 8000a98:	4622      	mov	r2, r4
 8000a9a:	462b      	mov	r3, r5
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f002 ff21 	bl	80038e4 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8000aa2:	f002 ffb5 	bl	8003a10 <HAL_FLASH_Lock>
}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	; 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000ab0 <General_Copy_32_Bit>:
#include "main.h"
#include "general.h"

void General_Copy_32_Bit(uint32_t address_to, uint32_t address_from){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000abe:	e00b      	b.n	8000ad8 <General_Copy_32_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000ac0:	7bfa      	ldrb	r2, [r7, #15]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	7bfa      	ldrb	r2, [r7, #15]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	780a      	ldrb	r2, [r1, #0]
 8000ad0:	701a      	strb	r2, [r3, #0]
		i++;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d1f0      	bne.n	8000ac0 <General_Copy_32_Bit+0x10>
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <General_Copy_16_Bit>:
void General_Copy_16_Bit(uint32_t address_to, uint32_t address_from){
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000af8:	e00b      	b.n	8000b12 <General_Copy_16_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	780a      	ldrb	r2, [r1, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
		i++;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d1f0      	bne.n	8000afa <General_Copy_16_Bit+0x10>
	}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <HAL_ADC_ConvCpltCallback>:
#include "motor.h"
#include "signal.h"
#include "usb.h"
#include "led.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_ADC_ConvCpltCallback+0x20>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 8000b36:	f000 fbe1 	bl	80012fc <Potentiometer_ADC_Interrupt>
    }
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012400 	.word	0x40012400

08000b48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
		PID_Timer_Interrupt();
 8000b5a:	f000 f987 	bl	8000e6c <PID_Timer_Interrupt>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40000400 	.word	0x40000400

08000b6c <Interrupts_SysTick>:

void Interrupts_SysTick(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	Motor_SysTick_Interrupt();
 8000b70:	f000 f890 	bl	8000c94 <Motor_SysTick_Interrupt>
	Signal_SysTick_Interrupt();
 8000b74:	f000 ffe2 	bl	8001b3c <Signal_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 8000b78:	f000 f818 	bl	8000bac <LED_SysTick_Interrupt>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SIGNAL_Pin){
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d102      	bne.n	8000b96 <HAL_GPIO_EXTI_Callback+0x16>
		Signal_Interrupt();
 8000b90:	f001 f814 	bl	8001bbc <Signal_Interrupt>
	}else if(GPIO_Pin == USB_DET_Pin){
		USB_Det_Interrupt();
	}
}
 8000b94:	e005      	b.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x22>
	}else if(GPIO_Pin == USB_DET_Pin){
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9c:	d101      	bne.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x22>
		USB_Det_Interrupt();
 8000b9e:	f001 f947 	bl	8001e30 <USB_Det_Interrupt>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <LED_SysTick_Interrupt>:

uint8_t led_mode = 0;
uint8_t led_position_changed = 0;
uint8_t led_systick = 0;

void LED_SysTick_Interrupt(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	if(led_mode == LED_MODE_POSITION_CHANGE){
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <LED_SysTick_Interrupt+0x30>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d10f      	bne.n	8000bd8 <LED_SysTick_Interrupt+0x2c>
		led_systick++;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bc2:	701a      	strb	r2, [r3, #0]
		if(led_systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b13      	cmp	r3, #19
 8000bca:	d905      	bls.n	8000bd8 <LED_SysTick_Interrupt+0x2c>
			LED_Set(OFF);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 f809 	bl	8000be4 <LED_Set>
			led_systick = 0;
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <LED_SysTick_Interrupt+0x34>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001c4 	.word	0x200001c4
 8000be0:	200001c6 	.word	0x200001c6

08000be4 <LED_Set>:

void LED_Set(uint8_t state){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	if(state == ON){
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d105      	bne.n	8000c00 <LED_Set+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <LED_Set+0x30>)
 8000bfa:	f003 fa0e 	bl	800401a <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 8000bfe:	e004      	b.n	8000c0a <LED_Set+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <LED_Set+0x30>)
 8000c06:	f003 fa08 	bl	800401a <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010800 	.word	0x40010800

08000c18 <LED_Update>:
void LED_Update(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	switch(led_mode){
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <LED_Update+0x6c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d82a      	bhi.n	8000c7a <LED_Update+0x62>
 8000c24:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <LED_Update+0x14>)
 8000c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000c3d 	.word	0x08000c3d
 8000c30:	08000c45 	.word	0x08000c45
 8000c34:	08000c4d 	.word	0x08000c4d
 8000c38:	08000c65 	.word	0x08000c65
		case LED_MODE_OFF:
			LED_Set(OFF);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ffd1 	bl	8000be4 <LED_Set>
		break;
 8000c42:	e01a      	b.n	8000c7a <LED_Update+0x62>
		case LED_MODE_POWER:
			LED_Set(ON);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ffcd 	bl	8000be4 <LED_Set>
		break;
 8000c4a:	e016      	b.n	8000c7a <LED_Update+0x62>
		case LED_MODE_SIGNAL:
			if(pid_running){
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <LED_Update+0x70>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <LED_Update+0x44>
				LED_Set(ON);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff ffc5 	bl	8000be4 <LED_Set>
			}else{
				LED_Set(OFF);
			}
		break;
 8000c5a:	e00e      	b.n	8000c7a <LED_Update+0x62>
				LED_Set(OFF);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ffc1 	bl	8000be4 <LED_Set>
		break;
 8000c62:	e00a      	b.n	8000c7a <LED_Update+0x62>
		case LED_MODE_POSITION_CHANGE:
			if(led_position_changed){
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <LED_Update+0x74>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <LED_Update+0x60>
				led_systick = 0;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <LED_Update+0x78>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
				LED_Set(ON);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff ffb6 	bl	8000be4 <LED_Set>
			}
		break;
 8000c78:	bf00      	nop
	}
	led_position_changed = 0;
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <LED_Update+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200001c4 	.word	0x200001c4
 8000c88:	200001d8 	.word	0x200001d8
 8000c8c:	200001c5 	.word	0x200001c5
 8000c90:	200001c6 	.word	0x200001c6

08000c94 <Motor_SysTick_Interrupt>:
uint8_t motor_invert = MOTOR_NORMAL;
uint16_t motor_max_power = 1000;
uint8_t motor_running = 0;
uint8_t motor_systick = 0;

void Motor_SysTick_Interrupt(){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	if(!pid_running){
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <Motor_SysTick_Interrupt+0x38>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d113      	bne.n	8000cc8 <Motor_SysTick_Interrupt+0x34>
		if(motor_running){
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <Motor_SysTick_Interrupt+0x3c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00f      	beq.n	8000cc8 <Motor_SysTick_Interrupt+0x34>
			motor_systick++;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000cb2:	701a      	strb	r2, [r3, #0]
			if(motor_systick == MOTOR_USB_TEST_TIMEOUT_MS){
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b32      	cmp	r3, #50	; 0x32
 8000cba:	d105      	bne.n	8000cc8 <Motor_SysTick_Interrupt+0x34>
				Motor_Set(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f80b 	bl	8000cd8 <Motor_Set>
				motor_systick = 0;
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <Motor_SysTick_Interrupt+0x40>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200001d8 	.word	0x200001d8
 8000cd0:	200001c8 	.word	0x200001c8
 8000cd4:	200001c9 	.word	0x200001c9

08000cd8 <Motor_Set>:

void Motor_Set(int16_t strength){//-1000 0 1000 Strength
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	if(motor_invert == MOTOR_INVERT){
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <Motor_Set+0xc0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d103      	bne.n	8000cf2 <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	425b      	negs	r3, r3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	80fb      	strh	r3, [r7, #6]
	}

	if(strength == 0){
 8000cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d110      	bne.n	8000d1c <Motor_Set+0x44>
		TIM2 -> CCR1 = 1000;
 8000cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d0c:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 0;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <Motor_Set+0xc4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
		motor_systick = 0;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <Motor_Set+0xc8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
		TIM2 -> CCR2 = 1000;
		motor_running = 1;
	}
}
 8000d1a:	e038      	b.n	8000d8e <Motor_Set+0xb6>
	}else if(strength < 0){
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da18      	bge.n	8000d56 <Motor_Set+0x7e>
		TIM2 -> CCR1 = 1000;
 8000d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000 + (strength / (1000 / motor_max_power));
 8000d2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <Motor_Set+0xcc>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3c:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d44:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <Motor_Set+0xc4>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	e01b      	b.n	8000d8e <Motor_Set+0xb6>
	}else if(strength > 0){
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	dd17      	ble.n	8000d8e <Motor_Set+0xb6>
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
 8000d5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <Motor_Set+0xcc>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	4619      	mov	r1, r3
 8000d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6c:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d86:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <Motor_Set+0xc4>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	200001c7 	.word	0x200001c7
 8000d9c:	200001c8 	.word	0x200001c8
 8000da0:	200001c9 	.word	0x200001c9
 8000da4:	20000000 	.word	0x20000000

08000da8 <Motor_Get>:
int16_t Motor_Get(){
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	if(TIM2 -> CCR1 != 1000){
 8000dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000db6:	d013      	beq.n	8000de0 <Motor_Get+0x38>
		return (1000 - (int16_t)(TIM2 -> CCR1)) * (1000 / motor_max_power);
 8000db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <Motor_Get+0x78>)
 8000dc8:	8812      	ldrh	r2, [r2, #0]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd0:	fb92 f2f1 	sdiv	r2, r2, r1
 8000dd4:	b292      	uxth	r2, r2
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	e01a      	b.n	8000e16 <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dea:	d013      	beq.n	8000e14 <Motor_Get+0x6c>
		return ((int16_t)(TIM2 -> CCR2) - 1000) * (1000 / motor_max_power);
 8000dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <Motor_Get+0x78>)
 8000dfc:	8812      	ldrh	r2, [r2, #0]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e04:	fb92 f2f1 	sdiv	r2, r2, r1
 8000e08:	b292      	uxth	r2, r2
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	e000      	b.n	8000e16 <Motor_Get+0x6e>
	}
	return 0;
 8000e14:	2300      	movs	r3, #0
} 
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000000 	.word	0x20000000

08000e24 <Motor_Init>:
void Motor_Init(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <Motor_Init+0x18>)
 8000e2c:	f005 fcd8 	bl	80067e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e30:	2104      	movs	r1, #4
 8000e32:	4802      	ldr	r0, [pc, #8]	; (8000e3c <Motor_Init+0x18>)
 8000e34:	f005 fcd4 	bl	80067e0 <HAL_TIM_PWM_Start>
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200003c8 	.word	0x200003c8

08000e40 <PID_Timer_Stop>:
float pid_setpoint = 2047;
//Runtime variables
float pid_last_input = 0;
float pid_output_sum = 0;

void PID_Timer_Stop(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <PID_Timer_Stop+0x10>)
 8000e46:	f005 fc45 	bl	80066d4 <HAL_TIM_Base_Stop_IT>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000410 	.word	0x20000410

08000e54 <PID_Timer_Restart>:
void PID_Timer_Restart(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <PID_Timer_Restart+0x14>)
 8000e5a:	f005 fc3b 	bl	80066d4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000e5e:	4802      	ldr	r0, [pc, #8]	; (8000e68 <PID_Timer_Restart+0x14>)
 8000e60:	f005 fbe6 	bl	8006630 <HAL_TIM_Base_Start_IT>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000410 	.word	0x20000410

08000e6c <PID_Timer_Interrupt>:
void PID_Timer_Interrupt(){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	PID_Compute();
 8000e70:	f000 f838 	bl	8000ee4 <PID_Compute>
	PID_Ready(pid_output);
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <PID_Timer_Interrupt+0x1c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fcad 	bl	80007d8 <PID_Ready>
	PID_Timer_Restart();
 8000e7e:	f7ff ffe9 	bl	8000e54 <PID_Timer_Restart>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001e0 	.word	0x200001e0

08000e8c <PID_Get_Sampling_Time>:

uint16_t PID_Get_Sampling_Time(){
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <PID_Get_Sampling_Time+0x1c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <PID_Get_Sampling_Time+0x20>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	095b      	lsrs	r3, r3, #5
 8000e9e:	b29b      	uxth	r3, r3
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	20000410 	.word	0x20000410
 8000eac:	51eb851f 	.word	0x51eb851f

08000eb0 <PID_Set_Sampling_Time>:
void PID_Set_Sampling_Time(uint16_t ms){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	2264      	movs	r2, #100	; 0x64
 8000ebe:	fb03 f202 	mul.w	r2, r3, r2
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <PID_Set_Sampling_Time+0x30>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	2264      	movs	r2, #100	; 0x64
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <PID_Set_Sampling_Time+0x30>)
 8000ed4:	60da      	str	r2, [r3, #12]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	20000410 	.word	0x20000410

08000ee4 <PID_Compute>:
void PID_Compute(){
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
	float input = pid_input;
 8000eea:	4b94      	ldr	r3, [pc, #592]	; (800113c <PID_Compute+0x258>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	60bb      	str	r3, [r7, #8]
	float error = pid_setpoint - input;
 8000ef0:	4b93      	ldr	r3, [pc, #588]	; (8001140 <PID_Compute+0x25c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff f92c 	bl	8000154 <__aeabi_fsub>
 8000efc:	4603      	mov	r3, r0
 8000efe:	607b      	str	r3, [r7, #4]
	float input_d = (input - pid_last_input);
 8000f00:	4b90      	ldr	r3, [pc, #576]	; (8001144 <PID_Compute+0x260>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	68b8      	ldr	r0, [r7, #8]
 8000f08:	f7ff f924 	bl	8000154 <__aeabi_fsub>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	603b      	str	r3, [r7, #0]
	float output = 0;
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]

	if(error >= pid_split_1){
 8000f16:	4b8c      	ldr	r3, [pc, #560]	; (8001148 <PID_Compute+0x264>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff f9d0 	bl	80002c0 <__aeabi_i2f>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4619      	mov	r1, r3
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fbd1 	bl	80006cc <__aeabi_fcmpge>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d074      	beq.n	800101a <PID_Compute+0x136>
		pid_output_sum += pid_ki_1 * error;
 8000f30:	4b86      	ldr	r3, [pc, #536]	; (800114c <PID_Compute+0x268>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fa16 	bl	8000368 <__aeabi_fmul>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b83      	ldr	r3, [pc, #524]	; (8001150 <PID_Compute+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	4610      	mov	r0, r2
 8000f48:	f7ff f906 	bl	8000158 <__addsf3>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b7f      	ldr	r3, [pc, #508]	; (8001150 <PID_Compute+0x26c>)
 8000f52:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8000f54:	4b7f      	ldr	r3, [pc, #508]	; (8001154 <PID_Compute+0x270>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d110      	bne.n	8000f7e <PID_Compute+0x9a>
			pid_output_sum -= pid_kp_1 * input_d;
 8000f5c:	4b7c      	ldr	r3, [pc, #496]	; (8001150 <PID_Compute+0x26c>)
 8000f5e:	681c      	ldr	r4, [r3, #0]
 8000f60:	4b7d      	ldr	r3, [pc, #500]	; (8001158 <PID_Compute+0x274>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff f9fe 	bl	8000368 <__aeabi_fmul>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4620      	mov	r0, r4
 8000f72:	f7ff f8ef 	bl	8000154 <__aeabi_fsub>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b75      	ldr	r3, [pc, #468]	; (8001150 <PID_Compute+0x26c>)
 8000f7c:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 8000f7e:	4b74      	ldr	r3, [pc, #464]	; (8001150 <PID_Compute+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4976      	ldr	r1, [pc, #472]	; (800115c <PID_Compute+0x278>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fbab 	bl	80006e0 <__aeabi_fcmpgt>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <PID_Compute+0xb4>
			pid_output_sum = 1000.0f;
 8000f90:	4b6f      	ldr	r3, [pc, #444]	; (8001150 <PID_Compute+0x26c>)
 8000f92:	4a72      	ldr	r2, [pc, #456]	; (800115c <PID_Compute+0x278>)
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e00b      	b.n	8000fb0 <PID_Compute+0xcc>
		}else if(pid_output_sum < -1000.0f){
 8000f98:	4b6d      	ldr	r3, [pc, #436]	; (8001150 <PID_Compute+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4970      	ldr	r1, [pc, #448]	; (8001160 <PID_Compute+0x27c>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fb80 	bl	80006a4 <__aeabi_fcmplt>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <PID_Compute+0xcc>
			pid_output_sum = -1000.0f;
 8000faa:	4b69      	ldr	r3, [pc, #420]	; (8001150 <PID_Compute+0x26c>)
 8000fac:	4a6c      	ldr	r2, [pc, #432]	; (8001160 <PID_Compute+0x27c>)
 8000fae:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8000fb0:	4b68      	ldr	r3, [pc, #416]	; (8001154 <PID_Compute+0x270>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d107      	bne.n	8000fc8 <PID_Compute+0xe4>
			output = pid_kp_1 * error;
 8000fb8:	4b67      	ldr	r3, [pc, #412]	; (8001158 <PID_Compute+0x274>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff f9d2 	bl	8000368 <__aeabi_fmul>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_1 * input_d;
 8000fc8:	4b61      	ldr	r3, [pc, #388]	; (8001150 <PID_Compute+0x26c>)
 8000fca:	681c      	ldr	r4, [r3, #0]
 8000fcc:	4b65      	ldr	r3, [pc, #404]	; (8001164 <PID_Compute+0x280>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff f9c8 	bl	8000368 <__aeabi_fmul>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f7ff f8b9 	bl	8000154 <__aeabi_fsub>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff f8b6 	bl	8000158 <__addsf3>
 8000fec:	4603      	mov	r3, r0
 8000fee:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8000ff0:	495a      	ldr	r1, [pc, #360]	; (800115c <PID_Compute+0x278>)
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f7ff fb74 	bl	80006e0 <__aeabi_fcmpgt>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <PID_Compute+0x120>
			output = 1000.0f;
 8000ffe:	4b57      	ldr	r3, [pc, #348]	; (800115c <PID_Compute+0x278>)
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e12c      	b.n	800125e <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001004:	4956      	ldr	r1, [pc, #344]	; (8001160 <PID_Compute+0x27c>)
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f7ff fb4c 	bl	80006a4 <__aeabi_fcmplt>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 8125 	beq.w	800125e <PID_Compute+0x37a>
			output = -1000.0f;
 8001014:	4b52      	ldr	r3, [pc, #328]	; (8001160 <PID_Compute+0x27c>)
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e121      	b.n	800125e <PID_Compute+0x37a>
		}
	}else if((error < pid_split_1) && (error >= pid_split_2)){
 800101a:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <PID_Compute+0x264>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f94e 	bl	80002c0 <__aeabi_i2f>
 8001024:	4603      	mov	r3, r0
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fb3b 	bl	80006a4 <__aeabi_fcmplt>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80a1 	beq.w	8001178 <PID_Compute+0x294>
 8001036:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <PID_Compute+0x284>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f940 	bl	80002c0 <__aeabi_i2f>
 8001040:	4603      	mov	r3, r0
 8001042:	4619      	mov	r1, r3
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fb41 	bl	80006cc <__aeabi_fcmpge>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 8093 	beq.w	8001178 <PID_Compute+0x294>
		pid_output_sum += pid_ki_2 * error;
 8001052:	4b46      	ldr	r3, [pc, #280]	; (800116c <PID_Compute+0x288>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f985 	bl	8000368 <__aeabi_fmul>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <PID_Compute+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4619      	mov	r1, r3
 8001068:	4610      	mov	r0, r2
 800106a:	f7ff f875 	bl	8000158 <__addsf3>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b37      	ldr	r3, [pc, #220]	; (8001150 <PID_Compute+0x26c>)
 8001074:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <PID_Compute+0x270>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d110      	bne.n	80010a0 <PID_Compute+0x1bc>
			pid_output_sum -= pid_kp_2 * input_d;
 800107e:	4b34      	ldr	r3, [pc, #208]	; (8001150 <PID_Compute+0x26c>)
 8001080:	681c      	ldr	r4, [r3, #0]
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <PID_Compute+0x28c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f96d 	bl	8000368 <__aeabi_fmul>
 800108e:	4603      	mov	r3, r0
 8001090:	4619      	mov	r1, r3
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff f85e 	bl	8000154 <__aeabi_fsub>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <PID_Compute+0x26c>)
 800109e:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <PID_Compute+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	492d      	ldr	r1, [pc, #180]	; (800115c <PID_Compute+0x278>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fb1a 	bl	80006e0 <__aeabi_fcmpgt>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <PID_Compute+0x1d6>
			pid_output_sum = 1000.0f;
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <PID_Compute+0x26c>)
 80010b4:	4a29      	ldr	r2, [pc, #164]	; (800115c <PID_Compute+0x278>)
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e00b      	b.n	80010d2 <PID_Compute+0x1ee>
		}else if(pid_output_sum < -1000.0f){
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <PID_Compute+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4928      	ldr	r1, [pc, #160]	; (8001160 <PID_Compute+0x27c>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff faef 	bl	80006a4 <__aeabi_fcmplt>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <PID_Compute+0x1ee>
			pid_output_sum = -1000.0f;
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <PID_Compute+0x26c>)
 80010ce:	4a24      	ldr	r2, [pc, #144]	; (8001160 <PID_Compute+0x27c>)
 80010d0:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <PID_Compute+0x270>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d107      	bne.n	80010ea <PID_Compute+0x206>
			output = pid_kp_2 * error;
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <PID_Compute+0x28c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff f941 	bl	8000368 <__aeabi_fmul>
 80010e6:	4603      	mov	r3, r0
 80010e8:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_2 * input_d;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <PID_Compute+0x26c>)
 80010ec:	681c      	ldr	r4, [r3, #0]
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <PID_Compute+0x290>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6839      	ldr	r1, [r7, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f937 	bl	8000368 <__aeabi_fmul>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4619      	mov	r1, r3
 80010fe:	4620      	mov	r0, r4
 8001100:	f7ff f828 	bl	8000154 <__aeabi_fsub>
 8001104:	4603      	mov	r3, r0
 8001106:	4619      	mov	r1, r3
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff f825 	bl	8000158 <__addsf3>
 800110e:	4603      	mov	r3, r0
 8001110:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001112:	4912      	ldr	r1, [pc, #72]	; (800115c <PID_Compute+0x278>)
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff fae3 	bl	80006e0 <__aeabi_fcmpgt>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <PID_Compute+0x242>
			output = 1000.0f;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <PID_Compute+0x278>)
 8001122:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001124:	e09b      	b.n	800125e <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <PID_Compute+0x27c>)
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff fabb 	bl	80006a4 <__aeabi_fcmplt>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d100      	bne.n	8001136 <PID_Compute+0x252>
		if(output > 1000.0f){
 8001134:	e093      	b.n	800125e <PID_Compute+0x37a>
			output = -1000.0f;
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <PID_Compute+0x27c>)
 8001138:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800113a:	e090      	b.n	800125e <PID_Compute+0x37a>
 800113c:	200001dc 	.word	0x200001dc
 8001140:	20000024 	.word	0x20000024
 8001144:	200001e4 	.word	0x200001e4
 8001148:	2000001c 	.word	0x2000001c
 800114c:	200001cc 	.word	0x200001cc
 8001150:	200001e8 	.word	0x200001e8
 8001154:	20000020 	.word	0x20000020
 8001158:	20000004 	.word	0x20000004
 800115c:	447a0000 	.word	0x447a0000
 8001160:	c47a0000 	.word	0xc47a0000
 8001164:	20000008 	.word	0x20000008
 8001168:	2000001e 	.word	0x2000001e
 800116c:	200001d0 	.word	0x200001d0
 8001170:	2000000c 	.word	0x2000000c
 8001174:	20000010 	.word	0x20000010
		}
	}else{
		pid_output_sum += pid_ki_3 * error;
 8001178:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <PID_Compute+0x390>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f8f2 	bl	8000368 <__aeabi_fmul>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <PID_Compute+0x394>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	4610      	mov	r0, r2
 8001190:	f7fe ffe2 	bl	8000158 <__addsf3>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <PID_Compute+0x394>)
 800119a:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 800119c:	4b37      	ldr	r3, [pc, #220]	; (800127c <PID_Compute+0x398>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d110      	bne.n	80011c6 <PID_Compute+0x2e2>
			pid_output_sum -= pid_kp_3 * input_d;
 80011a4:	4b34      	ldr	r3, [pc, #208]	; (8001278 <PID_Compute+0x394>)
 80011a6:	681c      	ldr	r4, [r3, #0]
 80011a8:	4b35      	ldr	r3, [pc, #212]	; (8001280 <PID_Compute+0x39c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f8da 	bl	8000368 <__aeabi_fmul>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4619      	mov	r1, r3
 80011b8:	4620      	mov	r0, r4
 80011ba:	f7fe ffcb 	bl	8000154 <__aeabi_fsub>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <PID_Compute+0x394>)
 80011c4:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80011c6:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <PID_Compute+0x394>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	492e      	ldr	r1, [pc, #184]	; (8001284 <PID_Compute+0x3a0>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fa87 	bl	80006e0 <__aeabi_fcmpgt>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <PID_Compute+0x2fc>
			pid_output_sum = 1000.0f;
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <PID_Compute+0x394>)
 80011da:	4a2a      	ldr	r2, [pc, #168]	; (8001284 <PID_Compute+0x3a0>)
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e00b      	b.n	80011f8 <PID_Compute+0x314>
		}else if(pid_output_sum < -1000.0f){
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <PID_Compute+0x394>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4928      	ldr	r1, [pc, #160]	; (8001288 <PID_Compute+0x3a4>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fa5c 	bl	80006a4 <__aeabi_fcmplt>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <PID_Compute+0x314>
			pid_output_sum = -1000.0f;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <PID_Compute+0x394>)
 80011f4:	4a24      	ldr	r2, [pc, #144]	; (8001288 <PID_Compute+0x3a4>)
 80011f6:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <PID_Compute+0x398>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d107      	bne.n	8001210 <PID_Compute+0x32c>
			output = pid_kp_3 * error;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <PID_Compute+0x39c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff f8ae 	bl	8000368 <__aeabi_fmul>
 800120c:	4603      	mov	r3, r0
 800120e:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_3 * input_d;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <PID_Compute+0x394>)
 8001212:	681c      	ldr	r4, [r3, #0]
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <PID_Compute+0x3a8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f8a4 	bl	8000368 <__aeabi_fmul>
 8001220:	4603      	mov	r3, r0
 8001222:	4619      	mov	r1, r3
 8001224:	4620      	mov	r0, r4
 8001226:	f7fe ff95 	bl	8000154 <__aeabi_fsub>
 800122a:	4603      	mov	r3, r0
 800122c:	4619      	mov	r1, r3
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7fe ff92 	bl	8000158 <__addsf3>
 8001234:	4603      	mov	r3, r0
 8001236:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001238:	4912      	ldr	r1, [pc, #72]	; (8001284 <PID_Compute+0x3a0>)
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff fa50 	bl	80006e0 <__aeabi_fcmpgt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <PID_Compute+0x368>
			output = 1000.0f;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <PID_Compute+0x3a0>)
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	e008      	b.n	800125e <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 800124c:	490e      	ldr	r1, [pc, #56]	; (8001288 <PID_Compute+0x3a4>)
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff fa28 	bl	80006a4 <__aeabi_fcmplt>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <PID_Compute+0x37a>
			output = -1000.0f;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <PID_Compute+0x3a4>)
 800125c:	60fb      	str	r3, [r7, #12]
		}
	}

	pid_output = output;
 800125e:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <PID_Compute+0x3ac>)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6013      	str	r3, [r2, #0]
	pid_last_input = input;
 8001264:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <PID_Compute+0x3b0>)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	6013      	str	r3, [r2, #0]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}
 8001272:	bf00      	nop
 8001274:	200001d4 	.word	0x200001d4
 8001278:	200001e8 	.word	0x200001e8
 800127c:	20000020 	.word	0x20000020
 8001280:	20000014 	.word	0x20000014
 8001284:	447a0000 	.word	0x447a0000
 8001288:	c47a0000 	.word	0xc47a0000
 800128c:	20000018 	.word	0x20000018
 8001290:	200001e0 	.word	0x200001e0
 8001294:	200001e4 	.word	0x200001e4

08001298 <PID_Start>:
void PID_Start(){
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	pid_last_input = pid_input;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <PID_Start+0x30>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <PID_Start+0x34>)
 80012a2:	6013      	str	r3, [r2, #0]
	pid_output_sum = 0;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <PID_Start+0x38>)
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
    PID_Set_Sampling_Time(pid_sampling_time);
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <PID_Start+0x3c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fdfc 	bl	8000eb0 <PID_Set_Sampling_Time>
	PID_Timer_Restart();
 80012b8:	f7ff fdcc 	bl	8000e54 <PID_Timer_Restart>
	pid_running = 1;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <PID_Start+0x40>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001dc 	.word	0x200001dc
 80012cc:	200001e4 	.word	0x200001e4
 80012d0:	200001e8 	.word	0x200001e8
 80012d4:	20000002 	.word	0x20000002
 80012d8:	200001d8 	.word	0x200001d8

080012dc <PID_Stop>:
void PID_Stop(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	PID_Timer_Stop();
 80012e0:	f7ff fdae 	bl	8000e40 <PID_Timer_Stop>
	PID_Ready(0);
 80012e4:	f04f 0000 	mov.w	r0, #0
 80012e8:	f7ff fa76 	bl	80007d8 <PID_Ready>
	pid_running = 0;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <PID_Stop+0x1c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001d8 	.word	0x200001d8

080012fc <Potentiometer_ADC_Interrupt>:
uint32_t potentiometer_adctmp = 0;
uint16_t potentiometer_adccnt = 0;
uint8_t potentiometer_init_cplt = 0;
float potentiometer_position = 0;

void Potentiometer_ADC_Interrupt(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	potentiometer_adctmp += HAL_ADC_GetValue(&hadc1);
 8001300:	4819      	ldr	r0, [pc, #100]	; (8001368 <Potentiometer_ADC_Interrupt+0x6c>)
 8001302:	f001 fe71 	bl	8002fe8 <HAL_ADC_GetValue>
 8001306:	4602      	mov	r2, r0
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <Potentiometer_ADC_Interrupt+0x70>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4413      	add	r3, r2
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <Potentiometer_ADC_Interrupt+0x70>)
 8001310:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop_IT(&hadc1);
 8001312:	4815      	ldr	r0, [pc, #84]	; (8001368 <Potentiometer_ADC_Interrupt+0x6c>)
 8001314:	f001 fe34 	bl	8002f80 <HAL_ADC_Stop_IT>
	potentiometer_adccnt++;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <Potentiometer_ADC_Interrupt+0x74>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <Potentiometer_ADC_Interrupt+0x74>)
 8001322:	801a      	strh	r2, [r3, #0]
	if(potentiometer_adccnt == POTENTIOMETER_SAMPLE_CNT){
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <Potentiometer_ADC_Interrupt+0x74>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	2b64      	cmp	r3, #100	; 0x64
 800132a:	d115      	bne.n	8001358 <Potentiometer_ADC_Interrupt+0x5c>
		potentiometer_position = (float)potentiometer_adctmp/POTENTIOMETER_SAMPLE_CNT;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <Potentiometer_ADC_Interrupt+0x70>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7fe ffc1 	bl	80002b8 <__aeabi_ui2f>
 8001336:	4603      	mov	r3, r0
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <Potentiometer_ADC_Interrupt+0x78>)
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f8c8 	bl	80004d0 <__aeabi_fdiv>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <Potentiometer_ADC_Interrupt+0x7c>)
 8001346:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 8001348:	f7ff f9fa 	bl	8000740 <Potentiometer_Ready>
		potentiometer_adccnt = 0;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <Potentiometer_ADC_Interrupt+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	801a      	strh	r2, [r3, #0]
		potentiometer_adctmp = 0;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <Potentiometer_ADC_Interrupt+0x70>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
	}
	potentiometer_init_cplt = 1;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <Potentiometer_ADC_Interrupt+0x80>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 800135e:	4802      	ldr	r0, [pc, #8]	; (8001368 <Potentiometer_ADC_Interrupt+0x6c>)
 8001360:	f001 fd58 	bl	8002e14 <HAL_ADC_Start_IT>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000390 	.word	0x20000390
 800136c:	200001f0 	.word	0x200001f0
 8001370:	200001f4 	.word	0x200001f4
 8001374:	42c80000 	.word	0x42c80000
 8001378:	200001f8 	.word	0x200001f8
 800137c:	200001f6 	.word	0x200001f6

08001380 <Potentiometer_Init>:

void Potentiometer_Init(){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001384:	bf00      	nop
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <Potentiometer_Init+0x28>)
 8001388:	f002 f89a 	bl	80034c0 <HAL_ADCEx_Calibration_Start>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f9      	bne.n	8001386 <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <Potentiometer_Init+0x28>)
 8001394:	f001 fd3e 	bl	8002e14 <HAL_ADC_Start_IT>
	while(!potentiometer_init_cplt);
 8001398:	bf00      	nop
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <Potentiometer_Init+0x2c>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0fb      	beq.n	800139a <Potentiometer_Init+0x1a>
}
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000390 	.word	0x20000390
 80013ac:	200001f6 	.word	0x200001f6

080013b0 <Settings_Read>:
extern uint16_t pid_split_2;
extern uint8_t pid_sampling_time;

uint8_t settings[SETTINGS_TOTAL_LENGTH];

void Settings_Read(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	//Read
	Flash_Read(&settings[0], SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	49a3      	ldr	r1, [pc, #652]	; (8001648 <Settings_Read+0x298>)
 80013ba:	48a4      	ldr	r0, [pc, #656]	; (800164c <Settings_Read+0x29c>)
 80013bc:	f7ff fabc 	bl	8000938 <Flash_Read>
	//Get CRC
	uint32_t crc = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&crc, (uint32_t)&settings[32]);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4aa2      	ldr	r2, [pc, #648]	; (8001650 <Settings_Read+0x2a0>)
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fb70 	bl	8000ab0 <General_Copy_32_Bit>
	//If CRC is correct
	if(HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1) == crc){
 80013d0:	220f      	movs	r2, #15
 80013d2:	499e      	ldr	r1, [pc, #632]	; (800164c <Settings_Read+0x29c>)
 80013d4:	489f      	ldr	r0, [pc, #636]	; (8001654 <Settings_Read+0x2a4>)
 80013d6:	f002 fa52 	bl	800387e <HAL_CRC_Calculate>
 80013da:	4602      	mov	r2, r0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	f040 8249 	bne.w	8001876 <Settings_Read+0x4c6>
		//Parse
		General_Copy_16_Bit((uint32_t)&potentiometer_min, (uint32_t)&settings[0]);
 80013e4:	4b9c      	ldr	r3, [pc, #624]	; (8001658 <Settings_Read+0x2a8>)
 80013e6:	4a99      	ldr	r2, [pc, #612]	; (800164c <Settings_Read+0x29c>)
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fb7d 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&potentiometer_max, (uint32_t)&settings[2]);
 80013f0:	4b9a      	ldr	r3, [pc, #616]	; (800165c <Settings_Read+0x2ac>)
 80013f2:	4a9b      	ldr	r2, [pc, #620]	; (8001660 <Settings_Read+0x2b0>)
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fb77 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&motor_max_power, (uint32_t)&settings[4]);
 80013fc:	4b99      	ldr	r3, [pc, #612]	; (8001664 <Settings_Read+0x2b4>)
 80013fe:	4a9a      	ldr	r2, [pc, #616]	; (8001668 <Settings_Read+0x2b8>)
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fb71 	bl	8000aea <General_Copy_16_Bit>
		motor_invert = settings[6];
 8001408:	4b90      	ldr	r3, [pc, #576]	; (800164c <Settings_Read+0x29c>)
 800140a:	799a      	ldrb	r2, [r3, #6]
 800140c:	4b97      	ldr	r3, [pc, #604]	; (800166c <Settings_Read+0x2bc>)
 800140e:	701a      	strb	r2, [r3, #0]
		signal_ignore = settings[7];
 8001410:	4b8e      	ldr	r3, [pc, #568]	; (800164c <Settings_Read+0x29c>)
 8001412:	79da      	ldrb	r2, [r3, #7]
 8001414:	4b96      	ldr	r3, [pc, #600]	; (8001670 <Settings_Read+0x2c0>)
 8001416:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&settings[8]);
 8001418:	4b96      	ldr	r3, [pc, #600]	; (8001674 <Settings_Read+0x2c4>)
 800141a:	4a97      	ldr	r2, [pc, #604]	; (8001678 <Settings_Read+0x2c8>)
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fb46 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&settings[12]);
 8001424:	4b95      	ldr	r3, [pc, #596]	; (800167c <Settings_Read+0x2cc>)
 8001426:	4a96      	ldr	r2, [pc, #600]	; (8001680 <Settings_Read+0x2d0>)
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fb40 	bl	8000ab0 <General_Copy_32_Bit>
		led_mode = settings[16];
 8001430:	4b86      	ldr	r3, [pc, #536]	; (800164c <Settings_Read+0x29c>)
 8001432:	7c1a      	ldrb	r2, [r3, #16]
 8001434:	4b93      	ldr	r3, [pc, #588]	; (8001684 <Settings_Read+0x2d4>)
 8001436:	701a      	strb	r2, [r3, #0]
		pid_on = settings[17];
 8001438:	4b84      	ldr	r3, [pc, #528]	; (800164c <Settings_Read+0x29c>)
 800143a:	7c5a      	ldrb	r2, [r3, #17]
 800143c:	4b92      	ldr	r3, [pc, #584]	; (8001688 <Settings_Read+0x2d8>)
 800143e:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&settings[18]);
 8001440:	4b92      	ldr	r3, [pc, #584]	; (800168c <Settings_Read+0x2dc>)
 8001442:	4a93      	ldr	r2, [pc, #588]	; (8001690 <Settings_Read+0x2e0>)
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fb32 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&settings[22]);
 800144c:	4b91      	ldr	r3, [pc, #580]	; (8001694 <Settings_Read+0x2e4>)
 800144e:	4a92      	ldr	r2, [pc, #584]	; (8001698 <Settings_Read+0x2e8>)
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fb2c 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&settings[26]);
 8001458:	4b90      	ldr	r3, [pc, #576]	; (800169c <Settings_Read+0x2ec>)
 800145a:	4a91      	ldr	r2, [pc, #580]	; (80016a0 <Settings_Read+0x2f0>)
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fb26 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&settings[30]);
 8001464:	4b8f      	ldr	r3, [pc, #572]	; (80016a4 <Settings_Read+0x2f4>)
 8001466:	4a90      	ldr	r2, [pc, #576]	; (80016a8 <Settings_Read+0x2f8>)
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fb20 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&settings[34]);
 8001470:	4b8e      	ldr	r3, [pc, #568]	; (80016ac <Settings_Read+0x2fc>)
 8001472:	4a8f      	ldr	r2, [pc, #572]	; (80016b0 <Settings_Read+0x300>)
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb1a 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&settings[38]);
 800147c:	4b8d      	ldr	r3, [pc, #564]	; (80016b4 <Settings_Read+0x304>)
 800147e:	4a8e      	ldr	r2, [pc, #568]	; (80016b8 <Settings_Read+0x308>)
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fb14 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&settings[42]);
 8001488:	4b8c      	ldr	r3, [pc, #560]	; (80016bc <Settings_Read+0x30c>)
 800148a:	4a8d      	ldr	r2, [pc, #564]	; (80016c0 <Settings_Read+0x310>)
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fb0e 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&settings[46]);
 8001494:	4b8b      	ldr	r3, [pc, #556]	; (80016c4 <Settings_Read+0x314>)
 8001496:	4a8c      	ldr	r2, [pc, #560]	; (80016c8 <Settings_Read+0x318>)
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fb08 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&settings[50]);
 80014a0:	4b8a      	ldr	r3, [pc, #552]	; (80016cc <Settings_Read+0x31c>)
 80014a2:	4a8b      	ldr	r2, [pc, #556]	; (80016d0 <Settings_Read+0x320>)
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fb02 	bl	8000ab0 <General_Copy_32_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&settings[54]);
 80014ac:	4b89      	ldr	r3, [pc, #548]	; (80016d4 <Settings_Read+0x324>)
 80014ae:	4a8a      	ldr	r2, [pc, #552]	; (80016d8 <Settings_Read+0x328>)
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fb19 	bl	8000aea <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&settings[56]);
 80014b8:	4b88      	ldr	r3, [pc, #544]	; (80016dc <Settings_Read+0x32c>)
 80014ba:	4a89      	ldr	r2, [pc, #548]	; (80016e0 <Settings_Read+0x330>)
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fb13 	bl	8000aea <General_Copy_16_Bit>
		pid_sampling_time = settings[58];
 80014c4:	4b61      	ldr	r3, [pc, #388]	; (800164c <Settings_Read+0x29c>)
 80014c6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80014ca:	4b86      	ldr	r3, [pc, #536]	; (80016e4 <Settings_Read+0x334>)
 80014cc:	701a      	strb	r2, [r3, #0]

		//Verify
		if((potentiometer_min < SETTINGS_DEF_POTENTIOMETER_MIN_MIN)||(potentiometer_min > SETTINGS_DEF_POTENTIOMETER_MIN_MAX)){
 80014ce:	4b62      	ldr	r3, [pc, #392]	; (8001658 <Settings_Read+0x2a8>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 80014d6:	d302      	bcc.n	80014de <Settings_Read+0x12e>
			potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <Settings_Read+0x2a8>)
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	801a      	strh	r2, [r3, #0]
		}
		if((potentiometer_max < SETTINGS_DEF_POTENTIOMETER_MAX_MIN)||(potentiometer_max > SETTINGS_DEF_POTENTIOMETER_MAX_MAX)){
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <Settings_Read+0x2ac>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	2b7f      	cmp	r3, #127	; 0x7f
 80014e4:	d904      	bls.n	80014f0 <Settings_Read+0x140>
 80014e6:	4b5d      	ldr	r3, [pc, #372]	; (800165c <Settings_Read+0x2ac>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ee:	d303      	bcc.n	80014f8 <Settings_Read+0x148>
			potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 80014f0:	4b5a      	ldr	r3, [pc, #360]	; (800165c <Settings_Read+0x2ac>)
 80014f2:	f640 727f 	movw	r2, #3967	; 0xf7f
 80014f6:	801a      	strh	r2, [r3, #0]
		}
		if((motor_max_power < SETTINGS_DEF_MOTOR_MAX_POWER_MIN)||(motor_max_power > SETTINGS_DEF_MOTOR_MAX_POWER_MAX)){
 80014f8:	4b5a      	ldr	r3, [pc, #360]	; (8001664 <Settings_Read+0x2b4>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001500:	d903      	bls.n	800150a <Settings_Read+0x15a>
			motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001502:	4b58      	ldr	r3, [pc, #352]	; (8001664 <Settings_Read+0x2b4>)
 8001504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001508:	801a      	strh	r2, [r3, #0]
		}
		if((motor_invert != MOTOR_NORMAL) && (motor_invert != MOTOR_INVERT)){
 800150a:	4b58      	ldr	r3, [pc, #352]	; (800166c <Settings_Read+0x2bc>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <Settings_Read+0x170>
 8001512:	4b56      	ldr	r3, [pc, #344]	; (800166c <Settings_Read+0x2bc>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d002      	beq.n	8001520 <Settings_Read+0x170>
			motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 800151a:	4b54      	ldr	r3, [pc, #336]	; (800166c <Settings_Read+0x2bc>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
		}
		if((signal_ignore != GENERAL_TRUE) && (signal_ignore != GENERAL_FALSE)){
 8001520:	4b53      	ldr	r3, [pc, #332]	; (8001670 <Settings_Read+0x2c0>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d006      	beq.n	8001536 <Settings_Read+0x186>
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <Settings_Read+0x2c0>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <Settings_Read+0x186>
			signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 8001530:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <Settings_Read+0x2c0>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
		}
		if((signal_length < SETTINGS_DEF_SIGNAL_LENGTH_MIN)||(signal_length > SETTINGS_DEF_SIGNAL_LENGTH_MAX)){
 8001536:	4b4f      	ldr	r3, [pc, #316]	; (8001674 <Settings_Read+0x2c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f8b0 	bl	80006a4 <__aeabi_fcmplt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d108      	bne.n	800155c <Settings_Read+0x1ac>
 800154a:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <Settings_Read+0x2c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4966      	ldr	r1, [pc, #408]	; (80016e8 <Settings_Read+0x338>)
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f8c5 	bl	80006e0 <__aeabi_fcmpgt>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <Settings_Read+0x1b4>
			signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 800155c:	4b45      	ldr	r3, [pc, #276]	; (8001674 <Settings_Read+0x2c4>)
 800155e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001562:	601a      	str	r2, [r3, #0]
		}
		if((signal_timeout < SETTINGS_DEF_SIGNAL_TIMEOUT_MIN)||(signal_timeout > SETTINGS_DEF_SIGNAL_TIMEOUT_MAX)){
 8001564:	4b45      	ldr	r3, [pc, #276]	; (800167c <Settings_Read+0x2cc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f899 	bl	80006a4 <__aeabi_fcmplt>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d108      	bne.n	800158a <Settings_Read+0x1da>
 8001578:	4b40      	ldr	r3, [pc, #256]	; (800167c <Settings_Read+0x2cc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	495b      	ldr	r1, [pc, #364]	; (80016ec <Settings_Read+0x33c>)
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f8ae 	bl	80006e0 <__aeabi_fcmpgt>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <Settings_Read+0x1e0>
			signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 800158a:	4b3c      	ldr	r3, [pc, #240]	; (800167c <Settings_Read+0x2cc>)
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <Settings_Read+0x340>)
 800158e:	601a      	str	r2, [r3, #0]
		}
		if((led_mode != LED_MODE_OFF) && (led_mode != LED_MODE_POWER) && (led_mode != LED_MODE_SIGNAL) && (led_mode != LED_MODE_POSITION_CHANGE)){
 8001590:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <Settings_Read+0x2d4>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00e      	beq.n	80015b6 <Settings_Read+0x206>
 8001598:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <Settings_Read+0x2d4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d00a      	beq.n	80015b6 <Settings_Read+0x206>
 80015a0:	4b38      	ldr	r3, [pc, #224]	; (8001684 <Settings_Read+0x2d4>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d006      	beq.n	80015b6 <Settings_Read+0x206>
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <Settings_Read+0x2d4>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d002      	beq.n	80015b6 <Settings_Read+0x206>
			led_mode = SETTINGS_DEF_LED_MODE_DEF;
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <Settings_Read+0x2d4>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
		}
		if((pid_on != PID_ON_M) && (pid_on != PID_ON_E)){
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <Settings_Read+0x2d8>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <Settings_Read+0x21c>
 80015be:	4b32      	ldr	r3, [pc, #200]	; (8001688 <Settings_Read+0x2d8>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d002      	beq.n	80015cc <Settings_Read+0x21c>
			pid_on = SETTINGS_DEF_PID_ON_DEF;
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <Settings_Read+0x2d8>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
		}
		if((pid_kp_1 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_1 > SETTINGS_DEF_PID_KP_MAX)){
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <Settings_Read+0x2dc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f04f 0100 	mov.w	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff f865 	bl	80006a4 <__aeabi_fcmplt>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d108      	bne.n	80015f2 <Settings_Read+0x242>
 80015e0:	4b2a      	ldr	r3, [pc, #168]	; (800168c <Settings_Read+0x2dc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4941      	ldr	r1, [pc, #260]	; (80016ec <Settings_Read+0x33c>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff f87a 	bl	80006e0 <__aeabi_fcmpgt>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <Settings_Read+0x24a>
			pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <Settings_Read+0x2dc>)
 80015f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015f8:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_1 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_1 > SETTINGS_DEF_PID_KI_MAX)){
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <Settings_Read+0x2e4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f84e 	bl	80006a4 <__aeabi_fcmplt>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <Settings_Read+0x270>
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <Settings_Read+0x2e4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4936      	ldr	r1, [pc, #216]	; (80016ec <Settings_Read+0x33c>)
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f863 	bl	80006e0 <__aeabi_fcmpgt>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <Settings_Read+0x278>
			pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <Settings_Read+0x2e4>)
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_1 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_1 > SETTINGS_DEF_PID_KD_MAX)){
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <Settings_Read+0x2ec>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f837 	bl	80006a4 <__aeabi_fcmplt>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d160      	bne.n	80016fe <Settings_Read+0x34e>
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <Settings_Read+0x2ec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	492a      	ldr	r1, [pc, #168]	; (80016ec <Settings_Read+0x33c>)
 8001642:	4618      	mov	r0, r3
 8001644:	e056      	b.n	80016f4 <Settings_Read+0x344>
 8001646:	bf00      	nop
 8001648:	0800c000 	.word	0x0800c000
 800164c:	200001fc 	.word	0x200001fc
 8001650:	2000021c 	.word	0x2000021c
 8001654:	200003c0 	.word	0x200003c0
 8001658:	200001ec 	.word	0x200001ec
 800165c:	200001ee 	.word	0x200001ee
 8001660:	200001fe 	.word	0x200001fe
 8001664:	20000000 	.word	0x20000000
 8001668:	20000200 	.word	0x20000200
 800166c:	200001c7 	.word	0x200001c7
 8001670:	2000023c 	.word	0x2000023c
 8001674:	20000240 	.word	0x20000240
 8001678:	20000204 	.word	0x20000204
 800167c:	20000244 	.word	0x20000244
 8001680:	20000208 	.word	0x20000208
 8001684:	200001c4 	.word	0x200001c4
 8001688:	20000020 	.word	0x20000020
 800168c:	20000004 	.word	0x20000004
 8001690:	2000020e 	.word	0x2000020e
 8001694:	200001cc 	.word	0x200001cc
 8001698:	20000212 	.word	0x20000212
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000216 	.word	0x20000216
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	2000021a 	.word	0x2000021a
 80016ac:	200001d0 	.word	0x200001d0
 80016b0:	2000021e 	.word	0x2000021e
 80016b4:	20000010 	.word	0x20000010
 80016b8:	20000222 	.word	0x20000222
 80016bc:	20000014 	.word	0x20000014
 80016c0:	20000226 	.word	0x20000226
 80016c4:	200001d4 	.word	0x200001d4
 80016c8:	2000022a 	.word	0x2000022a
 80016cc:	20000018 	.word	0x20000018
 80016d0:	2000022e 	.word	0x2000022e
 80016d4:	2000001c 	.word	0x2000001c
 80016d8:	20000232 	.word	0x20000232
 80016dc:	2000001e 	.word	0x2000001e
 80016e0:	20000234 	.word	0x20000234
 80016e4:	20000002 	.word	0x20000002
 80016e8:	41200000 	.word	0x41200000
 80016ec:	42c80000 	.word	0x42c80000
 80016f0:	41900000 	.word	0x41900000
 80016f4:	f7fe fff4 	bl	80006e0 <__aeabi_fcmpgt>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <Settings_Read+0x354>
			pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 80016fe:	4b85      	ldr	r3, [pc, #532]	; (8001914 <Settings_Read+0x564>)
 8001700:	4a85      	ldr	r2, [pc, #532]	; (8001918 <Settings_Read+0x568>)
 8001702:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_2 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_2 > SETTINGS_DEF_PID_KP_MAX)){
 8001704:	4b85      	ldr	r3, [pc, #532]	; (800191c <Settings_Read+0x56c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f04f 0100 	mov.w	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ffc9 	bl	80006a4 <__aeabi_fcmplt>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d108      	bne.n	800172a <Settings_Read+0x37a>
 8001718:	4b80      	ldr	r3, [pc, #512]	; (800191c <Settings_Read+0x56c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4980      	ldr	r1, [pc, #512]	; (8001920 <Settings_Read+0x570>)
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ffde 	bl	80006e0 <__aeabi_fcmpgt>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <Settings_Read+0x382>
			pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 800172a:	4b7c      	ldr	r3, [pc, #496]	; (800191c <Settings_Read+0x56c>)
 800172c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001730:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_2 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_2 > SETTINGS_DEF_PID_KI_MAX)){
 8001732:	4b7c      	ldr	r3, [pc, #496]	; (8001924 <Settings_Read+0x574>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ffb2 	bl	80006a4 <__aeabi_fcmplt>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <Settings_Read+0x3a8>
 8001746:	4b77      	ldr	r3, [pc, #476]	; (8001924 <Settings_Read+0x574>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4975      	ldr	r1, [pc, #468]	; (8001920 <Settings_Read+0x570>)
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ffc7 	bl	80006e0 <__aeabi_fcmpgt>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <Settings_Read+0x3b0>
			pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 8001758:	4b72      	ldr	r3, [pc, #456]	; (8001924 <Settings_Read+0x574>)
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_2 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_2 > SETTINGS_DEF_PID_KD_MAX)){
 8001760:	4b71      	ldr	r3, [pc, #452]	; (8001928 <Settings_Read+0x578>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f04f 0100 	mov.w	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe ff9b 	bl	80006a4 <__aeabi_fcmplt>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d108      	bne.n	8001786 <Settings_Read+0x3d6>
 8001774:	4b6c      	ldr	r3, [pc, #432]	; (8001928 <Settings_Read+0x578>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4969      	ldr	r1, [pc, #420]	; (8001920 <Settings_Read+0x570>)
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe ffb0 	bl	80006e0 <__aeabi_fcmpgt>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <Settings_Read+0x3dc>
			pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 8001786:	4b68      	ldr	r3, [pc, #416]	; (8001928 <Settings_Read+0x578>)
 8001788:	4a63      	ldr	r2, [pc, #396]	; (8001918 <Settings_Read+0x568>)
 800178a:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_3 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_3 > SETTINGS_DEF_PID_KP_MAX)){
 800178c:	4b67      	ldr	r3, [pc, #412]	; (800192c <Settings_Read+0x57c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f04f 0100 	mov.w	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe ff85 	bl	80006a4 <__aeabi_fcmplt>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d108      	bne.n	80017b2 <Settings_Read+0x402>
 80017a0:	4b62      	ldr	r3, [pc, #392]	; (800192c <Settings_Read+0x57c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	495e      	ldr	r1, [pc, #376]	; (8001920 <Settings_Read+0x570>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe ff9a 	bl	80006e0 <__aeabi_fcmpgt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <Settings_Read+0x40a>
			pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80017b2:	4b5e      	ldr	r3, [pc, #376]	; (800192c <Settings_Read+0x57c>)
 80017b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017b8:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_3 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_3 > SETTINGS_DEF_PID_KI_MAX)){
 80017ba:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <Settings_Read+0x580>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe ff6e 	bl	80006a4 <__aeabi_fcmplt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d108      	bne.n	80017e0 <Settings_Read+0x430>
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <Settings_Read+0x580>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4953      	ldr	r1, [pc, #332]	; (8001920 <Settings_Read+0x570>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe ff83 	bl	80006e0 <__aeabi_fcmpgt>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <Settings_Read+0x438>
			pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <Settings_Read+0x580>)
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_3 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_3 > SETTINGS_DEF_PID_KD_MAX)){
 80017e8:	4b52      	ldr	r3, [pc, #328]	; (8001934 <Settings_Read+0x584>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 0100 	mov.w	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe ff57 	bl	80006a4 <__aeabi_fcmplt>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d108      	bne.n	800180e <Settings_Read+0x45e>
 80017fc:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <Settings_Read+0x584>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4947      	ldr	r1, [pc, #284]	; (8001920 <Settings_Read+0x570>)
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe ff6c 	bl	80006e0 <__aeabi_fcmpgt>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <Settings_Read+0x464>
			pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 800180e:	4b49      	ldr	r3, [pc, #292]	; (8001934 <Settings_Read+0x584>)
 8001810:	4a41      	ldr	r2, [pc, #260]	; (8001918 <Settings_Read+0x568>)
 8001812:	601a      	str	r2, [r3, #0]
		}
		if((pid_split_1 < SETTINGS_DEF_PID_SPLIT_1_MIN)||(pid_split_1 > SETTINGS_DEF_PID_SPLIT_1_MAX)){
 8001814:	4b48      	ldr	r3, [pc, #288]	; (8001938 <Settings_Read+0x588>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800181c:	d303      	bcc.n	8001826 <Settings_Read+0x476>
			pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 800181e:	4b46      	ldr	r3, [pc, #280]	; (8001938 <Settings_Read+0x588>)
 8001820:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001824:	801a      	strh	r2, [r3, #0]
		}
		if((pid_split_2 < SETTINGS_DEF_PID_SPLIT_2_MIN)||(pid_split_2 > SETTINGS_DEF_PID_SPLIT_2_MAX)){
 8001826:	4b45      	ldr	r3, [pc, #276]	; (800193c <Settings_Read+0x58c>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182e:	d303      	bcc.n	8001838 <Settings_Read+0x488>
			pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 8001830:	4b42      	ldr	r3, [pc, #264]	; (800193c <Settings_Read+0x58c>)
 8001832:	f640 32fc 	movw	r2, #3068	; 0xbfc
 8001836:	801a      	strh	r2, [r3, #0]
		}
		if((pid_sampling_time < SETTINGS_DEF_PID_SAMPLING_TIME_MIN)||(pid_sampling_time > SETTINGS_DEF_PID_SAMPLING_TIME_MAX)){
 8001838:	4b41      	ldr	r3, [pc, #260]	; (8001940 <Settings_Read+0x590>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fd3f 	bl	80002c0 <__aeabi_i2f>
 8001842:	4603      	mov	r3, r0
 8001844:	493f      	ldr	r1, [pc, #252]	; (8001944 <Settings_Read+0x594>)
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe ff2c 	bl	80006a4 <__aeabi_fcmplt>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10d      	bne.n	800186e <Settings_Read+0x4be>
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <Settings_Read+0x590>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fd32 	bl	80002c0 <__aeabi_i2f>
 800185c:	4603      	mov	r3, r0
 800185e:	4930      	ldr	r1, [pc, #192]	; (8001920 <Settings_Read+0x570>)
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe ff3d 	bl	80006e0 <__aeabi_fcmpgt>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d100      	bne.n	800186e <Settings_Read+0x4be>
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
	}
}
 800186c:	e04d      	b.n	800190a <Settings_Read+0x55a>
			pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <Settings_Read+0x590>)
 8001870:	2205      	movs	r2, #5
 8001872:	701a      	strb	r2, [r3, #0]
}
 8001874:	e049      	b.n	800190a <Settings_Read+0x55a>
		potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <Settings_Read+0x598>)
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	801a      	strh	r2, [r3, #0]
		potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 800187c:	4b33      	ldr	r3, [pc, #204]	; (800194c <Settings_Read+0x59c>)
 800187e:	f640 727f 	movw	r2, #3967	; 0xf7f
 8001882:	801a      	strh	r2, [r3, #0]
		motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001884:	4b32      	ldr	r3, [pc, #200]	; (8001950 <Settings_Read+0x5a0>)
 8001886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800188a:	801a      	strh	r2, [r3, #0]
		motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 800188c:	4b31      	ldr	r3, [pc, #196]	; (8001954 <Settings_Read+0x5a4>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
		signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 8001892:	4b31      	ldr	r3, [pc, #196]	; (8001958 <Settings_Read+0x5a8>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
		signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <Settings_Read+0x5ac>)
 800189a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800189e:	601a      	str	r2, [r3, #0]
		signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 80018a0:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <Settings_Read+0x5b0>)
 80018a2:	4a30      	ldr	r2, [pc, #192]	; (8001964 <Settings_Read+0x5b4>)
 80018a4:	601a      	str	r2, [r3, #0]
		led_mode = SETTINGS_DEF_LED_MODE_DEF;
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <Settings_Read+0x5b8>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
		pid_on = SETTINGS_DEF_PID_ON_DEF;
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <Settings_Read+0x5bc>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
		pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <Settings_Read+0x5c0>)
 80018b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018b8:	601a      	str	r2, [r3, #0]
		pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <Settings_Read+0x5c4>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
		pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <Settings_Read+0x564>)
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <Settings_Read+0x568>)
 80018c6:	601a      	str	r2, [r3, #0]
		pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <Settings_Read+0x56c>)
 80018ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018ce:	601a      	str	r2, [r3, #0]
		pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <Settings_Read+0x574>)
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
		pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <Settings_Read+0x578>)
 80018da:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <Settings_Read+0x568>)
 80018dc:	601a      	str	r2, [r3, #0]
		pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <Settings_Read+0x57c>)
 80018e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018e4:	601a      	str	r2, [r3, #0]
		pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <Settings_Read+0x580>)
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <Settings_Read+0x584>)
 80018f0:	4a09      	ldr	r2, [pc, #36]	; (8001918 <Settings_Read+0x568>)
 80018f2:	601a      	str	r2, [r3, #0]
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <Settings_Read+0x588>)
 80018f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018fa:	801a      	strh	r2, [r3, #0]
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <Settings_Read+0x58c>)
 80018fe:	f640 32fc 	movw	r2, #3068	; 0xbfc
 8001902:	801a      	strh	r2, [r3, #0]
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <Settings_Read+0x590>)
 8001906:	2205      	movs	r2, #5
 8001908:	701a      	strb	r2, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000008 	.word	0x20000008
 8001918:	40400000 	.word	0x40400000
 800191c:	2000000c 	.word	0x2000000c
 8001920:	42c80000 	.word	0x42c80000
 8001924:	200001d0 	.word	0x200001d0
 8001928:	20000010 	.word	0x20000010
 800192c:	20000014 	.word	0x20000014
 8001930:	200001d4 	.word	0x200001d4
 8001934:	20000018 	.word	0x20000018
 8001938:	2000001c 	.word	0x2000001c
 800193c:	2000001e 	.word	0x2000001e
 8001940:	20000002 	.word	0x20000002
 8001944:	40a00000 	.word	0x40a00000
 8001948:	200001ec 	.word	0x200001ec
 800194c:	200001ee 	.word	0x200001ee
 8001950:	20000000 	.word	0x20000000
 8001954:	200001c7 	.word	0x200001c7
 8001958:	2000023c 	.word	0x2000023c
 800195c:	20000240 	.word	0x20000240
 8001960:	20000244 	.word	0x20000244
 8001964:	41900000 	.word	0x41900000
 8001968:	200001c4 	.word	0x200001c4
 800196c:	20000020 	.word	0x20000020
 8001970:	20000004 	.word	0x20000004
 8001974:	200001cc 	.word	0x200001cc

08001978 <Settings_Write>:
void Settings_Write(){
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
	General_Copy_16_Bit((uint32_t)&settings[0], (uint32_t)&potentiometer_min);
 800197e:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <Settings_Write+0x124>)
 8001980:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <Settings_Write+0x128>)
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f8b0 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[2], (uint32_t)&potentiometer_max);
 800198a:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <Settings_Write+0x12c>)
 800198c:	4a46      	ldr	r2, [pc, #280]	; (8001aa8 <Settings_Write+0x130>)
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f8aa 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[4], (uint32_t)&motor_max_power);
 8001996:	4b45      	ldr	r3, [pc, #276]	; (8001aac <Settings_Write+0x134>)
 8001998:	4a45      	ldr	r2, [pc, #276]	; (8001ab0 <Settings_Write+0x138>)
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f8a4 	bl	8000aea <General_Copy_16_Bit>
	settings[6] = motor_invert;
 80019a2:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <Settings_Write+0x13c>)
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <Settings_Write+0x124>)
 80019a8:	719a      	strb	r2, [r3, #6]
	settings[7] = signal_ignore;
 80019aa:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <Settings_Write+0x140>)
 80019ac:	781a      	ldrb	r2, [r3, #0]
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <Settings_Write+0x124>)
 80019b0:	71da      	strb	r2, [r3, #7]
	General_Copy_32_Bit((uint32_t)&settings[8], (uint32_t)&signal_length);
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <Settings_Write+0x144>)
 80019b4:	4a42      	ldr	r2, [pc, #264]	; (8001ac0 <Settings_Write+0x148>)
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f879 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[12], (uint32_t)&signal_timeout);
 80019be:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <Settings_Write+0x14c>)
 80019c0:	4a41      	ldr	r2, [pc, #260]	; (8001ac8 <Settings_Write+0x150>)
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f873 	bl	8000ab0 <General_Copy_32_Bit>
	settings[16] = led_mode;
 80019ca:	4b40      	ldr	r3, [pc, #256]	; (8001acc <Settings_Write+0x154>)
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <Settings_Write+0x124>)
 80019d0:	741a      	strb	r2, [r3, #16]
	settings[17] = pid_on;
 80019d2:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <Settings_Write+0x158>)
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <Settings_Write+0x124>)
 80019d8:	745a      	strb	r2, [r3, #17]
	General_Copy_32_Bit((uint32_t)&settings[18], (uint32_t)&pid_kp_1);
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <Settings_Write+0x15c>)
 80019dc:	4a3e      	ldr	r2, [pc, #248]	; (8001ad8 <Settings_Write+0x160>)
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f865 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[22], (uint32_t)&pid_ki_1);
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <Settings_Write+0x164>)
 80019e8:	4a3d      	ldr	r2, [pc, #244]	; (8001ae0 <Settings_Write+0x168>)
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f85f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[26], (uint32_t)&pid_kd_1);
 80019f2:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <Settings_Write+0x16c>)
 80019f4:	4a3c      	ldr	r2, [pc, #240]	; (8001ae8 <Settings_Write+0x170>)
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f859 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[30], (uint32_t)&pid_kp_2);
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <Settings_Write+0x174>)
 8001a00:	4a3b      	ldr	r2, [pc, #236]	; (8001af0 <Settings_Write+0x178>)
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f853 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[34], (uint32_t)&pid_ki_2);
 8001a0a:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <Settings_Write+0x17c>)
 8001a0c:	4a3a      	ldr	r2, [pc, #232]	; (8001af8 <Settings_Write+0x180>)
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f84d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[38], (uint32_t)&pid_kd_2);
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <Settings_Write+0x184>)
 8001a18:	4a39      	ldr	r2, [pc, #228]	; (8001b00 <Settings_Write+0x188>)
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f847 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[42], (uint32_t)&pid_kp_3);
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <Settings_Write+0x18c>)
 8001a24:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <Settings_Write+0x190>)
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f841 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[46], (uint32_t)&pid_ki_3);
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <Settings_Write+0x194>)
 8001a30:	4a37      	ldr	r2, [pc, #220]	; (8001b10 <Settings_Write+0x198>)
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f83b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[50], (uint32_t)&pid_kd_3);
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <Settings_Write+0x19c>)
 8001a3c:	4a36      	ldr	r2, [pc, #216]	; (8001b18 <Settings_Write+0x1a0>)
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f835 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&settings[54], (uint32_t)&pid_split_1);
 8001a46:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <Settings_Write+0x1a4>)
 8001a48:	4a35      	ldr	r2, [pc, #212]	; (8001b20 <Settings_Write+0x1a8>)
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f84c 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[56], (uint32_t)&pid_split_2);
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <Settings_Write+0x1ac>)
 8001a54:	4a34      	ldr	r2, [pc, #208]	; (8001b28 <Settings_Write+0x1b0>)
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f846 	bl	8000aea <General_Copy_16_Bit>
	settings[58] = pid_sampling_time;
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <Settings_Write+0x1b4>)
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <Settings_Write+0x124>)
 8001a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	settings[59] = SETTINGS_CRC_PADDING;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <Settings_Write+0x124>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1);
 8001a70:	220f      	movs	r2, #15
 8001a72:	490a      	ldr	r1, [pc, #40]	; (8001a9c <Settings_Write+0x124>)
 8001a74:	482e      	ldr	r0, [pc, #184]	; (8001b30 <Settings_Write+0x1b8>)
 8001a76:	f001 ff02 	bl	800387e <HAL_CRC_Calculate>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&settings[60], (uint32_t)&crc);
 8001a7e:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <Settings_Write+0x1bc>)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f7ff f813 	bl	8000ab0 <General_Copy_32_Bit>
	Flash_Write(&settings[0], SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	492a      	ldr	r1, [pc, #168]	; (8001b38 <Settings_Write+0x1c0>)
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <Settings_Write+0x124>)
 8001a90:	f7fe ff71 	bl	8000976 <Flash_Write>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200001fc 	.word	0x200001fc
 8001aa0:	200001ec 	.word	0x200001ec
 8001aa4:	200001fe 	.word	0x200001fe
 8001aa8:	200001ee 	.word	0x200001ee
 8001aac:	20000200 	.word	0x20000200
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	200001c7 	.word	0x200001c7
 8001ab8:	2000023c 	.word	0x2000023c
 8001abc:	20000204 	.word	0x20000204
 8001ac0:	20000240 	.word	0x20000240
 8001ac4:	20000208 	.word	0x20000208
 8001ac8:	20000244 	.word	0x20000244
 8001acc:	200001c4 	.word	0x200001c4
 8001ad0:	20000020 	.word	0x20000020
 8001ad4:	2000020e 	.word	0x2000020e
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	20000212 	.word	0x20000212
 8001ae0:	200001cc 	.word	0x200001cc
 8001ae4:	20000216 	.word	0x20000216
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	2000021a 	.word	0x2000021a
 8001af0:	2000000c 	.word	0x2000000c
 8001af4:	2000021e 	.word	0x2000021e
 8001af8:	200001d0 	.word	0x200001d0
 8001afc:	20000222 	.word	0x20000222
 8001b00:	20000010 	.word	0x20000010
 8001b04:	20000226 	.word	0x20000226
 8001b08:	20000014 	.word	0x20000014
 8001b0c:	2000022a 	.word	0x2000022a
 8001b10:	200001d4 	.word	0x200001d4
 8001b14:	2000022e 	.word	0x2000022e
 8001b18:	20000018 	.word	0x20000018
 8001b1c:	20000232 	.word	0x20000232
 8001b20:	2000001c 	.word	0x2000001c
 8001b24:	20000234 	.word	0x20000234
 8001b28:	2000001e 	.word	0x2000001e
 8001b2c:	20000002 	.word	0x20000002
 8001b30:	200003c0 	.word	0x200003c0
 8001b34:	20000238 	.word	0x20000238
 8001b38:	0800c000 	.word	0x0800c000

08001b3c <Signal_SysTick_Interrupt>:
float signal_length;
float signal_timeout;

uint8_t signal_present = 0;

void Signal_SysTick_Interrupt(){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	if(((float)(Signal_Read_Timer() + 1) / 500.0f) > signal_timeout){
 8001b40:	f000 f8f2 	bl	8001d28 <Signal_Read_Timer>
 8001b44:	4603      	mov	r3, r0
 8001b46:	3301      	adds	r3, #1
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fbb5 	bl	80002b8 <__aeabi_ui2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4914      	ldr	r1, [pc, #80]	; (8001ba4 <Signal_SysTick_Interrupt+0x68>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fcbc 	bl	80004d0 <__aeabi_fdiv>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <Signal_SysTick_Interrupt+0x6c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f7fe fdbc 	bl	80006e0 <__aeabi_fcmpgt>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d100      	bne.n	8001b70 <Signal_SysTick_Interrupt+0x34>
		Signal_Timer_Reset();
		if((!signal_ignore || (signal_ignore && (!usb_present))) && pid_running){
			PID_Stop();
		}
	}
}
 8001b6e:	e016      	b.n	8001b9e <Signal_SysTick_Interrupt+0x62>
		signal_present = 0;
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <Signal_SysTick_Interrupt+0x70>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
		Signal_Timer_Reset();
 8001b76:	f000 f8e3 	bl	8001d40 <Signal_Timer_Reset>
		if((!signal_ignore || (signal_ignore && (!usb_present))) && pid_running){
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <Signal_SysTick_Interrupt+0x74>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <Signal_SysTick_Interrupt+0x56>
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <Signal_SysTick_Interrupt+0x74>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <Signal_SysTick_Interrupt+0x62>
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <Signal_SysTick_Interrupt+0x78>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d105      	bne.n	8001b9e <Signal_SysTick_Interrupt+0x62>
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <Signal_SysTick_Interrupt+0x7c>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <Signal_SysTick_Interrupt+0x62>
			PID_Stop();
 8001b9a:	f7ff fb9f 	bl	80012dc <PID_Stop>
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	43fa0000 	.word	0x43fa0000
 8001ba8:	20000244 	.word	0x20000244
 8001bac:	20000248 	.word	0x20000248
 8001bb0:	2000023c 	.word	0x2000023c
 8001bb4:	2000024d 	.word	0x2000024d
 8001bb8:	200001d8 	.word	0x200001d8

08001bbc <Signal_Interrupt>:
void Signal_Interrupt(){
 8001bbc:	b5b0      	push	{r4, r5, r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
	if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001bc2:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <Signal_Interrupt+0x144>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <Signal_Interrupt+0x22>
 8001bca:	4b4d      	ldr	r3, [pc, #308]	; (8001d00 <Signal_Interrupt+0x144>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8091 	beq.w	8001cf6 <Signal_Interrupt+0x13a>
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <Signal_Interrupt+0x148>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f040 808c 	bne.w	8001cf6 <Signal_Interrupt+0x13a>
		if(Signal_Read() == SIGNAL_HIGH){
 8001bde:	f000 f8bb 	bl	8001d58 <Signal_Read>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <Signal_Interrupt+0x38>
			Signal_Timer_Reset();
 8001be8:	f000 f8aa 	bl	8001d40 <Signal_Timer_Reset>
			signal_present = 1;
 8001bec:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <Signal_Interrupt+0x14c>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
					PID_Stop();
				}
			}
		}
	}
}
 8001bf2:	e080      	b.n	8001cf6 <Signal_Interrupt+0x13a>
		}else if(signal_present){
 8001bf4:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <Signal_Interrupt+0x14c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d07c      	beq.n	8001cf6 <Signal_Interrupt+0x13a>
			float received_length_ms  = ((float)Signal_Read_Timer() + 1.0f) / 500.0f;
 8001bfc:	f000 f894 	bl	8001d28 <Signal_Read_Timer>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fb58 	bl	80002b8 <__aeabi_ui2f>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe faa2 	bl	8000158 <__addsf3>
 8001c14:	4603      	mov	r3, r0
 8001c16:	493d      	ldr	r1, [pc, #244]	; (8001d0c <Signal_Interrupt+0x150>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc59 	bl	80004d0 <__aeabi_fdiv>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	607b      	str	r3, [r7, #4]
			if(((float)received_length_ms <= (float)signal_length) && ((float)received_length_ms >= 1.0f)){
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <Signal_Interrupt+0x154>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7fe fd45 	bl	80006b8 <__aeabi_fcmple>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d055      	beq.n	8001ce0 <Signal_Interrupt+0x124>
 8001c34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7fe fd47 	bl	80006cc <__aeabi_fcmpge>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d04d      	beq.n	8001ce0 <Signal_Interrupt+0x124>
				float new_pid_setpoint = (((float)potentiometer_max - (float)potentiometer_min) * ((received_length_ms - 1.0f) / ((float)signal_length - 1.0f))) + (float)potentiometer_min;
 8001c44:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <Signal_Interrupt+0x158>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fb35 	bl	80002b8 <__aeabi_ui2f>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <Signal_Interrupt+0x15c>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fb2f 	bl	80002b8 <__aeabi_ui2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7fe fa78 	bl	8000154 <__aeabi_fsub>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461c      	mov	r4, r3
 8001c68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7fe fa71 	bl	8000154 <__aeabi_fsub>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461d      	mov	r5, r3
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <Signal_Interrupt+0x154>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fa68 	bl	8000154 <__aeabi_fsub>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4619      	mov	r1, r3
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f7fe fc21 	bl	80004d0 <__aeabi_fdiv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4619      	mov	r1, r3
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7fe fb68 	bl	8000368 <__aeabi_fmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <Signal_Interrupt+0x15c>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fb09 	bl	80002b8 <__aeabi_ui2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7fe fa54 	bl	8000158 <__addsf3>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	603b      	str	r3, [r7, #0]
				if(pid_setpoint != new_pid_setpoint){
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <Signal_Interrupt+0x160>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	6838      	ldr	r0, [r7, #0]
 8001cbc:	f7fe fce8 	bl	8000690 <__aeabi_fcmpeq>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <Signal_Interrupt+0x110>
					led_position_changed = 1;
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <Signal_Interrupt+0x164>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
				pid_setpoint = new_pid_setpoint;
 8001ccc:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <Signal_Interrupt+0x160>)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6013      	str	r3, [r2, #0]
				if(!pid_running){
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <Signal_Interrupt+0x168>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10c      	bne.n	8001cf4 <Signal_Interrupt+0x138>
					PID_Start();
 8001cda:	f7ff fadd 	bl	8001298 <PID_Start>
			if(((float)received_length_ms <= (float)signal_length) && ((float)received_length_ms >= 1.0f)){
 8001cde:	e009      	b.n	8001cf4 <Signal_Interrupt+0x138>
				signal_present = 0;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <Signal_Interrupt+0x14c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
				if(pid_running){
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <Signal_Interrupt+0x168>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <Signal_Interrupt+0x13a>
					PID_Stop();
 8001cee:	f7ff faf5 	bl	80012dc <PID_Stop>
}
 8001cf2:	e000      	b.n	8001cf6 <Signal_Interrupt+0x13a>
			if(((float)received_length_ms <= (float)signal_length) && ((float)received_length_ms >= 1.0f)){
 8001cf4:	bf00      	nop
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000023c 	.word	0x2000023c
 8001d04:	2000024d 	.word	0x2000024d
 8001d08:	20000248 	.word	0x20000248
 8001d0c:	43fa0000 	.word	0x43fa0000
 8001d10:	20000240 	.word	0x20000240
 8001d14:	200001ee 	.word	0x200001ee
 8001d18:	200001ec 	.word	0x200001ec
 8001d1c:	20000024 	.word	0x20000024
 8001d20:	200001c5 	.word	0x200001c5
 8001d24:	200001d8 	.word	0x200001d8

08001d28 <Signal_Read_Timer>:

uint32_t Signal_Read_Timer(){
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <Signal_Read_Timer+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000458 	.word	0x20000458

08001d40 <Signal_Timer_Reset>:
void Signal_Timer_Reset(){
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <Signal_Timer_Reset+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000458 	.word	0x20000458

08001d58 <Signal_Read>:
uint8_t Signal_Read(){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001d66:	e01d      	b.n	8001da4 <Signal_Read+0x4c>
		i = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	4811      	ldr	r0, [pc, #68]	; (8001db4 <Signal_Read+0x5c>)
 8001d70:	f002 f93c 	bl	8003fec <HAL_GPIO_ReadPin>
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001d78:	e011      	b.n	8001d9e <Signal_Read+0x46>
			i++;
 8001d7a:	797b      	ldrb	r3, [r7, #5]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 8001d80:	2102      	movs	r1, #2
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <Signal_Read+0x5c>)
 8001d84:	f002 f932 	bl	8003fec <HAL_GPIO_ReadPin>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d000      	beq.n	8001d94 <Signal_Read+0x3c>
				break;
 8001d92:	e007      	b.n	8001da4 <Signal_Read+0x4c>
			}
			if(i == SIGNAL_DEBOUNCE_SAMPLES){
 8001d94:	797b      	ldrb	r3, [r7, #5]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d101      	bne.n	8001d9e <Signal_Read+0x46>
				d = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	71bb      	strb	r3, [r7, #6]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001d9e:	797b      	ldrb	r3, [r7, #5]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d1ea      	bne.n	8001d7a <Signal_Read+0x22>
	while(d != 1){
 8001da4:	79bb      	ldrb	r3, [r7, #6]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d1de      	bne.n	8001d68 <Signal_Read+0x10>
			}
		}
	}
	return level;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40010c00 	.word	0x40010c00

08001db8 <Signal_Init>:

void Signal_Init(){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <Signal_Init+0x10>)
 8001dbe:	f004 fbed 	bl	800659c <HAL_TIM_Base_Start>
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000458 	.word	0x20000458

08001dcc <USB_Det_Read>:

uint8_t usb_present = 0;
uint8_t usb_tx_buffer[64];
uint8_t usb_long_buffer[256];

uint8_t USB_Det_Read(){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001dda:	e01f      	b.n	8001e1c <USB_Det_Read+0x50>
		i = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8001de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de4:	4811      	ldr	r0, [pc, #68]	; (8001e2c <USB_Det_Read+0x60>)
 8001de6:	f002 f901 	bl	8003fec <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001dee:	e012      	b.n	8001e16 <USB_Det_Read+0x4a>
			i++;
 8001df0:	797b      	ldrb	r3, [r7, #5]
 8001df2:	3301      	adds	r3, #1
 8001df4:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 8001df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dfa:	480c      	ldr	r0, [pc, #48]	; (8001e2c <USB_Det_Read+0x60>)
 8001dfc:	f002 f8f6 	bl	8003fec <HAL_GPIO_ReadPin>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d000      	beq.n	8001e0c <USB_Det_Read+0x40>
				break;
 8001e0a:	e007      	b.n	8001e1c <USB_Det_Read+0x50>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 8001e0c:	797b      	ldrb	r3, [r7, #5]
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d101      	bne.n	8001e16 <USB_Det_Read+0x4a>
				d = 1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001e16:	797b      	ldrb	r3, [r7, #5]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d1e9      	bne.n	8001df0 <USB_Det_Read+0x24>
	while(d != 1){
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d1dc      	bne.n	8001ddc <USB_Det_Read+0x10>
			}
		}
	}
	return level;
 8001e22:	79fb      	ldrb	r3, [r7, #7]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40010c00 	.word	0x40010c00

08001e30 <USB_Det_Interrupt>:
void USB_Det_Interrupt(){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e34:	f7ff ffca 	bl	8001dcc <USB_Det_Read>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d103      	bne.n	8001e46 <USB_Det_Interrupt+0x16>
		usb_present = 1;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <USB_Det_Interrupt+0x2c>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e002      	b.n	8001e4c <USB_Det_Interrupt+0x1c>
	}else{
		usb_present = 0;
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <USB_Det_Interrupt+0x2c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
	}
	if(pid_running){
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <USB_Det_Interrupt+0x30>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <USB_Det_Interrupt+0x28>
		PID_Stop();
 8001e54:	f7ff fa42 	bl	80012dc <PID_Stop>
	}
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000024d 	.word	0x2000024d
 8001e60:	200001d8 	.word	0x200001d8

08001e64 <USB_Init>:
void USB_Init(){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e68:	f7ff ffb0 	bl	8001dcc <USB_Det_Read>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d103      	bne.n	8001e7a <USB_Init+0x16>
		usb_present = 1;
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <USB_Init+0x20>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
	}else{
		usb_present = 0;
	}
}
 8001e78:	e002      	b.n	8001e80 <USB_Init+0x1c>
		usb_present = 0;
 8001e7a:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <USB_Init+0x20>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000024d 	.word	0x2000024d

08001e88 <USB_Packet_Received>:
void USB_Packet_Received(uint8_t *data, uint32_t length){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	if((data[1] == USB_CMD_CONFIG) && (uint32_t)data[0] == length){
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3301      	adds	r3, #1
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d11c      	bne.n	8001ed6 <USB_Packet_Received+0x4e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d116      	bne.n	8001ed6 <USB_Packet_Received+0x4e>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3b01      	subs	r3, #1
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4829      	ldr	r0, [pc, #164]	; (8001f58 <USB_Packet_Received+0xd0>)
 8001eb4:	f001 fce3 	bl	800387e <HAL_CRC_Calculate>
 8001eb8:	4601      	mov	r1, r0
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	3b04      	subs	r3, #4
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4299      	cmp	r1, r3
 8001ec6:	d143      	bne.n	8001f50 <USB_Packet_Received+0xc8>
			USB_Parse_Config(data);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f84d 	bl	8001f68 <USB_Parse_Config>
			usb_rq = USB_RQ_CONF;
 8001ece:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <USB_Packet_Received+0xd4>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001ed4:	e03c      	b.n	8001f50 <USB_Packet_Received+0xc8>
		}
	}else if((data[1] == USB_CMD_STATUS) && (length == 64)){
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d108      	bne.n	8001ef2 <USB_Packet_Received+0x6a>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b40      	cmp	r3, #64	; 0x40
 8001ee4:	d105      	bne.n	8001ef2 <USB_Packet_Received+0x6a>
		memcpy(usb_long_buffer, data, 64);
 8001ee6:	2240      	movs	r2, #64	; 0x40
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	481d      	ldr	r0, [pc, #116]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001eec:	f00a f8de 	bl	800c0ac <memcpy>
 8001ef0:	e02e      	b.n	8001f50 <USB_Packet_Received+0xc8>
	}
	else if((usb_long_buffer[1] == USB_CMD_STATUS) && (usb_long_buffer[0] == (length + 64))){
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001ef4:	785b      	ldrb	r3, [r3, #1]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d126      	bne.n	8001f48 <USB_Packet_Received+0xc0>
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	3340      	adds	r3, #64	; 0x40
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d11f      	bne.n	8001f48 <USB_Packet_Received+0xc0>
		memcpy(&usb_long_buffer[64], data, length);
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4815      	ldr	r0, [pc, #84]	; (8001f64 <USB_Packet_Received+0xdc>)
 8001f0e:	f00a f8cd 	bl	800c0ac <memcpy>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)usb_long_buffer, ((length + 64) / 4) - 1) == *(uint32_t *)&usb_long_buffer[length + 64- 4]){
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	3340      	adds	r3, #64	; 0x40
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4910      	ldr	r1, [pc, #64]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001f1e:	480e      	ldr	r0, [pc, #56]	; (8001f58 <USB_Packet_Received+0xd0>)
 8001f20:	f001 fcad 	bl	800387e <HAL_CRC_Calculate>
 8001f24:	4602      	mov	r2, r0
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	333c      	adds	r3, #60	; 0x3c
 8001f2a:	490d      	ldr	r1, [pc, #52]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001f2c:	440b      	add	r3, r1
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d105      	bne.n	8001f40 <USB_Packet_Received+0xb8>
			USB_Parse_Status(usb_long_buffer);
 8001f34:	480a      	ldr	r0, [pc, #40]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001f36:	f000 f8ff 	bl	8002138 <USB_Parse_Status>
			usb_rq = USB_RQ_STAT;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <USB_Packet_Received+0xd4>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	701a      	strb	r2, [r3, #0]
		}
		usb_long_buffer[1] = 0xff;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001f42:	22ff      	movs	r2, #255	; 0xff
 8001f44:	705a      	strb	r2, [r3, #1]
 8001f46:	e003      	b.n	8001f50 <USB_Packet_Received+0xc8>
	}else{
		usb_long_buffer[1] = 0xff;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <USB_Packet_Received+0xd8>)
 8001f4a:	22ff      	movs	r2, #255	; 0xff
 8001f4c:	705a      	strb	r2, [r3, #1]
	}
}
 8001f4e:	bf00      	nop
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200003c0 	.word	0x200003c0
 8001f5c:	20000249 	.word	0x20000249
 8001f60:	20000290 	.word	0x20000290
 8001f64:	200002d0 	.word	0x200002d0

08001f68 <USB_Parse_Config>:
void USB_Parse_Config(uint8_t *data){
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	usb_rq_sett_revert_flash = data[2];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	789a      	ldrb	r2, [r3, #2]
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <USB_Parse_Config+0x1c>)
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2000024a 	.word	0x2000024a

08001f88 <USB_Send_Config>:
void USB_Send_Config(){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_CONFIG_LENGTH;
 8001f8e:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <USB_Send_Config+0x128>)
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_CONFIG;
 8001f94:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <USB_Send_Config+0x128>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	705a      	strb	r2, [r3, #1]
	*(uint16_t *)&usb_tx_buffer[2] = potentiometer_min;
 8001f9a:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <USB_Send_Config+0x12c>)
 8001f9c:	4a46      	ldr	r2, [pc, #280]	; (80020b8 <USB_Send_Config+0x130>)
 8001f9e:	8812      	ldrh	r2, [r2, #0]
 8001fa0:	801a      	strh	r2, [r3, #0]
	*(uint16_t *)&usb_tx_buffer[4] = potentiometer_max;
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <USB_Send_Config+0x134>)
 8001fa4:	4a46      	ldr	r2, [pc, #280]	; (80020c0 <USB_Send_Config+0x138>)
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	801a      	strh	r2, [r3, #0]
	usb_tx_buffer[6] = (uint8_t)((uint16_t)motor_max_power / 10);
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <USB_Send_Config+0x13c>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	4a46      	ldr	r2, [pc, #280]	; (80020c8 <USB_Send_Config+0x140>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <USB_Send_Config+0x128>)
 8001fbc:	719a      	strb	r2, [r3, #6]
	usb_tx_buffer[7] = motor_invert;
 8001fbe:	4b43      	ldr	r3, [pc, #268]	; (80020cc <USB_Send_Config+0x144>)
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <USB_Send_Config+0x128>)
 8001fc4:	71da      	strb	r2, [r3, #7]
	usb_tx_buffer[8] = signal_ignore;
 8001fc6:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <USB_Send_Config+0x148>)
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <USB_Send_Config+0x128>)
 8001fcc:	721a      	strb	r2, [r3, #8]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[9], (uint32_t)&signal_length);
 8001fce:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <USB_Send_Config+0x14c>)
 8001fd0:	4a41      	ldr	r2, [pc, #260]	; (80020d8 <USB_Send_Config+0x150>)
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fd6b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[13], (uint32_t)&signal_timeout);
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <USB_Send_Config+0x154>)
 8001fdc:	4a40      	ldr	r2, [pc, #256]	; (80020e0 <USB_Send_Config+0x158>)
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fd65 	bl	8000ab0 <General_Copy_32_Bit>
	usb_tx_buffer[17] = led_mode;
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <USB_Send_Config+0x15c>)
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <USB_Send_Config+0x128>)
 8001fec:	745a      	strb	r2, [r3, #17]
	usb_tx_buffer[18] = pid_on;
 8001fee:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <USB_Send_Config+0x160>)
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <USB_Send_Config+0x128>)
 8001ff4:	749a      	strb	r2, [r3, #18]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[19], (uint32_t)&pid_kp_1);
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <USB_Send_Config+0x164>)
 8001ff8:	4a3d      	ldr	r2, [pc, #244]	; (80020f0 <USB_Send_Config+0x168>)
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fd57 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[23], (uint32_t)&pid_ki_1);
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <USB_Send_Config+0x16c>)
 8002004:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <USB_Send_Config+0x170>)
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fd51 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[27], (uint32_t)&pid_kd_1);
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <USB_Send_Config+0x174>)
 8002010:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <USB_Send_Config+0x178>)
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fd4b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[31], (uint32_t)&pid_kp_1);
 800201a:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <USB_Send_Config+0x17c>)
 800201c:	4a34      	ldr	r2, [pc, #208]	; (80020f0 <USB_Send_Config+0x168>)
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fd45 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[35], (uint32_t)&pid_ki_1);
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <USB_Send_Config+0x180>)
 8002028:	4a33      	ldr	r2, [pc, #204]	; (80020f8 <USB_Send_Config+0x170>)
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fd3f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[39], (uint32_t)&pid_kd_1);
 8002032:	4b36      	ldr	r3, [pc, #216]	; (800210c <USB_Send_Config+0x184>)
 8002034:	4a32      	ldr	r2, [pc, #200]	; (8002100 <USB_Send_Config+0x178>)
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fd39 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[43], (uint32_t)&pid_kp_1);
 800203e:	4b34      	ldr	r3, [pc, #208]	; (8002110 <USB_Send_Config+0x188>)
 8002040:	4a2b      	ldr	r2, [pc, #172]	; (80020f0 <USB_Send_Config+0x168>)
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fd33 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[47], (uint32_t)&pid_ki_1);
 800204a:	4b32      	ldr	r3, [pc, #200]	; (8002114 <USB_Send_Config+0x18c>)
 800204c:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <USB_Send_Config+0x170>)
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fd2d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[51], (uint32_t)&pid_kd_1);
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <USB_Send_Config+0x190>)
 8002058:	4a29      	ldr	r2, [pc, #164]	; (8002100 <USB_Send_Config+0x178>)
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fd27 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[55], (uint32_t)&pid_split_1);
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <USB_Send_Config+0x194>)
 8002064:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <USB_Send_Config+0x198>)
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fd3e 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[57], (uint32_t)&pid_split_2);
 800206e:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <USB_Send_Config+0x19c>)
 8002070:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <USB_Send_Config+0x1a0>)
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fd38 	bl	8000aea <General_Copy_16_Bit>
	usb_tx_buffer[59] = pid_sampling_time;
 800207a:	4b2c      	ldr	r3, [pc, #176]	; (800212c <USB_Send_Config+0x1a4>)
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <USB_Send_Config+0x128>)
 8002080:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_CONFIG_LENGTH / 4) - 1);
 8002084:	220f      	movs	r2, #15
 8002086:	490a      	ldr	r1, [pc, #40]	; (80020b0 <USB_Send_Config+0x128>)
 8002088:	4829      	ldr	r0, [pc, #164]	; (8002130 <USB_Send_Config+0x1a8>)
 800208a:	f001 fbf8 	bl	800387e <HAL_CRC_Calculate>
 800208e:	4603      	mov	r3, r0
 8002090:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[60], (uint32_t)&crc);
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <USB_Send_Config+0x1ac>)
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4610      	mov	r0, r2
 800209a:	f7fe fd09 	bl	8000ab0 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_CONFIG_LENGTH);
 800209e:	2140      	movs	r1, #64	; 0x40
 80020a0:	4803      	ldr	r0, [pc, #12]	; (80020b0 <USB_Send_Config+0x128>)
 80020a2:	f009 fc01 	bl	800b8a8 <CDC_Transmit_FS>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000250 	.word	0x20000250
 80020b4:	20000252 	.word	0x20000252
 80020b8:	200001ec 	.word	0x200001ec
 80020bc:	20000254 	.word	0x20000254
 80020c0:	200001ee 	.word	0x200001ee
 80020c4:	20000000 	.word	0x20000000
 80020c8:	cccccccd 	.word	0xcccccccd
 80020cc:	200001c7 	.word	0x200001c7
 80020d0:	2000023c 	.word	0x2000023c
 80020d4:	20000259 	.word	0x20000259
 80020d8:	20000240 	.word	0x20000240
 80020dc:	2000025d 	.word	0x2000025d
 80020e0:	20000244 	.word	0x20000244
 80020e4:	200001c4 	.word	0x200001c4
 80020e8:	20000020 	.word	0x20000020
 80020ec:	20000263 	.word	0x20000263
 80020f0:	20000004 	.word	0x20000004
 80020f4:	20000267 	.word	0x20000267
 80020f8:	200001cc 	.word	0x200001cc
 80020fc:	2000026b 	.word	0x2000026b
 8002100:	20000008 	.word	0x20000008
 8002104:	2000026f 	.word	0x2000026f
 8002108:	20000273 	.word	0x20000273
 800210c:	20000277 	.word	0x20000277
 8002110:	2000027b 	.word	0x2000027b
 8002114:	2000027f 	.word	0x2000027f
 8002118:	20000283 	.word	0x20000283
 800211c:	20000287 	.word	0x20000287
 8002120:	2000001c 	.word	0x2000001c
 8002124:	20000289 	.word	0x20000289
 8002128:	2000001e 	.word	0x2000001e
 800212c:	20000002 	.word	0x20000002
 8002130:	200003c0 	.word	0x200003c0
 8002134:	2000028c 	.word	0x2000028c

08002138 <USB_Parse_Status>:
void USB_Parse_Status(uint8_t *data){
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	potentiometer_min = *(uint16_t *)&data[2];
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	885a      	ldrh	r2, [r3, #2]
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <USB_Parse_Status+0x188>)
 8002146:	801a      	strh	r2, [r3, #0]
	potentiometer_max = *(uint16_t *)&data[4];
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	889a      	ldrh	r2, [r3, #4]
 800214c:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <USB_Parse_Status+0x18c>)
 800214e:	801a      	strh	r2, [r3, #0]
	motor_max_power = (uint16_t)data[6] * 10;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3306      	adds	r3, #6
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	4413      	add	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <USB_Parse_Status+0x190>)
 8002164:	801a      	strh	r2, [r3, #0]
	motor_invert = data[7];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	79da      	ldrb	r2, [r3, #7]
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <USB_Parse_Status+0x194>)
 800216c:	701a      	strb	r2, [r3, #0]
	signal_ignore = data[8];
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7a1a      	ldrb	r2, [r3, #8]
 8002172:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <USB_Parse_Status+0x198>)
 8002174:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&data[9]);
 8002176:	4a57      	ldr	r2, [pc, #348]	; (80022d4 <USB_Parse_Status+0x19c>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3309      	adds	r3, #9
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f7fe fc96 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&data[13]);
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <USB_Parse_Status+0x1a0>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	330d      	adds	r3, #13
 800218a:	4619      	mov	r1, r3
 800218c:	4610      	mov	r0, r2
 800218e:	f7fe fc8f 	bl	8000ab0 <General_Copy_32_Bit>
	led_mode = data[17];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7c5a      	ldrb	r2, [r3, #17]
 8002196:	4b51      	ldr	r3, [pc, #324]	; (80022dc <USB_Parse_Status+0x1a4>)
 8002198:	701a      	strb	r2, [r3, #0]
	pid_on = data[18];
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7c9a      	ldrb	r2, [r3, #18]
 800219e:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <USB_Parse_Status+0x1a8>)
 80021a0:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&data[19]);
 80021a2:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <USB_Parse_Status+0x1ac>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3313      	adds	r3, #19
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f7fe fc80 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&data[23]);
 80021b0:	4a4d      	ldr	r2, [pc, #308]	; (80022e8 <USB_Parse_Status+0x1b0>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3317      	adds	r3, #23
 80021b6:	4619      	mov	r1, r3
 80021b8:	4610      	mov	r0, r2
 80021ba:	f7fe fc79 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&data[27]);
 80021be:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <USB_Parse_Status+0x1b4>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	331b      	adds	r3, #27
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f7fe fc72 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&data[31]);
 80021cc:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <USB_Parse_Status+0x1b8>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	331f      	adds	r3, #31
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f7fe fc6b 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&data[35]);
 80021da:	4a46      	ldr	r2, [pc, #280]	; (80022f4 <USB_Parse_Status+0x1bc>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3323      	adds	r3, #35	; 0x23
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f7fe fc64 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&data[39]);
 80021e8:	4a43      	ldr	r2, [pc, #268]	; (80022f8 <USB_Parse_Status+0x1c0>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3327      	adds	r3, #39	; 0x27
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7fe fc5d 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&data[43]);
 80021f6:	4a41      	ldr	r2, [pc, #260]	; (80022fc <USB_Parse_Status+0x1c4>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	332b      	adds	r3, #43	; 0x2b
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7fe fc56 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&data[47]);
 8002204:	4a3e      	ldr	r2, [pc, #248]	; (8002300 <USB_Parse_Status+0x1c8>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	332f      	adds	r3, #47	; 0x2f
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7fe fc4f 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&data[51]);
 8002212:	4a3c      	ldr	r2, [pc, #240]	; (8002304 <USB_Parse_Status+0x1cc>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3333      	adds	r3, #51	; 0x33
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f7fe fc48 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&data[55]);
 8002220:	4a39      	ldr	r2, [pc, #228]	; (8002308 <USB_Parse_Status+0x1d0>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3337      	adds	r3, #55	; 0x37
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7fe fc5e 	bl	8000aea <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&data[57]);
 800222e:	4a37      	ldr	r2, [pc, #220]	; (800230c <USB_Parse_Status+0x1d4>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3339      	adds	r3, #57	; 0x39
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f7fe fc57 	bl	8000aea <General_Copy_16_Bit>
	pid_sampling_time = data[59];
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <USB_Parse_Status+0x1d8>)
 8002244:	701a      	strb	r2, [r3, #0]
	if(PID_Get_Sampling_Time() != pid_sampling_time){
 8002246:	f7fe fe21 	bl	8000e8c <PID_Get_Sampling_Time>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <USB_Parse_Status+0x1d8>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	429a      	cmp	r2, r3
 8002256:	d005      	beq.n	8002264 <USB_Parse_Status+0x12c>
		PID_Set_Sampling_Time(pid_sampling_time);
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <USB_Parse_Status+0x1d8>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fe26 	bl	8000eb0 <PID_Set_Sampling_Time>
	}
	float new_pid_setpoint = 0;
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
	General_Copy_32_Bit((uint32_t)&new_pid_setpoint, (uint32_t)&data[60]);
 800226a:	f107 020c 	add.w	r2, r7, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	333c      	adds	r3, #60	; 0x3c
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7fe fc1b 	bl	8000ab0 <General_Copy_32_Bit>
	if(signal_ignore){
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <USB_Parse_Status+0x198>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00f      	beq.n	80022a2 <USB_Parse_Status+0x16a>
		if(pid_setpoint != new_pid_setpoint){
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <USB_Parse_Status+0x1dc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fa00 	bl	8000690 <__aeabi_fcmpeq>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <USB_Parse_Status+0x164>
			led_position_changed = 1;
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <USB_Parse_Status+0x1e0>)
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
		}
		pid_setpoint = new_pid_setpoint;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <USB_Parse_Status+0x1dc>)
 80022a0:	6013      	str	r3, [r2, #0]
	}
	usb_rq_stat_phold = data[64];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <USB_Parse_Status+0x1e4>)
 80022aa:	701a      	strb	r2, [r3, #0]
	usb_rq_stat_motor = data[65];
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <USB_Parse_Status+0x1e8>)
 80022b4:	701a      	strb	r2, [r3, #0]
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200001ec 	.word	0x200001ec
 80022c4:	200001ee 	.word	0x200001ee
 80022c8:	20000000 	.word	0x20000000
 80022cc:	200001c7 	.word	0x200001c7
 80022d0:	2000023c 	.word	0x2000023c
 80022d4:	20000240 	.word	0x20000240
 80022d8:	20000244 	.word	0x20000244
 80022dc:	200001c4 	.word	0x200001c4
 80022e0:	20000020 	.word	0x20000020
 80022e4:	20000004 	.word	0x20000004
 80022e8:	200001cc 	.word	0x200001cc
 80022ec:	20000008 	.word	0x20000008
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	200001d0 	.word	0x200001d0
 80022f8:	20000010 	.word	0x20000010
 80022fc:	20000014 	.word	0x20000014
 8002300:	200001d4 	.word	0x200001d4
 8002304:	20000018 	.word	0x20000018
 8002308:	2000001c 	.word	0x2000001c
 800230c:	2000001e 	.word	0x2000001e
 8002310:	20000002 	.word	0x20000002
 8002314:	20000024 	.word	0x20000024
 8002318:	200001c5 	.word	0x200001c5
 800231c:	2000024c 	.word	0x2000024c
 8002320:	2000024b 	.word	0x2000024b

08002324 <USB_Send_Status>:
void USB_Send_Status(){
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_STATUS_LENGTH;
 800232a:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <USB_Send_Status+0x84>)
 800232c:	2214      	movs	r2, #20
 800232e:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_STATUS;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <USB_Send_Status+0x84>)
 8002332:	2201      	movs	r2, #1
 8002334:	705a      	strb	r2, [r3, #1]
	usb_tx_buffer[2] = pid_running;
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <USB_Send_Status+0x88>)
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <USB_Send_Status+0x84>)
 800233c:	709a      	strb	r2, [r3, #2]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[3], (uint32_t)&pid_setpoint);
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <USB_Send_Status+0x8c>)
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <USB_Send_Status+0x90>)
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fbb3 	bl	8000ab0 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[7], (uint32_t)&potentiometer_position);
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <USB_Send_Status+0x94>)
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <USB_Send_Status+0x98>)
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fbad 	bl	8000ab0 <General_Copy_32_Bit>
	int16_t motor_val = Motor_Get();
 8002356:	f7fe fd27 	bl	8000da8 <Motor_Get>
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[11], (uint32_t)&motor_val);
 800235e:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <USB_Send_Status+0x9c>)
 8002360:	1dbb      	adds	r3, r7, #6
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7fe fbc0 	bl	8000aea <General_Copy_16_Bit>
	usb_tx_buffer[13] = USB_CRC_PADDING;
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <USB_Send_Status+0x84>)
 800236c:	2200      	movs	r2, #0
 800236e:	735a      	strb	r2, [r3, #13]
	usb_tx_buffer[14] = USB_CRC_PADDING;
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <USB_Send_Status+0x84>)
 8002372:	2200      	movs	r2, #0
 8002374:	739a      	strb	r2, [r3, #14]
	usb_tx_buffer[15] = USB_CRC_PADDING;
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <USB_Send_Status+0x84>)
 8002378:	2200      	movs	r2, #0
 800237a:	73da      	strb	r2, [r3, #15]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_STATUS_LENGTH / 4) - 1);
 800237c:	2204      	movs	r2, #4
 800237e:	490a      	ldr	r1, [pc, #40]	; (80023a8 <USB_Send_Status+0x84>)
 8002380:	4810      	ldr	r0, [pc, #64]	; (80023c4 <USB_Send_Status+0xa0>)
 8002382:	f001 fa7c 	bl	800387e <HAL_CRC_Calculate>
 8002386:	4603      	mov	r3, r0
 8002388:	603b      	str	r3, [r7, #0]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[16], (uint32_t)&crc);
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <USB_Send_Status+0xa4>)
 800238c:	463b      	mov	r3, r7
 800238e:	4619      	mov	r1, r3
 8002390:	4610      	mov	r0, r2
 8002392:	f7fe fb8d 	bl	8000ab0 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_STATUS_LENGTH);
 8002396:	2114      	movs	r1, #20
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <USB_Send_Status+0x84>)
 800239a:	f009 fa85 	bl	800b8a8 <CDC_Transmit_FS>
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000250 	.word	0x20000250
 80023ac:	200001d8 	.word	0x200001d8
 80023b0:	20000253 	.word	0x20000253
 80023b4:	20000024 	.word	0x20000024
 80023b8:	20000257 	.word	0x20000257
 80023bc:	200001f8 	.word	0x200001f8
 80023c0:	2000025b 	.word	0x2000025b
 80023c4:	200003c0 	.word	0x200003c0
 80023c8:	20000260 	.word	0x20000260

080023cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023d0:	f000 fbe6 	bl	8002ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023d4:	f000 f813 	bl	80023fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023d8:	f000 f9de 	bl	8002798 <MX_GPIO_Init>
  MX_ADC1_Init();
 80023dc:	f000 f86c 	bl	80024b8 <MX_ADC1_Init>
  MX_CRC_Init();
 80023e0:	f000 f8a8 	bl	8002534 <MX_CRC_Init>
  MX_TIM2_Init();
 80023e4:	f000 f8ba 	bl	800255c <MX_TIM2_Init>
  MX_TIM3_Init();
 80023e8:	f000 f93a 	bl	8002660 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023ec:	f000 f986 	bl	80026fc <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80023f0:	f009 f996 	bl	800b720 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
App_Init();
 80023f4:	f7fe fa00 	bl	80007f8 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
App_Loop();
 80023f8:	f7fe fa0c 	bl	8000814 <App_Loop>
 80023fc:	e7fc      	b.n	80023f8 <main+0x2c>

080023fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b094      	sub	sp, #80	; 0x50
 8002402:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002408:	2228      	movs	r2, #40	; 0x28
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f009 fe5b 	bl	800c0c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800242e:	2301      	movs	r3, #1
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800243c:	2301      	movs	r3, #1
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002440:	2302      	movs	r3, #2
 8002442:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002448:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800244a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800244e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002454:	4618      	mov	r0, r3
 8002456:	f003 fad5 	bl	8005a04 <HAL_RCC_OscConfig>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002460:	f000 fa04 	bl	800286c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002464:	230f      	movs	r3, #15
 8002466:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002468:	2302      	movs	r3, #2
 800246a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002474:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	2102      	movs	r1, #2
 8002480:	4618      	mov	r0, r3
 8002482:	f003 fd41 	bl	8005f08 <HAL_RCC_ClockConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800248c:	f000 f9ee 	bl	800286c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002490:	2312      	movs	r3, #18
 8002492:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002498:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 feb5 	bl	8006210 <HAL_RCCEx_PeriphCLKConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80024ac:	f000 f9de 	bl	800286c <Error_Handler>
  }
}
 80024b0:	bf00      	nop
 80024b2:	3750      	adds	r7, #80	; 0x50
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <MX_ADC1_Init+0x74>)
 80024ca:	4a19      	ldr	r2, [pc, #100]	; (8002530 <MX_ADC1_Init+0x78>)
 80024cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <MX_ADC1_Init+0x74>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <MX_ADC1_Init+0x74>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <MX_ADC1_Init+0x74>)
 80024dc:	2200      	movs	r2, #0
 80024de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <MX_ADC1_Init+0x74>)
 80024e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80024e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <MX_ADC1_Init+0x74>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <MX_ADC1_Init+0x74>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <MX_ADC1_Init+0x74>)
 80024f6:	f000 fbb5 	bl	8002c64 <HAL_ADC_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002500:	f000 f9b4 	bl	800286c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002504:	2304      	movs	r3, #4
 8002506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002508:	2301      	movs	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800250c:	2307      	movs	r3, #7
 800250e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_ADC1_Init+0x74>)
 8002516:	f000 fe3f 	bl	8003198 <HAL_ADC_ConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002520:	f000 f9a4 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000390 	.word	0x20000390
 8002530:	40012400 	.word	0x40012400

08002534 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_CRC_Init+0x20>)
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <MX_CRC_Init+0x24>)
 800253c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_CRC_Init+0x20>)
 8002540:	f001 f981 	bl	8003846 <HAL_CRC_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800254a:	f000 f98f 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200003c0 	.word	0x200003c0
 8002558:	40023000 	.word	0x40023000

0800255c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	; 0x38
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002570:	f107 0320 	add.w	r3, r7, #32
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
 8002588:	615a      	str	r2, [r3, #20]
 800258a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800258c:	4b33      	ldr	r3, [pc, #204]	; (800265c <MX_TIM2_Init+0x100>)
 800258e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <MX_TIM2_Init+0x100>)
 8002596:	2207      	movs	r2, #7
 8002598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b30      	ldr	r3, [pc, #192]	; (800265c <MX_TIM2_Init+0x100>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <MX_TIM2_Init+0x100>)
 80025a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b2c      	ldr	r3, [pc, #176]	; (800265c <MX_TIM2_Init+0x100>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <MX_TIM2_Init+0x100>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025b4:	4829      	ldr	r0, [pc, #164]	; (800265c <MX_TIM2_Init+0x100>)
 80025b6:	f003 ffa1 	bl	80064fc <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025c0:	f000 f954 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ce:	4619      	mov	r1, r3
 80025d0:	4822      	ldr	r0, [pc, #136]	; (800265c <MX_TIM2_Init+0x100>)
 80025d2:	f004 fb6d 	bl	8006cb0 <HAL_TIM_ConfigClockSource>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025dc:	f000 f946 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025e0:	481e      	ldr	r0, [pc, #120]	; (800265c <MX_TIM2_Init+0x100>)
 80025e2:	f004 f8a5 	bl	8006730 <HAL_TIM_PWM_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025ec:	f000 f93e 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f0:	2300      	movs	r3, #0
 80025f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f8:	f107 0320 	add.w	r3, r7, #32
 80025fc:	4619      	mov	r1, r3
 80025fe:	4817      	ldr	r0, [pc, #92]	; (800265c <MX_TIM2_Init+0x100>)
 8002600:	f004 fee2 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800260a:	f000 f92f 	bl	800286c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800260e:	2360      	movs	r3, #96	; 0x60
 8002610:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002616:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002618:	2302      	movs	r3, #2
 800261a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	2200      	movs	r2, #0
 8002624:	4619      	mov	r1, r3
 8002626:	480d      	ldr	r0, [pc, #52]	; (800265c <MX_TIM2_Init+0x100>)
 8002628:	f004 fa84 	bl	8006b34 <HAL_TIM_PWM_ConfigChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002632:	f000 f91b 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	2204      	movs	r2, #4
 800263a:	4619      	mov	r1, r3
 800263c:	4807      	ldr	r0, [pc, #28]	; (800265c <MX_TIM2_Init+0x100>)
 800263e:	f004 fa79 	bl	8006b34 <HAL_TIM_PWM_ConfigChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002648:	f000 f910 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800264c:	4803      	ldr	r0, [pc, #12]	; (800265c <MX_TIM2_Init+0x100>)
 800264e:	f000 f9f5 	bl	8002a3c <HAL_TIM_MspPostInit>

}
 8002652:	bf00      	nop
 8002654:	3738      	adds	r7, #56	; 0x38
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200003c8 	.word	0x200003c8

08002660 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002666:	f107 0308 	add.w	r3, r7, #8
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002674:	463b      	mov	r3, r7
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <MX_TIM3_Init+0x94>)
 800267e:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <MX_TIM3_Init+0x98>)
 8002680:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002682:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <MX_TIM3_Init+0x94>)
 8002684:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <MX_TIM3_Init+0x94>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <MX_TIM3_Init+0x94>)
 8002692:	22c7      	movs	r2, #199	; 0xc7
 8002694:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <MX_TIM3_Init+0x94>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <MX_TIM3_Init+0x94>)
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026a2:	4814      	ldr	r0, [pc, #80]	; (80026f4 <MX_TIM3_Init+0x94>)
 80026a4:	f003 ff2a 	bl	80064fc <HAL_TIM_Base_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80026ae:	f000 f8dd 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	4619      	mov	r1, r3
 80026be:	480d      	ldr	r0, [pc, #52]	; (80026f4 <MX_TIM3_Init+0x94>)
 80026c0:	f004 faf6 	bl	8006cb0 <HAL_TIM_ConfigClockSource>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80026ca:	f000 f8cf 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026d6:	463b      	mov	r3, r7
 80026d8:	4619      	mov	r1, r3
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <MX_TIM3_Init+0x94>)
 80026dc:	f004 fe74 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026e6:	f000 f8c1 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000410 	.word	0x20000410
 80026f8:	40000400 	.word	0x40000400

080026fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002702:	f107 0308 	add.w	r3, r7, #8
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002710:	463b      	mov	r3, r7
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <MX_TIM4_Init+0x94>)
 800271a:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <MX_TIM4_Init+0x98>)
 800271c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 143;
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <MX_TIM4_Init+0x94>)
 8002720:	228f      	movs	r2, #143	; 0x8f
 8002722:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <MX_TIM4_Init+0x94>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <MX_TIM4_Init+0x94>)
 800272c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002730:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <MX_TIM4_Init+0x94>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <MX_TIM4_Init+0x94>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800273e:	4814      	ldr	r0, [pc, #80]	; (8002790 <MX_TIM4_Init+0x94>)
 8002740:	f003 fedc 	bl	80064fc <HAL_TIM_Base_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800274a:	f000 f88f 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002752:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002754:	f107 0308 	add.w	r3, r7, #8
 8002758:	4619      	mov	r1, r3
 800275a:	480d      	ldr	r0, [pc, #52]	; (8002790 <MX_TIM4_Init+0x94>)
 800275c:	f004 faa8 	bl	8006cb0 <HAL_TIM_ConfigClockSource>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002766:	f000 f881 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002772:	463b      	mov	r3, r7
 8002774:	4619      	mov	r1, r3
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <MX_TIM4_Init+0x94>)
 8002778:	f004 fe26 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002782:	f000 f873 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000458 	.word	0x20000458
 8002794:	40000800 	.word	0x40000800

08002798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279e:	f107 0310 	add.w	r3, r7, #16
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <MX_GPIO_Init+0xc4>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	; (800285c <MX_GPIO_Init+0xc4>)
 80027b2:	f043 0320 	orr.w	r3, r3, #32
 80027b6:	6193      	str	r3, [r2, #24]
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <MX_GPIO_Init+0xc4>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <MX_GPIO_Init+0xc4>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4a24      	ldr	r2, [pc, #144]	; (800285c <MX_GPIO_Init+0xc4>)
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	6193      	str	r3, [r2, #24]
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <MX_GPIO_Init+0xc4>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027dc:	4b1f      	ldr	r3, [pc, #124]	; (800285c <MX_GPIO_Init+0xc4>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	; (800285c <MX_GPIO_Init+0xc4>)
 80027e2:	f043 0308 	orr.w	r3, r3, #8
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <MX_GPIO_Init+0xc4>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	4819      	ldr	r0, [pc, #100]	; (8002860 <MX_GPIO_Init+0xc8>)
 80027fa:	f001 fc0e 	bl	800401a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002802:	2301      	movs	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002806:	2302      	movs	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800280e:	f107 0310 	add.w	r3, r7, #16
 8002812:	4619      	mov	r1, r3
 8002814:	4812      	ldr	r0, [pc, #72]	; (8002860 <MX_GPIO_Init+0xc8>)
 8002816:	f001 fa65 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_Pin USB_DET_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin|USB_DET_Pin;
 800281a:	f240 2302 	movw	r3, #514	; 0x202
 800281e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <MX_GPIO_Init+0xcc>)
 8002822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	4619      	mov	r1, r3
 800282e:	480e      	ldr	r0, [pc, #56]	; (8002868 <MX_GPIO_Init+0xd0>)
 8002830:	f001 fa58 	bl	8003ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	2007      	movs	r0, #7
 800283a:	f000 ffce 	bl	80037da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800283e:	2007      	movs	r0, #7
 8002840:	f000 ffe7 	bl	8003812 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	2017      	movs	r0, #23
 800284a:	f000 ffc6 	bl	80037da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800284e:	2017      	movs	r0, #23
 8002850:	f000 ffdf 	bl	8003812 <HAL_NVIC_EnableIRQ>

}
 8002854:	bf00      	nop
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	40010800 	.word	0x40010800
 8002864:	10310000 	.word	0x10310000
 8002868:	40010c00 	.word	0x40010c00

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	e7fe      	b.n	8002874 <Error_Handler+0x8>
	...

08002878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_MspInit+0x60>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <HAL_MspInit+0x60>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6193      	str	r3, [r2, #24]
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_MspInit+0x60>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_MspInit+0x60>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <HAL_MspInit+0x60>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_MspInit+0x60>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80028ae:	2004      	movs	r0, #4
 80028b0:	f000 ff88 	bl	80037c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_MspInit+0x64>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_MspInit+0x64>)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010000 	.word	0x40010000

080028e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_ADC_MspInit+0x7c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d129      	bne.n	8002954 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <HAL_ADC_MspInit+0x80>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	4a16      	ldr	r2, [pc, #88]	; (8002960 <HAL_ADC_MspInit+0x80>)
 8002906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290a:	6193      	str	r3, [r2, #24]
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_ADC_MspInit+0x80>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_ADC_MspInit+0x80>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a10      	ldr	r2, [pc, #64]	; (8002960 <HAL_ADC_MspInit+0x80>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <HAL_ADC_MspInit+0x80>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8002930:	2310      	movs	r3, #16
 8002932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002934:	2303      	movs	r3, #3
 8002936:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4619      	mov	r1, r3
 800293e:	4809      	ldr	r0, [pc, #36]	; (8002964 <HAL_ADC_MspInit+0x84>)
 8002940:	f001 f9d0 	bl	8003ce4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	2012      	movs	r0, #18
 800294a:	f000 ff46 	bl	80037da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800294e:	2012      	movs	r0, #18
 8002950:	f000 ff5f 	bl	8003812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002954:	bf00      	nop
 8002956:	3720      	adds	r7, #32
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40012400 	.word	0x40012400
 8002960:	40021000 	.word	0x40021000
 8002964:	40010800 	.word	0x40010800

08002968 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a09      	ldr	r2, [pc, #36]	; (800299c <HAL_CRC_MspInit+0x34>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10b      	bne.n	8002992 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_CRC_MspInit+0x38>)
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <HAL_CRC_MspInit+0x38>)
 8002980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002984:	6153      	str	r3, [r2, #20]
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_CRC_MspInit+0x38>)
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	40023000 	.word	0x40023000
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d10c      	bne.n	80029d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_TIM_Base_MspInit+0x8c>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <HAL_TIM_Base_MspInit+0x8c>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	61d3      	str	r3, [r2, #28]
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_TIM_Base_MspInit+0x8c>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029ce:	e02a      	b.n	8002a26 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_TIM_Base_MspInit+0x90>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d114      	bne.n	8002a04 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_TIM_Base_MspInit+0x8c>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <HAL_TIM_Base_MspInit+0x8c>)
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	61d3      	str	r3, [r2, #28]
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_TIM_Base_MspInit+0x8c>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2101      	movs	r1, #1
 80029f6:	201d      	movs	r0, #29
 80029f8:	f000 feef 	bl	80037da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029fc:	201d      	movs	r0, #29
 80029fe:	f000 ff08 	bl	8003812 <HAL_NVIC_EnableIRQ>
}
 8002a02:	e010      	b.n	8002a26 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <HAL_TIM_Base_MspInit+0x94>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10b      	bne.n	8002a26 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_TIM_Base_MspInit+0x8c>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_TIM_Base_MspInit+0x8c>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	61d3      	str	r3, [r2, #28]
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_TIM_Base_MspInit+0x8c>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40000400 	.word	0x40000400
 8002a38:	40000800 	.word	0x40000800

08002a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5a:	d117      	bne.n	8002a8c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_TIM_MspPostInit+0x58>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <HAL_TIM_MspPostInit+0x58>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_TIM_MspPostInit+0x58>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8002a74:	2303      	movs	r3, #3
 8002a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	4619      	mov	r1, r3
 8002a86:	4804      	ldr	r0, [pc, #16]	; (8002a98 <HAL_TIM_MspPostInit+0x5c>)
 8002a88:	f001 f92c 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a8c:	bf00      	nop
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40010800 	.word	0x40010800

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <NMI_Handler+0x4>

08002aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <MemManage_Handler+0x4>

08002aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae2:	f000 f8a3 	bl	8002c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 8002ae6:	f7fe f841 	bl	8000b6c <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}

08002aee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 8002af2:	2002      	movs	r0, #2
 8002af4:	f001 faaa 	bl	800404c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <ADC1_2_IRQHandler+0x10>)
 8002b02:	f000 fa7d 	bl	8003000 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000390 	.word	0x20000390

08002b10 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b14:	4802      	ldr	r0, [pc, #8]	; (8002b20 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b16:	f001 fbe2 	bl	80042de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20001160 	.word	0x20001160

08002b24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DET_Pin);
 8002b28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b2c:	f001 fa8e 	bl	800404c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <TIM3_IRQHandler+0x10>)
 8002b3a:	f003 fef3 	bl	8006924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000410 	.word	0x20000410

08002b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b54:	480c      	ldr	r0, [pc, #48]	; (8002b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b56:	490d      	ldr	r1, [pc, #52]	; (8002b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b5c:	e002      	b.n	8002b64 <LoopCopyDataInit>

08002b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b62:	3304      	adds	r3, #4

08002b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b68:	d3f9      	bcc.n	8002b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b6c:	4c0a      	ldr	r4, [pc, #40]	; (8002b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b70:	e001      	b.n	8002b76 <LoopFillZerobss>

08002b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b74:	3204      	adds	r2, #4

08002b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b78:	d3fb      	bcc.n	8002b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b7a:	f7ff ffe5 	bl	8002b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b7e:	f009 fa71 	bl	800c064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b82:	f7ff fc23 	bl	80023cc <main>
  bx lr
 8002b86:	4770      	bx	lr
  ldr r0, =_sdata
 8002b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b8c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8002b90:	0800c174 	.word	0x0800c174
  ldr r2, =_sbss
 8002b94:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8002b98:	2000166c 	.word	0x2000166c

08002b9c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b9c:	e7fe      	b.n	8002b9c <CAN1_RX1_IRQHandler>
	...

08002ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_Init+0x28>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <HAL_Init+0x28>)
 8002baa:	f043 0310 	orr.w	r3, r3, #16
 8002bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f000 fe07 	bl	80037c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb6:	2007      	movs	r0, #7
 8002bb8:	f000 f808 	bl	8002bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bbc:	f7ff fe5c 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40022000 	.word	0x40022000

08002bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_InitTick+0x54>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_InitTick+0x58>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fe1f 	bl	800382e <HAL_SYSTICK_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00e      	b.n	8002c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b0f      	cmp	r3, #15
 8002bfe:	d80a      	bhi.n	8002c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c00:	2200      	movs	r2, #0
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f000 fde7 	bl	80037da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c0c:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <HAL_InitTick+0x5c>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000028 	.word	0x20000028
 8002c24:	20000030 	.word	0x20000030
 8002c28:	2000002c 	.word	0x2000002c

08002c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_IncTick+0x1c>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_IncTick+0x20>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a03      	ldr	r2, [pc, #12]	; (8002c4c <HAL_IncTick+0x20>)
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	20000030 	.word	0x20000030
 8002c4c:	200004a0 	.word	0x200004a0

08002c50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return uwTick;
 8002c54:	4b02      	ldr	r3, [pc, #8]	; (8002c60 <HAL_GetTick+0x10>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	200004a0 	.word	0x200004a0

08002c64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0be      	b.n	8002e04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fe1c 	bl	80028e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fbc7 	bl	800343c <ADC_ConversionStop_Disable>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 8099 	bne.w	8002df2 <HAL_ADC_Init+0x18e>
 8002cc0:	7dfb      	ldrb	r3, [r7, #23]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 8095 	bne.w	8002df2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cd0:	f023 0302 	bic.w	r3, r3, #2
 8002cd4:	f043 0202 	orr.w	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ce4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7b1b      	ldrb	r3, [r3, #12]
 8002cea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfc:	d003      	beq.n	8002d06 <HAL_ADC_Init+0xa2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <HAL_ADC_Init+0xa8>
 8002d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d0a:	e000      	b.n	8002d0e <HAL_ADC_Init+0xaa>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7d1b      	ldrb	r3, [r3, #20]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d119      	bne.n	8002d50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7b1b      	ldrb	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	035a      	lsls	r2, r3, #13
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	e00b      	b.n	8002d50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HAL_ADC_Init+0x1a8>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d80:	d003      	beq.n	8002d8a <HAL_ADC_Init+0x126>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d104      	bne.n	8002d94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	051b      	lsls	r3, r3, #20
 8002d92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_ADC_Init+0x1ac>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d10b      	bne.n	8002dd0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dce:	e018      	b.n	8002e02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	f023 0312 	bic.w	r3, r3, #18
 8002dd8:	f043 0210 	orr.w	r2, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002df0:	e007      	b.n	8002e02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	f043 0210 	orr.w	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	ffe1f7fd 	.word	0xffe1f7fd
 8002e10:	ff1f0efe 	.word	0xff1f0efe

08002e14 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Start_IT+0x1a>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0a0      	b.n	8002f70 <HAL_ADC_Start_IT+0x15c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 faa6 	bl	8003388 <ADC_Enable>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f040 808f 	bne.w	8002f66 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a45      	ldr	r2, [pc, #276]	; (8002f78 <HAL_ADC_Start_IT+0x164>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d105      	bne.n	8002e72 <HAL_ADC_Start_IT+0x5e>
 8002e66:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <HAL_ADC_Start_IT+0x168>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d115      	bne.n	8002e9e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d026      	beq.n	8002eda <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e9c:	e01d      	b.n	8002eda <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a33      	ldr	r2, [pc, #204]	; (8002f7c <HAL_ADC_Start_IT+0x168>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_ADC_Start_IT+0xaa>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2f      	ldr	r2, [pc, #188]	; (8002f78 <HAL_ADC_Start_IT+0x164>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10d      	bne.n	8002eda <HAL_ADC_Start_IT+0xc6>
 8002ebe:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_ADC_Start_IT+0x168>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ed2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d006      	beq.n	8002ef4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	f023 0206 	bic.w	r2, r3, #6
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ef2:	e002      	b.n	8002efa <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f06f 0202 	mvn.w	r2, #2
 8002f0a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f2a:	d113      	bne.n	8002f54 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f30:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <HAL_ADC_Start_IT+0x164>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d105      	bne.n	8002f42 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_ADC_Start_IT+0x168>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d108      	bne.n	8002f54 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	e00c      	b.n	8002f6e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	e003      	b.n	8002f6e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40012800 	.word	0x40012800
 8002f7c:	40012400 	.word	0x40012400

08002f80 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Stop_IT+0x1a>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e022      	b.n	8002fe0 <HAL_ADC_Stop_IT+0x60>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa4a 	bl	800343c <ADC_ConversionStop_Disable>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d111      	bne.n	8002fd6 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0220 	bic.w	r2, r2, #32
 8002fc0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b20      	cmp	r3, #32
 8003014:	d140      	bne.n	8003098 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b02      	cmp	r3, #2
 8003022:	d139      	bne.n	8003098 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003046:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800304a:	d11d      	bne.n	8003088 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003050:	2b00      	cmp	r3, #0
 8003052:	d119      	bne.n	8003088 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0220 	bic.w	r2, r2, #32
 8003062:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fd fd4b 	bl	8000b24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f06f 0212 	mvn.w	r2, #18
 8003096:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b80      	cmp	r3, #128	; 0x80
 80030a4:	d14f      	bne.n	8003146 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d148      	bne.n	8003146 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80030d6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80030da:	d012      	beq.n	8003102 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d125      	bne.n	8003136 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030f8:	d11d      	bne.n	8003136 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d119      	bne.n	8003136 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003110:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	f043 0201 	orr.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa6e 	bl	8003618 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 020c 	mvn.w	r2, #12
 8003144:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	d114      	bne.n	800317e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d10d      	bne.n	800317e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f809 	bl	8003186 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0201 	mvn.w	r2, #1
 800317c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x20>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0dc      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1da>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b06      	cmp	r3, #6
 80031c6:	d81c      	bhi.n	8003202 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	3b05      	subs	r3, #5
 80031da:	221f      	movs	r2, #31
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	4019      	ands	r1, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	3b05      	subs	r3, #5
 80031f4:	fa00 f203 	lsl.w	r2, r0, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003200:	e03c      	b.n	800327c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d81c      	bhi.n	8003244 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	3b23      	subs	r3, #35	; 0x23
 800321c:	221f      	movs	r2, #31
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	4019      	ands	r1, r3
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	3b23      	subs	r3, #35	; 0x23
 8003236:	fa00 f203 	lsl.w	r2, r0, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
 8003242:	e01b      	b.n	800327c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	3b41      	subs	r3, #65	; 0x41
 8003256:	221f      	movs	r2, #31
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	4019      	ands	r1, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	3b41      	subs	r3, #65	; 0x41
 8003270:	fa00 f203 	lsl.w	r2, r0, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b09      	cmp	r3, #9
 8003282:	d91c      	bls.n	80032be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68d9      	ldr	r1, [r3, #12]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	3b1e      	subs	r3, #30
 8003296:	2207      	movs	r2, #7
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	4019      	ands	r1, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6898      	ldr	r0, [r3, #8]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	3b1e      	subs	r3, #30
 80032b0:	fa00 f203 	lsl.w	r2, r0, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	60da      	str	r2, [r3, #12]
 80032bc:	e019      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6919      	ldr	r1, [r3, #16]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	2207      	movs	r2, #7
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4019      	ands	r1, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6898      	ldr	r0, [r3, #8]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b10      	cmp	r3, #16
 80032f8:	d003      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032fe:	2b11      	cmp	r3, #17
 8003300:	d132      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_ADC_ConfigChannel+0x1e4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d125      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d126      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003328:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b10      	cmp	r3, #16
 8003330:	d11a      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_ADC_ConfigChannel+0x1e8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a13      	ldr	r2, [pc, #76]	; (8003384 <HAL_ADC_ConfigChannel+0x1ec>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	0c9a      	lsrs	r2, r3, #18
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003348:	e002      	b.n	8003350 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3b01      	subs	r3, #1
 800334e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f9      	bne.n	800334a <HAL_ADC_ConfigChannel+0x1b2>
 8003356:	e007      	b.n	8003368 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	40012400 	.word	0x40012400
 8003380:	20000028 	.word	0x20000028
 8003384:	431bde83 	.word	0x431bde83

08003388 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d040      	beq.n	8003428 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033b6:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <ADC_Enable+0xac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <ADC_Enable+0xb0>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	0c9b      	lsrs	r3, r3, #18
 80033c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033c4:	e002      	b.n	80033cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f9      	bne.n	80033c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033d2:	f7ff fc3d 	bl	8002c50 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033d8:	e01f      	b.n	800341a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033da:	f7ff fc39 	bl	8002c50 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d918      	bls.n	800341a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d011      	beq.n	800341a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f043 0210 	orr.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e007      	b.n	800342a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b01      	cmp	r3, #1
 8003426:	d1d8      	bne.n	80033da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000028 	.word	0x20000028
 8003438:	431bde83 	.word	0x431bde83

0800343c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	d12e      	bne.n	80034b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003466:	f7ff fbf3 	bl	8002c50 <HAL_GetTick>
 800346a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800346c:	e01b      	b.n	80034a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800346e:	f7ff fbef 	bl	8002c50 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d914      	bls.n	80034a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d10d      	bne.n	80034a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	f043 0210 	orr.w	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e007      	b.n	80034b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d0dc      	beq.n	800346e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_ADCEx_Calibration_Start+0x1e>
 80034da:	2302      	movs	r3, #2
 80034dc:	e095      	b.n	800360a <HAL_ADCEx_Calibration_Start+0x14a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ffa8 	bl	800343c <ADC_ConversionStop_Disable>
 80034ec:	4603      	mov	r3, r0
 80034ee:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 8084 	bne.w	8003600 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003500:	f023 0302 	bic.w	r3, r3, #2
 8003504:	f043 0202 	orr.w	r2, r3, #2
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800350c:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_ADCEx_Calibration_Start+0x154>)
 800350e:	681c      	ldr	r4, [r3, #0]
 8003510:	2002      	movs	r0, #2
 8003512:	f002 ff33 	bl	800637c <HAL_RCCEx_GetPeriphCLKFreq>
 8003516:	4603      	mov	r3, r0
 8003518:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800351c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800351e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003520:	e002      	b.n	8003528 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3b01      	subs	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f9      	bne.n	8003522 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ff2a 	bl	8003388 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0208 	orr.w	r2, r2, #8
 8003542:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003544:	f7ff fb84 	bl	8002c50 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800354a:	e01b      	b.n	8003584 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800354c:	f7ff fb80 	bl	8002c50 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b0a      	cmp	r3, #10
 8003558:	d914      	bls.n	8003584 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f023 0312 	bic.w	r3, r3, #18
 8003570:	f043 0210 	orr.w	r2, r3, #16
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e042      	b.n	800360a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1dc      	bne.n	800354c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0204 	orr.w	r2, r2, #4
 80035a0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80035a2:	f7ff fb55 	bl	8002c50 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80035a8:	e01b      	b.n	80035e2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80035aa:	f7ff fb51 	bl	8002c50 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b0a      	cmp	r3, #10
 80035b6:	d914      	bls.n	80035e2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	f023 0312 	bic.w	r3, r3, #18
 80035ce:	f043 0210 	orr.w	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e013      	b.n	800360a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1dc      	bne.n	80035aa <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	f023 0303 	bic.w	r3, r3, #3
 80035f8:	f043 0201 	orr.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003608:	7dfb      	ldrb	r3, [r7, #23]
}
 800360a:	4618      	mov	r0, r3
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd90      	pop	{r4, r7, pc}
 8003612:	bf00      	nop
 8003614:	20000028 	.word	0x20000028

08003618 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
	...

0800362c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <__NVIC_SetPriorityGrouping+0x44>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003648:	4013      	ands	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800365e:	4a04      	ldr	r2, [pc, #16]	; (8003670 <__NVIC_SetPriorityGrouping+0x44>)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	60d3      	str	r3, [r2, #12]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <__NVIC_GetPriorityGrouping+0x18>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	f003 0307 	and.w	r3, r3, #7
}
 8003682:	4618      	mov	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	db0b      	blt.n	80036ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	f003 021f 	and.w	r2, r3, #31
 80036a8:	4906      	ldr	r1, [pc, #24]	; (80036c4 <__NVIC_EnableIRQ+0x34>)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	2001      	movs	r0, #1
 80036b2:	fa00 f202 	lsl.w	r2, r0, r2
 80036b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	e000e100 	.word	0xe000e100

080036c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	db0a      	blt.n	80036f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	490c      	ldr	r1, [pc, #48]	; (8003714 <__NVIC_SetPriority+0x4c>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	440b      	add	r3, r1
 80036ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f0:	e00a      	b.n	8003708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4908      	ldr	r1, [pc, #32]	; (8003718 <__NVIC_SetPriority+0x50>)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	3b04      	subs	r3, #4
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	440b      	add	r3, r1
 8003706:	761a      	strb	r2, [r3, #24]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e000e100 	.word	0xe000e100
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	; 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f1c3 0307 	rsb	r3, r3, #7
 8003736:	2b04      	cmp	r3, #4
 8003738:	bf28      	it	cs
 800373a:	2304      	movcs	r3, #4
 800373c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3304      	adds	r3, #4
 8003742:	2b06      	cmp	r3, #6
 8003744:	d902      	bls.n	800374c <NVIC_EncodePriority+0x30>
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3b03      	subs	r3, #3
 800374a:	e000      	b.n	800374e <NVIC_EncodePriority+0x32>
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	401a      	ands	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003764:	f04f 31ff 	mov.w	r1, #4294967295
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	43d9      	mvns	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	4313      	orrs	r3, r2
         );
}
 8003776:	4618      	mov	r0, r3
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003790:	d301      	bcc.n	8003796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003792:	2301      	movs	r3, #1
 8003794:	e00f      	b.n	80037b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003796:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <SysTick_Config+0x40>)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3b01      	subs	r3, #1
 800379c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800379e:	210f      	movs	r1, #15
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	f7ff ff90 	bl	80036c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <SysTick_Config+0x40>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ae:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <SysTick_Config+0x40>)
 80037b0:	2207      	movs	r2, #7
 80037b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	e000e010 	.word	0xe000e010

080037c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ff2d 	bl	800362c <__NVIC_SetPriorityGrouping>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037da:	b580      	push	{r7, lr}
 80037dc:	b086      	sub	sp, #24
 80037de:	af00      	add	r7, sp, #0
 80037e0:	4603      	mov	r3, r0
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037ec:	f7ff ff42 	bl	8003674 <__NVIC_GetPriorityGrouping>
 80037f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	6978      	ldr	r0, [r7, #20]
 80037f8:	f7ff ff90 	bl	800371c <NVIC_EncodePriority>
 80037fc:	4602      	mov	r2, r0
 80037fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff5f 	bl	80036c8 <__NVIC_SetPriority>
}
 800380a:	bf00      	nop
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	4603      	mov	r3, r0
 800381a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800381c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ff35 	bl	8003690 <__NVIC_EnableIRQ>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff ffa2 	bl	8003780 <SysTick_Config>
 800383c:	4603      	mov	r3, r0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e00e      	b.n	8003876 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	795b      	ldrb	r3, [r3, #5]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff f87d 	bl	8002968 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800387e:	b480      	push	{r7}
 8003880:	b087      	sub	sp, #28
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2202      	movs	r2, #2
 8003892:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e00a      	b.n	80038c0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	441a      	add	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	3301      	adds	r3, #1
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d3f0      	bcc.n	80038aa <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80038d6:	693b      	ldr	r3, [r7, #16]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80038e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038fe:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <HAL_FLASH_Program+0xd8>)
 8003900:	7e1b      	ldrb	r3, [r3, #24]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_FLASH_Program+0x26>
 8003906:	2302      	movs	r3, #2
 8003908:	e054      	b.n	80039b4 <HAL_FLASH_Program+0xd0>
 800390a:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <HAL_FLASH_Program+0xd8>)
 800390c:	2201      	movs	r2, #1
 800390e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003910:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003914:	f000 f8a8 	bl	8003a68 <FLASH_WaitForLastOperation>
 8003918:	4603      	mov	r3, r0
 800391a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d144      	bne.n	80039ac <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d102      	bne.n	800392e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003928:	2301      	movs	r3, #1
 800392a:	757b      	strb	r3, [r7, #21]
 800392c:	e007      	b.n	800393e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d102      	bne.n	800393a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003934:	2302      	movs	r3, #2
 8003936:	757b      	strb	r3, [r7, #21]
 8003938:	e001      	b.n	800393e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800393a:	2304      	movs	r3, #4
 800393c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800393e:	2300      	movs	r3, #0
 8003940:	75bb      	strb	r3, [r7, #22]
 8003942:	e02d      	b.n	80039a0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003944:	7dbb      	ldrb	r3, [r7, #22]
 8003946:	005a      	lsls	r2, r3, #1
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	eb02 0c03 	add.w	ip, r2, r3
 800394e:	7dbb      	ldrb	r3, [r7, #22]
 8003950:	0119      	lsls	r1, r3, #4
 8003952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003956:	f1c1 0620 	rsb	r6, r1, #32
 800395a:	f1a1 0020 	sub.w	r0, r1, #32
 800395e:	fa22 f401 	lsr.w	r4, r2, r1
 8003962:	fa03 f606 	lsl.w	r6, r3, r6
 8003966:	4334      	orrs	r4, r6
 8003968:	fa23 f000 	lsr.w	r0, r3, r0
 800396c:	4304      	orrs	r4, r0
 800396e:	fa23 f501 	lsr.w	r5, r3, r1
 8003972:	b2a3      	uxth	r3, r4
 8003974:	4619      	mov	r1, r3
 8003976:	4660      	mov	r0, ip
 8003978:	f000 f85a 	bl	8003a30 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800397c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003980:	f000 f872 	bl	8003a68 <FLASH_WaitForLastOperation>
 8003984:	4603      	mov	r3, r0
 8003986:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003988:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <HAL_FLASH_Program+0xdc>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	4a0c      	ldr	r2, [pc, #48]	; (80039c0 <HAL_FLASH_Program+0xdc>)
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800399a:	7dbb      	ldrb	r3, [r7, #22]
 800399c:	3301      	adds	r3, #1
 800399e:	75bb      	strb	r3, [r7, #22]
 80039a0:	7dba      	ldrb	r2, [r7, #22]
 80039a2:	7d7b      	ldrb	r3, [r7, #21]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3cd      	bcc.n	8003944 <HAL_FLASH_Program+0x60>
 80039a8:	e000      	b.n	80039ac <HAL_FLASH_Program+0xc8>
      {
        break;
 80039aa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_FLASH_Program+0xd8>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	761a      	strb	r2, [r3, #24]

  return status;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039bc:	200004a8 	.word	0x200004a8
 80039c0:	40022000 	.word	0x40022000

080039c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <HAL_FLASH_Unlock+0x40>)
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <HAL_FLASH_Unlock+0x40>)
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <HAL_FLASH_Unlock+0x44>)
 80039de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_FLASH_Unlock+0x40>)
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <HAL_FLASH_Unlock+0x48>)
 80039e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_FLASH_Unlock+0x40>)
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80039f6:	79fb      	ldrb	r3, [r7, #7]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40022000 	.word	0x40022000
 8003a08:	45670123 	.word	0x45670123
 8003a0c:	cdef89ab 	.word	0xcdef89ab

08003a10 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_FLASH_Lock+0x1c>)
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HAL_FLASH_Lock+0x1c>)
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40022000 	.word	0x40022000

08003a30 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <FLASH_Program_HalfWord+0x30>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <FLASH_Program_HalfWord+0x34>)
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <FLASH_Program_HalfWord+0x34>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	887a      	ldrh	r2, [r7, #2]
 8003a52:	801a      	strh	r2, [r3, #0]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	200004a8 	.word	0x200004a8
 8003a64:	40022000 	.word	0x40022000

08003a68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff f8ee 	bl	8002c50 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a76:	e010      	b.n	8003a9a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d00c      	beq.n	8003a9a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <FLASH_WaitForLastOperation+0x2e>
 8003a86:	f7ff f8e3 	bl	8002c50 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d201      	bcs.n	8003a9a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e025      	b.n	8003ae6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <FLASH_WaitForLastOperation+0x88>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e8      	bne.n	8003a78 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <FLASH_WaitForLastOperation+0x88>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <FLASH_WaitForLastOperation+0x88>)
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <FLASH_WaitForLastOperation+0x88>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <FLASH_WaitForLastOperation+0x88>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ad0:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <FLASH_WaitForLastOperation+0x88>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003adc:	f000 f80a 	bl	8003af4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40022000 	.word	0x40022000

08003af4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003afe:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <FLASH_SetErrorCode+0x98>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <FLASH_SetErrorCode+0x9c>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f043 0302 	orr.w	r3, r3, #2
 8003b12:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <FLASH_SetErrorCode+0x9c>)
 8003b14:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f043 0310 	orr.w	r3, r3, #16
 8003b1c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <FLASH_SetErrorCode+0x98>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <FLASH_SetErrorCode+0x9c>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <FLASH_SetErrorCode+0x9c>)
 8003b34:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <FLASH_SetErrorCode+0x98>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <FLASH_SetErrorCode+0x9c>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f043 0304 	orr.w	r3, r3, #4
 8003b52:	4a0f      	ldr	r2, [pc, #60]	; (8003b90 <FLASH_SetErrorCode+0x9c>)
 8003b54:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <FLASH_SetErrorCode+0x98>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	; (8003b8c <FLASH_SetErrorCode+0x98>)
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f240 1201 	movw	r2, #257	; 0x101
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d106      	bne.n	8003b7a <FLASH_SetErrorCode+0x86>
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <FLASH_SetErrorCode+0x98>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <FLASH_SetErrorCode+0x98>)
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	61d3      	str	r3, [r2, #28]
}  
 8003b78:	e002      	b.n	8003b80 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b7a:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <FLASH_SetErrorCode+0x98>)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60d3      	str	r3, [r2, #12]
}  
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40022000 	.word	0x40022000
 8003b90:	200004a8 	.word	0x200004a8

08003b94 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ba6:	4b2f      	ldr	r3, [pc, #188]	; (8003c64 <HAL_FLASHEx_Erase+0xd0>)
 8003ba8:	7e1b      	ldrb	r3, [r3, #24]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_FLASHEx_Erase+0x1e>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e053      	b.n	8003c5a <HAL_FLASHEx_Erase+0xc6>
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <HAL_FLASHEx_Erase+0xd0>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d116      	bne.n	8003bee <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003bc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bc4:	f7ff ff50 	bl	8003a68 <FLASH_WaitForLastOperation>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d141      	bne.n	8003c52 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f000 f84c 	bl	8003c6c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bd8:	f7ff ff46 	bl	8003a68 <FLASH_WaitForLastOperation>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003be0:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <HAL_FLASHEx_Erase+0xd4>)
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <HAL_FLASHEx_Erase+0xd4>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6113      	str	r3, [r2, #16]
 8003bec:	e031      	b.n	8003c52 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003bee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bf2:	f7ff ff39 	bl	8003a68 <FLASH_WaitForLastOperation>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d12a      	bne.n	8003c52 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003c02:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	e019      	b.n	8003c40 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003c0c:	68b8      	ldr	r0, [r7, #8]
 8003c0e:	f000 f849 	bl	8003ca4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c16:	f7ff ff27 	bl	8003a68 <FLASH_WaitForLastOperation>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_FLASHEx_Erase+0xd4>)
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <HAL_FLASHEx_Erase+0xd4>)
 8003c24:	f023 0302 	bic.w	r3, r3, #2
 8003c28:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	601a      	str	r2, [r3, #0]
            break;
 8003c36:	e00c      	b.n	8003c52 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c3e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	029a      	lsls	r2, r3, #10
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d3dc      	bcc.n	8003c0c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <HAL_FLASHEx_Erase+0xd0>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	761a      	strb	r2, [r3, #24]

  return status;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200004a8 	.word	0x200004a8
 8003c68:	40022000 	.word	0x40022000

08003c6c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <FLASH_MassErase+0x30>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <FLASH_MassErase+0x34>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <FLASH_MassErase+0x34>)
 8003c80:	f043 0304 	orr.w	r3, r3, #4
 8003c84:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <FLASH_MassErase+0x34>)
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	4a05      	ldr	r2, [pc, #20]	; (8003ca0 <FLASH_MassErase+0x34>)
 8003c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c90:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr
 8003c9c:	200004a8 	.word	0x200004a8
 8003ca0:	40022000 	.word	0x40022000

08003ca4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <FLASH_PageErase+0x38>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <FLASH_PageErase+0x3c>)
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <FLASH_PageErase+0x3c>)
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <FLASH_PageErase+0x3c>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <FLASH_PageErase+0x3c>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4a05      	ldr	r2, [pc, #20]	; (8003ce0 <FLASH_PageErase+0x3c>)
 8003cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	200004a8 	.word	0x200004a8
 8003ce0:	40022000 	.word	0x40022000

08003ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b08b      	sub	sp, #44	; 0x2c
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf6:	e169      	b.n	8003fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	f040 8158 	bne.w	8003fc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4a9a      	ldr	r2, [pc, #616]	; (8003f84 <HAL_GPIO_Init+0x2a0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d05e      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d20:	4a98      	ldr	r2, [pc, #608]	; (8003f84 <HAL_GPIO_Init+0x2a0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d875      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d26:	4a98      	ldr	r2, [pc, #608]	; (8003f88 <HAL_GPIO_Init+0x2a4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d058      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d2c:	4a96      	ldr	r2, [pc, #600]	; (8003f88 <HAL_GPIO_Init+0x2a4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d86f      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d32:	4a96      	ldr	r2, [pc, #600]	; (8003f8c <HAL_GPIO_Init+0x2a8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d052      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d38:	4a94      	ldr	r2, [pc, #592]	; (8003f8c <HAL_GPIO_Init+0x2a8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d869      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d3e:	4a94      	ldr	r2, [pc, #592]	; (8003f90 <HAL_GPIO_Init+0x2ac>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d04c      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d44:	4a92      	ldr	r2, [pc, #584]	; (8003f90 <HAL_GPIO_Init+0x2ac>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d863      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d4a:	4a92      	ldr	r2, [pc, #584]	; (8003f94 <HAL_GPIO_Init+0x2b0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d046      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d50:	4a90      	ldr	r2, [pc, #576]	; (8003f94 <HAL_GPIO_Init+0x2b0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d85d      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d56:	2b12      	cmp	r3, #18
 8003d58:	d82a      	bhi.n	8003db0 <HAL_GPIO_Init+0xcc>
 8003d5a:	2b12      	cmp	r3, #18
 8003d5c:	d859      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_GPIO_Init+0x80>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003ddf 	.word	0x08003ddf
 8003d68:	08003db9 	.word	0x08003db9
 8003d6c:	08003dcb 	.word	0x08003dcb
 8003d70:	08003e0d 	.word	0x08003e0d
 8003d74:	08003e13 	.word	0x08003e13
 8003d78:	08003e13 	.word	0x08003e13
 8003d7c:	08003e13 	.word	0x08003e13
 8003d80:	08003e13 	.word	0x08003e13
 8003d84:	08003e13 	.word	0x08003e13
 8003d88:	08003e13 	.word	0x08003e13
 8003d8c:	08003e13 	.word	0x08003e13
 8003d90:	08003e13 	.word	0x08003e13
 8003d94:	08003e13 	.word	0x08003e13
 8003d98:	08003e13 	.word	0x08003e13
 8003d9c:	08003e13 	.word	0x08003e13
 8003da0:	08003e13 	.word	0x08003e13
 8003da4:	08003e13 	.word	0x08003e13
 8003da8:	08003dc1 	.word	0x08003dc1
 8003dac:	08003dd5 	.word	0x08003dd5
 8003db0:	4a79      	ldr	r2, [pc, #484]	; (8003f98 <HAL_GPIO_Init+0x2b4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003db6:	e02c      	b.n	8003e12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	623b      	str	r3, [r7, #32]
          break;
 8003dbe:	e029      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	623b      	str	r3, [r7, #32]
          break;
 8003dc8:	e024      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	623b      	str	r3, [r7, #32]
          break;
 8003dd2:	e01f      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	623b      	str	r3, [r7, #32]
          break;
 8003ddc:	e01a      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003de6:	2304      	movs	r3, #4
 8003de8:	623b      	str	r3, [r7, #32]
          break;
 8003dea:	e013      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003df4:	2308      	movs	r3, #8
 8003df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	611a      	str	r2, [r3, #16]
          break;
 8003dfe:	e009      	b.n	8003e14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e00:	2308      	movs	r3, #8
 8003e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	615a      	str	r2, [r3, #20]
          break;
 8003e0a:	e003      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	623b      	str	r3, [r7, #32]
          break;
 8003e10:	e000      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          break;
 8003e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2bff      	cmp	r3, #255	; 0xff
 8003e18:	d801      	bhi.n	8003e1e <HAL_GPIO_Init+0x13a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	e001      	b.n	8003e22 <HAL_GPIO_Init+0x13e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2bff      	cmp	r3, #255	; 0xff
 8003e28:	d802      	bhi.n	8003e30 <HAL_GPIO_Init+0x14c>
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	e002      	b.n	8003e36 <HAL_GPIO_Init+0x152>
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	3b08      	subs	r3, #8
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	210f      	movs	r1, #15
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	401a      	ands	r2, r3
 8003e48:	6a39      	ldr	r1, [r7, #32]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80b1 	beq.w	8003fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e64:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <HAL_GPIO_Init+0x2b8>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	4a4c      	ldr	r2, [pc, #304]	; (8003f9c <HAL_GPIO_Init+0x2b8>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6193      	str	r3, [r2, #24]
 8003e70:	4b4a      	ldr	r3, [pc, #296]	; (8003f9c <HAL_GPIO_Init+0x2b8>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e7c:	4a48      	ldr	r2, [pc, #288]	; (8003fa0 <HAL_GPIO_Init+0x2bc>)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	3302      	adds	r3, #2
 8003e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	220f      	movs	r2, #15
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a40      	ldr	r2, [pc, #256]	; (8003fa4 <HAL_GPIO_Init+0x2c0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <HAL_GPIO_Init+0x1ec>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3f      	ldr	r2, [pc, #252]	; (8003fa8 <HAL_GPIO_Init+0x2c4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00d      	beq.n	8003ecc <HAL_GPIO_Init+0x1e8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3e      	ldr	r2, [pc, #248]	; (8003fac <HAL_GPIO_Init+0x2c8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <HAL_GPIO_Init+0x1e4>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3d      	ldr	r2, [pc, #244]	; (8003fb0 <HAL_GPIO_Init+0x2cc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_GPIO_Init+0x1e0>
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e006      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	e004      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e002      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	f002 0203 	and.w	r2, r2, #3
 8003ed8:	0092      	lsls	r2, r2, #2
 8003eda:	4093      	lsls	r3, r2
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ee2:	492f      	ldr	r1, [pc, #188]	; (8003fa0 <HAL_GPIO_Init+0x2bc>)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	3302      	adds	r3, #2
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	492c      	ldr	r1, [pc, #176]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]
 8003f08:	e006      	b.n	8003f18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	4928      	ldr	r1, [pc, #160]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f24:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	4922      	ldr	r1, [pc, #136]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
 8003f30:	e006      	b.n	8003f40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	491e      	ldr	r1, [pc, #120]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	4918      	ldr	r1, [pc, #96]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]
 8003f58:	e006      	b.n	8003f68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	4914      	ldr	r1, [pc, #80]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d021      	beq.n	8003fb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	490e      	ldr	r1, [pc, #56]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60cb      	str	r3, [r1, #12]
 8003f80:	e021      	b.n	8003fc6 <HAL_GPIO_Init+0x2e2>
 8003f82:	bf00      	nop
 8003f84:	10320000 	.word	0x10320000
 8003f88:	10310000 	.word	0x10310000
 8003f8c:	10220000 	.word	0x10220000
 8003f90:	10210000 	.word	0x10210000
 8003f94:	10120000 	.word	0x10120000
 8003f98:	10110000 	.word	0x10110000
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40010800 	.word	0x40010800
 8003fa8:	40010c00 	.word	0x40010c00
 8003fac:	40011000 	.word	0x40011000
 8003fb0:	40011400 	.word	0x40011400
 8003fb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_GPIO_Init+0x304>)
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	4909      	ldr	r1, [pc, #36]	; (8003fe8 <HAL_GPIO_Init+0x304>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	3301      	adds	r3, #1
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f47f ae8e 	bne.w	8003cf8 <HAL_GPIO_Init+0x14>
  }
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	372c      	adds	r7, #44	; 0x2c
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	40010400 	.word	0x40010400

08003fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	887b      	ldrh	r3, [r7, #2]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e001      	b.n	800400e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	807b      	strh	r3, [r7, #2]
 8004026:	4613      	mov	r3, r2
 8004028:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800402a:	787b      	ldrb	r3, [r7, #1]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004030:	887a      	ldrh	r2, [r7, #2]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004036:	e003      	b.n	8004040 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	041a      	lsls	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	611a      	str	r2, [r3, #16]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
	...

0800404c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004062:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc fd88 	bl	8000b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40010400 	.word	0x40010400

0800407c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800407c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800407e:	b08b      	sub	sp, #44	; 0x2c
 8004080:	af06      	add	r7, sp, #24
 8004082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0fd      	b.n	800428a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f007 fd34 	bl	800bb10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2203      	movs	r2, #3
 80040ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f003 fa1d 	bl	80074f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	687e      	ldr	r6, [r7, #4]
 80040c2:	466d      	mov	r5, sp
 80040c4:	f106 0410 	add.w	r4, r6, #16
 80040c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	602b      	str	r3, [r5, #0]
 80040d0:	1d33      	adds	r3, r6, #4
 80040d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040d4:	6838      	ldr	r0, [r7, #0]
 80040d6:	f003 f9e7 	bl	80074a8 <USB_CoreInit>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0ce      	b.n	800428a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f003 fa18 	bl	8007528 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	e04c      	b.n	8004198 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	3301      	adds	r3, #1
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	b298      	uxth	r0, r3
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	440b      	add	r3, r1
 800413a:	3336      	adds	r3, #54	; 0x36
 800413c:	4602      	mov	r2, r0
 800413e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	440b      	add	r3, r1
 8004150:	3303      	adds	r3, #3
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	440b      	add	r3, r1
 8004164:	3338      	adds	r3, #56	; 0x38
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	440b      	add	r3, r1
 8004178:	333c      	adds	r3, #60	; 0x3c
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	440b      	add	r3, r1
 800418c:	3340      	adds	r3, #64	; 0x40
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	3301      	adds	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d3ad      	bcc.n	80040fe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e044      	b.n	8004232 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	440b      	add	r3, r1
 80041b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	440b      	add	r3, r1
 80041e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	440b      	add	r3, r1
 800420e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004216:	7bfa      	ldrb	r2, [r7, #15]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	440b      	add	r3, r1
 8004224:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	3301      	adds	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d3b5      	bcc.n	80041a8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	603b      	str	r3, [r7, #0]
 8004242:	687e      	ldr	r6, [r7, #4]
 8004244:	466d      	mov	r5, sp
 8004246:	f106 0410 	add.w	r4, r6, #16
 800424a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800424c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	602b      	str	r3, [r5, #0]
 8004252:	1d33      	adds	r3, r6, #4
 8004254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004256:	6838      	ldr	r0, [r7, #0]
 8004258:	f003 f972 	bl	8007540 <USB_DevInit>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e00d      	b.n	800428a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f005 fe24 	bl	8009ed0 <USB_DevDisconnect>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004292 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_PCD_Start+0x16>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e016      	b.n	80042d6 <HAL_PCD_Start+0x44>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f003 f907 	bl	80074c8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80042ba:	2101      	movs	r1, #1
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f007 fe9a 	bl	800bff6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f005 fdf8 	bl	8009ebc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b088      	sub	sp, #32
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f005 fdfa 	bl	8009ee4 <USB_ReadInterrupts>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fa:	d102      	bne.n	8004302 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fb5f 	bl	80049c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f005 fdec 	bl	8009ee4 <USB_ReadInterrupts>
 800430c:	4603      	mov	r3, r0
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d112      	bne.n	800433e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432a:	b292      	uxth	r2, r2
 800432c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f007 fc68 	bl	800bc06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004336:	2100      	movs	r1, #0
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f923 	bl	8004584 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f005 fdce 	bl	8009ee4 <USB_ReadInterrupts>
 8004348:	4603      	mov	r3, r0
 800434a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004352:	d10b      	bne.n	800436c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800435c:	b29a      	uxth	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004366:	b292      	uxth	r2, r2
 8004368:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f005 fdb7 	bl	8009ee4 <USB_ReadInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004380:	d10b      	bne.n	800439a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004394:	b292      	uxth	r2, r2
 8004396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f005 fda0 	bl	8009ee4 <USB_ReadInterrupts>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ae:	d126      	bne.n	80043fe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0204 	bic.w	r2, r2, #4
 80043c2:	b292      	uxth	r2, r2
 80043c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0208 	bic.w	r2, r2, #8
 80043da:	b292      	uxth	r2, r2
 80043dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f007 fc49 	bl	800bc78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043f8:	b292      	uxth	r2, r2
 80043fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f005 fd6e 	bl	8009ee4 <USB_ReadInterrupts>
 8004408:	4603      	mov	r3, r0
 800440a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004412:	f040 8082 	bne.w	800451a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004416:	2300      	movs	r3, #0
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e010      	b.n	800443e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	7ffb      	ldrb	r3, [r7, #31]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	441a      	add	r2, r3
 8004428:	7ffb      	ldrb	r3, [r7, #31]
 800442a:	8812      	ldrh	r2, [r2, #0]
 800442c:	b292      	uxth	r2, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	3320      	adds	r3, #32
 8004432:	443b      	add	r3, r7
 8004434:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004438:	7ffb      	ldrb	r3, [r7, #31]
 800443a:	3301      	adds	r3, #1
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	7ffb      	ldrb	r3, [r7, #31]
 8004440:	2b07      	cmp	r3, #7
 8004442:	d9eb      	bls.n	800441c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	b292      	uxth	r2, r2
 8004458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	b292      	uxth	r2, r2
 8004470:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004474:	bf00      	nop
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800447e:	b29b      	uxth	r3, r3
 8004480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f6      	beq.n	8004476 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004490:	b29a      	uxth	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449a:	b292      	uxth	r2, r2
 800449c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80044a0:	2300      	movs	r3, #0
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e00f      	b.n	80044c6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80044a6:	7ffb      	ldrb	r3, [r7, #31]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	4611      	mov	r1, r2
 80044ae:	7ffa      	ldrb	r2, [r7, #31]
 80044b0:	0092      	lsls	r2, r2, #2
 80044b2:	440a      	add	r2, r1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	3320      	adds	r3, #32
 80044b8:	443b      	add	r3, r7
 80044ba:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80044be:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80044c0:	7ffb      	ldrb	r3, [r7, #31]
 80044c2:	3301      	adds	r3, #1
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	7ffb      	ldrb	r3, [r7, #31]
 80044c8:	2b07      	cmp	r3, #7
 80044ca:	d9ec      	bls.n	80044a6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0208 	orr.w	r2, r2, #8
 80044de:	b292      	uxth	r2, r2
 80044e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f6:	b292      	uxth	r2, r2
 80044f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0204 	orr.w	r2, r2, #4
 800450e:	b292      	uxth	r2, r2
 8004510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f007 fb95 	bl	800bc44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f005 fce0 	bl	8009ee4 <USB_ReadInterrupts>
 8004524:	4603      	mov	r3, r0
 8004526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452e:	d10e      	bne.n	800454e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004542:	b292      	uxth	r2, r2
 8004544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f007 fb4e 	bl	800bbea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f005 fcc6 	bl	8009ee4 <USB_ReadInterrupts>
 8004558:	4603      	mov	r3, r0
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004562:	d10b      	bne.n	800457c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004576:	b292      	uxth	r2, r2
 8004578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800457c:	bf00      	nop
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_PCD_SetAddress+0x1a>
 800459a:	2302      	movs	r3, #2
 800459c:	e013      	b.n	80045c6 <HAL_PCD_SetAddress+0x42>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f005 fc6d 	bl	8009e96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	4608      	mov	r0, r1
 80045d8:	4611      	mov	r1, r2
 80045da:	461a      	mov	r2, r3
 80045dc:	4603      	mov	r3, r0
 80045de:	70fb      	strb	r3, [r7, #3]
 80045e0:	460b      	mov	r3, r1
 80045e2:	803b      	strh	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da0e      	bge.n	8004612 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	4413      	add	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	705a      	strb	r2, [r3, #1]
 8004610:	e00e      	b.n	8004630 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	f003 0207 	and.w	r2, r3, #7
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800463c:	883a      	ldrh	r2, [r7, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	78ba      	ldrb	r2, [r7, #2]
 8004646:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800465a:	78bb      	ldrb	r3, [r7, #2]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d102      	bne.n	8004666 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_PCD_EP_Open+0xa6>
 8004670:	2302      	movs	r3, #2
 8004672:	e00e      	b.n	8004692 <HAL_PCD_EP_Open+0xc4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68f9      	ldr	r1, [r7, #12]
 8004682:	4618      	mov	r0, r3
 8004684:	f002 ff7c 	bl	8007580 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004690:	7afb      	ldrb	r3, [r7, #11]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	da0e      	bge.n	80046cc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4413      	add	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	705a      	strb	r2, [r3, #1]
 80046ca:	e00e      	b.n	80046ea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	f003 0207 	and.w	r2, r3, #7
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_PCD_EP_Close+0x6a>
 8004700:	2302      	movs	r3, #2
 8004702:	e00e      	b.n	8004722 <HAL_PCD_EP_Close+0x88>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68f9      	ldr	r1, [r7, #12]
 8004712:	4618      	mov	r0, r3
 8004714:	f003 fa9e 	bl	8007c54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b086      	sub	sp, #24
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	460b      	mov	r3, r1
 8004738:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800473a:	7afb      	ldrb	r3, [r7, #11]
 800473c:	f003 0207 	and.w	r2, r3, #7
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2200      	movs	r2, #0
 8004762:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2200      	movs	r2, #0
 8004768:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800476a:	7afb      	ldrb	r3, [r7, #11]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	b2da      	uxtb	r2, r3
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004776:	7afb      	ldrb	r3, [r7, #11]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6979      	ldr	r1, [r7, #20]
 8004786:	4618      	mov	r0, r3
 8004788:	f003 fc50 	bl	800802c <USB_EPStartXfer>
 800478c:	e005      	b.n	800479a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6979      	ldr	r1, [r7, #20]
 8004794:	4618      	mov	r0, r3
 8004796:	f003 fc49 	bl	800802c <USB_EPStartXfer>
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	f003 0207 	and.w	r2, r3, #7
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	440b      	add	r3, r1
 80047c2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
 80047de:	460b      	mov	r3, r1
 80047e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e2:	7afb      	ldrb	r3, [r7, #11]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2201      	movs	r2, #1
 800481c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800481e:	7afb      	ldrb	r3, [r7, #11]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	b2da      	uxtb	r2, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800482a:	7afb      	ldrb	r3, [r7, #11]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6979      	ldr	r1, [r7, #20]
 800483a:	4618      	mov	r0, r3
 800483c:	f003 fbf6 	bl	800802c <USB_EPStartXfer>
 8004840:	e005      	b.n	800484e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6979      	ldr	r1, [r7, #20]
 8004848:	4618      	mov	r0, r3
 800484a:	f003 fbef 	bl	800802c <USB_EPStartXfer>
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	f003 0207 	and.w	r2, r3, #7
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d901      	bls.n	8004876 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e04c      	b.n	8004910 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800487a:	2b00      	cmp	r3, #0
 800487c:	da0e      	bge.n	800489c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4413      	add	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	705a      	strb	r2, [r3, #1]
 800489a:	e00c      	b.n	80048b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_PCD_EP_SetStall+0x7e>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e01c      	b.n	8004910 <HAL_PCD_EP_SetStall+0xb8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f005 f9d9 	bl	8009c9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d108      	bne.n	8004906 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f005 fafe 	bl	8009f02 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	f003 020f 	and.w	r2, r3, #15
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	429a      	cmp	r2, r3
 8004930:	d901      	bls.n	8004936 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e040      	b.n	80049b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800493a:	2b00      	cmp	r3, #0
 800493c:	da0e      	bge.n	800495c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	705a      	strb	r2, [r3, #1]
 800495a:	e00e      	b.n	800497a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	f003 0207 	and.w	r2, r3, #7
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_PCD_EP_ClrStall+0x82>
 8004996:	2302      	movs	r3, #2
 8004998:	e00e      	b.n	80049b8 <HAL_PCD_EP_ClrStall+0xa0>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f005 f9c7 	bl	8009d3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08e      	sub	sp, #56	; 0x38
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049c8:	e2ec      	b.n	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80049e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f040 8161 	bne.w	8004cac <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80049ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d152      	bne.n	8004a9a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	81fb      	strh	r3, [r7, #14]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	89fb      	ldrh	r3, [r7, #14]
 8004a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3328      	adds	r3, #40	; 0x28
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4413      	add	r3, r2
 8004a32:	3302      	adds	r3, #2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	441a      	add	r2, r3
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a58:	2100      	movs	r1, #0
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f007 f8ab 	bl	800bbb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 829b 	beq.w	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 8296 	bne.w	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	b292      	uxth	r2, r2
 8004a8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a98:	e284      	b.n	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004aaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d034      	beq.n	8004b1e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3306      	adds	r3, #6
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f005 fa55 	bl	8009fa2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b04:	4013      	ands	r3, r2
 8004b06:	823b      	strh	r3, [r7, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	8a3a      	ldrh	r2, [r7, #16]
 8004b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b12:	b292      	uxth	r2, r2
 8004b14:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f007 f820 	bl	800bb5c <HAL_PCD_SetupStageCallback>
 8004b1c:	e242      	b.n	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b1e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f280 823e 	bge.w	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b34:	4013      	ands	r3, r2
 8004b36:	83bb      	strh	r3, [r7, #28]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	8bba      	ldrh	r2, [r7, #28]
 8004b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b42:	b292      	uxth	r2, r2
 8004b44:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	3306      	adds	r3, #6
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d019      	beq.n	8004bae <PCD_EP_ISR_Handler+0x1ee>
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d015      	beq.n	8004bae <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	6959      	ldr	r1, [r3, #20]
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f005 fa05 	bl	8009fa2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	441a      	add	r2, r3
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f006 ffe9 	bl	800bb80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 81f2 	bne.w	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d112      	bne.n	8004c0e <PCD_EP_ISR_Handler+0x24e>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	e02f      	b.n	8004c6e <PCD_EP_ISR_Handler+0x2ae>
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b3e      	cmp	r3, #62	; 0x3e
 8004c14:	d813      	bhi.n	8004c3e <PCD_EP_ISR_Handler+0x27e>
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <PCD_EP_ISR_Handler+0x270>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	029b      	lsls	r3, r3, #10
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	e017      	b.n	8004c6e <PCD_EP_ISR_Handler+0x2ae>
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d102      	bne.n	8004c58 <PCD_EP_ISR_Handler+0x298>
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	3b01      	subs	r3, #1
 8004c56:	633b      	str	r3, [r7, #48]	; 0x30
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7e:	827b      	strh	r3, [r7, #18]
 8004c80:	8a7b      	ldrh	r3, [r7, #18]
 8004c82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c86:	827b      	strh	r3, [r7, #18]
 8004c88:	8a7b      	ldrh	r3, [r7, #18]
 8004c8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c8e:	827b      	strh	r3, [r7, #18]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	8a7b      	ldrh	r3, [r7, #18]
 8004c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	8013      	strh	r3, [r2, #0]
 8004caa:	e17b      	b.n	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004cbe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f280 80ea 	bge.w	8004e9c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004cde:	4013      	ands	r3, r2
 8004ce0:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004cf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cf6:	b292      	uxth	r2, r2
 8004cf8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004cfa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	7b1b      	ldrb	r3, [r3, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d122      	bne.n	8004d5e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3306      	adds	r3, #6
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d40:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004d42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8087 	beq.w	8004e58 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	6959      	ldr	r1, [r3, #20]
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	88da      	ldrh	r2, [r3, #6]
 8004d56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d58:	f005 f923 	bl	8009fa2 <USB_ReadPMA>
 8004d5c:	e07c      	b.n	8004e58 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	78db      	ldrb	r3, [r3, #3]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d108      	bne.n	8004d78 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004d66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f927 	bl	8004fc0 <HAL_PCD_EP_DB_Receive>
 8004d72:	4603      	mov	r3, r0
 8004d74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d76:	e06f      	b.n	8004e58 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	441a      	add	r2, r3
 8004da2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d021      	beq.n	8004e16 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4413      	add	r3, r2
 8004de6:	3302      	adds	r3, #2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dfa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004dfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d02a      	beq.n	8004e58 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	6959      	ldr	r1, [r3, #20]
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	891a      	ldrh	r2, [r3, #8]
 8004e0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e10:	f005 f8c7 	bl	8009fa2 <USB_ReadPMA>
 8004e14:	e020      	b.n	8004e58 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	3306      	adds	r3, #6
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e3e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004e40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	6959      	ldr	r1, [r3, #20]
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	895a      	ldrh	r2, [r3, #10]
 8004e52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e54:	f005 f8a5 	bl	8009fa2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e5e:	441a      	add	r2, r3
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e6a:	441a      	add	r2, r3
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <PCD_EP_ISR_Handler+0x4c2>
 8004e78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d206      	bcs.n	8004e90 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	4619      	mov	r1, r3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f006 fe79 	bl	800bb80 <HAL_PCD_DataOutStageCallback>
 8004e8e:	e005      	b.n	8004e9c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e96:	4618      	mov	r0, r3
 8004e98:	f003 f8c8 	bl	800802c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d07e      	beq.n	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004ea6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed4:	843b      	strh	r3, [r7, #32]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	441a      	add	r2, r3
 8004ee4:	8c3b      	ldrh	r3, [r7, #32]
 8004ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	78db      	ldrb	r3, [r3, #3]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d00c      	beq.n	8004f14 <PCD_EP_ISR_Handler+0x554>
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	78db      	ldrb	r3, [r3, #3]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d146      	bne.n	8004f98 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004f0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d141      	bne.n	8004f98 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	3302      	adds	r3, #2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f3c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	8bfb      	ldrh	r3, [r7, #30]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d906      	bls.n	8004f56 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	8bfb      	ldrh	r3, [r7, #30]
 8004f4e:	1ad2      	subs	r2, r2, r3
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	619a      	str	r2, [r3, #24]
 8004f54:	e002      	b.n	8004f5c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	2200      	movs	r2, #0
 8004f5a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f006 fe23 	bl	800bbb6 <HAL_PCD_DataInStageCallback>
 8004f70:	e018      	b.n	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	8bfb      	ldrh	r3, [r7, #30]
 8004f78:	441a      	add	r2, r3
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	8bfb      	ldrh	r3, [r7, #30]
 8004f84:	441a      	add	r2, r3
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f90:	4618      	mov	r0, r3
 8004f92:	f003 f84b 	bl	800802c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004f96:	e005      	b.n	8004fa4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f91b 	bl	80051da <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	b21b      	sxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f6ff ad0a 	blt.w	80049ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3738      	adds	r7, #56	; 0x38
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d07e      	beq.n	80050d6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	3302      	adds	r3, #2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005000:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	8b7b      	ldrh	r3, [r7, #26]
 8005008:	429a      	cmp	r2, r3
 800500a:	d306      	bcc.n	800501a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	699a      	ldr	r2, [r3, #24]
 8005010:	8b7b      	ldrh	r3, [r7, #26]
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	619a      	str	r2, [r3, #24]
 8005018:	e002      	b.n	8005020 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2200      	movs	r2, #0
 800501e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d123      	bne.n	8005070 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	833b      	strh	r3, [r7, #24]
 8005044:	8b3b      	ldrh	r3, [r7, #24]
 8005046:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800504a:	833b      	strh	r3, [r7, #24]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	8b3b      	ldrh	r3, [r7, #24]
 800505c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506c:	b29b      	uxth	r3, r3
 800506e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01f      	beq.n	80050ba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005094:	82fb      	strh	r3, [r7, #22]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	8afb      	ldrh	r3, [r7, #22]
 80050a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050ba:	8b7b      	ldrh	r3, [r7, #26]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8087 	beq.w	80051d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6959      	ldr	r1, [r3, #20]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	891a      	ldrh	r2, [r3, #8]
 80050ce:	8b7b      	ldrh	r3, [r7, #26]
 80050d0:	f004 ff67 	bl	8009fa2 <USB_ReadPMA>
 80050d4:	e07c      	b.n	80051d0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050de:	b29b      	uxth	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	3306      	adds	r3, #6
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	8b7b      	ldrh	r3, [r7, #26]
 8005106:	429a      	cmp	r2, r3
 8005108:	d306      	bcc.n	8005118 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	8b7b      	ldrh	r3, [r7, #26]
 8005110:	1ad2      	subs	r2, r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	619a      	str	r2, [r3, #24]
 8005116:	e002      	b.n	800511e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2200      	movs	r2, #0
 800511c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d123      	bne.n	800516e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	83fb      	strh	r3, [r7, #30]
 8005142:	8bfb      	ldrh	r3, [r7, #30]
 8005144:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005148:	83fb      	strh	r3, [r7, #30]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	441a      	add	r2, r3
 8005158:	8bfb      	ldrh	r3, [r7, #30]
 800515a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516a:	b29b      	uxth	r3, r3
 800516c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d11f      	bne.n	80051b8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	83bb      	strh	r3, [r7, #28]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	441a      	add	r2, r3
 80051a2:	8bbb      	ldrh	r3, [r7, #28]
 80051a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80051b8:	8b7b      	ldrh	r3, [r7, #26]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6959      	ldr	r1, [r3, #20]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	895a      	ldrh	r2, [r3, #10]
 80051ca:	8b7b      	ldrh	r3, [r7, #26]
 80051cc:	f004 fee9 	bl	8009fa2 <USB_ReadPMA>
    }
  }

  return count;
 80051d0:	8b7b      	ldrh	r3, [r7, #26]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b0a2      	sub	sp, #136	; 0x88
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	4613      	mov	r3, r2
 80051e6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 81c7 	beq.w	8005582 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4413      	add	r3, r2
 8005208:	3302      	adds	r3, #2
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800521c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005228:	429a      	cmp	r2, r3
 800522a:	d907      	bls.n	800523c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005234:	1ad2      	subs	r2, r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	619a      	str	r2, [r3, #24]
 800523a:	e002      	b.n	8005242 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2200      	movs	r2, #0
 8005240:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f040 80b9 	bne.w	80053be <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d126      	bne.n	80052a2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005262:	b29b      	uxth	r3, r3
 8005264:	461a      	mov	r2, r3
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	4413      	add	r3, r2
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	011a      	lsls	r2, r3, #4
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	4413      	add	r3, r2
 8005276:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29b      	uxth	r3, r3
 8005282:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005286:	b29a      	uxth	r2, r3
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529a:	b29a      	uxth	r2, r3
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	801a      	strh	r2, [r3, #0]
 80052a0:	e01a      	b.n	80052d8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d116      	bne.n	80052d8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	633b      	str	r3, [r7, #48]	; 0x30
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	4413      	add	r3, r2
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	011a      	lsls	r2, r3, #4
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	4413      	add	r3, r2
 80052cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	2200      	movs	r2, #0
 80052d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	623b      	str	r3, [r7, #32]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d126      	bne.n	8005334 <HAL_PCD_EP_DB_Transmit+0x15a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	4413      	add	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	011a      	lsls	r2, r3, #4
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	4413      	add	r3, r2
 8005308:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005318:	b29a      	uxth	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532c:	b29a      	uxth	r2, r3
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e017      	b.n	8005364 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d113      	bne.n	8005364 <HAL_PCD_EP_DB_Transmit+0x18a>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005344:	b29b      	uxth	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	4413      	add	r3, r2
 800534c:	623b      	str	r3, [r7, #32]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	011a      	lsls	r2, r3, #4
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	4413      	add	r3, r2
 8005358:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2200      	movs	r2, #0
 8005362:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	4619      	mov	r1, r3
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f006 fc23 	bl	800bbb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 82d4 	beq.w	8005924 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	827b      	strh	r3, [r7, #18]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	441a      	add	r2, r3
 80053a6:	8a7b      	ldrh	r3, [r7, #18]
 80053a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	8013      	strh	r3, [r2, #0]
 80053bc:	e2b2      	b.n	8005924 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d021      	beq.n	800540c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	441a      	add	r2, r3
 80053f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005408:	b29b      	uxth	r3, r3
 800540a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005412:	2b01      	cmp	r3, #1
 8005414:	f040 8286 	bne.w	8005924 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005420:	441a      	add	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	69da      	ldr	r2, [r3, #28]
 800542a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800542e:	441a      	add	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	429a      	cmp	r2, r3
 800543e:	d309      	bcc.n	8005454 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800544c:	1ad2      	subs	r2, r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	621a      	str	r2, [r3, #32]
 8005452:	e015      	b.n	8005480 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d107      	bne.n	800546c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800545c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005460:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800546a:	e009      	b.n	8005480 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d155      	bne.n	8005534 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	63bb      	str	r3, [r7, #56]	; 0x38
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005496:	b29b      	uxth	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	4413      	add	r3, r2
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	011a      	lsls	r2, r3, #4
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	4413      	add	r3, r2
 80054aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
 80054b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d112      	bne.n	80054dc <HAL_PCD_EP_DB_Transmit+0x302>
 80054b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	e047      	b.n	800556c <HAL_PCD_EP_DB_Transmit+0x392>
 80054dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054de:	2b3e      	cmp	r3, #62	; 0x3e
 80054e0:	d811      	bhi.n	8005506 <HAL_PCD_EP_DB_Transmit+0x32c>
 80054e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80054f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f4:	3301      	adds	r3, #1
 80054f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	b29a      	uxth	r2, r3
 8005500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e032      	b.n	800556c <HAL_PCD_EP_DB_Transmit+0x392>
 8005506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	64bb      	str	r3, [r7, #72]	; 0x48
 800550c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <HAL_PCD_EP_DB_Transmit+0x342>
 8005516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005518:	3b01      	subs	r3, #1
 800551a:	64bb      	str	r3, [r7, #72]	; 0x48
 800551c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800551e:	b29b      	uxth	r3, r3
 8005520:	029b      	lsls	r3, r3, #10
 8005522:	b29b      	uxth	r3, r3
 8005524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552c:	b29a      	uxth	r2, r3
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e01b      	b.n	800556c <HAL_PCD_EP_DB_Transmit+0x392>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d117      	bne.n	800556c <HAL_PCD_EP_DB_Transmit+0x392>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	643b      	str	r3, [r7, #64]	; 0x40
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005550:	4413      	add	r3, r2
 8005552:	643b      	str	r3, [r7, #64]	; 0x40
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	011a      	lsls	r2, r3, #4
 800555a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555c:	4413      	add	r3, r2
 800555e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005566:	b29a      	uxth	r2, r3
 8005568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6959      	ldr	r1, [r3, #20]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	891a      	ldrh	r2, [r3, #8]
 8005578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	f004 fccc 	bl	8009f18 <USB_WritePMA>
 8005580:	e1d0      	b.n	8005924 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558a:	b29b      	uxth	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4413      	add	r3, r2
 8005596:	3306      	adds	r3, #6
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	6812      	ldr	r2, [r2, #0]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d307      	bcc.n	80055ca <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055c2:	1ad2      	subs	r2, r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	619a      	str	r2, [r3, #24]
 80055c8:	e002      	b.n	80055d0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2200      	movs	r2, #0
 80055ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f040 80c4 	bne.w	8005762 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d126      	bne.n	8005630 <HAL_PCD_EP_DB_Transmit+0x456>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f6:	4413      	add	r3, r2
 80055f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	011a      	lsls	r2, r3, #4
 8005600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005602:	4413      	add	r3, r2
 8005604:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005608:	66bb      	str	r3, [r7, #104]	; 0x68
 800560a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005614:	b29a      	uxth	r2, r3
 8005616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005628:	b29a      	uxth	r2, r3
 800562a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800562c:	801a      	strh	r2, [r3, #0]
 800562e:	e01a      	b.n	8005666 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d116      	bne.n	8005666 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	677b      	str	r3, [r7, #116]	; 0x74
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005646:	b29b      	uxth	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800564c:	4413      	add	r3, r2
 800564e:	677b      	str	r3, [r7, #116]	; 0x74
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	011a      	lsls	r2, r3, #4
 8005656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005658:	4413      	add	r3, r2
 800565a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800565e:	673b      	str	r3, [r7, #112]	; 0x70
 8005660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005662:	2200      	movs	r2, #0
 8005664:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	67bb      	str	r3, [r7, #120]	; 0x78
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d12f      	bne.n	80056d4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005684:	b29b      	uxth	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800568c:	4413      	add	r3, r2
 800568e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	011a      	lsls	r2, r3, #4
 8005698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800569c:	4413      	add	r3, r2
 800569e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056b8:	801a      	strh	r2, [r3, #0]
 80056ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e017      	b.n	8005704 <HAL_PCD_EP_DB_Transmit+0x52a>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d113      	bne.n	8005704 <HAL_PCD_EP_DB_Transmit+0x52a>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ea:	4413      	add	r3, r2
 80056ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	011a      	lsls	r2, r3, #4
 80056f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056f6:	4413      	add	r3, r2
 80056f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005700:	2200      	movs	r2, #0
 8005702:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4619      	mov	r1, r3
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f006 fa53 	bl	800bbb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005716:	2b00      	cmp	r3, #0
 8005718:	f040 8104 	bne.w	8005924 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800574c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575c:	b29b      	uxth	r3, r3
 800575e:	8013      	strh	r3, [r2, #0]
 8005760:	e0e0      	b.n	8005924 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d121      	bne.n	80057b0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	441a      	add	r2, r3
 8005798:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800579c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	f040 80b4 	bne.w	8005924 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	695a      	ldr	r2, [r3, #20]
 80057c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057c4:	441a      	add	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	69da      	ldr	r2, [r3, #28]
 80057ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057d2:	441a      	add	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6a1a      	ldr	r2, [r3, #32]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d309      	bcc.n	80057f8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6a1a      	ldr	r2, [r3, #32]
 80057ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f0:	1ad2      	subs	r2, r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	621a      	str	r2, [r3, #32]
 80057f6:	e015      	b.n	8005824 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d107      	bne.n	8005810 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005800:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005804:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800580e:	e009      	b.n	8005824 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2200      	movs	r2, #0
 800581a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	667b      	str	r3, [r7, #100]	; 0x64
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d155      	bne.n	80058de <HAL_PCD_EP_DB_Transmit+0x704>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005840:	b29b      	uxth	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005846:	4413      	add	r3, r2
 8005848:	65fb      	str	r3, [r7, #92]	; 0x5c
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	011a      	lsls	r2, r3, #4
 8005850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005852:	4413      	add	r3, r2
 8005854:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005858:	65bb      	str	r3, [r7, #88]	; 0x58
 800585a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585c:	2b00      	cmp	r3, #0
 800585e:	d112      	bne.n	8005886 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800586a:	b29a      	uxth	r2, r3
 800586c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587e:	b29a      	uxth	r2, r3
 8005880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	e044      	b.n	8005910 <HAL_PCD_EP_DB_Transmit+0x736>
 8005886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005888:	2b3e      	cmp	r3, #62	; 0x3e
 800588a:	d811      	bhi.n	80058b0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800588c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	657b      	str	r3, [r7, #84]	; 0x54
 8005892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800589c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800589e:	3301      	adds	r3, #1
 80058a0:	657b      	str	r3, [r7, #84]	; 0x54
 80058a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	029b      	lsls	r3, r3, #10
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	e02f      	b.n	8005910 <HAL_PCD_EP_DB_Transmit+0x736>
 80058b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	657b      	str	r3, [r7, #84]	; 0x54
 80058b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d102      	bne.n	80058c6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80058c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c2:	3b01      	subs	r3, #1
 80058c4:	657b      	str	r3, [r7, #84]	; 0x54
 80058c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	029b      	lsls	r3, r3, #10
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e018      	b.n	8005910 <HAL_PCD_EP_DB_Transmit+0x736>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d114      	bne.n	8005910 <HAL_PCD_EP_DB_Transmit+0x736>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f4:	4413      	add	r3, r2
 80058f6:	667b      	str	r3, [r7, #100]	; 0x64
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	011a      	lsls	r2, r3, #4
 80058fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005900:	4413      	add	r3, r2
 8005902:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005906:	663b      	str	r3, [r7, #96]	; 0x60
 8005908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590a:	b29a      	uxth	r2, r3
 800590c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800590e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6959      	ldr	r1, [r3, #20]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	895a      	ldrh	r2, [r3, #10]
 800591c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591e:	b29b      	uxth	r3, r3
 8005920:	f004 fafa 	bl	8009f18 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800593e:	823b      	strh	r3, [r7, #16]
 8005940:	8a3b      	ldrh	r3, [r7, #16]
 8005942:	f083 0310 	eor.w	r3, r3, #16
 8005946:	823b      	strh	r3, [r7, #16]
 8005948:	8a3b      	ldrh	r3, [r7, #16]
 800594a:	f083 0320 	eor.w	r3, r3, #32
 800594e:	823b      	strh	r3, [r7, #16]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	441a      	add	r2, r3
 800595e:	8a3b      	ldrh	r3, [r7, #16]
 8005960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005970:	b29b      	uxth	r3, r3
 8005972:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3788      	adds	r7, #136	; 0x88
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800597e:	b480      	push	{r7}
 8005980:	b087      	sub	sp, #28
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	607b      	str	r3, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	817b      	strh	r3, [r7, #10]
 800598c:	4613      	mov	r3, r2
 800598e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005990:	897b      	ldrh	r3, [r7, #10]
 8005992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800599c:	897b      	ldrh	r3, [r7, #10]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e009      	b.n	80059c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059b4:	897a      	ldrh	r2, [r7, #10]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80059c8:	893b      	ldrh	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d107      	bne.n	80059de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2200      	movs	r2, #0
 80059d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	80da      	strh	r2, [r3, #6]
 80059dc:	e00b      	b.n	80059f6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2201      	movs	r2, #1
 80059e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	0c1b      	lsrs	r3, r3, #16
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e272      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8087 	beq.w	8005b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a24:	4b92      	ldr	r3, [pc, #584]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d00c      	beq.n	8005a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a30:	4b8f      	ldr	r3, [pc, #572]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d112      	bne.n	8005a62 <HAL_RCC_OscConfig+0x5e>
 8005a3c:	4b8c      	ldr	r3, [pc, #560]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a48:	d10b      	bne.n	8005a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a4a:	4b89      	ldr	r3, [pc, #548]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d06c      	beq.n	8005b30 <HAL_RCC_OscConfig+0x12c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d168      	bne.n	8005b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e24c      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6a:	d106      	bne.n	8005a7a <HAL_RCC_OscConfig+0x76>
 8005a6c:	4b80      	ldr	r3, [pc, #512]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a7f      	ldr	r2, [pc, #508]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	e02e      	b.n	8005ad8 <HAL_RCC_OscConfig+0xd4>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCC_OscConfig+0x98>
 8005a82:	4b7b      	ldr	r3, [pc, #492]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a7a      	ldr	r2, [pc, #488]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4b78      	ldr	r3, [pc, #480]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a77      	ldr	r2, [pc, #476]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e01d      	b.n	8005ad8 <HAL_RCC_OscConfig+0xd4>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0xbc>
 8005aa6:	4b72      	ldr	r3, [pc, #456]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a71      	ldr	r2, [pc, #452]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b6f      	ldr	r3, [pc, #444]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a6e      	ldr	r2, [pc, #440]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0xd4>
 8005ac0:	4b6b      	ldr	r3, [pc, #428]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a6a      	ldr	r2, [pc, #424]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	4b68      	ldr	r3, [pc, #416]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a67      	ldr	r2, [pc, #412]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d013      	beq.n	8005b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae0:	f7fd f8b6 	bl	8002c50 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae8:	f7fd f8b2 	bl	8002c50 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b64      	cmp	r3, #100	; 0x64
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e200      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	4b5d      	ldr	r3, [pc, #372]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0xe4>
 8005b06:	e014      	b.n	8005b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b08:	f7fd f8a2 	bl	8002c50 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b10:	f7fd f89e 	bl	8002c50 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	; 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e1ec      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b22:	4b53      	ldr	r3, [pc, #332]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x10c>
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d063      	beq.n	8005c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b3e:	4b4c      	ldr	r3, [pc, #304]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00b      	beq.n	8005b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b4a:	4b49      	ldr	r3, [pc, #292]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d11c      	bne.n	8005b90 <HAL_RCC_OscConfig+0x18c>
 8005b56:	4b46      	ldr	r3, [pc, #280]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d116      	bne.n	8005b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b62:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_RCC_OscConfig+0x176>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e1c0      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7a:	4b3d      	ldr	r3, [pc, #244]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4939      	ldr	r1, [pc, #228]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8e:	e03a      	b.n	8005c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d020      	beq.n	8005bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b98:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <HAL_RCC_OscConfig+0x270>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9e:	f7fd f857 	bl	8002c50 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba6:	f7fd f853 	bl	8002c50 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e1a1      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb8:	4b2d      	ldr	r3, [pc, #180]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0f0      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc4:	4b2a      	ldr	r3, [pc, #168]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4927      	ldr	r1, [pc, #156]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	600b      	str	r3, [r1, #0]
 8005bd8:	e015      	b.n	8005c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bda:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <HAL_RCC_OscConfig+0x270>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be0:	f7fd f836 	bl	8002c50 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be8:	f7fd f832 	bl	8002c50 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e180      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfa:	4b1d      	ldr	r3, [pc, #116]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d03a      	beq.n	8005c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d019      	beq.n	8005c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1a:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <HAL_RCC_OscConfig+0x274>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c20:	f7fd f816 	bl	8002c50 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c28:	f7fd f812 	bl	8002c50 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e160      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <HAL_RCC_OscConfig+0x26c>)
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c46:	2001      	movs	r0, #1
 8005c48:	f000 fac4 	bl	80061d4 <RCC_Delay>
 8005c4c:	e01c      	b.n	8005c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <HAL_RCC_OscConfig+0x274>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c54:	f7fc fffc 	bl	8002c50 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c5a:	e00f      	b.n	8005c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c5c:	f7fc fff8 	bl	8002c50 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d908      	bls.n	8005c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e146      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
 8005c6e:	bf00      	nop
 8005c70:	40021000 	.word	0x40021000
 8005c74:	42420000 	.word	0x42420000
 8005c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c7c:	4b92      	ldr	r3, [pc, #584]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e9      	bne.n	8005c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80a6 	beq.w	8005de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c9a:	4b8b      	ldr	r3, [pc, #556]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10d      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca6:	4b88      	ldr	r3, [pc, #544]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	4a87      	ldr	r2, [pc, #540]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	61d3      	str	r3, [r2, #28]
 8005cb2:	4b85      	ldr	r3, [pc, #532]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc2:	4b82      	ldr	r3, [pc, #520]	; (8005ecc <HAL_RCC_OscConfig+0x4c8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d118      	bne.n	8005d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cce:	4b7f      	ldr	r3, [pc, #508]	; (8005ecc <HAL_RCC_OscConfig+0x4c8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7e      	ldr	r2, [pc, #504]	; (8005ecc <HAL_RCC_OscConfig+0x4c8>)
 8005cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cda:	f7fc ffb9 	bl	8002c50 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce2:	f7fc ffb5 	bl	8002c50 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b64      	cmp	r3, #100	; 0x64
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e103      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf4:	4b75      	ldr	r3, [pc, #468]	; (8005ecc <HAL_RCC_OscConfig+0x4c8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d106      	bne.n	8005d16 <HAL_RCC_OscConfig+0x312>
 8005d08:	4b6f      	ldr	r3, [pc, #444]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	4a6e      	ldr	r2, [pc, #440]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6213      	str	r3, [r2, #32]
 8005d14:	e02d      	b.n	8005d72 <HAL_RCC_OscConfig+0x36e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCC_OscConfig+0x334>
 8005d1e:	4b6a      	ldr	r3, [pc, #424]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	4a69      	ldr	r2, [pc, #420]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d24:	f023 0301 	bic.w	r3, r3, #1
 8005d28:	6213      	str	r3, [r2, #32]
 8005d2a:	4b67      	ldr	r3, [pc, #412]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	4a66      	ldr	r2, [pc, #408]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d30:	f023 0304 	bic.w	r3, r3, #4
 8005d34:	6213      	str	r3, [r2, #32]
 8005d36:	e01c      	b.n	8005d72 <HAL_RCC_OscConfig+0x36e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b05      	cmp	r3, #5
 8005d3e:	d10c      	bne.n	8005d5a <HAL_RCC_OscConfig+0x356>
 8005d40:	4b61      	ldr	r3, [pc, #388]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	4a60      	ldr	r2, [pc, #384]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d46:	f043 0304 	orr.w	r3, r3, #4
 8005d4a:	6213      	str	r3, [r2, #32]
 8005d4c:	4b5e      	ldr	r3, [pc, #376]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	4a5d      	ldr	r2, [pc, #372]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d52:	f043 0301 	orr.w	r3, r3, #1
 8005d56:	6213      	str	r3, [r2, #32]
 8005d58:	e00b      	b.n	8005d72 <HAL_RCC_OscConfig+0x36e>
 8005d5a:	4b5b      	ldr	r3, [pc, #364]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	4a5a      	ldr	r2, [pc, #360]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d60:	f023 0301 	bic.w	r3, r3, #1
 8005d64:	6213      	str	r3, [r2, #32]
 8005d66:	4b58      	ldr	r3, [pc, #352]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	4a57      	ldr	r2, [pc, #348]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d6c:	f023 0304 	bic.w	r3, r3, #4
 8005d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d015      	beq.n	8005da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7a:	f7fc ff69 	bl	8002c50 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d80:	e00a      	b.n	8005d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d82:	f7fc ff65 	bl	8002c50 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e0b1      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d98:	4b4b      	ldr	r3, [pc, #300]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ee      	beq.n	8005d82 <HAL_RCC_OscConfig+0x37e>
 8005da4:	e014      	b.n	8005dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da6:	f7fc ff53 	bl	8002c50 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dac:	e00a      	b.n	8005dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dae:	f7fc ff4f 	bl	8002c50 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e09b      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc4:	4b40      	ldr	r3, [pc, #256]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1ee      	bne.n	8005dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d105      	bne.n	8005de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd6:	4b3c      	ldr	r3, [pc, #240]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	4a3b      	ldr	r2, [pc, #236]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8087 	beq.w	8005efa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dec:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f003 030c 	and.w	r3, r3, #12
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d061      	beq.n	8005ebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d146      	bne.n	8005e8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e00:	4b33      	ldr	r3, [pc, #204]	; (8005ed0 <HAL_RCC_OscConfig+0x4cc>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e06:	f7fc ff23 	bl	8002c50 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e0e:	f7fc ff1f 	bl	8002c50 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e06d      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e20:	4b29      	ldr	r3, [pc, #164]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f0      	bne.n	8005e0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e34:	d108      	bne.n	8005e48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e36:	4b24      	ldr	r3, [pc, #144]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	4921      	ldr	r1, [pc, #132]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e48:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a19      	ldr	r1, [r3, #32]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	491b      	ldr	r1, [pc, #108]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <HAL_RCC_OscConfig+0x4cc>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e66:	f7fc fef3 	bl	8002c50 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e6e:	f7fc feef 	bl	8002c50 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e03d      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e80:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x46a>
 8005e8c:	e035      	b.n	8005efa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8e:	4b10      	ldr	r3, [pc, #64]	; (8005ed0 <HAL_RCC_OscConfig+0x4cc>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fc fedc 	bl	8002c50 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e9c:	f7fc fed8 	bl	8002c50 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e026      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <HAL_RCC_OscConfig+0x4c4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x498>
 8005eba:	e01e      	b.n	8005efa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d107      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e019      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40007000 	.word	0x40007000
 8005ed0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCC_OscConfig+0x500>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d106      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d001      	beq.n	8005efa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40021000 	.word	0x40021000

08005f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0d0      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f1c:	4b6a      	ldr	r3, [pc, #424]	; (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d910      	bls.n	8005f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2a:	4b67      	ldr	r3, [pc, #412]	; (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 0207 	bic.w	r2, r3, #7
 8005f32:	4965      	ldr	r1, [pc, #404]	; (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b63      	ldr	r3, [pc, #396]	; (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0b8      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f64:	4b59      	ldr	r3, [pc, #356]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4a58      	ldr	r2, [pc, #352]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f7c:	4b53      	ldr	r3, [pc, #332]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4a52      	ldr	r2, [pc, #328]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f88:	4b50      	ldr	r3, [pc, #320]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	494d      	ldr	r1, [pc, #308]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d040      	beq.n	8006028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d107      	bne.n	8005fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fae:	4b47      	ldr	r3, [pc, #284]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d115      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e07f      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d107      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc6:	4b41      	ldr	r3, [pc, #260]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e073      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd6:	4b3d      	ldr	r3, [pc, #244]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e06b      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fe6:	4b39      	ldr	r3, [pc, #228]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f023 0203 	bic.w	r2, r3, #3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	4936      	ldr	r1, [pc, #216]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ff8:	f7fc fe2a 	bl	8002c50 <HAL_GetTick>
 8005ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffe:	e00a      	b.n	8006016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006000:	f7fc fe26 	bl	8002c50 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	f241 3288 	movw	r2, #5000	; 0x1388
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e053      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006016:	4b2d      	ldr	r3, [pc, #180]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f003 020c 	and.w	r2, r3, #12
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	429a      	cmp	r2, r3
 8006026:	d1eb      	bne.n	8006000 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006028:	4b27      	ldr	r3, [pc, #156]	; (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d210      	bcs.n	8006058 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006036:	4b24      	ldr	r3, [pc, #144]	; (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f023 0207 	bic.w	r2, r3, #7
 800603e:	4922      	ldr	r1, [pc, #136]	; (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	4313      	orrs	r3, r2
 8006044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006046:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e032      	b.n	80060be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006064:	4b19      	ldr	r3, [pc, #100]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	4916      	ldr	r1, [pc, #88]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8006072:	4313      	orrs	r3, r2
 8006074:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006082:	4b12      	ldr	r3, [pc, #72]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	490e      	ldr	r1, [pc, #56]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 8006092:	4313      	orrs	r3, r2
 8006094:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006096:	f000 f821 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 800609a:	4602      	mov	r2, r0
 800609c:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	490a      	ldr	r1, [pc, #40]	; (80060d0 <HAL_RCC_ClockConfig+0x1c8>)
 80060a8:	5ccb      	ldrb	r3, [r1, r3]
 80060aa:	fa22 f303 	lsr.w	r3, r2, r3
 80060ae:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <HAL_RCC_ClockConfig+0x1cc>)
 80060b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <HAL_RCC_ClockConfig+0x1d0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fc fd88 	bl	8002bcc <HAL_InitTick>

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40022000 	.word	0x40022000
 80060cc:	40021000 	.word	0x40021000
 80060d0:	0800c154 	.word	0x0800c154
 80060d4:	20000028 	.word	0x20000028
 80060d8:	2000002c 	.word	0x2000002c

080060dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060dc:	b490      	push	{r4, r7}
 80060de:	b08a      	sub	sp, #40	; 0x28
 80060e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80060e2:	4b29      	ldr	r3, [pc, #164]	; (8006188 <HAL_RCC_GetSysClockFreq+0xac>)
 80060e4:	1d3c      	adds	r4, r7, #4
 80060e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80060ec:	f240 2301 	movw	r3, #513	; 0x201
 80060f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	2300      	movs	r3, #0
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006106:	4b21      	ldr	r3, [pc, #132]	; (800618c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 030c 	and.w	r3, r3, #12
 8006112:	2b04      	cmp	r3, #4
 8006114:	d002      	beq.n	800611c <HAL_RCC_GetSysClockFreq+0x40>
 8006116:	2b08      	cmp	r3, #8
 8006118:	d003      	beq.n	8006122 <HAL_RCC_GetSysClockFreq+0x46>
 800611a:	e02b      	b.n	8006174 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800611c:	4b1c      	ldr	r3, [pc, #112]	; (8006190 <HAL_RCC_GetSysClockFreq+0xb4>)
 800611e:	623b      	str	r3, [r7, #32]
      break;
 8006120:	e02b      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	0c9b      	lsrs	r3, r3, #18
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	3328      	adds	r3, #40	; 0x28
 800612c:	443b      	add	r3, r7
 800612e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006132:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d012      	beq.n	8006164 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800613e:	4b13      	ldr	r3, [pc, #76]	; (800618c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	0c5b      	lsrs	r3, r3, #17
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	3328      	adds	r3, #40	; 0x28
 800614a:	443b      	add	r3, r7
 800614c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006150:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4a0e      	ldr	r2, [pc, #56]	; (8006190 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006156:	fb03 f202 	mul.w	r2, r3, r2
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
 8006162:	e004      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	4a0b      	ldr	r2, [pc, #44]	; (8006194 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006168:	fb02 f303 	mul.w	r3, r2, r3
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	623b      	str	r3, [r7, #32]
      break;
 8006172:	e002      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006174:	4b06      	ldr	r3, [pc, #24]	; (8006190 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006176:	623b      	str	r3, [r7, #32]
      break;
 8006178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800617a:	6a3b      	ldr	r3, [r7, #32]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3728      	adds	r7, #40	; 0x28
 8006180:	46bd      	mov	sp, r7
 8006182:	bc90      	pop	{r4, r7}
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	0800c0f0 	.word	0x0800c0f0
 800618c:	40021000 	.word	0x40021000
 8006190:	007a1200 	.word	0x007a1200
 8006194:	003d0900 	.word	0x003d0900

08006198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800619c:	4b02      	ldr	r3, [pc, #8]	; (80061a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800619e:	681b      	ldr	r3, [r3, #0]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr
 80061a8:	20000028 	.word	0x20000028

080061ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061b0:	f7ff fff2 	bl	8006198 <HAL_RCC_GetHCLKFreq>
 80061b4:	4602      	mov	r2, r0
 80061b6:	4b05      	ldr	r3, [pc, #20]	; (80061cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	0adb      	lsrs	r3, r3, #11
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	4903      	ldr	r1, [pc, #12]	; (80061d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c2:	5ccb      	ldrb	r3, [r1, r3]
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40021000 	.word	0x40021000
 80061d0:	0800c164 	.word	0x0800c164

080061d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061dc:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <RCC_Delay+0x34>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a0a      	ldr	r2, [pc, #40]	; (800620c <RCC_Delay+0x38>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	0a5b      	lsrs	r3, r3, #9
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061f0:	bf00      	nop
  }
  while (Delay --);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1e5a      	subs	r2, r3, #1
 80061f6:	60fa      	str	r2, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1f9      	bne.n	80061f0 <RCC_Delay+0x1c>
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr
 8006208:	20000028 	.word	0x20000028
 800620c:	10624dd3 	.word	0x10624dd3

08006210 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d07d      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800622c:	2300      	movs	r3, #0
 800622e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006230:	4b4f      	ldr	r3, [pc, #316]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10d      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800623c:	4b4c      	ldr	r3, [pc, #304]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	4a4b      	ldr	r2, [pc, #300]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006246:	61d3      	str	r3, [r2, #28]
 8006248:	4b49      	ldr	r3, [pc, #292]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006258:	4b46      	ldr	r3, [pc, #280]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d118      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006264:	4b43      	ldr	r3, [pc, #268]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a42      	ldr	r2, [pc, #264]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800626a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800626e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006270:	f7fc fcee 	bl	8002c50 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006276:	e008      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006278:	f7fc fcea 	bl	8002c50 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b64      	cmp	r3, #100	; 0x64
 8006284:	d901      	bls.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e06d      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800628a:	4b3a      	ldr	r3, [pc, #232]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006296:	4b36      	ldr	r3, [pc, #216]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d02e      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d027      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b4:	4b2e      	ldr	r3, [pc, #184]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062be:	4b2e      	ldr	r3, [pc, #184]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062c0:	2201      	movs	r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062c4:	4b2c      	ldr	r3, [pc, #176]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062ca:	4a29      	ldr	r2, [pc, #164]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d014      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062da:	f7fc fcb9 	bl	8002c50 <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e0:	e00a      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e2:	f7fc fcb5 	bl	8002c50 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e036      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f8:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0ee      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006304:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	4917      	ldr	r1, [pc, #92]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006312:	4313      	orrs	r3, r2
 8006314:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d105      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800631c:	4b14      	ldr	r3, [pc, #80]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4a13      	ldr	r2, [pc, #76]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006326:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006334:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	490b      	ldr	r1, [pc, #44]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006342:	4313      	orrs	r3, r2
 8006344:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b00      	cmp	r3, #0
 8006350:	d008      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	4904      	ldr	r1, [pc, #16]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006360:	4313      	orrs	r3, r2
 8006362:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40021000 	.word	0x40021000
 8006374:	40007000 	.word	0x40007000
 8006378:	42420440 	.word	0x42420440

0800637c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800637c:	b590      	push	{r4, r7, lr}
 800637e:	b08d      	sub	sp, #52	; 0x34
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006384:	4b58      	ldr	r3, [pc, #352]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006386:	f107 040c 	add.w	r4, r7, #12
 800638a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800638c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006390:	f240 2301 	movw	r3, #513	; 0x201
 8006394:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
 800639a:	2300      	movs	r3, #0
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639e:	2300      	movs	r3, #0
 80063a0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	2300      	movs	r3, #0
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	d00a      	beq.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	f200 808e 	bhi.w	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d049      	beq.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d079      	beq.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80063c4:	e086      	b.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80063c6:	4b49      	ldr	r3, [pc, #292]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80063cc:	4b47      	ldr	r3, [pc, #284]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d07f      	beq.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	0c9b      	lsrs	r3, r3, #18
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	3330      	adds	r3, #48	; 0x30
 80063e2:	443b      	add	r3, r7
 80063e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80063e8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d017      	beq.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80063f4:	4b3d      	ldr	r3, [pc, #244]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	0c5b      	lsrs	r3, r3, #17
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	3330      	adds	r3, #48	; 0x30
 8006400:	443b      	add	r3, r7
 8006402:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006412:	4a37      	ldr	r2, [pc, #220]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	fbb2 f2f3 	udiv	r2, r2, r3
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	fb02 f303 	mul.w	r3, r2, r3
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006422:	e004      	b.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	4a33      	ldr	r2, [pc, #204]	; (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006428:	fb02 f303 	mul.w	r3, r2, r3
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800642e:	4b2f      	ldr	r3, [pc, #188]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800643a:	d102      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006440:	e04a      	b.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	4a2c      	ldr	r2, [pc, #176]	; (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006448:	fba2 2303 	umull	r2, r3, r2, r3
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006450:	e042      	b.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006452:	4b26      	ldr	r3, [pc, #152]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006462:	d108      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800646e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006472:	62bb      	str	r3, [r7, #40]	; 0x28
 8006474:	e01f      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006480:	d109      	bne.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006482:	4b1a      	ldr	r3, [pc, #104]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800648e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
 8006494:	e00f      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a0:	d11c      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80064a2:	4b12      	ldr	r3, [pc, #72]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d016      	beq.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80064ae:	f24f 4324 	movw	r3, #62500	; 0xf424
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064b4:	e012      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80064b6:	e011      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80064b8:	f7ff fe78 	bl	80061ac <HAL_RCC_GetPCLK2Freq>
 80064bc:	4602      	mov	r2, r0
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	0b9b      	lsrs	r3, r3, #14
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	3301      	adds	r3, #1
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064d2:	e004      	b.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80064d4:	bf00      	nop
 80064d6:	e002      	b.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80064d8:	bf00      	nop
 80064da:	e000      	b.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80064dc:	bf00      	nop
    }
  }
  return (frequency);
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3734      	adds	r7, #52	; 0x34
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd90      	pop	{r4, r7, pc}
 80064e8:	0800c100 	.word	0x0800c100
 80064ec:	40021000 	.word	0x40021000
 80064f0:	007a1200 	.word	0x007a1200
 80064f4:	003d0900 	.word	0x003d0900
 80064f8:	aaaaaaab 	.word	0xaaaaaaab

080064fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e041      	b.n	8006592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fc fa3e 	bl	80029a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3304      	adds	r3, #4
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f000 fca0 	bl	8006e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d001      	beq.n	80065b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e032      	b.n	800661a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a18      	ldr	r2, [pc, #96]	; (8006624 <HAL_TIM_Base_Start+0x88>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00e      	beq.n	80065e4 <HAL_TIM_Base_Start+0x48>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ce:	d009      	beq.n	80065e4 <HAL_TIM_Base_Start+0x48>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a14      	ldr	r2, [pc, #80]	; (8006628 <HAL_TIM_Base_Start+0x8c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_TIM_Base_Start+0x48>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a13      	ldr	r2, [pc, #76]	; (800662c <HAL_TIM_Base_Start+0x90>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d111      	bne.n	8006608 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b06      	cmp	r3, #6
 80065f4:	d010      	beq.n	8006618 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0201 	orr.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006606:	e007      	b.n	8006618 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	40012c00 	.word	0x40012c00
 8006628:	40000400 	.word	0x40000400
 800662c:	40000800 	.word	0x40000800

08006630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b01      	cmp	r3, #1
 8006642:	d001      	beq.n	8006648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e03a      	b.n	80066be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <HAL_TIM_Base_Start_IT+0x98>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x58>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006672:	d009      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x58>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a14      	ldr	r2, [pc, #80]	; (80066cc <HAL_TIM_Base_Start_IT+0x9c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <HAL_TIM_Base_Start_IT+0x58>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a13      	ldr	r2, [pc, #76]	; (80066d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d111      	bne.n	80066ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b06      	cmp	r3, #6
 8006698:	d010      	beq.n	80066bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0201 	orr.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066aa:	e007      	b.n	80066bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800

080066d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6a1a      	ldr	r2, [r3, #32]
 80066f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10f      	bne.n	800671c <HAL_TIM_Base_Stop_IT+0x48>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	f240 4344 	movw	r3, #1092	; 0x444
 8006706:	4013      	ands	r3, r2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d107      	bne.n	800671c <HAL_TIM_Base_Stop_IT+0x48>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr

08006730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e041      	b.n	80067c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f839 	bl	80067ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3304      	adds	r3, #4
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f000 fb86 	bl	8006e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr

080067e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <HAL_TIM_PWM_Start+0x24>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	e022      	b.n	800684a <HAL_TIM_PWM_Start+0x6a>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b04      	cmp	r3, #4
 8006808:	d109      	bne.n	800681e <HAL_TIM_PWM_Start+0x3e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e015      	b.n	800684a <HAL_TIM_PWM_Start+0x6a>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d109      	bne.n	8006838 <HAL_TIM_PWM_Start+0x58>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	e008      	b.n	800684a <HAL_TIM_PWM_Start+0x6a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	bf14      	ite	ne
 8006844:	2301      	movne	r3, #1
 8006846:	2300      	moveq	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e05e      	b.n	8006910 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <HAL_TIM_PWM_Start+0x82>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006860:	e013      	b.n	800688a <HAL_TIM_PWM_Start+0xaa>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b04      	cmp	r3, #4
 8006866:	d104      	bne.n	8006872 <HAL_TIM_PWM_Start+0x92>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006870:	e00b      	b.n	800688a <HAL_TIM_PWM_Start+0xaa>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d104      	bne.n	8006882 <HAL_TIM_PWM_Start+0xa2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006880:	e003      	b.n	800688a <HAL_TIM_PWM_Start+0xaa>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2201      	movs	r2, #1
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fd74 	bl	8007380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1e      	ldr	r2, [pc, #120]	; (8006918 <HAL_TIM_PWM_Start+0x138>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d107      	bne.n	80068b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a18      	ldr	r2, [pc, #96]	; (8006918 <HAL_TIM_PWM_Start+0x138>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <HAL_TIM_PWM_Start+0xfa>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c4:	d009      	beq.n	80068da <HAL_TIM_PWM_Start+0xfa>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a14      	ldr	r2, [pc, #80]	; (800691c <HAL_TIM_PWM_Start+0x13c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_TIM_PWM_Start+0xfa>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a12      	ldr	r2, [pc, #72]	; (8006920 <HAL_TIM_PWM_Start+0x140>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d111      	bne.n	80068fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b06      	cmp	r3, #6
 80068ea:	d010      	beq.n	800690e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fc:	e007      	b.n	800690e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40000400 	.word	0x40000400
 8006920:	40000800 	.word	0x40000800

08006924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b02      	cmp	r3, #2
 8006938:	d122      	bne.n	8006980 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b02      	cmp	r3, #2
 8006946:	d11b      	bne.n	8006980 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0202 	mvn.w	r2, #2
 8006950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa6f 	bl	8006e4a <HAL_TIM_IC_CaptureCallback>
 800696c:	e005      	b.n	800697a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa62 	bl	8006e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa71 	bl	8006e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b04      	cmp	r3, #4
 800698c:	d122      	bne.n	80069d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b04      	cmp	r3, #4
 800699a:	d11b      	bne.n	80069d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f06f 0204 	mvn.w	r2, #4
 80069a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2202      	movs	r2, #2
 80069aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa45 	bl	8006e4a <HAL_TIM_IC_CaptureCallback>
 80069c0:	e005      	b.n	80069ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa38 	bl	8006e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fa47 	bl	8006e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d122      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d11b      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0208 	mvn.w	r2, #8
 80069f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2204      	movs	r2, #4
 80069fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa1b 	bl	8006e4a <HAL_TIM_IC_CaptureCallback>
 8006a14:	e005      	b.n	8006a22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa0e 	bl	8006e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa1d 	bl	8006e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	2b10      	cmp	r3, #16
 8006a34:	d122      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d11b      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0210 	mvn.w	r2, #16
 8006a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2208      	movs	r2, #8
 8006a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f9f1 	bl	8006e4a <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f9e4 	bl	8006e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f9f3 	bl	8006e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d10e      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d107      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0201 	mvn.w	r2, #1
 8006aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fa f850 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b80      	cmp	r3, #128	; 0x80
 8006ab4:	d10e      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac0:	2b80      	cmp	r3, #128	; 0x80
 8006ac2:	d107      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fce1 	bl	8007496 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b40      	cmp	r3, #64	; 0x40
 8006ae0:	d10e      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b40      	cmp	r3, #64	; 0x40
 8006aee:	d107      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9b7 	bl	8006e6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d10e      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d107      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0220 	mvn.w	r2, #32
 8006b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fcac 	bl	8007484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e0ac      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b0c      	cmp	r3, #12
 8006b5a:	f200 809f 	bhi.w	8006c9c <HAL_TIM_PWM_ConfigChannel+0x168>
 8006b5e:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006b99 	.word	0x08006b99
 8006b68:	08006c9d 	.word	0x08006c9d
 8006b6c:	08006c9d 	.word	0x08006c9d
 8006b70:	08006c9d 	.word	0x08006c9d
 8006b74:	08006bd9 	.word	0x08006bd9
 8006b78:	08006c9d 	.word	0x08006c9d
 8006b7c:	08006c9d 	.word	0x08006c9d
 8006b80:	08006c9d 	.word	0x08006c9d
 8006b84:	08006c1b 	.word	0x08006c1b
 8006b88:	08006c9d 	.word	0x08006c9d
 8006b8c:	08006c9d 	.word	0x08006c9d
 8006b90:	08006c9d 	.word	0x08006c9d
 8006b94:	08006c5b 	.word	0x08006c5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 f9d0 	bl	8006f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0208 	orr.w	r2, r2, #8
 8006bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0204 	bic.w	r2, r2, #4
 8006bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6999      	ldr	r1, [r3, #24]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	691a      	ldr	r2, [r3, #16]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	619a      	str	r2, [r3, #24]
      break;
 8006bd6:	e062      	b.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fa16 	bl	8007010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699a      	ldr	r2, [r3, #24]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6999      	ldr	r1, [r3, #24]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	021a      	lsls	r2, r3, #8
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	619a      	str	r2, [r3, #24]
      break;
 8006c18:	e041      	b.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68b9      	ldr	r1, [r7, #8]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fa5f 	bl	80070e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f042 0208 	orr.w	r2, r2, #8
 8006c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0204 	bic.w	r2, r2, #4
 8006c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69d9      	ldr	r1, [r3, #28]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	61da      	str	r2, [r3, #28]
      break;
 8006c58:	e021      	b.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 faa9 	bl	80071b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69da      	ldr	r2, [r3, #28]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69d9      	ldr	r1, [r3, #28]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	021a      	lsls	r2, r3, #8
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	61da      	str	r2, [r3, #28]
      break;
 8006c9a:	e000      	b.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006c9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_TIM_ConfigClockSource+0x18>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e0b3      	b.n	8006e30 <HAL_TIM_ConfigClockSource+0x180>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d00:	d03e      	beq.n	8006d80 <HAL_TIM_ConfigClockSource+0xd0>
 8006d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d06:	f200 8087 	bhi.w	8006e18 <HAL_TIM_ConfigClockSource+0x168>
 8006d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0e:	f000 8085 	beq.w	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d16:	d87f      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x168>
 8006d18:	2b70      	cmp	r3, #112	; 0x70
 8006d1a:	d01a      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0xa2>
 8006d1c:	2b70      	cmp	r3, #112	; 0x70
 8006d1e:	d87b      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x168>
 8006d20:	2b60      	cmp	r3, #96	; 0x60
 8006d22:	d050      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0x116>
 8006d24:	2b60      	cmp	r3, #96	; 0x60
 8006d26:	d877      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x168>
 8006d28:	2b50      	cmp	r3, #80	; 0x50
 8006d2a:	d03c      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0xf6>
 8006d2c:	2b50      	cmp	r3, #80	; 0x50
 8006d2e:	d873      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x168>
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d058      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x136>
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d86f      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x168>
 8006d38:	2b30      	cmp	r3, #48	; 0x30
 8006d3a:	d064      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0x156>
 8006d3c:	2b30      	cmp	r3, #48	; 0x30
 8006d3e:	d86b      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x168>
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d060      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0x156>
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d867      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x168>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d05c      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0x156>
 8006d4c:	2b10      	cmp	r3, #16
 8006d4e:	d05a      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d50:	e062      	b.n	8006e18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6899      	ldr	r1, [r3, #8]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f000 faee 	bl	8007342 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	609a      	str	r2, [r3, #8]
      break;
 8006d7e:	e04e      	b.n	8006e1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	6899      	ldr	r1, [r3, #8]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f000 fad7 	bl	8007342 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006da2:	609a      	str	r2, [r3, #8]
      break;
 8006da4:	e03b      	b.n	8006e1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6859      	ldr	r1, [r3, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	461a      	mov	r2, r3
 8006db4:	f000 fa4e 	bl	8007254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2150      	movs	r1, #80	; 0x50
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 faa5 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006dc4:	e02b      	b.n	8006e1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6859      	ldr	r1, [r3, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f000 fa6c 	bl	80072b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2160      	movs	r1, #96	; 0x60
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fa95 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006de4:	e01b      	b.n	8006e1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6859      	ldr	r1, [r3, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f000 fa2e 	bl	8007254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2140      	movs	r1, #64	; 0x40
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fa85 	bl	800730e <TIM_ITRx_SetConfig>
      break;
 8006e04:	e00b      	b.n	8006e1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4610      	mov	r0, r2
 8006e12:	f000 fa7c 	bl	800730e <TIM_ITRx_SetConfig>
        break;
 8006e16:	e002      	b.n	8006e1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e18:	bf00      	nop
 8006e1a:	e000      	b.n	8006e1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr

08006e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr

08006e6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr

08006e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a29      	ldr	r2, [pc, #164]	; (8006f38 <TIM_Base_SetConfig+0xb8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00b      	beq.n	8006eb0 <TIM_Base_SetConfig+0x30>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9e:	d007      	beq.n	8006eb0 <TIM_Base_SetConfig+0x30>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a26      	ldr	r2, [pc, #152]	; (8006f3c <TIM_Base_SetConfig+0xbc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_Base_SetConfig+0x30>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a25      	ldr	r2, [pc, #148]	; (8006f40 <TIM_Base_SetConfig+0xc0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d108      	bne.n	8006ec2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a1c      	ldr	r2, [pc, #112]	; (8006f38 <TIM_Base_SetConfig+0xb8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00b      	beq.n	8006ee2 <TIM_Base_SetConfig+0x62>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d007      	beq.n	8006ee2 <TIM_Base_SetConfig+0x62>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a19      	ldr	r2, [pc, #100]	; (8006f3c <TIM_Base_SetConfig+0xbc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d003      	beq.n	8006ee2 <TIM_Base_SetConfig+0x62>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a18      	ldr	r2, [pc, #96]	; (8006f40 <TIM_Base_SetConfig+0xc0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d108      	bne.n	8006ef4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a07      	ldr	r2, [pc, #28]	; (8006f38 <TIM_Base_SetConfig+0xb8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d103      	bne.n	8006f28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	615a      	str	r2, [r3, #20]
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	40000800 	.word	0x40000800

08006f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f023 0201 	bic.w	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f023 0302 	bic.w	r3, r3, #2
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a1c      	ldr	r2, [pc, #112]	; (800700c <TIM_OC1_SetConfig+0xc8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d10c      	bne.n	8006fba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f023 0308 	bic.w	r3, r3, #8
 8006fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f023 0304 	bic.w	r3, r3, #4
 8006fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a13      	ldr	r2, [pc, #76]	; (800700c <TIM_OC1_SetConfig+0xc8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d111      	bne.n	8006fe6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	621a      	str	r2, [r3, #32]
}
 8007000:	bf00      	nop
 8007002:	371c      	adds	r7, #28
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00

08007010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f023 0210 	bic.w	r2, r3, #16
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	021b      	lsls	r3, r3, #8
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f023 0320 	bic.w	r3, r3, #32
 800705a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a1d      	ldr	r2, [pc, #116]	; (80070e0 <TIM_OC2_SetConfig+0xd0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10d      	bne.n	800708c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800708a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a14      	ldr	r2, [pc, #80]	; (80070e0 <TIM_OC2_SetConfig+0xd0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d113      	bne.n	80070bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800709a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	621a      	str	r2, [r3, #32]
}
 80070d6:	bf00      	nop
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	bc80      	pop	{r7}
 80070de:	4770      	bx	lr
 80070e0:	40012c00 	.word	0x40012c00

080070e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800712c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a1d      	ldr	r2, [pc, #116]	; (80071b4 <TIM_OC3_SetConfig+0xd0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d10d      	bne.n	800715e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800715c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a14      	ldr	r2, [pc, #80]	; (80071b4 <TIM_OC3_SetConfig+0xd0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d113      	bne.n	800718e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800716c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	621a      	str	r2, [r3, #32]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40012c00 	.word	0x40012c00

080071b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	031b      	lsls	r3, r3, #12
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a0f      	ldr	r2, [pc, #60]	; (8007250 <TIM_OC4_SetConfig+0x98>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d109      	bne.n	800722c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800721e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	019b      	lsls	r3, r3, #6
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr
 8007250:	40012c00 	.word	0x40012c00

08007254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	f023 0201 	bic.w	r2, r3, #1
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800727e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f023 030a 	bic.w	r3, r3, #10
 8007290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr

080072b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f023 0210 	bic.w	r2, r3, #16
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	031b      	lsls	r3, r3, #12
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	621a      	str	r2, [r3, #32]
}
 8007304:	bf00      	nop
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr

0800730e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	f043 0307 	orr.w	r3, r3, #7
 8007330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	609a      	str	r2, [r3, #8]
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr

08007342 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007342:	b480      	push	{r7}
 8007344:	b087      	sub	sp, #28
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
 800734e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800735c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	021a      	lsls	r2, r3, #8
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	431a      	orrs	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4313      	orrs	r3, r2
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	609a      	str	r2, [r3, #8]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr

08007380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 031f 	and.w	r3, r3, #31
 8007392:	2201      	movs	r2, #1
 8007394:	fa02 f303 	lsl.w	r3, r2, r3
 8007398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1a      	ldr	r2, [r3, #32]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	401a      	ands	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a1a      	ldr	r2, [r3, #32]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	fa01 f303 	lsl.w	r3, r1, r3
 80073b8:	431a      	orrs	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bc80      	pop	{r7}
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073dc:	2302      	movs	r3, #2
 80073de:	e046      	b.n	800746e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a16      	ldr	r2, [pc, #88]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00e      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742c:	d009      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a12      	ldr	r2, [pc, #72]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d004      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a10      	ldr	r2, [pc, #64]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d10c      	bne.n	800745c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	4313      	orrs	r3, r2
 8007452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	bc80      	pop	{r7}
 8007476:	4770      	bx	lr
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40000400 	.word	0x40000400
 8007480:	40000800 	.word	0x40000800

08007484 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	bc80      	pop	{r7}
 8007494:	4770      	bx	lr

08007496 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr

080074a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074a8:	b084      	sub	sp, #16
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	f107 0014 	add.w	r0, r7, #20
 80074b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bc80      	pop	{r7}
 80074c4:	b004      	add	sp, #16
 80074c6:	4770      	bx	lr

080074c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr

080074f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007500:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	b29b      	uxth	r3, r3
 800750e:	43db      	mvns	r3, r3
 8007510:	b29b      	uxth	r3, r3
 8007512:	4013      	ands	r3, r2
 8007514:	b29a      	uxth	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr

08007528 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007540:	b084      	sub	sp, #16
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	f107 0014 	add.w	r0, r7, #20
 800754e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	b004      	add	sp, #16
 800757e:	4770      	bx	lr

08007580 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007580:	b480      	push	{r7}
 8007582:	b09b      	sub	sp, #108	; 0x6c
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	78db      	ldrb	r3, [r3, #3]
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d81f      	bhi.n	80075f2 <USB_ActivateEndpoint+0x72>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <USB_ActivateEndpoint+0x38>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	080075c9 	.word	0x080075c9
 80075bc:	080075e5 	.word	0x080075e5
 80075c0:	080075fb 	.word	0x080075fb
 80075c4:	080075d7 	.word	0x080075d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075d4:	e012      	b.n	80075fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80075de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075e2:	e00b      	b.n	80075fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075ec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075f0:	e004      	b.n	80075fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80075f8:	e000      	b.n	80075fc <USB_ActivateEndpoint+0x7c>
      break;
 80075fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	441a      	add	r2, r3
 8007606:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800760a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800760e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761a:	b29b      	uxth	r3, r3
 800761c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007634:	b29a      	uxth	r2, r3
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	4313      	orrs	r3, r2
 800763e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	441a      	add	r2, r3
 800764c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800765c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007660:	b29b      	uxth	r3, r3
 8007662:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	7b1b      	ldrb	r3, [r3, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	f040 8149 	bne.w	8007900 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8084 	beq.w	8007780 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007682:	b29b      	uxth	r3, r3
 8007684:	461a      	mov	r2, r3
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	4413      	add	r3, r2
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	011a      	lsls	r2, r3, #4
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	88db      	ldrh	r3, [r3, #6]
 80076a0:	085b      	lsrs	r3, r3, #1
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	81fb      	strh	r3, [r7, #14]
 80076ba:	89fb      	ldrh	r3, [r7, #14]
 80076bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01b      	beq.n	80076fc <USB_ActivateEndpoint+0x17c>
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	81bb      	strh	r3, [r7, #12]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	441a      	add	r2, r3
 80076e6:	89bb      	ldrh	r3, [r7, #12]
 80076e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	78db      	ldrb	r3, [r3, #3]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d020      	beq.n	8007746 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771a:	813b      	strh	r3, [r7, #8]
 800771c:	893b      	ldrh	r3, [r7, #8]
 800771e:	f083 0320 	eor.w	r3, r3, #32
 8007722:	813b      	strh	r3, [r7, #8]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	893b      	ldrh	r3, [r7, #8]
 8007730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007740:	b29b      	uxth	r3, r3
 8007742:	8013      	strh	r3, [r2, #0]
 8007744:	e27f      	b.n	8007c46 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800775c:	817b      	strh	r3, [r7, #10]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	441a      	add	r2, r3
 8007768:	897b      	ldrh	r3, [r7, #10]
 800776a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777a:	b29b      	uxth	r3, r3
 800777c:	8013      	strh	r3, [r2, #0]
 800777e:	e262      	b.n	8007c46 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800778a:	b29b      	uxth	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	4413      	add	r3, r2
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	011a      	lsls	r2, r3, #4
 800779a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779c:	4413      	add	r3, r2
 800779e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	88db      	ldrh	r3, [r3, #6]
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077be:	b29b      	uxth	r3, r3
 80077c0:	461a      	mov	r2, r3
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	4413      	add	r3, r2
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	011a      	lsls	r2, r3, #4
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	4413      	add	r3, r2
 80077d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077d6:	623b      	str	r3, [r7, #32]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d112      	bne.n	8007806 <USB_ActivateEndpoint+0x286>
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	801a      	strh	r2, [r3, #0]
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077fe:	b29a      	uxth	r2, r3
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	801a      	strh	r2, [r3, #0]
 8007804:	e02f      	b.n	8007866 <USB_ActivateEndpoint+0x2e6>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b3e      	cmp	r3, #62	; 0x3e
 800780c:	d813      	bhi.n	8007836 <USB_ActivateEndpoint+0x2b6>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	085b      	lsrs	r3, r3, #1
 8007814:	663b      	str	r3, [r7, #96]	; 0x60
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <USB_ActivateEndpoint+0x2a8>
 8007822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007824:	3301      	adds	r3, #1
 8007826:	663b      	str	r3, [r7, #96]	; 0x60
 8007828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800782a:	b29b      	uxth	r3, r3
 800782c:	029b      	lsls	r3, r3, #10
 800782e:	b29a      	uxth	r2, r3
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	801a      	strh	r2, [r3, #0]
 8007834:	e017      	b.n	8007866 <USB_ActivateEndpoint+0x2e6>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	095b      	lsrs	r3, r3, #5
 800783c:	663b      	str	r3, [r7, #96]	; 0x60
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 031f 	and.w	r3, r3, #31
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <USB_ActivateEndpoint+0x2d0>
 800784a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800784c:	3b01      	subs	r3, #1
 800784e:	663b      	str	r3, [r7, #96]	; 0x60
 8007850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007852:	b29b      	uxth	r3, r3
 8007854:	029b      	lsls	r3, r3, #10
 8007856:	b29b      	uxth	r3, r3
 8007858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007860:	b29a      	uxth	r2, r3
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	83fb      	strh	r3, [r7, #30]
 8007874:	8bfb      	ldrh	r3, [r7, #30]
 8007876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d01b      	beq.n	80078b6 <USB_ActivateEndpoint+0x336>
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007894:	83bb      	strh	r3, [r7, #28]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	441a      	add	r2, r3
 80078a0:	8bbb      	ldrh	r3, [r7, #28]
 80078a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078cc:	837b      	strh	r3, [r7, #26]
 80078ce:	8b7b      	ldrh	r3, [r7, #26]
 80078d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078d4:	837b      	strh	r3, [r7, #26]
 80078d6:	8b7b      	ldrh	r3, [r7, #26]
 80078d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078dc:	837b      	strh	r3, [r7, #26]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	441a      	add	r2, r3
 80078e8:	8b7b      	ldrh	r3, [r7, #26]
 80078ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	8013      	strh	r3, [r2, #0]
 80078fe:	e1a2      	b.n	8007c46 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	b29b      	uxth	r3, r3
 800790e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007916:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	441a      	add	r2, r3
 8007924:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007930:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007938:	b29b      	uxth	r3, r3
 800793a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007946:	b29b      	uxth	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800794c:	4413      	add	r3, r2
 800794e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	011a      	lsls	r2, r3, #4
 8007956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007958:	4413      	add	r3, r2
 800795a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800795e:	657b      	str	r3, [r7, #84]	; 0x54
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	891b      	ldrh	r3, [r3, #8]
 8007964:	085b      	lsrs	r3, r3, #1
 8007966:	b29b      	uxth	r3, r3
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	653b      	str	r3, [r7, #80]	; 0x50
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800797a:	b29b      	uxth	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007980:	4413      	add	r3, r2
 8007982:	653b      	str	r3, [r7, #80]	; 0x50
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	011a      	lsls	r2, r3, #4
 800798a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798c:	4413      	add	r3, r2
 800798e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	895b      	ldrh	r3, [r3, #10]
 8007998:	085b      	lsrs	r3, r3, #1
 800799a:	b29b      	uxth	r3, r3
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f040 8091 	bne.w	8007ad0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80079bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01b      	beq.n	80079fe <USB_ActivateEndpoint+0x47e>
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079dc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d01b      	beq.n	8007a4e <USB_ActivateEndpoint+0x4ce>
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	441a      	add	r2, r3
 8007a38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	441a      	add	r2, r3
 8007a80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aac:	867b      	strh	r3, [r7, #50]	; 0x32
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	441a      	add	r2, r3
 8007ab8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]
 8007ace:	e0ba      	b.n	8007c46 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ae0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01d      	beq.n	8007b28 <USB_ActivateEndpoint+0x5a8>
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	441a      	add	r2, r3
 8007b10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007b38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01d      	beq.n	8007b80 <USB_ActivateEndpoint+0x600>
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	441a      	add	r2, r3
 8007b68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	78db      	ldrb	r3, [r3, #3]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d024      	beq.n	8007bd2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007ba2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007ba6:	f083 0320 	eor.w	r3, r3, #32
 8007baa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	441a      	add	r2, r3
 8007bb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	8013      	strh	r3, [r2, #0]
 8007bd0:	e01d      	b.n	8007c0e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	441a      	add	r2, r3
 8007bf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c24:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007c46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	376c      	adds	r7, #108	; 0x6c
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bc80      	pop	{r7}
 8007c52:	4770      	bx	lr

08007c54 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b08d      	sub	sp, #52	; 0x34
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	7b1b      	ldrb	r3, [r3, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f040 808e 	bne.w	8007d84 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	785b      	ldrb	r3, [r3, #1]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d044      	beq.n	8007cfa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	81bb      	strh	r3, [r7, #12]
 8007c7e:	89bb      	ldrh	r3, [r7, #12]
 8007c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d01b      	beq.n	8007cc0 <USB_DeactivateEndpoint+0x6c>
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9e:	817b      	strh	r3, [r7, #10]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	441a      	add	r2, r3
 8007caa:	897b      	ldrh	r3, [r7, #10]
 8007cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd6:	813b      	strh	r3, [r7, #8]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	441a      	add	r2, r3
 8007ce2:	893b      	ldrh	r3, [r7, #8]
 8007ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	8013      	strh	r3, [r2, #0]
 8007cf8:	e192      	b.n	8008020 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	827b      	strh	r3, [r7, #18]
 8007d08:	8a7b      	ldrh	r3, [r7, #18]
 8007d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01b      	beq.n	8007d4a <USB_DeactivateEndpoint+0xf6>
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d28:	823b      	strh	r3, [r7, #16]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	441a      	add	r2, r3
 8007d34:	8a3b      	ldrh	r3, [r7, #16]
 8007d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d60:	81fb      	strh	r3, [r7, #14]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	441a      	add	r2, r3
 8007d6c:	89fb      	ldrh	r3, [r7, #14]
 8007d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	8013      	strh	r3, [r2, #0]
 8007d82:	e14d      	b.n	8008020 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	785b      	ldrb	r3, [r3, #1]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f040 80a5 	bne.w	8007ed8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	843b      	strh	r3, [r7, #32]
 8007d9c:	8c3b      	ldrh	r3, [r7, #32]
 8007d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d01b      	beq.n	8007dde <USB_DeactivateEndpoint+0x18a>
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbc:	83fb      	strh	r3, [r7, #30]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	441a      	add	r2, r3
 8007dc8:	8bfb      	ldrh	r3, [r7, #30]
 8007dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	83bb      	strh	r3, [r7, #28]
 8007dec:	8bbb      	ldrh	r3, [r7, #28]
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d01b      	beq.n	8007e2e <USB_DeactivateEndpoint+0x1da>
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0c:	837b      	strh	r3, [r7, #26]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	441a      	add	r2, r3
 8007e18:	8b7b      	ldrh	r3, [r7, #26]
 8007e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e44:	833b      	strh	r3, [r7, #24]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	441a      	add	r2, r3
 8007e50:	8b3b      	ldrh	r3, [r7, #24]
 8007e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7c:	82fb      	strh	r3, [r7, #22]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	441a      	add	r2, r3
 8007e88:	8afb      	ldrh	r3, [r7, #22]
 8007e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb4:	82bb      	strh	r3, [r7, #20]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	441a      	add	r2, r3
 8007ec0:	8abb      	ldrh	r3, [r7, #20]
 8007ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	8013      	strh	r3, [r2, #0]
 8007ed6:	e0a3      	b.n	8008020 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ee6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01b      	beq.n	8007f28 <USB_DeactivateEndpoint+0x2d4>
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f06:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	441a      	add	r2, r3
 8007f12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d01b      	beq.n	8007f78 <USB_DeactivateEndpoint+0x324>
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f56:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	441a      	add	r2, r3
 8007f62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	441a      	add	r2, r3
 8007f9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fc6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	441a      	add	r2, r3
 8007fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffe:	847b      	strh	r3, [r7, #34]	; 0x22
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	441a      	add	r2, r3
 800800a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800800c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801c:	b29b      	uxth	r3, r3
 800801e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3734      	adds	r7, #52	; 0x34
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr

0800802c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b0cc      	sub	sp, #304	; 0x130
 8008030:	af00      	add	r7, sp, #0
 8008032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008036:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800803a:	6018      	str	r0, [r3, #0]
 800803c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008044:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	2b01      	cmp	r3, #1
 8008054:	f041 817d 	bne.w	8009352 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	699a      	ldr	r2, [r3, #24]
 8008064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	429a      	cmp	r2, r3
 8008072:	d908      	bls.n	8008086 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008084:	e007      	b.n	8008096 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	7b1b      	ldrb	r3, [r3, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d152      	bne.n	800814c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80080a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6959      	ldr	r1, [r3, #20]
 80080b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	88da      	ldrh	r2, [r3, #6]
 80080be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80080c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80080cc:	6800      	ldr	r0, [r0, #0]
 80080ce:	f001 ff23 	bl	8009f18 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80080d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80080da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080de:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80080e2:	6812      	ldr	r2, [r2, #0]
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	4619      	mov	r1, r3
 80080f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008100:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008104:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	440a      	add	r2, r1
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	011a      	lsls	r2, r3, #4
 800811c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008120:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4413      	add	r3, r2
 8008128:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800812c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008130:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800813a:	b29a      	uxth	r2, r3
 800813c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008140:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	801a      	strh	r2, [r3, #0]
 8008148:	f001 b8b5 	b.w	80092b6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800814c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	78db      	ldrb	r3, [r3, #3]
 8008158:	2b02      	cmp	r3, #2
 800815a:	f040 84c6 	bne.w	8008aea <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800815e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6a1a      	ldr	r2, [r3, #32]
 800816a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	429a      	cmp	r2, r3
 8008178:	f240 8443 	bls.w	8008a02 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800817c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	b29b      	uxth	r3, r3
 800819a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80081a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	441a      	add	r2, r3
 80081c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80081d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6a1a      	ldr	r2, [r3, #32]
 80081e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e8:	1ad2      	subs	r2, r2, r3
 80081ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 823e 	beq.w	800869a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800821e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008222:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008226:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800822a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f040 809a 	bne.w	8008378 <USB_EPStartXfer+0x34c>
 8008244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800824c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008250:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008254:	6812      	ldr	r2, [r2, #0]
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008266:	b29b      	uxth	r3, r3
 8008268:	4619      	mov	r1, r3
 800826a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800826e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008272:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008276:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	440a      	add	r2, r1
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	011a      	lsls	r2, r3, #4
 800828e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4413      	add	r3, r2
 800829a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d122      	bne.n	80082f6 <USB_EPStartXfer+0x2ca>
 80082b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	801a      	strh	r2, [r3, #0]
 80082f4:	e079      	b.n	80083ea <USB_EPStartXfer+0x3be>
 80082f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fa:	2b3e      	cmp	r3, #62	; 0x3e
 80082fc:	d81b      	bhi.n	8008336 <USB_EPStartXfer+0x30a>
 80082fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008302:	085b      	lsrs	r3, r3, #1
 8008304:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d004      	beq.n	800831e <USB_EPStartXfer+0x2f2>
 8008314:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008318:	3301      	adds	r3, #1
 800831a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800831e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008322:	b29b      	uxth	r3, r3
 8008324:	029b      	lsls	r3, r3, #10
 8008326:	b29a      	uxth	r2, r3
 8008328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	e059      	b.n	80083ea <USB_EPStartXfer+0x3be>
 8008336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <USB_EPStartXfer+0x32a>
 800834c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008350:	3b01      	subs	r3, #1
 8008352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008356:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800835a:	b29b      	uxth	r3, r3
 800835c:	029b      	lsls	r3, r3, #10
 800835e:	b29b      	uxth	r3, r3
 8008360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008368:	b29a      	uxth	r2, r3
 800836a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800836e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	801a      	strh	r2, [r3, #0]
 8008376:	e038      	b.n	80083ea <USB_EPStartXfer+0x3be>
 8008378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	785b      	ldrb	r3, [r3, #1]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d130      	bne.n	80083ea <USB_EPStartXfer+0x3be>
 8008388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008396:	b29b      	uxth	r3, r3
 8008398:	4619      	mov	r1, r3
 800839a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800839e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80083a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083a6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80083aa:	6812      	ldr	r2, [r2, #0]
 80083ac:	440a      	add	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	011a      	lsls	r2, r3, #4
 80083be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4413      	add	r3, r2
 80083ca:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80083ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083dc:	b29a      	uxth	r2, r3
 80083de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80083ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	895b      	ldrh	r3, [r3, #10]
 80083f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6959      	ldr	r1, [r3, #20]
 8008406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800840a:	b29b      	uxth	r3, r3
 800840c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008410:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008414:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008418:	6800      	ldr	r0, [r0, #0]
 800841a:	f001 fd7d 	bl	8009f18 <USB_WritePMA>
            ep->xfer_buff += len;
 800841e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	695a      	ldr	r2, [r3, #20]
 800842a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842e:	441a      	add	r2, r3
 8008430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800843c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6a1a      	ldr	r2, [r3, #32]
 8008448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	429a      	cmp	r2, r3
 8008456:	d90f      	bls.n	8008478 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6a1a      	ldr	r2, [r3, #32]
 8008464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008468:	1ad2      	subs	r2, r2, r3
 800846a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	621a      	str	r2, [r3, #32]
 8008476:	e00e      	b.n	8008496 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2200      	movs	r2, #0
 8008494:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f040 809a 	bne.w	80085dc <USB_EPStartXfer+0x5b0>
 80084a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80084b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084b4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80084b8:	6812      	ldr	r2, [r2, #0]
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	4619      	mov	r1, r3
 80084ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80084d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084da:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80084de:	6812      	ldr	r2, [r2, #0]
 80084e0:	440a      	add	r2, r1
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	011a      	lsls	r2, r3, #4
 80084f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4413      	add	r3, r2
 80084fe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008506:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d122      	bne.n	800855a <USB_EPStartXfer+0x52e>
 8008514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008518:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	b29b      	uxth	r3, r3
 8008522:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008526:	b29a      	uxth	r2, r3
 8008528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	801a      	strh	r2, [r3, #0]
 8008534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008538:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29b      	uxth	r3, r3
 8008542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800854a:	b29a      	uxth	r2, r3
 800854c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008550:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	801a      	strh	r2, [r3, #0]
 8008558:	e083      	b.n	8008662 <USB_EPStartXfer+0x636>
 800855a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800855e:	2b3e      	cmp	r3, #62	; 0x3e
 8008560:	d81b      	bhi.n	800859a <USB_EPStartXfer+0x56e>
 8008562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008566:	085b      	lsrs	r3, r3, #1
 8008568:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800856c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <USB_EPStartXfer+0x556>
 8008578:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800857c:	3301      	adds	r3, #1
 800857e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008582:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008586:	b29b      	uxth	r3, r3
 8008588:	029b      	lsls	r3, r3, #10
 800858a:	b29a      	uxth	r2, r3
 800858c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008590:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	801a      	strh	r2, [r3, #0]
 8008598:	e063      	b.n	8008662 <USB_EPStartXfer+0x636>
 800859a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80085a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a8:	f003 031f 	and.w	r3, r3, #31
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <USB_EPStartXfer+0x58e>
 80085b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80085b4:	3b01      	subs	r3, #1
 80085b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80085ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80085be:	b29b      	uxth	r3, r3
 80085c0:	029b      	lsls	r3, r3, #10
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	801a      	strh	r2, [r3, #0]
 80085da:	e042      	b.n	8008662 <USB_EPStartXfer+0x636>
 80085dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	785b      	ldrb	r3, [r3, #1]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d13a      	bne.n	8008662 <USB_EPStartXfer+0x636>
 80085ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80085f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085f8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80085fc:	6812      	ldr	r2, [r2, #0]
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008604:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800860e:	b29b      	uxth	r3, r3
 8008610:	4619      	mov	r1, r3
 8008612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008616:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800861a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800861e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008622:	6812      	ldr	r2, [r2, #0]
 8008624:	440a      	add	r2, r1
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	011a      	lsls	r2, r3, #4
 8008636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4413      	add	r3, r2
 8008642:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008654:	b29a      	uxth	r2, r3
 8008656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	891b      	ldrh	r3, [r3, #8]
 800866e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6959      	ldr	r1, [r3, #20]
 800867e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008682:	b29b      	uxth	r3, r3
 8008684:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008688:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800868c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008690:	6800      	ldr	r0, [r0, #0]
 8008692:	f001 fc41 	bl	8009f18 <USB_WritePMA>
 8008696:	f000 be0e 	b.w	80092b6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800869a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800869e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d16d      	bne.n	8008786 <USB_EPStartXfer+0x75a>
 80086aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80086b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	461a      	mov	r2, r3
 80086c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ca:	4413      	add	r3, r2
 80086cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	011a      	lsls	r2, r3, #4
 80086dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086de:	4413      	add	r3, r2
 80086e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086e4:	647b      	str	r3, [r7, #68]	; 0x44
 80086e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d112      	bne.n	8008714 <USB_EPStartXfer+0x6e8>
 80086ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086fc:	801a      	strh	r2, [r3, #0]
 80086fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	b29b      	uxth	r3, r3
 8008704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800870c:	b29a      	uxth	r2, r3
 800870e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008710:	801a      	strh	r2, [r3, #0]
 8008712:	e063      	b.n	80087dc <USB_EPStartXfer+0x7b0>
 8008714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008718:	2b3e      	cmp	r3, #62	; 0x3e
 800871a:	d817      	bhi.n	800874c <USB_EPStartXfer+0x720>
 800871c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d004      	beq.n	800873c <USB_EPStartXfer+0x710>
 8008732:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008736:	3301      	adds	r3, #1
 8008738:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800873c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008740:	b29b      	uxth	r3, r3
 8008742:	029b      	lsls	r3, r3, #10
 8008744:	b29a      	uxth	r2, r3
 8008746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008748:	801a      	strh	r2, [r3, #0]
 800874a:	e047      	b.n	80087dc <USB_EPStartXfer+0x7b0>
 800874c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008750:	095b      	lsrs	r3, r3, #5
 8008752:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800875a:	f003 031f 	and.w	r3, r3, #31
 800875e:	2b00      	cmp	r3, #0
 8008760:	d104      	bne.n	800876c <USB_EPStartXfer+0x740>
 8008762:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008766:	3b01      	subs	r3, #1
 8008768:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800876c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008770:	b29b      	uxth	r3, r3
 8008772:	029b      	lsls	r3, r3, #10
 8008774:	b29b      	uxth	r3, r3
 8008776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800877a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800877e:	b29a      	uxth	r2, r3
 8008780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008782:	801a      	strh	r2, [r3, #0]
 8008784:	e02a      	b.n	80087dc <USB_EPStartXfer+0x7b0>
 8008786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	785b      	ldrb	r3, [r3, #1]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d122      	bne.n	80087dc <USB_EPStartXfer+0x7b0>
 8008796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	653b      	str	r3, [r7, #80]	; 0x50
 80087a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087b6:	4413      	add	r3, r2
 80087b8:	653b      	str	r3, [r7, #80]	; 0x50
 80087ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	011a      	lsls	r2, r3, #4
 80087c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ca:	4413      	add	r3, r2
 80087cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80087dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	891b      	ldrh	r3, [r3, #8]
 80087e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6959      	ldr	r1, [r3, #20]
 80087f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008802:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008806:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800880a:	6800      	ldr	r0, [r0, #0]
 800880c:	f001 fb84 	bl	8009f18 <USB_WritePMA>
            ep->xfer_buff += len;
 8008810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	695a      	ldr	r2, [r3, #20]
 800881c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008820:	441a      	add	r2, r3
 8008822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800882e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6a1a      	ldr	r2, [r3, #32]
 800883a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800883e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	429a      	cmp	r2, r3
 8008848:	d90f      	bls.n	800886a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800884a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800884e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6a1a      	ldr	r2, [r3, #32]
 8008856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885a:	1ad2      	subs	r2, r2, r3
 800885c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	621a      	str	r2, [r3, #32]
 8008868:	e00e      	b.n	8008888 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800886a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800887a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2200      	movs	r2, #0
 8008886:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	643b      	str	r3, [r7, #64]	; 0x40
 8008894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d16d      	bne.n	8008980 <USB_EPStartXfer+0x954>
 80088a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80088b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088be:	b29b      	uxth	r3, r3
 80088c0:	461a      	mov	r2, r3
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	4413      	add	r3, r2
 80088c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80088c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	011a      	lsls	r2, r3, #4
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	4413      	add	r3, r2
 80088da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088de:	637b      	str	r3, [r7, #52]	; 0x34
 80088e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d112      	bne.n	800890e <USB_EPStartXfer+0x8e2>
 80088e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f6:	801a      	strh	r2, [r3, #0]
 80088f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008906:	b29a      	uxth	r2, r3
 8008908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890a:	801a      	strh	r2, [r3, #0]
 800890c:	e05d      	b.n	80089ca <USB_EPStartXfer+0x99e>
 800890e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008912:	2b3e      	cmp	r3, #62	; 0x3e
 8008914:	d817      	bhi.n	8008946 <USB_EPStartXfer+0x91a>
 8008916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800891a:	085b      	lsrs	r3, r3, #1
 800891c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d004      	beq.n	8008936 <USB_EPStartXfer+0x90a>
 800892c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008930:	3301      	adds	r3, #1
 8008932:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008936:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800893a:	b29b      	uxth	r3, r3
 800893c:	029b      	lsls	r3, r3, #10
 800893e:	b29a      	uxth	r2, r3
 8008940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008942:	801a      	strh	r2, [r3, #0]
 8008944:	e041      	b.n	80089ca <USB_EPStartXfer+0x99e>
 8008946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894a:	095b      	lsrs	r3, r3, #5
 800894c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008954:	f003 031f 	and.w	r3, r3, #31
 8008958:	2b00      	cmp	r3, #0
 800895a:	d104      	bne.n	8008966 <USB_EPStartXfer+0x93a>
 800895c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008960:	3b01      	subs	r3, #1
 8008962:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008966:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800896a:	b29b      	uxth	r3, r3
 800896c:	029b      	lsls	r3, r3, #10
 800896e:	b29b      	uxth	r3, r3
 8008970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008978:	b29a      	uxth	r2, r3
 800897a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897c:	801a      	strh	r2, [r3, #0]
 800897e:	e024      	b.n	80089ca <USB_EPStartXfer+0x99e>
 8008980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	785b      	ldrb	r3, [r3, #1]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d11c      	bne.n	80089ca <USB_EPStartXfer+0x99e>
 8008990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800899e:	b29b      	uxth	r3, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a4:	4413      	add	r3, r2
 80089a6:	643b      	str	r3, [r7, #64]	; 0x40
 80089a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	011a      	lsls	r2, r3, #4
 80089b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b8:	4413      	add	r3, r2
 80089ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	895b      	ldrh	r3, [r3, #10]
 80089d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6959      	ldr	r1, [r3, #20]
 80089e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80089f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80089f8:	6800      	ldr	r0, [r0, #0]
 80089fa:	f001 fa8d 	bl	8009f18 <USB_WritePMA>
 80089fe:	f000 bc5a 	b.w	80092b6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a38:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	441a      	add	r2, r3
 8008a56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a8e:	4413      	add	r3, r2
 8008a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	011a      	lsls	r2, r3, #4
 8008aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008aa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	891b      	ldrh	r3, [r3, #8]
 8008ac0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6959      	ldr	r1, [r3, #20]
 8008ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ada:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008ade:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008ae2:	6800      	ldr	r0, [r0, #0]
 8008ae4:	f001 fa18 	bl	8009f18 <USB_WritePMA>
 8008ae8:	e3e5      	b.n	80092b6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b10:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	441a      	add	r2, r3
 8008b2e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b3a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6a1a      	ldr	r2, [r3, #32]
 8008b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b56:	1ad2      	subs	r2, r2, r3
 8008b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 81bc 	beq.w	8008f04 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	785b      	ldrb	r3, [r3, #1]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d16d      	bne.n	8008c86 <USB_EPStartXfer+0xc5a>
 8008baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bca:	4413      	add	r3, r2
 8008bcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	011a      	lsls	r2, r3, #4
 8008bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bde:	4413      	add	r3, r2
 8008be0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008be4:	677b      	str	r3, [r7, #116]	; 0x74
 8008be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d112      	bne.n	8008c14 <USB_EPStartXfer+0xbe8>
 8008bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bfc:	801a      	strh	r2, [r3, #0]
 8008bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c10:	801a      	strh	r2, [r3, #0]
 8008c12:	e060      	b.n	8008cd6 <USB_EPStartXfer+0xcaa>
 8008c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c18:	2b3e      	cmp	r3, #62	; 0x3e
 8008c1a:	d817      	bhi.n	8008c4c <USB_EPStartXfer+0xc20>
 8008c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c20:	085b      	lsrs	r3, r3, #1
 8008c22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d004      	beq.n	8008c3c <USB_EPStartXfer+0xc10>
 8008c32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c36:	3301      	adds	r3, #1
 8008c38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	029b      	lsls	r3, r3, #10
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c48:	801a      	strh	r2, [r3, #0]
 8008c4a:	e044      	b.n	8008cd6 <USB_EPStartXfer+0xcaa>
 8008c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c5a:	f003 031f 	and.w	r3, r3, #31
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d104      	bne.n	8008c6c <USB_EPStartXfer+0xc40>
 8008c62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c66:	3b01      	subs	r3, #1
 8008c68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	029b      	lsls	r3, r3, #10
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c82:	801a      	strh	r2, [r3, #0]
 8008c84:	e027      	b.n	8008cd6 <USB_EPStartXfer+0xcaa>
 8008c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	785b      	ldrb	r3, [r3, #1]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d11f      	bne.n	8008cd6 <USB_EPStartXfer+0xcaa>
 8008c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cac:	4413      	add	r3, r2
 8008cae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	011a      	lsls	r2, r3, #4
 8008cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	895b      	ldrh	r3, [r3, #10]
 8008ce2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6959      	ldr	r1, [r3, #20]
 8008cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008cfc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008d00:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008d04:	6800      	ldr	r0, [r0, #0]
 8008d06:	f001 f907 	bl	8009f18 <USB_WritePMA>
          ep->xfer_buff += len;
 8008d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1a:	441a      	add	r2, r3
 8008d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6a1a      	ldr	r2, [r3, #32]
 8008d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d90f      	bls.n	8008d64 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6a1a      	ldr	r2, [r3, #32]
 8008d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d54:	1ad2      	subs	r2, r2, r3
 8008d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	621a      	str	r2, [r3, #32]
 8008d62:	e00e      	b.n	8008d82 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 8295 	beq.w	80092b6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	785b      	ldrb	r3, [r3, #1]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d16d      	bne.n	8008e78 <USB_EPStartXfer+0xe4c>
 8008d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	461a      	mov	r2, r3
 8008dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dbc:	4413      	add	r3, r2
 8008dbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	011a      	lsls	r2, r3, #4
 8008dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dd6:	667b      	str	r3, [r7, #100]	; 0x64
 8008dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d112      	bne.n	8008e06 <USB_EPStartXfer+0xdda>
 8008de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dee:	801a      	strh	r2, [r3, #0]
 8008df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e02:	801a      	strh	r2, [r3, #0]
 8008e04:	e063      	b.n	8008ece <USB_EPStartXfer+0xea2>
 8008e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e0c:	d817      	bhi.n	8008e3e <USB_EPStartXfer+0xe12>
 8008e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d004      	beq.n	8008e2e <USB_EPStartXfer+0xe02>
 8008e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e28:	3301      	adds	r3, #1
 8008e2a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	029b      	lsls	r3, r3, #10
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e3a:	801a      	strh	r2, [r3, #0]
 8008e3c:	e047      	b.n	8008ece <USB_EPStartXfer+0xea2>
 8008e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4c:	f003 031f 	and.w	r3, r3, #31
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d104      	bne.n	8008e5e <USB_EPStartXfer+0xe32>
 8008e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	029b      	lsls	r3, r3, #10
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e74:	801a      	strh	r2, [r3, #0]
 8008e76:	e02a      	b.n	8008ece <USB_EPStartXfer+0xea2>
 8008e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	785b      	ldrb	r3, [r3, #1]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d122      	bne.n	8008ece <USB_EPStartXfer+0xea2>
 8008e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	673b      	str	r3, [r7, #112]	; 0x70
 8008e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ea8:	4413      	add	r3, r2
 8008eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8008eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	011a      	lsls	r2, r3, #4
 8008eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ecc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	891b      	ldrh	r3, [r3, #8]
 8008eda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6959      	ldr	r1, [r3, #20]
 8008eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ef4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008ef8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008efc:	6800      	ldr	r0, [r0, #0]
 8008efe:	f001 f80b 	bl	8009f18 <USB_WritePMA>
 8008f02:	e1d8      	b.n	80092b6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	785b      	ldrb	r3, [r3, #1]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d178      	bne.n	8009006 <USB_EPStartXfer+0xfda>
 8008f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f38:	4413      	add	r3, r2
 8008f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	011a      	lsls	r2, r3, #4
 8008f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f50:	4413      	add	r3, r2
 8008f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d116      	bne.n	8008f90 <USB_EPStartXfer+0xf64>
 8008f62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f74:	801a      	strh	r2, [r3, #0]
 8008f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f8c:	801a      	strh	r2, [r3, #0]
 8008f8e:	e06b      	b.n	8009068 <USB_EPStartXfer+0x103c>
 8008f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f94:	2b3e      	cmp	r3, #62	; 0x3e
 8008f96:	d818      	bhi.n	8008fca <USB_EPStartXfer+0xf9e>
 8008f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f9c:	085b      	lsrs	r3, r3, #1
 8008f9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d004      	beq.n	8008fb8 <USB_EPStartXfer+0xf8c>
 8008fae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	029b      	lsls	r3, r3, #10
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fc6:	801a      	strh	r2, [r3, #0]
 8008fc8:	e04e      	b.n	8009068 <USB_EPStartXfer+0x103c>
 8008fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fce:	095b      	lsrs	r3, r3, #5
 8008fd0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd8:	f003 031f 	and.w	r3, r3, #31
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d104      	bne.n	8008fea <USB_EPStartXfer+0xfbe>
 8008fe0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008fea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	029b      	lsls	r3, r3, #10
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009002:	801a      	strh	r2, [r3, #0]
 8009004:	e030      	b.n	8009068 <USB_EPStartXfer+0x103c>
 8009006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800900a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	785b      	ldrb	r3, [r3, #1]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d128      	bne.n	8009068 <USB_EPStartXfer+0x103c>
 8009016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800901a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009028:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009032:	b29b      	uxth	r3, r3
 8009034:	461a      	mov	r2, r3
 8009036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800903a:	4413      	add	r3, r2
 800903c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	011a      	lsls	r2, r3, #4
 800904e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009052:	4413      	add	r3, r2
 8009054:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800905c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009060:	b29a      	uxth	r2, r3
 8009062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009066:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800906c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	891b      	ldrh	r3, [r3, #8]
 8009074:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800907c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6959      	ldr	r1, [r3, #20]
 8009084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009088:	b29b      	uxth	r3, r3
 800908a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800908e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009092:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009096:	6800      	ldr	r0, [r0, #0]
 8009098:	f000 ff3e 	bl	8009f18 <USB_WritePMA>
          ep->xfer_buff += len;
 800909c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	695a      	ldr	r2, [r3, #20]
 80090a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ac:	441a      	add	r2, r3
 80090ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80090ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6a1a      	ldr	r2, [r3, #32]
 80090c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d90f      	bls.n	80090f6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80090d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6a1a      	ldr	r2, [r3, #32]
 80090e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e6:	1ad2      	subs	r2, r2, r3
 80090e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	621a      	str	r2, [r3, #32]
 80090f4:	e00e      	b.n	8009114 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80090f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800910a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2200      	movs	r2, #0
 8009112:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 80cc 	beq.w	80092b6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800911e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800912c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	785b      	ldrb	r3, [r3, #1]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d178      	bne.n	800922e <USB_EPStartXfer+0x1202>
 800913c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800914a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009158:	b29b      	uxth	r3, r3
 800915a:	461a      	mov	r2, r3
 800915c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009160:	4413      	add	r3, r2
 8009162:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800916a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	011a      	lsls	r2, r3, #4
 8009174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009178:	4413      	add	r3, r2
 800917a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800917e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d116      	bne.n	80091b8 <USB_EPStartXfer+0x118c>
 800918a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009196:	b29a      	uxth	r2, r3
 8009198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800919c:	801a      	strh	r2, [r3, #0]
 800919e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091b4:	801a      	strh	r2, [r3, #0]
 80091b6:	e064      	b.n	8009282 <USB_EPStartXfer+0x1256>
 80091b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091bc:	2b3e      	cmp	r3, #62	; 0x3e
 80091be:	d818      	bhi.n	80091f2 <USB_EPStartXfer+0x11c6>
 80091c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d004      	beq.n	80091e0 <USB_EPStartXfer+0x11b4>
 80091d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091da:	3301      	adds	r3, #1
 80091dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	029b      	lsls	r3, r3, #10
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091ee:	801a      	strh	r2, [r3, #0]
 80091f0:	e047      	b.n	8009282 <USB_EPStartXfer+0x1256>
 80091f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f6:	095b      	lsrs	r3, r3, #5
 80091f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009200:	f003 031f 	and.w	r3, r3, #31
 8009204:	2b00      	cmp	r3, #0
 8009206:	d104      	bne.n	8009212 <USB_EPStartXfer+0x11e6>
 8009208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800920c:	3b01      	subs	r3, #1
 800920e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009216:	b29b      	uxth	r3, r3
 8009218:	029b      	lsls	r3, r3, #10
 800921a:	b29b      	uxth	r3, r3
 800921c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009224:	b29a      	uxth	r2, r3
 8009226:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800922a:	801a      	strh	r2, [r3, #0]
 800922c:	e029      	b.n	8009282 <USB_EPStartXfer+0x1256>
 800922e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	785b      	ldrb	r3, [r3, #1]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d121      	bne.n	8009282 <USB_EPStartXfer+0x1256>
 800923e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800924c:	b29b      	uxth	r3, r3
 800924e:	461a      	mov	r2, r3
 8009250:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009254:	4413      	add	r3, r2
 8009256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800925a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800925e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	011a      	lsls	r2, r3, #4
 8009268:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800926c:	4413      	add	r3, r2
 800926e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009272:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800927a:	b29a      	uxth	r2, r3
 800927c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009280:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	895b      	ldrh	r3, [r3, #10]
 800928e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6959      	ldr	r1, [r3, #20]
 800929e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80092a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80092ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80092b0:	6800      	ldr	r0, [r0, #0]
 80092b2:	f000 fe31 	bl	8009f18 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80092b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092d8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80092dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e4:	8013      	strh	r3, [r2, #0]
 80092e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ea:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80092ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092f2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80092f6:	8812      	ldrh	r2, [r2, #0]
 80092f8:	f082 0210 	eor.w	r2, r2, #16
 80092fc:	801a      	strh	r2, [r3, #0]
 80092fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009302:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009306:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800930a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800930e:	8812      	ldrh	r2, [r2, #0]
 8009310:	f082 0220 	eor.w	r2, r2, #32
 8009314:	801a      	strh	r2, [r3, #0]
 8009316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	441a      	add	r2, r3
 8009330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009334:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800933e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800934a:	b29b      	uxth	r3, r3
 800934c:	8013      	strh	r3, [r2, #0]
 800934e:	f000 bc9f 	b.w	8009c90 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	7b1b      	ldrb	r3, [r3, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f040 80ae 	bne.w	80094c0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	699a      	ldr	r2, [r3, #24]
 8009370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	429a      	cmp	r2, r3
 800937e:	d917      	bls.n	80093b0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a0:	1ad2      	subs	r2, r2, r3
 80093a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	619a      	str	r2, [r3, #24]
 80093ae:	e00e      	b.n	80093ce <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80093b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80093c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2200      	movs	r2, #0
 80093cc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80093ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	461a      	mov	r2, r3
 80093ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093f2:	4413      	add	r3, r2
 80093f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	011a      	lsls	r2, r3, #4
 8009406:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800940a:	4413      	add	r3, r2
 800940c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d116      	bne.n	800944a <USB_EPStartXfer+0x141e>
 800941c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	b29b      	uxth	r3, r3
 8009424:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009428:	b29a      	uxth	r2, r3
 800942a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800942e:	801a      	strh	r2, [r3, #0]
 8009430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800943c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009440:	b29a      	uxth	r2, r3
 8009442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009446:	801a      	strh	r2, [r3, #0]
 8009448:	e3e8      	b.n	8009c1c <USB_EPStartXfer+0x1bf0>
 800944a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800944e:	2b3e      	cmp	r3, #62	; 0x3e
 8009450:	d818      	bhi.n	8009484 <USB_EPStartXfer+0x1458>
 8009452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800945c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d004      	beq.n	8009472 <USB_EPStartXfer+0x1446>
 8009468:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800946c:	3301      	adds	r3, #1
 800946e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009472:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009476:	b29b      	uxth	r3, r3
 8009478:	029b      	lsls	r3, r3, #10
 800947a:	b29a      	uxth	r2, r3
 800947c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009480:	801a      	strh	r2, [r3, #0]
 8009482:	e3cb      	b.n	8009c1c <USB_EPStartXfer+0x1bf0>
 8009484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009488:	095b      	lsrs	r3, r3, #5
 800948a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800948e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009492:	f003 031f 	and.w	r3, r3, #31
 8009496:	2b00      	cmp	r3, #0
 8009498:	d104      	bne.n	80094a4 <USB_EPStartXfer+0x1478>
 800949a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800949e:	3b01      	subs	r3, #1
 80094a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80094a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	029b      	lsls	r3, r3, #10
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	e3ad      	b.n	8009c1c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80094c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	78db      	ldrb	r3, [r3, #3]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	f040 8200 	bne.w	80098d2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80094d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f040 8091 	bne.w	8009606 <USB_EPStartXfer+0x15da>
 80094e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009500:	b29b      	uxth	r3, r3
 8009502:	461a      	mov	r2, r3
 8009504:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009508:	4413      	add	r3, r2
 800950a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800950e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	011a      	lsls	r2, r3, #4
 800951c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009520:	4413      	add	r3, r2
 8009522:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800952a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800952e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d116      	bne.n	8009568 <USB_EPStartXfer+0x153c>
 800953a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	b29b      	uxth	r3, r3
 8009542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009546:	b29a      	uxth	r2, r3
 8009548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800954c:	801a      	strh	r2, [r3, #0]
 800954e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	b29b      	uxth	r3, r3
 8009556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800955a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800955e:	b29a      	uxth	r2, r3
 8009560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009564:	801a      	strh	r2, [r3, #0]
 8009566:	e083      	b.n	8009670 <USB_EPStartXfer+0x1644>
 8009568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800956c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	2b3e      	cmp	r3, #62	; 0x3e
 8009576:	d820      	bhi.n	80095ba <USB_EPStartXfer+0x158e>
 8009578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800957c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	085b      	lsrs	r3, r3, #1
 8009586:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800958a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800958e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d004      	beq.n	80095a8 <USB_EPStartXfer+0x157c>
 800959e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a2:	3301      	adds	r3, #1
 80095a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	029b      	lsls	r3, r3, #10
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095b6:	801a      	strh	r2, [r3, #0]
 80095b8:	e05a      	b.n	8009670 <USB_EPStartXfer+0x1644>
 80095ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	095b      	lsrs	r3, r3, #5
 80095c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	f003 031f 	and.w	r3, r3, #31
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d104      	bne.n	80095ea <USB_EPStartXfer+0x15be>
 80095e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e4:	3b01      	subs	r3, #1
 80095e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	029b      	lsls	r3, r3, #10
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009602:	801a      	strh	r2, [r3, #0]
 8009604:	e034      	b.n	8009670 <USB_EPStartXfer+0x1644>
 8009606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800960a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	785b      	ldrb	r3, [r3, #1]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d12c      	bne.n	8009670 <USB_EPStartXfer+0x1644>
 8009616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009632:	b29b      	uxth	r3, r3
 8009634:	461a      	mov	r2, r3
 8009636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800963a:	4413      	add	r3, r2
 800963c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	011a      	lsls	r2, r3, #4
 800964e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009652:	4413      	add	r3, r2
 8009654:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800965c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	b29a      	uxth	r2, r3
 800966a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800966e:	801a      	strh	r2, [r3, #0]
 8009670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800967e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	785b      	ldrb	r3, [r3, #1]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f040 8091 	bne.w	80097b2 <USB_EPStartXfer+0x1786>
 8009690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800969e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	461a      	mov	r2, r3
 80096b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096b4:	4413      	add	r3, r2
 80096b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	011a      	lsls	r2, r3, #4
 80096c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096cc:	4413      	add	r3, r2
 80096ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d116      	bne.n	8009714 <USB_EPStartXfer+0x16e8>
 80096e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096f8:	801a      	strh	r2, [r3, #0]
 80096fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096fe:	881b      	ldrh	r3, [r3, #0]
 8009700:	b29b      	uxth	r3, r3
 8009702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800970a:	b29a      	uxth	r2, r3
 800970c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009710:	801a      	strh	r2, [r3, #0]
 8009712:	e07c      	b.n	800980e <USB_EPStartXfer+0x17e2>
 8009714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	2b3e      	cmp	r3, #62	; 0x3e
 8009722:	d820      	bhi.n	8009766 <USB_EPStartXfer+0x173a>
 8009724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	085b      	lsrs	r3, r3, #1
 8009732:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800973a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <USB_EPStartXfer+0x1728>
 800974a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800974e:	3301      	adds	r3, #1
 8009750:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009754:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009758:	b29b      	uxth	r3, r3
 800975a:	029b      	lsls	r3, r3, #10
 800975c:	b29a      	uxth	r2, r3
 800975e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009762:	801a      	strh	r2, [r3, #0]
 8009764:	e053      	b.n	800980e <USB_EPStartXfer+0x17e2>
 8009766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800976a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	095b      	lsrs	r3, r3, #5
 8009774:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800977c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	f003 031f 	and.w	r3, r3, #31
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <USB_EPStartXfer+0x176a>
 800978c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009790:	3b01      	subs	r3, #1
 8009792:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009796:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800979a:	b29b      	uxth	r3, r3
 800979c:	029b      	lsls	r3, r3, #10
 800979e:	b29b      	uxth	r3, r3
 80097a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097ae:	801a      	strh	r2, [r3, #0]
 80097b0:	e02d      	b.n	800980e <USB_EPStartXfer+0x17e2>
 80097b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	785b      	ldrb	r3, [r3, #1]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d125      	bne.n	800980e <USB_EPStartXfer+0x17e2>
 80097c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	461a      	mov	r2, r3
 80097d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097d8:	4413      	add	r3, r2
 80097da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	011a      	lsls	r2, r3, #4
 80097ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097f0:	4413      	add	r3, r2
 80097f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	b29a      	uxth	r2, r3
 8009808:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800980c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800980e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 81fe 	beq.w	8009c1c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009824:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800982e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	881b      	ldrh	r3, [r3, #0]
 800983c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009840:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d005      	beq.n	8009858 <USB_EPStartXfer+0x182c>
 800984c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10d      	bne.n	8009874 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009858:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800985c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009860:	2b00      	cmp	r3, #0
 8009862:	f040 81db 	bne.w	8009c1c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009866:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800986a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986e:	2b00      	cmp	r3, #0
 8009870:	f040 81d4 	bne.w	8009c1c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	b29b      	uxth	r3, r3
 8009892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800989e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	441a      	add	r2, r3
 80098b8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80098bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	8013      	strh	r3, [r2, #0]
 80098d0:	e1a4      	b.n	8009c1c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80098d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	78db      	ldrb	r3, [r3, #3]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	f040 819a 	bne.w	8009c18 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80098e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699a      	ldr	r2, [r3, #24]
 80098f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d917      	bls.n	8009930 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8009900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	699a      	ldr	r2, [r3, #24]
 800991c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009920:	1ad2      	subs	r2, r2, r3
 8009922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	619a      	str	r2, [r3, #24]
 800992e:	e00e      	b.n	800994e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8009930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2200      	movs	r2, #0
 800994c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800994e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d178      	bne.n	8009a50 <USB_EPStartXfer+0x1a24>
 800995e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009962:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800996c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800997a:	b29b      	uxth	r3, r3
 800997c:	461a      	mov	r2, r3
 800997e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009982:	4413      	add	r3, r2
 8009984:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800998c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	011a      	lsls	r2, r3, #4
 8009996:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800999a:	4413      	add	r3, r2
 800999c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80099a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d116      	bne.n	80099da <USB_EPStartXfer+0x19ae>
 80099ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099be:	801a      	strh	r2, [r3, #0]
 80099c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099d6:	801a      	strh	r2, [r3, #0]
 80099d8:	e06b      	b.n	8009ab2 <USB_EPStartXfer+0x1a86>
 80099da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099de:	2b3e      	cmp	r3, #62	; 0x3e
 80099e0:	d818      	bhi.n	8009a14 <USB_EPStartXfer+0x19e8>
 80099e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e6:	085b      	lsrs	r3, r3, #1
 80099e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <USB_EPStartXfer+0x19d6>
 80099f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099fc:	3301      	adds	r3, #1
 80099fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	029b      	lsls	r3, r3, #10
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a10:	801a      	strh	r2, [r3, #0]
 8009a12:	e04e      	b.n	8009ab2 <USB_EPStartXfer+0x1a86>
 8009a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a18:	095b      	lsrs	r3, r3, #5
 8009a1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a22:	f003 031f 	and.w	r3, r3, #31
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d104      	bne.n	8009a34 <USB_EPStartXfer+0x1a08>
 8009a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	029b      	lsls	r3, r3, #10
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a4c:	801a      	strh	r2, [r3, #0]
 8009a4e:	e030      	b.n	8009ab2 <USB_EPStartXfer+0x1a86>
 8009a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	785b      	ldrb	r3, [r3, #1]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d128      	bne.n	8009ab2 <USB_EPStartXfer+0x1a86>
 8009a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a84:	4413      	add	r3, r2
 8009a86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	011a      	lsls	r2, r3, #4
 8009a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009aa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ab0:	801a      	strh	r2, [r3, #0]
 8009ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d178      	bne.n	8009bc2 <USB_EPStartXfer+0x1b96>
 8009ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	461a      	mov	r2, r3
 8009af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009af4:	4413      	add	r3, r2
 8009af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	011a      	lsls	r2, r3, #4
 8009b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d116      	bne.n	8009b4c <USB_EPStartXfer+0x1b20>
 8009b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b48:	801a      	strh	r2, [r3, #0]
 8009b4a:	e067      	b.n	8009c1c <USB_EPStartXfer+0x1bf0>
 8009b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b50:	2b3e      	cmp	r3, #62	; 0x3e
 8009b52:	d818      	bhi.n	8009b86 <USB_EPStartXfer+0x1b5a>
 8009b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b58:	085b      	lsrs	r3, r3, #1
 8009b5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d004      	beq.n	8009b74 <USB_EPStartXfer+0x1b48>
 8009b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b6e:	3301      	adds	r3, #1
 8009b70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	029b      	lsls	r3, r3, #10
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	e04a      	b.n	8009c1c <USB_EPStartXfer+0x1bf0>
 8009b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b94:	f003 031f 	and.w	r3, r3, #31
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d104      	bne.n	8009ba6 <USB_EPStartXfer+0x1b7a>
 8009b9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	029b      	lsls	r3, r3, #10
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	e02c      	b.n	8009c1c <USB_EPStartXfer+0x1bf0>
 8009bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	785b      	ldrb	r3, [r3, #1]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d124      	bne.n	8009c1c <USB_EPStartXfer+0x1bf0>
 8009bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	461a      	mov	r2, r3
 8009be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be8:	4413      	add	r3, r2
 8009bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	011a      	lsls	r2, r3, #4
 8009bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c00:	4413      	add	r3, r2
 8009c02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c14:	801a      	strh	r2, [r3, #0]
 8009c16:	e001      	b.n	8009c1c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e03a      	b.n	8009c92 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c42:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009c46:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009c52:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	441a      	add	r2, r3
 8009c78:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	785b      	ldrb	r3, [r3, #1]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d020      	beq.n	8009cf0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cc4:	81bb      	strh	r3, [r7, #12]
 8009cc6:	89bb      	ldrh	r3, [r7, #12]
 8009cc8:	f083 0310 	eor.w	r3, r3, #16
 8009ccc:	81bb      	strh	r3, [r7, #12]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	441a      	add	r2, r3
 8009cd8:	89bb      	ldrh	r3, [r7, #12]
 8009cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	8013      	strh	r3, [r2, #0]
 8009cee:	e01f      	b.n	8009d30 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d06:	81fb      	strh	r3, [r7, #14]
 8009d08:	89fb      	ldrh	r3, [r7, #14]
 8009d0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d0e:	81fb      	strh	r3, [r7, #14]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	441a      	add	r2, r3
 8009d1a:	89fb      	ldrh	r3, [r7, #14]
 8009d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bc80      	pop	{r7}
 8009d3a:	4770      	bx	lr

08009d3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	7b1b      	ldrb	r3, [r3, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f040 809d 	bne.w	8009e8a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	785b      	ldrb	r3, [r3, #1]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d04c      	beq.n	8009df2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	823b      	strh	r3, [r7, #16]
 8009d66:	8a3b      	ldrh	r3, [r7, #16]
 8009d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d01b      	beq.n	8009da8 <USB_EPClearStall+0x6c>
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d86:	81fb      	strh	r3, [r7, #14]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	441a      	add	r2, r3
 8009d92:	89fb      	ldrh	r3, [r7, #14]
 8009d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009da0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	78db      	ldrb	r3, [r3, #3]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d06c      	beq.n	8009e8a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dc6:	81bb      	strh	r3, [r7, #12]
 8009dc8:	89bb      	ldrh	r3, [r7, #12]
 8009dca:	f083 0320 	eor.w	r3, r3, #32
 8009dce:	81bb      	strh	r3, [r7, #12]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	441a      	add	r2, r3
 8009dda:	89bb      	ldrh	r3, [r7, #12]
 8009ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	8013      	strh	r3, [r2, #0]
 8009df0:	e04b      	b.n	8009e8a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	82fb      	strh	r3, [r7, #22]
 8009e00:	8afb      	ldrh	r3, [r7, #22]
 8009e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d01b      	beq.n	8009e42 <USB_EPClearStall+0x106>
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e20:	82bb      	strh	r3, [r7, #20]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	441a      	add	r2, r3
 8009e2c:	8abb      	ldrh	r3, [r7, #20]
 8009e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4413      	add	r3, r2
 8009e4c:	881b      	ldrh	r3, [r3, #0]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e58:	827b      	strh	r3, [r7, #18]
 8009e5a:	8a7b      	ldrh	r3, [r7, #18]
 8009e5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e60:	827b      	strh	r3, [r7, #18]
 8009e62:	8a7b      	ldrh	r3, [r7, #18]
 8009e64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e68:	827b      	strh	r3, [r7, #18]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	441a      	add	r2, r3
 8009e74:	8a7b      	ldrh	r3, [r7, #18]
 8009e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	371c      	adds	r7, #28
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bc80      	pop	{r7}
 8009e94:	4770      	bx	lr

08009e96 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d103      	bne.n	8009eb0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2280      	movs	r2, #128	; 0x80
 8009eac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bc80      	pop	{r7}
 8009eba:	4770      	bx	lr

08009ebc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bc80      	pop	{r7}
 8009ece:	4770      	bx	lr

08009ed0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bc80      	pop	{r7}
 8009ee2:	4770      	bx	lr

08009ee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bc80      	pop	{r7}
 8009f00:	4770      	bx	lr

08009f02 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bc80      	pop	{r7}
 8009f16:	4770      	bx	lr

08009f18 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b08d      	sub	sp, #52	; 0x34
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	4611      	mov	r1, r2
 8009f24:	461a      	mov	r2, r3
 8009f26:	460b      	mov	r3, r1
 8009f28:	80fb      	strh	r3, [r7, #6]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009f2e:	88bb      	ldrh	r3, [r7, #4]
 8009f30:	3301      	adds	r3, #1
 8009f32:	085b      	lsrs	r3, r3, #1
 8009f34:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	005a      	lsls	r2, r3, #1
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	4413      	add	r3, r2
 8009f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f4a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f50:	e01e      	b.n	8009f90 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	021b      	lsls	r3, r3, #8
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	461a      	mov	r2, r3
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	3302      	adds	r3, #2
 8009f7c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f80:	3302      	adds	r3, #2
 8009f82:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	3301      	adds	r3, #1
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1dd      	bne.n	8009f52 <USB_WritePMA+0x3a>
  }
}
 8009f96:	bf00      	nop
 8009f98:	bf00      	nop
 8009f9a:	3734      	adds	r7, #52	; 0x34
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bc80      	pop	{r7}
 8009fa0:	4770      	bx	lr

08009fa2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b08b      	sub	sp, #44	; 0x2c
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	60f8      	str	r0, [r7, #12]
 8009faa:	60b9      	str	r1, [r7, #8]
 8009fac:	4611      	mov	r1, r2
 8009fae:	461a      	mov	r2, r3
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	80fb      	strh	r3, [r7, #6]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009fb8:	88bb      	ldrh	r3, [r7, #4]
 8009fba:	085b      	lsrs	r3, r3, #1
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009fc8:	88fb      	ldrh	r3, [r7, #6]
 8009fca:	005a      	lsls	r2, r3, #1
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fd4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8009fda:	e01b      	b.n	800a014 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	881b      	ldrh	r3, [r3, #0]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009fe4:	6a3b      	ldr	r3, [r7, #32]
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	0a1b      	lsrs	r3, r3, #8
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	3301      	adds	r3, #1
 800a006:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	3302      	adds	r3, #2
 800a00c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	3b01      	subs	r3, #1
 800a012:	627b      	str	r3, [r7, #36]	; 0x24
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1e0      	bne.n	8009fdc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a01a:	88bb      	ldrh	r3, [r7, #4]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	b29b      	uxth	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d007      	beq.n	800a036 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	b2da      	uxtb	r2, r3
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	701a      	strb	r2, [r3, #0]
  }
}
 800a036:	bf00      	nop
 800a038:	372c      	adds	r7, #44	; 0x2c
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bc80      	pop	{r7}
 800a03e:	4770      	bx	lr

0800a040 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	7c1b      	ldrb	r3, [r3, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d115      	bne.n	800a084 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a05c:	2202      	movs	r2, #2
 800a05e:	2181      	movs	r1, #129	; 0x81
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 fe8c 	bl	800bd7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a06c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a070:	2202      	movs	r2, #2
 800a072:	2101      	movs	r1, #1
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f001 fe82 	bl	800bd7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a082:	e012      	b.n	800a0aa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a084:	2340      	movs	r3, #64	; 0x40
 800a086:	2202      	movs	r2, #2
 800a088:	2181      	movs	r1, #129	; 0x81
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f001 fe77 	bl	800bd7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a096:	2340      	movs	r3, #64	; 0x40
 800a098:	2202      	movs	r2, #2
 800a09a:	2101      	movs	r1, #1
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 fe6e 	bl	800bd7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a0aa:	2308      	movs	r3, #8
 800a0ac:	2203      	movs	r2, #3
 800a0ae:	2182      	movs	r1, #130	; 0x82
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f001 fe64 	bl	800bd7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a0bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a0c0:	f001 ff84 	bl	800bfcc <USBD_static_malloc>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	73fb      	strb	r3, [r7, #15]
 800a0da:	e026      	b.n	800a12a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	7c1b      	ldrb	r3, [r3, #16]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d109      	bne.n	800a11a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a10c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a110:	2101      	movs	r1, #1
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f001 ff24 	bl	800bf60 <USBD_LL_PrepareReceive>
 800a118:	e007      	b.n	800a12a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a120:	2340      	movs	r3, #64	; 0x40
 800a122:	2101      	movs	r1, #1
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f001 ff1b 	bl	800bf60 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a144:	2181      	movs	r1, #129	; 0x81
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 fe3f 	bl	800bdca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a152:	2101      	movs	r1, #1
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 fe38 	bl	800bdca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a162:	2182      	movs	r1, #130	; 0x82
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 fe30 	bl	800bdca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00e      	beq.n	800a198 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18a:	4618      	mov	r0, r3
 800a18c:	f001 ff2a 	bl	800bfe4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a198:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b086      	sub	sp, #24
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d039      	beq.n	800a240 <USBD_CDC_Setup+0x9e>
 800a1cc:	2b20      	cmp	r3, #32
 800a1ce:	d17f      	bne.n	800a2d0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	88db      	ldrh	r3, [r3, #6]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d029      	beq.n	800a22c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	b25b      	sxtb	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	da11      	bge.n	800a206 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a1ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	88d2      	ldrh	r2, [r2, #6]
 800a1f4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a1f6:	6939      	ldr	r1, [r7, #16]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	88db      	ldrh	r3, [r3, #6]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f001 fa09 	bl	800b616 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a204:	e06b      	b.n	800a2de <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	785a      	ldrb	r2, [r3, #1]
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	88db      	ldrh	r3, [r3, #6]
 800a214:	b2da      	uxtb	r2, r3
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a21c:	6939      	ldr	r1, [r7, #16]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	88db      	ldrh	r3, [r3, #6]
 800a222:	461a      	mov	r2, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f001 fa24 	bl	800b672 <USBD_CtlPrepareRx>
      break;
 800a22a:	e058      	b.n	800a2de <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	7850      	ldrb	r0, [r2, #1]
 800a238:	2200      	movs	r2, #0
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	4798      	blx	r3
      break;
 800a23e:	e04e      	b.n	800a2de <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	2b0b      	cmp	r3, #11
 800a246:	d02e      	beq.n	800a2a6 <USBD_CDC_Setup+0x104>
 800a248:	2b0b      	cmp	r3, #11
 800a24a:	dc38      	bgt.n	800a2be <USBD_CDC_Setup+0x11c>
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d002      	beq.n	800a256 <USBD_CDC_Setup+0xb4>
 800a250:	2b0a      	cmp	r3, #10
 800a252:	d014      	beq.n	800a27e <USBD_CDC_Setup+0xdc>
 800a254:	e033      	b.n	800a2be <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d107      	bne.n	800a270 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a260:	f107 030c 	add.w	r3, r7, #12
 800a264:	2202      	movs	r2, #2
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f001 f9d4 	bl	800b616 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a26e:	e02e      	b.n	800a2ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 f965 	bl	800b542 <USBD_CtlError>
            ret = USBD_FAIL;
 800a278:	2302      	movs	r3, #2
 800a27a:	75fb      	strb	r3, [r7, #23]
          break;
 800a27c:	e027      	b.n	800a2ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a284:	2b03      	cmp	r3, #3
 800a286:	d107      	bne.n	800a298 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a288:	f107 030f 	add.w	r3, r7, #15
 800a28c:	2201      	movs	r2, #1
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 f9c0 	bl	800b616 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a296:	e01a      	b.n	800a2ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f001 f951 	bl	800b542 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	75fb      	strb	r3, [r7, #23]
          break;
 800a2a4:	e013      	b.n	800a2ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d00d      	beq.n	800a2cc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 f945 	bl	800b542 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a2bc:	e006      	b.n	800a2cc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f001 f93e 	bl	800b542 <USBD_CtlError>
          ret = USBD_FAIL;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ca:	e000      	b.n	800a2ce <USBD_CDC_Setup+0x12c>
          break;
 800a2cc:	bf00      	nop
      }
      break;
 800a2ce:	e006      	b.n	800a2de <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f001 f935 	bl	800b542 <USBD_CtlError>
      ret = USBD_FAIL;
 800a2d8:	2302      	movs	r3, #2
 800a2da:	75fb      	strb	r3, [r7, #23]
      break;
 800a2dc:	bf00      	nop
  }

  return ret;
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a302:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d03a      	beq.n	800a384 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a30e:	78fa      	ldrb	r2, [r7, #3]
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	440b      	add	r3, r1
 800a31c:	331c      	adds	r3, #28
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d029      	beq.n	800a378 <USBD_CDC_DataIn+0x90>
 800a324:	78fa      	ldrb	r2, [r7, #3]
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	4613      	mov	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	440b      	add	r3, r1
 800a332:	331c      	adds	r3, #28
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	78f9      	ldrb	r1, [r7, #3]
 800a338:	68b8      	ldr	r0, [r7, #8]
 800a33a:	460b      	mov	r3, r1
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	440b      	add	r3, r1
 800a340:	00db      	lsls	r3, r3, #3
 800a342:	4403      	add	r3, r0
 800a344:	3338      	adds	r3, #56	; 0x38
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	fbb2 f1f3 	udiv	r1, r2, r3
 800a34c:	fb01 f303 	mul.w	r3, r1, r3
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d110      	bne.n	800a378 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a356:	78fa      	ldrb	r2, [r7, #3]
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	4613      	mov	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	440b      	add	r3, r1
 800a364:	331c      	adds	r3, #28
 800a366:	2200      	movs	r2, #0
 800a368:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a36a:	78f9      	ldrb	r1, [r7, #3]
 800a36c:	2300      	movs	r3, #0
 800a36e:	2200      	movs	r2, #0
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 fdd2 	bl	800bf1a <USBD_LL_Transmit>
 800a376:	e003      	b.n	800a380 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	e000      	b.n	800a386 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a384:	2302      	movs	r3, #2
  }
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b084      	sub	sp, #16
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	460b      	mov	r3, r1
 800a398:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a3a2:	78fb      	ldrb	r3, [r7, #3]
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f001 fdfd 	bl	800bfa6 <USBD_LL_GetRxDataSize>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00d      	beq.n	800a3da <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4798      	blx	r3

    return USBD_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e000      	b.n	800a3dc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a3da:	2302      	movs	r3, #2
  }
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3f2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d015      	beq.n	800a42a <USBD_CDC_EP0_RxReady+0x46>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a404:	2bff      	cmp	r3, #255	; 0xff
 800a406:	d010      	beq.n	800a42a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a416:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a41e:	b292      	uxth	r2, r2
 800a420:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	22ff      	movs	r2, #255	; 0xff
 800a426:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2243      	movs	r2, #67	; 0x43
 800a440:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a442:	4b03      	ldr	r3, [pc, #12]	; (800a450 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	bc80      	pop	{r7}
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	200000bc 	.word	0x200000bc

0800a454 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2243      	movs	r2, #67	; 0x43
 800a460:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a462:	4b03      	ldr	r3, [pc, #12]	; (800a470 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	20000078 	.word	0x20000078

0800a474 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2243      	movs	r2, #67	; 0x43
 800a480:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a482:	4b03      	ldr	r3, [pc, #12]	; (800a490 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	bc80      	pop	{r7}
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	20000100 	.word	0x20000100

0800a494 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	220a      	movs	r2, #10
 800a4a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a4a2:	4b03      	ldr	r3, [pc, #12]	; (800a4b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	20000034 	.word	0x20000034

0800a4b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a4be:	2302      	movs	r3, #2
 800a4c0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bc80      	pop	{r7}
 800a4de:	4770      	bx	lr

0800a4e0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a4fe:	88fa      	ldrh	r2, [r7, #6]
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	371c      	adds	r7, #28
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bc80      	pop	{r7}
 800a510:	4770      	bx	lr

0800a512 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a512:	b480      	push	{r7}
 800a514:	b085      	sub	sp, #20
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a522:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	bc80      	pop	{r7}
 800a536:	4770      	bx	lr

0800a538 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a546:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d01c      	beq.n	800a58c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d115      	bne.n	800a588 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2201      	movs	r2, #1
 800a560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	2181      	movs	r1, #129	; 0x81
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f001 fccb 	bl	800bf1a <USBD_LL_Transmit>

      return USBD_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	e002      	b.n	800a58e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a588:	2301      	movs	r3, #1
 800a58a:	e000      	b.n	800a58e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a58c:	2302      	movs	r3, #2
  }
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d017      	beq.n	800a5e0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	7c1b      	ldrb	r3, [r3, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d109      	bne.n	800a5cc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f001 fccb 	bl	800bf60 <USBD_LL_PrepareReceive>
 800a5ca:	e007      	b.n	800a5dc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5d2:	2340      	movs	r3, #64	; 0x40
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 fcc2 	bl	800bf60 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e000      	b.n	800a5e2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a5e0:	2302      	movs	r3, #2
  }
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d101      	bne.n	800a602 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a5fe:	2302      	movs	r3, #2
 800a600:	e01a      	b.n	800a638 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d003      	beq.n	800a614 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	79fa      	ldrb	r2, [r7, #7]
 800a62e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f001 fb2f 	bl	800bc94 <USBD_LL_Init>

  return USBD_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d006      	beq.n	800a662 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]
 800a660:	e001      	b.n	800a666 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a662:	2302      	movs	r3, #2
 800a664:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bc80      	pop	{r7}
 800a670:	4770      	bx	lr

0800a672 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f001 fb64 	bl	800bd48 <USBD_LL_Start>

  return USBD_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	bc80      	pop	{r7}
 800a69c:	4770      	bx	lr

0800a69e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00c      	beq.n	800a6d2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	78fa      	ldrb	r2, [r7, #3]
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	4798      	blx	r3
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	78fa      	ldrb	r2, [r7, #3]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	4798      	blx	r3

  return USBD_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b082      	sub	sp, #8
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fed8 	bl	800b4ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a728:	461a      	mov	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a736:	f003 031f 	and.w	r3, r3, #31
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d016      	beq.n	800a76c <USBD_LL_SetupStage+0x6a>
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d81c      	bhi.n	800a77c <USBD_LL_SetupStage+0x7a>
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <USBD_LL_SetupStage+0x4a>
 800a746:	2b01      	cmp	r3, #1
 800a748:	d008      	beq.n	800a75c <USBD_LL_SetupStage+0x5a>
 800a74a:	e017      	b.n	800a77c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f9cb 	bl	800aaf0 <USBD_StdDevReq>
      break;
 800a75a:	e01a      	b.n	800a792 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fa2d 	bl	800abc4 <USBD_StdItfReq>
      break;
 800a76a:	e012      	b.n	800a792 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fa6d 	bl	800ac54 <USBD_StdEPReq>
      break;
 800a77a:	e00a      	b.n	800a792 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a782:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a786:	b2db      	uxtb	r3, r3
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f001 fb3c 	bl	800be08 <USBD_LL_StallEP>
      break;
 800a790:	bf00      	nop
  }

  return USBD_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a7aa:	7afb      	ldrb	r3, [r7, #11]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d14b      	bne.n	800a848 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a7b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	d134      	bne.n	800a82c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	68da      	ldr	r2, [r3, #12]
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d919      	bls.n	800a802 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	68da      	ldr	r2, [r3, #12]
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	1ad2      	subs	r2, r2, r3
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	68da      	ldr	r2, [r3, #12]
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d203      	bcs.n	800a7f0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	e002      	b.n	800a7f6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	6879      	ldr	r1, [r7, #4]
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 ff57 	bl	800b6ae <USBD_CtlContinueRx>
 800a800:	e038      	b.n	800a874 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a814:	2b03      	cmp	r3, #3
 800a816:	d105      	bne.n	800a824 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 ff54 	bl	800b6d2 <USBD_CtlSendStatus>
 800a82a:	e023      	b.n	800a874 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a832:	2b05      	cmp	r3, #5
 800a834:	d11e      	bne.n	800a874 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a83e:	2100      	movs	r1, #0
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f001 fae1 	bl	800be08 <USBD_LL_StallEP>
 800a846:	e015      	b.n	800a874 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00d      	beq.n	800a870 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d108      	bne.n	800a870 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	7afa      	ldrb	r2, [r7, #11]
 800a868:	4611      	mov	r1, r2
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	4798      	blx	r3
 800a86e:	e001      	b.n	800a874 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a870:	2302      	movs	r3, #2
 800a872:	e000      	b.n	800a876 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b086      	sub	sp, #24
 800a882:	af00      	add	r7, sp, #0
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	460b      	mov	r3, r1
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d17f      	bne.n	800a992 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3314      	adds	r3, #20
 800a896:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d15c      	bne.n	800a95c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d915      	bls.n	800a8da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	68da      	ldr	r2, [r3, #12]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	1ad2      	subs	r2, r2, r3
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	6879      	ldr	r1, [r7, #4]
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f000 fec1 	bl	800b64e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f001 fb44 	bl	800bf60 <USBD_LL_PrepareReceive>
 800a8d8:	e04e      	b.n	800a978 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	6912      	ldr	r2, [r2, #16]
 800a8e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8e6:	fb01 f202 	mul.w	r2, r1, r2
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d11c      	bne.n	800a92a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	689a      	ldr	r2, [r3, #8]
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d316      	bcc.n	800a92a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	689a      	ldr	r2, [r3, #8]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a906:	429a      	cmp	r2, r3
 800a908:	d20f      	bcs.n	800a92a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a90a:	2200      	movs	r2, #0
 800a90c:	2100      	movs	r1, #0
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f000 fe9d 	bl	800b64e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a91c:	2300      	movs	r3, #0
 800a91e:	2200      	movs	r2, #0
 800a920:	2100      	movs	r1, #0
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f001 fb1c 	bl	800bf60 <USBD_LL_PrepareReceive>
 800a928:	e026      	b.n	800a978 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00a      	beq.n	800a94c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d105      	bne.n	800a94c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a94c:	2180      	movs	r1, #128	; 0x80
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f001 fa5a 	bl	800be08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 fecf 	bl	800b6f8 <USBD_CtlReceiveStatus>
 800a95a:	e00d      	b.n	800a978 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a962:	2b04      	cmp	r3, #4
 800a964:	d004      	beq.n	800a970 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d103      	bne.n	800a978 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a970:	2180      	movs	r1, #128	; 0x80
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f001 fa48 	bl	800be08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d11d      	bne.n	800a9be <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7ff fe81 	bl	800a68a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a990:	e015      	b.n	800a9be <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00d      	beq.n	800a9ba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d108      	bne.n	800a9ba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	7afa      	ldrb	r2, [r7, #11]
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	4798      	blx	r3
 800a9b8:	e001      	b.n	800a9be <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e000      	b.n	800a9c0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9d0:	2340      	movs	r3, #64	; 0x40
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f001 f9d1 	bl	800bd7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2240      	movs	r2, #64	; 0x40
 800a9e8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9ec:	2340      	movs	r3, #64	; 0x40
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2180      	movs	r1, #128	; 0x80
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f001 f9c3 	bl	800bd7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2240      	movs	r2, #64	; 0x40
 800aa02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d009      	beq.n	800aa40 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	6852      	ldr	r2, [r2, #4]
 800aa38:	b2d2      	uxtb	r2, r2
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	4798      	blx	r3
  }

  return USBD_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	460b      	mov	r3, r1
 800aa54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	78fa      	ldrb	r2, [r7, #3]
 800aa5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bc80      	pop	{r7}
 800aa66:	4770      	bx	lr

0800aa68 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2204      	movs	r2, #4
 800aa80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bc80      	pop	{r7}
 800aa8e:	4770      	bx	lr

0800aa90 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d105      	bne.n	800aaae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bc80      	pop	{r7}
 800aab8:	4770      	bx	lr

0800aaba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b082      	sub	sp, #8
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d10b      	bne.n	800aae4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d005      	beq.n	800aae4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab06:	2b40      	cmp	r3, #64	; 0x40
 800ab08:	d005      	beq.n	800ab16 <USBD_StdDevReq+0x26>
 800ab0a:	2b40      	cmp	r3, #64	; 0x40
 800ab0c:	d84f      	bhi.n	800abae <USBD_StdDevReq+0xbe>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d009      	beq.n	800ab26 <USBD_StdDevReq+0x36>
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	d14b      	bne.n	800abae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	4798      	blx	r3
      break;
 800ab24:	e048      	b.n	800abb8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	785b      	ldrb	r3, [r3, #1]
 800ab2a:	2b09      	cmp	r3, #9
 800ab2c:	d839      	bhi.n	800aba2 <USBD_StdDevReq+0xb2>
 800ab2e:	a201      	add	r2, pc, #4	; (adr r2, 800ab34 <USBD_StdDevReq+0x44>)
 800ab30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab34:	0800ab85 	.word	0x0800ab85
 800ab38:	0800ab99 	.word	0x0800ab99
 800ab3c:	0800aba3 	.word	0x0800aba3
 800ab40:	0800ab8f 	.word	0x0800ab8f
 800ab44:	0800aba3 	.word	0x0800aba3
 800ab48:	0800ab67 	.word	0x0800ab67
 800ab4c:	0800ab5d 	.word	0x0800ab5d
 800ab50:	0800aba3 	.word	0x0800aba3
 800ab54:	0800ab7b 	.word	0x0800ab7b
 800ab58:	0800ab71 	.word	0x0800ab71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f9dc 	bl	800af1c <USBD_GetDescriptor>
          break;
 800ab64:	e022      	b.n	800abac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fb3f 	bl	800b1ec <USBD_SetAddress>
          break;
 800ab6e:	e01d      	b.n	800abac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fb7e 	bl	800b274 <USBD_SetConfig>
          break;
 800ab78:	e018      	b.n	800abac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fc07 	bl	800b390 <USBD_GetConfig>
          break;
 800ab82:	e013      	b.n	800abac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fc37 	bl	800b3fa <USBD_GetStatus>
          break;
 800ab8c:	e00e      	b.n	800abac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab8e:	6839      	ldr	r1, [r7, #0]
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fc65 	bl	800b460 <USBD_SetFeature>
          break;
 800ab96:	e009      	b.n	800abac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fc74 	bl	800b488 <USBD_ClrFeature>
          break;
 800aba0:	e004      	b.n	800abac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fccc 	bl	800b542 <USBD_CtlError>
          break;
 800abaa:	bf00      	nop
      }
      break;
 800abac:	e004      	b.n	800abb8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fcc6 	bl	800b542 <USBD_CtlError>
      break;
 800abb6:	bf00      	nop
  }

  return ret;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop

0800abc4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abda:	2b40      	cmp	r3, #64	; 0x40
 800abdc:	d005      	beq.n	800abea <USBD_StdItfReq+0x26>
 800abde:	2b40      	cmp	r3, #64	; 0x40
 800abe0:	d82e      	bhi.n	800ac40 <USBD_StdItfReq+0x7c>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <USBD_StdItfReq+0x26>
 800abe6:	2b20      	cmp	r3, #32
 800abe8:	d12a      	bne.n	800ac40 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf0:	3b01      	subs	r3, #1
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d81d      	bhi.n	800ac32 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	889b      	ldrh	r3, [r3, #4]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d813      	bhi.n	800ac28 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	4798      	blx	r3
 800ac0e:	4603      	mov	r3, r0
 800ac10:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	88db      	ldrh	r3, [r3, #6]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d110      	bne.n	800ac3c <USBD_StdItfReq+0x78>
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10d      	bne.n	800ac3c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fd56 	bl	800b6d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac26:	e009      	b.n	800ac3c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fc89 	bl	800b542 <USBD_CtlError>
          break;
 800ac30:	e004      	b.n	800ac3c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fc84 	bl	800b542 <USBD_CtlError>
          break;
 800ac3a:	e000      	b.n	800ac3e <USBD_StdItfReq+0x7a>
          break;
 800ac3c:	bf00      	nop
      }
      break;
 800ac3e:	e004      	b.n	800ac4a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fc7d 	bl	800b542 <USBD_CtlError>
      break;
 800ac48:	bf00      	nop
  }

  return USBD_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	889b      	ldrh	r3, [r3, #4]
 800ac66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac70:	2b40      	cmp	r3, #64	; 0x40
 800ac72:	d007      	beq.n	800ac84 <USBD_StdEPReq+0x30>
 800ac74:	2b40      	cmp	r3, #64	; 0x40
 800ac76:	f200 8146 	bhi.w	800af06 <USBD_StdEPReq+0x2b2>
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00a      	beq.n	800ac94 <USBD_StdEPReq+0x40>
 800ac7e:	2b20      	cmp	r3, #32
 800ac80:	f040 8141 	bne.w	800af06 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	4798      	blx	r3
      break;
 800ac92:	e13d      	b.n	800af10 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac9c:	2b20      	cmp	r3, #32
 800ac9e:	d10a      	bne.n	800acb6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	4798      	blx	r3
 800acae:	4603      	mov	r3, r0
 800acb0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
 800acb4:	e12d      	b.n	800af12 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	785b      	ldrb	r3, [r3, #1]
 800acba:	2b03      	cmp	r3, #3
 800acbc:	d007      	beq.n	800acce <USBD_StdEPReq+0x7a>
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	f300 811b 	bgt.w	800aefa <USBD_StdEPReq+0x2a6>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d072      	beq.n	800adae <USBD_StdEPReq+0x15a>
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d03a      	beq.n	800ad42 <USBD_StdEPReq+0xee>
 800accc:	e115      	b.n	800aefa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d002      	beq.n	800acde <USBD_StdEPReq+0x8a>
 800acd8:	2b03      	cmp	r3, #3
 800acda:	d015      	beq.n	800ad08 <USBD_StdEPReq+0xb4>
 800acdc:	e02b      	b.n	800ad36 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00c      	beq.n	800acfe <USBD_StdEPReq+0xaa>
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	2b80      	cmp	r3, #128	; 0x80
 800ace8:	d009      	beq.n	800acfe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f001 f88a 	bl	800be08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800acf4:	2180      	movs	r1, #128	; 0x80
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f001 f886 	bl	800be08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800acfc:	e020      	b.n	800ad40 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 fc1e 	bl	800b542 <USBD_CtlError>
              break;
 800ad06:	e01b      	b.n	800ad40 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	885b      	ldrh	r3, [r3, #2]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10e      	bne.n	800ad2e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ad10:	7bbb      	ldrb	r3, [r7, #14]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00b      	beq.n	800ad2e <USBD_StdEPReq+0xda>
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
 800ad18:	2b80      	cmp	r3, #128	; 0x80
 800ad1a:	d008      	beq.n	800ad2e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	88db      	ldrh	r3, [r3, #6]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d104      	bne.n	800ad2e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ad24:	7bbb      	ldrb	r3, [r7, #14]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f001 f86d 	bl	800be08 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fccf 	bl	800b6d2 <USBD_CtlSendStatus>

              break;
 800ad34:	e004      	b.n	800ad40 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fc02 	bl	800b542 <USBD_CtlError>
              break;
 800ad3e:	bf00      	nop
          }
          break;
 800ad40:	e0e0      	b.n	800af04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d002      	beq.n	800ad52 <USBD_StdEPReq+0xfe>
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d015      	beq.n	800ad7c <USBD_StdEPReq+0x128>
 800ad50:	e026      	b.n	800ada0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00c      	beq.n	800ad72 <USBD_StdEPReq+0x11e>
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	2b80      	cmp	r3, #128	; 0x80
 800ad5c:	d009      	beq.n	800ad72 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ad5e:	7bbb      	ldrb	r3, [r7, #14]
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f001 f850 	bl	800be08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ad68:	2180      	movs	r1, #128	; 0x80
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f001 f84c 	bl	800be08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad70:	e01c      	b.n	800adac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fbe4 	bl	800b542 <USBD_CtlError>
              break;
 800ad7a:	e017      	b.n	800adac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	885b      	ldrh	r3, [r3, #2]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d112      	bne.n	800adaa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d004      	beq.n	800ad98 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f001 f857 	bl	800be46 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fc9a 	bl	800b6d2 <USBD_CtlSendStatus>
              }
              break;
 800ad9e:	e004      	b.n	800adaa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fbcd 	bl	800b542 <USBD_CtlError>
              break;
 800ada8:	e000      	b.n	800adac <USBD_StdEPReq+0x158>
              break;
 800adaa:	bf00      	nop
          }
          break;
 800adac:	e0aa      	b.n	800af04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d002      	beq.n	800adbe <USBD_StdEPReq+0x16a>
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d032      	beq.n	800ae22 <USBD_StdEPReq+0x1ce>
 800adbc:	e097      	b.n	800aeee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d007      	beq.n	800add4 <USBD_StdEPReq+0x180>
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
 800adc6:	2b80      	cmp	r3, #128	; 0x80
 800adc8:	d004      	beq.n	800add4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fbb8 	bl	800b542 <USBD_CtlError>
                break;
 800add2:	e091      	b.n	800aef8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800add4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800add8:	2b00      	cmp	r3, #0
 800adda:	da0b      	bge.n	800adf4 <USBD_StdEPReq+0x1a0>
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ade2:	4613      	mov	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	3310      	adds	r3, #16
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	4413      	add	r3, r2
 800adf0:	3304      	adds	r3, #4
 800adf2:	e00b      	b.n	800ae0c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adf4:	7bbb      	ldrb	r3, [r7, #14]
 800adf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adfa:	4613      	mov	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	4413      	add	r3, r2
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2200      	movs	r2, #0
 800ae12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	2202      	movs	r2, #2
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fbfb 	bl	800b616 <USBD_CtlSendData>
              break;
 800ae20:	e06a      	b.n	800aef8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	da11      	bge.n	800ae4e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae2a:	7bbb      	ldrb	r3, [r7, #14]
 800ae2c:	f003 020f 	and.w	r2, r3, #15
 800ae30:	6879      	ldr	r1, [r7, #4]
 800ae32:	4613      	mov	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	440b      	add	r3, r1
 800ae3c:	3318      	adds	r3, #24
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d117      	bne.n	800ae74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fb7b 	bl	800b542 <USBD_CtlError>
                  break;
 800ae4c:	e054      	b.n	800aef8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
 800ae50:	f003 020f 	and.w	r2, r3, #15
 800ae54:	6879      	ldr	r1, [r7, #4]
 800ae56:	4613      	mov	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	440b      	add	r3, r1
 800ae60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d104      	bne.n	800ae74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fb68 	bl	800b542 <USBD_CtlError>
                  break;
 800ae72:	e041      	b.n	800aef8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	da0b      	bge.n	800ae94 <USBD_StdEPReq+0x240>
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
 800ae7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae82:	4613      	mov	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	3310      	adds	r3, #16
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	4413      	add	r3, r2
 800ae90:	3304      	adds	r3, #4
 800ae92:	e00b      	b.n	800aeac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	4413      	add	r3, r2
 800aeaa:	3304      	adds	r3, #4
 800aeac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d002      	beq.n	800aeba <USBD_StdEPReq+0x266>
 800aeb4:	7bbb      	ldrb	r3, [r7, #14]
 800aeb6:	2b80      	cmp	r3, #128	; 0x80
 800aeb8:	d103      	bne.n	800aec2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2200      	movs	r2, #0
 800aebe:	601a      	str	r2, [r3, #0]
 800aec0:	e00e      	b.n	800aee0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 ffdc 	bl	800be84 <USBD_LL_IsStallEP>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d003      	beq.n	800aeda <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2201      	movs	r2, #1
 800aed6:	601a      	str	r2, [r3, #0]
 800aed8:	e002      	b.n	800aee0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	2200      	movs	r2, #0
 800aede:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2202      	movs	r2, #2
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fb95 	bl	800b616 <USBD_CtlSendData>
              break;
 800aeec:	e004      	b.n	800aef8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fb26 	bl	800b542 <USBD_CtlError>
              break;
 800aef6:	bf00      	nop
          }
          break;
 800aef8:	e004      	b.n	800af04 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 fb20 	bl	800b542 <USBD_CtlError>
          break;
 800af02:	bf00      	nop
      }
      break;
 800af04:	e004      	b.n	800af10 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fb1a 	bl	800b542 <USBD_CtlError>
      break;
 800af0e:	bf00      	nop
  }

  return ret;
 800af10:	7bfb      	ldrb	r3, [r7, #15]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af26:	2300      	movs	r3, #0
 800af28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af2e:	2300      	movs	r3, #0
 800af30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	885b      	ldrh	r3, [r3, #2]
 800af36:	0a1b      	lsrs	r3, r3, #8
 800af38:	b29b      	uxth	r3, r3
 800af3a:	3b01      	subs	r3, #1
 800af3c:	2b06      	cmp	r3, #6
 800af3e:	f200 8128 	bhi.w	800b192 <USBD_GetDescriptor+0x276>
 800af42:	a201      	add	r2, pc, #4	; (adr r2, 800af48 <USBD_GetDescriptor+0x2c>)
 800af44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af48:	0800af65 	.word	0x0800af65
 800af4c:	0800af7d 	.word	0x0800af7d
 800af50:	0800afbd 	.word	0x0800afbd
 800af54:	0800b193 	.word	0x0800b193
 800af58:	0800b193 	.word	0x0800b193
 800af5c:	0800b133 	.word	0x0800b133
 800af60:	0800b15f 	.word	0x0800b15f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	7c12      	ldrb	r2, [r2, #16]
 800af70:	f107 0108 	add.w	r1, r7, #8
 800af74:	4610      	mov	r0, r2
 800af76:	4798      	blx	r3
 800af78:	60f8      	str	r0, [r7, #12]
      break;
 800af7a:	e112      	b.n	800b1a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	7c1b      	ldrb	r3, [r3, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10d      	bne.n	800afa0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8c:	f107 0208 	add.w	r2, r7, #8
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	3301      	adds	r3, #1
 800af9a:	2202      	movs	r2, #2
 800af9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af9e:	e100      	b.n	800b1a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa8:	f107 0208 	add.w	r2, r7, #8
 800afac:	4610      	mov	r0, r2
 800afae:	4798      	blx	r3
 800afb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3301      	adds	r3, #1
 800afb6:	2202      	movs	r2, #2
 800afb8:	701a      	strb	r2, [r3, #0]
      break;
 800afba:	e0f2      	b.n	800b1a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	885b      	ldrh	r3, [r3, #2]
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b05      	cmp	r3, #5
 800afc4:	f200 80ac 	bhi.w	800b120 <USBD_GetDescriptor+0x204>
 800afc8:	a201      	add	r2, pc, #4	; (adr r2, 800afd0 <USBD_GetDescriptor+0xb4>)
 800afca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afce:	bf00      	nop
 800afd0:	0800afe9 	.word	0x0800afe9
 800afd4:	0800b01d 	.word	0x0800b01d
 800afd8:	0800b051 	.word	0x0800b051
 800afdc:	0800b085 	.word	0x0800b085
 800afe0:	0800b0b9 	.word	0x0800b0b9
 800afe4:	0800b0ed 	.word	0x0800b0ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00b      	beq.n	800b00c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	7c12      	ldrb	r2, [r2, #16]
 800b000:	f107 0108 	add.w	r1, r7, #8
 800b004:	4610      	mov	r0, r2
 800b006:	4798      	blx	r3
 800b008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b00a:	e091      	b.n	800b130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fa97 	bl	800b542 <USBD_CtlError>
            err++;
 800b014:	7afb      	ldrb	r3, [r7, #11]
 800b016:	3301      	adds	r3, #1
 800b018:	72fb      	strb	r3, [r7, #11]
          break;
 800b01a:	e089      	b.n	800b130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00b      	beq.n	800b040 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	7c12      	ldrb	r2, [r2, #16]
 800b034:	f107 0108 	add.w	r1, r7, #8
 800b038:	4610      	mov	r0, r2
 800b03a:	4798      	blx	r3
 800b03c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b03e:	e077      	b.n	800b130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fa7d 	bl	800b542 <USBD_CtlError>
            err++;
 800b048:	7afb      	ldrb	r3, [r7, #11]
 800b04a:	3301      	adds	r3, #1
 800b04c:	72fb      	strb	r3, [r7, #11]
          break;
 800b04e:	e06f      	b.n	800b130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00b      	beq.n	800b074 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	7c12      	ldrb	r2, [r2, #16]
 800b068:	f107 0108 	add.w	r1, r7, #8
 800b06c:	4610      	mov	r0, r2
 800b06e:	4798      	blx	r3
 800b070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b072:	e05d      	b.n	800b130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b074:	6839      	ldr	r1, [r7, #0]
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fa63 	bl	800b542 <USBD_CtlError>
            err++;
 800b07c:	7afb      	ldrb	r3, [r7, #11]
 800b07e:	3301      	adds	r3, #1
 800b080:	72fb      	strb	r3, [r7, #11]
          break;
 800b082:	e055      	b.n	800b130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00b      	beq.n	800b0a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	7c12      	ldrb	r2, [r2, #16]
 800b09c:	f107 0108 	add.w	r1, r7, #8
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	4798      	blx	r3
 800b0a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0a6:	e043      	b.n	800b130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fa49 	bl	800b542 <USBD_CtlError>
            err++;
 800b0b0:	7afb      	ldrb	r3, [r7, #11]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b0b6:	e03b      	b.n	800b130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00b      	beq.n	800b0dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	7c12      	ldrb	r2, [r2, #16]
 800b0d0:	f107 0108 	add.w	r1, r7, #8
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	4798      	blx	r3
 800b0d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0da:	e029      	b.n	800b130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 fa2f 	bl	800b542 <USBD_CtlError>
            err++;
 800b0e4:	7afb      	ldrb	r3, [r7, #11]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0ea:	e021      	b.n	800b130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00b      	beq.n	800b110 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	7c12      	ldrb	r2, [r2, #16]
 800b104:	f107 0108 	add.w	r1, r7, #8
 800b108:	4610      	mov	r0, r2
 800b10a:	4798      	blx	r3
 800b10c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b10e:	e00f      	b.n	800b130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fa15 	bl	800b542 <USBD_CtlError>
            err++;
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	3301      	adds	r3, #1
 800b11c:	72fb      	strb	r3, [r7, #11]
          break;
 800b11e:	e007      	b.n	800b130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fa0d 	bl	800b542 <USBD_CtlError>
          err++;
 800b128:	7afb      	ldrb	r3, [r7, #11]
 800b12a:	3301      	adds	r3, #1
 800b12c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b12e:	e038      	b.n	800b1a2 <USBD_GetDescriptor+0x286>
 800b130:	e037      	b.n	800b1a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	7c1b      	ldrb	r3, [r3, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d109      	bne.n	800b14e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b142:	f107 0208 	add.w	r2, r7, #8
 800b146:	4610      	mov	r0, r2
 800b148:	4798      	blx	r3
 800b14a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b14c:	e029      	b.n	800b1a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f9f6 	bl	800b542 <USBD_CtlError>
        err++;
 800b156:	7afb      	ldrb	r3, [r7, #11]
 800b158:	3301      	adds	r3, #1
 800b15a:	72fb      	strb	r3, [r7, #11]
      break;
 800b15c:	e021      	b.n	800b1a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	7c1b      	ldrb	r3, [r3, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10d      	bne.n	800b182 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16e:	f107 0208 	add.w	r2, r7, #8
 800b172:	4610      	mov	r0, r2
 800b174:	4798      	blx	r3
 800b176:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3301      	adds	r3, #1
 800b17c:	2207      	movs	r2, #7
 800b17e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b180:	e00f      	b.n	800b1a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f9dc 	bl	800b542 <USBD_CtlError>
        err++;
 800b18a:	7afb      	ldrb	r3, [r7, #11]
 800b18c:	3301      	adds	r3, #1
 800b18e:	72fb      	strb	r3, [r7, #11]
      break;
 800b190:	e007      	b.n	800b1a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f9d4 	bl	800b542 <USBD_CtlError>
      err++;
 800b19a:	7afb      	ldrb	r3, [r7, #11]
 800b19c:	3301      	adds	r3, #1
 800b19e:	72fb      	strb	r3, [r7, #11]
      break;
 800b1a0:	bf00      	nop
  }

  if (err != 0U)
 800b1a2:	7afb      	ldrb	r3, [r7, #11]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d11c      	bne.n	800b1e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b1a8:	893b      	ldrh	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d011      	beq.n	800b1d2 <USBD_GetDescriptor+0x2b6>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	88db      	ldrh	r3, [r3, #6]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00d      	beq.n	800b1d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	88da      	ldrh	r2, [r3, #6]
 800b1ba:	893b      	ldrh	r3, [r7, #8]
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	bf28      	it	cs
 800b1c0:	4613      	movcs	r3, r2
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b1c6:	893b      	ldrh	r3, [r7, #8]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	68f9      	ldr	r1, [r7, #12]
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fa22 	bl	800b616 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	88db      	ldrh	r3, [r3, #6]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d104      	bne.n	800b1e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fa79 	bl	800b6d2 <USBD_CtlSendStatus>
 800b1e0:	e000      	b.n	800b1e4 <USBD_GetDescriptor+0x2c8>
    return;
 800b1e2:	bf00      	nop
    }
  }
}
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop

0800b1ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	889b      	ldrh	r3, [r3, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d130      	bne.n	800b260 <USBD_SetAddress+0x74>
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	88db      	ldrh	r3, [r3, #6]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d12c      	bne.n	800b260 <USBD_SetAddress+0x74>
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	885b      	ldrh	r3, [r3, #2]
 800b20a:	2b7f      	cmp	r3, #127	; 0x7f
 800b20c:	d828      	bhi.n	800b260 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	885b      	ldrh	r3, [r3, #2]
 800b212:	b2db      	uxtb	r3, r3
 800b214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b218:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b220:	2b03      	cmp	r3, #3
 800b222:	d104      	bne.n	800b22e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f98b 	bl	800b542 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22c:	e01d      	b.n	800b26a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	7bfa      	ldrb	r2, [r7, #15]
 800b232:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b236:	7bfb      	ldrb	r3, [r7, #15]
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fe4e 	bl	800bedc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fa46 	bl	800b6d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d004      	beq.n	800b256 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2202      	movs	r2, #2
 800b250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b254:	e009      	b.n	800b26a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b25e:	e004      	b.n	800b26a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f96d 	bl	800b542 <USBD_CtlError>
  }
}
 800b268:	bf00      	nop
 800b26a:	bf00      	nop
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	885b      	ldrh	r3, [r3, #2]
 800b282:	b2da      	uxtb	r2, r3
 800b284:	4b41      	ldr	r3, [pc, #260]	; (800b38c <USBD_SetConfig+0x118>)
 800b286:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b288:	4b40      	ldr	r3, [pc, #256]	; (800b38c <USBD_SetConfig+0x118>)
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d904      	bls.n	800b29a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f955 	bl	800b542 <USBD_CtlError>
 800b298:	e075      	b.n	800b386 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d002      	beq.n	800b2aa <USBD_SetConfig+0x36>
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	d023      	beq.n	800b2f0 <USBD_SetConfig+0x7c>
 800b2a8:	e062      	b.n	800b370 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b2aa:	4b38      	ldr	r3, [pc, #224]	; (800b38c <USBD_SetConfig+0x118>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01a      	beq.n	800b2e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b2b2:	4b36      	ldr	r3, [pc, #216]	; (800b38c <USBD_SetConfig+0x118>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2203      	movs	r2, #3
 800b2c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b2c4:	4b31      	ldr	r3, [pc, #196]	; (800b38c <USBD_SetConfig+0x118>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7ff f9e7 	bl	800a69e <USBD_SetClassConfig>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d104      	bne.n	800b2e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f932 	bl	800b542 <USBD_CtlError>
            return;
 800b2de:	e052      	b.n	800b386 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f9f6 	bl	800b6d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b2e6:	e04e      	b.n	800b386 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f9f2 	bl	800b6d2 <USBD_CtlSendStatus>
        break;
 800b2ee:	e04a      	b.n	800b386 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b2f0:	4b26      	ldr	r3, [pc, #152]	; (800b38c <USBD_SetConfig+0x118>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d112      	bne.n	800b31e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b300:	4b22      	ldr	r3, [pc, #136]	; (800b38c <USBD_SetConfig+0x118>)
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	461a      	mov	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b30a:	4b20      	ldr	r3, [pc, #128]	; (800b38c <USBD_SetConfig+0x118>)
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7ff f9e3 	bl	800a6dc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f9db 	bl	800b6d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b31c:	e033      	b.n	800b386 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b31e:	4b1b      	ldr	r3, [pc, #108]	; (800b38c <USBD_SetConfig+0x118>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d01d      	beq.n	800b368 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	b2db      	uxtb	r3, r3
 800b332:	4619      	mov	r1, r3
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7ff f9d1 	bl	800a6dc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b33a:	4b14      	ldr	r3, [pc, #80]	; (800b38c <USBD_SetConfig+0x118>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	461a      	mov	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b344:	4b11      	ldr	r3, [pc, #68]	; (800b38c <USBD_SetConfig+0x118>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	4619      	mov	r1, r3
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7ff f9a7 	bl	800a69e <USBD_SetClassConfig>
 800b350:	4603      	mov	r3, r0
 800b352:	2b02      	cmp	r3, #2
 800b354:	d104      	bne.n	800b360 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f8f2 	bl	800b542 <USBD_CtlError>
            return;
 800b35e:	e012      	b.n	800b386 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f9b6 	bl	800b6d2 <USBD_CtlSendStatus>
        break;
 800b366:	e00e      	b.n	800b386 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f9b2 	bl	800b6d2 <USBD_CtlSendStatus>
        break;
 800b36e:	e00a      	b.n	800b386 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f8e5 	bl	800b542 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b378:	4b04      	ldr	r3, [pc, #16]	; (800b38c <USBD_SetConfig+0x118>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7ff f9ac 	bl	800a6dc <USBD_ClrClassConfig>
        break;
 800b384:	bf00      	nop
    }
  }
}
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	200004c8 	.word	0x200004c8

0800b390 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	88db      	ldrh	r3, [r3, #6]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d004      	beq.n	800b3ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 f8cc 	bl	800b542 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b3aa:	e022      	b.n	800b3f2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	dc02      	bgt.n	800b3bc <USBD_GetConfig+0x2c>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	dc03      	bgt.n	800b3c2 <USBD_GetConfig+0x32>
 800b3ba:	e015      	b.n	800b3e8 <USBD_GetConfig+0x58>
 800b3bc:	2b03      	cmp	r3, #3
 800b3be:	d00b      	beq.n	800b3d8 <USBD_GetConfig+0x48>
 800b3c0:	e012      	b.n	800b3e8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f920 	bl	800b616 <USBD_CtlSendData>
        break;
 800b3d6:	e00c      	b.n	800b3f2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	2201      	movs	r2, #1
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f918 	bl	800b616 <USBD_CtlSendData>
        break;
 800b3e6:	e004      	b.n	800b3f2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f8a9 	bl	800b542 <USBD_CtlError>
        break;
 800b3f0:	bf00      	nop
}
 800b3f2:	bf00      	nop
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b40a:	3b01      	subs	r3, #1
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d81e      	bhi.n	800b44e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	88db      	ldrh	r3, [r3, #6]
 800b414:	2b02      	cmp	r3, #2
 800b416:	d004      	beq.n	800b422 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f891 	bl	800b542 <USBD_CtlError>
        break;
 800b420:	e01a      	b.n	800b458 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2201      	movs	r2, #1
 800b426:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d005      	beq.n	800b43e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	f043 0202 	orr.w	r2, r3, #2
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	330c      	adds	r3, #12
 800b442:	2202      	movs	r2, #2
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f8e5 	bl	800b616 <USBD_CtlSendData>
      break;
 800b44c:	e004      	b.n	800b458 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f876 	bl	800b542 <USBD_CtlError>
      break;
 800b456:	bf00      	nop
  }
}
 800b458:	bf00      	nop
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	885b      	ldrh	r3, [r3, #2]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d106      	bne.n	800b480 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f929 	bl	800b6d2 <USBD_CtlSendStatus>
  }
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b498:	3b01      	subs	r3, #1
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d80b      	bhi.n	800b4b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	885b      	ldrh	r3, [r3, #2]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d10c      	bne.n	800b4c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f90f 	bl	800b6d2 <USBD_CtlSendStatus>
      }
      break;
 800b4b4:	e004      	b.n	800b4c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f842 	bl	800b542 <USBD_CtlError>
      break;
 800b4be:	e000      	b.n	800b4c2 <USBD_ClrFeature+0x3a>
      break;
 800b4c0:	bf00      	nop
  }
}
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b083      	sub	sp, #12
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	781a      	ldrb	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	785a      	ldrb	r2, [r3, #1]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	3302      	adds	r3, #2
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	3303      	adds	r3, #3
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	021b      	lsls	r3, r3, #8
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	4413      	add	r3, r2
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	3304      	adds	r3, #4
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	b29a      	uxth	r2, r3
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	3305      	adds	r3, #5
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	b29b      	uxth	r3, r3
 800b510:	021b      	lsls	r3, r3, #8
 800b512:	b29b      	uxth	r3, r3
 800b514:	4413      	add	r3, r2
 800b516:	b29a      	uxth	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	3306      	adds	r3, #6
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	b29a      	uxth	r2, r3
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	3307      	adds	r3, #7
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	021b      	lsls	r3, r3, #8
 800b52e:	b29b      	uxth	r3, r3
 800b530:	4413      	add	r3, r2
 800b532:	b29a      	uxth	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	80da      	strh	r2, [r3, #6]

}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr

0800b542 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b54c:	2180      	movs	r1, #128	; 0x80
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 fc5a 	bl	800be08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b554:	2100      	movs	r1, #0
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 fc56 	bl	800be08 <USBD_LL_StallEP>
}
 800b55c:	bf00      	nop
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d032      	beq.n	800b5e0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f000 f834 	bl	800b5e8 <USBD_GetLen>
 800b580:	4603      	mov	r3, r0
 800b582:	3301      	adds	r3, #1
 800b584:	b29b      	uxth	r3, r3
 800b586:	005b      	lsls	r3, r3, #1
 800b588:	b29a      	uxth	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	1c5a      	adds	r2, r3, #1
 800b592:	75fa      	strb	r2, [r7, #23]
 800b594:	461a      	mov	r2, r3
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	4413      	add	r3, r2
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	7812      	ldrb	r2, [r2, #0]
 800b59e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
 800b5a2:	1c5a      	adds	r2, r3, #1
 800b5a4:	75fa      	strb	r2, [r7, #23]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b5b0:	e012      	b.n	800b5d8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	60fa      	str	r2, [r7, #12]
 800b5b8:	7dfa      	ldrb	r2, [r7, #23]
 800b5ba:	1c51      	adds	r1, r2, #1
 800b5bc:	75f9      	strb	r1, [r7, #23]
 800b5be:	4611      	mov	r1, r2
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	440a      	add	r2, r1
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	75fa      	strb	r2, [r7, #23]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1e8      	bne.n	800b5b2 <USBD_GetString+0x4e>
    }
  }
}
 800b5e0:	bf00      	nop
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b5f4:	e005      	b.n	800b602 <USBD_GetLen+0x1a>
  {
    len++;
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3301      	adds	r3, #1
 800b600:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1f5      	bne.n	800b5f6 <USBD_GetLen+0xe>
  }

  return len;
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	bc80      	pop	{r7}
 800b614:	4770      	bx	lr

0800b616 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	4613      	mov	r3, r2
 800b622:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2202      	movs	r2, #2
 800b628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b62c:	88fa      	ldrh	r2, [r7, #6]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b632:	88fa      	ldrh	r2, [r7, #6]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b638:	88fb      	ldrh	r3, [r7, #6]
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	2100      	movs	r1, #0
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f000 fc6b 	bl	800bf1a <USBD_LL_Transmit>

  return USBD_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b084      	sub	sp, #16
 800b652:	af00      	add	r7, sp, #0
 800b654:	60f8      	str	r0, [r7, #12]
 800b656:	60b9      	str	r1, [r7, #8]
 800b658:	4613      	mov	r3, r2
 800b65a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b65c:	88fb      	ldrh	r3, [r7, #6]
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	2100      	movs	r1, #0
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f000 fc59 	bl	800bf1a <USBD_LL_Transmit>

  return USBD_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	60f8      	str	r0, [r7, #12]
 800b67a:	60b9      	str	r1, [r7, #8]
 800b67c:	4613      	mov	r3, r2
 800b67e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2203      	movs	r2, #3
 800b684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b688:	88fa      	ldrh	r2, [r7, #6]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b690:	88fa      	ldrh	r2, [r7, #6]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b698:	88fb      	ldrh	r3, [r7, #6]
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	2100      	movs	r1, #0
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f000 fc5e 	bl	800bf60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6bc:	88fb      	ldrh	r3, [r7, #6]
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f000 fc4c 	bl	800bf60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b082      	sub	sp, #8
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2204      	movs	r2, #4
 800b6de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fc16 	bl	800bf1a <USBD_LL_Transmit>

  return USBD_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2205      	movs	r2, #5
 800b704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b708:	2300      	movs	r3, #0
 800b70a:	2200      	movs	r2, #0
 800b70c:	2100      	movs	r1, #0
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fc26 	bl	800bf60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
	...

0800b720 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b724:	2200      	movs	r2, #0
 800b726:	4912      	ldr	r1, [pc, #72]	; (800b770 <MX_USB_DEVICE_Init+0x50>)
 800b728:	4812      	ldr	r0, [pc, #72]	; (800b774 <MX_USB_DEVICE_Init+0x54>)
 800b72a:	f7fe ff5e 	bl	800a5ea <USBD_Init>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b734:	f7f7 f89a 	bl	800286c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b738:	490f      	ldr	r1, [pc, #60]	; (800b778 <MX_USB_DEVICE_Init+0x58>)
 800b73a:	480e      	ldr	r0, [pc, #56]	; (800b774 <MX_USB_DEVICE_Init+0x54>)
 800b73c:	f7fe ff80 	bl	800a640 <USBD_RegisterClass>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b746:	f7f7 f891 	bl	800286c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b74a:	490c      	ldr	r1, [pc, #48]	; (800b77c <MX_USB_DEVICE_Init+0x5c>)
 800b74c:	4809      	ldr	r0, [pc, #36]	; (800b774 <MX_USB_DEVICE_Init+0x54>)
 800b74e:	f7fe feb1 	bl	800a4b4 <USBD_CDC_RegisterInterface>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d001      	beq.n	800b75c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b758:	f7f7 f888 	bl	800286c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b75c:	4805      	ldr	r0, [pc, #20]	; (800b774 <MX_USB_DEVICE_Init+0x54>)
 800b75e:	f7fe ff88 	bl	800a672 <USBD_Start>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b768:	f7f7 f880 	bl	800286c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b76c:	bf00      	nop
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20000154 	.word	0x20000154
 800b774:	200004cc 	.word	0x200004cc
 800b778:	20000040 	.word	0x20000040
 800b77c:	20000144 	.word	0x20000144

0800b780 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b784:	2200      	movs	r2, #0
 800b786:	4905      	ldr	r1, [pc, #20]	; (800b79c <CDC_Init_FS+0x1c>)
 800b788:	4805      	ldr	r0, [pc, #20]	; (800b7a0 <CDC_Init_FS+0x20>)
 800b78a:	f7fe fea9 	bl	800a4e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b78e:	4905      	ldr	r1, [pc, #20]	; (800b7a4 <CDC_Init_FS+0x24>)
 800b790:	4803      	ldr	r0, [pc, #12]	; (800b7a0 <CDC_Init_FS+0x20>)
 800b792:	f7fe febe 	bl	800a512 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b796:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b798:	4618      	mov	r0, r3
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	20000b78 	.word	0x20000b78
 800b7a0:	200004cc 	.word	0x200004cc
 800b7a4:	20000790 	.word	0x20000790

0800b7a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b7ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bc80      	pop	{r7}
 800b7b4:	4770      	bx	lr
	...

0800b7b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	6039      	str	r1, [r7, #0]
 800b7c2:	71fb      	strb	r3, [r7, #7]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	2b23      	cmp	r3, #35	; 0x23
 800b7cc:	d84a      	bhi.n	800b864 <CDC_Control_FS+0xac>
 800b7ce:	a201      	add	r2, pc, #4	; (adr r2, 800b7d4 <CDC_Control_FS+0x1c>)
 800b7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d4:	0800b865 	.word	0x0800b865
 800b7d8:	0800b865 	.word	0x0800b865
 800b7dc:	0800b865 	.word	0x0800b865
 800b7e0:	0800b865 	.word	0x0800b865
 800b7e4:	0800b865 	.word	0x0800b865
 800b7e8:	0800b865 	.word	0x0800b865
 800b7ec:	0800b865 	.word	0x0800b865
 800b7f0:	0800b865 	.word	0x0800b865
 800b7f4:	0800b865 	.word	0x0800b865
 800b7f8:	0800b865 	.word	0x0800b865
 800b7fc:	0800b865 	.word	0x0800b865
 800b800:	0800b865 	.word	0x0800b865
 800b804:	0800b865 	.word	0x0800b865
 800b808:	0800b865 	.word	0x0800b865
 800b80c:	0800b865 	.word	0x0800b865
 800b810:	0800b865 	.word	0x0800b865
 800b814:	0800b865 	.word	0x0800b865
 800b818:	0800b865 	.word	0x0800b865
 800b81c:	0800b865 	.word	0x0800b865
 800b820:	0800b865 	.word	0x0800b865
 800b824:	0800b865 	.word	0x0800b865
 800b828:	0800b865 	.word	0x0800b865
 800b82c:	0800b865 	.word	0x0800b865
 800b830:	0800b865 	.word	0x0800b865
 800b834:	0800b865 	.word	0x0800b865
 800b838:	0800b865 	.word	0x0800b865
 800b83c:	0800b865 	.word	0x0800b865
 800b840:	0800b865 	.word	0x0800b865
 800b844:	0800b865 	.word	0x0800b865
 800b848:	0800b865 	.word	0x0800b865
 800b84c:	0800b865 	.word	0x0800b865
 800b850:	0800b865 	.word	0x0800b865
 800b854:	0800b865 	.word	0x0800b865
 800b858:	0800b865 	.word	0x0800b865
 800b85c:	0800b865 	.word	0x0800b865
 800b860:	0800b865 	.word	0x0800b865
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b864:	bf00      	nop
  }

  return (USBD_OK);
 800b866:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b868:	4618      	mov	r0, r3
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bc80      	pop	{r7}
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop

0800b874 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	4808      	ldr	r0, [pc, #32]	; (800b8a4 <CDC_Receive_FS+0x30>)
 800b882:	f7fe fe46 	bl	800a512 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b886:	4807      	ldr	r0, [pc, #28]	; (800b8a4 <CDC_Receive_FS+0x30>)
 800b888:	f7fe fe85 	bl	800a596 <USBD_CDC_ReceivePacket>
USB_Packet_Received(&Buf[0], Len[0]);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4619      	mov	r1, r3
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7f6 faf8 	bl	8001e88 <USB_Packet_Received>
  return (USBD_OK);
 800b898:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	200004cc 	.word	0x200004cc

0800b8a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b8b8:	4b0d      	ldr	r3, [pc, #52]	; (800b8f0 <CDC_Transmit_FS+0x48>)
 800b8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e00b      	b.n	800b8e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b8ce:	887b      	ldrh	r3, [r7, #2]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	6879      	ldr	r1, [r7, #4]
 800b8d4:	4806      	ldr	r0, [pc, #24]	; (800b8f0 <CDC_Transmit_FS+0x48>)
 800b8d6:	f7fe fe03 	bl	800a4e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b8da:	4805      	ldr	r0, [pc, #20]	; (800b8f0 <CDC_Transmit_FS+0x48>)
 800b8dc:	f7fe fe2c 	bl	800a538 <USBD_CDC_TransmitPacket>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	200004cc 	.word	0x200004cc

0800b8f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	6039      	str	r1, [r7, #0]
 800b8fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	2212      	movs	r2, #18
 800b904:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b906:	4b03      	ldr	r3, [pc, #12]	; (800b914 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bc80      	pop	{r7}
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	20000170 	.word	0x20000170

0800b918 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	6039      	str	r1, [r7, #0]
 800b922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2204      	movs	r2, #4
 800b928:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b92a:	4b03      	ldr	r3, [pc, #12]	; (800b938 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	bc80      	pop	{r7}
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	20000184 	.word	0x20000184

0800b93c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	4603      	mov	r3, r0
 800b944:	6039      	str	r1, [r7, #0]
 800b946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b948:	79fb      	ldrb	r3, [r7, #7]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d105      	bne.n	800b95a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	4907      	ldr	r1, [pc, #28]	; (800b970 <USBD_FS_ProductStrDescriptor+0x34>)
 800b952:	4808      	ldr	r0, [pc, #32]	; (800b974 <USBD_FS_ProductStrDescriptor+0x38>)
 800b954:	f7ff fe06 	bl	800b564 <USBD_GetString>
 800b958:	e004      	b.n	800b964 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	4904      	ldr	r1, [pc, #16]	; (800b970 <USBD_FS_ProductStrDescriptor+0x34>)
 800b95e:	4805      	ldr	r0, [pc, #20]	; (800b974 <USBD_FS_ProductStrDescriptor+0x38>)
 800b960:	f7ff fe00 	bl	800b564 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b964:	4b02      	ldr	r3, [pc, #8]	; (800b970 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b966:	4618      	mov	r0, r3
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20000f60 	.word	0x20000f60
 800b974:	0800c110 	.word	0x0800c110

0800b978 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	4603      	mov	r3, r0
 800b980:	6039      	str	r1, [r7, #0]
 800b982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	4904      	ldr	r1, [pc, #16]	; (800b998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b988:	4804      	ldr	r0, [pc, #16]	; (800b99c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b98a:	f7ff fdeb 	bl	800b564 <USBD_GetString>
  return USBD_StrDesc;
 800b98e:	4b02      	ldr	r3, [pc, #8]	; (800b998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20000f60 	.word	0x20000f60
 800b99c:	0800c124 	.word	0x0800c124

0800b9a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	6039      	str	r1, [r7, #0]
 800b9aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	221a      	movs	r2, #26
 800b9b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b9b2:	f000 f843 	bl	800ba3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b9b6:	4b02      	ldr	r3, [pc, #8]	; (800b9c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	20000188 	.word	0x20000188

0800b9c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	6039      	str	r1, [r7, #0]
 800b9ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9d0:	79fb      	ldrb	r3, [r7, #7]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d105      	bne.n	800b9e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	4907      	ldr	r1, [pc, #28]	; (800b9f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9da:	4808      	ldr	r0, [pc, #32]	; (800b9fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9dc:	f7ff fdc2 	bl	800b564 <USBD_GetString>
 800b9e0:	e004      	b.n	800b9ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9e2:	683a      	ldr	r2, [r7, #0]
 800b9e4:	4904      	ldr	r1, [pc, #16]	; (800b9f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9e6:	4805      	ldr	r0, [pc, #20]	; (800b9fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9e8:	f7ff fdbc 	bl	800b564 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9ec:	4b02      	ldr	r3, [pc, #8]	; (800b9f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20000f60 	.word	0x20000f60
 800b9fc:	0800c138 	.word	0x0800c138

0800ba00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	4603      	mov	r3, r0
 800ba08:	6039      	str	r1, [r7, #0]
 800ba0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba0c:	79fb      	ldrb	r3, [r7, #7]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d105      	bne.n	800ba1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	4907      	ldr	r1, [pc, #28]	; (800ba34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba16:	4808      	ldr	r0, [pc, #32]	; (800ba38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba18:	f7ff fda4 	bl	800b564 <USBD_GetString>
 800ba1c:	e004      	b.n	800ba28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	4904      	ldr	r1, [pc, #16]	; (800ba34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba22:	4805      	ldr	r0, [pc, #20]	; (800ba38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba24:	f7ff fd9e 	bl	800b564 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba28:	4b02      	ldr	r3, [pc, #8]	; (800ba34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	20000f60 	.word	0x20000f60
 800ba38:	0800c144 	.word	0x0800c144

0800ba3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba42:	4b0f      	ldr	r3, [pc, #60]	; (800ba80 <Get_SerialNum+0x44>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba48:	4b0e      	ldr	r3, [pc, #56]	; (800ba84 <Get_SerialNum+0x48>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	; (800ba88 <Get_SerialNum+0x4c>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4413      	add	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d009      	beq.n	800ba76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba62:	2208      	movs	r2, #8
 800ba64:	4909      	ldr	r1, [pc, #36]	; (800ba8c <Get_SerialNum+0x50>)
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f000 f814 	bl	800ba94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba6c:	2204      	movs	r2, #4
 800ba6e:	4908      	ldr	r1, [pc, #32]	; (800ba90 <Get_SerialNum+0x54>)
 800ba70:	68b8      	ldr	r0, [r7, #8]
 800ba72:	f000 f80f 	bl	800ba94 <IntToUnicode>
  }
}
 800ba76:	bf00      	nop
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	1ffff7e8 	.word	0x1ffff7e8
 800ba84:	1ffff7ec 	.word	0x1ffff7ec
 800ba88:	1ffff7f0 	.word	0x1ffff7f0
 800ba8c:	2000018a 	.word	0x2000018a
 800ba90:	2000019a 	.word	0x2000019a

0800ba94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800baa6:	2300      	movs	r3, #0
 800baa8:	75fb      	strb	r3, [r7, #23]
 800baaa:	e027      	b.n	800bafc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	0f1b      	lsrs	r3, r3, #28
 800bab0:	2b09      	cmp	r3, #9
 800bab2:	d80b      	bhi.n	800bacc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	0f1b      	lsrs	r3, r3, #28
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	005b      	lsls	r3, r3, #1
 800babe:	4619      	mov	r1, r3
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	440b      	add	r3, r1
 800bac4:	3230      	adds	r2, #48	; 0x30
 800bac6:	b2d2      	uxtb	r2, r2
 800bac8:	701a      	strb	r2, [r3, #0]
 800baca:	e00a      	b.n	800bae2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	0f1b      	lsrs	r3, r3, #28
 800bad0:	b2da      	uxtb	r2, r3
 800bad2:	7dfb      	ldrb	r3, [r7, #23]
 800bad4:	005b      	lsls	r3, r3, #1
 800bad6:	4619      	mov	r1, r3
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	440b      	add	r3, r1
 800badc:	3237      	adds	r2, #55	; 0x37
 800bade:	b2d2      	uxtb	r2, r2
 800bae0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	011b      	lsls	r3, r3, #4
 800bae6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bae8:	7dfb      	ldrb	r3, [r7, #23]
 800baea:	005b      	lsls	r3, r3, #1
 800baec:	3301      	adds	r3, #1
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	4413      	add	r3, r2
 800baf2:	2200      	movs	r2, #0
 800baf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	3301      	adds	r3, #1
 800bafa:	75fb      	strb	r3, [r7, #23]
 800bafc:	7dfa      	ldrb	r2, [r7, #23]
 800bafe:	79fb      	ldrb	r3, [r7, #7]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d3d3      	bcc.n	800baac <IntToUnicode+0x18>
  }
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bc80      	pop	{r7}
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a0d      	ldr	r2, [pc, #52]	; (800bb54 <HAL_PCD_MspInit+0x44>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d113      	bne.n	800bb4a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bb22:	4b0d      	ldr	r3, [pc, #52]	; (800bb58 <HAL_PCD_MspInit+0x48>)
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	4a0c      	ldr	r2, [pc, #48]	; (800bb58 <HAL_PCD_MspInit+0x48>)
 800bb28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb2c:	61d3      	str	r3, [r2, #28]
 800bb2e:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <HAL_PCD_MspInit+0x48>)
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb36:	60fb      	str	r3, [r7, #12]
 800bb38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 1);
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	2014      	movs	r0, #20
 800bb40:	f7f7 fe4b 	bl	80037da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bb44:	2014      	movs	r0, #20
 800bb46:	f7f7 fe64 	bl	8003812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bb4a:	bf00      	nop
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	40005c00 	.word	0x40005c00
 800bb58:	40021000 	.word	0x40021000

0800bb5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bb70:	4619      	mov	r1, r3
 800bb72:	4610      	mov	r0, r2
 800bb74:	f7fe fdc5 	bl	800a702 <USBD_LL_SetupStage>
}
 800bb78:	bf00      	nop
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb92:	78fa      	ldrb	r2, [r7, #3]
 800bb94:	6879      	ldr	r1, [r7, #4]
 800bb96:	4613      	mov	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4413      	add	r3, r2
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	440b      	add	r3, r1
 800bba0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	78fb      	ldrb	r3, [r7, #3]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	f7fe fdf7 	bl	800a79c <USBD_LL_DataOutStage>
}
 800bbae:	bf00      	nop
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b082      	sub	sp, #8
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bbc8:	78fa      	ldrb	r2, [r7, #3]
 800bbca:	6879      	ldr	r1, [r7, #4]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	440b      	add	r3, r1
 800bbd6:	333c      	adds	r3, #60	; 0x3c
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	78fb      	ldrb	r3, [r7, #3]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	f7fe fe4e 	bl	800a87e <USBD_LL_DataInStage>
}
 800bbe2:	bf00      	nop
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b082      	sub	sp, #8
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fe ff5e 	bl	800aaba <USBD_LL_SOF>
}
 800bbfe:	bf00      	nop
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d001      	beq.n	800bc1e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bc1a:	f7f6 fe27 	bl	800286c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc24:	7bfa      	ldrb	r2, [r7, #15]
 800bc26:	4611      	mov	r1, r2
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fe ff0e 	bl	800aa4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe fec7 	bl	800a9c8 <USBD_LL_Reset>
}
 800bc3a:	bf00      	nop
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
	...

0800bc44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe ff08 	bl	800aa68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d005      	beq.n	800bc6c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc60:	4b04      	ldr	r3, [pc, #16]	; (800bc74 <HAL_PCD_SuspendCallback+0x30>)
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	4a03      	ldr	r2, [pc, #12]	; (800bc74 <HAL_PCD_SuspendCallback+0x30>)
 800bc66:	f043 0306 	orr.w	r3, r3, #6
 800bc6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc6c:	bf00      	nop
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	e000ed00 	.word	0xe000ed00

0800bc78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fe ff02 	bl	800aa90 <USBD_LL_Resume>
}
 800bc8c:	bf00      	nop
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bc9c:	4a28      	ldr	r2, [pc, #160]	; (800bd40 <USBD_LL_Init+0xac>)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4a26      	ldr	r2, [pc, #152]	; (800bd40 <USBD_LL_Init+0xac>)
 800bca8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bcac:	4b24      	ldr	r3, [pc, #144]	; (800bd40 <USBD_LL_Init+0xac>)
 800bcae:	4a25      	ldr	r2, [pc, #148]	; (800bd44 <USBD_LL_Init+0xb0>)
 800bcb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bcb2:	4b23      	ldr	r3, [pc, #140]	; (800bd40 <USBD_LL_Init+0xac>)
 800bcb4:	2208      	movs	r2, #8
 800bcb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bcb8:	4b21      	ldr	r3, [pc, #132]	; (800bd40 <USBD_LL_Init+0xac>)
 800bcba:	2202      	movs	r2, #2
 800bcbc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bcbe:	4b20      	ldr	r3, [pc, #128]	; (800bd40 <USBD_LL_Init+0xac>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bcc4:	4b1e      	ldr	r3, [pc, #120]	; (800bd40 <USBD_LL_Init+0xac>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bcca:	4b1d      	ldr	r3, [pc, #116]	; (800bd40 <USBD_LL_Init+0xac>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bcd0:	481b      	ldr	r0, [pc, #108]	; (800bd40 <USBD_LL_Init+0xac>)
 800bcd2:	f7f8 f9d3 	bl	800407c <HAL_PCD_Init>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bcdc:	f7f6 fdc6 	bl	800286c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bce6:	2318      	movs	r3, #24
 800bce8:	2200      	movs	r2, #0
 800bcea:	2100      	movs	r1, #0
 800bcec:	f7f9 fe47 	bl	800597e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcf6:	2358      	movs	r3, #88	; 0x58
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	2180      	movs	r1, #128	; 0x80
 800bcfc:	f7f9 fe3f 	bl	800597e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd06:	23c0      	movs	r3, #192	; 0xc0
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2181      	movs	r1, #129	; 0x81
 800bd0c:	f7f9 fe37 	bl	800597e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd16:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	f7f9 fe2e 	bl	800597e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2182      	movs	r1, #130	; 0x82
 800bd30:	f7f9 fe25 	bl	800597e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20001160 	.word	0x20001160
 800bd44:	40005c00 	.word	0x40005c00

0800bd48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7f8 fa97 	bl	8004292 <HAL_PCD_Start>
 800bd64:	4603      	mov	r3, r0
 800bd66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 f94e 	bl	800c00c <USBD_Get_USB_Status>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b084      	sub	sp, #16
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	4608      	mov	r0, r1
 800bd88:	4611      	mov	r1, r2
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	70fb      	strb	r3, [r7, #3]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70bb      	strb	r3, [r7, #2]
 800bd94:	4613      	mov	r3, r2
 800bd96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bda6:	78bb      	ldrb	r3, [r7, #2]
 800bda8:	883a      	ldrh	r2, [r7, #0]
 800bdaa:	78f9      	ldrb	r1, [r7, #3]
 800bdac:	f7f8 fc0f 	bl	80045ce <HAL_PCD_EP_Open>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 f928 	bl	800c00c <USBD_Get_USB_Status>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bde4:	78fa      	ldrb	r2, [r7, #3]
 800bde6:	4611      	mov	r1, r2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7f8 fc56 	bl	800469a <HAL_PCD_EP_Close>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 f909 	bl	800c00c <USBD_Get_USB_Status>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	460b      	mov	r3, r1
 800be12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be14:	2300      	movs	r3, #0
 800be16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be22:	78fa      	ldrb	r2, [r7, #3]
 800be24:	4611      	mov	r1, r2
 800be26:	4618      	mov	r0, r3
 800be28:	f7f8 fd16 	bl	8004858 <HAL_PCD_EP_SetStall>
 800be2c:	4603      	mov	r3, r0
 800be2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	4618      	mov	r0, r3
 800be34:	f000 f8ea 	bl	800c00c <USBD_Get_USB_Status>
 800be38:	4603      	mov	r3, r0
 800be3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b084      	sub	sp, #16
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
 800be4e:	460b      	mov	r3, r1
 800be50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be60:	78fa      	ldrb	r2, [r7, #3]
 800be62:	4611      	mov	r1, r2
 800be64:	4618      	mov	r0, r3
 800be66:	f7f8 fd57 	bl	8004918 <HAL_PCD_EP_ClrStall>
 800be6a:	4603      	mov	r3, r0
 800be6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
 800be70:	4618      	mov	r0, r3
 800be72:	f000 f8cb 	bl	800c00c <USBD_Get_USB_Status>
 800be76:	4603      	mov	r3, r0
 800be78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	460b      	mov	r3, r1
 800be8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	da0c      	bge.n	800beba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bea0:	78fb      	ldrb	r3, [r7, #3]
 800bea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bea6:	68f9      	ldr	r1, [r7, #12]
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	4613      	mov	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4413      	add	r3, r2
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	440b      	add	r3, r1
 800beb4:	3302      	adds	r3, #2
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	e00b      	b.n	800bed2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800beba:	78fb      	ldrb	r3, [r7, #3]
 800bebc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bec0:	68f9      	ldr	r1, [r7, #12]
 800bec2:	4613      	mov	r3, r2
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	4413      	add	r3, r2
 800bec8:	00db      	lsls	r3, r3, #3
 800beca:	440b      	add	r3, r1
 800becc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bed0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3714      	adds	r7, #20
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bc80      	pop	{r7}
 800beda:	4770      	bx	lr

0800bedc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bef6:	78fa      	ldrb	r2, [r7, #3]
 800bef8:	4611      	mov	r1, r2
 800befa:	4618      	mov	r0, r3
 800befc:	f7f8 fb42 	bl	8004584 <HAL_PCD_SetAddress>
 800bf00:	4603      	mov	r3, r0
 800bf02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 f880 	bl	800c00c <USBD_Get_USB_Status>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b086      	sub	sp, #24
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	461a      	mov	r2, r3
 800bf26:	460b      	mov	r3, r1
 800bf28:	72fb      	strb	r3, [r7, #11]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf3c:	893b      	ldrh	r3, [r7, #8]
 800bf3e:	7af9      	ldrb	r1, [r7, #11]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	f7f8 fc46 	bl	80047d2 <HAL_PCD_EP_Transmit>
 800bf46:	4603      	mov	r3, r0
 800bf48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f000 f85d 	bl	800c00c <USBD_Get_USB_Status>
 800bf52:	4603      	mov	r3, r0
 800bf54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf56:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3718      	adds	r7, #24
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	607a      	str	r2, [r7, #4]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	72fb      	strb	r3, [r7, #11]
 800bf70:	4613      	mov	r3, r2
 800bf72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf82:	893b      	ldrh	r3, [r7, #8]
 800bf84:	7af9      	ldrb	r1, [r7, #11]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	f7f8 fbcf 	bl	800472a <HAL_PCD_EP_Receive>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf90:	7dfb      	ldrb	r3, [r7, #23]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 f83a 	bl	800c00c <USBD_Get_USB_Status>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	460b      	mov	r3, r1
 800bfb0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfb8:	78fa      	ldrb	r2, [r7, #3]
 800bfba:	4611      	mov	r1, r2
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7f8 fbf1 	bl	80047a4 <HAL_PCD_EP_GetRxCount>
 800bfc2:	4603      	mov	r3, r0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfd4:	4b02      	ldr	r3, [pc, #8]	; (800bfe0 <USBD_static_malloc+0x14>)
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bc80      	pop	{r7}
 800bfde:	4770      	bx	lr
 800bfe0:	2000144c 	.word	0x2000144c

0800bfe4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]

}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bc80      	pop	{r7}
 800bff4:	4770      	bx	lr

0800bff6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff6:	b480      	push	{r7}
 800bff8:	b083      	sub	sp, #12
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	460b      	mov	r3, r1
 800c000:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c002:	bf00      	nop
 800c004:	370c      	adds	r7, #12
 800c006:	46bd      	mov	sp, r7
 800c008:	bc80      	pop	{r7}
 800c00a:	4770      	bx	lr

0800c00c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	4603      	mov	r3, r0
 800c014:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c01a:	79fb      	ldrb	r3, [r7, #7]
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d817      	bhi.n	800c050 <USBD_Get_USB_Status+0x44>
 800c020:	a201      	add	r2, pc, #4	; (adr r2, 800c028 <USBD_Get_USB_Status+0x1c>)
 800c022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c026:	bf00      	nop
 800c028:	0800c039 	.word	0x0800c039
 800c02c:	0800c03f 	.word	0x0800c03f
 800c030:	0800c045 	.word	0x0800c045
 800c034:	0800c04b 	.word	0x0800c04b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	73fb      	strb	r3, [r7, #15]
    break;
 800c03c:	e00b      	b.n	800c056 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c03e:	2302      	movs	r3, #2
 800c040:	73fb      	strb	r3, [r7, #15]
    break;
 800c042:	e008      	b.n	800c056 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c044:	2301      	movs	r3, #1
 800c046:	73fb      	strb	r3, [r7, #15]
    break;
 800c048:	e005      	b.n	800c056 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c04a:	2302      	movs	r3, #2
 800c04c:	73fb      	strb	r3, [r7, #15]
    break;
 800c04e:	e002      	b.n	800c056 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c050:	2302      	movs	r3, #2
 800c052:	73fb      	strb	r3, [r7, #15]
    break;
 800c054:	bf00      	nop
  }
  return usb_status;
 800c056:	7bfb      	ldrb	r3, [r7, #15]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bc80      	pop	{r7}
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop

0800c064 <__libc_init_array>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	2600      	movs	r6, #0
 800c068:	4d0c      	ldr	r5, [pc, #48]	; (800c09c <__libc_init_array+0x38>)
 800c06a:	4c0d      	ldr	r4, [pc, #52]	; (800c0a0 <__libc_init_array+0x3c>)
 800c06c:	1b64      	subs	r4, r4, r5
 800c06e:	10a4      	asrs	r4, r4, #2
 800c070:	42a6      	cmp	r6, r4
 800c072:	d109      	bne.n	800c088 <__libc_init_array+0x24>
 800c074:	f000 f830 	bl	800c0d8 <_init>
 800c078:	2600      	movs	r6, #0
 800c07a:	4d0a      	ldr	r5, [pc, #40]	; (800c0a4 <__libc_init_array+0x40>)
 800c07c:	4c0a      	ldr	r4, [pc, #40]	; (800c0a8 <__libc_init_array+0x44>)
 800c07e:	1b64      	subs	r4, r4, r5
 800c080:	10a4      	asrs	r4, r4, #2
 800c082:	42a6      	cmp	r6, r4
 800c084:	d105      	bne.n	800c092 <__libc_init_array+0x2e>
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	f855 3b04 	ldr.w	r3, [r5], #4
 800c08c:	4798      	blx	r3
 800c08e:	3601      	adds	r6, #1
 800c090:	e7ee      	b.n	800c070 <__libc_init_array+0xc>
 800c092:	f855 3b04 	ldr.w	r3, [r5], #4
 800c096:	4798      	blx	r3
 800c098:	3601      	adds	r6, #1
 800c09a:	e7f2      	b.n	800c082 <__libc_init_array+0x1e>
 800c09c:	0800c16c 	.word	0x0800c16c
 800c0a0:	0800c16c 	.word	0x0800c16c
 800c0a4:	0800c16c 	.word	0x0800c16c
 800c0a8:	0800c170 	.word	0x0800c170

0800c0ac <memcpy>:
 800c0ac:	440a      	add	r2, r1
 800c0ae:	4291      	cmp	r1, r2
 800c0b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0b4:	d100      	bne.n	800c0b8 <memcpy+0xc>
 800c0b6:	4770      	bx	lr
 800c0b8:	b510      	push	{r4, lr}
 800c0ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0be:	4291      	cmp	r1, r2
 800c0c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0c4:	d1f9      	bne.n	800c0ba <memcpy+0xe>
 800c0c6:	bd10      	pop	{r4, pc}

0800c0c8 <memset>:
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	4402      	add	r2, r0
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d100      	bne.n	800c0d2 <memset+0xa>
 800c0d0:	4770      	bx	lr
 800c0d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c0d6:	e7f9      	b.n	800c0cc <memset+0x4>

0800c0d8 <_init>:
 800c0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0da:	bf00      	nop
 800c0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0de:	bc08      	pop	{r3}
 800c0e0:	469e      	mov	lr, r3
 800c0e2:	4770      	bx	lr

0800c0e4 <_fini>:
 800c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e6:	bf00      	nop
 800c0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ea:	bc08      	pop	{r3}
 800c0ec:	469e      	mov	lr, r3
 800c0ee:	4770      	bx	lr
