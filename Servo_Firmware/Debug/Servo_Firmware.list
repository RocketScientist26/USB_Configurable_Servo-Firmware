
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c858  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800c968  0800c968  0001c968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9e4  0800c9e4  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c9e4  0800c9e4  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c9e4  0800c9e4  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9e4  0800c9e4  0001c9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9e8  0800c9e8  0001c9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800c9ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014cc  200001a8  0800cb90  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  0800cb90  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e43  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a41  00000000  00000000  00039010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003da58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d43b  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d32c  00000000  00000000  0005d703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e44  00000000  00000000  0007aa2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e873  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005704  00000000  00000000  0010e8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001a8 	.word	0x200001a8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c950 	.word	0x0800c950

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ac 	.word	0x200001ac
 800014c:	0800c950 	.word	0x0800c950

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_frsub>:
 80009fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a00:	e002      	b.n	8000a08 <__addsf3>
 8000a02:	bf00      	nop

08000a04 <__aeabi_fsub>:
 8000a04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a08 <__addsf3>:
 8000a08:	0042      	lsls	r2, r0, #1
 8000a0a:	bf1f      	itttt	ne
 8000a0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a10:	ea92 0f03 	teqne	r2, r3
 8000a14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a1c:	d06a      	beq.n	8000af4 <__addsf3+0xec>
 8000a1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a26:	bfc1      	itttt	gt
 8000a28:	18d2      	addgt	r2, r2, r3
 8000a2a:	4041      	eorgt	r1, r0
 8000a2c:	4048      	eorgt	r0, r1
 8000a2e:	4041      	eorgt	r1, r0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	2b19      	cmp	r3, #25
 8000a36:	bf88      	it	hi
 8000a38:	4770      	bxhi	lr
 8000a3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4249      	negne	r1, r1
 8000a5a:	ea92 0f03 	teq	r2, r3
 8000a5e:	d03f      	beq.n	8000ae0 <__addsf3+0xd8>
 8000a60:	f1a2 0201 	sub.w	r2, r2, #1
 8000a64:	fa41 fc03 	asr.w	ip, r1, r3
 8000a68:	eb10 000c 	adds.w	r0, r0, ip
 8000a6c:	f1c3 0320 	rsb	r3, r3, #32
 8000a70:	fa01 f103 	lsl.w	r1, r1, r3
 8000a74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a78:	d502      	bpl.n	8000a80 <__addsf3+0x78>
 8000a7a:	4249      	negs	r1, r1
 8000a7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a84:	d313      	bcc.n	8000aae <__addsf3+0xa6>
 8000a86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a8a:	d306      	bcc.n	8000a9a <__addsf3+0x92>
 8000a8c:	0840      	lsrs	r0, r0, #1
 8000a8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a92:	f102 0201 	add.w	r2, r2, #1
 8000a96:	2afe      	cmp	r2, #254	; 0xfe
 8000a98:	d251      	bcs.n	8000b3e <__addsf3+0x136>
 8000a9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa2:	bf08      	it	eq
 8000aa4:	f020 0001 	biceq.w	r0, r0, #1
 8000aa8:	ea40 0003 	orr.w	r0, r0, r3
 8000aac:	4770      	bx	lr
 8000aae:	0049      	lsls	r1, r1, #1
 8000ab0:	eb40 0000 	adc.w	r0, r0, r0
 8000ab4:	3a01      	subs	r2, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000abc:	d2ed      	bcs.n	8000a9a <__addsf3+0x92>
 8000abe:	fab0 fc80 	clz	ip, r0
 8000ac2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ac6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ace:	bfaa      	itet	ge
 8000ad0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ad4:	4252      	neglt	r2, r2
 8000ad6:	4318      	orrge	r0, r3
 8000ad8:	bfbc      	itt	lt
 8000ada:	40d0      	lsrlt	r0, r2
 8000adc:	4318      	orrlt	r0, r3
 8000ade:	4770      	bx	lr
 8000ae0:	f092 0f00 	teq	r2, #0
 8000ae4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae8:	bf06      	itte	eq
 8000aea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aee:	3201      	addeq	r2, #1
 8000af0:	3b01      	subne	r3, #1
 8000af2:	e7b5      	b.n	8000a60 <__addsf3+0x58>
 8000af4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000afc:	bf18      	it	ne
 8000afe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b02:	d021      	beq.n	8000b48 <__addsf3+0x140>
 8000b04:	ea92 0f03 	teq	r2, r3
 8000b08:	d004      	beq.n	8000b14 <__addsf3+0x10c>
 8000b0a:	f092 0f00 	teq	r2, #0
 8000b0e:	bf08      	it	eq
 8000b10:	4608      	moveq	r0, r1
 8000b12:	4770      	bx	lr
 8000b14:	ea90 0f01 	teq	r0, r1
 8000b18:	bf1c      	itt	ne
 8000b1a:	2000      	movne	r0, #0
 8000b1c:	4770      	bxne	lr
 8000b1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b22:	d104      	bne.n	8000b2e <__addsf3+0x126>
 8000b24:	0040      	lsls	r0, r0, #1
 8000b26:	bf28      	it	cs
 8000b28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	4770      	bx	lr
 8000b2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b32:	bf3c      	itt	cc
 8000b34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bxcc	lr
 8000b3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	4770      	bx	lr
 8000b48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b4c:	bf16      	itet	ne
 8000b4e:	4608      	movne	r0, r1
 8000b50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b54:	4601      	movne	r1, r0
 8000b56:	0242      	lsls	r2, r0, #9
 8000b58:	bf06      	itte	eq
 8000b5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b5e:	ea90 0f01 	teqeq	r0, r1
 8000b62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_ui2f>:
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e004      	b.n	8000b78 <__aeabi_i2f+0x8>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_i2f>:
 8000b70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b74:	bf48      	it	mi
 8000b76:	4240      	negmi	r0, r0
 8000b78:	ea5f 0c00 	movs.w	ip, r0
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b84:	4601      	mov	r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	e01c      	b.n	8000bc6 <__aeabi_l2f+0x2a>

08000b8c <__aeabi_ul2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e00a      	b.n	8000bb0 <__aeabi_l2f+0x14>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_l2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__aeabi_l2f+0x14>
 8000baa:	4240      	negs	r0, r0
 8000bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb0:	ea5f 0c01 	movs.w	ip, r1
 8000bb4:	bf02      	ittt	eq
 8000bb6:	4684      	moveq	ip, r0
 8000bb8:	4601      	moveq	r1, r0
 8000bba:	2000      	moveq	r0, #0
 8000bbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bca:	fabc f28c 	clz	r2, ip
 8000bce:	3a08      	subs	r2, #8
 8000bd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bd4:	db10      	blt.n	8000bf8 <__aeabi_l2f+0x5c>
 8000bd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bda:	4463      	add	r3, ip
 8000bdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f102 0220 	add.w	r2, r2, #32
 8000bfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c08:	fa21 f202 	lsr.w	r2, r1, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_fmul>:
 8000c18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c20:	bf1e      	ittt	ne
 8000c22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c26:	ea92 0f0c 	teqne	r2, ip
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d06f      	beq.n	8000d10 <__aeabi_fmul+0xf8>
 8000c30:	441a      	add	r2, r3
 8000c32:	ea80 0c01 	eor.w	ip, r0, r1
 8000c36:	0240      	lsls	r0, r0, #9
 8000c38:	bf18      	it	ne
 8000c3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c3e:	d01e      	beq.n	8000c7e <__aeabi_fmul+0x66>
 8000c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c58:	bf3e      	ittt	cc
 8000c5a:	0049      	lslcc	r1, r1, #1
 8000c5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c60:	005b      	lslcc	r3, r3, #1
 8000c62:	ea40 0001 	orr.w	r0, r0, r1
 8000c66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c6a:	2afd      	cmp	r2, #253	; 0xfd
 8000c6c:	d81d      	bhi.n	8000caa <__aeabi_fmul+0x92>
 8000c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c86:	bf08      	it	eq
 8000c88:	0249      	lsleq	r1, r1, #9
 8000c8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c92:	3a7f      	subs	r2, #127	; 0x7f
 8000c94:	bfc2      	ittt	gt
 8000c96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c9e:	4770      	bxgt	lr
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	dc5d      	bgt.n	8000d68 <__aeabi_fmul+0x150>
 8000cac:	f112 0f19 	cmn.w	r2, #25
 8000cb0:	bfdc      	itt	le
 8000cb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cb6:	4770      	bxle	lr
 8000cb8:	f1c2 0200 	rsb	r2, r2, #0
 8000cbc:	0041      	lsls	r1, r0, #1
 8000cbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000cc2:	f1c2 0220 	rsb	r2, r2, #32
 8000cc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cce:	f140 0000 	adc.w	r0, r0, #0
 8000cd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cd6:	bf08      	it	eq
 8000cd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cdc:	4770      	bx	lr
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ce6:	bf02      	ittt	eq
 8000ce8:	0040      	lsleq	r0, r0, #1
 8000cea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cee:	3a01      	subeq	r2, #1
 8000cf0:	d0f9      	beq.n	8000ce6 <__aeabi_fmul+0xce>
 8000cf2:	ea40 000c 	orr.w	r0, r0, ip
 8000cf6:	f093 0f00 	teq	r3, #0
 8000cfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0049      	lsleq	r1, r1, #1
 8000d02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d06:	3b01      	subeq	r3, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fmul+0xe6>
 8000d0a:	ea41 010c 	orr.w	r1, r1, ip
 8000d0e:	e78f      	b.n	8000c30 <__aeabi_fmul+0x18>
 8000d10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d14:	ea92 0f0c 	teq	r2, ip
 8000d18:	bf18      	it	ne
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d00a      	beq.n	8000d36 <__aeabi_fmul+0x11e>
 8000d20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d24:	bf18      	it	ne
 8000d26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	d1d8      	bne.n	8000cde <__aeabi_fmul+0xc6>
 8000d2c:	ea80 0001 	eor.w	r0, r0, r1
 8000d30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	bf17      	itett	ne
 8000d3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d40:	4608      	moveq	r0, r1
 8000d42:	f091 0f00 	teqne	r1, #0
 8000d46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d4a:	d014      	beq.n	8000d76 <__aeabi_fmul+0x15e>
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	d101      	bne.n	8000d56 <__aeabi_fmul+0x13e>
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	d10f      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d56:	ea93 0f0c 	teq	r3, ip
 8000d5a:	d103      	bne.n	8000d64 <__aeabi_fmul+0x14c>
 8000d5c:	024b      	lsls	r3, r1, #9
 8000d5e:	bf18      	it	ne
 8000d60:	4608      	movne	r0, r1
 8000d62:	d108      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bx	lr
 8000d76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fdiv>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d069      	beq.n	8000e6c <__aeabi_fdiv+0xec>
 8000d98:	eba2 0203 	sub.w	r2, r2, r3
 8000d9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000da0:	0249      	lsls	r1, r1, #9
 8000da2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000da6:	d037      	beq.n	8000e18 <__aeabi_fdiv+0x98>
 8000da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000db0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	428b      	cmp	r3, r1
 8000dba:	bf38      	it	cc
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	bf24      	itt	cs
 8000dca:	1a5b      	subcs	r3, r3, r1
 8000dcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dd4:	bf24      	itt	cs
 8000dd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000de2:	bf24      	itt	cs
 8000de4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000de8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000df0:	bf24      	itt	cs
 8000df2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000df6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	bf18      	it	ne
 8000dfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e02:	d1e0      	bne.n	8000dc6 <__aeabi_fdiv+0x46>
 8000e04:	2afd      	cmp	r2, #253	; 0xfd
 8000e06:	f63f af50 	bhi.w	8000caa <__aeabi_fmul+0x92>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e20:	327f      	adds	r2, #127	; 0x7f
 8000e22:	bfc2      	ittt	gt
 8000e24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2c:	4770      	bxgt	lr
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	3a01      	subs	r2, #1
 8000e38:	e737      	b.n	8000caa <__aeabi_fmul+0x92>
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fdiv+0xc2>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fdiv+0xda>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e795      	b.n	8000d98 <__aeabi_fdiv+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d108      	bne.n	8000e88 <__aeabi_fdiv+0x108>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	f47f af7d 	bne.w	8000d76 <__aeabi_fmul+0x15e>
 8000e7c:	ea93 0f0c 	teq	r3, ip
 8000e80:	f47f af70 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e776      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e88:	ea93 0f0c 	teq	r3, ip
 8000e8c:	d104      	bne.n	8000e98 <__aeabi_fdiv+0x118>
 8000e8e:	024b      	lsls	r3, r1, #9
 8000e90:	f43f af4c 	beq.w	8000d2c <__aeabi_fmul+0x114>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e76e      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1ca      	bne.n	8000e3a <__aeabi_fdiv+0xba>
 8000ea4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ea8:	f47f af5c 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000eac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eb0:	f47f af3c 	bne.w	8000d2c <__aeabi_fmul+0x114>
 8000eb4:	e75f      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000eb6:	bf00      	nop

08000eb8 <__gesf2>:
 8000eb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ebc:	e006      	b.n	8000ecc <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__lesf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	e002      	b.n	8000ecc <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__cmpsf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	bf18      	it	ne
 8000ede:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ee2:	d011      	beq.n	8000f08 <__cmpsf2+0x40>
 8000ee4:	b001      	add	sp, #4
 8000ee6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eea:	bf18      	it	ne
 8000eec:	ea90 0f01 	teqne	r0, r1
 8000ef0:	bf58      	it	pl
 8000ef2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ef6:	bf88      	it	hi
 8000ef8:	17c8      	asrhi	r0, r1, #31
 8000efa:	bf38      	it	cc
 8000efc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f00:	bf18      	it	ne
 8000f02:	f040 0001 	orrne.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	d102      	bne.n	8000f14 <__cmpsf2+0x4c>
 8000f0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f12:	d105      	bne.n	8000f20 <__cmpsf2+0x58>
 8000f14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f18:	d1e4      	bne.n	8000ee4 <__cmpsf2+0x1c>
 8000f1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1e:	d0e1      	beq.n	8000ee4 <__cmpsf2+0x1c>
 8000f20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__aeabi_cfrcmple>:
 8000f28:	4684      	mov	ip, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4661      	mov	r1, ip
 8000f2e:	e7ff      	b.n	8000f30 <__aeabi_cfcmpeq>

08000f30 <__aeabi_cfcmpeq>:
 8000f30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f32:	f7ff ffc9 	bl	8000ec8 <__cmpsf2>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	bf48      	it	mi
 8000f3a:	f110 0f00 	cmnmi.w	r0, #0
 8000f3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f40 <__aeabi_fcmpeq>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff fff4 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f48:	bf0c      	ite	eq
 8000f4a:	2001      	moveq	r0, #1
 8000f4c:	2000      	movne	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmplt>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffea 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f5c:	bf34      	ite	cc
 8000f5e:	2001      	movcc	r0, #1
 8000f60:	2000      	movcs	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmple>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffe0 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f70:	bf94      	ite	ls
 8000f72:	2001      	movls	r0, #1
 8000f74:	2000      	movhi	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_fcmpge>:
 8000f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f80:	f7ff ffd2 	bl	8000f28 <__aeabi_cfrcmple>
 8000f84:	bf94      	ite	ls
 8000f86:	2001      	movls	r0, #1
 8000f88:	2000      	movhi	r0, #0
 8000f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8e:	bf00      	nop

08000f90 <__aeabi_fcmpgt>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff ffc8 	bl	8000f28 <__aeabi_cfrcmple>
 8000f98:	bf34      	ite	cc
 8000f9a:	2001      	movcc	r0, #1
 8000f9c:	2000      	movcs	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2iz>:
 8000fa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30f      	bcc.n	8000fce <__aeabi_f2iz+0x2a>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d90d      	bls.n	8000fd4 <__aeabi_f2iz+0x30>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	bf18      	it	ne
 8000fca:	4240      	negne	r0, r0
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr
 8000fd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd8:	d101      	bne.n	8000fde <__aeabi_f2iz+0x3a>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	d105      	bne.n	8000fea <__aeabi_f2iz+0x46>
 8000fde:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe2:	bf08      	it	eq
 8000fe4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe8:	4770      	bx	lr
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4770      	bx	lr

08000ff0 <Potentiometer_Ready>:
extern uint8_t usb_rq;
extern uint8_t usb_rq_sett_revert_flash;
extern uint8_t usb_rq_stat_motor;
extern uint8_t usb_rq_stat_phold;

void Potentiometer_Ready(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	pid_input = potentiometer_position;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <Potentiometer_Ready+0x80>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <Potentiometer_Ready+0x84>)
 8000ffa:	6013      	str	r3, [r2, #0]
	if(!pid_running){
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <Potentiometer_Ready+0x88>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d133      	bne.n	800106c <Potentiometer_Ready+0x7c>
		if(motor_running){
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <Potentiometer_Ready+0x8c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d02f      	beq.n	800106c <Potentiometer_Ready+0x7c>
			if((potentiometer_position <= potentiometer_min) && (Motor_Get() < 0)){
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <Potentiometer_Ready+0x90>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fdad 	bl	8000b70 <__aeabi_i2f>
 8001016:	4602      	mov	r2, r0
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <Potentiometer_Ready+0x80>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4610      	mov	r0, r2
 8001020:	f7ff ffac 	bl	8000f7c <__aeabi_fcmpge>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d008      	beq.n	800103c <Potentiometer_Ready+0x4c>
 800102a:	f000 fb19 	bl	8001660 <Motor_Get>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	da03      	bge.n	800103c <Potentiometer_Ready+0x4c>
				Motor_Set(0);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 faab 	bl	8001590 <Motor_Set>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 800103a:	e017      	b.n	800106c <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <Potentiometer_Ready+0x94>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fd95 	bl	8000b70 <__aeabi_i2f>
 8001046:	4602      	mov	r2, r0
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <Potentiometer_Ready+0x80>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f7ff ff8a 	bl	8000f68 <__aeabi_fcmple>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d100      	bne.n	800105c <Potentiometer_Ready+0x6c>
}
 800105a:	e007      	b.n	800106c <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800105c:	f000 fb00 	bl	8001660 <Motor_Get>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	dd02      	ble.n	800106c <Potentiometer_Ready+0x7c>
				Motor_Set(0);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 fa92 	bl	8001590 <Motor_Set>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200001f8 	.word	0x200001f8
 8001074:	200001dc 	.word	0x200001dc
 8001078:	200001d8 	.word	0x200001d8
 800107c:	200001c8 	.word	0x200001c8
 8001080:	200001ec 	.word	0x200001ec
 8001084:	200001ee 	.word	0x200001ee

08001088 <PID_Ready>:
void PID_Ready(float output){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff87 	bl	8000fa4 <__aeabi_f2iz>
 8001096:	4603      	mov	r3, r0
 8001098:	b21b      	sxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fa78 	bl	8001590 <Motor_Set>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <App_Init>:

void App_Init(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	Settings_Read();
 80010ac:	f000 fdda 	bl	8001c64 <Settings_Read>
	USB_Det();
 80010b0:	f001 fb34 	bl	800271c <USB_Det>
	Signal_Init();
 80010b4:	f001 fb28 	bl	8002708 <Signal_Init>
	Potentiometer_Init();
 80010b8:	f000 fdbc 	bl	8001c34 <Potentiometer_Init>
	Motor_Init();
 80010bc:	f000 fb0e 	bl	80016dc <Motor_Init>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <App_Loop>:
void App_Loop(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	switch(usb_rq){
 80010c8:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <App_Loop+0xfc>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d002      	beq.n	80010d6 <App_Loop+0x12>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d019      	beq.n	8001108 <App_Loop+0x44>
 80010d4:	e06e      	b.n	80011b4 <App_Loop+0xf0>
		case USB_RQ_CONF:
			if(usb_rq_sett_revert_flash == USB_SETTINGS_REVERT){
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <App_Loop+0x100>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d105      	bne.n	80010ea <App_Loop+0x26>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 80010de:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <App_Loop+0x100>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
				//Read from flash
				Settings_Read();
 80010e4:	f000 fdbe 	bl	8001c64 <Settings_Read>
 80010e8:	e008      	b.n	80010fc <App_Loop+0x38>
			}else if(usb_rq_sett_revert_flash == USB_SETTINGS_FLASH){
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <App_Loop+0x100>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d104      	bne.n	80010fc <App_Loop+0x38>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <App_Loop+0x100>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
				//Write to flash
				Settings_Write();
 80010f8:	f001 f88a 	bl	8002210 <Settings_Write>
			}
			USB_Send_Config();
 80010fc:	f001 fbb4 	bl	8002868 <USB_Send_Config>
			usb_rq = USB_RQ_NONE;
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <App_Loop+0xfc>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
		break;
 8001106:	e055      	b.n	80011b4 <App_Loop+0xf0>
		case USB_RQ_STAT:
			if(usb_rq_stat_motor != 0){
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <App_Loop+0x104>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d033      	beq.n	8001178 <App_Loop+0xb4>
				//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout
				if(usb_rq_stat_motor == 1){//Backward
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <App_Loop+0x104>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d112      	bne.n	800113e <App_Loop+0x7a>
					if(potentiometer_position > potentiometer_min){
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <App_Loop+0x108>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fd27 	bl	8000b70 <__aeabi_i2f>
 8001122:	4602      	mov	r2, r0
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <App_Loop+0x10c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f7ff ff12 	bl	8000f54 <__aeabi_fcmplt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d01a      	beq.n	800116c <App_Loop+0xa8>
						Motor_Set(-1000);
 8001136:	4827      	ldr	r0, [pc, #156]	; (80011d4 <App_Loop+0x110>)
 8001138:	f000 fa2a 	bl	8001590 <Motor_Set>
 800113c:	e016      	b.n	800116c <App_Loop+0xa8>
					}
				}else if(usb_rq_stat_motor == 2){//Forward
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <App_Loop+0x104>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d112      	bne.n	800116c <App_Loop+0xa8>
					if(potentiometer_position < potentiometer_max){
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <App_Loop+0x114>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fd10 	bl	8000b70 <__aeabi_i2f>
 8001150:	4602      	mov	r2, r0
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <App_Loop+0x10c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff ff19 	bl	8000f90 <__aeabi_fcmpgt>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <App_Loop+0xa8>
						Motor_Set(1000);
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f000 fa12 	bl	8001590 <Motor_Set>
					}
				}
				motor_systick = 0;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <App_Loop+0x118>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
				usb_rq_stat_motor = 0;
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <App_Loop+0x104>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
			}
			if(usb_rq_stat_phold == 1){
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <App_Loop+0x11c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d109      	bne.n	8001194 <App_Loop+0xd0>
				usb_rq_stat_phold = 0;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <App_Loop+0x11c>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
				if(!pid_running){//Run pid with signal timeout
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <App_Loop+0x120>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <App_Loop+0xe4>
					PID_Start();
 800118e:	f000 fce3 	bl	8001b58 <PID_Start>
 8001192:	e009      	b.n	80011a8 <App_Loop+0xe4>
				}
			}else if(signal_ignore && pid_running){
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <App_Loop+0x124>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <App_Loop+0xe4>
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <App_Loop+0x120>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <App_Loop+0xe4>
				PID_Stop();
 80011a4:	f000 fcfa 	bl	8001b9c <PID_Stop>
			}
			USB_Send_Status();
 80011a8:	f001 fd2c 	bl	8002c04 <USB_Send_Status>
			usb_rq = USB_RQ_NONE;
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <App_Loop+0xfc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
		break;
 80011b2:	bf00      	nop
	}
	USB_Det();
 80011b4:	f001 fab2 	bl	800271c <USB_Det>
	LED_Update();
 80011b8:	f000 f98a 	bl	80014d0 <LED_Update>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000250 	.word	0x20000250
 80011c4:	20000251 	.word	0x20000251
 80011c8:	20000252 	.word	0x20000252
 80011cc:	200001ec 	.word	0x200001ec
 80011d0:	200001f8 	.word	0x200001f8
 80011d4:	fffffc18 	.word	0xfffffc18
 80011d8:	200001ee 	.word	0x200001ee
 80011dc:	200001c9 	.word	0x200001c9
 80011e0:	20000253 	.word	0x20000253
 80011e4:	200001d8 	.word	0x200001d8
 80011e8:	2000023c 	.word	0x2000023c

080011ec <Flash_Read>:
#include "main.h"
#include "flash.h"

void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	while(i != length){
 80011fc:	e00b      	b.n	8001216 <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	4413      	add	r3, r2
 8001204:	4619      	mov	r1, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	4413      	add	r3, r2
 800120c:	780a      	ldrb	r2, [r1, #0]
 800120e:	701a      	strb	r2, [r3, #0]
		i++;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
	while(i != length){
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d1ef      	bne.n	80011fe <Flash_Read+0x12>
	}
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <Flash_Write>:
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 800122a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8001248:	f002 fff8 	bl	800423c <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 800124c:	f107 0210 	add.w	r2, r7, #16
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f003 f8d8 	bl	800440c <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	b29a      	uxth	r2, r3
 8001266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	b29b      	uxth	r3, r3
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 8001274:	e027      	b.n	80012c6 <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 8001276:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	18d0      	adds	r0, r2, r3
				((uint32_t)data[i+3]<<24)|
 800127c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800127e:	3303      	adds	r3, #3
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	061a      	lsls	r2, r3, #24
				((uint32_t)data[i+2]<<16)|
 8001288:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800128a:	3302      	adds	r3, #2
 800128c:	68f9      	ldr	r1, [r7, #12]
 800128e:	440b      	add	r3, r1
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	041b      	lsls	r3, r3, #16
				((uint32_t)data[i+3]<<24)|
 8001294:	431a      	orrs	r2, r3
				((uint32_t)data[i+1]<<8)|
 8001296:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001298:	3301      	adds	r3, #1
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	440b      	add	r3, r1
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	021b      	lsls	r3, r3, #8
				((uint32_t)data[i+2]<<16)|
 80012a2:	4313      	orrs	r3, r2
				(uint32_t)data[i]
 80012a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012a6:	68f9      	ldr	r1, [r7, #12]
 80012a8:	440a      	add	r2, r1
 80012aa:	7812      	ldrb	r2, [r2, #0]
				((uint32_t)data[i+1]<<8)|
 80012ac:	4313      	orrs	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80012ae:	2200      	movs	r2, #0
 80012b0:	4698      	mov	r8, r3
 80012b2:	4691      	mov	r9, r2
 80012b4:	4642      	mov	r2, r8
 80012b6:	464b      	mov	r3, r9
 80012b8:	4601      	mov	r1, r0
 80012ba:	2002      	movs	r0, #2
 80012bc:	f002 ff4e 	bl	800415c <HAL_FLASH_Program>
		);
		i+=4;
 80012c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012c2:	3304      	adds	r3, #4
 80012c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80012c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d1d2      	bne.n	8001276 <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 80012d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d03f      	beq.n	8001356 <Flash_Write+0x12c>
		uint32_t wdata = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 80012da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d114      	bne.n	800130a <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i+2]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i]<<8);
 80012e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012e2:	3302      	adds	r3, #2
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	061a      	lsls	r2, r3, #24
 80012ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012ee:	3301      	adds	r3, #1
 80012f0:	68f9      	ldr	r1, [r7, #12]
 80012f2:	440b      	add	r3, r1
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	041b      	lsls	r3, r3, #16
 80012f8:	431a      	orrs	r2, r3
 80012fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012fc:	68f9      	ldr	r1, [r7, #12]
 80012fe:	440b      	add	r3, r1
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	4313      	orrs	r3, r2
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
 8001308:	e019      	b.n	800133e <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 800130a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800130c:	2b02      	cmp	r3, #2
 800130e:	d10d      	bne.n	800132c <Flash_Write+0x102>
			wdata = ((uint32_t)data[i+1]<<24)|((uint32_t)data[i]<<16);
 8001310:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001312:	3301      	adds	r3, #1
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	061a      	lsls	r2, r3, #24
 800131c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	440b      	add	r3, r1
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	4313      	orrs	r3, r2
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
 800132a:	e008      	b.n	800133e <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 800132c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800132e:	2b01      	cmp	r3, #1
 8001330:	d105      	bne.n	800133e <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 8001332:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	061b      	lsls	r3, r3, #24
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 800133e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	18d1      	adds	r1, r2, r3
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	2200      	movs	r2, #0
 8001348:	461c      	mov	r4, r3
 800134a:	4615      	mov	r5, r2
 800134c:	4622      	mov	r2, r4
 800134e:	462b      	mov	r3, r5
 8001350:	2002      	movs	r0, #2
 8001352:	f002 ff03 	bl	800415c <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8001356:	f002 ff97 	bl	8004288 <HAL_FLASH_Lock>
}
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001364 <General_Copy_32_Bit>:
#include "main.h"
#include "general.h"

void General_Copy_32_Bit(uint32_t address_to, uint32_t address_from){
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8001372:	e00b      	b.n	800138c <General_Copy_32_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	4619      	mov	r1, r3
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	780a      	ldrb	r2, [r1, #0]
 8001384:	701a      	strb	r2, [r3, #0]
		i++;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3301      	adds	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2b04      	cmp	r3, #4
 8001390:	d1f0      	bne.n	8001374 <General_Copy_32_Bit+0x10>
	}
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <General_Copy_16_Bit>:
void General_Copy_16_Bit(uint32_t address_to, uint32_t address_from){
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 80013ac:	e00b      	b.n	80013c6 <General_Copy_16_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	780a      	ldrb	r2, [r1, #0]
 80013be:	701a      	strb	r2, [r3, #0]
		i++;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	3301      	adds	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d1f0      	bne.n	80013ae <General_Copy_16_Bit+0x10>
	}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <HAL_ADC_ConvCpltCallback>:
#include "pid.h"
#include "motor.h"
#include "signal.h"
#include "led.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x20>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 80013ea:	f000 fbe7 	bl	8001bbc <Potentiometer_ADC_Interrupt>
    }
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40012400 	.word	0x40012400

080013fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d102      	bne.n	8001414 <HAL_TIM_PeriodElapsedCallback+0x18>
		PID_Timer_Interrupt();
 800140e:	f000 f98d 	bl	800172c <PID_Timer_Interrupt>
	}
	else if(htim->Instance == TIM4){
		Signal_Timer_Interrupt();
	}
}
 8001412:	e006      	b.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x26>
	else if(htim->Instance == TIM4){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x26>
		Signal_Timer_Interrupt();
 800141e:	f001 f815 	bl	800244c <Signal_Timer_Interrupt>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40000400 	.word	0x40000400
 8001430:	40000800 	.word	0x40000800

08001434 <Interrupts_SysTick>:

void Interrupts_SysTick(){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	Motor_SysTick_Interrupt();
 8001438:	f000 f888 	bl	800154c <Motor_SysTick_Interrupt>
	Signal_SysTick_Interrupt();
 800143c:	f000 ffca 	bl	80023d4 <Signal_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 8001440:	f000 f810 	bl	8001464 <LED_SysTick_Interrupt>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SIGNAL_Pin){
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_EXTI_Callback+0x14>
		Signal_Interrupt();
 8001458:	f001 f806 	bl	8002468 <Signal_Interrupt>
	}
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <LED_SysTick_Interrupt>:

uint8_t led_mode = 0;
uint8_t led_position_changed = 0;
uint8_t led_systick = 0;

void LED_SysTick_Interrupt(){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	if(led_mode == LED_MODE_POSITION_CHANGE){
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <LED_SysTick_Interrupt+0x30>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d10f      	bne.n	8001490 <LED_SysTick_Interrupt+0x2c>
		led_systick++;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <LED_SysTick_Interrupt+0x34>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <LED_SysTick_Interrupt+0x34>)
 800147a:	701a      	strb	r2, [r3, #0]
		if(led_systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <LED_SysTick_Interrupt+0x34>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b13      	cmp	r3, #19
 8001482:	d905      	bls.n	8001490 <LED_SysTick_Interrupt+0x2c>
			LED_Set(OFF);
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f809 	bl	800149c <LED_Set>
			led_systick = 0;
 800148a:	4b03      	ldr	r3, [pc, #12]	; (8001498 <LED_SysTick_Interrupt+0x34>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200001c4 	.word	0x200001c4
 8001498:	200001c6 	.word	0x200001c6

0800149c <LED_Set>:

void LED_Set(uint8_t state){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	if(state == ON){
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <LED_Set+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	4806      	ldr	r0, [pc, #24]	; (80014cc <LED_Set+0x30>)
 80014b2:	f003 f9ee 	bl	8004892 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 80014b6:	e004      	b.n	80014c2 <LED_Set+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <LED_Set+0x30>)
 80014be:	f003 f9e8 	bl	8004892 <HAL_GPIO_WritePin>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40010800 	.word	0x40010800

080014d0 <LED_Update>:
void LED_Update(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	switch(led_mode){
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <LED_Update+0x6c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d82a      	bhi.n	8001532 <LED_Update+0x62>
 80014dc:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <LED_Update+0x14>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f5 	.word	0x080014f5
 80014e8:	080014fd 	.word	0x080014fd
 80014ec:	08001505 	.word	0x08001505
 80014f0:	0800151d 	.word	0x0800151d
		case LED_MODE_OFF:
			LED_Set(OFF);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff ffd1 	bl	800149c <LED_Set>
		break;
 80014fa:	e01a      	b.n	8001532 <LED_Update+0x62>
		case LED_MODE_POWER:
			LED_Set(ON);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff ffcd 	bl	800149c <LED_Set>
		break;
 8001502:	e016      	b.n	8001532 <LED_Update+0x62>
		case LED_MODE_SIGNAL:
			if(pid_running){
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <LED_Update+0x70>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <LED_Update+0x44>
				LED_Set(ON);
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff ffc5 	bl	800149c <LED_Set>
			}else{
				LED_Set(OFF);
			}
		break;
 8001512:	e00e      	b.n	8001532 <LED_Update+0x62>
				LED_Set(OFF);
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff ffc1 	bl	800149c <LED_Set>
		break;
 800151a:	e00a      	b.n	8001532 <LED_Update+0x62>
		case LED_MODE_POSITION_CHANGE:
			if(led_position_changed){
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <LED_Update+0x74>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <LED_Update+0x60>
				led_systick = 0;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <LED_Update+0x78>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
				LED_Set(ON);
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff ffb6 	bl	800149c <LED_Set>
			}
		break;
 8001530:	bf00      	nop
	}
	led_position_changed = 0;
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <LED_Update+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200001c4 	.word	0x200001c4
 8001540:	200001d8 	.word	0x200001d8
 8001544:	200001c5 	.word	0x200001c5
 8001548:	200001c6 	.word	0x200001c6

0800154c <Motor_SysTick_Interrupt>:
uint8_t motor_invert = MOTOR_NORMAL;
uint16_t motor_max_power = 1000;
uint8_t motor_running = 0;
uint8_t motor_systick = 0;

void Motor_SysTick_Interrupt(){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	if(!pid_running){
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <Motor_SysTick_Interrupt+0x38>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d113      	bne.n	8001580 <Motor_SysTick_Interrupt+0x34>
		if(motor_running){
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <Motor_SysTick_Interrupt+0x3c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00f      	beq.n	8001580 <Motor_SysTick_Interrupt+0x34>
			motor_systick++;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <Motor_SysTick_Interrupt+0x40>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <Motor_SysTick_Interrupt+0x40>)
 800156a:	701a      	strb	r2, [r3, #0]
			if(motor_systick == MOTOR_USB_TEST_TIMEOUT_MS){
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <Motor_SysTick_Interrupt+0x40>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d105      	bne.n	8001580 <Motor_SysTick_Interrupt+0x34>
				Motor_Set(0);
 8001574:	2000      	movs	r0, #0
 8001576:	f000 f80b 	bl	8001590 <Motor_Set>
				motor_systick = 0;
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <Motor_SysTick_Interrupt+0x40>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200001d8 	.word	0x200001d8
 8001588:	200001c8 	.word	0x200001c8
 800158c:	200001c9 	.word	0x200001c9

08001590 <Motor_Set>:

void Motor_Set(int16_t strength){//-1000 0 1000 Strength
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
	if(motor_invert == MOTOR_INVERT){
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <Motor_Set+0xc0>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d103      	bne.n	80015aa <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	425b      	negs	r3, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	80fb      	strh	r3, [r7, #6]
	}

	if(strength == 0){
 80015aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d110      	bne.n	80015d4 <Motor_Set+0x44>
		TIM2 -> CCR1 = 1000;
 80015b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 80015bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c4:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 0;
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <Motor_Set+0xc4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
		motor_systick = 0;
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <Motor_Set+0xc8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
		TIM2 -> CCR2 = 1000;
		motor_running = 1;
	}
}
 80015d2:	e038      	b.n	8001646 <Motor_Set+0xb6>
	}else if(strength < 0){
 80015d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da18      	bge.n	800160e <Motor_Set+0x7e>
		TIM2 -> CCR1 = 1000;
 80015dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000 + (strength / (1000 / motor_max_power));
 80015e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <Motor_Set+0xcc>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	4619      	mov	r1, r3
 80015f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f4:	fb93 f3f1 	sdiv	r3, r3, r1
 80015f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80015fc:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001604:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <Motor_Set+0xc4>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	e01b      	b.n	8001646 <Motor_Set+0xb6>
	}else if(strength > 0){
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	2b00      	cmp	r3, #0
 8001614:	dd17      	ble.n	8001646 <Motor_Set+0xb6>
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
 8001616:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <Motor_Set+0xcc>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001624:	fb93 f3f1 	sdiv	r3, r3, r1
 8001628:	fb92 f3f3 	sdiv	r3, r2, r3
 800162c:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8001630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8001636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <Motor_Set+0xc4>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	200001c7 	.word	0x200001c7
 8001654:	200001c8 	.word	0x200001c8
 8001658:	200001c9 	.word	0x200001c9
 800165c:	20000000 	.word	0x20000000

08001660 <Motor_Get>:
int16_t Motor_Get(){
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	if(TIM2 -> CCR1 != 1000){
 8001664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800166e:	d013      	beq.n	8001698 <Motor_Get+0x38>
		return (1000 - (int16_t)(TIM2 -> CCR1)) * (1000 / motor_max_power);
 8001670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	b21b      	sxth	r3, r3
 8001678:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800167c:	b29b      	uxth	r3, r3
 800167e:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <Motor_Get+0x78>)
 8001680:	8812      	ldrh	r2, [r2, #0]
 8001682:	4611      	mov	r1, r2
 8001684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001688:	fb92 f2f1 	sdiv	r2, r2, r1
 800168c:	b292      	uxth	r2, r2
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	b21b      	sxth	r3, r3
 8001696:	e01a      	b.n	80016ce <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 8001698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a2:	d013      	beq.n	80016cc <Motor_Get+0x6c>
		return ((int16_t)(TIM2 -> CCR2) - 1000) * (1000 / motor_max_power);
 80016a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <Motor_Get+0x78>)
 80016b4:	8812      	ldrh	r2, [r2, #0]
 80016b6:	4611      	mov	r1, r2
 80016b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016bc:	fb92 f2f1 	sdiv	r2, r2, r1
 80016c0:	b292      	uxth	r2, r2
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	e000      	b.n	80016ce <Motor_Get+0x6e>
	}
	return 0;
 80016cc:	2300      	movs	r3, #0
} 
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000000 	.word	0x20000000

080016dc <Motor_Init>:
void Motor_Init(){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016e0:	2100      	movs	r1, #0
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <Motor_Init+0x18>)
 80016e4:	f005 fcb8 	bl	8007058 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016e8:	2104      	movs	r1, #4
 80016ea:	4802      	ldr	r0, [pc, #8]	; (80016f4 <Motor_Init+0x18>)
 80016ec:	f005 fcb4 	bl	8007058 <HAL_TIM_PWM_Start>
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200003d0 	.word	0x200003d0

080016f8 <PID_Timer_Stop>:
float pid_setpoint = 2047;
//Runtime variables
float pid_last_input = 0;
float pid_output_sum = 0;

void PID_Timer_Stop(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <PID_Timer_Stop+0x10>)
 80016fe:	f005 fc25 	bl	8006f4c <HAL_TIM_Base_Stop_IT>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000418 	.word	0x20000418

0800170c <PID_Timer_Restart>:
void PID_Timer_Restart(){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <PID_Timer_Restart+0x1c>)
 8001712:	f005 fc1b 	bl	8006f4c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <PID_Timer_Restart+0x1c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 800171e:	4802      	ldr	r0, [pc, #8]	; (8001728 <PID_Timer_Restart+0x1c>)
 8001720:	f005 fbc2 	bl	8006ea8 <HAL_TIM_Base_Start_IT>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000418 	.word	0x20000418

0800172c <PID_Timer_Interrupt>:
void PID_Timer_Interrupt(){
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	PID_Compute();
 8001730:	f000 f838 	bl	80017a4 <PID_Compute>
	PID_Ready(pid_output);
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <PID_Timer_Interrupt+0x1c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fca5 	bl	8001088 <PID_Ready>
	PID_Timer_Restart();
 800173e:	f7ff ffe5 	bl	800170c <PID_Timer_Restart>
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200001e0 	.word	0x200001e0

0800174c <PID_Get_Sampling_Time>:

uint16_t PID_Get_Sampling_Time(){
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <PID_Get_Sampling_Time+0x1c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <PID_Get_Sampling_Time+0x20>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	095b      	lsrs	r3, r3, #5
 800175e:	b29b      	uxth	r3, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	20000418 	.word	0x20000418
 800176c:	51eb851f 	.word	0x51eb851f

08001770 <PID_Set_Sampling_Time>:
void PID_Set_Sampling_Time(uint16_t ms){
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	2264      	movs	r2, #100	; 0x64
 800177e:	fb03 f202 	mul.w	r2, r3, r2
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <PID_Set_Sampling_Time+0x30>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	2264      	movs	r2, #100	; 0x64
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	461a      	mov	r2, r3
 8001792:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <PID_Set_Sampling_Time+0x30>)
 8001794:	60da      	str	r2, [r3, #12]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000418 	.word	0x20000418

080017a4 <PID_Compute>:
void PID_Compute(){
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
	float input = pid_input;
 80017aa:	4b94      	ldr	r3, [pc, #592]	; (80019fc <PID_Compute+0x258>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60bb      	str	r3, [r7, #8]
	float error = pid_setpoint - input;
 80017b0:	4b93      	ldr	r3, [pc, #588]	; (8001a00 <PID_Compute+0x25c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff f924 	bl	8000a04 <__aeabi_fsub>
 80017bc:	4603      	mov	r3, r0
 80017be:	607b      	str	r3, [r7, #4]
	float input_d = (input - pid_last_input);
 80017c0:	4b90      	ldr	r3, [pc, #576]	; (8001a04 <PID_Compute+0x260>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	68b8      	ldr	r0, [r7, #8]
 80017c8:	f7ff f91c 	bl	8000a04 <__aeabi_fsub>
 80017cc:	4603      	mov	r3, r0
 80017ce:	603b      	str	r3, [r7, #0]
	float output = 0;
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]

	if(error >= pid_split_1){
 80017d6:	4b8c      	ldr	r3, [pc, #560]	; (8001a08 <PID_Compute+0x264>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f9c8 	bl	8000b70 <__aeabi_i2f>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4619      	mov	r1, r3
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fbc9 	bl	8000f7c <__aeabi_fcmpge>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d074      	beq.n	80018da <PID_Compute+0x136>
		pid_output_sum += pid_ki_1 * error;
 80017f0:	4b86      	ldr	r3, [pc, #536]	; (8001a0c <PID_Compute+0x268>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fa0e 	bl	8000c18 <__aeabi_fmul>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b83      	ldr	r3, [pc, #524]	; (8001a10 <PID_Compute+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	4610      	mov	r0, r2
 8001808:	f7ff f8fe 	bl	8000a08 <__addsf3>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <PID_Compute+0x26c>)
 8001812:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8001814:	4b7f      	ldr	r3, [pc, #508]	; (8001a14 <PID_Compute+0x270>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d110      	bne.n	800183e <PID_Compute+0x9a>
			pid_output_sum -= pid_kp_1 * input_d;
 800181c:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <PID_Compute+0x26c>)
 800181e:	681c      	ldr	r4, [r3, #0]
 8001820:	4b7d      	ldr	r3, [pc, #500]	; (8001a18 <PID_Compute+0x274>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6839      	ldr	r1, [r7, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f9f6 	bl	8000c18 <__aeabi_fmul>
 800182c:	4603      	mov	r3, r0
 800182e:	4619      	mov	r1, r3
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff f8e7 	bl	8000a04 <__aeabi_fsub>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b75      	ldr	r3, [pc, #468]	; (8001a10 <PID_Compute+0x26c>)
 800183c:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 800183e:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <PID_Compute+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4976      	ldr	r1, [pc, #472]	; (8001a1c <PID_Compute+0x278>)
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fba3 	bl	8000f90 <__aeabi_fcmpgt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <PID_Compute+0xb4>
			pid_output_sum = 1000.0f;
 8001850:	4b6f      	ldr	r3, [pc, #444]	; (8001a10 <PID_Compute+0x26c>)
 8001852:	4a72      	ldr	r2, [pc, #456]	; (8001a1c <PID_Compute+0x278>)
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e00b      	b.n	8001870 <PID_Compute+0xcc>
		}else if(pid_output_sum < -1000.0f){
 8001858:	4b6d      	ldr	r3, [pc, #436]	; (8001a10 <PID_Compute+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4970      	ldr	r1, [pc, #448]	; (8001a20 <PID_Compute+0x27c>)
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb78 	bl	8000f54 <__aeabi_fcmplt>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <PID_Compute+0xcc>
			pid_output_sum = -1000.0f;
 800186a:	4b69      	ldr	r3, [pc, #420]	; (8001a10 <PID_Compute+0x26c>)
 800186c:	4a6c      	ldr	r2, [pc, #432]	; (8001a20 <PID_Compute+0x27c>)
 800186e:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8001870:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <PID_Compute+0x270>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d107      	bne.n	8001888 <PID_Compute+0xe4>
			output = pid_kp_1 * error;
 8001878:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <PID_Compute+0x274>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff f9ca 	bl	8000c18 <__aeabi_fmul>
 8001884:	4603      	mov	r3, r0
 8001886:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_1 * input_d;
 8001888:	4b61      	ldr	r3, [pc, #388]	; (8001a10 <PID_Compute+0x26c>)
 800188a:	681c      	ldr	r4, [r3, #0]
 800188c:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <PID_Compute+0x280>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6839      	ldr	r1, [r7, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f9c0 	bl	8000c18 <__aeabi_fmul>
 8001898:	4603      	mov	r3, r0
 800189a:	4619      	mov	r1, r3
 800189c:	4620      	mov	r0, r4
 800189e:	f7ff f8b1 	bl	8000a04 <__aeabi_fsub>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4619      	mov	r1, r3
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7ff f8ae 	bl	8000a08 <__addsf3>
 80018ac:	4603      	mov	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 80018b0:	495a      	ldr	r1, [pc, #360]	; (8001a1c <PID_Compute+0x278>)
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff fb6c 	bl	8000f90 <__aeabi_fcmpgt>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <PID_Compute+0x120>
			output = 1000.0f;
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <PID_Compute+0x278>)
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e12c      	b.n	8001b1e <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 80018c4:	4956      	ldr	r1, [pc, #344]	; (8001a20 <PID_Compute+0x27c>)
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7ff fb44 	bl	8000f54 <__aeabi_fcmplt>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8125 	beq.w	8001b1e <PID_Compute+0x37a>
			output = -1000.0f;
 80018d4:	4b52      	ldr	r3, [pc, #328]	; (8001a20 <PID_Compute+0x27c>)
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e121      	b.n	8001b1e <PID_Compute+0x37a>
		}
	}else if((error < pid_split_1) && (error >= pid_split_2)){
 80018da:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <PID_Compute+0x264>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f946 	bl	8000b70 <__aeabi_i2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fb33 	bl	8000f54 <__aeabi_fcmplt>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80a1 	beq.w	8001a38 <PID_Compute+0x294>
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <PID_Compute+0x284>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f938 	bl	8000b70 <__aeabi_i2f>
 8001900:	4603      	mov	r3, r0
 8001902:	4619      	mov	r1, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fb39 	bl	8000f7c <__aeabi_fcmpge>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8093 	beq.w	8001a38 <PID_Compute+0x294>
		pid_output_sum += pid_ki_2 * error;
 8001912:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <PID_Compute+0x288>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f97d 	bl	8000c18 <__aeabi_fmul>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <PID_Compute+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	4610      	mov	r0, r2
 800192a:	f7ff f86d 	bl	8000a08 <__addsf3>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <PID_Compute+0x26c>)
 8001934:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8001936:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <PID_Compute+0x270>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d110      	bne.n	8001960 <PID_Compute+0x1bc>
			pid_output_sum -= pid_kp_2 * input_d;
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <PID_Compute+0x26c>)
 8001940:	681c      	ldr	r4, [r3, #0]
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <PID_Compute+0x28c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f965 	bl	8000c18 <__aeabi_fmul>
 800194e:	4603      	mov	r3, r0
 8001950:	4619      	mov	r1, r3
 8001952:	4620      	mov	r0, r4
 8001954:	f7ff f856 	bl	8000a04 <__aeabi_fsub>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <PID_Compute+0x26c>)
 800195e:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 8001960:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <PID_Compute+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	492d      	ldr	r1, [pc, #180]	; (8001a1c <PID_Compute+0x278>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fb12 	bl	8000f90 <__aeabi_fcmpgt>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <PID_Compute+0x1d6>
			pid_output_sum = 1000.0f;
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <PID_Compute+0x26c>)
 8001974:	4a29      	ldr	r2, [pc, #164]	; (8001a1c <PID_Compute+0x278>)
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e00b      	b.n	8001992 <PID_Compute+0x1ee>
		}else if(pid_output_sum < -1000.0f){
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <PID_Compute+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4928      	ldr	r1, [pc, #160]	; (8001a20 <PID_Compute+0x27c>)
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fae7 	bl	8000f54 <__aeabi_fcmplt>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <PID_Compute+0x1ee>
			pid_output_sum = -1000.0f;
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <PID_Compute+0x26c>)
 800198e:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <PID_Compute+0x27c>)
 8001990:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <PID_Compute+0x270>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <PID_Compute+0x206>
			output = pid_kp_2 * error;
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <PID_Compute+0x28c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff f939 	bl	8000c18 <__aeabi_fmul>
 80019a6:	4603      	mov	r3, r0
 80019a8:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_2 * input_d;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <PID_Compute+0x26c>)
 80019ac:	681c      	ldr	r4, [r3, #0]
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <PID_Compute+0x290>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6839      	ldr	r1, [r7, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f92f 	bl	8000c18 <__aeabi_fmul>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4619      	mov	r1, r3
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff f820 	bl	8000a04 <__aeabi_fsub>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff f81d 	bl	8000a08 <__addsf3>
 80019ce:	4603      	mov	r3, r0
 80019d0:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 80019d2:	4912      	ldr	r1, [pc, #72]	; (8001a1c <PID_Compute+0x278>)
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff fadb 	bl	8000f90 <__aeabi_fcmpgt>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <PID_Compute+0x242>
			output = 1000.0f;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <PID_Compute+0x278>)
 80019e2:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 80019e4:	e09b      	b.n	8001b1e <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 80019e6:	490e      	ldr	r1, [pc, #56]	; (8001a20 <PID_Compute+0x27c>)
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff fab3 	bl	8000f54 <__aeabi_fcmplt>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d100      	bne.n	80019f6 <PID_Compute+0x252>
		if(output > 1000.0f){
 80019f4:	e093      	b.n	8001b1e <PID_Compute+0x37a>
			output = -1000.0f;
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <PID_Compute+0x27c>)
 80019f8:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 80019fa:	e090      	b.n	8001b1e <PID_Compute+0x37a>
 80019fc:	200001dc 	.word	0x200001dc
 8001a00:	20000024 	.word	0x20000024
 8001a04:	200001e4 	.word	0x200001e4
 8001a08:	2000001c 	.word	0x2000001c
 8001a0c:	200001cc 	.word	0x200001cc
 8001a10:	200001e8 	.word	0x200001e8
 8001a14:	20000020 	.word	0x20000020
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	447a0000 	.word	0x447a0000
 8001a20:	c47a0000 	.word	0xc47a0000
 8001a24:	20000008 	.word	0x20000008
 8001a28:	2000001e 	.word	0x2000001e
 8001a2c:	200001d0 	.word	0x200001d0
 8001a30:	2000000c 	.word	0x2000000c
 8001a34:	20000010 	.word	0x20000010
		}
	}else{
		pid_output_sum += pid_ki_3 * error;
 8001a38:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <PID_Compute+0x390>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f8ea 	bl	8000c18 <__aeabi_fmul>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <PID_Compute+0x394>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f7fe ffda 	bl	8000a08 <__addsf3>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <PID_Compute+0x394>)
 8001a5a:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8001a5c:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <PID_Compute+0x398>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d110      	bne.n	8001a86 <PID_Compute+0x2e2>
			pid_output_sum -= pid_kp_3 * input_d;
 8001a64:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <PID_Compute+0x394>)
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <PID_Compute+0x39c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6839      	ldr	r1, [r7, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f8d2 	bl	8000c18 <__aeabi_fmul>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4619      	mov	r1, r3
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7fe ffc3 	bl	8000a04 <__aeabi_fsub>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <PID_Compute+0x394>)
 8001a84:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <PID_Compute+0x394>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	492e      	ldr	r1, [pc, #184]	; (8001b44 <PID_Compute+0x3a0>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fa7f 	bl	8000f90 <__aeabi_fcmpgt>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <PID_Compute+0x2fc>
			pid_output_sum = 1000.0f;
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <PID_Compute+0x394>)
 8001a9a:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <PID_Compute+0x3a0>)
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e00b      	b.n	8001ab8 <PID_Compute+0x314>
		}else if(pid_output_sum < -1000.0f){
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <PID_Compute+0x394>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4928      	ldr	r1, [pc, #160]	; (8001b48 <PID_Compute+0x3a4>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fa54 	bl	8000f54 <__aeabi_fcmplt>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <PID_Compute+0x314>
			pid_output_sum = -1000.0f;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <PID_Compute+0x394>)
 8001ab4:	4a24      	ldr	r2, [pc, #144]	; (8001b48 <PID_Compute+0x3a4>)
 8001ab6:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8001ab8:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <PID_Compute+0x398>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d107      	bne.n	8001ad0 <PID_Compute+0x32c>
			output = pid_kp_3 * error;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <PID_Compute+0x39c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff f8a6 	bl	8000c18 <__aeabi_fmul>
 8001acc:	4603      	mov	r3, r0
 8001ace:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_3 * input_d;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <PID_Compute+0x394>)
 8001ad2:	681c      	ldr	r4, [r3, #0]
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <PID_Compute+0x3a8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6839      	ldr	r1, [r7, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f89c 	bl	8000c18 <__aeabi_fmul>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f7fe ff8d 	bl	8000a04 <__aeabi_fsub>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4619      	mov	r1, r3
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f7fe ff8a 	bl	8000a08 <__addsf3>
 8001af4:	4603      	mov	r3, r0
 8001af6:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001af8:	4912      	ldr	r1, [pc, #72]	; (8001b44 <PID_Compute+0x3a0>)
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff fa48 	bl	8000f90 <__aeabi_fcmpgt>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <PID_Compute+0x368>
			output = 1000.0f;
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <PID_Compute+0x3a0>)
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e008      	b.n	8001b1e <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001b0c:	490e      	ldr	r1, [pc, #56]	; (8001b48 <PID_Compute+0x3a4>)
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff fa20 	bl	8000f54 <__aeabi_fcmplt>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <PID_Compute+0x37a>
			output = -1000.0f;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <PID_Compute+0x3a4>)
 8001b1c:	60fb      	str	r3, [r7, #12]
		}
	}

	pid_output = output;
 8001b1e:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <PID_Compute+0x3ac>)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6013      	str	r3, [r2, #0]
	pid_last_input = input;
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <PID_Compute+0x3b0>)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	6013      	str	r3, [r2, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200001d4 	.word	0x200001d4
 8001b38:	200001e8 	.word	0x200001e8
 8001b3c:	20000020 	.word	0x20000020
 8001b40:	20000014 	.word	0x20000014
 8001b44:	447a0000 	.word	0x447a0000
 8001b48:	c47a0000 	.word	0xc47a0000
 8001b4c:	20000018 	.word	0x20000018
 8001b50:	200001e0 	.word	0x200001e0
 8001b54:	200001e4 	.word	0x200001e4

08001b58 <PID_Start>:
void PID_Start(){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	pid_last_input = pid_input;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <PID_Start+0x30>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <PID_Start+0x34>)
 8001b62:	6013      	str	r3, [r2, #0]
	pid_output_sum = 0;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <PID_Start+0x38>)
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
    PID_Set_Sampling_Time(pid_sampling_time);
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <PID_Start+0x3c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fdfc 	bl	8001770 <PID_Set_Sampling_Time>
	PID_Timer_Restart();
 8001b78:	f7ff fdc8 	bl	800170c <PID_Timer_Restart>
	pid_running = 1;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <PID_Start+0x40>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200001dc 	.word	0x200001dc
 8001b8c:	200001e4 	.word	0x200001e4
 8001b90:	200001e8 	.word	0x200001e8
 8001b94:	20000002 	.word	0x20000002
 8001b98:	200001d8 	.word	0x200001d8

08001b9c <PID_Stop>:
void PID_Stop(){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	PID_Timer_Stop();
 8001ba0:	f7ff fdaa 	bl	80016f8 <PID_Timer_Stop>
	PID_Ready(0);
 8001ba4:	f04f 0000 	mov.w	r0, #0
 8001ba8:	f7ff fa6e 	bl	8001088 <PID_Ready>
	pid_running = 0;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <PID_Stop+0x1c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200001d8 	.word	0x200001d8

08001bbc <Potentiometer_ADC_Interrupt>:
uint32_t potentiometer_adctmp = 0;
uint16_t potentiometer_adccnt = 0;
uint8_t potentiometer_init_cplt = 0;
float potentiometer_position = 0;

void Potentiometer_ADC_Interrupt(){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	potentiometer_adctmp += HAL_ADC_GetValue(&hadc1);
 8001bc0:	4816      	ldr	r0, [pc, #88]	; (8001c1c <Potentiometer_ADC_Interrupt+0x60>)
 8001bc2:	f001 fe4d 	bl	8003860 <HAL_ADC_GetValue>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <Potentiometer_ADC_Interrupt+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <Potentiometer_ADC_Interrupt+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]
	potentiometer_adccnt++;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <Potentiometer_ADC_Interrupt+0x68>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <Potentiometer_ADC_Interrupt+0x68>)
 8001bdc:	801a      	strh	r2, [r3, #0]
	if(potentiometer_adccnt == POTENTIOMETER_SAMPLE_CNT){
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <Potentiometer_ADC_Interrupt+0x68>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d115      	bne.n	8001c12 <Potentiometer_ADC_Interrupt+0x56>
		potentiometer_position = (float)potentiometer_adctmp/POTENTIOMETER_SAMPLE_CNT;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <Potentiometer_ADC_Interrupt+0x64>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe ffbc 	bl	8000b68 <__aeabi_ui2f>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	490d      	ldr	r1, [pc, #52]	; (8001c28 <Potentiometer_ADC_Interrupt+0x6c>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f8c3 	bl	8000d80 <__aeabi_fdiv>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <Potentiometer_ADC_Interrupt+0x70>)
 8001c00:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 8001c02:	f7ff f9f5 	bl	8000ff0 <Potentiometer_Ready>
		potentiometer_adccnt = 0;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <Potentiometer_ADC_Interrupt+0x68>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	801a      	strh	r2, [r3, #0]
		potentiometer_adctmp = 0;
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <Potentiometer_ADC_Interrupt+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
	}
	potentiometer_init_cplt = 1;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <Potentiometer_ADC_Interrupt+0x74>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000398 	.word	0x20000398
 8001c20:	200001f0 	.word	0x200001f0
 8001c24:	200001f4 	.word	0x200001f4
 8001c28:	42c80000 	.word	0x42c80000
 8001c2c:	200001f8 	.word	0x200001f8
 8001c30:	200001f6 	.word	0x200001f6

08001c34 <Potentiometer_Init>:

void Potentiometer_Init(){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001c38:	bf00      	nop
 8001c3a:	4808      	ldr	r0, [pc, #32]	; (8001c5c <Potentiometer_Init+0x28>)
 8001c3c:	f002 f87c 	bl	8003d38 <HAL_ADCEx_Calibration_Start>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f9      	bne.n	8001c3a <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <Potentiometer_Init+0x28>)
 8001c48:	f001 fd54 	bl	80036f4 <HAL_ADC_Start_IT>
	while(!potentiometer_init_cplt);
 8001c4c:	bf00      	nop
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <Potentiometer_Init+0x2c>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0fb      	beq.n	8001c4e <Potentiometer_Init+0x1a>
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000398 	.word	0x20000398
 8001c60:	200001f6 	.word	0x200001f6

08001c64 <Settings_Read>:
extern uint16_t pid_split_2;
extern uint8_t pid_sampling_time;

uint8_t settings[SETTINGS_TOTAL_LENGTH];

void Settings_Read(){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
	//Read
	Flash_Read(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 8001c6a:	2240      	movs	r2, #64	; 0x40
 8001c6c:	49a1      	ldr	r1, [pc, #644]	; (8001ef4 <Settings_Read+0x290>)
 8001c6e:	48a2      	ldr	r0, [pc, #648]	; (8001ef8 <Settings_Read+0x294>)
 8001c70:	f7ff fabc 	bl	80011ec <Flash_Read>
	//Get CRC
	uint32_t crc = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&crc, (uint32_t)&settings[SETTINGS_TOTAL_LENGTH - 4]);
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4aa0      	ldr	r2, [pc, #640]	; (8001efc <Settings_Read+0x298>)
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fb70 	bl	8001364 <General_Copy_32_Bit>
	//If CRC is correct
	if(HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1) == crc){
 8001c84:	220f      	movs	r2, #15
 8001c86:	499c      	ldr	r1, [pc, #624]	; (8001ef8 <Settings_Read+0x294>)
 8001c88:	489d      	ldr	r0, [pc, #628]	; (8001f00 <Settings_Read+0x29c>)
 8001c8a:	f002 fa34 	bl	80040f6 <HAL_CRC_Calculate>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	f040 823d 	bne.w	8002112 <Settings_Read+0x4ae>
		//Parse
		General_Copy_16_Bit((uint32_t)&potentiometer_min, (uint32_t)&settings[0]);
 8001c98:	4b9a      	ldr	r3, [pc, #616]	; (8001f04 <Settings_Read+0x2a0>)
 8001c9a:	4a97      	ldr	r2, [pc, #604]	; (8001ef8 <Settings_Read+0x294>)
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fb7d 	bl	800139e <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&potentiometer_max, (uint32_t)&settings[2]);
 8001ca4:	4b98      	ldr	r3, [pc, #608]	; (8001f08 <Settings_Read+0x2a4>)
 8001ca6:	4a99      	ldr	r2, [pc, #612]	; (8001f0c <Settings_Read+0x2a8>)
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fb77 	bl	800139e <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&motor_max_power, (uint32_t)&settings[4]);
 8001cb0:	4b97      	ldr	r3, [pc, #604]	; (8001f10 <Settings_Read+0x2ac>)
 8001cb2:	4a98      	ldr	r2, [pc, #608]	; (8001f14 <Settings_Read+0x2b0>)
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fb71 	bl	800139e <General_Copy_16_Bit>
		motor_invert = settings[6];
 8001cbc:	4b8e      	ldr	r3, [pc, #568]	; (8001ef8 <Settings_Read+0x294>)
 8001cbe:	799a      	ldrb	r2, [r3, #6]
 8001cc0:	4b95      	ldr	r3, [pc, #596]	; (8001f18 <Settings_Read+0x2b4>)
 8001cc2:	701a      	strb	r2, [r3, #0]
		signal_ignore = settings[7];
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ef8 <Settings_Read+0x294>)
 8001cc6:	79da      	ldrb	r2, [r3, #7]
 8001cc8:	4b94      	ldr	r3, [pc, #592]	; (8001f1c <Settings_Read+0x2b8>)
 8001cca:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&settings[8]);
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <Settings_Read+0x2bc>)
 8001cce:	4a95      	ldr	r2, [pc, #596]	; (8001f24 <Settings_Read+0x2c0>)
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fb46 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&settings[12]);
 8001cd8:	4b93      	ldr	r3, [pc, #588]	; (8001f28 <Settings_Read+0x2c4>)
 8001cda:	4a94      	ldr	r2, [pc, #592]	; (8001f2c <Settings_Read+0x2c8>)
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fb40 	bl	8001364 <General_Copy_32_Bit>
		led_mode = settings[16];
 8001ce4:	4b84      	ldr	r3, [pc, #528]	; (8001ef8 <Settings_Read+0x294>)
 8001ce6:	7c1a      	ldrb	r2, [r3, #16]
 8001ce8:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <Settings_Read+0x2cc>)
 8001cea:	701a      	strb	r2, [r3, #0]
		pid_on = settings[17];
 8001cec:	4b82      	ldr	r3, [pc, #520]	; (8001ef8 <Settings_Read+0x294>)
 8001cee:	7c5a      	ldrb	r2, [r3, #17]
 8001cf0:	4b90      	ldr	r3, [pc, #576]	; (8001f34 <Settings_Read+0x2d0>)
 8001cf2:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&settings[18]);
 8001cf4:	4b90      	ldr	r3, [pc, #576]	; (8001f38 <Settings_Read+0x2d4>)
 8001cf6:	4a91      	ldr	r2, [pc, #580]	; (8001f3c <Settings_Read+0x2d8>)
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fb32 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&settings[22]);
 8001d00:	4b8f      	ldr	r3, [pc, #572]	; (8001f40 <Settings_Read+0x2dc>)
 8001d02:	4a90      	ldr	r2, [pc, #576]	; (8001f44 <Settings_Read+0x2e0>)
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fb2c 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&settings[26]);
 8001d0c:	4b8e      	ldr	r3, [pc, #568]	; (8001f48 <Settings_Read+0x2e4>)
 8001d0e:	4a8f      	ldr	r2, [pc, #572]	; (8001f4c <Settings_Read+0x2e8>)
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fb26 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&settings[30]);
 8001d18:	4b8d      	ldr	r3, [pc, #564]	; (8001f50 <Settings_Read+0x2ec>)
 8001d1a:	4a8e      	ldr	r2, [pc, #568]	; (8001f54 <Settings_Read+0x2f0>)
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fb20 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&settings[34]);
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <Settings_Read+0x2f4>)
 8001d26:	4a8d      	ldr	r2, [pc, #564]	; (8001f5c <Settings_Read+0x2f8>)
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fb1a 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&settings[38]);
 8001d30:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <Settings_Read+0x2fc>)
 8001d32:	4a8c      	ldr	r2, [pc, #560]	; (8001f64 <Settings_Read+0x300>)
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fb14 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&settings[42]);
 8001d3c:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <Settings_Read+0x304>)
 8001d3e:	4a8b      	ldr	r2, [pc, #556]	; (8001f6c <Settings_Read+0x308>)
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fb0e 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&settings[46]);
 8001d48:	4b89      	ldr	r3, [pc, #548]	; (8001f70 <Settings_Read+0x30c>)
 8001d4a:	4a8a      	ldr	r2, [pc, #552]	; (8001f74 <Settings_Read+0x310>)
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fb08 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&settings[50]);
 8001d54:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <Settings_Read+0x314>)
 8001d56:	4a89      	ldr	r2, [pc, #548]	; (8001f7c <Settings_Read+0x318>)
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fb02 	bl	8001364 <General_Copy_32_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&settings[54]);
 8001d60:	4b87      	ldr	r3, [pc, #540]	; (8001f80 <Settings_Read+0x31c>)
 8001d62:	4a88      	ldr	r2, [pc, #544]	; (8001f84 <Settings_Read+0x320>)
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fb19 	bl	800139e <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&settings[56]);
 8001d6c:	4b86      	ldr	r3, [pc, #536]	; (8001f88 <Settings_Read+0x324>)
 8001d6e:	4a87      	ldr	r2, [pc, #540]	; (8001f8c <Settings_Read+0x328>)
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fb13 	bl	800139e <General_Copy_16_Bit>
		pid_sampling_time = settings[58];
 8001d78:	4b5f      	ldr	r3, [pc, #380]	; (8001ef8 <Settings_Read+0x294>)
 8001d7a:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8001d7e:	4b84      	ldr	r3, [pc, #528]	; (8001f90 <Settings_Read+0x32c>)
 8001d80:	701a      	strb	r2, [r3, #0]

		//Verify
		if((potentiometer_min < SETTINGS_DEF_POTENTIOMETER_MIN_MIN)||(potentiometer_min > SETTINGS_DEF_POTENTIOMETER_MIN_MAX)){
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <Settings_Read+0x2a0>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8001d8a:	d302      	bcc.n	8001d92 <Settings_Read+0x12e>
			potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 8001d8c:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <Settings_Read+0x2a0>)
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	801a      	strh	r2, [r3, #0]
		}
		if((potentiometer_max < SETTINGS_DEF_POTENTIOMETER_MAX_MIN)||(potentiometer_max > SETTINGS_DEF_POTENTIOMETER_MAX_MAX)){
 8001d92:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <Settings_Read+0x2a4>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	2b7f      	cmp	r3, #127	; 0x7f
 8001d98:	d904      	bls.n	8001da4 <Settings_Read+0x140>
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <Settings_Read+0x2a4>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da2:	d303      	bcc.n	8001dac <Settings_Read+0x148>
			potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001da4:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <Settings_Read+0x2a4>)
 8001da6:	f640 727f 	movw	r2, #3967	; 0xf7f
 8001daa:	801a      	strh	r2, [r3, #0]
		}
		if((motor_max_power < SETTINGS_DEF_MOTOR_MAX_POWER_MIN)||(motor_max_power > SETTINGS_DEF_MOTOR_MAX_POWER_MAX)){
 8001dac:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <Settings_Read+0x2ac>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001db4:	d903      	bls.n	8001dbe <Settings_Read+0x15a>
			motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001db6:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <Settings_Read+0x2ac>)
 8001db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dbc:	801a      	strh	r2, [r3, #0]
		}
		if((motor_invert != MOTOR_NORMAL) && (motor_invert != MOTOR_INVERT)){
 8001dbe:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <Settings_Read+0x2b4>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <Settings_Read+0x170>
 8001dc6:	4b54      	ldr	r3, [pc, #336]	; (8001f18 <Settings_Read+0x2b4>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d002      	beq.n	8001dd4 <Settings_Read+0x170>
			motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8001dce:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <Settings_Read+0x2b4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
		}
		if((signal_ignore != GENERAL_TRUE) && (signal_ignore != GENERAL_FALSE)){
 8001dd4:	4b51      	ldr	r3, [pc, #324]	; (8001f1c <Settings_Read+0x2b8>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d006      	beq.n	8001dea <Settings_Read+0x186>
 8001ddc:	4b4f      	ldr	r3, [pc, #316]	; (8001f1c <Settings_Read+0x2b8>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <Settings_Read+0x186>
			signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 8001de4:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <Settings_Read+0x2b8>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
		}
		if((signal_length < SETTINGS_DEF_SIGNAL_LENGTH_MIN)||(signal_length > SETTINGS_DEF_SIGNAL_LENGTH_MAX)){
 8001dea:	4b4d      	ldr	r3, [pc, #308]	; (8001f20 <Settings_Read+0x2bc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f8ae 	bl	8000f54 <__aeabi_fcmplt>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d108      	bne.n	8001e10 <Settings_Read+0x1ac>
 8001dfe:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <Settings_Read+0x2bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4964      	ldr	r1, [pc, #400]	; (8001f94 <Settings_Read+0x330>)
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff f8c3 	bl	8000f90 <__aeabi_fcmpgt>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <Settings_Read+0x1b4>
			signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 8001e10:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <Settings_Read+0x2bc>)
 8001e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e16:	601a      	str	r2, [r3, #0]
		}
		if((signal_timeout < SETTINGS_DEF_SIGNAL_TIMEOUT_MIN)||(signal_timeout > SETTINGS_DEF_SIGNAL_TIMEOUT_MAX)){
 8001e18:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <Settings_Read+0x2c4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d903      	bls.n	8001e28 <Settings_Read+0x1c4>
 8001e20:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <Settings_Read+0x2c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2bc8      	cmp	r3, #200	; 0xc8
 8001e26:	d902      	bls.n	8001e2e <Settings_Read+0x1ca>
			signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8001e28:	4b3f      	ldr	r3, [pc, #252]	; (8001f28 <Settings_Read+0x2c4>)
 8001e2a:	2219      	movs	r2, #25
 8001e2c:	601a      	str	r2, [r3, #0]
		}
		if((led_mode != LED_MODE_OFF) && (led_mode != LED_MODE_POWER) && (led_mode != LED_MODE_SIGNAL) && (led_mode != LED_MODE_POSITION_CHANGE)){
 8001e2e:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <Settings_Read+0x2cc>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00e      	beq.n	8001e54 <Settings_Read+0x1f0>
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <Settings_Read+0x2cc>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d00a      	beq.n	8001e54 <Settings_Read+0x1f0>
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <Settings_Read+0x2cc>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d006      	beq.n	8001e54 <Settings_Read+0x1f0>
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <Settings_Read+0x2cc>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d002      	beq.n	8001e54 <Settings_Read+0x1f0>
			led_mode = SETTINGS_DEF_LED_MODE_DEF;
 8001e4e:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <Settings_Read+0x2cc>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
		}
		if((pid_on != PID_ON_M) && (pid_on != PID_ON_E)){
 8001e54:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <Settings_Read+0x2d0>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <Settings_Read+0x206>
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <Settings_Read+0x2d0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d002      	beq.n	8001e6a <Settings_Read+0x206>
			pid_on = SETTINGS_DEF_PID_ON_DEF;
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <Settings_Read+0x2d0>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
		}
		if((pid_kp_1 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_1 > SETTINGS_DEF_PID_KP_MAX)){
 8001e6a:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <Settings_Read+0x2d4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f04f 0100 	mov.w	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f86e 	bl	8000f54 <__aeabi_fcmplt>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d108      	bne.n	8001e90 <Settings_Read+0x22c>
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <Settings_Read+0x2d4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4945      	ldr	r1, [pc, #276]	; (8001f98 <Settings_Read+0x334>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f883 	bl	8000f90 <__aeabi_fcmpgt>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <Settings_Read+0x234>
			pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 8001e90:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <Settings_Read+0x2d4>)
 8001e92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e96:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_1 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_1 > SETTINGS_DEF_PID_KI_MAX)){
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <Settings_Read+0x2dc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f857 	bl	8000f54 <__aeabi_fcmplt>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d108      	bne.n	8001ebe <Settings_Read+0x25a>
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <Settings_Read+0x2dc>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4939      	ldr	r1, [pc, #228]	; (8001f98 <Settings_Read+0x334>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f86c 	bl	8000f90 <__aeabi_fcmpgt>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <Settings_Read+0x262>
			pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <Settings_Read+0x2dc>)
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_1 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_1 > SETTINGS_DEF_PID_KD_MAX)){
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <Settings_Read+0x2e4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f04f 0100 	mov.w	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f840 	bl	8000f54 <__aeabi_fcmplt>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d108      	bne.n	8001eec <Settings_Read+0x288>
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <Settings_Read+0x2e4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	492e      	ldr	r1, [pc, #184]	; (8001f98 <Settings_Read+0x334>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f855 	bl	8000f90 <__aeabi_fcmpgt>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d059      	beq.n	8001fa0 <Settings_Read+0x33c>
			pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <Settings_Read+0x2e4>)
 8001eee:	4a2b      	ldr	r2, [pc, #172]	; (8001f9c <Settings_Read+0x338>)
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e055      	b.n	8001fa0 <Settings_Read+0x33c>
 8001ef4:	0800fc00 	.word	0x0800fc00
 8001ef8:	200001fc 	.word	0x200001fc
 8001efc:	20000238 	.word	0x20000238
 8001f00:	200003c8 	.word	0x200003c8
 8001f04:	200001ec 	.word	0x200001ec
 8001f08:	200001ee 	.word	0x200001ee
 8001f0c:	200001fe 	.word	0x200001fe
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000200 	.word	0x20000200
 8001f18:	200001c7 	.word	0x200001c7
 8001f1c:	2000023c 	.word	0x2000023c
 8001f20:	20000240 	.word	0x20000240
 8001f24:	20000204 	.word	0x20000204
 8001f28:	20000244 	.word	0x20000244
 8001f2c:	20000208 	.word	0x20000208
 8001f30:	200001c4 	.word	0x200001c4
 8001f34:	20000020 	.word	0x20000020
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	2000020e 	.word	0x2000020e
 8001f40:	200001cc 	.word	0x200001cc
 8001f44:	20000212 	.word	0x20000212
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	20000216 	.word	0x20000216
 8001f50:	2000000c 	.word	0x2000000c
 8001f54:	2000021a 	.word	0x2000021a
 8001f58:	200001d0 	.word	0x200001d0
 8001f5c:	2000021e 	.word	0x2000021e
 8001f60:	20000010 	.word	0x20000010
 8001f64:	20000222 	.word	0x20000222
 8001f68:	20000014 	.word	0x20000014
 8001f6c:	20000226 	.word	0x20000226
 8001f70:	200001d4 	.word	0x200001d4
 8001f74:	2000022a 	.word	0x2000022a
 8001f78:	20000018 	.word	0x20000018
 8001f7c:	2000022e 	.word	0x2000022e
 8001f80:	2000001c 	.word	0x2000001c
 8001f84:	20000232 	.word	0x20000232
 8001f88:	2000001e 	.word	0x2000001e
 8001f8c:	20000234 	.word	0x20000234
 8001f90:	20000002 	.word	0x20000002
 8001f94:	40a00000 	.word	0x40a00000
 8001f98:	42c80000 	.word	0x42c80000
 8001f9c:	40400000 	.word	0x40400000
		}
		if((pid_kp_2 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_2 > SETTINGS_DEF_PID_KP_MAX)){
 8001fa0:	4b83      	ldr	r3, [pc, #524]	; (80021b0 <Settings_Read+0x54c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe ffd3 	bl	8000f54 <__aeabi_fcmplt>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d108      	bne.n	8001fc6 <Settings_Read+0x362>
 8001fb4:	4b7e      	ldr	r3, [pc, #504]	; (80021b0 <Settings_Read+0x54c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	497e      	ldr	r1, [pc, #504]	; (80021b4 <Settings_Read+0x550>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe ffe8 	bl	8000f90 <__aeabi_fcmpgt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <Settings_Read+0x36a>
			pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 8001fc6:	4b7a      	ldr	r3, [pc, #488]	; (80021b0 <Settings_Read+0x54c>)
 8001fc8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fcc:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_2 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_2 > SETTINGS_DEF_PID_KI_MAX)){
 8001fce:	4b7a      	ldr	r3, [pc, #488]	; (80021b8 <Settings_Read+0x554>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe ffbc 	bl	8000f54 <__aeabi_fcmplt>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d108      	bne.n	8001ff4 <Settings_Read+0x390>
 8001fe2:	4b75      	ldr	r3, [pc, #468]	; (80021b8 <Settings_Read+0x554>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4973      	ldr	r1, [pc, #460]	; (80021b4 <Settings_Read+0x550>)
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe ffd1 	bl	8000f90 <__aeabi_fcmpgt>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <Settings_Read+0x398>
			pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 8001ff4:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <Settings_Read+0x554>)
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_2 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_2 > SETTINGS_DEF_PID_KD_MAX)){
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <Settings_Read+0x558>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f04f 0100 	mov.w	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe ffa5 	bl	8000f54 <__aeabi_fcmplt>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d108      	bne.n	8002022 <Settings_Read+0x3be>
 8002010:	4b6a      	ldr	r3, [pc, #424]	; (80021bc <Settings_Read+0x558>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4967      	ldr	r1, [pc, #412]	; (80021b4 <Settings_Read+0x550>)
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe ffba 	bl	8000f90 <__aeabi_fcmpgt>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <Settings_Read+0x3c4>
			pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 8002022:	4b66      	ldr	r3, [pc, #408]	; (80021bc <Settings_Read+0x558>)
 8002024:	4a66      	ldr	r2, [pc, #408]	; (80021c0 <Settings_Read+0x55c>)
 8002026:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_3 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_3 > SETTINGS_DEF_PID_KP_MAX)){
 8002028:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <Settings_Read+0x560>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f04f 0100 	mov.w	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe ff8f 	bl	8000f54 <__aeabi_fcmplt>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d108      	bne.n	800204e <Settings_Read+0x3ea>
 800203c:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <Settings_Read+0x560>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	495c      	ldr	r1, [pc, #368]	; (80021b4 <Settings_Read+0x550>)
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe ffa4 	bl	8000f90 <__aeabi_fcmpgt>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <Settings_Read+0x3f2>
			pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 800204e:	4b5d      	ldr	r3, [pc, #372]	; (80021c4 <Settings_Read+0x560>)
 8002050:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002054:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_3 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_3 > SETTINGS_DEF_PID_KI_MAX)){
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <Settings_Read+0x564>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe ff78 	bl	8000f54 <__aeabi_fcmplt>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d108      	bne.n	800207c <Settings_Read+0x418>
 800206a:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <Settings_Read+0x564>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4951      	ldr	r1, [pc, #324]	; (80021b4 <Settings_Read+0x550>)
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe ff8d 	bl	8000f90 <__aeabi_fcmpgt>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <Settings_Read+0x420>
			pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 800207c:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <Settings_Read+0x564>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_3 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_3 > SETTINGS_DEF_PID_KD_MAX)){
 8002084:	4b51      	ldr	r3, [pc, #324]	; (80021cc <Settings_Read+0x568>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f04f 0100 	mov.w	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe ff61 	bl	8000f54 <__aeabi_fcmplt>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d108      	bne.n	80020aa <Settings_Read+0x446>
 8002098:	4b4c      	ldr	r3, [pc, #304]	; (80021cc <Settings_Read+0x568>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4945      	ldr	r1, [pc, #276]	; (80021b4 <Settings_Read+0x550>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe ff76 	bl	8000f90 <__aeabi_fcmpgt>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <Settings_Read+0x44c>
			pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 80020aa:	4b48      	ldr	r3, [pc, #288]	; (80021cc <Settings_Read+0x568>)
 80020ac:	4a44      	ldr	r2, [pc, #272]	; (80021c0 <Settings_Read+0x55c>)
 80020ae:	601a      	str	r2, [r3, #0]
		}
		if((pid_split_1 < SETTINGS_DEF_PID_SPLIT_1_MIN)||(pid_split_1 > SETTINGS_DEF_PID_SPLIT_1_MAX)){
 80020b0:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <Settings_Read+0x56c>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b8:	d303      	bcc.n	80020c2 <Settings_Read+0x45e>
			pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 80020ba:	4b45      	ldr	r3, [pc, #276]	; (80021d0 <Settings_Read+0x56c>)
 80020bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020c0:	801a      	strh	r2, [r3, #0]
		}
		if((pid_split_2 < SETTINGS_DEF_PID_SPLIT_2_MIN)||(pid_split_2 > SETTINGS_DEF_PID_SPLIT_2_MAX)){
 80020c2:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <Settings_Read+0x570>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ca:	d303      	bcc.n	80020d4 <Settings_Read+0x470>
			pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 80020cc:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <Settings_Read+0x570>)
 80020ce:	f640 32fc 	movw	r2, #3068	; 0xbfc
 80020d2:	801a      	strh	r2, [r3, #0]
		}
		if((pid_sampling_time < SETTINGS_DEF_PID_SAMPLING_TIME_MIN)||(pid_sampling_time > SETTINGS_DEF_PID_SAMPLING_TIME_MAX)){
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <Settings_Read+0x574>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fd49 	bl	8000b70 <__aeabi_i2f>
 80020de:	4603      	mov	r3, r0
 80020e0:	493e      	ldr	r1, [pc, #248]	; (80021dc <Settings_Read+0x578>)
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe ff36 	bl	8000f54 <__aeabi_fcmplt>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10d      	bne.n	800210a <Settings_Read+0x4a6>
 80020ee:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <Settings_Read+0x574>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fd3c 	bl	8000b70 <__aeabi_i2f>
 80020f8:	4603      	mov	r3, r0
 80020fa:	492e      	ldr	r1, [pc, #184]	; (80021b4 <Settings_Read+0x550>)
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe ff47 	bl	8000f90 <__aeabi_fcmpgt>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d100      	bne.n	800210a <Settings_Read+0x4a6>
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
	}
}
 8002108:	e04d      	b.n	80021a6 <Settings_Read+0x542>
			pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 800210a:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <Settings_Read+0x574>)
 800210c:	2205      	movs	r2, #5
 800210e:	701a      	strb	r2, [r3, #0]
}
 8002110:	e049      	b.n	80021a6 <Settings_Read+0x542>
		potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <Settings_Read+0x57c>)
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	801a      	strh	r2, [r3, #0]
		potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8002118:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <Settings_Read+0x580>)
 800211a:	f640 727f 	movw	r2, #3967	; 0xf7f
 800211e:	801a      	strh	r2, [r3, #0]
		motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <Settings_Read+0x584>)
 8002122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002126:	801a      	strh	r2, [r3, #0]
		motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8002128:	4b30      	ldr	r3, [pc, #192]	; (80021ec <Settings_Read+0x588>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
		signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 800212e:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <Settings_Read+0x58c>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
		signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <Settings_Read+0x590>)
 8002136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800213a:	601a      	str	r2, [r3, #0]
		signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <Settings_Read+0x594>)
 800213e:	2219      	movs	r2, #25
 8002140:	601a      	str	r2, [r3, #0]
		led_mode = SETTINGS_DEF_LED_MODE_DEF;
 8002142:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <Settings_Read+0x598>)
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
		pid_on = SETTINGS_DEF_PID_ON_DEF;
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <Settings_Read+0x59c>)
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
		pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <Settings_Read+0x5a0>)
 8002150:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002154:	601a      	str	r2, [r3, #0]
		pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 8002156:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <Settings_Read+0x5a4>)
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
		pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 800215e:	4b2b      	ldr	r3, [pc, #172]	; (800220c <Settings_Read+0x5a8>)
 8002160:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <Settings_Read+0x55c>)
 8002162:	601a      	str	r2, [r3, #0]
		pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <Settings_Read+0x54c>)
 8002166:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800216a:	601a      	str	r2, [r3, #0]
		pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <Settings_Read+0x554>)
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
		pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <Settings_Read+0x558>)
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <Settings_Read+0x55c>)
 8002178:	601a      	str	r2, [r3, #0]
		pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <Settings_Read+0x560>)
 800217c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002180:	601a      	str	r2, [r3, #0]
		pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <Settings_Read+0x564>)
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <Settings_Read+0x568>)
 800218c:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <Settings_Read+0x55c>)
 800218e:	601a      	str	r2, [r3, #0]
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <Settings_Read+0x56c>)
 8002192:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002196:	801a      	strh	r2, [r3, #0]
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <Settings_Read+0x570>)
 800219a:	f640 32fc 	movw	r2, #3068	; 0xbfc
 800219e:	801a      	strh	r2, [r3, #0]
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <Settings_Read+0x574>)
 80021a2:	2205      	movs	r2, #5
 80021a4:	701a      	strb	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000000c 	.word	0x2000000c
 80021b4:	42c80000 	.word	0x42c80000
 80021b8:	200001d0 	.word	0x200001d0
 80021bc:	20000010 	.word	0x20000010
 80021c0:	40400000 	.word	0x40400000
 80021c4:	20000014 	.word	0x20000014
 80021c8:	200001d4 	.word	0x200001d4
 80021cc:	20000018 	.word	0x20000018
 80021d0:	2000001c 	.word	0x2000001c
 80021d4:	2000001e 	.word	0x2000001e
 80021d8:	20000002 	.word	0x20000002
 80021dc:	40a00000 	.word	0x40a00000
 80021e0:	200001ec 	.word	0x200001ec
 80021e4:	200001ee 	.word	0x200001ee
 80021e8:	20000000 	.word	0x20000000
 80021ec:	200001c7 	.word	0x200001c7
 80021f0:	2000023c 	.word	0x2000023c
 80021f4:	20000240 	.word	0x20000240
 80021f8:	20000244 	.word	0x20000244
 80021fc:	200001c4 	.word	0x200001c4
 8002200:	20000020 	.word	0x20000020
 8002204:	20000004 	.word	0x20000004
 8002208:	200001cc 	.word	0x200001cc
 800220c:	20000008 	.word	0x20000008

08002210 <Settings_Write>:
void Settings_Write(){
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	General_Copy_16_Bit((uint32_t)&settings[0], (uint32_t)&potentiometer_min);
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <Settings_Write+0x124>)
 8002218:	4a47      	ldr	r2, [pc, #284]	; (8002338 <Settings_Write+0x128>)
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff f8be 	bl	800139e <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[2], (uint32_t)&potentiometer_max);
 8002222:	4b46      	ldr	r3, [pc, #280]	; (800233c <Settings_Write+0x12c>)
 8002224:	4a46      	ldr	r2, [pc, #280]	; (8002340 <Settings_Write+0x130>)
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f8b8 	bl	800139e <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[4], (uint32_t)&motor_max_power);
 800222e:	4b45      	ldr	r3, [pc, #276]	; (8002344 <Settings_Write+0x134>)
 8002230:	4a45      	ldr	r2, [pc, #276]	; (8002348 <Settings_Write+0x138>)
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f8b2 	bl	800139e <General_Copy_16_Bit>
	settings[6] = motor_invert;
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <Settings_Write+0x13c>)
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <Settings_Write+0x124>)
 8002240:	719a      	strb	r2, [r3, #6]
	settings[7] = signal_ignore;
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <Settings_Write+0x140>)
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <Settings_Write+0x124>)
 8002248:	71da      	strb	r2, [r3, #7]
	General_Copy_32_Bit((uint32_t)&settings[8], (uint32_t)&signal_length);
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <Settings_Write+0x144>)
 800224c:	4a42      	ldr	r2, [pc, #264]	; (8002358 <Settings_Write+0x148>)
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff f887 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[12], (uint32_t)&signal_timeout);
 8002256:	4b41      	ldr	r3, [pc, #260]	; (800235c <Settings_Write+0x14c>)
 8002258:	4a41      	ldr	r2, [pc, #260]	; (8002360 <Settings_Write+0x150>)
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f881 	bl	8001364 <General_Copy_32_Bit>
	settings[16] = led_mode;
 8002262:	4b40      	ldr	r3, [pc, #256]	; (8002364 <Settings_Write+0x154>)
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	4b33      	ldr	r3, [pc, #204]	; (8002334 <Settings_Write+0x124>)
 8002268:	741a      	strb	r2, [r3, #16]
	settings[17] = pid_on;
 800226a:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <Settings_Write+0x158>)
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <Settings_Write+0x124>)
 8002270:	745a      	strb	r2, [r3, #17]
	General_Copy_32_Bit((uint32_t)&settings[18], (uint32_t)&pid_kp_1);
 8002272:	4b3e      	ldr	r3, [pc, #248]	; (800236c <Settings_Write+0x15c>)
 8002274:	4a3e      	ldr	r2, [pc, #248]	; (8002370 <Settings_Write+0x160>)
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f873 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[22], (uint32_t)&pid_ki_1);
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <Settings_Write+0x164>)
 8002280:	4a3d      	ldr	r2, [pc, #244]	; (8002378 <Settings_Write+0x168>)
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f86d 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[26], (uint32_t)&pid_kd_1);
 800228a:	4b3c      	ldr	r3, [pc, #240]	; (800237c <Settings_Write+0x16c>)
 800228c:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <Settings_Write+0x170>)
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff f867 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[30], (uint32_t)&pid_kp_2);
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <Settings_Write+0x174>)
 8002298:	4a3b      	ldr	r2, [pc, #236]	; (8002388 <Settings_Write+0x178>)
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff f861 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[34], (uint32_t)&pid_ki_2);
 80022a2:	4b3a      	ldr	r3, [pc, #232]	; (800238c <Settings_Write+0x17c>)
 80022a4:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <Settings_Write+0x180>)
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f85b 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[38], (uint32_t)&pid_kd_2);
 80022ae:	4b39      	ldr	r3, [pc, #228]	; (8002394 <Settings_Write+0x184>)
 80022b0:	4a39      	ldr	r2, [pc, #228]	; (8002398 <Settings_Write+0x188>)
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f855 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[42], (uint32_t)&pid_kp_3);
 80022ba:	4b38      	ldr	r3, [pc, #224]	; (800239c <Settings_Write+0x18c>)
 80022bc:	4a38      	ldr	r2, [pc, #224]	; (80023a0 <Settings_Write+0x190>)
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff f84f 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[46], (uint32_t)&pid_ki_3);
 80022c6:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <Settings_Write+0x194>)
 80022c8:	4a37      	ldr	r2, [pc, #220]	; (80023a8 <Settings_Write+0x198>)
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f849 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[50], (uint32_t)&pid_kd_3);
 80022d2:	4b36      	ldr	r3, [pc, #216]	; (80023ac <Settings_Write+0x19c>)
 80022d4:	4a36      	ldr	r2, [pc, #216]	; (80023b0 <Settings_Write+0x1a0>)
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff f843 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&settings[54], (uint32_t)&pid_split_1);
 80022de:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <Settings_Write+0x1a4>)
 80022e0:	4a35      	ldr	r2, [pc, #212]	; (80023b8 <Settings_Write+0x1a8>)
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f85a 	bl	800139e <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[56], (uint32_t)&pid_split_2);
 80022ea:	4b34      	ldr	r3, [pc, #208]	; (80023bc <Settings_Write+0x1ac>)
 80022ec:	4a34      	ldr	r2, [pc, #208]	; (80023c0 <Settings_Write+0x1b0>)
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f854 	bl	800139e <General_Copy_16_Bit>
	settings[58] = pid_sampling_time;
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <Settings_Write+0x1b4>)
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <Settings_Write+0x124>)
 80022fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	settings[59] = SETTINGS_CRC_PADDING;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <Settings_Write+0x124>)
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1);
 8002308:	220f      	movs	r2, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <Settings_Write+0x124>)
 800230c:	482e      	ldr	r0, [pc, #184]	; (80023c8 <Settings_Write+0x1b8>)
 800230e:	f001 fef2 	bl	80040f6 <HAL_CRC_Calculate>
 8002312:	4603      	mov	r3, r0
 8002314:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&settings[60], (uint32_t)&crc);
 8002316:	4a2d      	ldr	r2, [pc, #180]	; (80023cc <Settings_Write+0x1bc>)
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f7ff f821 	bl	8001364 <General_Copy_32_Bit>
	Flash_Write(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	492a      	ldr	r1, [pc, #168]	; (80023d0 <Settings_Write+0x1c0>)
 8002326:	4803      	ldr	r0, [pc, #12]	; (8002334 <Settings_Write+0x124>)
 8002328:	f7fe ff7f 	bl	800122a <Flash_Write>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200001fc 	.word	0x200001fc
 8002338:	200001ec 	.word	0x200001ec
 800233c:	200001fe 	.word	0x200001fe
 8002340:	200001ee 	.word	0x200001ee
 8002344:	20000200 	.word	0x20000200
 8002348:	20000000 	.word	0x20000000
 800234c:	200001c7 	.word	0x200001c7
 8002350:	2000023c 	.word	0x2000023c
 8002354:	20000204 	.word	0x20000204
 8002358:	20000240 	.word	0x20000240
 800235c:	20000208 	.word	0x20000208
 8002360:	20000244 	.word	0x20000244
 8002364:	200001c4 	.word	0x200001c4
 8002368:	20000020 	.word	0x20000020
 800236c:	2000020e 	.word	0x2000020e
 8002370:	20000004 	.word	0x20000004
 8002374:	20000212 	.word	0x20000212
 8002378:	200001cc 	.word	0x200001cc
 800237c:	20000216 	.word	0x20000216
 8002380:	20000008 	.word	0x20000008
 8002384:	2000021a 	.word	0x2000021a
 8002388:	2000000c 	.word	0x2000000c
 800238c:	2000021e 	.word	0x2000021e
 8002390:	200001d0 	.word	0x200001d0
 8002394:	20000222 	.word	0x20000222
 8002398:	20000010 	.word	0x20000010
 800239c:	20000226 	.word	0x20000226
 80023a0:	20000014 	.word	0x20000014
 80023a4:	2000022a 	.word	0x2000022a
 80023a8:	200001d4 	.word	0x200001d4
 80023ac:	2000022e 	.word	0x2000022e
 80023b0:	20000018 	.word	0x20000018
 80023b4:	20000232 	.word	0x20000232
 80023b8:	2000001c 	.word	0x2000001c
 80023bc:	20000234 	.word	0x20000234
 80023c0:	2000001e 	.word	0x2000001e
 80023c4:	20000002 	.word	0x20000002
 80023c8:	200003c8 	.word	0x200003c8
 80023cc:	20000238 	.word	0x20000238
 80023d0:	0800fc00 	.word	0x0800fc00

080023d4 <Signal_SysTick_Interrupt>:
uint32_t signal_timeout;

uint8_t signal_present = 0;
uint32_t signal_timeout_passed_ms = 0;

void Signal_SysTick_Interrupt(){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	if(signal_present){
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <Signal_SysTick_Interrupt+0x5c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d024      	beq.n	800242a <Signal_SysTick_Interrupt+0x56>
		if(signal_timeout_passed_ms >= signal_timeout){
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <Signal_SysTick_Interrupt+0x60>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <Signal_SysTick_Interrupt+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d319      	bcc.n	8002420 <Signal_SysTick_Interrupt+0x4c>
			signal_present = 0;
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <Signal_SysTick_Interrupt+0x5c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <Signal_SysTick_Interrupt+0x68>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <Signal_SysTick_Interrupt+0x36>
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <Signal_SysTick_Interrupt+0x68>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d013      	beq.n	800242a <Signal_SysTick_Interrupt+0x56>
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <Signal_SysTick_Interrupt+0x6c>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <Signal_SysTick_Interrupt+0x56>
				if(pid_running){
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <Signal_SysTick_Interrupt+0x70>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <Signal_SysTick_Interrupt+0x42>
					PID_Stop();
 8002412:	f7ff fbc3 	bl	8001b9c <PID_Stop>
				}
				pid_setpoint = 0;
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <Signal_SysTick_Interrupt+0x74>)
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
			}
		}else{
			signal_timeout_passed_ms++;
		}
	}
}
 800241e:	e004      	b.n	800242a <Signal_SysTick_Interrupt+0x56>
			signal_timeout_passed_ms++;
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <Signal_SysTick_Interrupt+0x60>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <Signal_SysTick_Interrupt+0x60>)
 8002428:	6013      	str	r3, [r2, #0]
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000248 	.word	0x20000248
 8002434:	2000024c 	.word	0x2000024c
 8002438:	20000244 	.word	0x20000244
 800243c:	2000023c 	.word	0x2000023c
 8002440:	20000254 	.word	0x20000254
 8002444:	200001d8 	.word	0x200001d8
 8002448:	20000024 	.word	0x20000024

0800244c <Signal_Timer_Interrupt>:
void Signal_Timer_Interrupt(){
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
	signal_present = 0;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <Signal_Timer_Interrupt+0x14>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000248 	.word	0x20000248
 8002464:	00000000 	.word	0x00000000

08002468 <Signal_Interrupt>:
void Signal_Interrupt(){
 8002468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
	uint32_t cnt = Signal_Read_Timer();
 800246e:	f000 f903 	bl	8002678 <Signal_Read_Timer>
 8002472:	60f8      	str	r0, [r7, #12]
	if(Signal_Read() == SIGNAL_HIGH){
 8002474:	f000 f918 	bl	80026a8 <Signal_Read>
 8002478:	4603      	mov	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <Signal_Interrupt+0x28>
		Signal_Timer_Reset();
 800247e:	f000 f907 	bl	8002690 <Signal_Timer_Reset>
		signal_present = 1;
 8002482:	4b71      	ldr	r3, [pc, #452]	; (8002648 <Signal_Interrupt+0x1e0>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
		signal_timeout_passed_ms = 0;
 8002488:	4b70      	ldr	r3, [pc, #448]	; (800264c <Signal_Interrupt+0x1e4>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
					PID_Stop();
				}
			}
		}
	}
}
 800248e:	e0d1      	b.n	8002634 <Signal_Interrupt+0x1cc>
	}else if(signal_present){
 8002490:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <Signal_Interrupt+0x1e0>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80cd 	beq.w	8002634 <Signal_Interrupt+0x1cc>
		if(!usb_present || (!signal_ignore && usb_present)){
 800249a:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <Signal_Interrupt+0x1e8>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <Signal_Interrupt+0x4e>
 80024a2:	4b6c      	ldr	r3, [pc, #432]	; (8002654 <Signal_Interrupt+0x1ec>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 80c4 	bne.w	8002634 <Signal_Interrupt+0x1cc>
 80024ac:	4b68      	ldr	r3, [pc, #416]	; (8002650 <Signal_Interrupt+0x1e8>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80bf 	beq.w	8002634 <Signal_Interrupt+0x1cc>
			float received_length_ms  = (float)((uint32_t)cnt + (uint32_t)1) / 12000.0f;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fb54 	bl	8000b68 <__aeabi_ui2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4965      	ldr	r1, [pc, #404]	; (8002658 <Signal_Interrupt+0x1f0>)
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fc5b 	bl	8000d80 <__aeabi_fdiv>
 80024ca:	4603      	mov	r3, r0
 80024cc:	60bb      	str	r3, [r7, #8]
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <Signal_Interrupt+0x1f4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4619      	mov	r1, r3
 80024d4:	68b8      	ldr	r0, [r7, #8]
 80024d6:	f7fe fd47 	bl	8000f68 <__aeabi_fcmple>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 809e 	beq.w	800261e <Signal_Interrupt+0x1b6>
 80024e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80024e6:	68b8      	ldr	r0, [r7, #8]
 80024e8:	f7fe fd48 	bl	8000f7c <__aeabi_fcmpge>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8095 	beq.w	800261e <Signal_Interrupt+0x1b6>
				float new_pid_setpoint = (((float)potentiometer_max - (float)potentiometer_min) * ((received_length_ms - 1.0f) / (signal_length - 1.0f))) + (float)potentiometer_min;
 80024f4:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <Signal_Interrupt+0x1f8>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fb35 	bl	8000b68 <__aeabi_ui2f>
 80024fe:	4604      	mov	r4, r0
 8002500:	4b58      	ldr	r3, [pc, #352]	; (8002664 <Signal_Interrupt+0x1fc>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fb2f 	bl	8000b68 <__aeabi_ui2f>
 800250a:	4603      	mov	r3, r0
 800250c:	4619      	mov	r1, r3
 800250e:	4620      	mov	r0, r4
 8002510:	f7fe fa78 	bl	8000a04 <__aeabi_fsub>
 8002514:	4603      	mov	r3, r0
 8002516:	461c      	mov	r4, r3
 8002518:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800251c:	68b8      	ldr	r0, [r7, #8]
 800251e:	f7fe fa71 	bl	8000a04 <__aeabi_fsub>
 8002522:	4603      	mov	r3, r0
 8002524:	461d      	mov	r5, r3
 8002526:	4b4d      	ldr	r3, [pc, #308]	; (800265c <Signal_Interrupt+0x1f4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fa68 	bl	8000a04 <__aeabi_fsub>
 8002534:	4603      	mov	r3, r0
 8002536:	4619      	mov	r1, r3
 8002538:	4628      	mov	r0, r5
 800253a:	f7fe fc21 	bl	8000d80 <__aeabi_fdiv>
 800253e:	4603      	mov	r3, r0
 8002540:	4619      	mov	r1, r3
 8002542:	4620      	mov	r0, r4
 8002544:	f7fe fb68 	bl	8000c18 <__aeabi_fmul>
 8002548:	4603      	mov	r3, r0
 800254a:	461c      	mov	r4, r3
 800254c:	4b45      	ldr	r3, [pc, #276]	; (8002664 <Signal_Interrupt+0x1fc>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fb09 	bl	8000b68 <__aeabi_ui2f>
 8002556:	4603      	mov	r3, r0
 8002558:	4619      	mov	r1, r3
 800255a:	4620      	mov	r0, r4
 800255c:	f7fe fa54 	bl	8000a08 <__addsf3>
 8002560:	4603      	mov	r3, r0
 8002562:	607b      	str	r3, [r7, #4]
					fabs((new_pid_setpoint - (float)potentiometer_min) - (pid_setpoint - (float)potentiometer_min)) / (((float)potentiometer_max - (float)potentiometer_min) / 100.0f)
 8002564:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <Signal_Interrupt+0x1fc>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fafd 	bl	8000b68 <__aeabi_ui2f>
 800256e:	4603      	mov	r3, r0
 8002570:	4619      	mov	r1, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fa46 	bl	8000a04 <__aeabi_fsub>
 8002578:	4603      	mov	r3, r0
 800257a:	461d      	mov	r5, r3
 800257c:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <Signal_Interrupt+0x200>)
 800257e:	681c      	ldr	r4, [r3, #0]
 8002580:	4b38      	ldr	r3, [pc, #224]	; (8002664 <Signal_Interrupt+0x1fc>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe faef 	bl	8000b68 <__aeabi_ui2f>
 800258a:	4603      	mov	r3, r0
 800258c:	4619      	mov	r1, r3
 800258e:	4620      	mov	r0, r4
 8002590:	f7fe fa38 	bl	8000a04 <__aeabi_fsub>
 8002594:	4603      	mov	r3, r0
 8002596:	4619      	mov	r1, r3
 8002598:	4628      	mov	r0, r5
 800259a:	f7fe fa33 	bl	8000a04 <__aeabi_fsub>
 800259e:	4603      	mov	r3, r0
 80025a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd ff37 	bl	8000418 <__aeabi_f2d>
 80025aa:	4604      	mov	r4, r0
 80025ac:	460d      	mov	r5, r1
 80025ae:	4b2c      	ldr	r3, [pc, #176]	; (8002660 <Signal_Interrupt+0x1f8>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fad8 	bl	8000b68 <__aeabi_ui2f>
 80025b8:	4606      	mov	r6, r0
 80025ba:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <Signal_Interrupt+0x1fc>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fad2 	bl	8000b68 <__aeabi_ui2f>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4619      	mov	r1, r3
 80025c8:	4630      	mov	r0, r6
 80025ca:	f7fe fa1b 	bl	8000a04 <__aeabi_fsub>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4926      	ldr	r1, [pc, #152]	; (800266c <Signal_Interrupt+0x204>)
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fbd4 	bl	8000d80 <__aeabi_fdiv>
 80025d8:	4603      	mov	r3, r0
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ff1c 	bl	8000418 <__aeabi_f2d>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4620      	mov	r0, r4
 80025e6:	4629      	mov	r1, r5
 80025e8:	f7fe f898 	bl	800071c <__aeabi_ddiv>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
				if(
 80025f4:	a312      	add	r3, pc, #72	; (adr r3, 8002640 <Signal_Interrupt+0x1d8>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	f7fe f9eb 	bl	80009d4 <__aeabi_dcmpge>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <Signal_Interrupt+0x1a2>
					led_position_changed = 1;
 8002604:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <Signal_Interrupt+0x208>)
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
				pid_setpoint = new_pid_setpoint;
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <Signal_Interrupt+0x200>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6013      	str	r3, [r2, #0]
				if(!pid_running){
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <Signal_Interrupt+0x20c>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10c      	bne.n	8002632 <Signal_Interrupt+0x1ca>
					PID_Start();
 8002618:	f7ff fa9e 	bl	8001b58 <PID_Start>
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 800261c:	e009      	b.n	8002632 <Signal_Interrupt+0x1ca>
				signal_present = 0;
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <Signal_Interrupt+0x1e0>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
				if(pid_running){
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <Signal_Interrupt+0x20c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <Signal_Interrupt+0x1cc>
					PID_Stop();
 800262c:	f7ff fab6 	bl	8001b9c <PID_Stop>
}
 8002630:	e000      	b.n	8002634 <Signal_Interrupt+0x1cc>
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8002632:	bf00      	nop
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800263c:	f3af 8000 	nop.w
 8002640:	a0000000 	.word	0xa0000000
 8002644:	3fc99999 	.word	0x3fc99999
 8002648:	20000248 	.word	0x20000248
 800264c:	2000024c 	.word	0x2000024c
 8002650:	20000254 	.word	0x20000254
 8002654:	2000023c 	.word	0x2000023c
 8002658:	463b8000 	.word	0x463b8000
 800265c:	20000240 	.word	0x20000240
 8002660:	200001ee 	.word	0x200001ee
 8002664:	200001ec 	.word	0x200001ec
 8002668:	20000024 	.word	0x20000024
 800266c:	42c80000 	.word	0x42c80000
 8002670:	200001c5 	.word	0x200001c5
 8002674:	200001d8 	.word	0x200001d8

08002678 <Signal_Read_Timer>:

uint32_t Signal_Read_Timer(){
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <Signal_Read_Timer+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000460 	.word	0x20000460

08002690 <Signal_Timer_Reset>:
void Signal_Timer_Reset(){
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <Signal_Timer_Reset+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000460 	.word	0x20000460

080026a8 <Signal_Read>:
uint8_t Signal_Read(){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 80026b6:	e01d      	b.n	80026f4 <Signal_Read+0x4c>
		i = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 80026bc:	2102      	movs	r1, #2
 80026be:	4811      	ldr	r0, [pc, #68]	; (8002704 <Signal_Read+0x5c>)
 80026c0:	f002 f8d0 	bl	8004864 <HAL_GPIO_ReadPin>
 80026c4:	4603      	mov	r3, r0
 80026c6:	71fb      	strb	r3, [r7, #7]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 80026c8:	e011      	b.n	80026ee <Signal_Read+0x46>
			i++;
 80026ca:	797b      	ldrb	r3, [r7, #5]
 80026cc:	3301      	adds	r3, #1
 80026ce:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 80026d0:	2102      	movs	r1, #2
 80026d2:	480c      	ldr	r0, [pc, #48]	; (8002704 <Signal_Read+0x5c>)
 80026d4:	f002 f8c6 	bl	8004864 <HAL_GPIO_ReadPin>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	4293      	cmp	r3, r2
 80026e0:	d000      	beq.n	80026e4 <Signal_Read+0x3c>
				break;
 80026e2:	e007      	b.n	80026f4 <Signal_Read+0x4c>
			}
			if(i == SIGNAL_DEBOUNCE_SAMPLES){
 80026e4:	797b      	ldrb	r3, [r7, #5]
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d101      	bne.n	80026ee <Signal_Read+0x46>
				d = 1;
 80026ea:	2301      	movs	r3, #1
 80026ec:	71bb      	strb	r3, [r7, #6]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 80026ee:	797b      	ldrb	r3, [r7, #5]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d1ea      	bne.n	80026ca <Signal_Read+0x22>
	while(d != 1){
 80026f4:	79bb      	ldrb	r3, [r7, #6]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d1de      	bne.n	80026b8 <Signal_Read+0x10>
			}
		}
	}
	return level;
 80026fa:	79fb      	ldrb	r3, [r7, #7]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40010c00 	.word	0x40010c00

08002708 <Signal_Init>:

void Signal_Init(){
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <Signal_Init+0x10>)
 800270e:	f004 fb81 	bl	8006e14 <HAL_TIM_Base_Start>
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000460 	.word	0x20000460

0800271c <USB_Det>:

uint8_t usb_present = 0;
uint8_t usb_tx_buffer[64];
uint8_t usb_long_buffer[256];

void USB_Det(){
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	if((hUsbDeviceFS.dev_state == USBD_STATE_ADDRESSED) || (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)){
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <USB_Det+0x44>)
 8002722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002726:	2b02      	cmp	r3, #2
 8002728:	d004      	beq.n	8002734 <USB_Det+0x18>
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <USB_Det+0x44>)
 800272c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002730:	2b03      	cmp	r3, #3
 8002732:	d109      	bne.n	8002748 <USB_Det+0x2c>
		if(!usb_present){
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <USB_Det+0x48>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <USB_Det+0x24>
			PID_Stop();
 800273c:	f7ff fa2e 	bl	8001b9c <PID_Stop>
		}
		usb_present = 1;
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <USB_Det+0x48>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e009      	b.n	800275c <USB_Det+0x40>
	}else{
		if(usb_present){
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <USB_Det+0x48>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <USB_Det+0x38>
			PID_Stop();
 8002750:	f7ff fa24 	bl	8001b9c <PID_Stop>
		}
		usb_present = 0;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <USB_Det+0x48>)
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
	}
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200004d4 	.word	0x200004d4
 8002764:	20000254 	.word	0x20000254

08002768 <USB_Packet_Received>:
void USB_Packet_Received(uint8_t *data, uint32_t length){
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
	if((data[1] == USB_CMD_CONFIG) && (uint32_t)data[0] == length){
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3301      	adds	r3, #1
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11c      	bne.n	80027b6 <USB_Packet_Received+0x4e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	4293      	cmp	r3, r2
 8002786:	d116      	bne.n	80027b6 <USB_Packet_Received+0x4e>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3b01      	subs	r3, #1
 800278e:	461a      	mov	r2, r3
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4829      	ldr	r0, [pc, #164]	; (8002838 <USB_Packet_Received+0xd0>)
 8002794:	f001 fcaf 	bl	80040f6 <HAL_CRC_Calculate>
 8002798:	4601      	mov	r1, r0
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3b04      	subs	r3, #4
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4299      	cmp	r1, r3
 80027a6:	d143      	bne.n	8002830 <USB_Packet_Received+0xc8>
			USB_Parse_Config(data);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f84d 	bl	8002848 <USB_Parse_Config>
			usb_rq = USB_RQ_CONF;
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <USB_Packet_Received+0xd4>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 80027b4:	e03c      	b.n	8002830 <USB_Packet_Received+0xc8>
		}
	}else if((data[1] == USB_CMD_STATUS) && (length == 64)){
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3301      	adds	r3, #1
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d108      	bne.n	80027d2 <USB_Packet_Received+0x6a>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d105      	bne.n	80027d2 <USB_Packet_Received+0x6a>
		memcpy(usb_long_buffer, data, 64);
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	481d      	ldr	r0, [pc, #116]	; (8002840 <USB_Packet_Received+0xd8>)
 80027cc:	f00a f8aa 	bl	800c924 <memcpy>
 80027d0:	e02e      	b.n	8002830 <USB_Packet_Received+0xc8>
	}
	else if((usb_long_buffer[1] == USB_CMD_STATUS) && (usb_long_buffer[0] == (length + 64))){
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <USB_Packet_Received+0xd8>)
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d126      	bne.n	8002828 <USB_Packet_Received+0xc0>
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <USB_Packet_Received+0xd8>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	3340      	adds	r3, #64	; 0x40
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d11f      	bne.n	8002828 <USB_Packet_Received+0xc0>
		memcpy(&usb_long_buffer[64], data, length);
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4815      	ldr	r0, [pc, #84]	; (8002844 <USB_Packet_Received+0xdc>)
 80027ee:	f00a f899 	bl	800c924 <memcpy>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)usb_long_buffer, ((length + 64) / 4) - 1) == *(uint32_t *)&usb_long_buffer[length + 64- 4]){
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	3340      	adds	r3, #64	; 0x40
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3b01      	subs	r3, #1
 80027fa:	461a      	mov	r2, r3
 80027fc:	4910      	ldr	r1, [pc, #64]	; (8002840 <USB_Packet_Received+0xd8>)
 80027fe:	480e      	ldr	r0, [pc, #56]	; (8002838 <USB_Packet_Received+0xd0>)
 8002800:	f001 fc79 	bl	80040f6 <HAL_CRC_Calculate>
 8002804:	4602      	mov	r2, r0
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	333c      	adds	r3, #60	; 0x3c
 800280a:	490d      	ldr	r1, [pc, #52]	; (8002840 <USB_Packet_Received+0xd8>)
 800280c:	440b      	add	r3, r1
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d105      	bne.n	8002820 <USB_Packet_Received+0xb8>
			USB_Parse_Status(usb_long_buffer);
 8002814:	480a      	ldr	r0, [pc, #40]	; (8002840 <USB_Packet_Received+0xd8>)
 8002816:	f000 f8ff 	bl	8002a18 <USB_Parse_Status>
			usb_rq = USB_RQ_STAT;
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <USB_Packet_Received+0xd4>)
 800281c:	2202      	movs	r2, #2
 800281e:	701a      	strb	r2, [r3, #0]
		}
		usb_long_buffer[1] = 0xff;
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <USB_Packet_Received+0xd8>)
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	705a      	strb	r2, [r3, #1]
 8002826:	e003      	b.n	8002830 <USB_Packet_Received+0xc8>
	}else{
		usb_long_buffer[1] = 0xff;
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <USB_Packet_Received+0xd8>)
 800282a:	22ff      	movs	r2, #255	; 0xff
 800282c:	705a      	strb	r2, [r3, #1]
	}
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200003c8 	.word	0x200003c8
 800283c:	20000250 	.word	0x20000250
 8002840:	20000298 	.word	0x20000298
 8002844:	200002d8 	.word	0x200002d8

08002848 <USB_Parse_Config>:
void USB_Parse_Config(uint8_t *data){
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	usb_rq_sett_revert_flash = data[2];
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	789a      	ldrb	r2, [r3, #2]
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <USB_Parse_Config+0x1c>)
 8002856:	701a      	strb	r2, [r3, #0]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000251 	.word	0x20000251

08002868 <USB_Send_Config>:
void USB_Send_Config(){
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_CONFIG_LENGTH;
 800286e:	4b48      	ldr	r3, [pc, #288]	; (8002990 <USB_Send_Config+0x128>)
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_CONFIG;
 8002874:	4b46      	ldr	r3, [pc, #280]	; (8002990 <USB_Send_Config+0x128>)
 8002876:	2200      	movs	r2, #0
 8002878:	705a      	strb	r2, [r3, #1]
	*(uint16_t *)&usb_tx_buffer[2] = potentiometer_min;
 800287a:	4b46      	ldr	r3, [pc, #280]	; (8002994 <USB_Send_Config+0x12c>)
 800287c:	4a46      	ldr	r2, [pc, #280]	; (8002998 <USB_Send_Config+0x130>)
 800287e:	8812      	ldrh	r2, [r2, #0]
 8002880:	801a      	strh	r2, [r3, #0]
	*(uint16_t *)&usb_tx_buffer[4] = potentiometer_max;
 8002882:	4b46      	ldr	r3, [pc, #280]	; (800299c <USB_Send_Config+0x134>)
 8002884:	4a46      	ldr	r2, [pc, #280]	; (80029a0 <USB_Send_Config+0x138>)
 8002886:	8812      	ldrh	r2, [r2, #0]
 8002888:	801a      	strh	r2, [r3, #0]
	usb_tx_buffer[6] = (uint8_t)((uint16_t)motor_max_power / 10);
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <USB_Send_Config+0x13c>)
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <USB_Send_Config+0x140>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	08db      	lsrs	r3, r3, #3
 8002896:	b29b      	uxth	r3, r3
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <USB_Send_Config+0x128>)
 800289c:	719a      	strb	r2, [r3, #6]
	usb_tx_buffer[7] = motor_invert;
 800289e:	4b43      	ldr	r3, [pc, #268]	; (80029ac <USB_Send_Config+0x144>)
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <USB_Send_Config+0x128>)
 80028a4:	71da      	strb	r2, [r3, #7]
	usb_tx_buffer[8] = signal_ignore;
 80028a6:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <USB_Send_Config+0x148>)
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	4b39      	ldr	r3, [pc, #228]	; (8002990 <USB_Send_Config+0x128>)
 80028ac:	721a      	strb	r2, [r3, #8]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[9], (uint32_t)&signal_length);
 80028ae:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <USB_Send_Config+0x14c>)
 80028b0:	4a41      	ldr	r2, [pc, #260]	; (80029b8 <USB_Send_Config+0x150>)
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fd55 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[13], (uint32_t)&signal_timeout);
 80028ba:	4b40      	ldr	r3, [pc, #256]	; (80029bc <USB_Send_Config+0x154>)
 80028bc:	4a40      	ldr	r2, [pc, #256]	; (80029c0 <USB_Send_Config+0x158>)
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fd4f 	bl	8001364 <General_Copy_32_Bit>
	usb_tx_buffer[17] = led_mode;
 80028c6:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <USB_Send_Config+0x15c>)
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	4b31      	ldr	r3, [pc, #196]	; (8002990 <USB_Send_Config+0x128>)
 80028cc:	745a      	strb	r2, [r3, #17]
	usb_tx_buffer[18] = pid_on;
 80028ce:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <USB_Send_Config+0x160>)
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	4b2f      	ldr	r3, [pc, #188]	; (8002990 <USB_Send_Config+0x128>)
 80028d4:	749a      	strb	r2, [r3, #18]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[19], (uint32_t)&pid_kp_1);
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <USB_Send_Config+0x164>)
 80028d8:	4a3d      	ldr	r2, [pc, #244]	; (80029d0 <USB_Send_Config+0x168>)
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fd41 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[23], (uint32_t)&pid_ki_1);
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <USB_Send_Config+0x16c>)
 80028e4:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <USB_Send_Config+0x170>)
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fd3b 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[27], (uint32_t)&pid_kd_1);
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <USB_Send_Config+0x174>)
 80028f0:	4a3b      	ldr	r2, [pc, #236]	; (80029e0 <USB_Send_Config+0x178>)
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fd35 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[31], (uint32_t)&pid_kp_1);
 80028fa:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <USB_Send_Config+0x17c>)
 80028fc:	4a34      	ldr	r2, [pc, #208]	; (80029d0 <USB_Send_Config+0x168>)
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fd2f 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[35], (uint32_t)&pid_ki_1);
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <USB_Send_Config+0x180>)
 8002908:	4a33      	ldr	r2, [pc, #204]	; (80029d8 <USB_Send_Config+0x170>)
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe fd29 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[39], (uint32_t)&pid_kd_1);
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <USB_Send_Config+0x184>)
 8002914:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <USB_Send_Config+0x178>)
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fd23 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[43], (uint32_t)&pid_kp_1);
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <USB_Send_Config+0x188>)
 8002920:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <USB_Send_Config+0x168>)
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fd1d 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[47], (uint32_t)&pid_ki_1);
 800292a:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <USB_Send_Config+0x18c>)
 800292c:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <USB_Send_Config+0x170>)
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fd17 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[51], (uint32_t)&pid_kd_1);
 8002936:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <USB_Send_Config+0x190>)
 8002938:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <USB_Send_Config+0x178>)
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fd11 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[55], (uint32_t)&pid_split_1);
 8002942:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <USB_Send_Config+0x194>)
 8002944:	4a2e      	ldr	r2, [pc, #184]	; (8002a00 <USB_Send_Config+0x198>)
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fd28 	bl	800139e <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[57], (uint32_t)&pid_split_2);
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <USB_Send_Config+0x19c>)
 8002950:	4a2d      	ldr	r2, [pc, #180]	; (8002a08 <USB_Send_Config+0x1a0>)
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fd22 	bl	800139e <General_Copy_16_Bit>
	usb_tx_buffer[59] = pid_sampling_time;
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <USB_Send_Config+0x1a4>)
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <USB_Send_Config+0x128>)
 8002960:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_CONFIG_LENGTH / 4) - 1);
 8002964:	220f      	movs	r2, #15
 8002966:	490a      	ldr	r1, [pc, #40]	; (8002990 <USB_Send_Config+0x128>)
 8002968:	4829      	ldr	r0, [pc, #164]	; (8002a10 <USB_Send_Config+0x1a8>)
 800296a:	f001 fbc4 	bl	80040f6 <HAL_CRC_Calculate>
 800296e:	4603      	mov	r3, r0
 8002970:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[60], (uint32_t)&crc);
 8002972:	4a28      	ldr	r2, [pc, #160]	; (8002a14 <USB_Send_Config+0x1ac>)
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	4619      	mov	r1, r3
 8002978:	4610      	mov	r0, r2
 800297a:	f7fe fcf3 	bl	8001364 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_CONFIG_LENGTH);
 800297e:	2140      	movs	r1, #64	; 0x40
 8002980:	4803      	ldr	r0, [pc, #12]	; (8002990 <USB_Send_Config+0x128>)
 8002982:	f009 fbcd 	bl	800c120 <CDC_Transmit_FS>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000258 	.word	0x20000258
 8002994:	2000025a 	.word	0x2000025a
 8002998:	200001ec 	.word	0x200001ec
 800299c:	2000025c 	.word	0x2000025c
 80029a0:	200001ee 	.word	0x200001ee
 80029a4:	20000000 	.word	0x20000000
 80029a8:	cccccccd 	.word	0xcccccccd
 80029ac:	200001c7 	.word	0x200001c7
 80029b0:	2000023c 	.word	0x2000023c
 80029b4:	20000261 	.word	0x20000261
 80029b8:	20000240 	.word	0x20000240
 80029bc:	20000265 	.word	0x20000265
 80029c0:	20000244 	.word	0x20000244
 80029c4:	200001c4 	.word	0x200001c4
 80029c8:	20000020 	.word	0x20000020
 80029cc:	2000026b 	.word	0x2000026b
 80029d0:	20000004 	.word	0x20000004
 80029d4:	2000026f 	.word	0x2000026f
 80029d8:	200001cc 	.word	0x200001cc
 80029dc:	20000273 	.word	0x20000273
 80029e0:	20000008 	.word	0x20000008
 80029e4:	20000277 	.word	0x20000277
 80029e8:	2000027b 	.word	0x2000027b
 80029ec:	2000027f 	.word	0x2000027f
 80029f0:	20000283 	.word	0x20000283
 80029f4:	20000287 	.word	0x20000287
 80029f8:	2000028b 	.word	0x2000028b
 80029fc:	2000028f 	.word	0x2000028f
 8002a00:	2000001c 	.word	0x2000001c
 8002a04:	20000291 	.word	0x20000291
 8002a08:	2000001e 	.word	0x2000001e
 8002a0c:	20000002 	.word	0x20000002
 8002a10:	200003c8 	.word	0x200003c8
 8002a14:	20000294 	.word	0x20000294

08002a18 <USB_Parse_Status>:
void USB_Parse_Status(uint8_t *data){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	potentiometer_min = *(uint16_t *)&data[2];
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	885a      	ldrh	r2, [r3, #2]
 8002a24:	4b5e      	ldr	r3, [pc, #376]	; (8002ba0 <USB_Parse_Status+0x188>)
 8002a26:	801a      	strh	r2, [r3, #0]
	potentiometer_max = *(uint16_t *)&data[4];
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	889a      	ldrh	r2, [r3, #4]
 8002a2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ba4 <USB_Parse_Status+0x18c>)
 8002a2e:	801a      	strh	r2, [r3, #0]
	motor_max_power = (uint16_t)data[6] * 10;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3306      	adds	r3, #6
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <USB_Parse_Status+0x190>)
 8002a44:	801a      	strh	r2, [r3, #0]
	motor_invert = data[7];
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	79da      	ldrb	r2, [r3, #7]
 8002a4a:	4b58      	ldr	r3, [pc, #352]	; (8002bac <USB_Parse_Status+0x194>)
 8002a4c:	701a      	strb	r2, [r3, #0]
	signal_ignore = data[8];
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7a1a      	ldrb	r2, [r3, #8]
 8002a52:	4b57      	ldr	r3, [pc, #348]	; (8002bb0 <USB_Parse_Status+0x198>)
 8002a54:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&data[9]);
 8002a56:	4a57      	ldr	r2, [pc, #348]	; (8002bb4 <USB_Parse_Status+0x19c>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3309      	adds	r3, #9
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f7fe fc80 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&data[13]);
 8002a64:	4a54      	ldr	r2, [pc, #336]	; (8002bb8 <USB_Parse_Status+0x1a0>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	330d      	adds	r3, #13
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f7fe fc79 	bl	8001364 <General_Copy_32_Bit>
	led_mode = data[17];
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7c5a      	ldrb	r2, [r3, #17]
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <USB_Parse_Status+0x1a4>)
 8002a78:	701a      	strb	r2, [r3, #0]
	pid_on = data[18];
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7c9a      	ldrb	r2, [r3, #18]
 8002a7e:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <USB_Parse_Status+0x1a8>)
 8002a80:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&data[19]);
 8002a82:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <USB_Parse_Status+0x1ac>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3313      	adds	r3, #19
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f7fe fc6a 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&data[23]);
 8002a90:	4a4d      	ldr	r2, [pc, #308]	; (8002bc8 <USB_Parse_Status+0x1b0>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3317      	adds	r3, #23
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f7fe fc63 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&data[27]);
 8002a9e:	4a4b      	ldr	r2, [pc, #300]	; (8002bcc <USB_Parse_Status+0x1b4>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	331b      	adds	r3, #27
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f7fe fc5c 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&data[31]);
 8002aac:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <USB_Parse_Status+0x1b8>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	331f      	adds	r3, #31
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f7fe fc55 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&data[35]);
 8002aba:	4a46      	ldr	r2, [pc, #280]	; (8002bd4 <USB_Parse_Status+0x1bc>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3323      	adds	r3, #35	; 0x23
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f7fe fc4e 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&data[39]);
 8002ac8:	4a43      	ldr	r2, [pc, #268]	; (8002bd8 <USB_Parse_Status+0x1c0>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3327      	adds	r3, #39	; 0x27
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f7fe fc47 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&data[43]);
 8002ad6:	4a41      	ldr	r2, [pc, #260]	; (8002bdc <USB_Parse_Status+0x1c4>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	332b      	adds	r3, #43	; 0x2b
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7fe fc40 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&data[47]);
 8002ae4:	4a3e      	ldr	r2, [pc, #248]	; (8002be0 <USB_Parse_Status+0x1c8>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	332f      	adds	r3, #47	; 0x2f
 8002aea:	4619      	mov	r1, r3
 8002aec:	4610      	mov	r0, r2
 8002aee:	f7fe fc39 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&data[51]);
 8002af2:	4a3c      	ldr	r2, [pc, #240]	; (8002be4 <USB_Parse_Status+0x1cc>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3333      	adds	r3, #51	; 0x33
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f7fe fc32 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&data[55]);
 8002b00:	4a39      	ldr	r2, [pc, #228]	; (8002be8 <USB_Parse_Status+0x1d0>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3337      	adds	r3, #55	; 0x37
 8002b06:	4619      	mov	r1, r3
 8002b08:	4610      	mov	r0, r2
 8002b0a:	f7fe fc48 	bl	800139e <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&data[57]);
 8002b0e:	4a37      	ldr	r2, [pc, #220]	; (8002bec <USB_Parse_Status+0x1d4>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3339      	adds	r3, #57	; 0x39
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f7fe fc41 	bl	800139e <General_Copy_16_Bit>
	pid_sampling_time = data[59];
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <USB_Parse_Status+0x1d8>)
 8002b24:	701a      	strb	r2, [r3, #0]
	if(PID_Get_Sampling_Time() != pid_sampling_time){
 8002b26:	f7fe fe11 	bl	800174c <PID_Get_Sampling_Time>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <USB_Parse_Status+0x1d8>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d005      	beq.n	8002b44 <USB_Parse_Status+0x12c>
		PID_Set_Sampling_Time(pid_sampling_time);
 8002b38:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <USB_Parse_Status+0x1d8>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fe16 	bl	8001770 <PID_Set_Sampling_Time>
	}
	float new_pid_setpoint = 0;
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
	General_Copy_32_Bit((uint32_t)&new_pid_setpoint, (uint32_t)&data[60]);
 8002b4a:	f107 020c 	add.w	r2, r7, #12
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	333c      	adds	r3, #60	; 0x3c
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f7fe fc05 	bl	8001364 <General_Copy_32_Bit>
	if(signal_ignore){
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <USB_Parse_Status+0x198>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00f      	beq.n	8002b82 <USB_Parse_Status+0x16a>
		if(pid_setpoint != new_pid_setpoint){
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <USB_Parse_Status+0x1dc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe f9e8 	bl	8000f40 <__aeabi_fcmpeq>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <USB_Parse_Status+0x164>
			led_position_changed = 1;
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <USB_Parse_Status+0x1e0>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
		}
		pid_setpoint = new_pid_setpoint;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <USB_Parse_Status+0x1dc>)
 8002b80:	6013      	str	r3, [r2, #0]
	}
	usb_rq_stat_phold = data[64];
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <USB_Parse_Status+0x1e4>)
 8002b8a:	701a      	strb	r2, [r3, #0]
	usb_rq_stat_motor = data[65];
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <USB_Parse_Status+0x1e8>)
 8002b94:	701a      	strb	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200001ec 	.word	0x200001ec
 8002ba4:	200001ee 	.word	0x200001ee
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	200001c7 	.word	0x200001c7
 8002bb0:	2000023c 	.word	0x2000023c
 8002bb4:	20000240 	.word	0x20000240
 8002bb8:	20000244 	.word	0x20000244
 8002bbc:	200001c4 	.word	0x200001c4
 8002bc0:	20000020 	.word	0x20000020
 8002bc4:	20000004 	.word	0x20000004
 8002bc8:	200001cc 	.word	0x200001cc
 8002bcc:	20000008 	.word	0x20000008
 8002bd0:	2000000c 	.word	0x2000000c
 8002bd4:	200001d0 	.word	0x200001d0
 8002bd8:	20000010 	.word	0x20000010
 8002bdc:	20000014 	.word	0x20000014
 8002be0:	200001d4 	.word	0x200001d4
 8002be4:	20000018 	.word	0x20000018
 8002be8:	2000001c 	.word	0x2000001c
 8002bec:	2000001e 	.word	0x2000001e
 8002bf0:	20000002 	.word	0x20000002
 8002bf4:	20000024 	.word	0x20000024
 8002bf8:	200001c5 	.word	0x200001c5
 8002bfc:	20000253 	.word	0x20000253
 8002c00:	20000252 	.word	0x20000252

08002c04 <USB_Send_Status>:
void USB_Send_Status(){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_STATUS_LENGTH;
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <USB_Send_Status+0x84>)
 8002c0c:	2214      	movs	r2, #20
 8002c0e:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_STATUS;
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <USB_Send_Status+0x84>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	705a      	strb	r2, [r3, #1]
	usb_tx_buffer[2] = pid_running;
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <USB_Send_Status+0x88>)
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <USB_Send_Status+0x84>)
 8002c1c:	709a      	strb	r2, [r3, #2]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[3], (uint32_t)&pid_setpoint);
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <USB_Send_Status+0x8c>)
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <USB_Send_Status+0x90>)
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fb9d 	bl	8001364 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[7], (uint32_t)&potentiometer_position);
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <USB_Send_Status+0x94>)
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <USB_Send_Status+0x98>)
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fb97 	bl	8001364 <General_Copy_32_Bit>
	int16_t motor_val = Motor_Get();
 8002c36:	f7fe fd13 	bl	8001660 <Motor_Get>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	80fb      	strh	r3, [r7, #6]
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[11], (uint32_t)&motor_val);
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <USB_Send_Status+0x9c>)
 8002c40:	1dbb      	adds	r3, r7, #6
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f7fe fbaa 	bl	800139e <General_Copy_16_Bit>
	usb_tx_buffer[13] = USB_CRC_PADDING;
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <USB_Send_Status+0x84>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	735a      	strb	r2, [r3, #13]
	usb_tx_buffer[14] = USB_CRC_PADDING;
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <USB_Send_Status+0x84>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	739a      	strb	r2, [r3, #14]
	usb_tx_buffer[15] = USB_CRC_PADDING;
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <USB_Send_Status+0x84>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	73da      	strb	r2, [r3, #15]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_STATUS_LENGTH / 4) - 1);
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	490a      	ldr	r1, [pc, #40]	; (8002c88 <USB_Send_Status+0x84>)
 8002c60:	4810      	ldr	r0, [pc, #64]	; (8002ca4 <USB_Send_Status+0xa0>)
 8002c62:	f001 fa48 	bl	80040f6 <HAL_CRC_Calculate>
 8002c66:	4603      	mov	r3, r0
 8002c68:	603b      	str	r3, [r7, #0]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[16], (uint32_t)&crc);
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <USB_Send_Status+0xa4>)
 8002c6c:	463b      	mov	r3, r7
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f7fe fb77 	bl	8001364 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_STATUS_LENGTH);
 8002c76:	2114      	movs	r1, #20
 8002c78:	4803      	ldr	r0, [pc, #12]	; (8002c88 <USB_Send_Status+0x84>)
 8002c7a:	f009 fa51 	bl	800c120 <CDC_Transmit_FS>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000258 	.word	0x20000258
 8002c8c:	200001d8 	.word	0x200001d8
 8002c90:	2000025b 	.word	0x2000025b
 8002c94:	20000024 	.word	0x20000024
 8002c98:	2000025f 	.word	0x2000025f
 8002c9c:	200001f8 	.word	0x200001f8
 8002ca0:	20000263 	.word	0x20000263
 8002ca4:	200003c8 	.word	0x200003c8
 8002ca8:	20000268 	.word	0x20000268

08002cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cb0:	f000 fbe6 	bl	8003480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cb4:	f000 f813 	bl	8002cde <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cb8:	f000 f9de 	bl	8003078 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002cbc:	f000 f86c 	bl	8002d98 <MX_ADC1_Init>
  MX_CRC_Init();
 8002cc0:	f000 f8a8 	bl	8002e14 <MX_CRC_Init>
  MX_TIM2_Init();
 8002cc4:	f000 f8ba 	bl	8002e3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002cc8:	f000 f93a 	bl	8002f40 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ccc:	f000 f986 	bl	8002fdc <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002cd0:	f009 f962 	bl	800bf98 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
App_Init();
 8002cd4:	f7fe f9e8 	bl	80010a8 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
App_Loop();
 8002cd8:	f7fe f9f4 	bl	80010c4 <App_Loop>
 8002cdc:	e7fc      	b.n	8002cd8 <main+0x2c>

08002cde <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b094      	sub	sp, #80	; 0x50
 8002ce2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ce8:	2228      	movs	r2, #40	; 0x28
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f009 fe27 	bl	800c940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d20:	2302      	movs	r3, #2
 8002d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 faa1 	bl	800627c <HAL_RCC_OscConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002d40:	f000 f9fc 	bl	800313c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d44:	230f      	movs	r3, #15
 8002d46:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d54:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	2102      	movs	r1, #2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fd0d 	bl	8006780 <HAL_RCC_ClockConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002d6c:	f000 f9e6 	bl	800313c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002d70:	2312      	movs	r3, #18
 8002d72:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d78:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 fe81 	bl	8006a88 <HAL_RCCEx_PeriphCLKConfig>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002d8c:	f000 f9d6 	bl	800313c <Error_Handler>
  }
}
 8002d90:	bf00      	nop
 8002d92:	3750      	adds	r7, #80	; 0x50
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002da8:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <MX_ADC1_Init+0x74>)
 8002daa:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <MX_ADC1_Init+0x78>)
 8002dac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002dae:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <MX_ADC1_Init+0x74>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002db4:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <MX_ADC1_Init+0x74>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <MX_ADC1_Init+0x74>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <MX_ADC1_Init+0x74>)
 8002dc2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002dc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <MX_ADC1_Init+0x74>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <MX_ADC1_Init+0x74>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <MX_ADC1_Init+0x74>)
 8002dd6:	f000 fbb5 	bl	8003544 <HAL_ADC_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002de0:	f000 f9ac 	bl	800313c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002de4:	2304      	movs	r3, #4
 8002de6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002de8:	2301      	movs	r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002dec:	2307      	movs	r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	4619      	mov	r1, r3
 8002df4:	4805      	ldr	r0, [pc, #20]	; (8002e0c <MX_ADC1_Init+0x74>)
 8002df6:	f000 fe0b 	bl	8003a10 <HAL_ADC_ConfigChannel>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002e00:	f000 f99c 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000398 	.word	0x20000398
 8002e10:	40012400 	.word	0x40012400

08002e14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <MX_CRC_Init+0x20>)
 8002e1a:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <MX_CRC_Init+0x24>)
 8002e1c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002e1e:	4805      	ldr	r0, [pc, #20]	; (8002e34 <MX_CRC_Init+0x20>)
 8002e20:	f001 f94d 	bl	80040be <HAL_CRC_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002e2a:	f000 f987 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200003c8 	.word	0x200003c8
 8002e38:	40023000 	.word	0x40023000

08002e3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08e      	sub	sp, #56	; 0x38
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e50:	f107 0320 	add.w	r3, r7, #32
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
 8002e68:	615a      	str	r2, [r3, #20]
 8002e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e6c:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002e76:	2207      	movs	r2, #7
 8002e78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7a:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002e80:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002e82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e88:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e94:	4829      	ldr	r0, [pc, #164]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002e96:	f003 ff6d 	bl	8006d74 <HAL_TIM_Base_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002ea0:	f000 f94c 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4822      	ldr	r0, [pc, #136]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002eb2:	f004 fb39 	bl	8007528 <HAL_TIM_ConfigClockSource>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002ebc:	f000 f93e 	bl	800313c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ec0:	481e      	ldr	r0, [pc, #120]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002ec2:	f004 f871 	bl	8006fa8 <HAL_TIM_PWM_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002ecc:	f000 f936 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ed8:	f107 0320 	add.w	r3, r7, #32
 8002edc:	4619      	mov	r1, r3
 8002ede:	4817      	ldr	r0, [pc, #92]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002ee0:	f004 feae 	bl	8007c40 <HAL_TIMEx_MasterConfigSynchronization>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002eea:	f000 f927 	bl	800313c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eee:	2360      	movs	r3, #96	; 0x60
 8002ef0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	4619      	mov	r1, r3
 8002f06:	480d      	ldr	r0, [pc, #52]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002f08:	f004 fa50 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002f12:	f000 f913 	bl	800313c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	2204      	movs	r2, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4807      	ldr	r0, [pc, #28]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002f1e:	f004 fa45 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002f28:	f000 f908 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f2c:	4803      	ldr	r0, [pc, #12]	; (8002f3c <MX_TIM2_Init+0x100>)
 8002f2e:	f000 f9f3 	bl	8003318 <HAL_TIM_MspPostInit>

}
 8002f32:	bf00      	nop
 8002f34:	3738      	adds	r7, #56	; 0x38
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200003d0 	.word	0x200003d0

08002f40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f46:	f107 0308 	add.w	r3, r7, #8
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f54:	463b      	mov	r3, r7
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f5e:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <MX_TIM3_Init+0x98>)
 8002f60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002f62:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f64:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002f68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f72:	22c7      	movs	r2, #199	; 0xc7
 8002f74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f76:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f82:	4814      	ldr	r0, [pc, #80]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002f84:	f003 fef6 	bl	8006d74 <HAL_TIM_Base_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002f8e:	f000 f8d5 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	480d      	ldr	r0, [pc, #52]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002fa0:	f004 fac2 	bl	8007528 <HAL_TIM_ConfigClockSource>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002faa:	f000 f8c7 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fb6:	463b      	mov	r3, r7
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <MX_TIM3_Init+0x94>)
 8002fbc:	f004 fe40 	bl	8007c40 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002fc6:	f000 f8b9 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000418 	.word	0x20000418
 8002fd8:	40000400 	.word	0x40000400

08002fdc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <MX_TIM4_Init+0x94>)
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <MX_TIM4_Init+0x98>)
 8002ffc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5;
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <MX_TIM4_Init+0x94>)
 8003000:	2205      	movs	r2, #5
 8003002:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003004:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <MX_TIM4_Init+0x94>)
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <MX_TIM4_Init+0x94>)
 800300c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003010:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <MX_TIM4_Init+0x94>)
 8003014:	2200      	movs	r2, #0
 8003016:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <MX_TIM4_Init+0x94>)
 800301a:	2200      	movs	r2, #0
 800301c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800301e:	4814      	ldr	r0, [pc, #80]	; (8003070 <MX_TIM4_Init+0x94>)
 8003020:	f003 fea8 	bl	8006d74 <HAL_TIM_Base_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800302a:	f000 f887 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800302e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003032:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	4619      	mov	r1, r3
 800303a:	480d      	ldr	r0, [pc, #52]	; (8003070 <MX_TIM4_Init+0x94>)
 800303c:	f004 fa74 	bl	8007528 <HAL_TIM_ConfigClockSource>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003046:	f000 f879 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003052:	463b      	mov	r3, r7
 8003054:	4619      	mov	r1, r3
 8003056:	4806      	ldr	r0, [pc, #24]	; (8003070 <MX_TIM4_Init+0x94>)
 8003058:	f004 fdf2 	bl	8007c40 <HAL_TIMEx_MasterConfigSynchronization>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003062:	f000 f86b 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000460 	.word	0x20000460
 8003074:	40000800 	.word	0x40000800

08003078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307e:	f107 0310 	add.w	r3, r7, #16
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <MX_GPIO_Init+0xb4>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <MX_GPIO_Init+0xb4>)
 8003092:	f043 0320 	orr.w	r3, r3, #32
 8003096:	6193      	str	r3, [r2, #24]
 8003098:	4b24      	ldr	r3, [pc, #144]	; (800312c <MX_GPIO_Init+0xb4>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <MX_GPIO_Init+0xb4>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	4a20      	ldr	r2, [pc, #128]	; (800312c <MX_GPIO_Init+0xb4>)
 80030aa:	f043 0304 	orr.w	r3, r3, #4
 80030ae:	6193      	str	r3, [r2, #24]
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <MX_GPIO_Init+0xb4>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <MX_GPIO_Init+0xb4>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4a1a      	ldr	r2, [pc, #104]	; (800312c <MX_GPIO_Init+0xb4>)
 80030c2:	f043 0308 	orr.w	r3, r3, #8
 80030c6:	6193      	str	r3, [r2, #24]
 80030c8:	4b18      	ldr	r3, [pc, #96]	; (800312c <MX_GPIO_Init+0xb4>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	4815      	ldr	r0, [pc, #84]	; (8003130 <MX_GPIO_Init+0xb8>)
 80030da:	f001 fbda 	bl	8004892 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e2:	2301      	movs	r3, #1
 80030e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030e6:	2302      	movs	r3, #2
 80030e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ea:	2303      	movs	r3, #3
 80030ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80030ee:	f107 0310 	add.w	r3, r7, #16
 80030f2:	4619      	mov	r1, r3
 80030f4:	480e      	ldr	r0, [pc, #56]	; (8003130 <MX_GPIO_Init+0xb8>)
 80030f6:	f001 fa31 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 80030fa:	2302      	movs	r3, #2
 80030fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <MX_GPIO_Init+0xbc>)
 8003100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003102:	2302      	movs	r3, #2
 8003104:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8003106:	f107 0310 	add.w	r3, r7, #16
 800310a:	4619      	mov	r1, r3
 800310c:	480a      	ldr	r0, [pc, #40]	; (8003138 <MX_GPIO_Init+0xc0>)
 800310e:	f001 fa25 	bl	800455c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2100      	movs	r1, #0
 8003116:	2007      	movs	r0, #7
 8003118:	f000 ff9b 	bl	8004052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800311c:	2007      	movs	r0, #7
 800311e:	f000 ffb4 	bl	800408a <HAL_NVIC_EnableIRQ>

}
 8003122:	bf00      	nop
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	40010800 	.word	0x40010800
 8003134:	10310000 	.word	0x10310000
 8003138:	40010c00 	.word	0x40010c00

0800313c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003140:	b672      	cpsid	i
}
 8003142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003144:	e7fe      	b.n	8003144 <Error_Handler+0x8>
	...

08003148 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_MspInit+0x5c>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <HAL_MspInit+0x5c>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6193      	str	r3, [r2, #24]
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_MspInit+0x5c>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_MspInit+0x5c>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <HAL_MspInit+0x5c>)
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003170:	61d3      	str	r3, [r2, #28]
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_MspInit+0x5c>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_MspInit+0x60>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <HAL_MspInit+0x60>)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010000 	.word	0x40010000

080031ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	f107 0310 	add.w	r3, r7, #16
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_ADC_MspInit+0x7c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d129      	bne.n	8003220 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031cc:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_ADC_MspInit+0x80>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4a16      	ldr	r2, [pc, #88]	; (800322c <HAL_ADC_MspInit+0x80>)
 80031d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d6:	6193      	str	r3, [r2, #24]
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_ADC_MspInit+0x80>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_ADC_MspInit+0x80>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a10      	ldr	r2, [pc, #64]	; (800322c <HAL_ADC_MspInit+0x80>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_ADC_MspInit+0x80>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 80031fc:	2310      	movs	r3, #16
 80031fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003200:	2303      	movs	r3, #3
 8003202:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8003204:	f107 0310 	add.w	r3, r7, #16
 8003208:	4619      	mov	r1, r3
 800320a:	4809      	ldr	r0, [pc, #36]	; (8003230 <HAL_ADC_MspInit+0x84>)
 800320c:	f001 f9a6 	bl	800455c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2102      	movs	r1, #2
 8003214:	2012      	movs	r0, #18
 8003216:	f000 ff1c 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800321a:	2012      	movs	r0, #18
 800321c:	f000 ff35 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003220:	bf00      	nop
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40012400 	.word	0x40012400
 800322c:	40021000 	.word	0x40021000
 8003230:	40010800 	.word	0x40010800

08003234 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_CRC_MspInit+0x34>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10b      	bne.n	800325e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_CRC_MspInit+0x38>)
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4a08      	ldr	r2, [pc, #32]	; (800326c <HAL_CRC_MspInit+0x38>)
 800324c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003250:	6153      	str	r3, [r2, #20]
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_CRC_MspInit+0x38>)
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	40023000 	.word	0x40023000
 800326c:	40021000 	.word	0x40021000

08003270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003280:	d10c      	bne.n	800329c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <HAL_TIM_Base_MspInit+0x9c>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_TIM_Base_MspInit+0x9c>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	61d3      	str	r3, [r2, #28]
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <HAL_TIM_Base_MspInit+0x9c>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800329a:	e032      	b.n	8003302 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_TIM_Base_MspInit+0xa0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d114      	bne.n	80032d0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_TIM_Base_MspInit+0x9c>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4a18      	ldr	r2, [pc, #96]	; (800330c <HAL_TIM_Base_MspInit+0x9c>)
 80032ac:	f043 0302 	orr.w	r3, r3, #2
 80032b0:	61d3      	str	r3, [r2, #28]
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_TIM_Base_MspInit+0x9c>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	2101      	movs	r1, #1
 80032c2:	201d      	movs	r0, #29
 80032c4:	f000 fec5 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032c8:	201d      	movs	r0, #29
 80032ca:	f000 fede 	bl	800408a <HAL_NVIC_EnableIRQ>
}
 80032ce:	e018      	b.n	8003302 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <HAL_TIM_Base_MspInit+0xa4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_TIM_Base_MspInit+0x9c>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4a0b      	ldr	r2, [pc, #44]	; (800330c <HAL_TIM_Base_MspInit+0x9c>)
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	61d3      	str	r3, [r2, #28]
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_TIM_Base_MspInit+0x9c>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2100      	movs	r1, #0
 80032f6:	201e      	movs	r0, #30
 80032f8:	f000 feab 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032fc:	201e      	movs	r0, #30
 80032fe:	f000 fec4 	bl	800408a <HAL_NVIC_EnableIRQ>
}
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800

08003318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003336:	d117      	bne.n	8003368 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003338:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <HAL_TIM_MspPostInit+0x58>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <HAL_TIM_MspPostInit+0x58>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6193      	str	r3, [r2, #24]
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_TIM_MspPostInit+0x58>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8003350:	2303      	movs	r3, #3
 8003352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003354:	2302      	movs	r3, #2
 8003356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335c:	f107 0310 	add.w	r3, r7, #16
 8003360:	4619      	mov	r1, r3
 8003362:	4804      	ldr	r0, [pc, #16]	; (8003374 <HAL_TIM_MspPostInit+0x5c>)
 8003364:	f001 f8fa 	bl	800455c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003368:	bf00      	nop
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	40010800 	.word	0x40010800

08003378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800337c:	e7fe      	b.n	800337c <NMI_Handler+0x4>

0800337e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003382:	e7fe      	b.n	8003382 <HardFault_Handler+0x4>

08003384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003388:	e7fe      	b.n	8003388 <MemManage_Handler+0x4>

0800338a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800338e:	e7fe      	b.n	800338e <BusFault_Handler+0x4>

08003390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <UsageFault_Handler+0x4>

08003396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033be:	f000 f8a5 	bl	800350c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 80033c2:	f7fe f837 	bl	8001434 <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}

080033ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 80033ce:	2002      	movs	r0, #2
 80033d0:	f001 fa78 	bl	80048c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <ADC1_2_IRQHandler+0x10>)
 80033de:	f000 fa4b 	bl	8003878 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000398 	.word	0x20000398

080033ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80033f0:	4802      	ldr	r0, [pc, #8]	; (80033fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80033f2:	f001 fbb0 	bl	8004b56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20001168 	.word	0x20001168

08003400 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <TIM3_IRQHandler+0x10>)
 8003406:	f003 fec9 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000418 	.word	0x20000418

08003414 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <TIM4_IRQHandler+0x10>)
 800341a:	f003 febf 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000460 	.word	0x20000460

08003428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003436:	490d      	ldr	r1, [pc, #52]	; (800346c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003438:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800343a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800343c:	e002      	b.n	8003444 <LoopCopyDataInit>

0800343e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800343e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003442:	3304      	adds	r3, #4

08003444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003448:	d3f9      	bcc.n	800343e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800344a:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800344c:	4c0a      	ldr	r4, [pc, #40]	; (8003478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800344e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003450:	e001      	b.n	8003456 <LoopFillZerobss>

08003452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003454:	3204      	adds	r2, #4

08003456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003458:	d3fb      	bcc.n	8003452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800345a:	f7ff ffe5 	bl	8003428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800345e:	f009 fa3d 	bl	800c8dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003462:	f7ff fc23 	bl	8002cac <main>
  bx lr
 8003466:	4770      	bx	lr
  ldr r0, =_sdata
 8003468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800346c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8003470:	0800c9ec 	.word	0x0800c9ec
  ldr r2, =_sbss
 8003474:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8003478:	20001674 	.word	0x20001674

0800347c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800347c:	e7fe      	b.n	800347c <CAN1_RX1_IRQHandler>
	...

08003480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <HAL_Init+0x28>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <HAL_Init+0x28>)
 800348a:	f043 0310 	orr.w	r3, r3, #16
 800348e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003490:	2003      	movs	r0, #3
 8003492:	f000 fdd3 	bl	800403c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003496:	2004      	movs	r0, #4
 8003498:	f000 f808 	bl	80034ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800349c:	f7ff fe54 	bl	8003148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40022000 	.word	0x40022000

080034ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_InitTick+0x54>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <HAL_InitTick+0x58>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	4619      	mov	r1, r3
 80034be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fdeb 	bl	80040a6 <HAL_SYSTICK_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00e      	b.n	80034f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b0f      	cmp	r3, #15
 80034de:	d80a      	bhi.n	80034f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034e0:	2200      	movs	r2, #0
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	f000 fdb3 	bl	8004052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034ec:	4a06      	ldr	r2, [pc, #24]	; (8003508 <HAL_InitTick+0x5c>)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000028 	.word	0x20000028
 8003504:	20000030 	.word	0x20000030
 8003508:	2000002c 	.word	0x2000002c

0800350c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_IncTick+0x1c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_IncTick+0x20>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4413      	add	r3, r2
 800351c:	4a03      	ldr	r2, [pc, #12]	; (800352c <HAL_IncTick+0x20>)
 800351e:	6013      	str	r3, [r2, #0]
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	20000030 	.word	0x20000030
 800352c:	200004a8 	.word	0x200004a8

08003530 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return uwTick;
 8003534:	4b02      	ldr	r3, [pc, #8]	; (8003540 <HAL_GetTick+0x10>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	200004a8 	.word	0x200004a8

08003544 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0be      	b.n	80036e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fe12 	bl	80031ac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fb93 	bl	8003cb4 <ADC_ConversionStop_Disable>
 800358e:	4603      	mov	r3, r0
 8003590:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 8099 	bne.w	80036d2 <HAL_ADC_Init+0x18e>
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 8095 	bne.w	80036d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035b0:	f023 0302 	bic.w	r3, r3, #2
 80035b4:	f043 0202 	orr.w	r2, r3, #2
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7b1b      	ldrb	r3, [r3, #12]
 80035ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035dc:	d003      	beq.n	80035e6 <HAL_ADC_Init+0xa2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d102      	bne.n	80035ec <HAL_ADC_Init+0xa8>
 80035e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ea:	e000      	b.n	80035ee <HAL_ADC_Init+0xaa>
 80035ec:	2300      	movs	r3, #0
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7d1b      	ldrb	r3, [r3, #20]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d119      	bne.n	8003630 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7b1b      	ldrb	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	3b01      	subs	r3, #1
 800360a:	035a      	lsls	r2, r3, #13
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	e00b      	b.n	8003630 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	4b28      	ldr	r3, [pc, #160]	; (80036ec <HAL_ADC_Init+0x1a8>)
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	430b      	orrs	r3, r1
 8003656:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003660:	d003      	beq.n	800366a <HAL_ADC_Init+0x126>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d104      	bne.n	8003674 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	3b01      	subs	r3, #1
 8003670:	051b      	lsls	r3, r3, #20
 8003672:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	430a      	orrs	r2, r1
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <HAL_ADC_Init+0x1ac>)
 8003690:	4013      	ands	r3, r2
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d10b      	bne.n	80036b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036ae:	e018      	b.n	80036e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	f023 0312 	bic.w	r3, r3, #18
 80036b8:	f043 0210 	orr.w	r2, r3, #16
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036d0:	e007      	b.n	80036e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	ffe1f7fd 	.word	0xffe1f7fd
 80036f0:	ff1f0efe 	.word	0xff1f0efe

080036f4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_ADC_Start_IT+0x1a>
 800370a:	2302      	movs	r3, #2
 800370c:	e0a0      	b.n	8003850 <HAL_ADC_Start_IT+0x15c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fa72 	bl	8003c00 <ADC_Enable>
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 808f 	bne.w	8003846 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a45      	ldr	r2, [pc, #276]	; (8003858 <HAL_ADC_Start_IT+0x164>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d105      	bne.n	8003752 <HAL_ADC_Start_IT+0x5e>
 8003746:	4b45      	ldr	r3, [pc, #276]	; (800385c <HAL_ADC_Start_IT+0x168>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d115      	bne.n	800377e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d026      	beq.n	80037ba <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003774:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800377c:	e01d      	b.n	80037ba <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a33      	ldr	r2, [pc, #204]	; (800385c <HAL_ADC_Start_IT+0x168>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_ADC_Start_IT+0xaa>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a2f      	ldr	r2, [pc, #188]	; (8003858 <HAL_ADC_Start_IT+0x164>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10d      	bne.n	80037ba <HAL_ADC_Start_IT+0xc6>
 800379e:	4b2f      	ldr	r3, [pc, #188]	; (800385c <HAL_ADC_Start_IT+0x168>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f023 0206 	bic.w	r2, r3, #6
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80037d2:	e002      	b.n	80037da <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f06f 0202 	mvn.w	r2, #2
 80037ea:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0220 	orr.w	r2, r2, #32
 80037fa:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003806:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800380a:	d113      	bne.n	8003834 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003810:	4a11      	ldr	r2, [pc, #68]	; (8003858 <HAL_ADC_Start_IT+0x164>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d105      	bne.n	8003822 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_ADC_Start_IT+0x168>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	e00c      	b.n	800384e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	e003      	b.n	800384e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40012800 	.word	0x40012800
 800385c:	40012400 	.word	0x40012400

08003860 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b20      	cmp	r3, #32
 800388c:	d140      	bne.n	8003910 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b02      	cmp	r3, #2
 800389a:	d139      	bne.n	8003910 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d105      	bne.n	80038b4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80038be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80038c2:	d11d      	bne.n	8003900 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d119      	bne.n	8003900 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0220 	bic.w	r2, r2, #32
 80038da:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f043 0201 	orr.w	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fd fd69 	bl	80013d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f06f 0212 	mvn.w	r2, #18
 800390e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d14f      	bne.n	80039be <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b04      	cmp	r3, #4
 800392a:	d148      	bne.n	80039be <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800394e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003952:	d012      	beq.n	800397a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800395e:	2b00      	cmp	r3, #0
 8003960:	d125      	bne.n	80039ae <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800396c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003970:	d11d      	bne.n	80039ae <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003976:	2b00      	cmp	r3, #0
 8003978:	d119      	bne.n	80039ae <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003988:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	f043 0201 	orr.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa6e 	bl	8003e90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 020c 	mvn.w	r2, #12
 80039bc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d114      	bne.n	80039f6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10d      	bne.n	80039f6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f809 	bl	80039fe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0201 	mvn.w	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x20>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e0dc      	b.n	8003bea <HAL_ADC_ConfigChannel+0x1da>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b06      	cmp	r3, #6
 8003a3e:	d81c      	bhi.n	8003a7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	3b05      	subs	r3, #5
 8003a52:	221f      	movs	r2, #31
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	4019      	ands	r1, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	3b05      	subs	r3, #5
 8003a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34
 8003a78:	e03c      	b.n	8003af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d81c      	bhi.n	8003abc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	3b23      	subs	r3, #35	; 0x23
 8003a94:	221f      	movs	r2, #31
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	4019      	ands	r1, r3
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3b23      	subs	r3, #35	; 0x23
 8003aae:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8003aba:	e01b      	b.n	8003af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	3b41      	subs	r3, #65	; 0x41
 8003ace:	221f      	movs	r2, #31
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	4019      	ands	r1, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3b41      	subs	r3, #65	; 0x41
 8003ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b09      	cmp	r3, #9
 8003afa:	d91c      	bls.n	8003b36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68d9      	ldr	r1, [r3, #12]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3b1e      	subs	r3, #30
 8003b0e:	2207      	movs	r2, #7
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	4019      	ands	r1, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6898      	ldr	r0, [r3, #8]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	3b1e      	subs	r3, #30
 8003b28:	fa00 f203 	lsl.w	r2, r0, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]
 8003b34:	e019      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6919      	ldr	r1, [r3, #16]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	2207      	movs	r2, #7
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	4019      	ands	r1, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6898      	ldr	r0, [r3, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d003      	beq.n	8003b7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b76:	2b11      	cmp	r3, #17
 8003b78:	d132      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d125      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d126      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ba0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d11a      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <HAL_ADC_ConfigChannel+0x1ec>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	0c9a      	lsrs	r2, r3, #18
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bc0:	e002      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f9      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x1b2>
 8003bce:	e007      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	40012400 	.word	0x40012400
 8003bf8:	20000028 	.word	0x20000028
 8003bfc:	431bde83 	.word	0x431bde83

08003c00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d040      	beq.n	8003ca0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c2e:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <ADC_Enable+0xac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <ADC_Enable+0xb0>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	0c9b      	lsrs	r3, r3, #18
 8003c3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c3c:	e002      	b.n	8003c44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f9      	bne.n	8003c3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c4a:	f7ff fc71 	bl	8003530 <HAL_GetTick>
 8003c4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c50:	e01f      	b.n	8003c92 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c52:	f7ff fc6d 	bl	8003530 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d918      	bls.n	8003c92 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d011      	beq.n	8003c92 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	f043 0210 	orr.w	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e007      	b.n	8003ca2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d1d8      	bne.n	8003c52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000028 	.word	0x20000028
 8003cb0:	431bde83 	.word	0x431bde83

08003cb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d12e      	bne.n	8003d2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cde:	f7ff fc27 	bl	8003530 <HAL_GetTick>
 8003ce2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ce4:	e01b      	b.n	8003d1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ce6:	f7ff fc23 	bl	8003530 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d914      	bls.n	8003d1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10d      	bne.n	8003d1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f043 0210 	orr.w	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	f043 0201 	orr.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e007      	b.n	8003d2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d0dc      	beq.n	8003ce6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_ADCEx_Calibration_Start+0x1e>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e095      	b.n	8003e82 <HAL_ADCEx_Calibration_Start+0x14a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff ffa8 	bl	8003cb4 <ADC_ConversionStop_Disable>
 8003d64:	4603      	mov	r3, r0
 8003d66:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 8084 	bne.w	8003e78 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d78:	f023 0302 	bic.w	r3, r3, #2
 8003d7c:	f043 0202 	orr.w	r2, r3, #2
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003d84:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <HAL_ADCEx_Calibration_Start+0x154>)
 8003d86:	681c      	ldr	r4, [r3, #0]
 8003d88:	2002      	movs	r0, #2
 8003d8a:	f002 ff33 	bl	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003d94:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003d96:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003d98:	e002      	b.n	8003da0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f9      	bne.n	8003d9a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ff2a 	bl	8003c00 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0208 	orr.w	r2, r2, #8
 8003dba:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003dbc:	f7ff fbb8 	bl	8003530 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003dc2:	e01b      	b.n	8003dfc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003dc4:	f7ff fbb4 	bl	8003530 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b0a      	cmp	r3, #10
 8003dd0:	d914      	bls.n	8003dfc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	f023 0312 	bic.w	r3, r3, #18
 8003de8:	f043 0210 	orr.w	r2, r3, #16
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e042      	b.n	8003e82 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1dc      	bne.n	8003dc4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0204 	orr.w	r2, r2, #4
 8003e18:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003e1a:	f7ff fb89 	bl	8003530 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003e20:	e01b      	b.n	8003e5a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003e22:	f7ff fb85 	bl	8003530 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b0a      	cmp	r3, #10
 8003e2e:	d914      	bls.n	8003e5a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	f023 0312 	bic.w	r3, r3, #18
 8003e46:	f043 0210 	orr.w	r2, r3, #16
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e013      	b.n	8003e82 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1dc      	bne.n	8003e22 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	f023 0303 	bic.w	r3, r3, #3
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd90      	pop	{r4, r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000028 	.word	0x20000028

08003e90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
	...

08003ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ed6:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	60d3      	str	r3, [r2, #12]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 0307 	and.w	r3, r3, #7
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	db0b      	blt.n	8003f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	4906      	ldr	r1, [pc, #24]	; (8003f3c <__NVIC_EnableIRQ+0x34>)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2001      	movs	r0, #1
 8003f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	; (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	; 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf28      	it	cs
 8003fb2:	2304      	movcs	r3, #4
 8003fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d902      	bls.n	8003fc4 <NVIC_EncodePriority+0x30>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3b03      	subs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <NVIC_EncodePriority+0x32>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	4313      	orrs	r3, r2
         );
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004008:	d301      	bcc.n	800400e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400a:	2301      	movs	r3, #1
 800400c:	e00f      	b.n	800402e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800400e:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <SysTick_Config+0x40>)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004016:	210f      	movs	r1, #15
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	f7ff ff90 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <SysTick_Config+0x40>)
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <SysTick_Config+0x40>)
 8004028:	2207      	movs	r2, #7
 800402a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	e000e010 	.word	0xe000e010

0800403c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff2d 	bl	8003ea4 <__NVIC_SetPriorityGrouping>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	4603      	mov	r3, r0
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004064:	f7ff ff42 	bl	8003eec <__NVIC_GetPriorityGrouping>
 8004068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff90 	bl	8003f94 <NVIC_EncodePriority>
 8004074:	4602      	mov	r2, r0
 8004076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff5f 	bl	8003f40 <__NVIC_SetPriority>
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	4603      	mov	r3, r0
 8004092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff35 	bl	8003f08 <__NVIC_EnableIRQ>
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff ffa2 	bl	8003ff8 <SysTick_Config>
 80040b4:	4603      	mov	r3, r0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e00e      	b.n	80040ee <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	795b      	ldrb	r3, [r3, #5]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff f8a7 	bl	8003234 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b087      	sub	sp, #28
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2202      	movs	r2, #2
 800410a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e00a      	b.n	8004138 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	441a      	add	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	3301      	adds	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d3f0      	bcc.n	8004122 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800414e:	693b      	ldr	r3, [r7, #16]
}
 8004150:	4618      	mov	r0, r3
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
	...

0800415c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800415c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004176:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <HAL_FLASH_Program+0xd8>)
 8004178:	7e1b      	ldrb	r3, [r3, #24]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_FLASH_Program+0x26>
 800417e:	2302      	movs	r3, #2
 8004180:	e054      	b.n	800422c <HAL_FLASH_Program+0xd0>
 8004182:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <HAL_FLASH_Program+0xd8>)
 8004184:	2201      	movs	r2, #1
 8004186:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004188:	f24c 3050 	movw	r0, #50000	; 0xc350
 800418c:	f000 f8a8 	bl	80042e0 <FLASH_WaitForLastOperation>
 8004190:	4603      	mov	r3, r0
 8004192:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004194:	7dfb      	ldrb	r3, [r7, #23]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d144      	bne.n	8004224 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d102      	bne.n	80041a6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80041a0:	2301      	movs	r3, #1
 80041a2:	757b      	strb	r3, [r7, #21]
 80041a4:	e007      	b.n	80041b6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d102      	bne.n	80041b2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80041ac:	2302      	movs	r3, #2
 80041ae:	757b      	strb	r3, [r7, #21]
 80041b0:	e001      	b.n	80041b6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80041b2:	2304      	movs	r3, #4
 80041b4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	75bb      	strb	r3, [r7, #22]
 80041ba:	e02d      	b.n	8004218 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80041bc:	7dbb      	ldrb	r3, [r7, #22]
 80041be:	005a      	lsls	r2, r3, #1
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	eb02 0c03 	add.w	ip, r2, r3
 80041c6:	7dbb      	ldrb	r3, [r7, #22]
 80041c8:	0119      	lsls	r1, r3, #4
 80041ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ce:	f1c1 0620 	rsb	r6, r1, #32
 80041d2:	f1a1 0020 	sub.w	r0, r1, #32
 80041d6:	fa22 f401 	lsr.w	r4, r2, r1
 80041da:	fa03 f606 	lsl.w	r6, r3, r6
 80041de:	4334      	orrs	r4, r6
 80041e0:	fa23 f000 	lsr.w	r0, r3, r0
 80041e4:	4304      	orrs	r4, r0
 80041e6:	fa23 f501 	lsr.w	r5, r3, r1
 80041ea:	b2a3      	uxth	r3, r4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4660      	mov	r0, ip
 80041f0:	f000 f85a 	bl	80042a8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041f8:	f000 f872 	bl	80042e0 <FLASH_WaitForLastOperation>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_FLASH_Program+0xdc>)
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <HAL_FLASH_Program+0xdc>)
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004212:	7dbb      	ldrb	r3, [r7, #22]
 8004214:	3301      	adds	r3, #1
 8004216:	75bb      	strb	r3, [r7, #22]
 8004218:	7dba      	ldrb	r2, [r7, #22]
 800421a:	7d7b      	ldrb	r3, [r7, #21]
 800421c:	429a      	cmp	r2, r3
 800421e:	d3cd      	bcc.n	80041bc <HAL_FLASH_Program+0x60>
 8004220:	e000      	b.n	8004224 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004222:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <HAL_FLASH_Program+0xd8>)
 8004226:	2200      	movs	r2, #0
 8004228:	761a      	strb	r2, [r3, #24]

  return status;
 800422a:	7dfb      	ldrb	r3, [r7, #23]
}
 800422c:	4618      	mov	r0, r3
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004234:	200004b0 	.word	0x200004b0
 8004238:	40022000 	.word	0x40022000

0800423c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <HAL_FLASH_Unlock+0x40>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004252:	4b0a      	ldr	r3, [pc, #40]	; (800427c <HAL_FLASH_Unlock+0x40>)
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <HAL_FLASH_Unlock+0x44>)
 8004256:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004258:	4b08      	ldr	r3, [pc, #32]	; (800427c <HAL_FLASH_Unlock+0x40>)
 800425a:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <HAL_FLASH_Unlock+0x48>)
 800425c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800425e:	4b07      	ldr	r3, [pc, #28]	; (800427c <HAL_FLASH_Unlock+0x40>)
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800426e:	79fb      	ldrb	r3, [r7, #7]
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40022000 	.word	0x40022000
 8004280:	45670123 	.word	0x45670123
 8004284:	cdef89ab 	.word	0xcdef89ab

08004288 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_FLASH_Lock+0x1c>)
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <HAL_FLASH_Lock+0x1c>)
 8004292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004296:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40022000 	.word	0x40022000

080042a8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042b4:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <FLASH_Program_HalfWord+0x30>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80042ba:	4b08      	ldr	r3, [pc, #32]	; (80042dc <FLASH_Program_HalfWord+0x34>)
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	4a07      	ldr	r2, [pc, #28]	; (80042dc <FLASH_Program_HalfWord+0x34>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	887a      	ldrh	r2, [r7, #2]
 80042ca:	801a      	strh	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	200004b0 	.word	0x200004b0
 80042dc:	40022000 	.word	0x40022000

080042e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80042e8:	f7ff f922 	bl	8003530 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80042ee:	e010      	b.n	8004312 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f6:	d00c      	beq.n	8004312 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <FLASH_WaitForLastOperation+0x2e>
 80042fe:	f7ff f917 	bl	8003530 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	429a      	cmp	r2, r3
 800430c:	d201      	bcs.n	8004312 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e025      	b.n	800435e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <FLASH_WaitForLastOperation+0x88>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e8      	bne.n	80042f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800431e:	4b12      	ldr	r3, [pc, #72]	; (8004368 <FLASH_WaitForLastOperation+0x88>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <FLASH_WaitForLastOperation+0x88>)
 800432c:	2220      	movs	r2, #32
 800432e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004330:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <FLASH_WaitForLastOperation+0x88>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <FLASH_WaitForLastOperation+0x88>)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004344:	2b00      	cmp	r3, #0
 8004346:	d105      	bne.n	8004354 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004348:	4b07      	ldr	r3, [pc, #28]	; (8004368 <FLASH_WaitForLastOperation+0x88>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004354:	f000 f80a 	bl	800436c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40022000 	.word	0x40022000

0800436c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004376:	4b23      	ldr	r3, [pc, #140]	; (8004404 <FLASH_SetErrorCode+0x98>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b00      	cmp	r3, #0
 8004380:	d009      	beq.n	8004396 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004382:	4b21      	ldr	r3, [pc, #132]	; (8004408 <FLASH_SetErrorCode+0x9c>)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f043 0302 	orr.w	r3, r3, #2
 800438a:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <FLASH_SetErrorCode+0x9c>)
 800438c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f043 0310 	orr.w	r3, r3, #16
 8004394:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <FLASH_SetErrorCode+0x98>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <FLASH_SetErrorCode+0x9c>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <FLASH_SetErrorCode+0x9c>)
 80043ac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f043 0304 	orr.w	r3, r3, #4
 80043b4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <FLASH_SetErrorCode+0x98>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <FLASH_SetErrorCode+0x9c>)
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f043 0304 	orr.w	r3, r3, #4
 80043ca:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <FLASH_SetErrorCode+0x9c>)
 80043cc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80043ce:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <FLASH_SetErrorCode+0x98>)
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <FLASH_SetErrorCode+0x98>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f240 1201 	movw	r2, #257	; 0x101
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d106      	bne.n	80043f2 <FLASH_SetErrorCode+0x86>
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <FLASH_SetErrorCode+0x98>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	4a06      	ldr	r2, [pc, #24]	; (8004404 <FLASH_SetErrorCode+0x98>)
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	61d3      	str	r3, [r2, #28]
}  
 80043f0:	e002      	b.n	80043f8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80043f2:	4a04      	ldr	r2, [pc, #16]	; (8004404 <FLASH_SetErrorCode+0x98>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60d3      	str	r3, [r2, #12]
}  
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40022000 	.word	0x40022000
 8004408:	200004b0 	.word	0x200004b0

0800440c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800441e:	4b2f      	ldr	r3, [pc, #188]	; (80044dc <HAL_FLASHEx_Erase+0xd0>)
 8004420:	7e1b      	ldrb	r3, [r3, #24]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_FLASHEx_Erase+0x1e>
 8004426:	2302      	movs	r3, #2
 8004428:	e053      	b.n	80044d2 <HAL_FLASHEx_Erase+0xc6>
 800442a:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <HAL_FLASHEx_Erase+0xd0>)
 800442c:	2201      	movs	r2, #1
 800442e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d116      	bne.n	8004466 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004438:	f24c 3050 	movw	r0, #50000	; 0xc350
 800443c:	f7ff ff50 	bl	80042e0 <FLASH_WaitForLastOperation>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d141      	bne.n	80044ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004446:	2001      	movs	r0, #1
 8004448:	f000 f84c 	bl	80044e4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800444c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004450:	f7ff ff46 	bl	80042e0 <FLASH_WaitForLastOperation>
 8004454:	4603      	mov	r3, r0
 8004456:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004458:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <HAL_FLASHEx_Erase+0xd4>)
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	4a20      	ldr	r2, [pc, #128]	; (80044e0 <HAL_FLASHEx_Erase+0xd4>)
 800445e:	f023 0304 	bic.w	r3, r3, #4
 8004462:	6113      	str	r3, [r2, #16]
 8004464:	e031      	b.n	80044ca <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004466:	f24c 3050 	movw	r0, #50000	; 0xc350
 800446a:	f7ff ff39 	bl	80042e0 <FLASH_WaitForLastOperation>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d12a      	bne.n	80044ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	f04f 32ff 	mov.w	r2, #4294967295
 800447a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	e019      	b.n	80044b8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004484:	68b8      	ldr	r0, [r7, #8]
 8004486:	f000 f849 	bl	800451c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800448a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800448e:	f7ff ff27 	bl	80042e0 <FLASH_WaitForLastOperation>
 8004492:	4603      	mov	r3, r0
 8004494:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_FLASHEx_Erase+0xd4>)
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	4a11      	ldr	r2, [pc, #68]	; (80044e0 <HAL_FLASHEx_Erase+0xd4>)
 800449c:	f023 0302 	bic.w	r3, r3, #2
 80044a0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	601a      	str	r2, [r3, #0]
            break;
 80044ae:	e00c      	b.n	80044ca <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044b6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	029a      	lsls	r2, r3, #10
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3dc      	bcc.n	8004484 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80044ca:	4b04      	ldr	r3, [pc, #16]	; (80044dc <HAL_FLASHEx_Erase+0xd0>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	761a      	strb	r2, [r3, #24]

  return status;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	200004b0 	.word	0x200004b0
 80044e0:	40022000 	.word	0x40022000

080044e4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <FLASH_MassErase+0x30>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80044f2:	4b09      	ldr	r3, [pc, #36]	; (8004518 <FLASH_MassErase+0x34>)
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	4a08      	ldr	r2, [pc, #32]	; (8004518 <FLASH_MassErase+0x34>)
 80044f8:	f043 0304 	orr.w	r3, r3, #4
 80044fc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <FLASH_MassErase+0x34>)
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	4a05      	ldr	r2, [pc, #20]	; (8004518 <FLASH_MassErase+0x34>)
 8004504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004508:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	200004b0 	.word	0x200004b0
 8004518:	40022000 	.word	0x40022000

0800451c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <FLASH_PageErase+0x38>)
 8004526:	2200      	movs	r2, #0
 8004528:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <FLASH_PageErase+0x3c>)
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <FLASH_PageErase+0x3c>)
 8004530:	f043 0302 	orr.w	r3, r3, #2
 8004534:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <FLASH_PageErase+0x3c>)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <FLASH_PageErase+0x3c>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	4a05      	ldr	r2, [pc, #20]	; (8004558 <FLASH_PageErase+0x3c>)
 8004542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004546:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	200004b0 	.word	0x200004b0
 8004558:	40022000 	.word	0x40022000

0800455c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800455c:	b480      	push	{r7}
 800455e:	b08b      	sub	sp, #44	; 0x2c
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800456e:	e169      	b.n	8004844 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004570:	2201      	movs	r2, #1
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	429a      	cmp	r2, r3
 800458a:	f040 8158 	bne.w	800483e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4a9a      	ldr	r2, [pc, #616]	; (80047fc <HAL_GPIO_Init+0x2a0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d05e      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
 8004598:	4a98      	ldr	r2, [pc, #608]	; (80047fc <HAL_GPIO_Init+0x2a0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d875      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 800459e:	4a98      	ldr	r2, [pc, #608]	; (8004800 <HAL_GPIO_Init+0x2a4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d058      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
 80045a4:	4a96      	ldr	r2, [pc, #600]	; (8004800 <HAL_GPIO_Init+0x2a4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d86f      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 80045aa:	4a96      	ldr	r2, [pc, #600]	; (8004804 <HAL_GPIO_Init+0x2a8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d052      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
 80045b0:	4a94      	ldr	r2, [pc, #592]	; (8004804 <HAL_GPIO_Init+0x2a8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d869      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 80045b6:	4a94      	ldr	r2, [pc, #592]	; (8004808 <HAL_GPIO_Init+0x2ac>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d04c      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
 80045bc:	4a92      	ldr	r2, [pc, #584]	; (8004808 <HAL_GPIO_Init+0x2ac>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d863      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 80045c2:	4a92      	ldr	r2, [pc, #584]	; (800480c <HAL_GPIO_Init+0x2b0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d046      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
 80045c8:	4a90      	ldr	r2, [pc, #576]	; (800480c <HAL_GPIO_Init+0x2b0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d85d      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 80045ce:	2b12      	cmp	r3, #18
 80045d0:	d82a      	bhi.n	8004628 <HAL_GPIO_Init+0xcc>
 80045d2:	2b12      	cmp	r3, #18
 80045d4:	d859      	bhi.n	800468a <HAL_GPIO_Init+0x12e>
 80045d6:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <HAL_GPIO_Init+0x80>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	08004657 	.word	0x08004657
 80045e0:	08004631 	.word	0x08004631
 80045e4:	08004643 	.word	0x08004643
 80045e8:	08004685 	.word	0x08004685
 80045ec:	0800468b 	.word	0x0800468b
 80045f0:	0800468b 	.word	0x0800468b
 80045f4:	0800468b 	.word	0x0800468b
 80045f8:	0800468b 	.word	0x0800468b
 80045fc:	0800468b 	.word	0x0800468b
 8004600:	0800468b 	.word	0x0800468b
 8004604:	0800468b 	.word	0x0800468b
 8004608:	0800468b 	.word	0x0800468b
 800460c:	0800468b 	.word	0x0800468b
 8004610:	0800468b 	.word	0x0800468b
 8004614:	0800468b 	.word	0x0800468b
 8004618:	0800468b 	.word	0x0800468b
 800461c:	0800468b 	.word	0x0800468b
 8004620:	08004639 	.word	0x08004639
 8004624:	0800464d 	.word	0x0800464d
 8004628:	4a79      	ldr	r2, [pc, #484]	; (8004810 <HAL_GPIO_Init+0x2b4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800462e:	e02c      	b.n	800468a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	623b      	str	r3, [r7, #32]
          break;
 8004636:	e029      	b.n	800468c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	3304      	adds	r3, #4
 800463e:	623b      	str	r3, [r7, #32]
          break;
 8004640:	e024      	b.n	800468c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	3308      	adds	r3, #8
 8004648:	623b      	str	r3, [r7, #32]
          break;
 800464a:	e01f      	b.n	800468c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	330c      	adds	r3, #12
 8004652:	623b      	str	r3, [r7, #32]
          break;
 8004654:	e01a      	b.n	800468c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800465e:	2304      	movs	r3, #4
 8004660:	623b      	str	r3, [r7, #32]
          break;
 8004662:	e013      	b.n	800468c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800466c:	2308      	movs	r3, #8
 800466e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	611a      	str	r2, [r3, #16]
          break;
 8004676:	e009      	b.n	800468c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004678:	2308      	movs	r3, #8
 800467a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	615a      	str	r2, [r3, #20]
          break;
 8004682:	e003      	b.n	800468c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004684:	2300      	movs	r3, #0
 8004686:	623b      	str	r3, [r7, #32]
          break;
 8004688:	e000      	b.n	800468c <HAL_GPIO_Init+0x130>
          break;
 800468a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2bff      	cmp	r3, #255	; 0xff
 8004690:	d801      	bhi.n	8004696 <HAL_GPIO_Init+0x13a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	e001      	b.n	800469a <HAL_GPIO_Init+0x13e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2bff      	cmp	r3, #255	; 0xff
 80046a0:	d802      	bhi.n	80046a8 <HAL_GPIO_Init+0x14c>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	e002      	b.n	80046ae <HAL_GPIO_Init+0x152>
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	3b08      	subs	r3, #8
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	210f      	movs	r1, #15
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	fa01 f303 	lsl.w	r3, r1, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	401a      	ands	r2, r3
 80046c0:	6a39      	ldr	r1, [r7, #32]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	431a      	orrs	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80b1 	beq.w	800483e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046dc:	4b4d      	ldr	r3, [pc, #308]	; (8004814 <HAL_GPIO_Init+0x2b8>)
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	4a4c      	ldr	r2, [pc, #304]	; (8004814 <HAL_GPIO_Init+0x2b8>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	6193      	str	r3, [r2, #24]
 80046e8:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <HAL_GPIO_Init+0x2b8>)
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046f4:	4a48      	ldr	r2, [pc, #288]	; (8004818 <HAL_GPIO_Init+0x2bc>)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	3302      	adds	r3, #2
 80046fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004700:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	220f      	movs	r2, #15
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4013      	ands	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a40      	ldr	r2, [pc, #256]	; (800481c <HAL_GPIO_Init+0x2c0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d013      	beq.n	8004748 <HAL_GPIO_Init+0x1ec>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3f      	ldr	r2, [pc, #252]	; (8004820 <HAL_GPIO_Init+0x2c4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00d      	beq.n	8004744 <HAL_GPIO_Init+0x1e8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3e      	ldr	r2, [pc, #248]	; (8004824 <HAL_GPIO_Init+0x2c8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <HAL_GPIO_Init+0x1e4>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3d      	ldr	r2, [pc, #244]	; (8004828 <HAL_GPIO_Init+0x2cc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d101      	bne.n	800473c <HAL_GPIO_Init+0x1e0>
 8004738:	2303      	movs	r3, #3
 800473a:	e006      	b.n	800474a <HAL_GPIO_Init+0x1ee>
 800473c:	2304      	movs	r3, #4
 800473e:	e004      	b.n	800474a <HAL_GPIO_Init+0x1ee>
 8004740:	2302      	movs	r3, #2
 8004742:	e002      	b.n	800474a <HAL_GPIO_Init+0x1ee>
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <HAL_GPIO_Init+0x1ee>
 8004748:	2300      	movs	r3, #0
 800474a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474c:	f002 0203 	and.w	r2, r2, #3
 8004750:	0092      	lsls	r2, r2, #2
 8004752:	4093      	lsls	r3, r2
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800475a:	492f      	ldr	r1, [pc, #188]	; (8004818 <HAL_GPIO_Init+0x2bc>)
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	3302      	adds	r3, #2
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d006      	beq.n	8004782 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004774:	4b2d      	ldr	r3, [pc, #180]	; (800482c <HAL_GPIO_Init+0x2d0>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	492c      	ldr	r1, [pc, #176]	; (800482c <HAL_GPIO_Init+0x2d0>)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	600b      	str	r3, [r1, #0]
 8004780:	e006      	b.n	8004790 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004782:	4b2a      	ldr	r3, [pc, #168]	; (800482c <HAL_GPIO_Init+0x2d0>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	43db      	mvns	r3, r3
 800478a:	4928      	ldr	r1, [pc, #160]	; (800482c <HAL_GPIO_Init+0x2d0>)
 800478c:	4013      	ands	r3, r2
 800478e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d006      	beq.n	80047aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800479c:	4b23      	ldr	r3, [pc, #140]	; (800482c <HAL_GPIO_Init+0x2d0>)
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	4922      	ldr	r1, [pc, #136]	; (800482c <HAL_GPIO_Init+0x2d0>)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
 80047a8:	e006      	b.n	80047b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047aa:	4b20      	ldr	r3, [pc, #128]	; (800482c <HAL_GPIO_Init+0x2d0>)
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	491e      	ldr	r1, [pc, #120]	; (800482c <HAL_GPIO_Init+0x2d0>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d006      	beq.n	80047d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_GPIO_Init+0x2d0>)
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	4918      	ldr	r1, [pc, #96]	; (800482c <HAL_GPIO_Init+0x2d0>)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	608b      	str	r3, [r1, #8]
 80047d0:	e006      	b.n	80047e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047d2:	4b16      	ldr	r3, [pc, #88]	; (800482c <HAL_GPIO_Init+0x2d0>)
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	43db      	mvns	r3, r3
 80047da:	4914      	ldr	r1, [pc, #80]	; (800482c <HAL_GPIO_Init+0x2d0>)
 80047dc:	4013      	ands	r3, r2
 80047de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d021      	beq.n	8004830 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <HAL_GPIO_Init+0x2d0>)
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	490e      	ldr	r1, [pc, #56]	; (800482c <HAL_GPIO_Init+0x2d0>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60cb      	str	r3, [r1, #12]
 80047f8:	e021      	b.n	800483e <HAL_GPIO_Init+0x2e2>
 80047fa:	bf00      	nop
 80047fc:	10320000 	.word	0x10320000
 8004800:	10310000 	.word	0x10310000
 8004804:	10220000 	.word	0x10220000
 8004808:	10210000 	.word	0x10210000
 800480c:	10120000 	.word	0x10120000
 8004810:	10110000 	.word	0x10110000
 8004814:	40021000 	.word	0x40021000
 8004818:	40010000 	.word	0x40010000
 800481c:	40010800 	.word	0x40010800
 8004820:	40010c00 	.word	0x40010c00
 8004824:	40011000 	.word	0x40011000
 8004828:	40011400 	.word	0x40011400
 800482c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <HAL_GPIO_Init+0x304>)
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	43db      	mvns	r3, r3
 8004838:	4909      	ldr	r1, [pc, #36]	; (8004860 <HAL_GPIO_Init+0x304>)
 800483a:	4013      	ands	r3, r2
 800483c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	3301      	adds	r3, #1
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	fa22 f303 	lsr.w	r3, r2, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	f47f ae8e 	bne.w	8004570 <HAL_GPIO_Init+0x14>
  }
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	372c      	adds	r7, #44	; 0x2c
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40010400 	.word	0x40010400

08004864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	887b      	ldrh	r3, [r7, #2]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
 8004880:	e001      	b.n	8004886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr

08004892 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	807b      	strh	r3, [r7, #2]
 800489e:	4613      	mov	r3, r2
 80048a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048a2:	787b      	ldrb	r3, [r7, #1]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048a8:	887a      	ldrh	r2, [r7, #2]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80048ae:	e003      	b.n	80048b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048b0:	887b      	ldrh	r3, [r7, #2]
 80048b2:	041a      	lsls	r2, r3, #16
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	611a      	str	r2, [r3, #16]
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
	...

080048c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d006      	beq.n	80048e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048da:	4a05      	ldr	r2, [pc, #20]	; (80048f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fc fdb0 	bl	8001448 <HAL_GPIO_EXTI_Callback>
  }
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40010400 	.word	0x40010400

080048f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f6:	b08b      	sub	sp, #44	; 0x2c
 80048f8:	af06      	add	r7, sp, #24
 80048fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e0fd      	b.n	8004b02 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f007 fd34 	bl	800c388 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2203      	movs	r2, #3
 8004924:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f003 fa1d 	bl	8007d6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	687e      	ldr	r6, [r7, #4]
 800493a:	466d      	mov	r5, sp
 800493c:	f106 0410 	add.w	r4, r6, #16
 8004940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	602b      	str	r3, [r5, #0]
 8004948:	1d33      	adds	r3, r6, #4
 800494a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800494c:	6838      	ldr	r0, [r7, #0]
 800494e:	f003 f9e7 	bl	8007d20 <USB_CoreInit>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0ce      	b.n	8004b02 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2100      	movs	r1, #0
 800496a:	4618      	mov	r0, r3
 800496c:	f003 fa18 	bl	8007da0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]
 8004974:	e04c      	b.n	8004a10 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	440b      	add	r3, r1
 8004986:	3301      	adds	r3, #1
 8004988:	2201      	movs	r2, #1
 800498a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	440b      	add	r3, r1
 800499c:	7bfa      	ldrb	r2, [r7, #15]
 800499e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049a0:	7bfa      	ldrb	r2, [r7, #15]
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	b298      	uxth	r0, r3
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	440b      	add	r3, r1
 80049b2:	3336      	adds	r3, #54	; 0x36
 80049b4:	4602      	mov	r2, r0
 80049b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	440b      	add	r3, r1
 80049c8:	3303      	adds	r3, #3
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049ce:	7bfa      	ldrb	r2, [r7, #15]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	440b      	add	r3, r1
 80049dc:	3338      	adds	r3, #56	; 0x38
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049e2:	7bfa      	ldrb	r2, [r7, #15]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	440b      	add	r3, r1
 80049f0:	333c      	adds	r3, #60	; 0x3c
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049f6:	7bfa      	ldrb	r2, [r7, #15]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	440b      	add	r3, r1
 8004a04:	3340      	adds	r3, #64	; 0x40
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	7bfa      	ldrb	r2, [r7, #15]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d3ad      	bcc.n	8004976 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
 8004a1e:	e044      	b.n	8004aaa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a20:	7bfa      	ldrb	r2, [r7, #15]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	440b      	add	r3, r1
 8004a2e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a36:	7bfa      	ldrb	r2, [r7, #15]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	440b      	add	r3, r1
 8004a44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a48:	7bfa      	ldrb	r2, [r7, #15]
 8004a4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	440b      	add	r3, r1
 8004a5a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a62:	7bfa      	ldrb	r2, [r7, #15]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	440b      	add	r3, r1
 8004a70:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a78:	7bfa      	ldrb	r2, [r7, #15]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	440b      	add	r3, r1
 8004a86:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a8e:	7bfa      	ldrb	r2, [r7, #15]
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
 8004aaa:	7bfa      	ldrb	r2, [r7, #15]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d3b5      	bcc.n	8004a20 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	687e      	ldr	r6, [r7, #4]
 8004abc:	466d      	mov	r5, sp
 8004abe:	f106 0410 	add.w	r4, r6, #16
 8004ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	602b      	str	r3, [r5, #0]
 8004aca:	1d33      	adds	r3, r6, #4
 8004acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ace:	6838      	ldr	r0, [r7, #0]
 8004ad0:	f003 f972 	bl	8007db8 <USB_DevInit>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e00d      	b.n	8004b02 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f005 fe24 	bl	800a748 <USB_DevDisconnect>

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_PCD_Start+0x16>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e016      	b.n	8004b4e <HAL_PCD_Start+0x44>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f003 f907 	bl	8007d40 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004b32:	2101      	movs	r1, #1
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f007 fe9a 	bl	800c86e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f005 fdf8 	bl	800a734 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b088      	sub	sp, #32
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f005 fdfa 	bl	800a75c <USB_ReadInterrupts>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b72:	d102      	bne.n	8004b7a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fb5f 	bl	8005238 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f005 fdec 	bl	800a75c <USB_ReadInterrupts>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8e:	d112      	bne.n	8004bb6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba2:	b292      	uxth	r2, r2
 8004ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f007 fc68 	bl	800c47e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004bae:	2100      	movs	r1, #0
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f923 	bl	8004dfc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f005 fdce 	bl	800a75c <USB_ReadInterrupts>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bca:	d10b      	bne.n	8004be4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bde:	b292      	uxth	r2, r2
 8004be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f005 fdb7 	bl	800a75c <USB_ReadInterrupts>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf8:	d10b      	bne.n	8004c12 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c0c:	b292      	uxth	r2, r2
 8004c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f005 fda0 	bl	800a75c <USB_ReadInterrupts>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c26:	d126      	bne.n	8004c76 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0204 	bic.w	r2, r2, #4
 8004c3a:	b292      	uxth	r2, r2
 8004c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0208 	bic.w	r2, r2, #8
 8004c52:	b292      	uxth	r2, r2
 8004c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f007 fc49 	bl	800c4f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c70:	b292      	uxth	r2, r2
 8004c72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f005 fd6e 	bl	800a75c <USB_ReadInterrupts>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8a:	f040 8082 	bne.w	8004d92 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004c8e:	2300      	movs	r3, #0
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e010      	b.n	8004cb6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	7ffb      	ldrb	r3, [r7, #31]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	7ffb      	ldrb	r3, [r7, #31]
 8004ca2:	8812      	ldrh	r2, [r2, #0]
 8004ca4:	b292      	uxth	r2, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	3320      	adds	r3, #32
 8004caa:	443b      	add	r3, r7
 8004cac:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004cb0:	7ffb      	ldrb	r3, [r7, #31]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	7ffb      	ldrb	r3, [r7, #31]
 8004cb8:	2b07      	cmp	r3, #7
 8004cba:	d9eb      	bls.n	8004c94 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	b292      	uxth	r2, r2
 8004cd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0201 	bic.w	r2, r2, #1
 8004ce6:	b292      	uxth	r2, r2
 8004ce8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004cec:	bf00      	nop
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f6      	beq.n	8004cee <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d12:	b292      	uxth	r2, r2
 8004d14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e00f      	b.n	8004d3e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	4611      	mov	r1, r2
 8004d26:	7ffa      	ldrb	r2, [r7, #31]
 8004d28:	0092      	lsls	r2, r2, #2
 8004d2a:	440a      	add	r2, r1
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	3320      	adds	r3, #32
 8004d30:	443b      	add	r3, r7
 8004d32:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004d36:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004d38:	7ffb      	ldrb	r3, [r7, #31]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	7ffb      	ldrb	r3, [r7, #31]
 8004d40:	2b07      	cmp	r3, #7
 8004d42:	d9ec      	bls.n	8004d1e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0208 	orr.w	r2, r2, #8
 8004d56:	b292      	uxth	r2, r2
 8004d58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0204 	orr.w	r2, r2, #4
 8004d86:	b292      	uxth	r2, r2
 8004d88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f007 fb95 	bl	800c4bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f005 fce0 	bl	800a75c <USB_ReadInterrupts>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da6:	d10e      	bne.n	8004dc6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dba:	b292      	uxth	r2, r2
 8004dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f007 fb4e 	bl	800c462 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f005 fcc6 	bl	800a75c <USB_ReadInterrupts>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dda:	d10b      	bne.n	8004df4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dee:	b292      	uxth	r2, r2
 8004df0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004df4:	bf00      	nop
 8004df6:	3720      	adds	r7, #32
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_PCD_SetAddress+0x1a>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e013      	b.n	8004e3e <HAL_PCD_SetAddress+0x42>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f005 fc6d 	bl	800a70e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	4608      	mov	r0, r1
 8004e50:	4611      	mov	r1, r2
 8004e52:	461a      	mov	r2, r3
 8004e54:	4603      	mov	r3, r0
 8004e56:	70fb      	strb	r3, [r7, #3]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	803b      	strh	r3, [r7, #0]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	da0e      	bge.n	8004e8a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	705a      	strb	r2, [r3, #1]
 8004e88:	e00e      	b.n	8004ea8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	f003 0207 	and.w	r2, r3, #7
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004eb4:	883a      	ldrh	r2, [r7, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	78ba      	ldrb	r2, [r7, #2]
 8004ebe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d004      	beq.n	8004ed2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ed2:	78bb      	ldrb	r3, [r7, #2]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d102      	bne.n	8004ede <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_PCD_EP_Open+0xa6>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e00e      	b.n	8004f0a <HAL_PCD_EP_Open+0xc4>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f002 ff7c 	bl	8007df8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004f08:	7afb      	ldrb	r3, [r7, #11]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	da0e      	bge.n	8004f44 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	4413      	add	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	705a      	strb	r2, [r3, #1]
 8004f42:	e00e      	b.n	8004f62 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	f003 0207 	and.w	r2, r3, #7
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_PCD_EP_Close+0x6a>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e00e      	b.n	8004f9a <HAL_PCD_EP_Close+0x88>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68f9      	ldr	r1, [r7, #12]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f003 fa9e 	bl	80084cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b086      	sub	sp, #24
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fb2:	7afb      	ldrb	r3, [r7, #11]
 8004fb4:	f003 0207 	and.w	r2, r3, #7
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fe2:	7afb      	ldrb	r3, [r7, #11]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fee:	7afb      	ldrb	r3, [r7, #11]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d106      	bne.n	8005006 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6979      	ldr	r1, [r7, #20]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f003 fc50 	bl	80088a4 <USB_EPStartXfer>
 8005004:	e005      	b.n	8005012 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6979      	ldr	r1, [r7, #20]
 800500c:	4618      	mov	r0, r3
 800500e:	f003 fc49 	bl	80088a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	f003 0207 	and.w	r2, r3, #7
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	440b      	add	r3, r1
 800503a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800503e:	681b      	ldr	r3, [r3, #0]
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr

0800504a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	460b      	mov	r3, r1
 8005058:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800505a:	7afb      	ldrb	r3, [r7, #11]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2200      	movs	r2, #0
 800508e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2201      	movs	r2, #1
 8005094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005096:	7afb      	ldrb	r3, [r7, #11]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	b2da      	uxtb	r2, r3
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050a2:	7afb      	ldrb	r3, [r7, #11]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f003 fbf6 	bl	80088a4 <USB_EPStartXfer>
 80050b8:	e005      	b.n	80050c6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6979      	ldr	r1, [r7, #20]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f003 fbef 	bl	80088a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	f003 0207 	and.w	r2, r3, #7
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d901      	bls.n	80050ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e04c      	b.n	8005188 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	da0e      	bge.n	8005114 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	4413      	add	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	705a      	strb	r2, [r3, #1]
 8005112:	e00c      	b.n	800512e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005114:	78fa      	ldrb	r2, [r7, #3]
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	b2da      	uxtb	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_PCD_EP_SetStall+0x7e>
 800514a:	2302      	movs	r3, #2
 800514c:	e01c      	b.n	8005188 <HAL_PCD_EP_SetStall+0xb8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	4618      	mov	r0, r3
 800515e:	f005 f9d9 	bl	800a514 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f005 fafe 	bl	800a77a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	f003 020f 	and.w	r2, r3, #15
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d901      	bls.n	80051ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e040      	b.n	8005230 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	da0e      	bge.n	80051d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4413      	add	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	705a      	strb	r2, [r3, #1]
 80051d2:	e00e      	b.n	80051f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	f003 0207 	and.w	r2, r3, #7
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	4413      	add	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_PCD_EP_ClrStall+0x82>
 800520e:	2302      	movs	r3, #2
 8005210:	e00e      	b.n	8005230 <HAL_PCD_EP_ClrStall+0xa0>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	4618      	mov	r0, r3
 8005222:	f005 f9c7 	bl	800a5b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08e      	sub	sp, #56	; 0x38
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005240:	e2ec      	b.n	800581c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800524a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800524c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005258:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800525c:	2b00      	cmp	r3, #0
 800525e:	f040 8161 	bne.w	8005524 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005262:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	d152      	bne.n	8005312 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527c:	81fb      	strh	r3, [r7, #14]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	89fb      	ldrh	r3, [r7, #14]
 8005284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528c:	b29b      	uxth	r3, r3
 800528e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3328      	adds	r3, #40	; 0x28
 8005294:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529e:	b29b      	uxth	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	4413      	add	r3, r2
 80052aa:	3302      	adds	r3, #2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	441a      	add	r2, r3
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80052d0:	2100      	movs	r1, #0
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f007 f8ab 	bl	800c42e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 829b 	beq.w	800581c <PCD_EP_ISR_Handler+0x5e4>
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f040 8296 	bne.w	800581c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	b292      	uxth	r2, r2
 8005304:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005310:	e284      	b.n	800581c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005322:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005328:	2b00      	cmp	r3, #0
 800532a:	d034      	beq.n	8005396 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005334:	b29b      	uxth	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4413      	add	r3, r2
 8005340:	3306      	adds	r3, #6
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800536a:	b29b      	uxth	r3, r3
 800536c:	f005 fa55 	bl	800a81a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29a      	uxth	r2, r3
 8005378:	f640 738f 	movw	r3, #3983	; 0xf8f
 800537c:	4013      	ands	r3, r2
 800537e:	823b      	strh	r3, [r7, #16]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	8a3a      	ldrh	r2, [r7, #16]
 8005386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800538a:	b292      	uxth	r2, r2
 800538c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f007 f820 	bl	800c3d4 <HAL_PCD_SetupStageCallback>
 8005394:	e242      	b.n	800581c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005396:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800539a:	2b00      	cmp	r3, #0
 800539c:	f280 823e 	bge.w	800581c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80053ac:	4013      	ands	r3, r2
 80053ae:	83bb      	strh	r3, [r7, #28]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	8bba      	ldrh	r2, [r7, #28]
 80053b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053ba:	b292      	uxth	r2, r2
 80053bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	3306      	adds	r3, #6
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d019      	beq.n	8005426 <PCD_EP_ISR_Handler+0x1ee>
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d015      	beq.n	8005426 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	6959      	ldr	r1, [r3, #20]
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800540a:	b29b      	uxth	r3, r3
 800540c:	f005 fa05 	bl	800a81a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	441a      	add	r2, r3
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800541e:	2100      	movs	r1, #0
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f006 ffe9 	bl	800c3f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 81f2 	bne.w	800581c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005446:	b29b      	uxth	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	4413      	add	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d112      	bne.n	8005486 <PCD_EP_ISR_Handler+0x24e>
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800546a:	b29a      	uxth	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	801a      	strh	r2, [r3, #0]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800547a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547e:	b29a      	uxth	r2, r3
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	e02f      	b.n	80054e6 <PCD_EP_ISR_Handler+0x2ae>
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b3e      	cmp	r3, #62	; 0x3e
 800548c:	d813      	bhi.n	80054b6 <PCD_EP_ISR_Handler+0x27e>
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	633b      	str	r3, [r7, #48]	; 0x30
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <PCD_EP_ISR_Handler+0x270>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	3301      	adds	r3, #1
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	e017      	b.n	80054e6 <PCD_EP_ISR_Handler+0x2ae>
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	633b      	str	r3, [r7, #48]	; 0x30
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <PCD_EP_ISR_Handler+0x298>
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	3b01      	subs	r3, #1
 80054ce:	633b      	str	r3, [r7, #48]	; 0x30
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	029b      	lsls	r3, r3, #10
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f6:	827b      	strh	r3, [r7, #18]
 80054f8:	8a7b      	ldrh	r3, [r7, #18]
 80054fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054fe:	827b      	strh	r3, [r7, #18]
 8005500:	8a7b      	ldrh	r3, [r7, #18]
 8005502:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005506:	827b      	strh	r3, [r7, #18]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	8a7b      	ldrh	r3, [r7, #18]
 800550e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551e:	b29b      	uxth	r3, r3
 8005520:	8013      	strh	r3, [r2, #0]
 8005522:	e17b      	b.n	800581c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005536:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800553a:	2b00      	cmp	r3, #0
 800553c:	f280 80ea 	bge.w	8005714 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29a      	uxth	r2, r3
 8005552:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005556:	4013      	ands	r3, r2
 8005558:	853b      	strh	r3, [r7, #40]	; 0x28
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800556a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800556e:	b292      	uxth	r2, r2
 8005570:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005572:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4413      	add	r3, r2
 8005586:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	7b1b      	ldrb	r3, [r3, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d122      	bne.n	80055d6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	3306      	adds	r3, #6
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80055ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 8087 	beq.w	80056d0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	6959      	ldr	r1, [r3, #20]
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	88da      	ldrh	r2, [r3, #6]
 80055ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055d0:	f005 f923 	bl	800a81a <USB_ReadPMA>
 80055d4:	e07c      	b.n	80056d0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	78db      	ldrb	r3, [r3, #3]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d108      	bne.n	80055f0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80055de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055e0:	461a      	mov	r2, r3
 80055e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f927 	bl	8005838 <HAL_PCD_EP_DB_Receive>
 80055ea:	4603      	mov	r3, r0
 80055ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80055ee:	e06f      	b.n	80056d0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	847b      	strh	r3, [r7, #34]	; 0x22
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800561c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005628:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800562c:	b29b      	uxth	r3, r3
 800562e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d021      	beq.n	800568e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005652:	b29b      	uxth	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4413      	add	r3, r2
 800565e:	3302      	adds	r3, #2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005672:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005676:	2b00      	cmp	r3, #0
 8005678:	d02a      	beq.n	80056d0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	6959      	ldr	r1, [r3, #20]
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	891a      	ldrh	r2, [r3, #8]
 8005686:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005688:	f005 f8c7 	bl	800a81a <USB_ReadPMA>
 800568c:	e020      	b.n	80056d0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005696:	b29b      	uxth	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4413      	add	r3, r2
 80056a2:	3306      	adds	r3, #6
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056b6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80056b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	6959      	ldr	r1, [r3, #20]
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	895a      	ldrh	r2, [r3, #10]
 80056ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056cc:	f005 f8a5 	bl	800a81a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056d6:	441a      	add	r2, r3
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	695a      	ldr	r2, [r3, #20]
 80056e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056e2:	441a      	add	r2, r3
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <PCD_EP_ISR_Handler+0x4c2>
 80056f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d206      	bcs.n	8005708 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f006 fe79 	bl	800c3f8 <HAL_PCD_DataOutStageCallback>
 8005706:	e005      	b.n	8005714 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800570e:	4618      	mov	r0, r3
 8005710:	f003 f8c8 	bl	80088a4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005714:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571a:	2b00      	cmp	r3, #0
 800571c:	d07e      	beq.n	800581c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800571e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	4413      	add	r3, r2
 8005730:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574c:	843b      	strh	r3, [r7, #32]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	441a      	add	r2, r3
 800575c:	8c3b      	ldrh	r3, [r7, #32]
 800575e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005766:	b29b      	uxth	r3, r3
 8005768:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	78db      	ldrb	r3, [r3, #3]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d00c      	beq.n	800578c <PCD_EP_ISR_Handler+0x554>
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	78db      	ldrb	r3, [r3, #3]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800577e:	2b02      	cmp	r3, #2
 8005780:	d146      	bne.n	8005810 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005782:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d141      	bne.n	8005810 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4413      	add	r3, r2
 80057a0:	3302      	adds	r3, #2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057b4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	8bfb      	ldrh	r3, [r7, #30]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d906      	bls.n	80057ce <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	8bfb      	ldrh	r3, [r7, #30]
 80057c6:	1ad2      	subs	r2, r2, r3
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	619a      	str	r2, [r3, #24]
 80057cc:	e002      	b.n	80057d4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	2200      	movs	r2, #0
 80057d2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f006 fe23 	bl	800c42e <HAL_PCD_DataInStageCallback>
 80057e8:	e018      	b.n	800581c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	8bfb      	ldrh	r3, [r7, #30]
 80057f0:	441a      	add	r2, r3
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	69da      	ldr	r2, [r3, #28]
 80057fa:	8bfb      	ldrh	r3, [r7, #30]
 80057fc:	441a      	add	r2, r3
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005808:	4618      	mov	r0, r3
 800580a:	f003 f84b 	bl	80088a4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800580e:	e005      	b.n	800581c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005810:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005812:	461a      	mov	r2, r3
 8005814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f91b 	bl	8005a52 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005824:	b29b      	uxth	r3, r3
 8005826:	b21b      	sxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	f6ff ad0a 	blt.w	8005242 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3738      	adds	r7, #56	; 0x38
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d07e      	beq.n	800594e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005858:	b29b      	uxth	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	3302      	adds	r3, #2
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005878:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	8b7b      	ldrh	r3, [r7, #26]
 8005880:	429a      	cmp	r2, r3
 8005882:	d306      	bcc.n	8005892 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	8b7b      	ldrh	r3, [r7, #26]
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	619a      	str	r2, [r3, #24]
 8005890:	e002      	b.n	8005898 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2200      	movs	r2, #0
 8005896:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d123      	bne.n	80058e8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	833b      	strh	r3, [r7, #24]
 80058bc:	8b3b      	ldrh	r3, [r7, #24]
 80058be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058c2:	833b      	strh	r3, [r7, #24]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	8b3b      	ldrh	r3, [r7, #24]
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01f      	beq.n	8005932 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590c:	82fb      	strh	r3, [r7, #22]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	441a      	add	r2, r3
 800591c:	8afb      	ldrh	r3, [r7, #22]
 800591e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800592e:	b29b      	uxth	r3, r3
 8005930:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005932:	8b7b      	ldrh	r3, [r7, #26]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8087 	beq.w	8005a48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6959      	ldr	r1, [r3, #20]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	891a      	ldrh	r2, [r3, #8]
 8005946:	8b7b      	ldrh	r3, [r7, #26]
 8005948:	f004 ff67 	bl	800a81a <USB_ReadPMA>
 800594c:	e07c      	b.n	8005a48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005956:	b29b      	uxth	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4413      	add	r3, r2
 8005962:	3306      	adds	r3, #6
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005976:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	8b7b      	ldrh	r3, [r7, #26]
 800597e:	429a      	cmp	r2, r3
 8005980:	d306      	bcc.n	8005990 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	8b7b      	ldrh	r3, [r7, #26]
 8005988:	1ad2      	subs	r2, r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	619a      	str	r2, [r3, #24]
 800598e:	e002      	b.n	8005996 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2200      	movs	r2, #0
 8005994:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d123      	bne.n	80059e6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b8:	83fb      	strh	r3, [r7, #30]
 80059ba:	8bfb      	ldrh	r3, [r7, #30]
 80059bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059c0:	83fb      	strh	r3, [r7, #30]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	441a      	add	r2, r3
 80059d0:	8bfb      	ldrh	r3, [r7, #30]
 80059d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11f      	bne.n	8005a30 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	83bb      	strh	r3, [r7, #28]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	8bbb      	ldrh	r3, [r7, #28]
 8005a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a30:	8b7b      	ldrh	r3, [r7, #26]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d008      	beq.n	8005a48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6959      	ldr	r1, [r3, #20]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	895a      	ldrh	r2, [r3, #10]
 8005a42:	8b7b      	ldrh	r3, [r7, #26]
 8005a44:	f004 fee9 	bl	800a81a <USB_ReadPMA>
    }
  }

  return count;
 8005a48:	8b7b      	ldrh	r3, [r7, #26]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b0a2      	sub	sp, #136	; 0x88
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 81c7 	beq.w	8005dfa <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	4413      	add	r3, r2
 8005a80:	3302      	adds	r3, #2
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	699a      	ldr	r2, [r3, #24]
 8005a9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d907      	bls.n	8005ab4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005aac:	1ad2      	subs	r2, r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	619a      	str	r2, [r3, #24]
 8005ab2:	e002      	b.n	8005aba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 80b9 	bne.w	8005c36 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d126      	bne.n	8005b1a <HAL_PCD_EP_DB_Transmit+0xc8>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	4413      	add	r3, r2
 8005ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	011a      	lsls	r2, r3, #4
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	4413      	add	r3, r2
 8005aee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	801a      	strh	r2, [r3, #0]
 8005b18:	e01a      	b.n	8005b50 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d116      	bne.n	8005b50 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	633b      	str	r3, [r7, #48]	; 0x30
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	4413      	add	r3, r2
 8005b38:	633b      	str	r3, [r7, #48]	; 0x30
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	011a      	lsls	r2, r3, #4
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	4413      	add	r3, r2
 8005b44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d126      	bne.n	8005bac <HAL_PCD_EP_DB_Transmit+0x15a>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	4413      	add	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	011a      	lsls	r2, r3, #4
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	e017      	b.n	8005bdc <HAL_PCD_EP_DB_Transmit+0x18a>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d113      	bne.n	8005bdc <HAL_PCD_EP_DB_Transmit+0x18a>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	011a      	lsls	r2, r3, #4
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	4619      	mov	r1, r3
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f006 fc23 	bl	800c42e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 82d4 	beq.w	800619c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	827b      	strh	r3, [r7, #18]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	441a      	add	r2, r3
 8005c1e:	8a7b      	ldrh	r3, [r7, #18]
 8005c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	8013      	strh	r3, [r2, #0]
 8005c34:	e2b2      	b.n	800619c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d021      	beq.n	8005c84 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	441a      	add	r2, r3
 8005c6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	f040 8286 	bne.w	800619c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c98:	441a      	add	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	69da      	ldr	r2, [r3, #28]
 8005ca2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ca6:	441a      	add	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6a1a      	ldr	r2, [r3, #32]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d309      	bcc.n	8005ccc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	6a1a      	ldr	r2, [r3, #32]
 8005cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc4:	1ad2      	subs	r2, r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	621a      	str	r2, [r3, #32]
 8005cca:	e015      	b.n	8005cf8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005cd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cd8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005ce2:	e009      	b.n	8005cf8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d155      	bne.n	8005dac <HAL_PCD_EP_DB_Transmit+0x35a>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	4413      	add	r3, r2
 8005d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	011a      	lsls	r2, r3, #4
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	4413      	add	r3, r2
 8005d22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
 8005d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d112      	bne.n	8005d54 <HAL_PCD_EP_DB_Transmit+0x302>
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	e047      	b.n	8005de4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d56:	2b3e      	cmp	r3, #62	; 0x3e
 8005d58:	d811      	bhi.n	8005d7e <HAL_PCD_EP_DB_Transmit+0x32c>
 8005d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	029b      	lsls	r3, r3, #10
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e032      	b.n	8005de4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <HAL_PCD_EP_DB_Transmit+0x342>
 8005d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d90:	3b01      	subs	r3, #1
 8005d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	029b      	lsls	r3, r3, #10
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	e01b      	b.n	8005de4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d117      	bne.n	8005de4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc8:	4413      	add	r3, r2
 8005dca:	643b      	str	r3, [r7, #64]	; 0x40
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	011a      	lsls	r2, r3, #4
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	6959      	ldr	r1, [r3, #20]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	891a      	ldrh	r2, [r3, #8]
 8005df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f004 fccc 	bl	800a790 <USB_WritePMA>
 8005df8:	e1d0      	b.n	800619c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3306      	adds	r3, #6
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d307      	bcc.n	8005e42 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e3a:	1ad2      	subs	r2, r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	619a      	str	r2, [r3, #24]
 8005e40:	e002      	b.n	8005e48 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2200      	movs	r2, #0
 8005e46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 80c4 	bne.w	8005fda <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d126      	bne.n	8005ea8 <HAL_PCD_EP_DB_Transmit+0x456>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6e:	4413      	add	r3, r2
 8005e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	011a      	lsls	r2, r3, #4
 8005e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ea4:	801a      	strh	r2, [r3, #0]
 8005ea6:	e01a      	b.n	8005ede <HAL_PCD_EP_DB_Transmit+0x48c>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d116      	bne.n	8005ede <HAL_PCD_EP_DB_Transmit+0x48c>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	677b      	str	r3, [r7, #116]	; 0x74
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec4:	4413      	add	r3, r2
 8005ec6:	677b      	str	r3, [r7, #116]	; 0x74
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	011a      	lsls	r2, r3, #4
 8005ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ed8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eda:	2200      	movs	r2, #0
 8005edc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d12f      	bne.n	8005f4c <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	461a      	mov	r2, r3
 8005f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f04:	4413      	add	r3, r2
 8005f06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	011a      	lsls	r2, r3, #4
 8005f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f14:	4413      	add	r3, r2
 8005f16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	e017      	b.n	8005f7c <HAL_PCD_EP_DB_Transmit+0x52a>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d113      	bne.n	8005f7c <HAL_PCD_EP_DB_Transmit+0x52a>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f62:	4413      	add	r3, r2
 8005f64:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	011a      	lsls	r2, r3, #4
 8005f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f6e:	4413      	add	r3, r2
 8005f70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f78:	2200      	movs	r2, #0
 8005f7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	4619      	mov	r1, r3
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f006 fa53 	bl	800c42e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 8104 	bne.w	800619c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8013      	strh	r3, [r2, #0]
 8005fd8:	e0e0      	b.n	800619c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d121      	bne.n	8006028 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	441a      	add	r2, r3
 8006010:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800602e:	2b01      	cmp	r3, #1
 8006030:	f040 80b4 	bne.w	800619c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	695a      	ldr	r2, [r3, #20]
 8006038:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800603c:	441a      	add	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800604a:	441a      	add	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6a1a      	ldr	r2, [r3, #32]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	429a      	cmp	r2, r3
 800605a:	d309      	bcc.n	8006070 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006068:	1ad2      	subs	r2, r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	621a      	str	r2, [r3, #32]
 800606e:	e015      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d107      	bne.n	8006088 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006078:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800607c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006086:	e009      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2200      	movs	r2, #0
 8006092:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	667b      	str	r3, [r7, #100]	; 0x64
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d155      	bne.n	8006156 <HAL_PCD_EP_DB_Transmit+0x704>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060be:	4413      	add	r3, r2
 80060c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	011a      	lsls	r2, r3, #4
 80060c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80060d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d112      	bne.n	80060fe <HAL_PCD_EP_DB_Transmit+0x6ac>
 80060d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e044      	b.n	8006188 <HAL_PCD_EP_DB_Transmit+0x736>
 80060fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006100:	2b3e      	cmp	r3, #62	; 0x3e
 8006102:	d811      	bhi.n	8006128 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	657b      	str	r3, [r7, #84]	; 0x54
 800610a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006116:	3301      	adds	r3, #1
 8006118:	657b      	str	r3, [r7, #84]	; 0x54
 800611a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611c:	b29b      	uxth	r3, r3
 800611e:	029b      	lsls	r3, r3, #10
 8006120:	b29a      	uxth	r2, r3
 8006122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	e02f      	b.n	8006188 <HAL_PCD_EP_DB_Transmit+0x736>
 8006128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	657b      	str	r3, [r7, #84]	; 0x54
 800612e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800613a:	3b01      	subs	r3, #1
 800613c:	657b      	str	r3, [r7, #84]	; 0x54
 800613e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006140:	b29b      	uxth	r3, r3
 8006142:	029b      	lsls	r3, r3, #10
 8006144:	b29b      	uxth	r3, r3
 8006146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800614e:	b29a      	uxth	r2, r3
 8006150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	e018      	b.n	8006188 <HAL_PCD_EP_DB_Transmit+0x736>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d114      	bne.n	8006188 <HAL_PCD_EP_DB_Transmit+0x736>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006166:	b29b      	uxth	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800616c:	4413      	add	r3, r2
 800616e:	667b      	str	r3, [r7, #100]	; 0x64
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006178:	4413      	add	r3, r2
 800617a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800617e:	663b      	str	r3, [r7, #96]	; 0x60
 8006180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006182:	b29a      	uxth	r2, r3
 8006184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006186:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6959      	ldr	r1, [r3, #20]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	895a      	ldrh	r2, [r3, #10]
 8006194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006196:	b29b      	uxth	r3, r3
 8006198:	f004 fafa 	bl	800a790 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b6:	823b      	strh	r3, [r7, #16]
 80061b8:	8a3b      	ldrh	r3, [r7, #16]
 80061ba:	f083 0310 	eor.w	r3, r3, #16
 80061be:	823b      	strh	r3, [r7, #16]
 80061c0:	8a3b      	ldrh	r3, [r7, #16]
 80061c2:	f083 0320 	eor.w	r3, r3, #32
 80061c6:	823b      	strh	r3, [r7, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	8a3b      	ldrh	r3, [r7, #16]
 80061d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3788      	adds	r7, #136	; 0x88
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b087      	sub	sp, #28
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	607b      	str	r3, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	817b      	strh	r3, [r7, #10]
 8006204:	4613      	mov	r3, r2
 8006206:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006208:	897b      	ldrh	r3, [r7, #10]
 800620a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006214:	897b      	ldrh	r3, [r7, #10]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e009      	b.n	8006240 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800622c:	897a      	ldrh	r2, [r7, #10]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006240:	893b      	ldrh	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d107      	bne.n	8006256 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2200      	movs	r2, #0
 800624a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	b29a      	uxth	r2, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	80da      	strh	r2, [r3, #6]
 8006254:	e00b      	b.n	800626e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2201      	movs	r2, #1
 800625a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	b29a      	uxth	r2, r3
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	0c1b      	lsrs	r3, r3, #16
 8006268:	b29a      	uxth	r2, r3
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr
	...

0800627c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e272      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8087 	beq.w	80063aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800629c:	4b92      	ldr	r3, [pc, #584]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f003 030c 	and.w	r3, r3, #12
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d00c      	beq.n	80062c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80062a8:	4b8f      	ldr	r3, [pc, #572]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d112      	bne.n	80062da <HAL_RCC_OscConfig+0x5e>
 80062b4:	4b8c      	ldr	r3, [pc, #560]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d10b      	bne.n	80062da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c2:	4b89      	ldr	r3, [pc, #548]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d06c      	beq.n	80063a8 <HAL_RCC_OscConfig+0x12c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d168      	bne.n	80063a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e24c      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e2:	d106      	bne.n	80062f2 <HAL_RCC_OscConfig+0x76>
 80062e4:	4b80      	ldr	r3, [pc, #512]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a7f      	ldr	r2, [pc, #508]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80062ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	e02e      	b.n	8006350 <HAL_RCC_OscConfig+0xd4>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10c      	bne.n	8006314 <HAL_RCC_OscConfig+0x98>
 80062fa:	4b7b      	ldr	r3, [pc, #492]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a7a      	ldr	r2, [pc, #488]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 8006300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	4b78      	ldr	r3, [pc, #480]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a77      	ldr	r2, [pc, #476]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 800630c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	e01d      	b.n	8006350 <HAL_RCC_OscConfig+0xd4>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800631c:	d10c      	bne.n	8006338 <HAL_RCC_OscConfig+0xbc>
 800631e:	4b72      	ldr	r3, [pc, #456]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a71      	ldr	r2, [pc, #452]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 8006324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	4b6f      	ldr	r3, [pc, #444]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a6e      	ldr	r2, [pc, #440]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 8006330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e00b      	b.n	8006350 <HAL_RCC_OscConfig+0xd4>
 8006338:	4b6b      	ldr	r3, [pc, #428]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a6a      	ldr	r2, [pc, #424]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 800633e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	4b68      	ldr	r3, [pc, #416]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a67      	ldr	r2, [pc, #412]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 800634a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800634e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d013      	beq.n	8006380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006358:	f7fd f8ea 	bl	8003530 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006360:	f7fd f8e6 	bl	8003530 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b64      	cmp	r3, #100	; 0x64
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e200      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006372:	4b5d      	ldr	r3, [pc, #372]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0f0      	beq.n	8006360 <HAL_RCC_OscConfig+0xe4>
 800637e:	e014      	b.n	80063aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006380:	f7fd f8d6 	bl	8003530 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006388:	f7fd f8d2 	bl	8003530 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b64      	cmp	r3, #100	; 0x64
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e1ec      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639a:	4b53      	ldr	r3, [pc, #332]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x10c>
 80063a6:	e000      	b.n	80063aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d063      	beq.n	800647e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063b6:	4b4c      	ldr	r3, [pc, #304]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80063c2:	4b49      	ldr	r3, [pc, #292]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f003 030c 	and.w	r3, r3, #12
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d11c      	bne.n	8006408 <HAL_RCC_OscConfig+0x18c>
 80063ce:	4b46      	ldr	r3, [pc, #280]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d116      	bne.n	8006408 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063da:	4b43      	ldr	r3, [pc, #268]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_RCC_OscConfig+0x176>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d001      	beq.n	80063f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e1c0      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f2:	4b3d      	ldr	r3, [pc, #244]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4939      	ldr	r1, [pc, #228]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006406:	e03a      	b.n	800647e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d020      	beq.n	8006452 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006410:	4b36      	ldr	r3, [pc, #216]	; (80064ec <HAL_RCC_OscConfig+0x270>)
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006416:	f7fd f88b 	bl	8003530 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800641e:	f7fd f887 	bl	8003530 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e1a1      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006430:	4b2d      	ldr	r3, [pc, #180]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800643c:	4b2a      	ldr	r3, [pc, #168]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	4927      	ldr	r1, [pc, #156]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 800644c:	4313      	orrs	r3, r2
 800644e:	600b      	str	r3, [r1, #0]
 8006450:	e015      	b.n	800647e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006452:	4b26      	ldr	r3, [pc, #152]	; (80064ec <HAL_RCC_OscConfig+0x270>)
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fd f86a 	bl	8003530 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006460:	f7fd f866 	bl	8003530 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e180      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006472:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d03a      	beq.n	8006500 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d019      	beq.n	80064c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006492:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <HAL_RCC_OscConfig+0x274>)
 8006494:	2201      	movs	r2, #1
 8006496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006498:	f7fd f84a 	bl	8003530 <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064a0:	f7fd f846 	bl	8003530 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e160      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b2:	4b0d      	ldr	r3, [pc, #52]	; (80064e8 <HAL_RCC_OscConfig+0x26c>)
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f0      	beq.n	80064a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80064be:	2001      	movs	r0, #1
 80064c0:	f000 fac4 	bl	8006a4c <RCC_Delay>
 80064c4:	e01c      	b.n	8006500 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064c6:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <HAL_RCC_OscConfig+0x274>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064cc:	f7fd f830 	bl	8003530 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064d2:	e00f      	b.n	80064f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d4:	f7fd f82c 	bl	8003530 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d908      	bls.n	80064f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e146      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
 80064e6:	bf00      	nop
 80064e8:	40021000 	.word	0x40021000
 80064ec:	42420000 	.word	0x42420000
 80064f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f4:	4b92      	ldr	r3, [pc, #584]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e9      	bne.n	80064d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80a6 	beq.w	800665a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006512:	4b8b      	ldr	r3, [pc, #556]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10d      	bne.n	800653a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800651e:	4b88      	ldr	r3, [pc, #544]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	4a87      	ldr	r2, [pc, #540]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006528:	61d3      	str	r3, [r2, #28]
 800652a:	4b85      	ldr	r3, [pc, #532]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006532:	60bb      	str	r3, [r7, #8]
 8006534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006536:	2301      	movs	r3, #1
 8006538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800653a:	4b82      	ldr	r3, [pc, #520]	; (8006744 <HAL_RCC_OscConfig+0x4c8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006542:	2b00      	cmp	r3, #0
 8006544:	d118      	bne.n	8006578 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006546:	4b7f      	ldr	r3, [pc, #508]	; (8006744 <HAL_RCC_OscConfig+0x4c8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a7e      	ldr	r2, [pc, #504]	; (8006744 <HAL_RCC_OscConfig+0x4c8>)
 800654c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006552:	f7fc ffed 	bl	8003530 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800655a:	f7fc ffe9 	bl	8003530 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b64      	cmp	r3, #100	; 0x64
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e103      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656c:	4b75      	ldr	r3, [pc, #468]	; (8006744 <HAL_RCC_OscConfig+0x4c8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0f0      	beq.n	800655a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d106      	bne.n	800658e <HAL_RCC_OscConfig+0x312>
 8006580:	4b6f      	ldr	r3, [pc, #444]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	4a6e      	ldr	r2, [pc, #440]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	6213      	str	r3, [r2, #32]
 800658c:	e02d      	b.n	80065ea <HAL_RCC_OscConfig+0x36e>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10c      	bne.n	80065b0 <HAL_RCC_OscConfig+0x334>
 8006596:	4b6a      	ldr	r3, [pc, #424]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	4a69      	ldr	r2, [pc, #420]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 800659c:	f023 0301 	bic.w	r3, r3, #1
 80065a0:	6213      	str	r3, [r2, #32]
 80065a2:	4b67      	ldr	r3, [pc, #412]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	4a66      	ldr	r2, [pc, #408]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80065a8:	f023 0304 	bic.w	r3, r3, #4
 80065ac:	6213      	str	r3, [r2, #32]
 80065ae:	e01c      	b.n	80065ea <HAL_RCC_OscConfig+0x36e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b05      	cmp	r3, #5
 80065b6:	d10c      	bne.n	80065d2 <HAL_RCC_OscConfig+0x356>
 80065b8:	4b61      	ldr	r3, [pc, #388]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	4a60      	ldr	r2, [pc, #384]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80065be:	f043 0304 	orr.w	r3, r3, #4
 80065c2:	6213      	str	r3, [r2, #32]
 80065c4:	4b5e      	ldr	r3, [pc, #376]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	4a5d      	ldr	r2, [pc, #372]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	6213      	str	r3, [r2, #32]
 80065d0:	e00b      	b.n	80065ea <HAL_RCC_OscConfig+0x36e>
 80065d2:	4b5b      	ldr	r3, [pc, #364]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	4a5a      	ldr	r2, [pc, #360]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	6213      	str	r3, [r2, #32]
 80065de:	4b58      	ldr	r3, [pc, #352]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	4a57      	ldr	r2, [pc, #348]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80065e4:	f023 0304 	bic.w	r3, r3, #4
 80065e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d015      	beq.n	800661e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f2:	f7fc ff9d 	bl	8003530 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f8:	e00a      	b.n	8006610 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fa:	f7fc ff99 	bl	8003530 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f241 3288 	movw	r2, #5000	; 0x1388
 8006608:	4293      	cmp	r3, r2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e0b1      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006610:	4b4b      	ldr	r3, [pc, #300]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0ee      	beq.n	80065fa <HAL_RCC_OscConfig+0x37e>
 800661c:	e014      	b.n	8006648 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800661e:	f7fc ff87 	bl	8003530 <HAL_GetTick>
 8006622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006624:	e00a      	b.n	800663c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006626:	f7fc ff83 	bl	8003530 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	f241 3288 	movw	r2, #5000	; 0x1388
 8006634:	4293      	cmp	r3, r2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e09b      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800663c:	4b40      	ldr	r3, [pc, #256]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1ee      	bne.n	8006626 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d105      	bne.n	800665a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664e:	4b3c      	ldr	r3, [pc, #240]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	4a3b      	ldr	r2, [pc, #236]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006658:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8087 	beq.w	8006772 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006664:	4b36      	ldr	r3, [pc, #216]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 030c 	and.w	r3, r3, #12
 800666c:	2b08      	cmp	r3, #8
 800666e:	d061      	beq.n	8006734 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d146      	bne.n	8006706 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006678:	4b33      	ldr	r3, [pc, #204]	; (8006748 <HAL_RCC_OscConfig+0x4cc>)
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667e:	f7fc ff57 	bl	8003530 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006686:	f7fc ff53 	bl	8003530 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e06d      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006698:	4b29      	ldr	r3, [pc, #164]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1f0      	bne.n	8006686 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ac:	d108      	bne.n	80066c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	4921      	ldr	r1, [pc, #132]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066c0:	4b1f      	ldr	r3, [pc, #124]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a19      	ldr	r1, [r3, #32]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	430b      	orrs	r3, r1
 80066d2:	491b      	ldr	r1, [pc, #108]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066d8:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <HAL_RCC_OscConfig+0x4cc>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066de:	f7fc ff27 	bl	8003530 <HAL_GetTick>
 80066e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e6:	f7fc ff23 	bl	8003530 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e03d      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066f8:	4b11      	ldr	r3, [pc, #68]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0f0      	beq.n	80066e6 <HAL_RCC_OscConfig+0x46a>
 8006704:	e035      	b.n	8006772 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006706:	4b10      	ldr	r3, [pc, #64]	; (8006748 <HAL_RCC_OscConfig+0x4cc>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800670c:	f7fc ff10 	bl	8003530 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006714:	f7fc ff0c 	bl	8003530 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e026      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_RCC_OscConfig+0x4c4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f0      	bne.n	8006714 <HAL_RCC_OscConfig+0x498>
 8006732:	e01e      	b.n	8006772 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d107      	bne.n	800674c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e019      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
 8006740:	40021000 	.word	0x40021000
 8006744:	40007000 	.word	0x40007000
 8006748:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_RCC_OscConfig+0x500>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	429a      	cmp	r2, r3
 800675e:	d106      	bne.n	800676e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800676a:	429a      	cmp	r2, r3
 800676c:	d001      	beq.n	8006772 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40021000 	.word	0x40021000

08006780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0d0      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006794:	4b6a      	ldr	r3, [pc, #424]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d910      	bls.n	80067c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067a2:	4b67      	ldr	r3, [pc, #412]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f023 0207 	bic.w	r2, r3, #7
 80067aa:	4965      	ldr	r1, [pc, #404]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b2:	4b63      	ldr	r3, [pc, #396]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d001      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0b8      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d020      	beq.n	8006812 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067dc:	4b59      	ldr	r3, [pc, #356]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4a58      	ldr	r2, [pc, #352]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80067e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80067e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067f4:	4b53      	ldr	r3, [pc, #332]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4a52      	ldr	r2, [pc, #328]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80067fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80067fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006800:	4b50      	ldr	r3, [pc, #320]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	494d      	ldr	r1, [pc, #308]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 800680e:	4313      	orrs	r3, r2
 8006810:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d040      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d107      	bne.n	8006836 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006826:	4b47      	ldr	r3, [pc, #284]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d115      	bne.n	800685e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e07f      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d107      	bne.n	800684e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800683e:	4b41      	ldr	r3, [pc, #260]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d109      	bne.n	800685e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e073      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684e:	4b3d      	ldr	r3, [pc, #244]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e06b      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800685e:	4b39      	ldr	r3, [pc, #228]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f023 0203 	bic.w	r2, r3, #3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4936      	ldr	r1, [pc, #216]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 800686c:	4313      	orrs	r3, r2
 800686e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006870:	f7fc fe5e 	bl	8003530 <HAL_GetTick>
 8006874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006876:	e00a      	b.n	800688e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006878:	f7fc fe5a 	bl	8003530 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	f241 3288 	movw	r2, #5000	; 0x1388
 8006886:	4293      	cmp	r3, r2
 8006888:	d901      	bls.n	800688e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e053      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688e:	4b2d      	ldr	r3, [pc, #180]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f003 020c 	and.w	r2, r3, #12
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	429a      	cmp	r2, r3
 800689e:	d1eb      	bne.n	8006878 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068a0:	4b27      	ldr	r3, [pc, #156]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d210      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ae:	4b24      	ldr	r3, [pc, #144]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f023 0207 	bic.w	r2, r3, #7
 80068b6:	4922      	ldr	r1, [pc, #136]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068be:	4b20      	ldr	r3, [pc, #128]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d001      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e032      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068dc:	4b19      	ldr	r3, [pc, #100]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	4916      	ldr	r1, [pc, #88]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068fa:	4b12      	ldr	r3, [pc, #72]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	490e      	ldr	r1, [pc, #56]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 800690a:	4313      	orrs	r3, r2
 800690c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800690e:	f000 f821 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 8006912:	4602      	mov	r2, r0
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	490a      	ldr	r1, [pc, #40]	; (8006948 <HAL_RCC_ClockConfig+0x1c8>)
 8006920:	5ccb      	ldrb	r3, [r1, r3]
 8006922:	fa22 f303 	lsr.w	r3, r2, r3
 8006926:	4a09      	ldr	r2, [pc, #36]	; (800694c <HAL_RCC_ClockConfig+0x1cc>)
 8006928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800692a:	4b09      	ldr	r3, [pc, #36]	; (8006950 <HAL_RCC_ClockConfig+0x1d0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7fc fdbc 	bl	80034ac <HAL_InitTick>

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40022000 	.word	0x40022000
 8006944:	40021000 	.word	0x40021000
 8006948:	0800c9cc 	.word	0x0800c9cc
 800694c:	20000028 	.word	0x20000028
 8006950:	2000002c 	.word	0x2000002c

08006954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006954:	b490      	push	{r4, r7}
 8006956:	b08a      	sub	sp, #40	; 0x28
 8006958:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800695a:	4b29      	ldr	r3, [pc, #164]	; (8006a00 <HAL_RCC_GetSysClockFreq+0xac>)
 800695c:	1d3c      	adds	r4, r7, #4
 800695e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006964:	f240 2301 	movw	r3, #513	; 0x201
 8006968:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	2300      	movs	r3, #0
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	2300      	movs	r3, #0
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800697e:	4b21      	ldr	r3, [pc, #132]	; (8006a04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	2b04      	cmp	r3, #4
 800698c:	d002      	beq.n	8006994 <HAL_RCC_GetSysClockFreq+0x40>
 800698e:	2b08      	cmp	r3, #8
 8006990:	d003      	beq.n	800699a <HAL_RCC_GetSysClockFreq+0x46>
 8006992:	e02b      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006994:	4b1c      	ldr	r3, [pc, #112]	; (8006a08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006996:	623b      	str	r3, [r7, #32]
      break;
 8006998:	e02b      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	0c9b      	lsrs	r3, r3, #18
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	3328      	adds	r3, #40	; 0x28
 80069a4:	443b      	add	r3, r7
 80069a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80069aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d012      	beq.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069b6:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <HAL_RCC_GetSysClockFreq+0xb0>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	0c5b      	lsrs	r3, r3, #17
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	3328      	adds	r3, #40	; 0x28
 80069c2:	443b      	add	r3, r7
 80069c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80069c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4a0e      	ldr	r2, [pc, #56]	; (8006a08 <HAL_RCC_GetSysClockFreq+0xb4>)
 80069ce:	fb03 f202 	mul.w	r2, r3, r2
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
 80069da:	e004      	b.n	80069e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4a0b      	ldr	r2, [pc, #44]	; (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069e0:	fb02 f303 	mul.w	r3, r2, r3
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	623b      	str	r3, [r7, #32]
      break;
 80069ea:	e002      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <HAL_RCC_GetSysClockFreq+0xb4>)
 80069ee:	623b      	str	r3, [r7, #32]
      break;
 80069f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069f2:	6a3b      	ldr	r3, [r7, #32]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3728      	adds	r7, #40	; 0x28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc90      	pop	{r4, r7}
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	0800c968 	.word	0x0800c968
 8006a04:	40021000 	.word	0x40021000
 8006a08:	007a1200 	.word	0x007a1200
 8006a0c:	003d0900 	.word	0x003d0900

08006a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a14:	4b02      	ldr	r3, [pc, #8]	; (8006a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a16:	681b      	ldr	r3, [r3, #0]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bc80      	pop	{r7}
 8006a1e:	4770      	bx	lr
 8006a20:	20000028 	.word	0x20000028

08006a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a28:	f7ff fff2 	bl	8006a10 <HAL_RCC_GetHCLKFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	0adb      	lsrs	r3, r3, #11
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	4903      	ldr	r1, [pc, #12]	; (8006a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40021000 	.word	0x40021000
 8006a48:	0800c9dc 	.word	0x0800c9dc

08006a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <RCC_Delay+0x34>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a0a      	ldr	r2, [pc, #40]	; (8006a84 <RCC_Delay+0x38>)
 8006a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5e:	0a5b      	lsrs	r3, r3, #9
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
 8006a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a68:	bf00      	nop
  }
  while (Delay --);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	1e5a      	subs	r2, r3, #1
 8006a6e:	60fa      	str	r2, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f9      	bne.n	8006a68 <RCC_Delay+0x1c>
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr
 8006a80:	20000028 	.word	0x20000028
 8006a84:	10624dd3 	.word	0x10624dd3

08006a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d07d      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aa8:	4b4f      	ldr	r3, [pc, #316]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10d      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ab4:	4b4c      	ldr	r3, [pc, #304]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	4a4b      	ldr	r2, [pc, #300]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006abe:	61d3      	str	r3, [r2, #28]
 8006ac0:	4b49      	ldr	r3, [pc, #292]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	60bb      	str	r3, [r7, #8]
 8006aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006acc:	2301      	movs	r3, #1
 8006ace:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad0:	4b46      	ldr	r3, [pc, #280]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d118      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006adc:	4b43      	ldr	r3, [pc, #268]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a42      	ldr	r2, [pc, #264]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ae8:	f7fc fd22 	bl	8003530 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aee:	e008      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af0:	f7fc fd1e 	bl	8003530 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	; 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e06d      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b02:	4b3a      	ldr	r3, [pc, #232]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b0e:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d02e      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d027      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b2c:	4b2e      	ldr	r3, [pc, #184]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b36:	4b2e      	ldr	r3, [pc, #184]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b38:	2201      	movs	r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b3c:	4b2c      	ldr	r3, [pc, #176]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b42:	4a29      	ldr	r2, [pc, #164]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d014      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b52:	f7fc fced 	bl	8003530 <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b58:	e00a      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b5a:	f7fc fce9 	bl	8003530 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e036      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b70:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0ee      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b7c:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4917      	ldr	r1, [pc, #92]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d105      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b94:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	490b      	ldr	r1, [pc, #44]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bca:	4b07      	ldr	r3, [pc, #28]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	4904      	ldr	r1, [pc, #16]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40021000 	.word	0x40021000
 8006bec:	40007000 	.word	0x40007000
 8006bf0:	42420440 	.word	0x42420440

08006bf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006bf4:	b590      	push	{r4, r7, lr}
 8006bf6:	b08d      	sub	sp, #52	; 0x34
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006bfc:	4b58      	ldr	r3, [pc, #352]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006bfe:	f107 040c 	add.w	r4, r7, #12
 8006c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c08:	f240 2301 	movw	r3, #513	; 0x201
 8006c0c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
 8006c12:	2300      	movs	r3, #0
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c16:	2300      	movs	r3, #0
 8006c18:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61fb      	str	r3, [r7, #28]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d00a      	beq.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b10      	cmp	r3, #16
 8006c2c:	f200 808e 	bhi.w	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d049      	beq.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d079      	beq.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006c3c:	e086      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006c3e:	4b49      	ldr	r3, [pc, #292]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006c44:	4b47      	ldr	r3, [pc, #284]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d07f      	beq.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	0c9b      	lsrs	r3, r3, #18
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	3330      	adds	r3, #48	; 0x30
 8006c5a:	443b      	add	r3, r7
 8006c5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006c60:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d017      	beq.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c6c:	4b3d      	ldr	r3, [pc, #244]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	0c5b      	lsrs	r3, r3, #17
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	3330      	adds	r3, #48	; 0x30
 8006c78:	443b      	add	r3, r7
 8006c7a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006c8a:	4a37      	ldr	r2, [pc, #220]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	fb02 f303 	mul.w	r3, r2, r3
 8006c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c9a:	e004      	b.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	4a33      	ldr	r2, [pc, #204]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006ca0:	fb02 f303 	mul.w	r3, r2, r3
 8006ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006ca6:	4b2f      	ldr	r3, [pc, #188]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cb2:	d102      	bne.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006cb8:	e04a      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4a2c      	ldr	r2, [pc, #176]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc4:	085b      	lsrs	r3, r3, #1
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006cc8:	e042      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006cca:	4b26      	ldr	r3, [pc, #152]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cda:	d108      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cec:	e01f      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf8:	d109      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006cfa:	4b1a      	ldr	r3, [pc, #104]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006d06:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d0c:	e00f      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d18:	d11c      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006d1a:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d016      	beq.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006d26:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d2c:	e012      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006d2e:	e011      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006d30:	f7ff fe78 	bl	8006a24 <HAL_RCC_GetPCLK2Freq>
 8006d34:	4602      	mov	r2, r0
 8006d36:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	0b9b      	lsrs	r3, r3, #14
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	3301      	adds	r3, #1
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d4a:	e004      	b.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006d4c:	bf00      	nop
 8006d4e:	e002      	b.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006d50:	bf00      	nop
 8006d52:	e000      	b.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006d54:	bf00      	nop
    }
  }
  return (frequency);
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3734      	adds	r7, #52	; 0x34
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd90      	pop	{r4, r7, pc}
 8006d60:	0800c978 	.word	0x0800c978
 8006d64:	40021000 	.word	0x40021000
 8006d68:	007a1200 	.word	0x007a1200
 8006d6c:	003d0900 	.word	0x003d0900
 8006d70:	aaaaaaab 	.word	0xaaaaaaab

08006d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e041      	b.n	8006e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fc fa68 	bl	8003270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f000 fca0 	bl	80076f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d001      	beq.n	8006e2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e032      	b.n	8006e92 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a18      	ldr	r2, [pc, #96]	; (8006e9c <HAL_TIM_Base_Start+0x88>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00e      	beq.n	8006e5c <HAL_TIM_Base_Start+0x48>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e46:	d009      	beq.n	8006e5c <HAL_TIM_Base_Start+0x48>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a14      	ldr	r2, [pc, #80]	; (8006ea0 <HAL_TIM_Base_Start+0x8c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d004      	beq.n	8006e5c <HAL_TIM_Base_Start+0x48>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a13      	ldr	r2, [pc, #76]	; (8006ea4 <HAL_TIM_Base_Start+0x90>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d111      	bne.n	8006e80 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b06      	cmp	r3, #6
 8006e6c:	d010      	beq.n	8006e90 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0201 	orr.w	r2, r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e7e:	e007      	b.n	8006e90 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0201 	orr.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bc80      	pop	{r7}
 8006e9a:	4770      	bx	lr
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800

08006ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d001      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e03a      	b.n	8006f36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0201 	orr.w	r2, r2, #1
 8006ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a18      	ldr	r2, [pc, #96]	; (8006f40 <HAL_TIM_Base_Start_IT+0x98>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x58>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eea:	d009      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x58>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a14      	ldr	r2, [pc, #80]	; (8006f44 <HAL_TIM_Base_Start_IT+0x9c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x58>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a13      	ldr	r2, [pc, #76]	; (8006f48 <HAL_TIM_Base_Start_IT+0xa0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d111      	bne.n	8006f24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b06      	cmp	r3, #6
 8006f10:	d010      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0201 	orr.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f22:	e007      	b.n	8006f34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr
 8006f40:	40012c00 	.word	0x40012c00
 8006f44:	40000400 	.word	0x40000400
 8006f48:	40000800 	.word	0x40000800

08006f4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6a1a      	ldr	r2, [r3, #32]
 8006f6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10f      	bne.n	8006f94 <HAL_TIM_Base_Stop_IT+0x48>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	f240 4344 	movw	r3, #1092	; 0x444
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d107      	bne.n	8006f94 <HAL_TIM_Base_Stop_IT+0x48>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0201 	bic.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e041      	b.n	800703e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f839 	bl	8007046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f000 fb86 	bl	80076f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr

08007058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d109      	bne.n	800707c <HAL_TIM_PWM_Start+0x24>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	bf14      	ite	ne
 8007074:	2301      	movne	r3, #1
 8007076:	2300      	moveq	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	e022      	b.n	80070c2 <HAL_TIM_PWM_Start+0x6a>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b04      	cmp	r3, #4
 8007080:	d109      	bne.n	8007096 <HAL_TIM_PWM_Start+0x3e>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b01      	cmp	r3, #1
 800708c:	bf14      	ite	ne
 800708e:	2301      	movne	r3, #1
 8007090:	2300      	moveq	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	e015      	b.n	80070c2 <HAL_TIM_PWM_Start+0x6a>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b08      	cmp	r3, #8
 800709a:	d109      	bne.n	80070b0 <HAL_TIM_PWM_Start+0x58>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	bf14      	ite	ne
 80070a8:	2301      	movne	r3, #1
 80070aa:	2300      	moveq	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	e008      	b.n	80070c2 <HAL_TIM_PWM_Start+0x6a>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	bf14      	ite	ne
 80070bc:	2301      	movne	r3, #1
 80070be:	2300      	moveq	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e05e      	b.n	8007188 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_TIM_PWM_Start+0x82>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070d8:	e013      	b.n	8007102 <HAL_TIM_PWM_Start+0xaa>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d104      	bne.n	80070ea <HAL_TIM_PWM_Start+0x92>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070e8:	e00b      	b.n	8007102 <HAL_TIM_PWM_Start+0xaa>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Start+0xa2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070f8:	e003      	b.n	8007102 <HAL_TIM_PWM_Start+0xaa>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2202      	movs	r2, #2
 80070fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2201      	movs	r2, #1
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fd74 	bl	8007bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1e      	ldr	r2, [pc, #120]	; (8007190 <HAL_TIM_PWM_Start+0x138>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d107      	bne.n	800712a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007128:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a18      	ldr	r2, [pc, #96]	; (8007190 <HAL_TIM_PWM_Start+0x138>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00e      	beq.n	8007152 <HAL_TIM_PWM_Start+0xfa>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713c:	d009      	beq.n	8007152 <HAL_TIM_PWM_Start+0xfa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a14      	ldr	r2, [pc, #80]	; (8007194 <HAL_TIM_PWM_Start+0x13c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <HAL_TIM_PWM_Start+0xfa>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a12      	ldr	r2, [pc, #72]	; (8007198 <HAL_TIM_PWM_Start+0x140>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d111      	bne.n	8007176 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f003 0307 	and.w	r3, r3, #7
 800715c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b06      	cmp	r3, #6
 8007162:	d010      	beq.n	8007186 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0201 	orr.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007174:	e007      	b.n	8007186 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0201 	orr.w	r2, r2, #1
 8007184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800

0800719c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d122      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d11b      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0202 	mvn.w	r2, #2
 80071c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa6f 	bl	80076c2 <HAL_TIM_IC_CaptureCallback>
 80071e4:	e005      	b.n	80071f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa62 	bl	80076b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fa71 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	2b04      	cmp	r3, #4
 8007204:	d122      	bne.n	800724c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b04      	cmp	r3, #4
 8007212:	d11b      	bne.n	800724c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0204 	mvn.w	r2, #4
 800721c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa45 	bl	80076c2 <HAL_TIM_IC_CaptureCallback>
 8007238:	e005      	b.n	8007246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa38 	bl	80076b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fa47 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b08      	cmp	r3, #8
 8007258:	d122      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b08      	cmp	r3, #8
 8007266:	d11b      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0208 	mvn.w	r2, #8
 8007270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2204      	movs	r2, #4
 8007276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa1b 	bl	80076c2 <HAL_TIM_IC_CaptureCallback>
 800728c:	e005      	b.n	800729a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa0e 	bl	80076b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fa1d 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0310 	and.w	r3, r3, #16
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d122      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	d11b      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f06f 0210 	mvn.w	r2, #16
 80072c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2208      	movs	r2, #8
 80072ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9f1 	bl	80076c2 <HAL_TIM_IC_CaptureCallback>
 80072e0:	e005      	b.n	80072ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9e4 	bl	80076b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f9f3 	bl	80076d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d10e      	bne.n	8007320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b01      	cmp	r3, #1
 800730e:	d107      	bne.n	8007320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0201 	mvn.w	r2, #1
 8007318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fa f86e 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732a:	2b80      	cmp	r3, #128	; 0x80
 800732c:	d10e      	bne.n	800734c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007338:	2b80      	cmp	r3, #128	; 0x80
 800733a:	d107      	bne.n	800734c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fce1 	bl	8007d0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007356:	2b40      	cmp	r3, #64	; 0x40
 8007358:	d10e      	bne.n	8007378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	d107      	bne.n	8007378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9b7 	bl	80076e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b20      	cmp	r3, #32
 8007384:	d10e      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b20      	cmp	r3, #32
 8007392:	d107      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0220 	mvn.w	r2, #32
 800739c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fcac 	bl	8007cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e0ac      	b.n	8007520 <HAL_TIM_PWM_ConfigChannel+0x174>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b0c      	cmp	r3, #12
 80073d2:	f200 809f 	bhi.w	8007514 <HAL_TIM_PWM_ConfigChannel+0x168>
 80073d6:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	08007411 	.word	0x08007411
 80073e0:	08007515 	.word	0x08007515
 80073e4:	08007515 	.word	0x08007515
 80073e8:	08007515 	.word	0x08007515
 80073ec:	08007451 	.word	0x08007451
 80073f0:	08007515 	.word	0x08007515
 80073f4:	08007515 	.word	0x08007515
 80073f8:	08007515 	.word	0x08007515
 80073fc:	08007493 	.word	0x08007493
 8007400:	08007515 	.word	0x08007515
 8007404:	08007515 	.word	0x08007515
 8007408:	08007515 	.word	0x08007515
 800740c:	080074d3 	.word	0x080074d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68b9      	ldr	r1, [r7, #8]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f9d0 	bl	80077bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699a      	ldr	r2, [r3, #24]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0208 	orr.w	r2, r2, #8
 800742a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0204 	bic.w	r2, r2, #4
 800743a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6999      	ldr	r1, [r3, #24]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	691a      	ldr	r2, [r3, #16]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	619a      	str	r2, [r3, #24]
      break;
 800744e:	e062      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fa16 	bl	8007888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699a      	ldr	r2, [r3, #24]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800746a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800747a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6999      	ldr	r1, [r3, #24]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	021a      	lsls	r2, r3, #8
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	619a      	str	r2, [r3, #24]
      break;
 8007490:	e041      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fa5f 	bl	800795c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69da      	ldr	r2, [r3, #28]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0208 	orr.w	r2, r2, #8
 80074ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0204 	bic.w	r2, r2, #4
 80074bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69d9      	ldr	r1, [r3, #28]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	61da      	str	r2, [r3, #28]
      break;
 80074d0:	e021      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 faa9 	bl	8007a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69da      	ldr	r2, [r3, #28]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69d9      	ldr	r1, [r3, #28]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	021a      	lsls	r2, r3, #8
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	61da      	str	r2, [r3, #28]
      break;
 8007512:	e000      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007514:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_TIM_ConfigClockSource+0x18>
 800753c:	2302      	movs	r3, #2
 800753e:	e0b3      	b.n	80076a8 <HAL_TIM_ConfigClockSource+0x180>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800755e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007566:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007578:	d03e      	beq.n	80075f8 <HAL_TIM_ConfigClockSource+0xd0>
 800757a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757e:	f200 8087 	bhi.w	8007690 <HAL_TIM_ConfigClockSource+0x168>
 8007582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007586:	f000 8085 	beq.w	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 800758a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758e:	d87f      	bhi.n	8007690 <HAL_TIM_ConfigClockSource+0x168>
 8007590:	2b70      	cmp	r3, #112	; 0x70
 8007592:	d01a      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0xa2>
 8007594:	2b70      	cmp	r3, #112	; 0x70
 8007596:	d87b      	bhi.n	8007690 <HAL_TIM_ConfigClockSource+0x168>
 8007598:	2b60      	cmp	r3, #96	; 0x60
 800759a:	d050      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x116>
 800759c:	2b60      	cmp	r3, #96	; 0x60
 800759e:	d877      	bhi.n	8007690 <HAL_TIM_ConfigClockSource+0x168>
 80075a0:	2b50      	cmp	r3, #80	; 0x50
 80075a2:	d03c      	beq.n	800761e <HAL_TIM_ConfigClockSource+0xf6>
 80075a4:	2b50      	cmp	r3, #80	; 0x50
 80075a6:	d873      	bhi.n	8007690 <HAL_TIM_ConfigClockSource+0x168>
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	d058      	beq.n	800765e <HAL_TIM_ConfigClockSource+0x136>
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d86f      	bhi.n	8007690 <HAL_TIM_ConfigClockSource+0x168>
 80075b0:	2b30      	cmp	r3, #48	; 0x30
 80075b2:	d064      	beq.n	800767e <HAL_TIM_ConfigClockSource+0x156>
 80075b4:	2b30      	cmp	r3, #48	; 0x30
 80075b6:	d86b      	bhi.n	8007690 <HAL_TIM_ConfigClockSource+0x168>
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d060      	beq.n	800767e <HAL_TIM_ConfigClockSource+0x156>
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d867      	bhi.n	8007690 <HAL_TIM_ConfigClockSource+0x168>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d05c      	beq.n	800767e <HAL_TIM_ConfigClockSource+0x156>
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d05a      	beq.n	800767e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80075c8:	e062      	b.n	8007690 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	6899      	ldr	r1, [r3, #8]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f000 faee 	bl	8007bba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	609a      	str	r2, [r3, #8]
      break;
 80075f6:	e04e      	b.n	8007696 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	6899      	ldr	r1, [r3, #8]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f000 fad7 	bl	8007bba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800761a:	609a      	str	r2, [r3, #8]
      break;
 800761c:	e03b      	b.n	8007696 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	6859      	ldr	r1, [r3, #4]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	461a      	mov	r2, r3
 800762c:	f000 fa4e 	bl	8007acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2150      	movs	r1, #80	; 0x50
 8007636:	4618      	mov	r0, r3
 8007638:	f000 faa5 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 800763c:	e02b      	b.n	8007696 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	6859      	ldr	r1, [r3, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	461a      	mov	r2, r3
 800764c:	f000 fa6c 	bl	8007b28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2160      	movs	r1, #96	; 0x60
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fa95 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 800765c:	e01b      	b.n	8007696 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	6859      	ldr	r1, [r3, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	461a      	mov	r2, r3
 800766c:	f000 fa2e 	bl	8007acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2140      	movs	r1, #64	; 0x40
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fa85 	bl	8007b86 <TIM_ITRx_SetConfig>
      break;
 800767c:	e00b      	b.n	8007696 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f000 fa7c 	bl	8007b86 <TIM_ITRx_SetConfig>
        break;
 800768e:	e002      	b.n	8007696 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007690:	bf00      	nop
 8007692:	e000      	b.n	8007696 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007694:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr

080076c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bc80      	pop	{r7}
 80076d2:	4770      	bx	lr

080076d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bc80      	pop	{r7}
 80076e4:	4770      	bx	lr

080076e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bc80      	pop	{r7}
 80076f6:	4770      	bx	lr

080076f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a29      	ldr	r2, [pc, #164]	; (80077b0 <TIM_Base_SetConfig+0xb8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00b      	beq.n	8007728 <TIM_Base_SetConfig+0x30>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007716:	d007      	beq.n	8007728 <TIM_Base_SetConfig+0x30>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a26      	ldr	r2, [pc, #152]	; (80077b4 <TIM_Base_SetConfig+0xbc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d003      	beq.n	8007728 <TIM_Base_SetConfig+0x30>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a25      	ldr	r2, [pc, #148]	; (80077b8 <TIM_Base_SetConfig+0xc0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d108      	bne.n	800773a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a1c      	ldr	r2, [pc, #112]	; (80077b0 <TIM_Base_SetConfig+0xb8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00b      	beq.n	800775a <TIM_Base_SetConfig+0x62>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007748:	d007      	beq.n	800775a <TIM_Base_SetConfig+0x62>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a19      	ldr	r2, [pc, #100]	; (80077b4 <TIM_Base_SetConfig+0xbc>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d003      	beq.n	800775a <TIM_Base_SetConfig+0x62>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a18      	ldr	r2, [pc, #96]	; (80077b8 <TIM_Base_SetConfig+0xc0>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d108      	bne.n	800776c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a07      	ldr	r2, [pc, #28]	; (80077b0 <TIM_Base_SetConfig+0xb8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d103      	bne.n	80077a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	615a      	str	r2, [r3, #20]
}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr
 80077b0:	40012c00 	.word	0x40012c00
 80077b4:	40000400 	.word	0x40000400
 80077b8:	40000800 	.word	0x40000800

080077bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f023 0201 	bic.w	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0303 	bic.w	r3, r3, #3
 80077f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f023 0302 	bic.w	r3, r3, #2
 8007804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a1c      	ldr	r2, [pc, #112]	; (8007884 <TIM_OC1_SetConfig+0xc8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d10c      	bne.n	8007832 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f023 0308 	bic.w	r3, r3, #8
 800781e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4313      	orrs	r3, r2
 8007828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f023 0304 	bic.w	r3, r3, #4
 8007830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a13      	ldr	r2, [pc, #76]	; (8007884 <TIM_OC1_SetConfig+0xc8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d111      	bne.n	800785e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4313      	orrs	r3, r2
 800785c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	621a      	str	r2, [r3, #32]
}
 8007878:	bf00      	nop
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	bc80      	pop	{r7}
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40012c00 	.word	0x40012c00

08007888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	f023 0210 	bic.w	r2, r3, #16
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f023 0320 	bic.w	r3, r3, #32
 80078d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	011b      	lsls	r3, r3, #4
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a1d      	ldr	r2, [pc, #116]	; (8007958 <TIM_OC2_SetConfig+0xd0>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d10d      	bne.n	8007904 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007902:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a14      	ldr	r2, [pc, #80]	; (8007958 <TIM_OC2_SetConfig+0xd0>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d113      	bne.n	8007934 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800791a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	4313      	orrs	r3, r2
 8007926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	4313      	orrs	r3, r2
 8007932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	bc80      	pop	{r7}
 8007956:	4770      	bx	lr
 8007958:	40012c00 	.word	0x40012c00

0800795c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	021b      	lsls	r3, r3, #8
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a1d      	ldr	r2, [pc, #116]	; (8007a2c <TIM_OC3_SetConfig+0xd0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d10d      	bne.n	80079d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	021b      	lsls	r3, r3, #8
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a14      	ldr	r2, [pc, #80]	; (8007a2c <TIM_OC3_SetConfig+0xd0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d113      	bne.n	8007a06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	011b      	lsls	r3, r3, #4
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	621a      	str	r2, [r3, #32]
}
 8007a20:	bf00      	nop
 8007a22:	371c      	adds	r7, #28
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bc80      	pop	{r7}
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	40012c00 	.word	0x40012c00

08007a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	031b      	lsls	r3, r3, #12
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a0f      	ldr	r2, [pc, #60]	; (8007ac8 <TIM_OC4_SetConfig+0x98>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d109      	bne.n	8007aa4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	019b      	lsls	r3, r3, #6
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	621a      	str	r2, [r3, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	4770      	bx	lr
 8007ac8:	40012c00 	.word	0x40012c00

08007acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f023 030a 	bic.w	r3, r3, #10
 8007b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	621a      	str	r2, [r3, #32]
}
 8007b1e:	bf00      	nop
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr

08007b28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	f023 0210 	bic.w	r2, r3, #16
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	031b      	lsls	r3, r3, #12
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	621a      	str	r2, [r3, #32]
}
 8007b7c:	bf00      	nop
 8007b7e:	371c      	adds	r7, #28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bc80      	pop	{r7}
 8007b84:	4770      	bx	lr

08007b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f043 0307 	orr.w	r3, r3, #7
 8007ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	609a      	str	r2, [r3, #8]
}
 8007bb0:	bf00      	nop
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bc80      	pop	{r7}
 8007bb8:	4770      	bx	lr

08007bba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b087      	sub	sp, #28
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
 8007bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	021a      	lsls	r2, r3, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	609a      	str	r2, [r3, #8]
}
 8007bee:	bf00      	nop
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bc80      	pop	{r7}
 8007bf6:	4770      	bx	lr

08007bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1a      	ldr	r2, [r3, #32]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a1a      	ldr	r2, [r3, #32]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c30:	431a      	orrs	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	621a      	str	r2, [r3, #32]
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bc80      	pop	{r7}
 8007c3e:	4770      	bx	lr

08007c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e046      	b.n	8007ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a16      	ldr	r2, [pc, #88]	; (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00e      	beq.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca4:	d009      	beq.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a12      	ldr	r2, [pc, #72]	; (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d004      	beq.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a10      	ldr	r2, [pc, #64]	; (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d10c      	bne.n	8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr
 8007cf0:	40012c00 	.word	0x40012c00
 8007cf4:	40000400 	.word	0x40000400
 8007cf8:	40000800 	.word	0x40000800

08007cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bc80      	pop	{r7}
 8007d0c:	4770      	bx	lr

08007d0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	4770      	bx	lr

08007d20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d20:	b084      	sub	sp, #16
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	f107 0014 	add.w	r0, r7, #20
 8007d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	b004      	add	sp, #16
 8007d3e:	4770      	bx	lr

08007d40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d50:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc80      	pop	{r7}
 8007d6a:	4770      	bx	lr

08007d6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d74:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d78:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	43db      	mvns	r3, r3
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr

08007da0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bc80      	pop	{r7}
 8007db6:	4770      	bx	lr

08007db8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007db8:	b084      	sub	sp, #16
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	f107 0014 	add.w	r0, r7, #20
 8007dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	b004      	add	sp, #16
 8007df6:	4770      	bx	lr

08007df8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b09b      	sub	sp, #108	; 0x6c
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	78db      	ldrb	r3, [r3, #3]
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d81f      	bhi.n	8007e6a <USB_ActivateEndpoint+0x72>
 8007e2a:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <USB_ActivateEndpoint+0x38>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007e41 	.word	0x08007e41
 8007e34:	08007e5d 	.word	0x08007e5d
 8007e38:	08007e73 	.word	0x08007e73
 8007e3c:	08007e4f 	.word	0x08007e4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007e40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e4c:	e012      	b.n	8007e74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007e4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e52:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007e56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e5a:	e00b      	b.n	8007e74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e64:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e68:	e004      	b.n	8007e74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007e70:	e000      	b.n	8007e74 <USB_ActivateEndpoint+0x7c>
      break;
 8007e72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	441a      	add	r2, r3
 8007e7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	441a      	add	r2, r3
 8007ec4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	7b1b      	ldrb	r3, [r3, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 8149 	bne.w	8008178 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 8084 	beq.w	8007ff8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	011a      	lsls	r2, r3, #4
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f12:	613b      	str	r3, [r7, #16]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	88db      	ldrh	r3, [r3, #6]
 8007f18:	085b      	lsrs	r3, r3, #1
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	81fb      	strh	r3, [r7, #14]
 8007f32:	89fb      	ldrh	r3, [r7, #14]
 8007f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01b      	beq.n	8007f74 <USB_ActivateEndpoint+0x17c>
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f52:	81bb      	strh	r3, [r7, #12]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	441a      	add	r2, r3
 8007f5e:	89bb      	ldrh	r3, [r7, #12]
 8007f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	78db      	ldrb	r3, [r3, #3]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d020      	beq.n	8007fbe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f92:	813b      	strh	r3, [r7, #8]
 8007f94:	893b      	ldrh	r3, [r7, #8]
 8007f96:	f083 0320 	eor.w	r3, r3, #32
 8007f9a:	813b      	strh	r3, [r7, #8]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	441a      	add	r2, r3
 8007fa6:	893b      	ldrh	r3, [r7, #8]
 8007fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	8013      	strh	r3, [r2, #0]
 8007fbc:	e27f      	b.n	80084be <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd4:	817b      	strh	r3, [r7, #10]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	441a      	add	r2, r3
 8007fe0:	897b      	ldrh	r3, [r7, #10]
 8007fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	8013      	strh	r3, [r2, #0]
 8007ff6:	e262      	b.n	80084be <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008002:	b29b      	uxth	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	4413      	add	r3, r2
 800800a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	011a      	lsls	r2, r3, #4
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	4413      	add	r3, r2
 8008016:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800801a:	62bb      	str	r3, [r7, #40]	; 0x28
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	88db      	ldrh	r3, [r3, #6]
 8008020:	085b      	lsrs	r3, r3, #1
 8008022:	b29b      	uxth	r3, r3
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008036:	b29b      	uxth	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	4413      	add	r3, r2
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	011a      	lsls	r2, r3, #4
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	4413      	add	r3, r2
 800804a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800804e:	623b      	str	r3, [r7, #32]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d112      	bne.n	800807e <USB_ActivateEndpoint+0x286>
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008062:	b29a      	uxth	r2, r3
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008076:	b29a      	uxth	r2, r3
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	801a      	strh	r2, [r3, #0]
 800807c:	e02f      	b.n	80080de <USB_ActivateEndpoint+0x2e6>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b3e      	cmp	r3, #62	; 0x3e
 8008084:	d813      	bhi.n	80080ae <USB_ActivateEndpoint+0x2b6>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	085b      	lsrs	r3, r3, #1
 800808c:	663b      	str	r3, [r7, #96]	; 0x60
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <USB_ActivateEndpoint+0x2a8>
 800809a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800809c:	3301      	adds	r3, #1
 800809e:	663b      	str	r3, [r7, #96]	; 0x60
 80080a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	029b      	lsls	r3, r3, #10
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	801a      	strh	r2, [r3, #0]
 80080ac:	e017      	b.n	80080de <USB_ActivateEndpoint+0x2e6>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	095b      	lsrs	r3, r3, #5
 80080b4:	663b      	str	r3, [r7, #96]	; 0x60
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <USB_ActivateEndpoint+0x2d0>
 80080c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080c4:	3b01      	subs	r3, #1
 80080c6:	663b      	str	r3, [r7, #96]	; 0x60
 80080c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	029b      	lsls	r3, r3, #10
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d8:	b29a      	uxth	r2, r3
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	83fb      	strh	r3, [r7, #30]
 80080ec:	8bfb      	ldrh	r3, [r7, #30]
 80080ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d01b      	beq.n	800812e <USB_ActivateEndpoint+0x336>
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810c:	83bb      	strh	r3, [r7, #28]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	441a      	add	r2, r3
 8008118:	8bbb      	ldrh	r3, [r7, #28]
 800811a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800811e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812a:	b29b      	uxth	r3, r3
 800812c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	b29b      	uxth	r3, r3
 800813c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008144:	837b      	strh	r3, [r7, #26]
 8008146:	8b7b      	ldrh	r3, [r7, #26]
 8008148:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800814c:	837b      	strh	r3, [r7, #26]
 800814e:	8b7b      	ldrh	r3, [r7, #26]
 8008150:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008154:	837b      	strh	r3, [r7, #26]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	441a      	add	r2, r3
 8008160:	8b7b      	ldrh	r3, [r7, #26]
 8008162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800816a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800816e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008172:	b29b      	uxth	r3, r3
 8008174:	8013      	strh	r3, [r2, #0]
 8008176:	e1a2      	b.n	80084be <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800818a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800818e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	441a      	add	r2, r3
 800819c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80081a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081be:	b29b      	uxth	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081c4:	4413      	add	r3, r2
 80081c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	011a      	lsls	r2, r3, #4
 80081ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081d6:	657b      	str	r3, [r7, #84]	; 0x54
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	891b      	ldrh	r3, [r3, #8]
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	b29b      	uxth	r3, r3
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	653b      	str	r3, [r7, #80]	; 0x50
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	461a      	mov	r2, r3
 80081f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f8:	4413      	add	r3, r2
 80081fa:	653b      	str	r3, [r7, #80]	; 0x50
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	011a      	lsls	r2, r3, #4
 8008202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008204:	4413      	add	r3, r2
 8008206:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800820a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	895b      	ldrh	r3, [r3, #10]
 8008210:	085b      	lsrs	r3, r3, #1
 8008212:	b29b      	uxth	r3, r3
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	b29a      	uxth	r2, r3
 8008218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800821a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	785b      	ldrb	r3, [r3, #1]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f040 8091 	bne.w	8008348 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008234:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d01b      	beq.n	8008276 <USB_ActivateEndpoint+0x47e>
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008254:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	441a      	add	r2, r3
 8008260:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800826a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800826e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008272:	b29b      	uxth	r3, r3
 8008274:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	873b      	strh	r3, [r7, #56]	; 0x38
 8008284:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01b      	beq.n	80082c6 <USB_ActivateEndpoint+0x4ce>
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	441a      	add	r2, r3
 80082b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80082de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80082e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80082e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80082e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	441a      	add	r2, r3
 80082f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80082fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830a:	b29b      	uxth	r3, r3
 800830c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008324:	867b      	strh	r3, [r7, #50]	; 0x32
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	441a      	add	r2, r3
 8008330:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800833a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800833e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008342:	b29b      	uxth	r3, r3
 8008344:	8013      	strh	r3, [r2, #0]
 8008346:	e0ba      	b.n	80084be <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008358:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800835c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01d      	beq.n	80083a0 <USB_ActivateEndpoint+0x5a8>
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	441a      	add	r2, r3
 8008388:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800838c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839c:	b29b      	uxth	r3, r3
 800839e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80083b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80083b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d01d      	beq.n	80083f8 <USB_ActivateEndpoint+0x600>
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	441a      	add	r2, r3
 80083e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80083e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	78db      	ldrb	r3, [r3, #3]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d024      	beq.n	800844a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	b29b      	uxth	r3, r3
 800840e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008416:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800841a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800841e:	f083 0320 	eor.w	r3, r3, #32
 8008422:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	441a      	add	r2, r3
 8008430:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008444:	b29b      	uxth	r3, r3
 8008446:	8013      	strh	r3, [r2, #0]
 8008448:	e01d      	b.n	8008486 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29b      	uxth	r3, r3
 8008458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800845c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008460:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	441a      	add	r2, r3
 800846e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800847a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008482:	b29b      	uxth	r3, r3
 8008484:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b29b      	uxth	r3, r3
 8008494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	441a      	add	r2, r3
 80084a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80084be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	376c      	adds	r7, #108	; 0x6c
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr

080084cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b08d      	sub	sp, #52	; 0x34
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	7b1b      	ldrb	r3, [r3, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f040 808e 	bne.w	80085fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d044      	beq.n	8008572 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	81bb      	strh	r3, [r7, #12]
 80084f6:	89bb      	ldrh	r3, [r7, #12]
 80084f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01b      	beq.n	8008538 <USB_DeactivateEndpoint+0x6c>
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008516:	817b      	strh	r3, [r7, #10]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	441a      	add	r2, r3
 8008522:	897b      	ldrh	r3, [r7, #10]
 8008524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800852c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008534:	b29b      	uxth	r3, r3
 8008536:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800854e:	813b      	strh	r3, [r7, #8]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	441a      	add	r2, r3
 800855a:	893b      	ldrh	r3, [r7, #8]
 800855c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856c:	b29b      	uxth	r3, r3
 800856e:	8013      	strh	r3, [r2, #0]
 8008570:	e192      	b.n	8008898 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	827b      	strh	r3, [r7, #18]
 8008580:	8a7b      	ldrh	r3, [r7, #18]
 8008582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d01b      	beq.n	80085c2 <USB_DeactivateEndpoint+0xf6>
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b29b      	uxth	r3, r3
 8008598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800859c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a0:	823b      	strh	r3, [r7, #16]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	441a      	add	r2, r3
 80085ac:	8a3b      	ldrh	r3, [r7, #16]
 80085ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085be:	b29b      	uxth	r3, r3
 80085c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d8:	81fb      	strh	r3, [r7, #14]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	441a      	add	r2, r3
 80085e4:	89fb      	ldrh	r3, [r7, #14]
 80085e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	8013      	strh	r3, [r2, #0]
 80085fa:	e14d      	b.n	8008898 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f040 80a5 	bne.w	8008750 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	843b      	strh	r3, [r7, #32]
 8008614:	8c3b      	ldrh	r3, [r7, #32]
 8008616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d01b      	beq.n	8008656 <USB_DeactivateEndpoint+0x18a>
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008634:	83fb      	strh	r3, [r7, #30]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	441a      	add	r2, r3
 8008640:	8bfb      	ldrh	r3, [r7, #30]
 8008642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800864a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800864e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008652:	b29b      	uxth	r3, r3
 8008654:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	83bb      	strh	r3, [r7, #28]
 8008664:	8bbb      	ldrh	r3, [r7, #28]
 8008666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01b      	beq.n	80086a6 <USB_DeactivateEndpoint+0x1da>
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	b29b      	uxth	r3, r3
 800867c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008684:	837b      	strh	r3, [r7, #26]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	441a      	add	r2, r3
 8008690:	8b7b      	ldrh	r3, [r7, #26]
 8008692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800869a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800869e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086bc:	833b      	strh	r3, [r7, #24]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	441a      	add	r2, r3
 80086c8:	8b3b      	ldrh	r3, [r7, #24]
 80086ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086da:	b29b      	uxth	r3, r3
 80086dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f4:	82fb      	strh	r3, [r7, #22]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	441a      	add	r2, r3
 8008700:	8afb      	ldrh	r3, [r7, #22]
 8008702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800870a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800870e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008712:	b29b      	uxth	r3, r3
 8008714:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	b29b      	uxth	r3, r3
 8008724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800872c:	82bb      	strh	r3, [r7, #20]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	441a      	add	r2, r3
 8008738:	8abb      	ldrh	r3, [r7, #20]
 800873a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800873e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874a:	b29b      	uxth	r3, r3
 800874c:	8013      	strh	r3, [r2, #0]
 800874e:	e0a3      	b.n	8008898 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800875e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d01b      	beq.n	80087a0 <USB_DeactivateEndpoint+0x2d4>
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800877a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	441a      	add	r2, r3
 800878a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800878c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879c:	b29b      	uxth	r3, r3
 800879e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80087ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01b      	beq.n	80087f0 <USB_DeactivateEndpoint+0x324>
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	441a      	add	r2, r3
 80087da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008806:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	441a      	add	r2, r3
 8008812:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800881c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008824:	b29b      	uxth	r3, r3
 8008826:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800883a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800883e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	441a      	add	r2, r3
 800884a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800884c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885c:	b29b      	uxth	r3, r3
 800885e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008876:	847b      	strh	r3, [r7, #34]	; 0x22
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	441a      	add	r2, r3
 8008882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800888c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008894:	b29b      	uxth	r3, r3
 8008896:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3734      	adds	r7, #52	; 0x34
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr

080088a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b0cc      	sub	sp, #304	; 0x130
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088b2:	6018      	str	r0, [r3, #0]
 80088b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088bc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	785b      	ldrb	r3, [r3, #1]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	f041 817d 	bne.w	8009bca <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80088d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699a      	ldr	r2, [r3, #24]
 80088dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d908      	bls.n	80088fe <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80088ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80088fc:	e007      	b.n	800890e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80088fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800890e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	7b1b      	ldrb	r3, [r3, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d152      	bne.n	80089c4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800891e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6959      	ldr	r1, [r3, #20]
 800892a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	88da      	ldrh	r2, [r3, #6]
 8008936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893a:	b29b      	uxth	r3, r3
 800893c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008940:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008944:	6800      	ldr	r0, [r0, #0]
 8008946:	f001 ff23 	bl	800a790 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800894a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008952:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008956:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008962:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800896c:	b29b      	uxth	r3, r3
 800896e:	4619      	mov	r1, r3
 8008970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008974:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008978:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800897c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008980:	6812      	ldr	r2, [r2, #0]
 8008982:	440a      	add	r2, r1
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800898a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	011a      	lsls	r2, r3, #4
 8008994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008998:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4413      	add	r3, r2
 80089a0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80089a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	801a      	strh	r2, [r3, #0]
 80089c0:	f001 b8b5 	b.w	8009b2e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80089c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	78db      	ldrb	r3, [r3, #3]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	f040 84c6 	bne.w	8009362 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80089d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6a1a      	ldr	r2, [r3, #32]
 80089e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	f240 8443 	bls.w	800927a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80089f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	441a      	add	r2, r3
 8008a38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a44:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6a1a      	ldr	r2, [r3, #32]
 8008a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a60:	1ad2      	subs	r2, r2, r3
 8008a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f000 823e 	beq.w	8008f12 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008a9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008aa2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008aa6:	6812      	ldr	r2, [r2, #0]
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	785b      	ldrb	r3, [r3, #1]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f040 809a 	bne.w	8008bf0 <USB_EPStartXfer+0x34c>
 8008abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ac8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008acc:	6812      	ldr	r2, [r2, #0]
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008aee:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	440a      	add	r2, r1
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	011a      	lsls	r2, r3, #4
 8008b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4413      	add	r3, r2
 8008b12:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d122      	bne.n	8008b6e <USB_EPStartXfer+0x2ca>
 8008b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	801a      	strh	r2, [r3, #0]
 8008b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	e079      	b.n	8008c62 <USB_EPStartXfer+0x3be>
 8008b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b72:	2b3e      	cmp	r3, #62	; 0x3e
 8008b74:	d81b      	bhi.n	8008bae <USB_EPStartXfer+0x30a>
 8008b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7a:	085b      	lsrs	r3, r3, #1
 8008b7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d004      	beq.n	8008b96 <USB_EPStartXfer+0x2f2>
 8008b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b90:	3301      	adds	r3, #1
 8008b92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008b96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	029b      	lsls	r3, r3, #10
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	801a      	strh	r2, [r3, #0]
 8008bac:	e059      	b.n	8008c62 <USB_EPStartXfer+0x3be>
 8008bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb2:	095b      	lsrs	r3, r3, #5
 8008bb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bbc:	f003 031f 	and.w	r3, r3, #31
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d104      	bne.n	8008bce <USB_EPStartXfer+0x32a>
 8008bc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008bce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	029b      	lsls	r3, r3, #10
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008be6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	801a      	strh	r2, [r3, #0]
 8008bee:	e038      	b.n	8008c62 <USB_EPStartXfer+0x3be>
 8008bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	785b      	ldrb	r3, [r3, #1]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d130      	bne.n	8008c62 <USB_EPStartXfer+0x3be>
 8008c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	4619      	mov	r1, r3
 8008c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c16:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008c1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c1e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008c22:	6812      	ldr	r2, [r2, #0]
 8008c24:	440a      	add	r2, r1
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	011a      	lsls	r2, r3, #4
 8008c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c3a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4413      	add	r3, r2
 8008c42:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	895b      	ldrh	r3, [r3, #10]
 8008c6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6959      	ldr	r1, [r3, #20]
 8008c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008c8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008c90:	6800      	ldr	r0, [r0, #0]
 8008c92:	f001 fd7d 	bl	800a790 <USB_WritePMA>
            ep->xfer_buff += len;
 8008c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695a      	ldr	r2, [r3, #20]
 8008ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca6:	441a      	add	r2, r3
 8008ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6a1a      	ldr	r2, [r3, #32]
 8008cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d90f      	bls.n	8008cf0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6a1a      	ldr	r2, [r3, #32]
 8008cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce0:	1ad2      	subs	r2, r2, r3
 8008ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	621a      	str	r2, [r3, #32]
 8008cee:	e00e      	b.n	8008d0e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f040 809a 	bne.w	8008e54 <USB_EPStartXfer+0x5b0>
 8008d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d2c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d30:	6812      	ldr	r2, [r2, #0]
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	4619      	mov	r1, r3
 8008d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d52:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008d56:	6812      	ldr	r2, [r2, #0]
 8008d58:	440a      	add	r2, r1
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	011a      	lsls	r2, r3, #4
 8008d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4413      	add	r3, r2
 8008d76:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d122      	bne.n	8008dd2 <USB_EPStartXfer+0x52e>
 8008d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	801a      	strh	r2, [r3, #0]
 8008dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	801a      	strh	r2, [r3, #0]
 8008dd0:	e083      	b.n	8008eda <USB_EPStartXfer+0x636>
 8008dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd6:	2b3e      	cmp	r3, #62	; 0x3e
 8008dd8:	d81b      	bhi.n	8008e12 <USB_EPStartXfer+0x56e>
 8008dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <USB_EPStartXfer+0x556>
 8008df0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008df4:	3301      	adds	r3, #1
 8008df6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008dfa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	029b      	lsls	r3, r3, #10
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	e063      	b.n	8008eda <USB_EPStartXfer+0x636>
 8008e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e16:	095b      	lsrs	r3, r3, #5
 8008e18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d104      	bne.n	8008e32 <USB_EPStartXfer+0x58e>
 8008e28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e32:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	029b      	lsls	r3, r3, #10
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e4a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	801a      	strh	r2, [r3, #0]
 8008e52:	e042      	b.n	8008eda <USB_EPStartXfer+0x636>
 8008e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	785b      	ldrb	r3, [r3, #1]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d13a      	bne.n	8008eda <USB_EPStartXfer+0x636>
 8008e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008e6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e70:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008e74:	6812      	ldr	r2, [r2, #0]
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	4619      	mov	r1, r3
 8008e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008e92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e96:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	440a      	add	r2, r1
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	011a      	lsls	r2, r3, #4
 8008eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	891b      	ldrh	r3, [r3, #8]
 8008ee6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6959      	ldr	r1, [r3, #20]
 8008ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f00:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008f04:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008f08:	6800      	ldr	r0, [r0, #0]
 8008f0a:	f001 fc41 	bl	800a790 <USB_WritePMA>
 8008f0e:	f000 be0e 	b.w	8009b2e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	785b      	ldrb	r3, [r3, #1]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d16d      	bne.n	8008ffe <USB_EPStartXfer+0x75a>
 8008f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f42:	4413      	add	r3, r2
 8008f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	011a      	lsls	r2, r3, #4
 8008f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f56:	4413      	add	r3, r2
 8008f58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d112      	bne.n	8008f8c <USB_EPStartXfer+0x6e8>
 8008f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f74:	801a      	strh	r2, [r3, #0]
 8008f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f88:	801a      	strh	r2, [r3, #0]
 8008f8a:	e063      	b.n	8009054 <USB_EPStartXfer+0x7b0>
 8008f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f90:	2b3e      	cmp	r3, #62	; 0x3e
 8008f92:	d817      	bhi.n	8008fc4 <USB_EPStartXfer+0x720>
 8008f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f98:	085b      	lsrs	r3, r3, #1
 8008f9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d004      	beq.n	8008fb4 <USB_EPStartXfer+0x710>
 8008faa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fae:	3301      	adds	r3, #1
 8008fb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008fb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	029b      	lsls	r3, r3, #10
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc0:	801a      	strh	r2, [r3, #0]
 8008fc2:	e047      	b.n	8009054 <USB_EPStartXfer+0x7b0>
 8008fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd2:	f003 031f 	and.w	r3, r3, #31
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d104      	bne.n	8008fe4 <USB_EPStartXfer+0x740>
 8008fda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008fe4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	029b      	lsls	r3, r3, #10
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ffa:	801a      	strh	r2, [r3, #0]
 8008ffc:	e02a      	b.n	8009054 <USB_EPStartXfer+0x7b0>
 8008ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	785b      	ldrb	r3, [r3, #1]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d122      	bne.n	8009054 <USB_EPStartXfer+0x7b0>
 800900e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	653b      	str	r3, [r7, #80]	; 0x50
 800901a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800901e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009028:	b29b      	uxth	r3, r3
 800902a:	461a      	mov	r2, r3
 800902c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800902e:	4413      	add	r3, r2
 8009030:	653b      	str	r3, [r7, #80]	; 0x50
 8009032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	011a      	lsls	r2, r3, #4
 8009040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009042:	4413      	add	r3, r2
 8009044:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800904a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904e:	b29a      	uxth	r2, r3
 8009050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009052:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	891b      	ldrh	r3, [r3, #8]
 8009060:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6959      	ldr	r1, [r3, #20]
 8009070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009074:	b29b      	uxth	r3, r3
 8009076:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800907a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800907e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009082:	6800      	ldr	r0, [r0, #0]
 8009084:	f001 fb84 	bl	800a790 <USB_WritePMA>
            ep->xfer_buff += len;
 8009088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	695a      	ldr	r2, [r3, #20]
 8009094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009098:	441a      	add	r2, r3
 800909a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80090a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6a1a      	ldr	r2, [r3, #32]
 80090b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d90f      	bls.n	80090e2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80090c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6a1a      	ldr	r2, [r3, #32]
 80090ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d2:	1ad2      	subs	r2, r2, r3
 80090d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	621a      	str	r2, [r3, #32]
 80090e0:	e00e      	b.n	8009100 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80090e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80090f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2200      	movs	r2, #0
 80090fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009104:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	643b      	str	r3, [r7, #64]	; 0x40
 800910c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	785b      	ldrb	r3, [r3, #1]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d16d      	bne.n	80091f8 <USB_EPStartXfer+0x954>
 800911c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009120:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	63bb      	str	r3, [r7, #56]	; 0x38
 8009128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800912c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009136:	b29b      	uxth	r3, r3
 8009138:	461a      	mov	r2, r3
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	4413      	add	r3, r2
 800913e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	011a      	lsls	r2, r3, #4
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	4413      	add	r3, r2
 8009152:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
 8009158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d112      	bne.n	8009186 <USB_EPStartXfer+0x8e2>
 8009160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800916a:	b29a      	uxth	r2, r3
 800916c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916e:	801a      	strh	r2, [r3, #0]
 8009170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	b29b      	uxth	r3, r3
 8009176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800917a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800917e:	b29a      	uxth	r2, r3
 8009180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009182:	801a      	strh	r2, [r3, #0]
 8009184:	e05d      	b.n	8009242 <USB_EPStartXfer+0x99e>
 8009186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800918a:	2b3e      	cmp	r3, #62	; 0x3e
 800918c:	d817      	bhi.n	80091be <USB_EPStartXfer+0x91a>
 800918e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009192:	085b      	lsrs	r3, r3, #1
 8009194:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d004      	beq.n	80091ae <USB_EPStartXfer+0x90a>
 80091a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091a8:	3301      	adds	r3, #1
 80091aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80091ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	029b      	lsls	r3, r3, #10
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	e041      	b.n	8009242 <USB_EPStartXfer+0x99e>
 80091be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091c2:	095b      	lsrs	r3, r3, #5
 80091c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80091c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091cc:	f003 031f 	and.w	r3, r3, #31
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <USB_EPStartXfer+0x93a>
 80091d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091d8:	3b01      	subs	r3, #1
 80091da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80091de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	029b      	lsls	r3, r3, #10
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f4:	801a      	strh	r2, [r3, #0]
 80091f6:	e024      	b.n	8009242 <USB_EPStartXfer+0x99e>
 80091f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	785b      	ldrb	r3, [r3, #1]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d11c      	bne.n	8009242 <USB_EPStartXfer+0x99e>
 8009208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800920c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009216:	b29b      	uxth	r3, r3
 8009218:	461a      	mov	r2, r3
 800921a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800921c:	4413      	add	r3, r2
 800921e:	643b      	str	r3, [r7, #64]	; 0x40
 8009220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	011a      	lsls	r2, r3, #4
 800922e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009230:	4413      	add	r3, r2
 8009232:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800923c:	b29a      	uxth	r2, r3
 800923e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009240:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	895b      	ldrh	r3, [r3, #10]
 800924e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6959      	ldr	r1, [r3, #20]
 800925e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009262:	b29b      	uxth	r3, r3
 8009264:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009268:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800926c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009270:	6800      	ldr	r0, [r0, #0]
 8009272:	f001 fa8d 	bl	800a790 <USB_WritePMA>
 8009276:	f000 bc5a 	b.w	8009b2e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800927a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800927e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800928a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009298:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80092ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80092b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	441a      	add	r2, r3
 80092ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80092d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80092e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009300:	b29b      	uxth	r3, r3
 8009302:	461a      	mov	r2, r3
 8009304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009306:	4413      	add	r3, r2
 8009308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800930a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800930e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	011a      	lsls	r2, r3, #4
 8009318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800931a:	4413      	add	r3, r2
 800931c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009320:	65bb      	str	r3, [r7, #88]	; 0x58
 8009322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009326:	b29a      	uxth	r2, r3
 8009328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800932a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800932c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	891b      	ldrh	r3, [r3, #8]
 8009338:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800933c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6959      	ldr	r1, [r3, #20]
 8009348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800934c:	b29b      	uxth	r3, r3
 800934e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009352:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009356:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800935a:	6800      	ldr	r0, [r0, #0]
 800935c:	f001 fa18 	bl	800a790 <USB_WritePMA>
 8009360:	e3e5      	b.n	8009b2e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009366:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	b29b      	uxth	r3, r3
 8009380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009388:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800938c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009390:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800939a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	441a      	add	r2, r3
 80093a6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80093aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80093b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80093be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6a1a      	ldr	r2, [r3, #32]
 80093ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ce:	1ad2      	subs	r2, r2, r3
 80093d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80093dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 81bc 	beq.w	800977c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d16d      	bne.n	80094fe <USB_EPStartXfer+0xc5a>
 8009422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	67bb      	str	r3, [r7, #120]	; 0x78
 800942e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800943c:	b29b      	uxth	r3, r3
 800943e:	461a      	mov	r2, r3
 8009440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009442:	4413      	add	r3, r2
 8009444:	67bb      	str	r3, [r7, #120]	; 0x78
 8009446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800944a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	011a      	lsls	r2, r3, #4
 8009454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009456:	4413      	add	r3, r2
 8009458:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800945c:	677b      	str	r3, [r7, #116]	; 0x74
 800945e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d112      	bne.n	800948c <USB_EPStartXfer+0xbe8>
 8009466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	b29b      	uxth	r3, r3
 800946c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009470:	b29a      	uxth	r2, r3
 8009472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009474:	801a      	strh	r2, [r3, #0]
 8009476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	b29b      	uxth	r3, r3
 800947c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009484:	b29a      	uxth	r2, r3
 8009486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009488:	801a      	strh	r2, [r3, #0]
 800948a:	e060      	b.n	800954e <USB_EPStartXfer+0xcaa>
 800948c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009490:	2b3e      	cmp	r3, #62	; 0x3e
 8009492:	d817      	bhi.n	80094c4 <USB_EPStartXfer+0xc20>
 8009494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009498:	085b      	lsrs	r3, r3, #1
 800949a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800949e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <USB_EPStartXfer+0xc10>
 80094aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094ae:	3301      	adds	r3, #1
 80094b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	029b      	lsls	r3, r3, #10
 80094bc:	b29a      	uxth	r2, r3
 80094be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c0:	801a      	strh	r2, [r3, #0]
 80094c2:	e044      	b.n	800954e <USB_EPStartXfer+0xcaa>
 80094c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c8:	095b      	lsrs	r3, r3, #5
 80094ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d2:	f003 031f 	and.w	r3, r3, #31
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d104      	bne.n	80094e4 <USB_EPStartXfer+0xc40>
 80094da:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094de:	3b01      	subs	r3, #1
 80094e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	029b      	lsls	r3, r3, #10
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094fa:	801a      	strh	r2, [r3, #0]
 80094fc:	e027      	b.n	800954e <USB_EPStartXfer+0xcaa>
 80094fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	785b      	ldrb	r3, [r3, #1]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d11f      	bne.n	800954e <USB_EPStartXfer+0xcaa>
 800950e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800951c:	b29b      	uxth	r3, r3
 800951e:	461a      	mov	r2, r3
 8009520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009524:	4413      	add	r3, r2
 8009526:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800952a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800952e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	011a      	lsls	r2, r3, #4
 8009538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800953c:	4413      	add	r3, r2
 800953e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009542:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009548:	b29a      	uxth	r2, r3
 800954a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800954c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800954e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	895b      	ldrh	r3, [r3, #10]
 800955a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800955e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6959      	ldr	r1, [r3, #20]
 800956a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800956e:	b29b      	uxth	r3, r3
 8009570:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009574:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009578:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800957c:	6800      	ldr	r0, [r0, #0]
 800957e:	f001 f907 	bl	800a790 <USB_WritePMA>
          ep->xfer_buff += len;
 8009582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	695a      	ldr	r2, [r3, #20]
 800958e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009592:	441a      	add	r2, r3
 8009594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80095a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6a1a      	ldr	r2, [r3, #32]
 80095ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d90f      	bls.n	80095dc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80095bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6a1a      	ldr	r2, [r3, #32]
 80095c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095cc:	1ad2      	subs	r2, r2, r3
 80095ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	621a      	str	r2, [r3, #32]
 80095da:	e00e      	b.n	80095fa <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80095dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6a1b      	ldr	r3, [r3, #32]
 80095e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80095ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2200      	movs	r2, #0
 80095f8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80095fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 8295 	beq.w	8009b2e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	785b      	ldrb	r3, [r3, #1]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d16d      	bne.n	80096f0 <USB_EPStartXfer+0xe4c>
 8009614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009624:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800962e:	b29b      	uxth	r3, r3
 8009630:	461a      	mov	r2, r3
 8009632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009634:	4413      	add	r3, r2
 8009636:	66bb      	str	r3, [r7, #104]	; 0x68
 8009638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800963c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	011a      	lsls	r2, r3, #4
 8009646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009648:	4413      	add	r3, r2
 800964a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800964e:	667b      	str	r3, [r7, #100]	; 0x64
 8009650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d112      	bne.n	800967e <USB_EPStartXfer+0xdda>
 8009658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b29b      	uxth	r3, r3
 800965e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009662:	b29a      	uxth	r2, r3
 8009664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009666:	801a      	strh	r2, [r3, #0]
 8009668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	b29b      	uxth	r3, r3
 800966e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009676:	b29a      	uxth	r2, r3
 8009678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800967a:	801a      	strh	r2, [r3, #0]
 800967c:	e063      	b.n	8009746 <USB_EPStartXfer+0xea2>
 800967e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009682:	2b3e      	cmp	r3, #62	; 0x3e
 8009684:	d817      	bhi.n	80096b6 <USB_EPStartXfer+0xe12>
 8009686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968a:	085b      	lsrs	r3, r3, #1
 800968c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	2b00      	cmp	r3, #0
 800969a:	d004      	beq.n	80096a6 <USB_EPStartXfer+0xe02>
 800969c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a0:	3301      	adds	r3, #1
 80096a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	029b      	lsls	r3, r3, #10
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096b2:	801a      	strh	r2, [r3, #0]
 80096b4:	e047      	b.n	8009746 <USB_EPStartXfer+0xea2>
 80096b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ba:	095b      	lsrs	r3, r3, #5
 80096bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <USB_EPStartXfer+0xe32>
 80096cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d0:	3b01      	subs	r3, #1
 80096d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096da:	b29b      	uxth	r3, r3
 80096dc:	029b      	lsls	r3, r3, #10
 80096de:	b29b      	uxth	r3, r3
 80096e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	e02a      	b.n	8009746 <USB_EPStartXfer+0xea2>
 80096f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	785b      	ldrb	r3, [r3, #1]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d122      	bne.n	8009746 <USB_EPStartXfer+0xea2>
 8009700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	673b      	str	r3, [r7, #112]	; 0x70
 800970c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800971a:	b29b      	uxth	r3, r3
 800971c:	461a      	mov	r2, r3
 800971e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009720:	4413      	add	r3, r2
 8009722:	673b      	str	r3, [r7, #112]	; 0x70
 8009724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	011a      	lsls	r2, r3, #4
 8009732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009734:	4413      	add	r3, r2
 8009736:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800973a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800973c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009740:	b29a      	uxth	r2, r3
 8009742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009744:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800974a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	891b      	ldrh	r3, [r3, #8]
 8009752:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800975a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6959      	ldr	r1, [r3, #20]
 8009762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009766:	b29b      	uxth	r3, r3
 8009768:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800976c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009770:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009774:	6800      	ldr	r0, [r0, #0]
 8009776:	f001 f80b 	bl	800a790 <USB_WritePMA>
 800977a:	e1d8      	b.n	8009b2e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800977c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	785b      	ldrb	r3, [r3, #1]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d178      	bne.n	800987e <USB_EPStartXfer+0xfda>
 800978c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009790:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800979a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800979e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	461a      	mov	r2, r3
 80097ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097b0:	4413      	add	r3, r2
 80097b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	011a      	lsls	r2, r3, #4
 80097c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097c8:	4413      	add	r3, r2
 80097ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d116      	bne.n	8009808 <USB_EPStartXfer+0xf64>
 80097da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097ec:	801a      	strh	r2, [r3, #0]
 80097ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097fe:	b29a      	uxth	r2, r3
 8009800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	e06b      	b.n	80098e0 <USB_EPStartXfer+0x103c>
 8009808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800980c:	2b3e      	cmp	r3, #62	; 0x3e
 800980e:	d818      	bhi.n	8009842 <USB_EPStartXfer+0xf9e>
 8009810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009814:	085b      	lsrs	r3, r3, #1
 8009816:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800981a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	d004      	beq.n	8009830 <USB_EPStartXfer+0xf8c>
 8009826:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800982a:	3301      	adds	r3, #1
 800982c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009830:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009834:	b29b      	uxth	r3, r3
 8009836:	029b      	lsls	r3, r3, #10
 8009838:	b29a      	uxth	r2, r3
 800983a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800983e:	801a      	strh	r2, [r3, #0]
 8009840:	e04e      	b.n	80098e0 <USB_EPStartXfer+0x103c>
 8009842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009846:	095b      	lsrs	r3, r3, #5
 8009848:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800984c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009850:	f003 031f 	and.w	r3, r3, #31
 8009854:	2b00      	cmp	r3, #0
 8009856:	d104      	bne.n	8009862 <USB_EPStartXfer+0xfbe>
 8009858:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800985c:	3b01      	subs	r3, #1
 800985e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009862:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009866:	b29b      	uxth	r3, r3
 8009868:	029b      	lsls	r3, r3, #10
 800986a:	b29b      	uxth	r3, r3
 800986c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009874:	b29a      	uxth	r2, r3
 8009876:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	e030      	b.n	80098e0 <USB_EPStartXfer+0x103c>
 800987e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	785b      	ldrb	r3, [r3, #1]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d128      	bne.n	80098e0 <USB_EPStartXfer+0x103c>
 800988e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009892:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800989c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	461a      	mov	r2, r3
 80098ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098b2:	4413      	add	r3, r2
 80098b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80098b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	011a      	lsls	r2, r3, #4
 80098c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098ca:	4413      	add	r3, r2
 80098cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80098d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d8:	b29a      	uxth	r2, r3
 80098da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80098e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	891b      	ldrh	r3, [r3, #8]
 80098ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6959      	ldr	r1, [r3, #20]
 80098fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009900:	b29b      	uxth	r3, r3
 8009902:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009906:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800990a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800990e:	6800      	ldr	r0, [r0, #0]
 8009910:	f000 ff3e 	bl	800a790 <USB_WritePMA>
          ep->xfer_buff += len;
 8009914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	695a      	ldr	r2, [r3, #20]
 8009920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009924:	441a      	add	r2, r3
 8009926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800992a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6a1a      	ldr	r2, [r3, #32]
 800993e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	429a      	cmp	r2, r3
 800994c:	d90f      	bls.n	800996e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800994e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6a1a      	ldr	r2, [r3, #32]
 800995a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	621a      	str	r2, [r3, #32]
 800996c:	e00e      	b.n	800998c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800996e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800997e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2200      	movs	r2, #0
 800998a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800998c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 80cc 	beq.w	8009b2e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800999a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d178      	bne.n	8009aa6 <USB_EPStartXfer+0x1202>
 80099b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80099c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	461a      	mov	r2, r3
 80099d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099d8:	4413      	add	r3, r2
 80099da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80099de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	011a      	lsls	r2, r3, #4
 80099ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099f0:	4413      	add	r3, r2
 80099f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d116      	bne.n	8009a30 <USB_EPStartXfer+0x118c>
 8009a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a14:	801a      	strh	r2, [r3, #0]
 8009a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a1a:	881b      	ldrh	r3, [r3, #0]
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a2c:	801a      	strh	r2, [r3, #0]
 8009a2e:	e064      	b.n	8009afa <USB_EPStartXfer+0x1256>
 8009a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a34:	2b3e      	cmp	r3, #62	; 0x3e
 8009a36:	d818      	bhi.n	8009a6a <USB_EPStartXfer+0x11c6>
 8009a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a3c:	085b      	lsrs	r3, r3, #1
 8009a3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d004      	beq.n	8009a58 <USB_EPStartXfer+0x11b4>
 8009a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a52:	3301      	adds	r3, #1
 8009a54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	029b      	lsls	r3, r3, #10
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a66:	801a      	strh	r2, [r3, #0]
 8009a68:	e047      	b.n	8009afa <USB_EPStartXfer+0x1256>
 8009a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a6e:	095b      	lsrs	r3, r3, #5
 8009a70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a78:	f003 031f 	and.w	r3, r3, #31
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d104      	bne.n	8009a8a <USB_EPStartXfer+0x11e6>
 8009a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a84:	3b01      	subs	r3, #1
 8009a86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	029b      	lsls	r3, r3, #10
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009aa2:	801a      	strh	r2, [r3, #0]
 8009aa4:	e029      	b.n	8009afa <USB_EPStartXfer+0x1256>
 8009aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	785b      	ldrb	r3, [r3, #1]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d121      	bne.n	8009afa <USB_EPStartXfer+0x1256>
 8009ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009acc:	4413      	add	r3, r2
 8009ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	011a      	lsls	r2, r3, #4
 8009ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009af8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	895b      	ldrh	r3, [r3, #10]
 8009b06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6959      	ldr	r1, [r3, #20]
 8009b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009b24:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009b28:	6800      	ldr	r0, [r0, #0]
 8009b2a:	f000 fe31 	bl	800a790 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	881b      	ldrh	r3, [r3, #0]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b50:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b5c:	8013      	strh	r3, [r2, #0]
 8009b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b62:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009b66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b6a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009b6e:	8812      	ldrh	r2, [r2, #0]
 8009b70:	f082 0210 	eor.w	r2, r2, #16
 8009b74:	801a      	strh	r2, [r3, #0]
 8009b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b7a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009b7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b82:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009b86:	8812      	ldrh	r2, [r2, #0]
 8009b88:	f082 0220 	eor.w	r2, r2, #32
 8009b8c:	801a      	strh	r2, [r3, #0]
 8009b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	441a      	add	r2, r3
 8009ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bac:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	8013      	strh	r3, [r2, #0]
 8009bc6:	f000 bc9f 	b.w	800a508 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	7b1b      	ldrb	r3, [r3, #12]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 80ae 	bne.w	8009d38 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	699a      	ldr	r2, [r3, #24]
 8009be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d917      	bls.n	8009c28 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	699a      	ldr	r2, [r3, #24]
 8009c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c18:	1ad2      	subs	r2, r2, r3
 8009c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	619a      	str	r2, [r3, #24]
 8009c26:	e00e      	b.n	8009c46 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2200      	movs	r2, #0
 8009c44:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	461a      	mov	r2, r3
 8009c66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	011a      	lsls	r2, r3, #4
 8009c7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c82:	4413      	add	r3, r2
 8009c84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d116      	bne.n	8009cc2 <USB_EPStartXfer+0x141e>
 8009c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ca6:	801a      	strh	r2, [r3, #0]
 8009ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cbe:	801a      	strh	r2, [r3, #0]
 8009cc0:	e3e8      	b.n	800a494 <USB_EPStartXfer+0x1bf0>
 8009cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8009cc8:	d818      	bhi.n	8009cfc <USB_EPStartXfer+0x1458>
 8009cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cce:	085b      	lsrs	r3, r3, #1
 8009cd0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d004      	beq.n	8009cea <USB_EPStartXfer+0x1446>
 8009ce0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009cea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	029b      	lsls	r3, r3, #10
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cf8:	801a      	strh	r2, [r3, #0]
 8009cfa:	e3cb      	b.n	800a494 <USB_EPStartXfer+0x1bf0>
 8009cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d00:	095b      	lsrs	r3, r3, #5
 8009d02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d0a:	f003 031f 	and.w	r3, r3, #31
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d104      	bne.n	8009d1c <USB_EPStartXfer+0x1478>
 8009d12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d16:	3b01      	subs	r3, #1
 8009d18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	029b      	lsls	r3, r3, #10
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d34:	801a      	strh	r2, [r3, #0]
 8009d36:	e3ad      	b.n	800a494 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	78db      	ldrb	r3, [r3, #3]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	f040 8200 	bne.w	800a14a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	785b      	ldrb	r3, [r3, #1]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f040 8091 	bne.w	8009e7e <USB_EPStartXfer+0x15da>
 8009d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d80:	4413      	add	r3, r2
 8009d82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	011a      	lsls	r2, r3, #4
 8009d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d98:	4413      	add	r3, r2
 8009d9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d116      	bne.n	8009de0 <USB_EPStartXfer+0x153c>
 8009db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dc4:	801a      	strh	r2, [r3, #0]
 8009dc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ddc:	801a      	strh	r2, [r3, #0]
 8009dde:	e083      	b.n	8009ee8 <USB_EPStartXfer+0x1644>
 8009de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	2b3e      	cmp	r3, #62	; 0x3e
 8009dee:	d820      	bhi.n	8009e32 <USB_EPStartXfer+0x158e>
 8009df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	085b      	lsrs	r3, r3, #1
 8009dfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <USB_EPStartXfer+0x157c>
 8009e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	029b      	lsls	r3, r3, #10
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e2e:	801a      	strh	r2, [r3, #0]
 8009e30:	e05a      	b.n	8009ee8 <USB_EPStartXfer+0x1644>
 8009e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	095b      	lsrs	r3, r3, #5
 8009e40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	f003 031f 	and.w	r3, r3, #31
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d104      	bne.n	8009e62 <USB_EPStartXfer+0x15be>
 8009e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	029b      	lsls	r3, r3, #10
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e7a:	801a      	strh	r2, [r3, #0]
 8009e7c:	e034      	b.n	8009ee8 <USB_EPStartXfer+0x1644>
 8009e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d12c      	bne.n	8009ee8 <USB_EPStartXfer+0x1644>
 8009e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	461a      	mov	r2, r3
 8009eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	011a      	lsls	r2, r3, #4
 8009ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eca:	4413      	add	r3, r2
 8009ecc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009ee6:	801a      	strh	r2, [r3, #0]
 8009ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	785b      	ldrb	r3, [r3, #1]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f040 8091 	bne.w	800a02a <USB_EPStartXfer+0x1786>
 8009f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	461a      	mov	r2, r3
 8009f28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	011a      	lsls	r2, r3, #4
 8009f40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f44:	4413      	add	r3, r2
 8009f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d116      	bne.n	8009f8c <USB_EPStartXfer+0x16e8>
 8009f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f70:	801a      	strh	r2, [r3, #0]
 8009f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	e07c      	b.n	800a086 <USB_EPStartXfer+0x17e2>
 8009f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	2b3e      	cmp	r3, #62	; 0x3e
 8009f9a:	d820      	bhi.n	8009fde <USB_EPStartXfer+0x173a>
 8009f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d004      	beq.n	8009fcc <USB_EPStartXfer+0x1728>
 8009fc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009fcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	029b      	lsls	r3, r3, #10
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fda:	801a      	strh	r2, [r3, #0]
 8009fdc:	e053      	b.n	800a086 <USB_EPStartXfer+0x17e2>
 8009fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	095b      	lsrs	r3, r3, #5
 8009fec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	f003 031f 	and.w	r3, r3, #31
 800a000:	2b00      	cmp	r3, #0
 800a002:	d104      	bne.n	800a00e <USB_EPStartXfer+0x176a>
 800a004:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a008:	3b01      	subs	r3, #1
 800a00a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a00e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a012:	b29b      	uxth	r3, r3
 800a014:	029b      	lsls	r3, r3, #10
 800a016:	b29b      	uxth	r3, r3
 800a018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a01c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a020:	b29a      	uxth	r2, r3
 800a022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a026:	801a      	strh	r2, [r3, #0]
 800a028:	e02d      	b.n	800a086 <USB_EPStartXfer+0x17e2>
 800a02a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a02e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	785b      	ldrb	r3, [r3, #1]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d125      	bne.n	800a086 <USB_EPStartXfer+0x17e2>
 800a03a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a03e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a048:	b29b      	uxth	r3, r3
 800a04a:	461a      	mov	r2, r3
 800a04c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a050:	4413      	add	r3, r2
 800a052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a05a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	011a      	lsls	r2, r3, #4
 800a064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a068:	4413      	add	r3, r2
 800a06a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a06e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	b29a      	uxth	r2, r3
 800a080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a084:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a08a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 81fe 	beq.w	800a494 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a09c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a0b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <USB_EPStartXfer+0x182c>
 800a0c4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10d      	bne.n	800a0ec <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0d0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f040 81db 	bne.w	800a494 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0de:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f040 81d4 	bne.w	800a494 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a0ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a112:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a11a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	441a      	add	r2, r3
 800a130:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a13c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a140:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a144:	b29b      	uxth	r3, r3
 800a146:	8013      	strh	r3, [r2, #0]
 800a148:	e1a4      	b.n	800a494 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a14a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a14e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	78db      	ldrb	r3, [r3, #3]
 800a156:	2b01      	cmp	r3, #1
 800a158:	f040 819a 	bne.w	800a490 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a15c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	699a      	ldr	r2, [r3, #24]
 800a168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a16c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	429a      	cmp	r2, r3
 800a176:	d917      	bls.n	800a1a8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a17c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a18c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	699a      	ldr	r2, [r3, #24]
 800a194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a198:	1ad2      	subs	r2, r2, r3
 800a19a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a19e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	619a      	str	r2, [r3, #24]
 800a1a6:	e00e      	b.n	800a1c6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a1a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a1b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a1c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	785b      	ldrb	r3, [r3, #1]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d178      	bne.n	800a2c8 <USB_EPStartXfer+0x1a24>
 800a1d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a1e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	011a      	lsls	r2, r3, #4
 800a20e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a212:	4413      	add	r3, r2
 800a214:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a218:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a21c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d116      	bne.n	800a252 <USB_EPStartXfer+0x19ae>
 800a224:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a230:	b29a      	uxth	r2, r3
 800a232:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a236:	801a      	strh	r2, [r3, #0]
 800a238:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	b29b      	uxth	r3, r3
 800a240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a248:	b29a      	uxth	r2, r3
 800a24a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a24e:	801a      	strh	r2, [r3, #0]
 800a250:	e06b      	b.n	800a32a <USB_EPStartXfer+0x1a86>
 800a252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a256:	2b3e      	cmp	r3, #62	; 0x3e
 800a258:	d818      	bhi.n	800a28c <USB_EPStartXfer+0x19e8>
 800a25a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a25e:	085b      	lsrs	r3, r3, #1
 800a260:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a268:	f003 0301 	and.w	r3, r3, #1
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d004      	beq.n	800a27a <USB_EPStartXfer+0x19d6>
 800a270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a274:	3301      	adds	r3, #1
 800a276:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a27a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a27e:	b29b      	uxth	r3, r3
 800a280:	029b      	lsls	r3, r3, #10
 800a282:	b29a      	uxth	r2, r3
 800a284:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a288:	801a      	strh	r2, [r3, #0]
 800a28a:	e04e      	b.n	800a32a <USB_EPStartXfer+0x1a86>
 800a28c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a290:	095b      	lsrs	r3, r3, #5
 800a292:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a29a:	f003 031f 	and.w	r3, r3, #31
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d104      	bne.n	800a2ac <USB_EPStartXfer+0x1a08>
 800a2a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a2ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	029b      	lsls	r3, r3, #10
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2c4:	801a      	strh	r2, [r3, #0]
 800a2c6:	e030      	b.n	800a32a <USB_EPStartXfer+0x1a86>
 800a2c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	785b      	ldrb	r3, [r3, #1]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d128      	bne.n	800a32a <USB_EPStartXfer+0x1a86>
 800a2d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a2e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	011a      	lsls	r2, r3, #4
 800a310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a314:	4413      	add	r3, r2
 800a316:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a31a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a31e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a322:	b29a      	uxth	r2, r3
 800a324:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a328:	801a      	strh	r2, [r3, #0]
 800a32a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a32e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a33c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	785b      	ldrb	r3, [r3, #1]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d178      	bne.n	800a43a <USB_EPStartXfer+0x1b96>
 800a348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a34c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a35a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a364:	b29b      	uxth	r3, r3
 800a366:	461a      	mov	r2, r3
 800a368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a36c:	4413      	add	r3, r2
 800a36e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	011a      	lsls	r2, r3, #4
 800a380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a384:	4413      	add	r3, r2
 800a386:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a38a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a38e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a392:	2b00      	cmp	r3, #0
 800a394:	d116      	bne.n	800a3c4 <USB_EPStartXfer+0x1b20>
 800a396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3a8:	801a      	strh	r2, [r3, #0]
 800a3aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3ae:	881b      	ldrh	r3, [r3, #0]
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3c0:	801a      	strh	r2, [r3, #0]
 800a3c2:	e067      	b.n	800a494 <USB_EPStartXfer+0x1bf0>
 800a3c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3c8:	2b3e      	cmp	r3, #62	; 0x3e
 800a3ca:	d818      	bhi.n	800a3fe <USB_EPStartXfer+0x1b5a>
 800a3cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3d0:	085b      	lsrs	r3, r3, #1
 800a3d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a3d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d004      	beq.n	800a3ec <USB_EPStartXfer+0x1b48>
 800a3e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a3ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	029b      	lsls	r3, r3, #10
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3fa:	801a      	strh	r2, [r3, #0]
 800a3fc:	e04a      	b.n	800a494 <USB_EPStartXfer+0x1bf0>
 800a3fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a402:	095b      	lsrs	r3, r3, #5
 800a404:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a40c:	f003 031f 	and.w	r3, r3, #31
 800a410:	2b00      	cmp	r3, #0
 800a412:	d104      	bne.n	800a41e <USB_EPStartXfer+0x1b7a>
 800a414:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a418:	3b01      	subs	r3, #1
 800a41a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a41e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a422:	b29b      	uxth	r3, r3
 800a424:	029b      	lsls	r3, r3, #10
 800a426:	b29b      	uxth	r3, r3
 800a428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a42c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a430:	b29a      	uxth	r2, r3
 800a432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a436:	801a      	strh	r2, [r3, #0]
 800a438:	e02c      	b.n	800a494 <USB_EPStartXfer+0x1bf0>
 800a43a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a43e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	785b      	ldrb	r3, [r3, #1]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d124      	bne.n	800a494 <USB_EPStartXfer+0x1bf0>
 800a44a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a44e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a458:	b29b      	uxth	r3, r3
 800a45a:	461a      	mov	r2, r3
 800a45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a460:	4413      	add	r3, r2
 800a462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a46a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	011a      	lsls	r2, r3, #4
 800a474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a478:	4413      	add	r3, r2
 800a47a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a47e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a486:	b29a      	uxth	r2, r3
 800a488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a48c:	801a      	strh	r2, [r3, #0]
 800a48e:	e001      	b.n	800a494 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e03a      	b.n	800a50a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a4be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a4c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a4c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a4ca:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a4ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a4d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	441a      	add	r2, r3
 800a4f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a4f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a504:	b29b      	uxth	r3, r3
 800a506:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	785b      	ldrb	r3, [r3, #1]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d020      	beq.n	800a568 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a53c:	81bb      	strh	r3, [r7, #12]
 800a53e:	89bb      	ldrh	r3, [r7, #12]
 800a540:	f083 0310 	eor.w	r3, r3, #16
 800a544:	81bb      	strh	r3, [r7, #12]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	441a      	add	r2, r3
 800a550:	89bb      	ldrh	r3, [r7, #12]
 800a552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a55a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a55e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a562:	b29b      	uxth	r3, r3
 800a564:	8013      	strh	r3, [r2, #0]
 800a566:	e01f      	b.n	800a5a8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4413      	add	r3, r2
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	b29b      	uxth	r3, r3
 800a576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a57e:	81fb      	strh	r3, [r7, #14]
 800a580:	89fb      	ldrh	r3, [r7, #14]
 800a582:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a586:	81fb      	strh	r3, [r7, #14]
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	441a      	add	r2, r3
 800a592:	89fb      	ldrh	r3, [r7, #14]
 800a594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a59c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bc80      	pop	{r7}
 800a5b2:	4770      	bx	lr

0800a5b4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	7b1b      	ldrb	r3, [r3, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f040 809d 	bne.w	800a702 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	785b      	ldrb	r3, [r3, #1]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d04c      	beq.n	800a66a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	823b      	strh	r3, [r7, #16]
 800a5de:	8a3b      	ldrh	r3, [r7, #16]
 800a5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d01b      	beq.n	800a620 <USB_EPClearStall+0x6c>
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fe:	81fb      	strh	r3, [r7, #14]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	441a      	add	r2, r3
 800a60a:	89fb      	ldrh	r3, [r7, #14]
 800a60c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a618:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	78db      	ldrb	r3, [r3, #3]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d06c      	beq.n	800a702 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	b29b      	uxth	r3, r3
 800a636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a63a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a63e:	81bb      	strh	r3, [r7, #12]
 800a640:	89bb      	ldrh	r3, [r7, #12]
 800a642:	f083 0320 	eor.w	r3, r3, #32
 800a646:	81bb      	strh	r3, [r7, #12]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	441a      	add	r2, r3
 800a652:	89bb      	ldrh	r3, [r7, #12]
 800a654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a65c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a664:	b29b      	uxth	r3, r3
 800a666:	8013      	strh	r3, [r2, #0]
 800a668:	e04b      	b.n	800a702 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	82fb      	strh	r3, [r7, #22]
 800a678:	8afb      	ldrh	r3, [r7, #22]
 800a67a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d01b      	beq.n	800a6ba <USB_EPClearStall+0x106>
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a698:	82bb      	strh	r3, [r7, #20]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	441a      	add	r2, r3
 800a6a4:	8abb      	ldrh	r3, [r7, #20]
 800a6a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6d0:	827b      	strh	r3, [r7, #18]
 800a6d2:	8a7b      	ldrh	r3, [r7, #18]
 800a6d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a6d8:	827b      	strh	r3, [r7, #18]
 800a6da:	8a7b      	ldrh	r3, [r7, #18]
 800a6dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a6e0:	827b      	strh	r3, [r7, #18]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	441a      	add	r2, r3
 800a6ec:	8a7b      	ldrh	r3, [r7, #18]
 800a6ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	371c      	adds	r7, #28
 800a708:	46bd      	mov	sp, r7
 800a70a:	bc80      	pop	{r7}
 800a70c:	4770      	bx	lr

0800a70e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	460b      	mov	r3, r1
 800a718:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a71a:	78fb      	ldrb	r3, [r7, #3]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d103      	bne.n	800a728 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2280      	movs	r2, #128	; 0x80
 800a724:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	370c      	adds	r7, #12
 800a72e:	46bd      	mov	sp, r7
 800a730:	bc80      	pop	{r7}
 800a732:	4770      	bx	lr

0800a734 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	bc80      	pop	{r7}
 800a746:	4770      	bx	lr

0800a748 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	bc80      	pop	{r7}
 800a75a:	4770      	bx	lr

0800a75c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a76e:	68fb      	ldr	r3, [r7, #12]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3714      	adds	r7, #20
 800a774:	46bd      	mov	sp, r7
 800a776:	bc80      	pop	{r7}
 800a778:	4770      	bx	lr

0800a77a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bc80      	pop	{r7}
 800a78e:	4770      	bx	lr

0800a790 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a790:	b480      	push	{r7}
 800a792:	b08d      	sub	sp, #52	; 0x34
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	4611      	mov	r1, r2
 800a79c:	461a      	mov	r2, r3
 800a79e:	460b      	mov	r3, r1
 800a7a0:	80fb      	strh	r3, [r7, #6]
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a7a6:	88bb      	ldrh	r3, [r7, #4]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	085b      	lsrs	r3, r3, #1
 800a7ac:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a7b6:	88fb      	ldrh	r3, [r7, #6]
 800a7b8:	005a      	lsls	r2, r3, #1
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7c2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7c8:	e01e      	b.n	800a808 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	021b      	lsls	r3, r3, #8
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f2:	3302      	adds	r3, #2
 800a7f4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fe:	3301      	adds	r3, #1
 800a800:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a804:	3b01      	subs	r3, #1
 800a806:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1dd      	bne.n	800a7ca <USB_WritePMA+0x3a>
  }
}
 800a80e:	bf00      	nop
 800a810:	bf00      	nop
 800a812:	3734      	adds	r7, #52	; 0x34
 800a814:	46bd      	mov	sp, r7
 800a816:	bc80      	pop	{r7}
 800a818:	4770      	bx	lr

0800a81a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b08b      	sub	sp, #44	; 0x2c
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	4611      	mov	r1, r2
 800a826:	461a      	mov	r2, r3
 800a828:	460b      	mov	r3, r1
 800a82a:	80fb      	strh	r3, [r7, #6]
 800a82c:	4613      	mov	r3, r2
 800a82e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a830:	88bb      	ldrh	r3, [r7, #4]
 800a832:	085b      	lsrs	r3, r3, #1
 800a834:	b29b      	uxth	r3, r3
 800a836:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a840:	88fb      	ldrh	r3, [r7, #6]
 800a842:	005a      	lsls	r2, r3, #1
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a84c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	627b      	str	r3, [r7, #36]	; 0x24
 800a852:	e01b      	b.n	800a88c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	b29b      	uxth	r3, r3
 800a85a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	3302      	adds	r3, #2
 800a860:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	b2da      	uxtb	r2, r3
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	3301      	adds	r3, #1
 800a86e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	0a1b      	lsrs	r3, r3, #8
 800a874:	b2da      	uxtb	r2, r3
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	3301      	adds	r3, #1
 800a87e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	3302      	adds	r3, #2
 800a884:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	3b01      	subs	r3, #1
 800a88a:	627b      	str	r3, [r7, #36]	; 0x24
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1e0      	bne.n	800a854 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a892:	88bb      	ldrh	r3, [r7, #4]
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	b29b      	uxth	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d007      	beq.n	800a8ae <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	701a      	strb	r2, [r3, #0]
  }
}
 800a8ae:	bf00      	nop
 800a8b0:	372c      	adds	r7, #44	; 0x2c
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bc80      	pop	{r7}
 800a8b6:	4770      	bx	lr

0800a8b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	7c1b      	ldrb	r3, [r3, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d115      	bne.n	800a8fc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8d4:	2202      	movs	r2, #2
 800a8d6:	2181      	movs	r1, #129	; 0x81
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f001 fe8c 	bl	800c5f6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f001 fe82 	bl	800c5f6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a8fa:	e012      	b.n	800a922 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	2202      	movs	r2, #2
 800a900:	2181      	movs	r1, #129	; 0x81
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 fe77 	bl	800c5f6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a90e:	2340      	movs	r3, #64	; 0x40
 800a910:	2202      	movs	r2, #2
 800a912:	2101      	movs	r1, #1
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 fe6e 	bl	800c5f6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a922:	2308      	movs	r3, #8
 800a924:	2203      	movs	r2, #3
 800a926:	2182      	movs	r1, #130	; 0x82
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f001 fe64 	bl	800c5f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a934:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a938:	f001 ff84 	bl	800c844 <USBD_static_malloc>
 800a93c:	4602      	mov	r2, r0
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d102      	bne.n	800a954 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a94e:	2301      	movs	r3, #1
 800a950:	73fb      	strb	r3, [r7, #15]
 800a952:	e026      	b.n	800a9a2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2200      	movs	r2, #0
 800a972:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	7c1b      	ldrb	r3, [r3, #16]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d109      	bne.n	800a992 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a984:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a988:	2101      	movs	r1, #1
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f001 ff24 	bl	800c7d8 <USBD_LL_PrepareReceive>
 800a990:	e007      	b.n	800a9a2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a998:	2340      	movs	r3, #64	; 0x40
 800a99a:	2101      	movs	r1, #1
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f001 ff1b 	bl	800c7d8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a9bc:	2181      	movs	r1, #129	; 0x81
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 fe3f 	bl	800c642 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f001 fe38 	bl	800c642 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a9da:	2182      	movs	r1, #130	; 0x82
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 fe30 	bl	800c642 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00e      	beq.n	800aa10 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa02:	4618      	mov	r0, r3
 800aa04:	f001 ff2a 	bl	800c85c <USBD_static_free>
    pdev->pClassData = NULL;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b086      	sub	sp, #24
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800aa30:	2300      	movs	r3, #0
 800aa32:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d039      	beq.n	800aab8 <USBD_CDC_Setup+0x9e>
 800aa44:	2b20      	cmp	r3, #32
 800aa46:	d17f      	bne.n	800ab48 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	88db      	ldrh	r3, [r3, #6]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d029      	beq.n	800aaa4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	b25b      	sxtb	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	da11      	bge.n	800aa7e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800aa66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	88d2      	ldrh	r2, [r2, #6]
 800aa6c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aa6e:	6939      	ldr	r1, [r7, #16]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	88db      	ldrh	r3, [r3, #6]
 800aa74:	461a      	mov	r2, r3
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 fa09 	bl	800be8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800aa7c:	e06b      	b.n	800ab56 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	785a      	ldrb	r2, [r3, #1]
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	88db      	ldrh	r3, [r3, #6]
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aa94:	6939      	ldr	r1, [r7, #16]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	88db      	ldrh	r3, [r3, #6]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f001 fa24 	bl	800beea <USBD_CtlPrepareRx>
      break;
 800aaa2:	e058      	b.n	800ab56 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	7850      	ldrb	r0, [r2, #1]
 800aab0:	2200      	movs	r2, #0
 800aab2:	6839      	ldr	r1, [r7, #0]
 800aab4:	4798      	blx	r3
      break;
 800aab6:	e04e      	b.n	800ab56 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	785b      	ldrb	r3, [r3, #1]
 800aabc:	2b0b      	cmp	r3, #11
 800aabe:	d02e      	beq.n	800ab1e <USBD_CDC_Setup+0x104>
 800aac0:	2b0b      	cmp	r3, #11
 800aac2:	dc38      	bgt.n	800ab36 <USBD_CDC_Setup+0x11c>
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <USBD_CDC_Setup+0xb4>
 800aac8:	2b0a      	cmp	r3, #10
 800aaca:	d014      	beq.n	800aaf6 <USBD_CDC_Setup+0xdc>
 800aacc:	e033      	b.n	800ab36 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aad4:	2b03      	cmp	r3, #3
 800aad6:	d107      	bne.n	800aae8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800aad8:	f107 030c 	add.w	r3, r7, #12
 800aadc:	2202      	movs	r2, #2
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f001 f9d4 	bl	800be8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aae6:	e02e      	b.n	800ab46 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f001 f965 	bl	800bdba <USBD_CtlError>
            ret = USBD_FAIL;
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	75fb      	strb	r3, [r7, #23]
          break;
 800aaf4:	e027      	b.n	800ab46 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d107      	bne.n	800ab10 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab00:	f107 030f 	add.w	r3, r7, #15
 800ab04:	2201      	movs	r2, #1
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f001 f9c0 	bl	800be8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab0e:	e01a      	b.n	800ab46 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 f951 	bl	800bdba <USBD_CtlError>
            ret = USBD_FAIL;
 800ab18:	2302      	movs	r3, #2
 800ab1a:	75fb      	strb	r3, [r7, #23]
          break;
 800ab1c:	e013      	b.n	800ab46 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d00d      	beq.n	800ab44 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f001 f945 	bl	800bdba <USBD_CtlError>
            ret = USBD_FAIL;
 800ab30:	2302      	movs	r3, #2
 800ab32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab34:	e006      	b.n	800ab44 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f001 f93e 	bl	800bdba <USBD_CtlError>
          ret = USBD_FAIL;
 800ab3e:	2302      	movs	r3, #2
 800ab40:	75fb      	strb	r3, [r7, #23]
          break;
 800ab42:	e000      	b.n	800ab46 <USBD_CDC_Setup+0x12c>
          break;
 800ab44:	bf00      	nop
      }
      break;
 800ab46:	e006      	b.n	800ab56 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 f935 	bl	800bdba <USBD_CtlError>
      ret = USBD_FAIL;
 800ab50:	2302      	movs	r3, #2
 800ab52:	75fb      	strb	r3, [r7, #23]
      break;
 800ab54:	bf00      	nop
  }

  return ret;
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab72:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab7a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d03a      	beq.n	800abfc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ab86:	78fa      	ldrb	r2, [r7, #3]
 800ab88:	6879      	ldr	r1, [r7, #4]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	440b      	add	r3, r1
 800ab94:	331c      	adds	r3, #28
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d029      	beq.n	800abf0 <USBD_CDC_DataIn+0x90>
 800ab9c:	78fa      	ldrb	r2, [r7, #3]
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	4613      	mov	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	440b      	add	r3, r1
 800abaa:	331c      	adds	r3, #28
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	78f9      	ldrb	r1, [r7, #3]
 800abb0:	68b8      	ldr	r0, [r7, #8]
 800abb2:	460b      	mov	r3, r1
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	440b      	add	r3, r1
 800abb8:	00db      	lsls	r3, r3, #3
 800abba:	4403      	add	r3, r0
 800abbc:	3338      	adds	r3, #56	; 0x38
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	fbb2 f1f3 	udiv	r1, r2, r3
 800abc4:	fb01 f303 	mul.w	r3, r1, r3
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d110      	bne.n	800abf0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800abce:	78fa      	ldrb	r2, [r7, #3]
 800abd0:	6879      	ldr	r1, [r7, #4]
 800abd2:	4613      	mov	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	440b      	add	r3, r1
 800abdc:	331c      	adds	r3, #28
 800abde:	2200      	movs	r2, #0
 800abe0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800abe2:	78f9      	ldrb	r1, [r7, #3]
 800abe4:	2300      	movs	r3, #0
 800abe6:	2200      	movs	r2, #0
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f001 fdd2 	bl	800c792 <USBD_LL_Transmit>
 800abee:	e003      	b.n	800abf8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	e000      	b.n	800abfe <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800abfc:	2302      	movs	r3, #2
  }
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b084      	sub	sp, #16
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac18:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac1a:	78fb      	ldrb	r3, [r7, #3]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f001 fdfd 	bl	800c81e <USBD_LL_GetRxDataSize>
 800ac24:	4602      	mov	r2, r0
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00d      	beq.n	800ac52 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	4798      	blx	r3

    return USBD_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e000      	b.n	800ac54 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ac52:	2302      	movs	r3, #2
  }
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac6a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d015      	beq.n	800aca2 <USBD_CDC_EP0_RxReady+0x46>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac7c:	2bff      	cmp	r3, #255	; 0xff
 800ac7e:	d010      	beq.n	800aca2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ac8e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac96:	b292      	uxth	r2, r2
 800ac98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	22ff      	movs	r2, #255	; 0xff
 800ac9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2243      	movs	r2, #67	; 0x43
 800acb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800acba:	4b03      	ldr	r3, [pc, #12]	; (800acc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bc80      	pop	{r7}
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	200000bc 	.word	0x200000bc

0800accc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2243      	movs	r2, #67	; 0x43
 800acd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800acda:	4b03      	ldr	r3, [pc, #12]	; (800ace8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800acdc:	4618      	mov	r0, r3
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bc80      	pop	{r7}
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	20000078 	.word	0x20000078

0800acec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2243      	movs	r2, #67	; 0x43
 800acf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800acfa:	4b03      	ldr	r3, [pc, #12]	; (800ad08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bc80      	pop	{r7}
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	20000100 	.word	0x20000100

0800ad0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	220a      	movs	r2, #10
 800ad18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ad1a:	4b03      	ldr	r3, [pc, #12]	; (800ad28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bc80      	pop	{r7}
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	20000034 	.word	0x20000034

0800ad2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ad36:	2302      	movs	r3, #2
 800ad38:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bc80      	pop	{r7}
 800ad56:	4770      	bx	lr

0800ad58 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	4613      	mov	r3, r2
 800ad64:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad6c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ad76:	88fa      	ldrh	r2, [r7, #6]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	371c      	adds	r7, #28
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bc80      	pop	{r7}
 800ad88:	4770      	bx	lr

0800ad8a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b085      	sub	sp, #20
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad9a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	bc80      	pop	{r7}
 800adae:	4770      	bx	lr

0800adb0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d01c      	beq.n	800ae04 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800add0:	2b00      	cmp	r3, #0
 800add2:	d115      	bne.n	800ae00 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2201      	movs	r2, #1
 800add8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	2181      	movs	r1, #129	; 0x81
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 fccb 	bl	800c792 <USBD_LL_Transmit>

      return USBD_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	e002      	b.n	800ae06 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ae00:	2301      	movs	r3, #1
 800ae02:	e000      	b.n	800ae06 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ae04:	2302      	movs	r3, #2
  }
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b084      	sub	sp, #16
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae1c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d017      	beq.n	800ae58 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7c1b      	ldrb	r3, [r3, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d109      	bne.n	800ae44 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f001 fccb 	bl	800c7d8 <USBD_LL_PrepareReceive>
 800ae42:	e007      	b.n	800ae54 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae4a:	2340      	movs	r3, #64	; 0x40
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f001 fcc2 	bl	800c7d8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ae54:	2300      	movs	r3, #0
 800ae56:	e000      	b.n	800ae5a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ae58:	2302      	movs	r3, #2
  }
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	60f8      	str	r0, [r7, #12]
 800ae6a:	60b9      	str	r1, [r7, #8]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ae76:	2302      	movs	r3, #2
 800ae78:	e01a      	b.n	800aeb0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d003      	beq.n	800ae8c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d003      	beq.n	800ae9a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	79fa      	ldrb	r2, [r7, #7]
 800aea6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f001 fb2f 	bl	800c50c <USBD_LL_Init>

  return USBD_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d006      	beq.n	800aeda <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	73fb      	strb	r3, [r7, #15]
 800aed8:	e001      	b.n	800aede <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aeda:	2302      	movs	r3, #2
 800aedc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aede:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bc80      	pop	{r7}
 800aee8:	4770      	bx	lr

0800aeea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b082      	sub	sp, #8
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f001 fb64 	bl	800c5c0 <USBD_LL_Start>

  return USBD_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800af02:	b480      	push	{r7}
 800af04:	b083      	sub	sp, #12
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	bc80      	pop	{r7}
 800af14:	4770      	bx	lr

0800af16 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	460b      	mov	r3, r1
 800af20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800af22:	2302      	movs	r3, #2
 800af24:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00c      	beq.n	800af4a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	78fa      	ldrb	r2, [r7, #3]
 800af3a:	4611      	mov	r1, r2
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	4798      	blx	r3
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	78fa      	ldrb	r2, [r7, #3]
 800af6a:	4611      	mov	r1, r2
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	4798      	blx	r3

  return USBD_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b082      	sub	sp, #8
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f000 fed8 	bl	800bd42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2201      	movs	r2, #1
 800af96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800afa0:	461a      	mov	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800afae:	f003 031f 	and.w	r3, r3, #31
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d016      	beq.n	800afe4 <USBD_LL_SetupStage+0x6a>
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d81c      	bhi.n	800aff4 <USBD_LL_SetupStage+0x7a>
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d002      	beq.n	800afc4 <USBD_LL_SetupStage+0x4a>
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d008      	beq.n	800afd4 <USBD_LL_SetupStage+0x5a>
 800afc2:	e017      	b.n	800aff4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f9cb 	bl	800b368 <USBD_StdDevReq>
      break;
 800afd2:	e01a      	b.n	800b00a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fa2d 	bl	800b43c <USBD_StdItfReq>
      break;
 800afe2:	e012      	b.n	800b00a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fa6d 	bl	800b4cc <USBD_StdEPReq>
      break;
 800aff2:	e00a      	b.n	800b00a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800affa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800affe:	b2db      	uxtb	r3, r3
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f001 fb3c 	bl	800c680 <USBD_LL_StallEP>
      break;
 800b008:	bf00      	nop
  }

  return USBD_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	460b      	mov	r3, r1
 800b01e:	607a      	str	r2, [r7, #4]
 800b020:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b022:	7afb      	ldrb	r3, [r7, #11]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d14b      	bne.n	800b0c0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b02e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b036:	2b03      	cmp	r3, #3
 800b038:	d134      	bne.n	800b0a4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	68da      	ldr	r2, [r3, #12]
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	429a      	cmp	r2, r3
 800b044:	d919      	bls.n	800b07a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	1ad2      	subs	r2, r2, r3
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	68da      	ldr	r2, [r3, #12]
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d203      	bcs.n	800b068 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b064:	b29b      	uxth	r3, r3
 800b066:	e002      	b.n	800b06e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	461a      	mov	r2, r3
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f000 ff57 	bl	800bf26 <USBD_CtlContinueRx>
 800b078:	e038      	b.n	800b0ec <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00a      	beq.n	800b09c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	d105      	bne.n	800b09c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 ff54 	bl	800bf4a <USBD_CtlSendStatus>
 800b0a2:	e023      	b.n	800b0ec <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0aa:	2b05      	cmp	r3, #5
 800b0ac:	d11e      	bne.n	800b0ec <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f001 fae1 	bl	800c680 <USBD_LL_StallEP>
 800b0be:	e015      	b.n	800b0ec <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00d      	beq.n	800b0e8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d108      	bne.n	800b0e8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	7afa      	ldrb	r2, [r7, #11]
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	4798      	blx	r3
 800b0e6:	e001      	b.n	800b0ec <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b0e8:	2302      	movs	r3, #2
 800b0ea:	e000      	b.n	800b0ee <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3718      	adds	r7, #24
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b086      	sub	sp, #24
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	460b      	mov	r3, r1
 800b100:	607a      	str	r2, [r7, #4]
 800b102:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b104:	7afb      	ldrb	r3, [r7, #11]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d17f      	bne.n	800b20a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3314      	adds	r3, #20
 800b10e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b116:	2b02      	cmp	r3, #2
 800b118:	d15c      	bne.n	800b1d4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	429a      	cmp	r2, r3
 800b124:	d915      	bls.n	800b152 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	68da      	ldr	r2, [r3, #12]
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	1ad2      	subs	r2, r2, r3
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	461a      	mov	r2, r3
 800b13c:	6879      	ldr	r1, [r7, #4]
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f000 fec1 	bl	800bec6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b144:	2300      	movs	r3, #0
 800b146:	2200      	movs	r2, #0
 800b148:	2100      	movs	r1, #0
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f001 fb44 	bl	800c7d8 <USBD_LL_PrepareReceive>
 800b150:	e04e      	b.n	800b1f0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	6912      	ldr	r2, [r2, #16]
 800b15a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b15e:	fb01 f202 	mul.w	r2, r1, r2
 800b162:	1a9b      	subs	r3, r3, r2
 800b164:	2b00      	cmp	r3, #0
 800b166:	d11c      	bne.n	800b1a2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	689a      	ldr	r2, [r3, #8]
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b170:	429a      	cmp	r2, r3
 800b172:	d316      	bcc.n	800b1a2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	689a      	ldr	r2, [r3, #8]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b17e:	429a      	cmp	r2, r3
 800b180:	d20f      	bcs.n	800b1a2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b182:	2200      	movs	r2, #0
 800b184:	2100      	movs	r1, #0
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 fe9d 	bl	800bec6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b194:	2300      	movs	r3, #0
 800b196:	2200      	movs	r2, #0
 800b198:	2100      	movs	r1, #0
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f001 fb1c 	bl	800c7d8 <USBD_LL_PrepareReceive>
 800b1a0:	e026      	b.n	800b1f0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00a      	beq.n	800b1c4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d105      	bne.n	800b1c4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b1c4:	2180      	movs	r1, #128	; 0x80
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f001 fa5a 	bl	800c680 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f000 fecf 	bl	800bf70 <USBD_CtlReceiveStatus>
 800b1d2:	e00d      	b.n	800b1f0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d004      	beq.n	800b1e8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d103      	bne.n	800b1f0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b1e8:	2180      	movs	r1, #128	; 0x80
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f001 fa48 	bl	800c680 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d11d      	bne.n	800b236 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f7ff fe81 	bl	800af02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b208:	e015      	b.n	800b236 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00d      	beq.n	800b232 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d108      	bne.n	800b232 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	7afa      	ldrb	r2, [r7, #11]
 800b22a:	4611      	mov	r1, r2
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	4798      	blx	r3
 800b230:	e001      	b.n	800b236 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b232:	2302      	movs	r3, #2
 800b234:	e000      	b.n	800b238 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b248:	2340      	movs	r3, #64	; 0x40
 800b24a:	2200      	movs	r2, #0
 800b24c:	2100      	movs	r1, #0
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 f9d1 	bl	800c5f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2240      	movs	r2, #64	; 0x40
 800b260:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b264:	2340      	movs	r3, #64	; 0x40
 800b266:	2200      	movs	r2, #0
 800b268:	2180      	movs	r1, #128	; 0x80
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 f9c3 	bl	800c5f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2240      	movs	r2, #64	; 0x40
 800b27a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d009      	beq.n	800b2b8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	6852      	ldr	r2, [r2, #4]
 800b2b0:	b2d2      	uxtb	r2, r2
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	4798      	blx	r3
  }

  return USBD_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b2c2:	b480      	push	{r7}
 800b2c4:	b083      	sub	sp, #12
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	78fa      	ldrb	r2, [r7, #3]
 800b2d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bc80      	pop	{r7}
 800b2de:	4770      	bx	lr

0800b2e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2204      	movs	r2, #4
 800b2f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	bc80      	pop	{r7}
 800b306:	4770      	bx	lr

0800b308 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b316:	2b04      	cmp	r3, #4
 800b318:	d105      	bne.n	800b326 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bc80      	pop	{r7}
 800b330:	4770      	bx	lr

0800b332 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b082      	sub	sp, #8
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b340:	2b03      	cmp	r3, #3
 800b342:	d10b      	bne.n	800b35c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
	...

0800b368 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b37e:	2b40      	cmp	r3, #64	; 0x40
 800b380:	d005      	beq.n	800b38e <USBD_StdDevReq+0x26>
 800b382:	2b40      	cmp	r3, #64	; 0x40
 800b384:	d84f      	bhi.n	800b426 <USBD_StdDevReq+0xbe>
 800b386:	2b00      	cmp	r3, #0
 800b388:	d009      	beq.n	800b39e <USBD_StdDevReq+0x36>
 800b38a:	2b20      	cmp	r3, #32
 800b38c:	d14b      	bne.n	800b426 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	4798      	blx	r3
      break;
 800b39c:	e048      	b.n	800b430 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	785b      	ldrb	r3, [r3, #1]
 800b3a2:	2b09      	cmp	r3, #9
 800b3a4:	d839      	bhi.n	800b41a <USBD_StdDevReq+0xb2>
 800b3a6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ac <USBD_StdDevReq+0x44>)
 800b3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ac:	0800b3fd 	.word	0x0800b3fd
 800b3b0:	0800b411 	.word	0x0800b411
 800b3b4:	0800b41b 	.word	0x0800b41b
 800b3b8:	0800b407 	.word	0x0800b407
 800b3bc:	0800b41b 	.word	0x0800b41b
 800b3c0:	0800b3df 	.word	0x0800b3df
 800b3c4:	0800b3d5 	.word	0x0800b3d5
 800b3c8:	0800b41b 	.word	0x0800b41b
 800b3cc:	0800b3f3 	.word	0x0800b3f3
 800b3d0:	0800b3e9 	.word	0x0800b3e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f9dc 	bl	800b794 <USBD_GetDescriptor>
          break;
 800b3dc:	e022      	b.n	800b424 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fb3f 	bl	800ba64 <USBD_SetAddress>
          break;
 800b3e6:	e01d      	b.n	800b424 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fb7e 	bl	800baec <USBD_SetConfig>
          break;
 800b3f0:	e018      	b.n	800b424 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3f2:	6839      	ldr	r1, [r7, #0]
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fc07 	bl	800bc08 <USBD_GetConfig>
          break;
 800b3fa:	e013      	b.n	800b424 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fc37 	bl	800bc72 <USBD_GetStatus>
          break;
 800b404:	e00e      	b.n	800b424 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fc65 	bl	800bcd8 <USBD_SetFeature>
          break;
 800b40e:	e009      	b.n	800b424 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fc74 	bl	800bd00 <USBD_ClrFeature>
          break;
 800b418:	e004      	b.n	800b424 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fccc 	bl	800bdba <USBD_CtlError>
          break;
 800b422:	bf00      	nop
      }
      break;
 800b424:	e004      	b.n	800b430 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fcc6 	bl	800bdba <USBD_CtlError>
      break;
 800b42e:	bf00      	nop
  }

  return ret;
 800b430:	7bfb      	ldrb	r3, [r7, #15]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop

0800b43c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b446:	2300      	movs	r3, #0
 800b448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b452:	2b40      	cmp	r3, #64	; 0x40
 800b454:	d005      	beq.n	800b462 <USBD_StdItfReq+0x26>
 800b456:	2b40      	cmp	r3, #64	; 0x40
 800b458:	d82e      	bhi.n	800b4b8 <USBD_StdItfReq+0x7c>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <USBD_StdItfReq+0x26>
 800b45e:	2b20      	cmp	r3, #32
 800b460:	d12a      	bne.n	800b4b8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b468:	3b01      	subs	r3, #1
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d81d      	bhi.n	800b4aa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	889b      	ldrh	r3, [r3, #4]
 800b472:	b2db      	uxtb	r3, r3
 800b474:	2b01      	cmp	r3, #1
 800b476:	d813      	bhi.n	800b4a0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	4798      	blx	r3
 800b486:	4603      	mov	r3, r0
 800b488:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	88db      	ldrh	r3, [r3, #6]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d110      	bne.n	800b4b4 <USBD_StdItfReq+0x78>
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10d      	bne.n	800b4b4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fd56 	bl	800bf4a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b49e:	e009      	b.n	800b4b4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fc89 	bl	800bdba <USBD_CtlError>
          break;
 800b4a8:	e004      	b.n	800b4b4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fc84 	bl	800bdba <USBD_CtlError>
          break;
 800b4b2:	e000      	b.n	800b4b6 <USBD_StdItfReq+0x7a>
          break;
 800b4b4:	bf00      	nop
      }
      break;
 800b4b6:	e004      	b.n	800b4c2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fc7d 	bl	800bdba <USBD_CtlError>
      break;
 800b4c0:	bf00      	nop
  }

  return USBD_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	889b      	ldrh	r3, [r3, #4]
 800b4de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4e8:	2b40      	cmp	r3, #64	; 0x40
 800b4ea:	d007      	beq.n	800b4fc <USBD_StdEPReq+0x30>
 800b4ec:	2b40      	cmp	r3, #64	; 0x40
 800b4ee:	f200 8146 	bhi.w	800b77e <USBD_StdEPReq+0x2b2>
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00a      	beq.n	800b50c <USBD_StdEPReq+0x40>
 800b4f6:	2b20      	cmp	r3, #32
 800b4f8:	f040 8141 	bne.w	800b77e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	4798      	blx	r3
      break;
 800b50a:	e13d      	b.n	800b788 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b514:	2b20      	cmp	r3, #32
 800b516:	d10a      	bne.n	800b52e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	4798      	blx	r3
 800b526:	4603      	mov	r3, r0
 800b528:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
 800b52c:	e12d      	b.n	800b78a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	785b      	ldrb	r3, [r3, #1]
 800b532:	2b03      	cmp	r3, #3
 800b534:	d007      	beq.n	800b546 <USBD_StdEPReq+0x7a>
 800b536:	2b03      	cmp	r3, #3
 800b538:	f300 811b 	bgt.w	800b772 <USBD_StdEPReq+0x2a6>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d072      	beq.n	800b626 <USBD_StdEPReq+0x15a>
 800b540:	2b01      	cmp	r3, #1
 800b542:	d03a      	beq.n	800b5ba <USBD_StdEPReq+0xee>
 800b544:	e115      	b.n	800b772 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d002      	beq.n	800b556 <USBD_StdEPReq+0x8a>
 800b550:	2b03      	cmp	r3, #3
 800b552:	d015      	beq.n	800b580 <USBD_StdEPReq+0xb4>
 800b554:	e02b      	b.n	800b5ae <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b556:	7bbb      	ldrb	r3, [r7, #14]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00c      	beq.n	800b576 <USBD_StdEPReq+0xaa>
 800b55c:	7bbb      	ldrb	r3, [r7, #14]
 800b55e:	2b80      	cmp	r3, #128	; 0x80
 800b560:	d009      	beq.n	800b576 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b562:	7bbb      	ldrb	r3, [r7, #14]
 800b564:	4619      	mov	r1, r3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 f88a 	bl	800c680 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b56c:	2180      	movs	r1, #128	; 0x80
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f001 f886 	bl	800c680 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b574:	e020      	b.n	800b5b8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fc1e 	bl	800bdba <USBD_CtlError>
              break;
 800b57e:	e01b      	b.n	800b5b8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	885b      	ldrh	r3, [r3, #2]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10e      	bne.n	800b5a6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b588:	7bbb      	ldrb	r3, [r7, #14]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00b      	beq.n	800b5a6 <USBD_StdEPReq+0xda>
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	2b80      	cmp	r3, #128	; 0x80
 800b592:	d008      	beq.n	800b5a6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	88db      	ldrh	r3, [r3, #6]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d104      	bne.n	800b5a6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f001 f86d 	bl	800c680 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fccf 	bl	800bf4a <USBD_CtlSendStatus>

              break;
 800b5ac:	e004      	b.n	800b5b8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fc02 	bl	800bdba <USBD_CtlError>
              break;
 800b5b6:	bf00      	nop
          }
          break;
 800b5b8:	e0e0      	b.n	800b77c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d002      	beq.n	800b5ca <USBD_StdEPReq+0xfe>
 800b5c4:	2b03      	cmp	r3, #3
 800b5c6:	d015      	beq.n	800b5f4 <USBD_StdEPReq+0x128>
 800b5c8:	e026      	b.n	800b618 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00c      	beq.n	800b5ea <USBD_StdEPReq+0x11e>
 800b5d0:	7bbb      	ldrb	r3, [r7, #14]
 800b5d2:	2b80      	cmp	r3, #128	; 0x80
 800b5d4:	d009      	beq.n	800b5ea <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f001 f850 	bl	800c680 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b5e0:	2180      	movs	r1, #128	; 0x80
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f001 f84c 	bl	800c680 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5e8:	e01c      	b.n	800b624 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fbe4 	bl	800bdba <USBD_CtlError>
              break;
 800b5f2:	e017      	b.n	800b624 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	885b      	ldrh	r3, [r3, #2]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d112      	bne.n	800b622 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b602:	2b00      	cmp	r3, #0
 800b604:	d004      	beq.n	800b610 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f001 f857 	bl	800c6be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fc9a 	bl	800bf4a <USBD_CtlSendStatus>
              }
              break;
 800b616:	e004      	b.n	800b622 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b618:	6839      	ldr	r1, [r7, #0]
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fbcd 	bl	800bdba <USBD_CtlError>
              break;
 800b620:	e000      	b.n	800b624 <USBD_StdEPReq+0x158>
              break;
 800b622:	bf00      	nop
          }
          break;
 800b624:	e0aa      	b.n	800b77c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d002      	beq.n	800b636 <USBD_StdEPReq+0x16a>
 800b630:	2b03      	cmp	r3, #3
 800b632:	d032      	beq.n	800b69a <USBD_StdEPReq+0x1ce>
 800b634:	e097      	b.n	800b766 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b636:	7bbb      	ldrb	r3, [r7, #14]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d007      	beq.n	800b64c <USBD_StdEPReq+0x180>
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	2b80      	cmp	r3, #128	; 0x80
 800b640:	d004      	beq.n	800b64c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fbb8 	bl	800bdba <USBD_CtlError>
                break;
 800b64a:	e091      	b.n	800b770 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b64c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b650:	2b00      	cmp	r3, #0
 800b652:	da0b      	bge.n	800b66c <USBD_StdEPReq+0x1a0>
 800b654:	7bbb      	ldrb	r3, [r7, #14]
 800b656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b65a:	4613      	mov	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	3310      	adds	r3, #16
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	4413      	add	r3, r2
 800b668:	3304      	adds	r3, #4
 800b66a:	e00b      	b.n	800b684 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b66c:	7bbb      	ldrb	r3, [r7, #14]
 800b66e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b672:	4613      	mov	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	4413      	add	r3, r2
 800b682:	3304      	adds	r3, #4
 800b684:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2200      	movs	r2, #0
 800b68a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2202      	movs	r2, #2
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fbfb 	bl	800be8e <USBD_CtlSendData>
              break;
 800b698:	e06a      	b.n	800b770 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b69a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	da11      	bge.n	800b6c6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	f003 020f 	and.w	r2, r3, #15
 800b6a8:	6879      	ldr	r1, [r7, #4]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	4413      	add	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	440b      	add	r3, r1
 800b6b4:	3318      	adds	r3, #24
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d117      	bne.n	800b6ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fb7b 	bl	800bdba <USBD_CtlError>
                  break;
 800b6c4:	e054      	b.n	800b770 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6c6:	7bbb      	ldrb	r3, [r7, #14]
 800b6c8:	f003 020f 	and.w	r2, r3, #15
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d104      	bne.n	800b6ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b6e2:	6839      	ldr	r1, [r7, #0]
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 fb68 	bl	800bdba <USBD_CtlError>
                  break;
 800b6ea:	e041      	b.n	800b770 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	da0b      	bge.n	800b70c <USBD_StdEPReq+0x240>
 800b6f4:	7bbb      	ldrb	r3, [r7, #14]
 800b6f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	3310      	adds	r3, #16
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	4413      	add	r3, r2
 800b708:	3304      	adds	r3, #4
 800b70a:	e00b      	b.n	800b724 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b70c:	7bbb      	ldrb	r3, [r7, #14]
 800b70e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b712:	4613      	mov	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4413      	add	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	4413      	add	r3, r2
 800b722:	3304      	adds	r3, #4
 800b724:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b726:	7bbb      	ldrb	r3, [r7, #14]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <USBD_StdEPReq+0x266>
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	2b80      	cmp	r3, #128	; 0x80
 800b730:	d103      	bne.n	800b73a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2200      	movs	r2, #0
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	e00e      	b.n	800b758 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b73a:	7bbb      	ldrb	r3, [r7, #14]
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 ffdc 	bl	800c6fc <USBD_LL_IsStallEP>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d003      	beq.n	800b752 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2201      	movs	r2, #1
 800b74e:	601a      	str	r2, [r3, #0]
 800b750:	e002      	b.n	800b758 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	2200      	movs	r2, #0
 800b756:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	2202      	movs	r2, #2
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fb95 	bl	800be8e <USBD_CtlSendData>
              break;
 800b764:	e004      	b.n	800b770 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fb26 	bl	800bdba <USBD_CtlError>
              break;
 800b76e:	bf00      	nop
          }
          break;
 800b770:	e004      	b.n	800b77c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fb20 	bl	800bdba <USBD_CtlError>
          break;
 800b77a:	bf00      	nop
      }
      break;
 800b77c:	e004      	b.n	800b788 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fb1a 	bl	800bdba <USBD_CtlError>
      break;
 800b786:	bf00      	nop
  }

  return ret;
 800b788:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
	...

0800b794 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	885b      	ldrh	r3, [r3, #2]
 800b7ae:	0a1b      	lsrs	r3, r3, #8
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	2b06      	cmp	r3, #6
 800b7b6:	f200 8128 	bhi.w	800ba0a <USBD_GetDescriptor+0x276>
 800b7ba:	a201      	add	r2, pc, #4	; (adr r2, 800b7c0 <USBD_GetDescriptor+0x2c>)
 800b7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c0:	0800b7dd 	.word	0x0800b7dd
 800b7c4:	0800b7f5 	.word	0x0800b7f5
 800b7c8:	0800b835 	.word	0x0800b835
 800b7cc:	0800ba0b 	.word	0x0800ba0b
 800b7d0:	0800ba0b 	.word	0x0800ba0b
 800b7d4:	0800b9ab 	.word	0x0800b9ab
 800b7d8:	0800b9d7 	.word	0x0800b9d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	7c12      	ldrb	r2, [r2, #16]
 800b7e8:	f107 0108 	add.w	r1, r7, #8
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	4798      	blx	r3
 800b7f0:	60f8      	str	r0, [r7, #12]
      break;
 800b7f2:	e112      	b.n	800ba1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	7c1b      	ldrb	r3, [r3, #16]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10d      	bne.n	800b818 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b804:	f107 0208 	add.w	r2, r7, #8
 800b808:	4610      	mov	r0, r2
 800b80a:	4798      	blx	r3
 800b80c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3301      	adds	r3, #1
 800b812:	2202      	movs	r2, #2
 800b814:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b816:	e100      	b.n	800ba1a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	f107 0208 	add.w	r2, r7, #8
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
 800b828:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3301      	adds	r3, #1
 800b82e:	2202      	movs	r2, #2
 800b830:	701a      	strb	r2, [r3, #0]
      break;
 800b832:	e0f2      	b.n	800ba1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	885b      	ldrh	r3, [r3, #2]
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b05      	cmp	r3, #5
 800b83c:	f200 80ac 	bhi.w	800b998 <USBD_GetDescriptor+0x204>
 800b840:	a201      	add	r2, pc, #4	; (adr r2, 800b848 <USBD_GetDescriptor+0xb4>)
 800b842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b846:	bf00      	nop
 800b848:	0800b861 	.word	0x0800b861
 800b84c:	0800b895 	.word	0x0800b895
 800b850:	0800b8c9 	.word	0x0800b8c9
 800b854:	0800b8fd 	.word	0x0800b8fd
 800b858:	0800b931 	.word	0x0800b931
 800b85c:	0800b965 	.word	0x0800b965
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00b      	beq.n	800b884 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	7c12      	ldrb	r2, [r2, #16]
 800b878:	f107 0108 	add.w	r1, r7, #8
 800b87c:	4610      	mov	r0, r2
 800b87e:	4798      	blx	r3
 800b880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b882:	e091      	b.n	800b9a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fa97 	bl	800bdba <USBD_CtlError>
            err++;
 800b88c:	7afb      	ldrb	r3, [r7, #11]
 800b88e:	3301      	adds	r3, #1
 800b890:	72fb      	strb	r3, [r7, #11]
          break;
 800b892:	e089      	b.n	800b9a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00b      	beq.n	800b8b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	7c12      	ldrb	r2, [r2, #16]
 800b8ac:	f107 0108 	add.w	r1, r7, #8
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	4798      	blx	r3
 800b8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8b6:	e077      	b.n	800b9a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fa7d 	bl	800bdba <USBD_CtlError>
            err++;
 800b8c0:	7afb      	ldrb	r3, [r7, #11]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8c6:	e06f      	b.n	800b9a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00b      	beq.n	800b8ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	7c12      	ldrb	r2, [r2, #16]
 800b8e0:	f107 0108 	add.w	r1, r7, #8
 800b8e4:	4610      	mov	r0, r2
 800b8e6:	4798      	blx	r3
 800b8e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8ea:	e05d      	b.n	800b9a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8ec:	6839      	ldr	r1, [r7, #0]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fa63 	bl	800bdba <USBD_CtlError>
            err++;
 800b8f4:	7afb      	ldrb	r3, [r7, #11]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8fa:	e055      	b.n	800b9a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00b      	beq.n	800b920 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	7c12      	ldrb	r2, [r2, #16]
 800b914:	f107 0108 	add.w	r1, r7, #8
 800b918:	4610      	mov	r0, r2
 800b91a:	4798      	blx	r3
 800b91c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b91e:	e043      	b.n	800b9a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fa49 	bl	800bdba <USBD_CtlError>
            err++;
 800b928:	7afb      	ldrb	r3, [r7, #11]
 800b92a:	3301      	adds	r3, #1
 800b92c:	72fb      	strb	r3, [r7, #11]
          break;
 800b92e:	e03b      	b.n	800b9a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00b      	beq.n	800b954 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	7c12      	ldrb	r2, [r2, #16]
 800b948:	f107 0108 	add.w	r1, r7, #8
 800b94c:	4610      	mov	r0, r2
 800b94e:	4798      	blx	r3
 800b950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b952:	e029      	b.n	800b9a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fa2f 	bl	800bdba <USBD_CtlError>
            err++;
 800b95c:	7afb      	ldrb	r3, [r7, #11]
 800b95e:	3301      	adds	r3, #1
 800b960:	72fb      	strb	r3, [r7, #11]
          break;
 800b962:	e021      	b.n	800b9a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00b      	beq.n	800b988 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b976:	699b      	ldr	r3, [r3, #24]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	7c12      	ldrb	r2, [r2, #16]
 800b97c:	f107 0108 	add.w	r1, r7, #8
 800b980:	4610      	mov	r0, r2
 800b982:	4798      	blx	r3
 800b984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b986:	e00f      	b.n	800b9a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fa15 	bl	800bdba <USBD_CtlError>
            err++;
 800b990:	7afb      	ldrb	r3, [r7, #11]
 800b992:	3301      	adds	r3, #1
 800b994:	72fb      	strb	r3, [r7, #11]
          break;
 800b996:	e007      	b.n	800b9a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fa0d 	bl	800bdba <USBD_CtlError>
          err++;
 800b9a0:	7afb      	ldrb	r3, [r7, #11]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b9a6:	e038      	b.n	800ba1a <USBD_GetDescriptor+0x286>
 800b9a8:	e037      	b.n	800ba1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	7c1b      	ldrb	r3, [r3, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d109      	bne.n	800b9c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ba:	f107 0208 	add.w	r2, r7, #8
 800b9be:	4610      	mov	r0, r2
 800b9c0:	4798      	blx	r3
 800b9c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9c4:	e029      	b.n	800ba1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 f9f6 	bl	800bdba <USBD_CtlError>
        err++;
 800b9ce:	7afb      	ldrb	r3, [r7, #11]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b9d4:	e021      	b.n	800ba1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	7c1b      	ldrb	r3, [r3, #16]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10d      	bne.n	800b9fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e6:	f107 0208 	add.w	r2, r7, #8
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	4798      	blx	r3
 800b9ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	2207      	movs	r2, #7
 800b9f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9f8:	e00f      	b.n	800ba1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f9dc 	bl	800bdba <USBD_CtlError>
        err++;
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	3301      	adds	r3, #1
 800ba06:	72fb      	strb	r3, [r7, #11]
      break;
 800ba08:	e007      	b.n	800ba1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ba0a:	6839      	ldr	r1, [r7, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f9d4 	bl	800bdba <USBD_CtlError>
      err++;
 800ba12:	7afb      	ldrb	r3, [r7, #11]
 800ba14:	3301      	adds	r3, #1
 800ba16:	72fb      	strb	r3, [r7, #11]
      break;
 800ba18:	bf00      	nop
  }

  if (err != 0U)
 800ba1a:	7afb      	ldrb	r3, [r7, #11]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d11c      	bne.n	800ba5a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ba20:	893b      	ldrh	r3, [r7, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d011      	beq.n	800ba4a <USBD_GetDescriptor+0x2b6>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	88db      	ldrh	r3, [r3, #6]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00d      	beq.n	800ba4a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	88da      	ldrh	r2, [r3, #6]
 800ba32:	893b      	ldrh	r3, [r7, #8]
 800ba34:	4293      	cmp	r3, r2
 800ba36:	bf28      	it	cs
 800ba38:	4613      	movcs	r3, r2
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba3e:	893b      	ldrh	r3, [r7, #8]
 800ba40:	461a      	mov	r2, r3
 800ba42:	68f9      	ldr	r1, [r7, #12]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fa22 	bl	800be8e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	88db      	ldrh	r3, [r3, #6]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d104      	bne.n	800ba5c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fa79 	bl	800bf4a <USBD_CtlSendStatus>
 800ba58:	e000      	b.n	800ba5c <USBD_GetDescriptor+0x2c8>
    return;
 800ba5a:	bf00      	nop
    }
  }
}
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop

0800ba64 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	889b      	ldrh	r3, [r3, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d130      	bne.n	800bad8 <USBD_SetAddress+0x74>
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	88db      	ldrh	r3, [r3, #6]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d12c      	bne.n	800bad8 <USBD_SetAddress+0x74>
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	885b      	ldrh	r3, [r3, #2]
 800ba82:	2b7f      	cmp	r3, #127	; 0x7f
 800ba84:	d828      	bhi.n	800bad8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	885b      	ldrh	r3, [r3, #2]
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	d104      	bne.n	800baa6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f98b 	bl	800bdba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baa4:	e01d      	b.n	800bae2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	7bfa      	ldrb	r2, [r7, #15]
 800baaa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800baae:	7bfb      	ldrb	r3, [r7, #15]
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fe4e 	bl	800c754 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fa46 	bl	800bf4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800babe:	7bfb      	ldrb	r3, [r7, #15]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2202      	movs	r2, #2
 800bac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bacc:	e009      	b.n	800bae2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad6:	e004      	b.n	800bae2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 f96d 	bl	800bdba <USBD_CtlError>
  }
}
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
	...

0800baec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	885b      	ldrh	r3, [r3, #2]
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	4b41      	ldr	r3, [pc, #260]	; (800bc04 <USBD_SetConfig+0x118>)
 800bafe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb00:	4b40      	ldr	r3, [pc, #256]	; (800bc04 <USBD_SetConfig+0x118>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d904      	bls.n	800bb12 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f955 	bl	800bdba <USBD_CtlError>
 800bb10:	e075      	b.n	800bbfe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d002      	beq.n	800bb22 <USBD_SetConfig+0x36>
 800bb1c:	2b03      	cmp	r3, #3
 800bb1e:	d023      	beq.n	800bb68 <USBD_SetConfig+0x7c>
 800bb20:	e062      	b.n	800bbe8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bb22:	4b38      	ldr	r3, [pc, #224]	; (800bc04 <USBD_SetConfig+0x118>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d01a      	beq.n	800bb60 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bb2a:	4b36      	ldr	r3, [pc, #216]	; (800bc04 <USBD_SetConfig+0x118>)
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2203      	movs	r2, #3
 800bb38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb3c:	4b31      	ldr	r3, [pc, #196]	; (800bc04 <USBD_SetConfig+0x118>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	4619      	mov	r1, r3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7ff f9e7 	bl	800af16 <USBD_SetClassConfig>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d104      	bne.n	800bb58 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f932 	bl	800bdba <USBD_CtlError>
            return;
 800bb56:	e052      	b.n	800bbfe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f9f6 	bl	800bf4a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bb5e:	e04e      	b.n	800bbfe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f9f2 	bl	800bf4a <USBD_CtlSendStatus>
        break;
 800bb66:	e04a      	b.n	800bbfe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bb68:	4b26      	ldr	r3, [pc, #152]	; (800bc04 <USBD_SetConfig+0x118>)
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d112      	bne.n	800bb96 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2202      	movs	r2, #2
 800bb74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bb78:	4b22      	ldr	r3, [pc, #136]	; (800bc04 <USBD_SetConfig+0x118>)
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bb82:	4b20      	ldr	r3, [pc, #128]	; (800bc04 <USBD_SetConfig+0x118>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7ff f9e3 	bl	800af54 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f9db 	bl	800bf4a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bb94:	e033      	b.n	800bbfe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bb96:	4b1b      	ldr	r3, [pc, #108]	; (800bc04 <USBD_SetConfig+0x118>)
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d01d      	beq.n	800bbe0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	4619      	mov	r1, r3
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7ff f9d1 	bl	800af54 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bbb2:	4b14      	ldr	r3, [pc, #80]	; (800bc04 <USBD_SetConfig+0x118>)
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bbbc:	4b11      	ldr	r3, [pc, #68]	; (800bc04 <USBD_SetConfig+0x118>)
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7ff f9a7 	bl	800af16 <USBD_SetClassConfig>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d104      	bne.n	800bbd8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f8f2 	bl	800bdba <USBD_CtlError>
            return;
 800bbd6:	e012      	b.n	800bbfe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 f9b6 	bl	800bf4a <USBD_CtlSendStatus>
        break;
 800bbde:	e00e      	b.n	800bbfe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f9b2 	bl	800bf4a <USBD_CtlSendStatus>
        break;
 800bbe6:	e00a      	b.n	800bbfe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f8e5 	bl	800bdba <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bbf0:	4b04      	ldr	r3, [pc, #16]	; (800bc04 <USBD_SetConfig+0x118>)
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7ff f9ac 	bl	800af54 <USBD_ClrClassConfig>
        break;
 800bbfc:	bf00      	nop
    }
  }
}
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	200004d0 	.word	0x200004d0

0800bc08 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	88db      	ldrh	r3, [r3, #6]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d004      	beq.n	800bc24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f8cc 	bl	800bdba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc22:	e022      	b.n	800bc6a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	dc02      	bgt.n	800bc34 <USBD_GetConfig+0x2c>
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	dc03      	bgt.n	800bc3a <USBD_GetConfig+0x32>
 800bc32:	e015      	b.n	800bc60 <USBD_GetConfig+0x58>
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	d00b      	beq.n	800bc50 <USBD_GetConfig+0x48>
 800bc38:	e012      	b.n	800bc60 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	3308      	adds	r3, #8
 800bc44:	2201      	movs	r2, #1
 800bc46:	4619      	mov	r1, r3
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f920 	bl	800be8e <USBD_CtlSendData>
        break;
 800bc4e:	e00c      	b.n	800bc6a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	3304      	adds	r3, #4
 800bc54:	2201      	movs	r2, #1
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f918 	bl	800be8e <USBD_CtlSendData>
        break;
 800bc5e:	e004      	b.n	800bc6a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bc60:	6839      	ldr	r1, [r7, #0]
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f8a9 	bl	800bdba <USBD_CtlError>
        break;
 800bc68:	bf00      	nop
}
 800bc6a:	bf00      	nop
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b082      	sub	sp, #8
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc82:	3b01      	subs	r3, #1
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d81e      	bhi.n	800bcc6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	88db      	ldrh	r3, [r3, #6]
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d004      	beq.n	800bc9a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f891 	bl	800bdba <USBD_CtlError>
        break;
 800bc98:	e01a      	b.n	800bcd0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d005      	beq.n	800bcb6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	f043 0202 	orr.w	r2, r3, #2
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	330c      	adds	r3, #12
 800bcba:	2202      	movs	r2, #2
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 f8e5 	bl	800be8e <USBD_CtlSendData>
      break;
 800bcc4:	e004      	b.n	800bcd0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f876 	bl	800bdba <USBD_CtlError>
      break;
 800bcce:	bf00      	nop
  }
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	885b      	ldrh	r3, [r3, #2]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d106      	bne.n	800bcf8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2201      	movs	r2, #1
 800bcee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 f929 	bl	800bf4a <USBD_CtlSendStatus>
  }
}
 800bcf8:	bf00      	nop
 800bcfa:	3708      	adds	r7, #8
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd10:	3b01      	subs	r3, #1
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d80b      	bhi.n	800bd2e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	885b      	ldrh	r3, [r3, #2]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d10c      	bne.n	800bd38 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 f90f 	bl	800bf4a <USBD_CtlSendStatus>
      }
      break;
 800bd2c:	e004      	b.n	800bd38 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 f842 	bl	800bdba <USBD_CtlError>
      break;
 800bd36:	e000      	b.n	800bd3a <USBD_ClrFeature+0x3a>
      break;
 800bd38:	bf00      	nop
  }
}
 800bd3a:	bf00      	nop
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b083      	sub	sp, #12
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	781a      	ldrb	r2, [r3, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	785a      	ldrb	r2, [r3, #1]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	3302      	adds	r3, #2
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	3303      	adds	r3, #3
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	021b      	lsls	r3, r3, #8
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	4413      	add	r3, r2
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	3305      	adds	r3, #5
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	021b      	lsls	r3, r3, #8
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	4413      	add	r3, r2
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	3306      	adds	r3, #6
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	3307      	adds	r3, #7
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	021b      	lsls	r3, r3, #8
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	4413      	add	r3, r2
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	80da      	strh	r2, [r3, #6]

}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bc80      	pop	{r7}
 800bdb8:	4770      	bx	lr

0800bdba <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b082      	sub	sp, #8
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bdc4:	2180      	movs	r1, #128	; 0x80
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fc5a 	bl	800c680 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bdcc:	2100      	movs	r1, #0
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fc56 	bl	800c680 <USBD_LL_StallEP>
}
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b086      	sub	sp, #24
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bde8:	2300      	movs	r3, #0
 800bdea:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d032      	beq.n	800be58 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f000 f834 	bl	800be60 <USBD_GetLen>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	005b      	lsls	r3, r3, #1
 800be00:	b29a      	uxth	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	1c5a      	adds	r2, r3, #1
 800be0a:	75fa      	strb	r2, [r7, #23]
 800be0c:	461a      	mov	r2, r3
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	4413      	add	r3, r2
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	7812      	ldrb	r2, [r2, #0]
 800be16:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800be18:	7dfb      	ldrb	r3, [r7, #23]
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	75fa      	strb	r2, [r7, #23]
 800be1e:	461a      	mov	r2, r3
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4413      	add	r3, r2
 800be24:	2203      	movs	r2, #3
 800be26:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800be28:	e012      	b.n	800be50 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	1c5a      	adds	r2, r3, #1
 800be2e:	60fa      	str	r2, [r7, #12]
 800be30:	7dfa      	ldrb	r2, [r7, #23]
 800be32:	1c51      	adds	r1, r2, #1
 800be34:	75f9      	strb	r1, [r7, #23]
 800be36:	4611      	mov	r1, r2
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	440a      	add	r2, r1
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	75fa      	strb	r2, [r7, #23]
 800be46:	461a      	mov	r2, r3
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	4413      	add	r3, r2
 800be4c:	2200      	movs	r2, #0
 800be4e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1e8      	bne.n	800be2a <USBD_GetString+0x4e>
    }
  }
}
 800be58:	bf00      	nop
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be60:	b480      	push	{r7}
 800be62:	b085      	sub	sp, #20
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be68:	2300      	movs	r3, #0
 800be6a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800be6c:	e005      	b.n	800be7a <USBD_GetLen+0x1a>
  {
    len++;
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
 800be70:	3301      	adds	r3, #1
 800be72:	73fb      	strb	r3, [r7, #15]
    buf++;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3301      	adds	r3, #1
 800be78:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1f5      	bne.n	800be6e <USBD_GetLen+0xe>
  }

  return len;
 800be82:	7bfb      	ldrb	r3, [r7, #15]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	bc80      	pop	{r7}
 800be8c:	4770      	bx	lr

0800be8e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b084      	sub	sp, #16
 800be92:	af00      	add	r7, sp, #0
 800be94:	60f8      	str	r0, [r7, #12]
 800be96:	60b9      	str	r1, [r7, #8]
 800be98:	4613      	mov	r3, r2
 800be9a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2202      	movs	r2, #2
 800bea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bea4:	88fa      	ldrh	r2, [r7, #6]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800beaa:	88fa      	ldrh	r2, [r7, #6]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800beb0:	88fb      	ldrh	r3, [r7, #6]
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	2100      	movs	r1, #0
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f000 fc6b 	bl	800c792 <USBD_LL_Transmit>

  return USBD_OK;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b084      	sub	sp, #16
 800beca:	af00      	add	r7, sp, #0
 800becc:	60f8      	str	r0, [r7, #12]
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	4613      	mov	r3, r2
 800bed2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bed4:	88fb      	ldrh	r3, [r7, #6]
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	2100      	movs	r1, #0
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 fc59 	bl	800c792 <USBD_LL_Transmit>

  return USBD_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b084      	sub	sp, #16
 800beee:	af00      	add	r7, sp, #0
 800bef0:	60f8      	str	r0, [r7, #12]
 800bef2:	60b9      	str	r1, [r7, #8]
 800bef4:	4613      	mov	r3, r2
 800bef6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2203      	movs	r2, #3
 800befc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf00:	88fa      	ldrh	r2, [r7, #6]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bf08:	88fa      	ldrh	r2, [r7, #6]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf10:	88fb      	ldrh	r3, [r7, #6]
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	2100      	movs	r1, #0
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 fc5e 	bl	800c7d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	4613      	mov	r3, r2
 800bf32:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf34:	88fb      	ldrh	r3, [r7, #6]
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	2100      	movs	r1, #0
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f000 fc4c 	bl	800c7d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2204      	movs	r2, #4
 800bf56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	2100      	movs	r1, #0
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fc16 	bl	800c792 <USBD_LL_Transmit>

  return USBD_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2205      	movs	r2, #5
 800bf7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf80:	2300      	movs	r3, #0
 800bf82:	2200      	movs	r2, #0
 800bf84:	2100      	movs	r1, #0
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fc26 	bl	800c7d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4912      	ldr	r1, [pc, #72]	; (800bfe8 <MX_USB_DEVICE_Init+0x50>)
 800bfa0:	4812      	ldr	r0, [pc, #72]	; (800bfec <MX_USB_DEVICE_Init+0x54>)
 800bfa2:	f7fe ff5e 	bl	800ae62 <USBD_Init>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d001      	beq.n	800bfb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bfac:	f7f7 f8c6 	bl	800313c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bfb0:	490f      	ldr	r1, [pc, #60]	; (800bff0 <MX_USB_DEVICE_Init+0x58>)
 800bfb2:	480e      	ldr	r0, [pc, #56]	; (800bfec <MX_USB_DEVICE_Init+0x54>)
 800bfb4:	f7fe ff80 	bl	800aeb8 <USBD_RegisterClass>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d001      	beq.n	800bfc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bfbe:	f7f7 f8bd 	bl	800313c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bfc2:	490c      	ldr	r1, [pc, #48]	; (800bff4 <MX_USB_DEVICE_Init+0x5c>)
 800bfc4:	4809      	ldr	r0, [pc, #36]	; (800bfec <MX_USB_DEVICE_Init+0x54>)
 800bfc6:	f7fe feb1 	bl	800ad2c <USBD_CDC_RegisterInterface>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bfd0:	f7f7 f8b4 	bl	800313c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bfd4:	4805      	ldr	r0, [pc, #20]	; (800bfec <MX_USB_DEVICE_Init+0x54>)
 800bfd6:	f7fe ff88 	bl	800aeea <USBD_Start>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bfe0:	f7f7 f8ac 	bl	800313c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bfe4:	bf00      	nop
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20000154 	.word	0x20000154
 800bfec:	200004d4 	.word	0x200004d4
 800bff0:	20000040 	.word	0x20000040
 800bff4:	20000144 	.word	0x20000144

0800bff8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bffc:	2200      	movs	r2, #0
 800bffe:	4905      	ldr	r1, [pc, #20]	; (800c014 <CDC_Init_FS+0x1c>)
 800c000:	4805      	ldr	r0, [pc, #20]	; (800c018 <CDC_Init_FS+0x20>)
 800c002:	f7fe fea9 	bl	800ad58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c006:	4905      	ldr	r1, [pc, #20]	; (800c01c <CDC_Init_FS+0x24>)
 800c008:	4803      	ldr	r0, [pc, #12]	; (800c018 <CDC_Init_FS+0x20>)
 800c00a:	f7fe febe 	bl	800ad8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c00e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c010:	4618      	mov	r0, r3
 800c012:	bd80      	pop	{r7, pc}
 800c014:	20000b80 	.word	0x20000b80
 800c018:	200004d4 	.word	0x200004d4
 800c01c:	20000798 	.word	0x20000798

0800c020 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c020:	b480      	push	{r7}
 800c022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c024:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c026:	4618      	mov	r0, r3
 800c028:	46bd      	mov	sp, r7
 800c02a:	bc80      	pop	{r7}
 800c02c:	4770      	bx	lr
	...

0800c030 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	6039      	str	r1, [r7, #0]
 800c03a:	71fb      	strb	r3, [r7, #7]
 800c03c:	4613      	mov	r3, r2
 800c03e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c040:	79fb      	ldrb	r3, [r7, #7]
 800c042:	2b23      	cmp	r3, #35	; 0x23
 800c044:	d84a      	bhi.n	800c0dc <CDC_Control_FS+0xac>
 800c046:	a201      	add	r2, pc, #4	; (adr r2, 800c04c <CDC_Control_FS+0x1c>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c0dd 	.word	0x0800c0dd
 800c050:	0800c0dd 	.word	0x0800c0dd
 800c054:	0800c0dd 	.word	0x0800c0dd
 800c058:	0800c0dd 	.word	0x0800c0dd
 800c05c:	0800c0dd 	.word	0x0800c0dd
 800c060:	0800c0dd 	.word	0x0800c0dd
 800c064:	0800c0dd 	.word	0x0800c0dd
 800c068:	0800c0dd 	.word	0x0800c0dd
 800c06c:	0800c0dd 	.word	0x0800c0dd
 800c070:	0800c0dd 	.word	0x0800c0dd
 800c074:	0800c0dd 	.word	0x0800c0dd
 800c078:	0800c0dd 	.word	0x0800c0dd
 800c07c:	0800c0dd 	.word	0x0800c0dd
 800c080:	0800c0dd 	.word	0x0800c0dd
 800c084:	0800c0dd 	.word	0x0800c0dd
 800c088:	0800c0dd 	.word	0x0800c0dd
 800c08c:	0800c0dd 	.word	0x0800c0dd
 800c090:	0800c0dd 	.word	0x0800c0dd
 800c094:	0800c0dd 	.word	0x0800c0dd
 800c098:	0800c0dd 	.word	0x0800c0dd
 800c09c:	0800c0dd 	.word	0x0800c0dd
 800c0a0:	0800c0dd 	.word	0x0800c0dd
 800c0a4:	0800c0dd 	.word	0x0800c0dd
 800c0a8:	0800c0dd 	.word	0x0800c0dd
 800c0ac:	0800c0dd 	.word	0x0800c0dd
 800c0b0:	0800c0dd 	.word	0x0800c0dd
 800c0b4:	0800c0dd 	.word	0x0800c0dd
 800c0b8:	0800c0dd 	.word	0x0800c0dd
 800c0bc:	0800c0dd 	.word	0x0800c0dd
 800c0c0:	0800c0dd 	.word	0x0800c0dd
 800c0c4:	0800c0dd 	.word	0x0800c0dd
 800c0c8:	0800c0dd 	.word	0x0800c0dd
 800c0cc:	0800c0dd 	.word	0x0800c0dd
 800c0d0:	0800c0dd 	.word	0x0800c0dd
 800c0d4:	0800c0dd 	.word	0x0800c0dd
 800c0d8:	0800c0dd 	.word	0x0800c0dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c0dc:	bf00      	nop
  }

  return (USBD_OK);
 800c0de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bc80      	pop	{r7}
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop

0800c0ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c0f6:	6879      	ldr	r1, [r7, #4]
 800c0f8:	4808      	ldr	r0, [pc, #32]	; (800c11c <CDC_Receive_FS+0x30>)
 800c0fa:	f7fe fe46 	bl	800ad8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c0fe:	4807      	ldr	r0, [pc, #28]	; (800c11c <CDC_Receive_FS+0x30>)
 800c100:	f7fe fe85 	bl	800ae0e <USBD_CDC_ReceivePacket>
USB_Packet_Received(&Buf[0], Len[0]);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4619      	mov	r1, r3
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7f6 fb2c 	bl	8002768 <USB_Packet_Received>
  return (USBD_OK);
 800c110:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	200004d4 	.word	0x200004d4

0800c120 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c130:	4b0d      	ldr	r3, [pc, #52]	; (800c168 <CDC_Transmit_FS+0x48>)
 800c132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c136:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c142:	2301      	movs	r3, #1
 800c144:	e00b      	b.n	800c15e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c146:	887b      	ldrh	r3, [r7, #2]
 800c148:	461a      	mov	r2, r3
 800c14a:	6879      	ldr	r1, [r7, #4]
 800c14c:	4806      	ldr	r0, [pc, #24]	; (800c168 <CDC_Transmit_FS+0x48>)
 800c14e:	f7fe fe03 	bl	800ad58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c152:	4805      	ldr	r0, [pc, #20]	; (800c168 <CDC_Transmit_FS+0x48>)
 800c154:	f7fe fe2c 	bl	800adb0 <USBD_CDC_TransmitPacket>
 800c158:	4603      	mov	r3, r0
 800c15a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	200004d4 	.word	0x200004d4

0800c16c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	6039      	str	r1, [r7, #0]
 800c176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	2212      	movs	r2, #18
 800c17c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c17e:	4b03      	ldr	r3, [pc, #12]	; (800c18c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c180:	4618      	mov	r0, r3
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	bc80      	pop	{r7}
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	20000170 	.word	0x20000170

0800c190 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	6039      	str	r1, [r7, #0]
 800c19a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	2204      	movs	r2, #4
 800c1a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c1a2:	4b03      	ldr	r3, [pc, #12]	; (800c1b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bc80      	pop	{r7}
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	20000184 	.word	0x20000184

0800c1b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	6039      	str	r1, [r7, #0]
 800c1be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d105      	bne.n	800c1d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	4907      	ldr	r1, [pc, #28]	; (800c1e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1ca:	4808      	ldr	r0, [pc, #32]	; (800c1ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c1cc:	f7ff fe06 	bl	800bddc <USBD_GetString>
 800c1d0:	e004      	b.n	800c1dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	4904      	ldr	r1, [pc, #16]	; (800c1e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1d6:	4805      	ldr	r0, [pc, #20]	; (800c1ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c1d8:	f7ff fe00 	bl	800bddc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1dc:	4b02      	ldr	r3, [pc, #8]	; (800c1e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20000f68 	.word	0x20000f68
 800c1ec:	0800c988 	.word	0x0800c988

0800c1f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	6039      	str	r1, [r7, #0]
 800c1fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	4904      	ldr	r1, [pc, #16]	; (800c210 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c200:	4804      	ldr	r0, [pc, #16]	; (800c214 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c202:	f7ff fdeb 	bl	800bddc <USBD_GetString>
  return USBD_StrDesc;
 800c206:	4b02      	ldr	r3, [pc, #8]	; (800c210 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	20000f68 	.word	0x20000f68
 800c214:	0800c99c 	.word	0x0800c99c

0800c218 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	6039      	str	r1, [r7, #0]
 800c222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	221a      	movs	r2, #26
 800c228:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c22a:	f000 f843 	bl	800c2b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c22e:	4b02      	ldr	r3, [pc, #8]	; (800c238 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c230:	4618      	mov	r0, r3
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	20000188 	.word	0x20000188

0800c23c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	4603      	mov	r3, r0
 800c244:	6039      	str	r1, [r7, #0]
 800c246:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c248:	79fb      	ldrb	r3, [r7, #7]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d105      	bne.n	800c25a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	4907      	ldr	r1, [pc, #28]	; (800c270 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c252:	4808      	ldr	r0, [pc, #32]	; (800c274 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c254:	f7ff fdc2 	bl	800bddc <USBD_GetString>
 800c258:	e004      	b.n	800c264 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	4904      	ldr	r1, [pc, #16]	; (800c270 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c25e:	4805      	ldr	r0, [pc, #20]	; (800c274 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c260:	f7ff fdbc 	bl	800bddc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c264:	4b02      	ldr	r3, [pc, #8]	; (800c270 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20000f68 	.word	0x20000f68
 800c274:	0800c9b0 	.word	0x0800c9b0

0800c278 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	4603      	mov	r3, r0
 800c280:	6039      	str	r1, [r7, #0]
 800c282:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c284:	79fb      	ldrb	r3, [r7, #7]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d105      	bne.n	800c296 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	4907      	ldr	r1, [pc, #28]	; (800c2ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c28e:	4808      	ldr	r0, [pc, #32]	; (800c2b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c290:	f7ff fda4 	bl	800bddc <USBD_GetString>
 800c294:	e004      	b.n	800c2a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	4904      	ldr	r1, [pc, #16]	; (800c2ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c29a:	4805      	ldr	r0, [pc, #20]	; (800c2b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c29c:	f7ff fd9e 	bl	800bddc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2a0:	4b02      	ldr	r3, [pc, #8]	; (800c2ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20000f68 	.word	0x20000f68
 800c2b0:	0800c9bc 	.word	0x0800c9bc

0800c2b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c2ba:	4b0f      	ldr	r3, [pc, #60]	; (800c2f8 <Get_SerialNum+0x44>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c2c0:	4b0e      	ldr	r3, [pc, #56]	; (800c2fc <Get_SerialNum+0x48>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c2c6:	4b0e      	ldr	r3, [pc, #56]	; (800c300 <Get_SerialNum+0x4c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d009      	beq.n	800c2ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c2da:	2208      	movs	r2, #8
 800c2dc:	4909      	ldr	r1, [pc, #36]	; (800c304 <Get_SerialNum+0x50>)
 800c2de:	68f8      	ldr	r0, [r7, #12]
 800c2e0:	f000 f814 	bl	800c30c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c2e4:	2204      	movs	r2, #4
 800c2e6:	4908      	ldr	r1, [pc, #32]	; (800c308 <Get_SerialNum+0x54>)
 800c2e8:	68b8      	ldr	r0, [r7, #8]
 800c2ea:	f000 f80f 	bl	800c30c <IntToUnicode>
  }
}
 800c2ee:	bf00      	nop
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	1ffff7e8 	.word	0x1ffff7e8
 800c2fc:	1ffff7ec 	.word	0x1ffff7ec
 800c300:	1ffff7f0 	.word	0x1ffff7f0
 800c304:	2000018a 	.word	0x2000018a
 800c308:	2000019a 	.word	0x2000019a

0800c30c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	4613      	mov	r3, r2
 800c318:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c31e:	2300      	movs	r3, #0
 800c320:	75fb      	strb	r3, [r7, #23]
 800c322:	e027      	b.n	800c374 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	0f1b      	lsrs	r3, r3, #28
 800c328:	2b09      	cmp	r3, #9
 800c32a:	d80b      	bhi.n	800c344 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	0f1b      	lsrs	r3, r3, #28
 800c330:	b2da      	uxtb	r2, r3
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	4619      	mov	r1, r3
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	440b      	add	r3, r1
 800c33c:	3230      	adds	r2, #48	; 0x30
 800c33e:	b2d2      	uxtb	r2, r2
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	e00a      	b.n	800c35a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	0f1b      	lsrs	r3, r3, #28
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	4619      	mov	r1, r3
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	440b      	add	r3, r1
 800c354:	3237      	adds	r2, #55	; 0x37
 800c356:	b2d2      	uxtb	r2, r2
 800c358:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	011b      	lsls	r3, r3, #4
 800c35e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c360:	7dfb      	ldrb	r3, [r7, #23]
 800c362:	005b      	lsls	r3, r3, #1
 800c364:	3301      	adds	r3, #1
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	4413      	add	r3, r2
 800c36a:	2200      	movs	r2, #0
 800c36c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c36e:	7dfb      	ldrb	r3, [r7, #23]
 800c370:	3301      	adds	r3, #1
 800c372:	75fb      	strb	r3, [r7, #23]
 800c374:	7dfa      	ldrb	r2, [r7, #23]
 800c376:	79fb      	ldrb	r3, [r7, #7]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d3d3      	bcc.n	800c324 <IntToUnicode+0x18>
  }
}
 800c37c:	bf00      	nop
 800c37e:	bf00      	nop
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	bc80      	pop	{r7}
 800c386:	4770      	bx	lr

0800c388 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a0d      	ldr	r2, [pc, #52]	; (800c3cc <HAL_PCD_MspInit+0x44>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d113      	bne.n	800c3c2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c39a:	4b0d      	ldr	r3, [pc, #52]	; (800c3d0 <HAL_PCD_MspInit+0x48>)
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	4a0c      	ldr	r2, [pc, #48]	; (800c3d0 <HAL_PCD_MspInit+0x48>)
 800c3a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c3a4:	61d3      	str	r3, [r2, #28]
 800c3a6:	4b0a      	ldr	r3, [pc, #40]	; (800c3d0 <HAL_PCD_MspInit+0x48>)
 800c3a8:	69db      	ldr	r3, [r3, #28]
 800c3aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3ae:	60fb      	str	r3, [r7, #12]
 800c3b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2103      	movs	r1, #3
 800c3b6:	2014      	movs	r0, #20
 800c3b8:	f7f7 fe4b 	bl	8004052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c3bc:	2014      	movs	r0, #20
 800c3be:	f7f7 fe64 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c3c2:	bf00      	nop
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	40005c00 	.word	0x40005c00
 800c3d0:	40021000 	.word	0x40021000

0800c3d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	f7fe fdc5 	bl	800af7a <USBD_LL_SetupStage>
}
 800c3f0:	bf00      	nop
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c40a:	78fa      	ldrb	r2, [r7, #3]
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	4613      	mov	r3, r2
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	4413      	add	r3, r2
 800c414:	00db      	lsls	r3, r3, #3
 800c416:	440b      	add	r3, r1
 800c418:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	78fb      	ldrb	r3, [r7, #3]
 800c420:	4619      	mov	r1, r3
 800c422:	f7fe fdf7 	bl	800b014 <USBD_LL_DataOutStage>
}
 800c426:	bf00      	nop
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b082      	sub	sp, #8
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	460b      	mov	r3, r1
 800c438:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c440:	78fa      	ldrb	r2, [r7, #3]
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	4613      	mov	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	00db      	lsls	r3, r3, #3
 800c44c:	440b      	add	r3, r1
 800c44e:	333c      	adds	r3, #60	; 0x3c
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	78fb      	ldrb	r3, [r7, #3]
 800c454:	4619      	mov	r1, r3
 800c456:	f7fe fe4e 	bl	800b0f6 <USBD_LL_DataInStage>
}
 800c45a:	bf00      	nop
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b082      	sub	sp, #8
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c470:	4618      	mov	r0, r3
 800c472:	f7fe ff5e 	bl	800b332 <USBD_LL_SOF>
}
 800c476:	bf00      	nop
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c486:	2301      	movs	r3, #1
 800c488:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d001      	beq.n	800c496 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c492:	f7f6 fe53 	bl	800313c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c49c:	7bfa      	ldrb	r2, [r7, #15]
 800c49e:	4611      	mov	r1, r2
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7fe ff0e 	bl	800b2c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fe fec7 	bl	800b240 <USBD_LL_Reset>
}
 800c4b2:	bf00      	nop
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
	...

0800c4bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fe ff08 	bl	800b2e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d005      	beq.n	800c4e4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c4d8:	4b04      	ldr	r3, [pc, #16]	; (800c4ec <HAL_PCD_SuspendCallback+0x30>)
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	4a03      	ldr	r2, [pc, #12]	; (800c4ec <HAL_PCD_SuspendCallback+0x30>)
 800c4de:	f043 0306 	orr.w	r3, r3, #6
 800c4e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c4e4:	bf00      	nop
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	e000ed00 	.word	0xe000ed00

0800c4f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe ff02 	bl	800b308 <USBD_LL_Resume>
}
 800c504:	bf00      	nop
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c514:	4a28      	ldr	r2, [pc, #160]	; (800c5b8 <USBD_LL_Init+0xac>)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4a26      	ldr	r2, [pc, #152]	; (800c5b8 <USBD_LL_Init+0xac>)
 800c520:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c524:	4b24      	ldr	r3, [pc, #144]	; (800c5b8 <USBD_LL_Init+0xac>)
 800c526:	4a25      	ldr	r2, [pc, #148]	; (800c5bc <USBD_LL_Init+0xb0>)
 800c528:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c52a:	4b23      	ldr	r3, [pc, #140]	; (800c5b8 <USBD_LL_Init+0xac>)
 800c52c:	2208      	movs	r2, #8
 800c52e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c530:	4b21      	ldr	r3, [pc, #132]	; (800c5b8 <USBD_LL_Init+0xac>)
 800c532:	2202      	movs	r2, #2
 800c534:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c536:	4b20      	ldr	r3, [pc, #128]	; (800c5b8 <USBD_LL_Init+0xac>)
 800c538:	2200      	movs	r2, #0
 800c53a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c53c:	4b1e      	ldr	r3, [pc, #120]	; (800c5b8 <USBD_LL_Init+0xac>)
 800c53e:	2200      	movs	r2, #0
 800c540:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c542:	4b1d      	ldr	r3, [pc, #116]	; (800c5b8 <USBD_LL_Init+0xac>)
 800c544:	2200      	movs	r2, #0
 800c546:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c548:	481b      	ldr	r0, [pc, #108]	; (800c5b8 <USBD_LL_Init+0xac>)
 800c54a:	f7f8 f9d3 	bl	80048f4 <HAL_PCD_Init>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d001      	beq.n	800c558 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c554:	f7f6 fdf2 	bl	800313c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c55e:	2318      	movs	r3, #24
 800c560:	2200      	movs	r2, #0
 800c562:	2100      	movs	r1, #0
 800c564:	f7f9 fe47 	bl	80061f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c56e:	2358      	movs	r3, #88	; 0x58
 800c570:	2200      	movs	r2, #0
 800c572:	2180      	movs	r1, #128	; 0x80
 800c574:	f7f9 fe3f 	bl	80061f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c57e:	23c0      	movs	r3, #192	; 0xc0
 800c580:	2200      	movs	r2, #0
 800c582:	2181      	movs	r1, #129	; 0x81
 800c584:	f7f9 fe37 	bl	80061f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c58e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c592:	2200      	movs	r2, #0
 800c594:	2101      	movs	r1, #1
 800c596:	f7f9 fe2e 	bl	80061f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c5a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2182      	movs	r1, #130	; 0x82
 800c5a8:	f7f9 fe25 	bl	80061f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20001168 	.word	0x20001168
 800c5bc:	40005c00 	.word	0x40005c00

0800c5c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7f8 fa97 	bl	8004b0a <HAL_PCD_Start>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 f94e 	bl	800c884 <USBD_Get_USB_Status>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b084      	sub	sp, #16
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	4608      	mov	r0, r1
 800c600:	4611      	mov	r1, r2
 800c602:	461a      	mov	r2, r3
 800c604:	4603      	mov	r3, r0
 800c606:	70fb      	strb	r3, [r7, #3]
 800c608:	460b      	mov	r3, r1
 800c60a:	70bb      	strb	r3, [r7, #2]
 800c60c:	4613      	mov	r3, r2
 800c60e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c610:	2300      	movs	r3, #0
 800c612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c61e:	78bb      	ldrb	r3, [r7, #2]
 800c620:	883a      	ldrh	r2, [r7, #0]
 800c622:	78f9      	ldrb	r1, [r7, #3]
 800c624:	f7f8 fc0f 	bl	8004e46 <HAL_PCD_EP_Open>
 800c628:	4603      	mov	r3, r0
 800c62a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c62c:	7bfb      	ldrb	r3, [r7, #15]
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 f928 	bl	800c884 <USBD_Get_USB_Status>
 800c634:	4603      	mov	r3, r0
 800c636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c638:	7bbb      	ldrb	r3, [r7, #14]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	460b      	mov	r3, r1
 800c64c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c652:	2300      	movs	r3, #0
 800c654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c65c:	78fa      	ldrb	r2, [r7, #3]
 800c65e:	4611      	mov	r1, r2
 800c660:	4618      	mov	r0, r3
 800c662:	f7f8 fc56 	bl	8004f12 <HAL_PCD_EP_Close>
 800c666:	4603      	mov	r3, r0
 800c668:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c66a:	7bfb      	ldrb	r3, [r7, #15]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 f909 	bl	800c884 <USBD_Get_USB_Status>
 800c672:	4603      	mov	r3, r0
 800c674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c676:	7bbb      	ldrb	r3, [r7, #14]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c68c:	2300      	movs	r3, #0
 800c68e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c690:	2300      	movs	r3, #0
 800c692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c69a:	78fa      	ldrb	r2, [r7, #3]
 800c69c:	4611      	mov	r1, r2
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7f8 fd16 	bl	80050d0 <HAL_PCD_EP_SetStall>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6a8:	7bfb      	ldrb	r3, [r7, #15]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 f8ea 	bl	800c884 <USBD_Get_USB_Status>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b084      	sub	sp, #16
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6d8:	78fa      	ldrb	r2, [r7, #3]
 800c6da:	4611      	mov	r1, r2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7f8 fd57 	bl	8005190 <HAL_PCD_EP_ClrStall>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6e6:	7bfb      	ldrb	r3, [r7, #15]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 f8cb 	bl	800c884 <USBD_Get_USB_Status>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	460b      	mov	r3, r1
 800c706:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c70e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c714:	2b00      	cmp	r3, #0
 800c716:	da0c      	bge.n	800c732 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c718:	78fb      	ldrb	r3, [r7, #3]
 800c71a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c71e:	68f9      	ldr	r1, [r7, #12]
 800c720:	1c5a      	adds	r2, r3, #1
 800c722:	4613      	mov	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	00db      	lsls	r3, r3, #3
 800c72a:	440b      	add	r3, r1
 800c72c:	3302      	adds	r3, #2
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	e00b      	b.n	800c74a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c732:	78fb      	ldrb	r3, [r7, #3]
 800c734:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c738:	68f9      	ldr	r1, [r7, #12]
 800c73a:	4613      	mov	r3, r2
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	00db      	lsls	r3, r3, #3
 800c742:	440b      	add	r3, r1
 800c744:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c748:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	bc80      	pop	{r7}
 800c752:	4770      	bx	lr

0800c754 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c76e:	78fa      	ldrb	r2, [r7, #3]
 800c770:	4611      	mov	r1, r2
 800c772:	4618      	mov	r0, r3
 800c774:	f7f8 fb42 	bl	8004dfc <HAL_PCD_SetAddress>
 800c778:	4603      	mov	r3, r0
 800c77a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 f880 	bl	800c884 <USBD_Get_USB_Status>
 800c784:	4603      	mov	r3, r0
 800c786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c788:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b086      	sub	sp, #24
 800c796:	af00      	add	r7, sp, #0
 800c798:	60f8      	str	r0, [r7, #12]
 800c79a:	607a      	str	r2, [r7, #4]
 800c79c:	461a      	mov	r2, r3
 800c79e:	460b      	mov	r3, r1
 800c7a0:	72fb      	strb	r3, [r7, #11]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c7b4:	893b      	ldrh	r3, [r7, #8]
 800c7b6:	7af9      	ldrb	r1, [r7, #11]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	f7f8 fc46 	bl	800504a <HAL_PCD_EP_Transmit>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f000 f85d 	bl	800c884 <USBD_Get_USB_Status>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c7ce:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3718      	adds	r7, #24
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	607a      	str	r2, [r7, #4]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	72fb      	strb	r3, [r7, #11]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c7fa:	893b      	ldrh	r3, [r7, #8]
 800c7fc:	7af9      	ldrb	r1, [r7, #11]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	f7f8 fbcf 	bl	8004fa2 <HAL_PCD_EP_Receive>
 800c804:	4603      	mov	r3, r0
 800c806:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c808:	7dfb      	ldrb	r3, [r7, #23]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 f83a 	bl	800c884 <USBD_Get_USB_Status>
 800c810:	4603      	mov	r3, r0
 800c812:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c814:	7dbb      	ldrb	r3, [r7, #22]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3718      	adds	r7, #24
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b082      	sub	sp, #8
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	460b      	mov	r3, r1
 800c828:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c830:	78fa      	ldrb	r2, [r7, #3]
 800c832:	4611      	mov	r1, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f7f8 fbf1 	bl	800501c <HAL_PCD_EP_GetRxCount>
 800c83a:	4603      	mov	r3, r0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c84c:	4b02      	ldr	r3, [pc, #8]	; (800c858 <USBD_static_malloc+0x14>)
}
 800c84e:	4618      	mov	r0, r3
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	bc80      	pop	{r7}
 800c856:	4770      	bx	lr
 800c858:	20001454 	.word	0x20001454

0800c85c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]

}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	bc80      	pop	{r7}
 800c86c:	4770      	bx	lr

0800c86e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c86e:	b480      	push	{r7}
 800c870:	b083      	sub	sp, #12
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	460b      	mov	r3, r1
 800c878:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c87a:	bf00      	nop
 800c87c:	370c      	adds	r7, #12
 800c87e:	46bd      	mov	sp, r7
 800c880:	bc80      	pop	{r7}
 800c882:	4770      	bx	lr

0800c884 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	4603      	mov	r3, r0
 800c88c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c892:	79fb      	ldrb	r3, [r7, #7]
 800c894:	2b03      	cmp	r3, #3
 800c896:	d817      	bhi.n	800c8c8 <USBD_Get_USB_Status+0x44>
 800c898:	a201      	add	r2, pc, #4	; (adr r2, 800c8a0 <USBD_Get_USB_Status+0x1c>)
 800c89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89e:	bf00      	nop
 800c8a0:	0800c8b1 	.word	0x0800c8b1
 800c8a4:	0800c8b7 	.word	0x0800c8b7
 800c8a8:	0800c8bd 	.word	0x0800c8bd
 800c8ac:	0800c8c3 	.word	0x0800c8c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b4:	e00b      	b.n	800c8ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c8ba:	e008      	b.n	800c8ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c0:	e005      	b.n	800c8ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c6:	e002      	b.n	800c8ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c8c8:	2302      	movs	r3, #2
 800c8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c8cc:	bf00      	nop
  }
  return usb_status;
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bc80      	pop	{r7}
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop

0800c8dc <__libc_init_array>:
 800c8dc:	b570      	push	{r4, r5, r6, lr}
 800c8de:	2600      	movs	r6, #0
 800c8e0:	4d0c      	ldr	r5, [pc, #48]	; (800c914 <__libc_init_array+0x38>)
 800c8e2:	4c0d      	ldr	r4, [pc, #52]	; (800c918 <__libc_init_array+0x3c>)
 800c8e4:	1b64      	subs	r4, r4, r5
 800c8e6:	10a4      	asrs	r4, r4, #2
 800c8e8:	42a6      	cmp	r6, r4
 800c8ea:	d109      	bne.n	800c900 <__libc_init_array+0x24>
 800c8ec:	f000 f830 	bl	800c950 <_init>
 800c8f0:	2600      	movs	r6, #0
 800c8f2:	4d0a      	ldr	r5, [pc, #40]	; (800c91c <__libc_init_array+0x40>)
 800c8f4:	4c0a      	ldr	r4, [pc, #40]	; (800c920 <__libc_init_array+0x44>)
 800c8f6:	1b64      	subs	r4, r4, r5
 800c8f8:	10a4      	asrs	r4, r4, #2
 800c8fa:	42a6      	cmp	r6, r4
 800c8fc:	d105      	bne.n	800c90a <__libc_init_array+0x2e>
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}
 800c900:	f855 3b04 	ldr.w	r3, [r5], #4
 800c904:	4798      	blx	r3
 800c906:	3601      	adds	r6, #1
 800c908:	e7ee      	b.n	800c8e8 <__libc_init_array+0xc>
 800c90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c90e:	4798      	blx	r3
 800c910:	3601      	adds	r6, #1
 800c912:	e7f2      	b.n	800c8fa <__libc_init_array+0x1e>
 800c914:	0800c9e4 	.word	0x0800c9e4
 800c918:	0800c9e4 	.word	0x0800c9e4
 800c91c:	0800c9e4 	.word	0x0800c9e4
 800c920:	0800c9e8 	.word	0x0800c9e8

0800c924 <memcpy>:
 800c924:	440a      	add	r2, r1
 800c926:	4291      	cmp	r1, r2
 800c928:	f100 33ff 	add.w	r3, r0, #4294967295
 800c92c:	d100      	bne.n	800c930 <memcpy+0xc>
 800c92e:	4770      	bx	lr
 800c930:	b510      	push	{r4, lr}
 800c932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c936:	4291      	cmp	r1, r2
 800c938:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c93c:	d1f9      	bne.n	800c932 <memcpy+0xe>
 800c93e:	bd10      	pop	{r4, pc}

0800c940 <memset>:
 800c940:	4603      	mov	r3, r0
 800c942:	4402      	add	r2, r0
 800c944:	4293      	cmp	r3, r2
 800c946:	d100      	bne.n	800c94a <memset+0xa>
 800c948:	4770      	bx	lr
 800c94a:	f803 1b01 	strb.w	r1, [r3], #1
 800c94e:	e7f9      	b.n	800c944 <memset+0x4>

0800c950 <_init>:
 800c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c952:	bf00      	nop
 800c954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c956:	bc08      	pop	{r3}
 800c958:	469e      	mov	lr, r3
 800c95a:	4770      	bx	lr

0800c95c <_fini>:
 800c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95e:	bf00      	nop
 800c960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c962:	bc08      	pop	{r3}
 800c964:	469e      	mov	lr, r3
 800c966:	4770      	bx	lr
